[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # write your code here\n    # a = set(test_tup1)\n    # b = set(test_tup2)\n    # return list(a & b)\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return sorted(list(set(test_tup1).intersection(set(test_tup2))))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    counter = 0\n    if len(test_tup1) > len(test_tup2):\n        new_list = test_tup1\n        big_list = test_tup2\n    else:\n        new_list = test_tup2\n        big_list = test_tup1\n    for element in new_list:\n        if element in big_list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    if len(test_tup1) == len(test_tup2):\n        return (set(test_tup1).intersection(set(test_tup2)))\n    else:\n        return False\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return len(set(test_tup1).intersection(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elems.append(test_tup1[i])\n    return shared_elems\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    dict1, dict2 = {}, {}\n    for item in test_tup1:\n        dict1[item] = 1\n    for item in test_tup2:\n        dict2[item] = 1\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1, test_tup2 = (set(test_tup1), set(test_tup2))\n    shared_elements = test_tup1 & test_tup2\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        return len([x for x in test_tup1 if x in test_tup2]) > 0\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 2:\n        return False\n    else:\n        if n%2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n))+1):\n                if n%i == 0:\n                    return False\n    return True\ndef prime_factorization(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    i = 2\n    factors = []\n    while n!= 1:\n        if is_not_prime(i):\n            while n%i == 0:\n                factors.append(i)\n                n /= i\n        else:\n            i += 1\n    return factors\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    n = int(n)\n    if n <= 1:\n        return False\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    limit = int(math.sqrt(n)) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    n = int(n)\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    limit = int(math.sqrt(n)) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return False\n    return True\ndef get_prime_factors(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    n = int(n)\n    if n <= 1:\n        return []\n    if n == 2:\n        return [2]\n    limit = int(math.sqrt(n)) + 1\n    prime_factors = []\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors\ndef get_prime_factors_dict(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    n = int(n)\n    if n <= 1:\n        return {}\n    if n == 2:\n        return {2:1}\n    limit = int(math.sqrt(n)) + 1\n    prime_factors = {}\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            prime_factors[i] = 1\n    return prime_factors\ndef get_divisors(n):\n    '''\n    Write a python function to find divisors of a given number.\n    '''\n    n = int(n)\n    if n <= 1:\n        return []\n    if n == 2:\n        return [1]\n    limit = int(math.sqrt(n)) + 1\n    divisors = []\n    for i in range(1, limit):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\ndef is_perfect_square(n):\n    '''\n    Write a python function to find if a number is perfect square or not.\n    '''\n    n = int(n)\n    if n < 0:\n        return False\n    limit = int(math.sqrt(n)) + 1\n    for i in range(0, limit):\n        if (i + 1) ** 2 == n:\n            return True\n    return False\ndef is_perfect_square_dict(n):\n    '''\n    Write a python function to find if a number is perfect square or not.\n    '''\n    n = int(n)\n    if n < 0:\n        return False\n    limit = int(math.sqrt(n)) + 1\n    for i in range(0, limit):\n        if (i + 1) ** 2 == n:\n            return True\n    return False\ndef are_perfect_squares(n):\n    '''\n    Write a python function to find if a list of numbers are perfect squares or not.\n    '''\n    n = list(n)\n    if len(n) < 0:\n        return False\n    for i in n:\n        if not is_perfect_square_dict(i):\n            return False\n    return True\ndef are_perfect_squares_dict(n):\n    '''\n    Write a python function to find if a list of numbers are perfect squares or not.\n    '''\n    n = list(n)\n    if len(n) < 0:\n        return False\n    for i in n:\n        if not is_perfect_square_dict(i):\n            return False\n    return True\ndef get_perfect_squares(n):\n    '''\n    Write a python function to find all perfect squares upto a given number.\n    '''\n    n = int(n)\n    if n < 0:\n        return []\n    perfect_squares = []\n    limit = int(math.sqrt(n)) + 1\n    for i in range(1, limit):\n        if is_perfect_square(i):\n            perfect_squares.append(i ** 2)\n    return perfect_squares\ndef get_perfect_squares_dict(n):\n    '''\n    Write a python function to find all perfect squares upto a given number.\n    '''\n    n = int(n)\n    if n < 0:\n        return {}\n    perfect_squares = {}\n    limit = int(math.sqrt(n)) + 1\n    for i in range(1, limit):\n        if is_perfect_square(i):\n            perfect_squares[i] = 1\n    return perfect_squares\ndef is_perfect_cube(n):\n    '''\n    Write a python function to find if a number is perfect cube or not.\n    '''\n    n = int(n)\n    if n < 0:\n        return False\n    limit = int(math.sqrt(n)) + 1\n    for i in range(0, limit):\n        if i ** 3 == n:\n            return True\n    return False\ndef is_perfect_cube_dict(n):\n    '''\n    Write a python function to find if a number is perfect cube or not.\n    '''\n    n = int(n)\n    if n < 0:\n        return False\n    limit = int(math.sqrt(n)) + 1\n    for i in range(0, limit):\n        if i ** 3 == n:\n            return True\n    return False\ndef get_perfect_cubes(n):\n    '''\n    Write a python function to find all perfect cubes upto a given number.\n    '''\n    n = int(n)\n    if n < 0:\n        return []\n    perfect_cubes = []\n    limit = int(math.sqrt(n)) + 1\n    for i in range(1, limit):\n        if is_perfect_cube(i):\n            perfect_cubes.append(i ** 3)\n    return perfect_cubes\ndef get_perfect_cubes_dict(n):\n    '''\n    Write a python function to find all perfect cubes upto a given number.\n    '''\n    n = int(n)\n    if n < 0:\n        return {}\n    perfect_cubes = {}\n    limit = int(math.sqrt(n)) + 1\n    for i in range(1, limit):\n        if is_perfect_cube(i):\n            perfect_cubes[i] = 1\n    return perfect_cubes\ndef is_perfect_pandigital(n, start=9, end=9):\n    '''\n    Write a python function to find if a number is a perfect pandigital number or not.\n    '''\n    n = str(n)\n    if len(n)!= 9:\n        return False\n    if len(set(n))!= 9:\n        return False\n    perfect_pandigitals = []\n    for i in range(start, end + 1):\n        perfect_pandigitals.append(str(i))\n    return sorted(n) == sorted(perfect_pandigitals)\ndef is_perfect_pandigital_dict(n, start=9, end=9):\n    '''\n    Write a python function to find if a number is a perfect pandigital number or not.\n    '''\n    n = str(n)\n    if len(n)!= 9:\n        return False\n    if len(set(n))!= 9:\n        return False\n    perfect_pandigitals = {}\n    for i in range(start, end + 1):\n        perfect_pandigitals[i] = 1\n    return perfect_pandigitals == get_perfect_pandigitals_dict(n)\ndef get_perfect_pandigitals(n, start=9, end=9):\n    '''\n    Write a python function to find all perfect pandigitals upto a given number.\n    '''\n    n = int(n)\n    if n < 0:\n        return []\n    perfect_pandi"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return True\n    return False\ndef prime_number_generator(n):\n    '''\n    Write a python function to generate all prime numbers.\n    '''\n    if n < 2:\n        return\n    else:\n        for i in range(2,n + 1):\n            if is_not_prime(i):\n                yield i\ndef create_number_list(n):\n    '''\n    Write a python function to generate all the unique numbers in the range of n.\n    '''\n    if n == 1:\n        return [1]\n    else:\n        return [1] + [i for i in create_number_list(n-1) if i!= 1]\ndef add_sum(n):\n    '''\n    Write a python function to add numbers in the range of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + add_sum(n-1)\ndef count_number(n):\n    '''\n    Write a python function to count the number of numbers in the range of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + count_number(n - 1)\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef product(n):\n    '''\n    Write a python function to find the product of a number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * product(n-1)\ndef series(n):\n    '''\n    Write a python function to find the sum of first n numbers of the series 1,1,2,3,5,8,13,21...\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + series(n-1)\ndef prime_factors(n):\n    '''\n    Write a python function to find all prime factors of a number.\n    '''\n    if n == 1:\n        return []\n    elif n % 2 == 0:\n        return [2] + prime_factors(n/2)\n    else:\n        return [2] + prime_factors((n-1)/2)\ndef perfect_square_generator(n):\n    '''\n    Write a python function to find the perfect square of a number.\n    '''\n    if n == 1:\n        return [1]\n    else:\n        return [n] + perfect_square_generator(n-1)\ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of the divisors of a number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 1 + sum_of_divisors(n-1) + sum_of_divisors(n-2)\ndef sum_of_sqrt_of_divisors(n):\n    '''\n    Write a python function to find the sum of the square root of the divisors of a number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 1 + sum_of_sqrt_of_divisors(n-1) + sum_of_sqrt_of_divisors(n-2)\ndef gcd_of_two_numbers(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd_of_two_numbers(b,a%b)\ndef lcm_of_two_numbers(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return lcm_of_two_numbers(b,a%b) * (a/gcd_of_two_numbers(a,b))\ndef prime_factorization(n):\n    '''\n    Write a python function to find the prime factorization of a number.\n    '''\n    if n == 1:\n        return {}\n    elif n == 2:\n        return {2:1}\n    else:\n        prime_factor_list = {}\n        for i in range(2,n+1):\n            if n % i == 0:\n                prime_factor_list[i] = 1 + prime_factorization(n/i)\n        return prime_factor_list\ndef digits(n):\n    '''\n    Write a python function to find the number of digits in a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + digits(n/10)\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if len(str(n)) == 1:\n        return True\n    elif str(n)[0] == str(n)[-1]:\n        return is_palindrome(int(str(n)[1:-1]))\n    else:\n        return False\ndef is_armstrong_number(n):\n    '''\n    Write a python function to check if a number is armstrong number or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        sum_of_power_of_digits = 0\n        for i in str(n):\n            sum_of_power_of_digits += pow(int(i),len(str(n)))\n        return sum_of_power_of_digits == n\ndef is_prime_number(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return not any([n % i == 0 for i in range(2,int(math.sqrt(n)) + 1)])\ndef is_amicable_number(n):\n    '''\n    Write a python function to check if a number is amicable number or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        if is_prime_number(n):\n            sum_of_power_of_digits = 0\n            for i in str(n):\n                sum_of_power_of_digits += pow(int(i),len(str(n)))\n            return sum_of_power_of_digits == n and sum_of_power_of_digits == sum(map(int,str(sum_of_power_of_digits))))\n        else:\n            return False\ndef is_super_amicable_number(n):\n    '''\n    Write a python function to check if a number is super amicable number or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        if is_prime_number(n):\n            sum_of_power_of_digits = 0\n            for i in str(n):\n                sum_of_power_of_digits += pow(int(i),len(str(n)))\n            sum_of_power_of_digits = sum_of_power_of_digits + sum_of_power_of_digits\n            return sum_of_power_of_digits == n and sum_of_power_of_digits == sum(map(int,str(sum_of_power_of_digits))"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        sqr = int(math.sqrt(n))+1\n        for i in range(2,sqr):\n            if n%i==0:\n                return False\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        sqr = int(math.sqrt(n))+1\n        for i in range(2,sqr):\n            if n%i==0:\n                return False\n        return True\ndef test_is_not_prime():\n    '''\n    Write a python function to test is_not_prime function.\n    '''\n    for i in range(100):\n        if is_not_prime(i)==False:\n            assert True\n        else:\n            assert False\n    print \"Success!\"\ndef test_is_prime():\n    '''\n    Write a python function to test is_prime function.\n    '''\n    for i in range(100):\n        if is_prime(i)==True:\n            assert True\n        else:\n            assert False\n    print \"Success!\"\ndef test_is_not_prime():\n    test_is_not_prime()\n    test_is_prime()\n    print \"Success!\"\ndef fib(n):\n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n    return a\ndef test_fib():\n    '''\n    Write a python function to test fib function.\n    '''\n    assert fib(0)==0\n    assert fib(1)==1\n    assert fib(2)==1\n    assert fib(3)==2\n    assert fib(4)==3\n    assert fib(5)==5\n    assert fib(6)==8\n    assert fib(7)==13\n    assert fib(8)==21\n    assert fib(9)==34\n    assert fib(10)==55\n    assert fib(11)==89\n    assert fib(12)==144\n    assert fib(13)==233\n    assert fib(14)==377\n    assert fib(15)==610\n    assert fib(16)==987\n    assert fib(17)==1597\n    assert fib(18)==2584\n    assert fib(19)==4181\n    assert fib(20)==6765\n    assert fib(21)==10946\n    assert fib(22)==17711\n    assert fib(23)==28657\n    assert fib(24)==46368\n    assert fib(25)==75025\n    assert fib(26)==121393\n    assert fib(27)==196418\n    assert fib(28)==317811\n    assert fib(29)==514229\n    assert fib(30)==832040\n    assert fib(31)==1346269\n    assert fib(32)==2178309\n    assert fib(33)==3524578\n    assert fib(34)==5702887\n    assert fib(35)==9227465\n    assert fib(36)==14930352\n    assert fib(37)==24157817\n    assert fib(38)==39088169\n    assert fib(39)==63245986\n    assert fib(40)==121645100\n    assert fib(41)==2432902008\n    assert fib(42)==5472535024\n    assert fib(43)==1061020985\n    assert fib(44)==1716768017\n    assert fib(45)==2777789002\n    assert fib(46)==3399910024\n    assert fib(47)==5795254750\n    assert fib(48)==89795918367\n    assert fib(49)==1597158924\n    assert fib(50)==25846748229\n    assert fib(51)==4513513127\n    assert fib(52)==6317643869\n    assert fib(53)==12586269025\n    assert fib(54)==19326391605\n    assert fib(55)==3207810024\n    assert fib(56)==57299259399\n    assert fib(57)==105656142871\n    assert fib(58)==1716768017\n    assert fib(59)==2777789002\n    assert fib(60)==4513513127\n    assert fib(61)==6317643869\n    assert fib(62)==12586269025\n    assert fib(63)==19326391605\n    assert fib(64)==3207810024\n    assert fib(65)==57299259399\n    assert fib(66)==105656142871\n    assert fib(67)==1716768017\n    assert fib(68)==2777789002\n    assert fib(69)==4513513127\n    assert fib(70)==6317643869\n    assert fib(71)==12586269025\n    assert fib(72)==19326391605\n    assert fib(73)==3207810024\n    assert fib(74)==57299259399\n    assert fib(75)==105656142871\n    assert fib(76)==1716768017\n    assert fib(77)==2777789002\n    assert fib(78)==4513513127\n    assert fib(79)==6317643869\n    assert fib(80)==12586269025\n    assert fib(81)==19326391605\n    assert fib(82)==3207810024\n    assert fib(83)==57299259399\n    assert fib(84)==105656142871\n    assert fib(85)==1716768017\n    assert fib(86)==2777789002\n    assert fib(87)==4513513127\n    assert fib(88)==6317643869\n    assert fib(89)==12586269025\n    assert fib(90)==19326391605\n    assert fib(91)==3207810024\n    assert fib(92)==57299259399\n    assert fib(93)==105656142871\n    assert fib(94)==1716768017\n    assert fib(95)==2777789002\n    assert fib(96)==4513513127\n    assert fib(97)==6317643869\n    assert fib(98)==12586269025\n    assert fib(99)==19326391605\n    assert fib(100)==3207810024\n    assert fib(101)==57299259399\n    assert fib(102)==105656142871\n    assert fib(103)==1716768017\n    assert fib(104)==2777789002\n    assert fib(105)==4513513127\n    assert fib(106)==6317643869\n    assert fib(107)==12586269025\n    assert fib(108)==19326391605\n    assert fib(109)==3207810024\n    assert fib(110)==57299259399\n    assert fib(111)==105656142871\n    assert fib(112)==1716768017\n    assert fib(113)==2777789002\n    assert fib(114)==4513513127\n    assert fib(115)==6317643869\n    assert fib(116)==12586269025\n    assert fib(117)==19326391605\n    assert fib(118)==3207810024\n    assert fib(119)==57299259399\n    assert fib(120)==105656142871\n    assert fib(121)==1716768017\n    assert fib(122)==2777789002\n    assert fib(123)==4513513127\n    assert fib(124)==6317643869\n    assert fib(125)==12586269025\n    assert fib(126)==19326391605\n    assert fib(127)==3207810024\n    assert fib(128)==57299259399\n    assert fib(129)==105656142871\n    assert fib(130)==1716768017\n    assert fib(131)==2777789002\n    assert fib(132)==4513513127\n    assert fib(13"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    sqrt_n = int(math.ceil(math.sqrt(n)))\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    else:\n        for i in range(3, math.floor(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        else:\n            return False\n    \ndef prime_number(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, math.floor(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        else:\n            return True\ndef count_digit(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n))\ndef count_lower_case(n):\n    '''\n    Write a python function to count the number of lower case characters in a string.\n    '''\n    return len(n)-len(n.upper())\ndef count_upper_case(n):\n    '''\n    Write a python function to count the number of upper case characters in a string.\n    '''\n    return len(n)-len(n.lower())\ndef count_space(n):\n    '''\n    Write a python function to count the number of space characters in a string.\n    '''\n    return len(n)-len(n.replace(' ', ''))\ndef count_vowels(n):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    v = 0\n    for i in n:\n        if i in vowels:\n            v += 1\n    return v\ndef count_consonants(n):\n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n    c = 0\n    for i in n:\n        if i in consonants:\n            c += 1\n    return c\ndef count_digits(n):\n    '''\n    Write a python function to count the number of digits in a string.\n    '''\n    return len(str(n))\ndef count_chars(n):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    return len(n)\ndef count_special_characters(n):\n    '''\n    Write a python function to count the number of special characters in a string.\n    '''\n    special_characters = ['@', '#', '$', '%', '&', '*', '^']\n    c = 0\n    for i in n:\n        if i in special_characters:\n            c += 1\n    return c\ndef count_words(n):\n    '''\n    Write a python function to count the number of words in a string.\n    '''\n    return len(n.split())\ndef count_lines(n):\n    '''\n    Write a python function to count the number of lines in a string.\n    '''\n    return len(n.split('\\n'))\ndef count_non_whitespaces(n):\n    '''\n    Write a python function to count the number of non-whitespaces in a string.\n    '''\n    return len(n.replace(' ', ''))\ndef count_whitespaces(n):\n    '''\n    Write a python function to count the number of whitespaces in a string.\n    '''\n    return len(n) - count_non_whitespaces(n)\ndef count_links(n):\n    '''\n    Write a python function to count the number of links in a string.\n    '''\n    links = ['http', 'https', 'www']\n    c = 0\n    for i in n:\n        if i in links:\n            c += 1\n    return c\ndef count_numbers(n):\n    '''\n    Write a python function to count the number of numbers in a string.\n    '''\n    return len(n) - count_digits(n)\ndef sum_of_digits(n):\n    '''\n    Write a python function to sum of digits in a number.\n    '''\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\ndef average_of_digits(n):\n    '''\n    Write a python function to compute the average of digits in a number.\n    '''\n    return sum_of_digits(n) / count_digits(n)\ndef is_palindrome(n):\n    '''\n    Write a python function to determine if a string is a palindrome.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\ndef is_anagram(n):\n    '''\n    Write a python function to determine if two strings are anagrams.\n    '''\n    if sorted(n) == sorted(n)[::-1]:\n        return True\n    else:\n        return False\ndef find_max(n):\n    '''\n    Write a python function to find the maximum value in a list.\n    '''\n    m = n[0]\n    for i in n:\n        if i > m:\n            m = i\n    return m\ndef find_min(n):\n    '''\n    Write a python function to find the minimum value in a list.\n    '''\n    m = n[0]\n    for i in n:\n        if i < m:\n            m = i\n    return m\ndef find_greatest_common_factor(n):\n    '''\n    Write a python function to find the greatest common factor in a number.\n    '''\n    m = n[0]\n    for i in n:\n        if i % m!= 0:\n            m = i\n    return m\ndef is_prime(n):\n    '''\n    Write a python function to determine if a number is a prime number.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3,math.floor(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        else:\n            return True\ndef find_fibonacci(n):\n    '''\n    Write a python function to find the nth number in the Fibonacci sequence.\n    '''\n    if n < 1:\n        return False\n    if n == 1 or n == 2:\n        return n\n    else:\n        return find_fibonacci(n-1) + find_fibonacci(n-2)\ndef is_perfect(n):\n    '''\n    Write a python function to determine if a number is a perfect number.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\ndef is_perfect_square(n):\n    '''\n    Write a python function to determine if a number is a perfect square.\n    '''\n    if n < 0:\n        return False\n    else:\n        return int(math.sqrt(n))**2 == n\ndef sum_of_primes(n):\n    '''\n    Write a python function to find the sum of the first n prime numbers.\n    '''\n    sum = 0\n    if n < 1:\n        return False\n    for i in range(2, n+1):\n        if is_prime(i):\n            sum += i\n    return sum\ndef sum_of_squares(n):\n    '''\n    Write a python function to find the sum of the first "
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n%2 == 0:\n        return False\n    else:\n        sqrt = int(math.sqrt(n)) + 1\n        for i in range(3,sqrt,2):\n            if n%i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    max_div = math.floor(math.sqrt(n))\n    for i in range(3,1+max_div, 2):\n        if n % i == 0:\n            return False\n    return True\ndef find_least_prime(n):\n    '''\n    Write a python function to find the smallest prime number that is greater than a given number n.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    for i in range(n, 0, -1):\n        if is_not_prime(i):\n            return i\ndef find_greatest_prime(n):\n    '''\n    Write a python function to find the smallest prime number that is smaller than a given number n.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    for i in range(n, n*100):\n        if is_not_prime(i):\n            return i\ndef get_least_prime(n):\n    '''\n    Write a python function to find the least prime number that is greater than a given number n.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    if is_not_prime(n):\n        return n\n    smallest = n\n    largest = n*100\n    while smallest <= largest:\n        mid = (smallest + largest)//2\n        if is_not_prime(mid):\n            largest = mid - 1\n        else:\n            smallest = mid + 1\n    return smallest\ndef get_greatest_prime(n):\n    '''\n    Write a python function to find the least prime number that is smaller than a given number n.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    if is_not_prime(n):\n        return n\n    smallest = n\n    largest = n*100\n    while smallest <= largest:\n        mid = (smallest + largest)//2\n        if is_not_prime(mid):\n            smallest = mid + 1\n        else:\n            largest = mid - 1\n    return smallest\ndef find_nth_prime(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    count = 0\n    number = 0\n    while count < n:\n        number += 1\n        if is_not_prime(number):\n            continue\n        else:\n            count += 1\n    return number\ndef find_first_prime(n):\n    '''\n    Write a python function to find the first prime number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    if is_not_prime(n):\n        return n\n    smallest = n\n    largest = n*100\n    while smallest <= largest:\n        mid = (smallest + largest)//2\n        if is_not_prime(mid):\n            largest = mid - 1\n        else:\n            smallest = mid + 1\n    return smallest\ndef find_last_prime(n):\n    '''\n    Write a python function to find the last prime number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    if is_not_prime(n):\n        return n\n    smallest = n\n    largest = n*100\n    while smallest <= largest:\n        mid = (smallest + largest)//2\n        if is_not_prime(mid):\n            smallest = mid + 1\n        else:\n            largest = mid - 1\n    return largest\ndef is_perfect(n):\n    '''\n    Write a python function to determine if a number is perfect.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    sum = 1\n    i = 2\n    while i < n:\n        if n % i == 0:\n            sum += i\n        i += 1\n    return sum == n\ndef get_perfect(n):\n    '''\n    Write a python function to find the next perfect number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    perfect = 0\n    i = n\n    while perfect!= n:\n        i += 1\n        if is_perfect(i):\n            perfect = i\n    return perfect\ndef get_perfects(n):\n    '''\n    Write a python function to find all the perfect numbers below a given number n.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    perfect = 0\n    i = n\n    while perfect!= n:\n        i += 1\n        if is_perfect(i):\n            perfect = i\n    return perfect\ndef is_abundant(n):\n    '''\n    Write a python function to determine if a number is abundant.\n    '''\n    if n <= 0:\n        return False\n    sum = 1\n    i = 2\n    while i < n:\n        if n % i == 0:\n            sum += i\n        i += 1\n    return sum > n\ndef get_abundant(n):\n    '''\n    Write a python function to find the next abundant number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    abundant = 0\n    i = n\n    while abundant!= n:\n        i += 1\n        if is_abundant(i):\n            abundant = i\n    return abundant\ndef get_abundants(n):\n    '''\n    Write a python function to find all the abundant numbers below a given number n.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    abundant = 0\n    i = n\n    while abundant!= n:\n        i += 1\n        if is_abundant(i):\n            abundant = i\n    return abundant\ndef get_abundant_sums(n):\n    '''\n    Write a python function to find all the abundant numbers below a given number n and their sum.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    abundant_sums = []\n    i = n\n    while abundant_sums!= n:\n        i += 1\n        if is_abundant(i):\n            abundant_sums.append(i)\n    return abundant_sums\ndef is_deficient(n):\n    '''\n    Write a python function to determine if a number is deficient.\n    '''\n    if n <= 0:\n        return False\n    sum = 0\n    i = 2\n    while i < n:\n        if n % i == 0:\n            sum += i\n        i += 1\n    return sum < n\ndef get_deficient(n):\n    '''\n    Write a python function to find the next deficient number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    deficient = 0\n    i = n\n    while deficient!= n:\n        i += 1\n        if is_deficient(i):\n            deficient = i\n    return deficient\ndef get_deficient_sums(n):\n    '''\n    Write a python function to find all the deficient numbers below a given number n and their sum.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    deficient_sums = []\n    i = n\n    while deficient_sums!= n:\n        i += 1\n        if is_deficient(i):\n            deficient_sums.append(i)\n    return deficient_sums\ndef get_deficient_sums_with_prime_factors(n):\n    '''\n    Write a python function to find all the deficient numbers below a given number n and their sum.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    deficient_sums = []\n    i = n\n    while deficient_sums!= n:\n        i += 1\n        if is_deficient(i):\n            deficient_sums.append(i)\n    prime_factors = []\n    for sum in deficient_sums:\n        for i in range(2, math.floor(sum/2) + 1):\n            if sum % i == 0:\n                prime_factors.append(i)\n    return prime_factors\ndef get_deficient_sums_with_prime_factors_with_product(n):\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return True\n    return False\ndef count_prime(n):\n    '''\n    Write a python function to find the count of prime numbers from 0 to n (inclusive).\n    '''\n    count = 0\n    for i in range(0, n+1):\n        if is_not_prime(i):\n            count = count + 1\n    return count\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits of an integer.\n    '''\n    total = 0\n    while (n!= 0):\n        last_digit = n % 10\n        total = total + last_digit\n        n = n // 10\n    return total\ndef is_perfect_square(n):\n    '''\n    Write a python function to find the square root of a perfect square.\n    '''\n    if (n == 1):\n        return True\n    if (n < 1):\n        return False\n    ans = 1\n    n1 = int(n)\n    while(n1 > 0):\n        ans = ans + n1 % 10\n        n1 = n1 / 10\n    ans = ans/2\n    if (ans * ans == n):\n        return True\n    else:\n        return False\ndef is_square(n):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    ans = 1\n    n1 = int(n)\n    while(n1 > 0):\n        ans = ans + n1 % 10\n        n1 = n1 / 10\n    ans = ans/2\n    if (ans * ans == n):\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    if (n % 2 == 0):\n        return False\n    for i in range(3, n, 2):\n        if (n % i == 0):\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    digits = int(math.log10(n)) + 1\n    for i in range(0, digits/2):\n        if (n % 10!= n // (10 ** (i + 1)) % 10):\n            return False\n    return True\ndef is_armstrong(n):\n    '''\n    Write a python function to check if an integer is an armstrong number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    sum = 0\n    temp = n\n    while (temp > 0):\n        sum = sum + (temp % 10) ** 3\n        temp = temp // 10\n    if (sum == n):\n        return True\n    else:\n        return False\ndef is_super_prime(n):\n    '''\n    Write a python function to check if a number is a super-prime number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return False\n    if (is_prime(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_prime(i) == True):\n                return False\n        return True\ndef is_super_square(n):\n    '''\n    Write a python function to check if a number is a super-square number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_square(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_square(i) == True):\n                return False\n        return True\ndef is_super_palindrome(n):\n    '''\n    Write a python function to check if a number is a super-palindrome number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_palindrome(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_palindrome(i) == True):\n                return False\n        return True\ndef is_super_armstrong(n):\n    '''\n    Write a python function to check if a number is a super-armstrong number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return False\n    if (is_armstrong(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_armstrong(i) == True):\n                return False\n        return True\ndef is_fibonacci(n):\n    '''\n    Write a python function to check if a number is a fibonacci number or not.\n    '''\n    if (n < 1):\n        return False\n    a, b = 0, 1\n    while(b < n):\n        a = b\n        b = a + b\n    return True if (a == 1 or a == n) else False\ndef is_super_fibonacci(n):\n    '''\n    Write a python function to check if a number is a super-fibonacci number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_fibonacci(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_fibonacci(i) == True):\n                return False\n        return True\ndef is_super_perfect_square(n):\n    '''\n    Write a python function to check if a number is a super-perfect square number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_perfect_square(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_perfect_square(i) == True):\n                return False\n        return True\ndef is_super_perfect_square(n):\n    '''\n    Write a python function to check if a number is a super-perfect square number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_perfect_square(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_perfect_square(i) == True):\n                return False\n        return True\ndef is_super_fibonacci(n):\n    '''\n    Write a python function to check if a number is a super-fibonacci number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_fibonacci(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_fibonacci(i) == True):\n                return False\n        return True\ndef is_super_perfect_square(n):\n    '''\n    Write a python function to check if a number is a super-perfect square number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_perfect_square(n) == False):\n        return Fals"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n,nums)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    return heapq.nsmallest(n,nums)\ndef sorted_list(nums):\n    '''\n    Write a function to find the kth largest element in an unsorted list.\n    '''\n    return heapq.nlargest(1,nums)[0]\ndef find_kth_largest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(1,nums)[0]\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nsmallest(n,nums)[-1]\ndef find_nth_smallest(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nsmallest(n,nums)[-1]\ndef heap_delete(heap,index):\n    '''\n    Write a function to remove the ith smallest element in a given heap, which is a list of tuples.\n    '''\n    return heapq.heapify(heap)[index]\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef remove_element(arr,n):\n    '''\n    Write a function to remove the first element in a list.\n    '''\n    return arr[n]\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef delete_element(arr,n):\n    '''\n    Write a function to remove the first element in a list.\n    '''\n    return arr[n]\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef insert_element(arr,n):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    return arr.insert(n,0)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef insert_element(arr,n):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    return arr.insert(n,0)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef delete_element(arr,n):\n    '''\n    Write a function to remove the first element in a list.\n    '''\n    return arr.remove(n)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef insert_element(arr,n):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    return arr.insert(n,0)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef insert_element(arr,n):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    return arr.insert(n,0)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef delete_element(arr,n):\n    '''\n    Write a function to remove the first element in a list.\n    '''\n    return arr.remove(n)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef insert_element(arr,n):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    return arr.insert(n,0)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef insert_element(arr,n):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    return arr.insert(n,0)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef delete_element(arr,n):\n    ''"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    hq.heapify(h)\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>h[0]:\n            hq.heappop(h)\n            hq.heappush(h,nums[i])\n    return h\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h = []\n    hq.heapify(h)\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<h[0]:\n            hq.heappop(h)\n            hq.heappush(h,nums[i])\n    return h\ndef max_heap(nums):\n    '''\n    Write a function that returns the max value in a max heap.\n    '''\n    if len(nums)==0:\n        return None\n    h = []\n    for i in range(len(nums)):\n        hq.heappush(h,nums[i])\n    return hq.heappop(h)\ndef min_heap(nums):\n    '''\n    Write a function that returns the min value in a min heap.\n    '''\n    if len(nums)==0:\n        return None\n    h = []\n    for i in range(len(nums)):\n        hq.heappush(h,nums[i])\n    return hq.heappop(h)\ndef max_heap_sort(nums):\n    '''\n    Write a function that returns a list of the n largest values in a max heap.\n    '''\n    if len(nums)==0:\n        return []\n    h = []\n    for i in range(len(nums)):\n        hq.heappush(h,nums[i])\n    res = []\n    while len(res)<len(nums):\n        res.append(hq.heappop(h))\n    return res\ndef min_heap_sort(nums):\n    '''\n    Write a function that returns a list of the n smallest values in a min heap.\n    '''\n    if len(nums)==0:\n        return []\n    h = []\n    for i in range(len(nums)):\n        hq.heappush(h,nums[i])\n    res = []\n    while len(res)<len(nums):\n        res.append(hq.heappop(h))\n    return res\ndef tree_min_node(node):\n    '''\n    Write a function that returns the min value in a min heap.\n    '''\n    if node.left==None and node.right==None:\n        return node.data\n    if node.left==None:\n        return min_heap_sort(node.data)\n    if node.right==None:\n        return min_heap_sort(node.data)\n    if node.left and node.right:\n        return min_heap_sort(node.data)\ndef tree_max_node(node):\n    '''\n    Write a function that returns the max value in a max heap.\n    '''\n    if node.left==None and node.right==None:\n        return node.data\n    if node.left==None:\n        return max_heap_sort(node.data)\n    if node.right==None:\n        return max_heap_sort(node.data)\n    if node.left and node.right:\n        return max_heap_sort(node.data)\ndef delete_node(node,data):\n    if node==None:\n        return None\n    if node.data==data:\n        if node.left and node.right:\n            successor = tree_min_node(node.right)\n            node.data = successor\n            return delete_node(node.right,successor)\n        else:\n            if node.left:\n                return node.left\n            else:\n                return node.right\n    else:\n        if node.data>data:\n            node.data,data = data,node.data\n            delete_node(node.left,data)\n        else:\n            delete_node(node.right,data)\ndef insert_node(node,data):\n    if node==None:\n        return Node(data)\n    if node.data>data:\n        node.left = insert_node(node.left,data)\n    else:\n        node.right = insert_node(node.right,data)\n    return node\ndef inorder(node):\n    if node==None:\n        return\n    inorder(node.left)\n    print node.data,\n    inorder(node.right)\ndef preorder(node):\n    if node==None:\n        return\n    print node.data,\n    preorder(node.left)\n    preorder(node.right)\ndef postorder(node):\n    if node==None:\n        return\n    postorder(node.left)\n    postorder(node.right)\n    print node.data,\ndef level_order_traversal(node):\n    if node==None:\n        return\n    queue = []\n    queue.append(node)\n    while queue:\n        node = queue.pop(0)\n        print node.data,\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\ndef create_bst(node,data):\n    if node==None:\n        return Node(data)\n    if node.data>data:\n        node.left = create_bst(node.left,data)\n    else:\n        node.right = create_bst(node.right,data)\n    return node\ndef max_sum_bst(node):\n    if node==None:\n        return 0\n    if node.left and node.right:\n        return node.data+max_sum_bst(node.left)+max_sum_bst(node.right)\n    elif node.left:\n        return node.data+max_sum_bst(node.left)\n    elif node.right:\n        return node.data+max_sum_bst(node.right)\ndef create_bst_from_array(nums,start,end):\n    if end<=start:\n        return None\n    mid = (end+start)/2\n    node = Node(nums[mid])\n    node.left = create_bst_from_array(nums,start,mid-1)\n    node.right = create_bst_from_array(nums,mid+1,end)\n    return node\ndef preorder_tree_traversal(node):\n    if node==None:\n        return\n    print node.data,\n    preorder_tree_traversal(node.left)\n    preorder_tree_traversal(node.right)\ndef inorder_tree_traversal(node):\n    if node==None:\n        return\n    inorder_tree_traversal(node.left)\n    print node.data,\n    inorder_tree_traversal(node.right)\ndef postorder_tree_traversal(node):\n    if node==None:\n        return\n    postorder_tree_traversal(node.left)\n    postorder_tree_traversal(node.right)\n    print node.data,\ndef level_order_tree_traversal(node):\n    if node==None:\n        return\n    queue = []\n    queue.append(node)\n    while queue:\n        node = queue.pop(0)\n        print node.data,\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\ndef level_order_tree_traversal_using_stack(node):\n    if node==None:\n        return\n    stack = []\n    stack.append(node)\n    while stack:\n        node = stac"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0:\n        return []\n    if nums==[]:\n        return []\n    if n > len(nums):\n        return nums\n    max_heap=[]\n    for num in nums:\n        hq.heappush(max_heap,-num)\n    while len(max_heap)!=n:\n        hq.heappop(max_heap)\n    return [-hq.heappop(max_heap) for i in range(len(max_heap))]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    hq=[]\n    for i in nums:\n        hq.append([-i,i])\n    hq = sorted(hq)\n    ans = []\n    for i in range(n):\n        ans.append(hq[i][1])\n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums_len = len(nums)\n    if nums_len < n:\n        return nums\n    else:\n        for i in range(n):\n            max_num = hq.heappop(nums)\n            hq.heappush(nums,max_num)\n        return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for i in range(n):\n        hq.heappush(h,-nums[i])\n    return [hq.heappop(h) for i in range(n)]\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h=[]\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    return [hq.heappop(h) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums=list(set(nums))\n    nums=sorted(nums,reverse=True)\n    if len(nums)<n:\n        return nums\n    return nums[n-1::-1]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    nums=list(set(nums))\n    nums=sorted(nums)\n    if len(nums)<n:\n        return nums\n    return nums[:n]\ndef min_max_heap(nums):\n    '''\n    Write a function that returns a tuple of the minimum and maximum integers in the list of integers.\n    '''\n    return (min(nums),max(nums))\ndef heap_queue_intersection(nums1,nums2):\n    '''\n    Write a function to return the intersection of two arrays.\n    '''\n    return list(set(nums1) & set(nums2))\ndef heap_queue_union(nums1,nums2):\n    '''\n    Write a function to return the union of two arrays.\n    '''\n    return list(set(nums1)|set(nums2))\ndef min_max_heap_largest(nums,n):\n    '''\n    Write a function that returns the n largest integers from a given list of integers, returned in descending order.\n    '''\n    nums=sorted(nums,reverse=True)\n    return nums[:n]\ndef min_max_heap_smallest(nums,n):\n    '''\n    Write a function that returns the n smallest integers from a given list of integers, returned in ascending order.\n    '''\n    nums=sorted(nums)\n    return nums[:n]\ndef remove_item_from_heap(heap,n):\n    '''\n    Write a function that removes the top of the heap.\n    '''\n    return hq.heappop(heap)\ndef print_heap(heap):\n    '''\n    Write a function that prints the contents of a heap in a clean manner.\n    '''\n    hq.heapify(heap)\n    for i in heap:\n        print(i,end=\" \")\n    print()\ndef heap_sort(nums):\n    '''\n    Write a function that sorts a list of integers using a heap.\n    '''\n    nums=list(set(nums))\n    nums=sorted(nums)\n    return nums\ndef k_smallest(nums,k):\n    '''\n    Write a function that returns the k smallest integers from a given list of integers, returned in ascending order.\n    '''\n    nums=sorted(nums)\n    return nums[:k]\ndef remove_item_from_heap(heap,n):\n    '''\n    Write a function that removes the top of the heap.\n    '''\n    hq.heappop(heap)\n    return heap\ndef print_heap(heap):\n    '''\n    Write a function that prints the contents of a heap in a clean manner.\n    '''\n    hq.heapify(heap)\n    for i in heap:\n        print(i,end=\" \")\n    print()\ndef heap_sort(nums):\n    '''\n    Write a function that sorts a list of integers using a heap.\n    '''\n    nums=list(set(nums))\n    nums=sorted(nums)\n    return nums\ndef k_largest(nums,k):\n    '''\n    Write a function that returns the k largest integers from a given list of integers, returned in descending order.\n    '''\n    nums=sorted(nums,reverse=True)\n    return nums[:k]\ndef remove_item_from_heap(heap,n):\n    '''\n    Write a function that removes the top of the heap.\n    '''\n    hq.heappop(heap)\n    return heap\ndef print_heap(heap):\n    '''\n    Write a function that prints the contents of a heap in a clean manner.\n    '''\n    hq.heapify(heap)\n    for i in heap:\n        print(i,end=\" \")\n    print()\ndef k_largest_largest(nums,k):\n    '''\n    Write a function that returns the k largest integers from a given list of integers, returned in descending order.\n    '''\n    nums=sorted(nums,reverse=True)\n    return nums[:k]\ndef k_smallest_largest(nums,k):\n    '''\n    Write a function that returns the k smallest integers from a given list of integers, returned in descending order.\n    '''\n    nums=sorted(nums)\n    return nums[:k]\ndef heap_sort(nums):\n    '''\n    Write a function that sorts a list of integers using a heap.\n    '''\n    nums=list(set(nums))\n    nums=sorted(nums)\n    return nums\ndef k_largest_smallest(nums,k):\n    '''\n    Write a function that returns the k largest integers from a given list of integers, returned in ascending order.\n    '''\n    nums=sorted(nums)\n    return nums[:k]\ndef k_smallest_smallest(nums,k):\n    '''\n    Write a function that returns the k smallest integers from a given list of integers, returned in ascending order.\n    '''\n    nums=sorted(nums)\n    return nums[:k]\ndef print_heap(heap):\n    '''\n    Write a function that prints the contents of a heap in a clean manner.\n    '''\n    hq.heapify(heap)\n    for i in heap:\n        print(i,end=\" \")\n    print()\ndef heapsort(nums):\n    '''\n    Write a function that sorts a list of integers using a heap.\n    '''\n    nums=list(set(nums))\n    nums=sorted(nums)\n    return nums\ndef find_duplicates_of(nums):\n    '''\n    Write a function that returns a list of all elements that appear more than once in a list of integers.\n    '''\n    return list(set(nums))\ndef main():\n    nums1=[1,2,3,4,5,6,7,8,9,10]\n    nums2=[1,2,3,4,5,6,7,8,9,10]\n    nums3=[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]\n    print(heap_queue_largest(nums1,3))\n    print(heap_queue_smallest(nums1,3))\n    print(min_max_heap(nums1))\n    print(min_max_heap_largest(nums1,3))\n    print(min_max_heap_smallest(nums1,3))\n    nums=[1,2,3,4,5,6,7,8,9,10]\n    print(remove_item_from_heap(nums,3))\n    print(print_heap(nums))\n    print(heap_sort(nums))\n    print(k_largest(nums,3))\n    print(k_smallest(nums,3))\n    print(k_largest_largest(nums,3))\n    print(k_smallest_largest(nums,3))\n    nums=[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]\n    print(remove_item_from_heap(nums,3))\n    print(print_heap(nums))\n    print(heap_sort(nums))\n    print(k_largest_largest(nums,3))\n    print(k_smallest_largest(nums,3)"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\ndef merge_k_sorted_arrays(arr):\n    '''\n    Merge k sorted arrays into one sorted array.\n    '''\n    pass\ndef max_heap_k_smallest(arr,k):\n    '''\n    Given a k sorted array and an integer n, write a function to find the n smallest integers in the array.\n    '''\n    pass\ndef max_heap_k_largest(arr,k):\n    '''\n    Given a k sorted array and an integer n, write a function to find the n largest integers in the array.\n    '''\n    pass\ndef max_heapify(arr,i,n):\n    '''\n    Given an array of integers, write a function that transforms the given array into a max heap.\n    '''\n    pass\ndef max_heap_sort(arr):\n    '''\n    Given a max heap, write a function that restores the heap to a sorted array.\n    '''\n    pass\ndef min_heap_k_smallest(arr,k):\n    '''\n    Given a k sorted array and an integer n, write a function to find the n smallest integers in the array.\n    '''\n    pass\ndef min_heap_k_largest(arr,k):\n    '''\n    Given a k sorted array and an integer n, write a function to find the n largest integers in the array.\n    '''\n    pass\ndef min_heap_sort(arr):\n    '''\n    Given a min heap, write a function that restores the heap to a sorted array.\n    '''\n    pass\ndef is_heap_balanced(arr):\n    '''\n    Given a binary tree, write a function that returns true if the given tree is a balanced tree, \n    and false otherwise.\n    '''\n    pass\ndef vertical_order_traversal(root):\n    '''\n    Given a binary tree, write a function that returns an array of size vertical order traversal of the binary tree.\n    A vertical order traversal is a traversal of a binary tree that is similar to level order traversal, \n    but the nodes are visited in the traversal order from left to right and top to bottom.\n    '''\n    pass\ndef iterative_binary_search(arr,target):\n    '''\n    Given a sorted array, write a function to search a target value in the array.\n    If the target value is found, then return its index, otherwise, return -1.\n    '''\n    pass\ndef recursive_binary_search(arr,target,start,end):\n    '''\n    Given a sorted array, write a function to search a target value in the array.\n    If the target value is found, then return its index, otherwise, return -1.\n    '''\n    pass\ndef search_in_rotated_sorted_array(arr,target):\n    '''\n    Given a sorted array, write a function to search a target value in the array.\n    If the target value is found, then return its index, otherwise, return -1.\n    '''\n    pass\ndef interval_intersection(a,b):\n    '''\n    Given two intervals, find the intersection of the two intervals.\n    '''\n    pass\ndef is_subset(arr1,arr2):\n    '''\n    Given two arrays, write a function that checks whether the first array is a subset of the second array.\n    '''\n    pass\ndef is_match(s,p):\n    '''\n    Given an input string and a pattern, write a function to determine if the pattern is a match for the string.\n    Inp: abcdef, \"ab*def\"\n    Out: True\n    '''\n    pass\ndef topological_sort(nodes,edges):\n    '''\n    Given a graph with edges and nodes, write a function to do topological sort.\n    '''\n    pass\ndef path_in_tree(nodes,edges):\n    '''\n    Given a graph with edges and nodes, write a function to check if a path exists between two nodes.\n    '''\n    pass\ndef graph_has_cycle(nodes,edges):\n    '''\n    Given a graph with edges and nodes, write a function to check if the graph has a cycle.\n    '''\n    pass\ndef compare_strings(s1,s2):\n    '''\n    Given two strings, write a function that determines if one string is a permutation of the other.\n    '''\n    pass\ndef longest_common_subsequence(s1,s2):\n    '''\n    Given two strings, write a function to find the longest common substring.\n    '''\n    pass\ndef longest_common_subsequence_dp(s1,s2):\n    '''\n    Given two strings, write a function to find the longest common substring.\n    '''\n    pass\ndef longest_common_subsequence_recursive(s1,s2,start_i,start_j):\n    '''\n    Given two strings, write a function to find the longest common substring.\n    '''\n    pass\ndef longest_common_subsequence_iterative(s1,s2):\n    '''\n    Given two strings, write a function to find the longest common substring.\n    '''\n    pass\ndef permute_string(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef get_permutation(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef permute_string_recursive(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef permute_string_iterative(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef permute_string_recursive_backtracking(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef permute_string_iterative_backtracking(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef permute_string_recursive_no_dup(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef permute_string_iterative_no_dup(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef binary_search(arr,target,start,end):\n    '''\n    Given a sorted array, write a function to search a target value in the array.\n    If the target value is found, then return its index, otherwise, return -1.\n    '''\n    pass\ndef interleave(a,b):\n    '''\n    Given two arrays, write a function to find the interleaving of the two arrays.\n    '''\n    pass\ndef max_heap_sort(arr):\n    '''\n    Given a max heap, write a function to restore the heap to a sorted array.\n    '''\n    pass\ndef min_heap_sort(arr):\n    '''\n    Given a min heap, write a function to restore the heap to a sorted array.\n    '''\n    pass\ndef interleave_using_heap(a,b):\n    '''\n    Given two arrays, write a function to find the interleaving of the two arrays.\n    '''\n    pass\ndef longest_common_subsequence_dp(s1,s2):\n    '''\n    Given two strings, write a function to find the longest common substring.\n    '''\n    pass\ndef longest_common_subsequence_recursive(s1,s2,start_i,start_j):\n    '''\n    Given two strings, write a function to find the longest common substring.\n    '''\n    pass\ndef longest_common_subsequence_iterative(s1,s2):\n    '''"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums or n<1:\n        return []\n    heap = nums[:n]\n    hq.heapify(heap)\n    for i in xrange(n,len(nums)):\n        if nums[i] > heap[0]:\n            hq.heapreplace(heap,nums[i])\n    return heap[::-1]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums or n<1:\n        return []\n    heap = nums[:n]\n    hq.heapify(heap)\n    for i in xrange(n,len(nums)):\n        if nums[i] < heap[0]:\n            hq.heapreplace(heap,nums[i])\n    return heap\ndef count_inversion(nums):\n    '''\n    Count inversions in an array\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    count = 0\n    for i in xrange(n):\n        for j in xrange(i+1,n):\n            if nums[i] > nums[j]:\n                count += 1\n    return count\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from an unsorted array\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    i = 0\n    j = 0\n    for i in xrange(n):\n        if nums[i]!= nums[j]:\n            j += 1\n            nums[j] = nums[i]\n    return j+1\ndef rotate(nums,k):\n    '''\n    Rearrange array so that array is rotated k times\n    '''\n    if not nums or len(nums) == 1:\n        return nums\n    n = len(nums)\n    k = k%n\n    nums.reverse()\n    nums[:k] = nums[:k][::-1]\n    nums[k:] = nums[k:][::-1]\n    return nums\ndef find_rotate_point(nums):\n    '''\n    Find point in rotated sorted array such that all elements before it are less than it and all elements after it are greater than it\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    low = 0\n    high = n-1\n    while low < high:\n        mid = (low+high)/2\n        if nums[mid] > nums[high]:\n            low = mid+1\n        elif nums[mid] < nums[low]:\n            high = mid\n        else:\n            high -= 1\n    return low\ndef search_in_rotated_sorted(nums,target):\n    '''\n    Search an item in an array of numbers which is rotated in sorted manner\n    '''\n    if not nums:\n        return False\n    n = len(nums)\n    if target >= nums[0] and target <= nums[n-1]:\n        low = 0\n        high = n-1\n        while low<=high:\n            mid = (low+high)/2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] > target:\n                high = mid-1\n            else:\n                low = mid+1\n    return False\ndef search_in_rotated_sorted_logarithmic(nums,target):\n    '''\n    Search an item in an array of numbers which is rotated in sorted manner\n    '''\n    if not nums:\n        return False\n    n = len(nums)\n    if target >= nums[0] and target <= nums[n-1]:\n        low = 0\n        high = n-1\n        while low<=high:\n            mid = (low+high)/2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] > target:\n                if nums[low] == target or nums[low+1] == target:\n                    return True\n                else:\n                    high = mid-1\n            else:\n                if nums[high] == target or nums[high-1] == target:\n                    return True\n                else:\n                    low = mid+1\n    return False\ndef find_rotation_point(nums):\n    '''\n    Find rotation point in array\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    low = 0\n    high = n-1\n    while low<high:\n        mid = (low+high)/2\n        if nums[mid] < nums[mid+1]:\n            low = mid+1\n        else:\n            high = mid\n    return low\ndef merge(nums1,nums2):\n    '''\n    Merge two sorted arrays and return the new merged array\n    '''\n    if not nums1 or not nums2:\n        return nums1+nums2\n    n = len(nums1)\n    m = len(nums2)\n    i = 0\n    j = 0\n    result = []\n    while i<n and j<m:\n        if nums1[i] <= nums2[j]:\n            result.append(nums1[i])\n            i += 1\n        else:\n            result.append(nums2[j])\n            j += 1\n    while i<n:\n        result.append(nums1[i])\n        i += 1\n    while j<m:\n        result.append(nums2[j])\n        j += 1\n    return result\ndef find_pivot(nums,low,high):\n    '''\n    Find a pivot in array\n    '''\n    if low == high:\n        return low\n    mid = (low+high)/2\n    if mid > 0 and nums[mid] > nums[mid-1]:\n        return mid\n    elif mid < len(nums)-1 and nums[mid] < nums[mid+1]:\n        return mid\n    elif nums[mid] < nums[low]:\n        return find_pivot(nums,mid+1,high)\n    else:\n        return find_pivot(nums,low,mid-1)\ndef find_pivot_2(nums,low,high):\n    '''\n    Find a pivot in array\n    '''\n    if low == high:\n        return low\n    mid = (low+high)/2\n    if nums[mid] > nums[high]:\n        return find_pivot_2(nums,mid+1,high)\n    elif nums[mid] < nums[low]:\n        return find_pivot_2(nums,low,mid-1)\n    else:\n        return mid\ndef find_rotation_point_2(nums):\n    '''\n    Find a rotation point in array\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    low = 0\n    high = n-1\n    while low<high:\n        mid = (low+high)/2\n        if nums[mid] > nums[high]:\n            low = mid+1\n        elif nums[mid] < nums[low]:\n            high = mid\n        else:\n            high -= 1\n    return low\ndef find_rotation_point_3(nums):\n    '''\n    Find a rotation point in array\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    low = 0\n    high = n-1\n    while low<high:\n        mid = (low+high)/2\n        if nums[mid] > nums[high]:\n            low = mid+1\n        elif nums[mid] < nums[low]:\n            high = mid\n        else:\n            high -= 1\n    return low\ndef find_rotation_point_4(nums):\n    '''\n    Find a rotation point in array\n    '''\n    if not nums:\n        return 0\n    n "
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 0\n    elif x == 2:\n        return 0\n    elif x == 3:\n        return 0\n    elif x == 4:\n        return 0\n    elif x == 5:\n        return 0\n    elif x == 6:\n        return 1\n    elif x == 7:\n        return 1\n    elif x == 8:\n        return 0\n    elif x == 9:\n        return 0\n    elif x == 10:\n        return 0\n    elif x == 11:\n        return 0\n    elif x == 12:\n        return 0\n    elif x == 13:\n        return 0\n    elif x == 14:\n        return 0\n    elif x == 15:\n        return 0\n    elif x == 16:\n        return 0\n    elif x == 17:\n        return 0\n    elif x == 18:\n        return 0\n    elif x == 19:\n        return 0\n    elif x == 20:\n        return 0\n    elif x == 21:\n        return 0\n    elif x == 22:\n        return 0\n    elif x == 23:\n        return 0\n    elif x == 24:\n        return 0\n    elif x == 25:\n        return 0\n    elif x == 26:\n        return 0\n    elif x == 27:\n        return 0\n    elif x == 28:\n        return 0\n    elif x == 29:\n        return 0\n    elif x == 30:\n        return 0\n    elif x == 31:\n        return 0\n    elif x == 32:\n        return 0\n    elif x == 33:\n        return 0\n    elif x == 34:\n        return 0\n    elif x == 35:\n        return 0\n    elif x == 36:\n        return 0\n    elif x == 37:\n        return 0\n    elif x == 38:\n        return 0\n    elif x == 39:\n        return 0\n    elif x == 40:\n        return 0\n    elif x == 41:\n        return 0\n    elif x == 42:\n        return 0\n    elif x == 43:\n        return 0\n    elif x == 44:\n        return 0\n    elif x == 45:\n        return 0\n    elif x == 46:\n        return 0\n    elif x == 47:\n        return 0\n    elif x == 48:\n        return 0\n    elif x == 49:\n        return 0\n    elif x == 50:\n        return 0\n    elif x == 51:\n        return 0\n    elif x == 52:\n        return 0\n    elif x == 53:\n        return 0\n    elif x == 54:\n        return 0\n    elif x == 55:\n        return 0\n    elif x == 56:\n        return 0\n    elif x == 57:\n        return 0\n    elif x == 58:\n        return 0\n    elif x == 59:\n        return 0\n    elif x == 60:\n        return 0\n    elif x == 61:\n        return 0\n    elif x == 62:\n        return 0\n    elif x == 63:\n        return 0\n    elif x == 64:\n        return 0\n    elif x == 65:\n        return 0\n    elif x == 66:\n        return 0\n    elif x == 67:\n        return 0\n    elif x == 68:\n        return 0\n    elif x == 69:\n        return 0\n    elif x == 70:\n        return 0\n    elif x == 71:\n        return 0\n    elif x == 72:\n        return 0\n    elif x == 73:\n        return 0\n    elif x == 74:\n        return 0\n    elif x == 75:\n        return 0\n    elif x == 76:\n        return 0\n    elif x == 77:\n        return 0\n    elif x == 78:\n        return 0\n    elif x == 79:\n        return 0\n    elif x == 80:\n        return 0\n    elif x == 81:\n        return 0\n    elif x == 82:\n        return 0\n    elif x == 83:\n        return 0\n    elif x == 84:\n        return 0\n    elif x == 85:\n        return 0\n    elif x == 86:\n        return 0\n    elif x == 87:\n        return 0\n    elif x == 88:\n        return 0\n    elif x == 89:\n        return 0\n    elif x == 90:\n        return 0\n    elif x == 91:\n        return 0\n    elif x == 92:\n        return 0\n    elif x == 93:\n        return 0\n    elif x == 94:\n        return 0\n    elif x == 95:\n        return 0\n    elif x == 96:\n        return 0\n    elif x == 97:\n        return 0\n    elif x == 98:\n        return 0\n    elif x == 99:\n        return 0\n    elif x == 100:\n        return 0\n    elif x == 101:\n        return 0\n    elif x == 102:\n        return 0\n    elif x == 103:\n        return 0\n    elif x == 104:\n        return 0\n    elif x == 105:\n        return 0\n    elif x == 106:\n        return 0\n    elif x == 107:\n        return 0\n    elif x == 108:\n        return 0\n    elif x == 109:\n        return 0\n    elif x == 110:\n        return 0\n    elif x == 111:\n        return 0\n    elif x == 112:\n        return 0\n    elif x == 113:\n        return 0\n    elif x == 114:\n        return 0\n    elif x == 115:\n        return 0\n    elif x == 116:\n        return 0\n    elif x == 117:\n        return 0\n    elif x == 118:\n        return 0\n    elif x == 119:\n        return 0\n    elif x == 120:\n        return 0\n    elif x == 121:\n        return 0\n    elif x == 122:\n        return 0\n    elif x == 123:\n        return 0\n    elif x == 124:\n        return 0\n    elif x == 125:\n        return 0\n    elif x == 126:\n        return 0\n    elif x == 127:\n        return 0\n    elif x == 128:\n        return 0\n    elif x == 129:\n        return 0\n    elif x == 130:\n        return 0\n    elif x == 131:\n        return 0\n    elif x == 132:\n        return 0\n    elif x == 133:\n        return 0\n    elif x == 134:\n        return 0\n    elif x == 135:\n        return 0\n    elif x == 136:\n        return 0\n    elif x == 137:\n        return 0\n    elif x == 138:\n        return 0\n    elif x == 139:\n        return 0\n    elif x == 140:\n        return 0\n    elif x == 141:\n        return 0\n    elif x == 142:\n        return 0\n    elif x == 143:\n        return 0\n    elif x == 144:\n        return 0\n    elif x == 145:\n        return 0\n    elif x == 146:\n        return 0\n    elif x == 147:\n        return 0\n    elif x == 148:\n        return 0\n    elif x == 149:\n        return 0\n    elif x == 150:\n        return 0\n    elif x == 151:\n        return 0\n    elif x == 152:\n        return 0\n    elif x == 153:\n        return 0\n    elif x == 154:\n        return 0\n    elif x == 155:\n        return 0\n    elif x == 156:\n        return 0\n    elif x == 157:\n        return 0\n    elif x == 158:\n        return 0\n    elif x == 159:\n        return 0\n    elif x == 160:\n        return 0\n    elif x == 161:\n        return 0\n    elif x == 162:\n        return 0\n    elif x == 163:\n        return 0\n    elif x == 164:\n        return 0\n    elif x == 165:\n        return 0\n    elif x == 166:\n        return 0\n    eli"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # return (x & (x - 1)) == 0\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x!= 2 ** (x - 1): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x and (not (x & (x - 1))) \n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num = x\n    count = 0\n    while num > 0:\n        num = num / 2\n        count += 1\n    if (x % 2) == 0:\n        return (x,count)\n    else:\n        return (x,count-1)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2:\n        return True\n    while x > 2:\n        if x % 2 == 1:\n            return False\n        x = x / 2\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # using bitwise operator \n    # if x!= 0 : \n    #     x = x & (x - 1)\n    #     print(x)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n    #return not bool(x & (x - 1))\n    \ndef is_Palindrome(x): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    return x[:] == x[::-1]\n    \ndef factorial(x):\n    '''\n    Write a python function to find the factorial of the number.\n    '''\n    if x < 0:\n        return False\n    if x == 0 or x == 1:\n        return 1\n    return x * factorial(x - 1)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    matches = re.findall(r'\\w{4,}', text)\n    print(matches)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    re_chars = re.compile(r'[^\\w]')\n    re_word = re.compile(r'\\w{4,}')\n    result = re_word.findall(text)\n    print result\ndef find_words_in_line(text):\n    '''\n    Write a function to find all words that start with a vowel in a string.\n    '''\n    re_vowel = re.compile(r'[aeiouAEIOU]')\n    re_word = re.compile(r'\\w+')\n    result = re_word.findall(text)\n    print result\ndef find_alphanumeric(text):\n    '''\n    Write a function to find all the alphanumeric characters in a string.\n    '''\n    re_alphanumeric = re.compile(r'\\w+')\n    result = re_alphanumeric.findall(text)\n    print result\ndef find_matches(text):\n    '''\n    Write a function to find all the matches in a string.\n    '''\n    re_matches = re.compile(r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})')\n    result = re_matches.findall(text)\n    print result\ndef find_emails(text):\n    '''\n    Write a function to find all the emails in a string.\n    '''\n    re_emails = re.compile(r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})')\n    result = re_emails.findall(text)\n    print result\ndef find_phone_numbers(text):\n    '''\n    Write a function to find all the phone numbers in a string.\n    '''\n    re_phone_number = re.compile(r'(0\\d{2,3}-\\d{3,4}-\\d{4})')\n    result = re_phone_number.findall(text)\n    print result\ndef find_acronyms(text):\n    '''\n    Write a function to find all the acronyms in a string.\n    '''\n    re_acronym = re.compile(r'\\b([A-Z]{1}[a-z]+[A-Z]{1})\\b')\n    result = re_acronym.findall(text)\n    print result\ndef find_links(text):\n    '''\n    Write a function to find all the hyperlinks in a string.\n    '''\n    re_links = re.compile(r'((?:https?|ftp)://[^\\s\\.]+\\.[^\\s]+)')\n    result = re_links.findall(text)\n    print result\ndef find_ip_addresses(text):\n    '''\n    Write a function to find all the ip addresses in a string.\n    '''\n    re_ip = re.compile(r'(?:[0-9]{1,3}\\.){3}[0-9]{1,3}')\n    result = re_ip.findall(text)\n    print result\ndef find_roman_numbers(text):\n    '''\n    Write a function to find all the roman numbers in a string.\n    '''\n    re_roman = re.compile(r'([M-Z]{1}[0-9]+|[0-9]{1,3}[XV]?{1}[0-9]+|[Vv][Xx]|[Xx][Vv]|[Mm]{1}[Xx][Vv]|[Mm]{1}[Vv]|[Vv]{1}[Vv]|[Vv]{1}[Ii]|[Ii][Vv])')\n    result = re_roman.findall(text)\n    print result\ndef find_dates(text):\n    '''\n    Write a function to find all the dates in a string.\n    '''\n    re_date = re.compile(r'([0-9]+/[0-9]+/[0-9]{4})')\n    result = re_date.findall(text)\n    print result\ndef find_phone_numbers_2(text):\n    '''\n    Write a function to find all the phone numbers in a string.\n    '''\n    re_phone_number = re.compile(r'(0\\d{2,3}-\\d{3,4}-\\d{4})')\n    result = re_phone_number.findall(text)\n    print result\ndef find_prepositions(text):\n    '''\n    Write a function to find all the prepositions in a string.\n    '''\n    re_preposition = re.compile(r'(to|in|by|with|from|for|about|on|off|in|on|for|at|to|of|on|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|fro"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return re.findall(r'\\w+', text)\ndef find_char_long_v2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v3(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return re.findall('\\w+', text)\ndef find_char_long_v4(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v5(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v6(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v7(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v8(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v9(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return re.findall(r'\\w+', text)\ndef find_char_long_v10(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v11(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v12(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v13(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v14(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v15(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v16(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v17(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v18(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v19(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v20(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v21(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v22(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v23(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if type(text)!= str:\n        return None\n    \n    words = re.findall('\\w{4,}', text)\n    if words:\n        return words\n    else:\n        return None\n    \ndef find_words_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if type(text)!= str:\n        return None\n    \n    words = re.findall('\\w{4,}', text)\n    if words:\n        return words\n    else:\n        return None\n    \ndef find_words_long2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if type(text)!= str:\n        return None\n    \n    words = re.findall('\\w{4,}', text)\n    if words:\n        return words\n    else:\n        return None\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return []\n    #words = re.findall(r'\\w+', text)\n    words = re.findall(r'\\w+', text)\n    result = []\n    for word in words:\n        if len(word)>=4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    list_of_words = pattern.findall(text)\n    return list_of_words\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Your Code Here\n    return re.findall(r\"[\\w]+\", text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    text_list = text.split()\n    for word in text_list:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    all_words = re.findall(r'\\w{4,}', text)\n    return all_words\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # using list\n    words = re.findall('\\w+', text)\n    return [word for word in words if len(word) >= 4]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # for i in range(len(nums)):\n    #     nums[i] = nums[i]**2\n    # return nums\n    # return [x**2 for x in nums]\n    return list(map(lambda x: x**2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i*i)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x ** 2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n    "
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    n = len(str)\n    # your code here\n    \n    def helper(s, result):\n        if s == \"\":\n            return result\n        else:\n            if s[0] == s[-1]:\n                result += helper(s[1:-1], result)\n            else:\n                result += helper(s[1:], result)\n            return result\n        \n    return helper(str, 0)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    str_len = len(str)\n    rot_count = 0\n    \n    if str_len == 0:\n        return 0\n    \n    for i in range(0, str_len):\n        temp = str[i:] + str[:i]\n        if temp == str:\n            rot_count = rot_count + 1\n    \n    return rot_count\n    \nprint find_Rotations(\"abcdef\")\nprint find_Rotations(\"abcd\")\nprint find_Rotations(\"abc\")\nprint find_Rotations(\"abcdef\")\nprint find_Rotations(\"a\")\nprint find_Rotations(\"\")\nprint find_Rotations(\"abcdefgh\")\nprint find_Rotations(\"abcdefghijklm\")\nprint find_Rotations(\"abcdefghijklmn\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyz\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Ro"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations():\n    assert find_Rotations(\"ABCD\") == 0\n    assert find_Rotations(\"BBBB\") == -1\n    assert find_Rotations(\"\") == 0\ndef find_Rotations_two(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_two():\n    assert find_Rotations_two(\"ABCD\") == 0\n    assert find_Rotations_two(\"BBBB\") == -1\n    assert find_Rotations_two(\"\") == 0\ndef find_rotations_three(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_three():\n    assert find_rotations_three(\"ABCD\") == 0\n    assert find_rotations_three(\"BBBB\") == -1\n    assert find_rotations_three(\"\") == 0\ndef find_rotations_four(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_four():\n    assert find_rotations_four(\"ABCD\") == 0\n    assert find_rotations_four(\"BBBB\") == -1\n    assert find_rotations_four(\"\") == 0\ndef find_rotations_five(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_five():\n    assert find_rotations_five(\"ABCD\") == 0\n    assert find_rotations_five(\"BBBB\") == -1\n    assert find_rotations_five(\"\") == 0\ndef find_rotations_six(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_six():\n    assert find_rotations_six(\"ABCD\") == 0\n    assert find_rotations_six(\"BBBB\") == -1\n    assert find_rotations_six(\"\") == 0\ndef find_rotations_seven(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_seven():\n    assert find_rotations_seven(\"ABCD\") == 0\n    assert find_rotations_seven(\"BBBB\") == -1\n    assert find_rotations_seven(\"\") == 0\ndef find_rotations_eight(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_eight():\n    assert find_rotations_eight(\"ABCD\") == 0\n    assert find_rotations_eight(\"BBBB\") == -1\n    assert find_rotations_eight(\"\") == 0\ndef find_rotations_nine(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_nine():\n    assert find_rotations_nine(\"ABCD\") == 0\n    assert find_rotations_nine(\"BBBB\") == -1\n    assert find_rotations_nine(\"\") == 0\ndef find_rotations_ten(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_ten():\n    assert find_rotations_ten(\"ABCD\") == 0\n    assert find_rotations_ten(\"BBBB\") == -1\n    assert find_rotations_ten(\"\") == 0\ndef find_rotations_eleven(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_eleven():\n    assert find_rotations_eleven(\"ABCD\") == 0\n    assert find_rotations_eleven(\"BBBB\") == -1\n    assert find_rotations_eleven(\"\") == 0\ndef find_rotations_twelve(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_twelve():\n    assert find_rotations_twelve(\"ABCD\") == 0\n    assert find_rotations_twelve(\"BBBB\") == -1\n    assert find_rotations_twelve(\"\") == 0\ndef find_rotations_thirteen(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n)"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    temp= str[:]\n    n = len(str)\n    if n < 2:\n        return 0\n    for i in xrange(1,n):\n        temp = temp[-1] + temp[:-1]\n        if temp == str:\n            return i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    else:\n        return 1 + find_Rotations(str[1:])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    from collections import Counter\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str) \n    if l == 0:\n        return 0\n    if l == 1:\n        return 0\n    if l == 2:\n        return 0\n    i = 0\n    j = 1\n    while (j<l):\n        if str[i] == str[j]:\n            i+=1\n            j+=1\n        else:\n            break\n    if i == j:\n        return 0\n    else:\n        return (l-i)//2\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    temp = str + str\n    for i in range(n):\n        if (temp[i:] + temp[:i]) == str:\n            return (n - i)\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str) \n    for i in range(0, length):\n        print('comparing ', str[i:],'with ', str[length-i:])\n        if str[i:] == str[length-i:]:\n            return i\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 1\n    while(True):\n        if(str == str[::-1]):\n            return rotations\n        if(str[:len(str)] == str[len(str):]):\n            str = str[len(str):]\n            rotations += 1\n        else:\n            return -1\n        \nprint find_Rotations('abc')\nprint find_Rotations('abcda')\nprint find_Rotations('abcd')\nprint find_Rotations('abcdabcdabcd')\nprint find_Rotations('abcdbcdecdbcddd')\nprint find_Rotations('aacdbcdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbc"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    newS=''\n    for i in s:\n        if i==ch:\n            pass\n        else:\n            newS+=i\n    return newS\n    \n    \ndef remove_Occ2(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.rstrip(ch).lstrip(ch)\n    \n    \n    \ndef last_occ(s,ch):\n    '''\n    Write a python function to return the last occurrence of a given character from the string.\n    '''\n    last_pos=0\n    for i in range(len(s)):\n        if s[i]==ch:\n            last_pos=i\n    return last_pos\n    \n    \ndef last_occ2(s,ch):\n    '''\n    Write a python function to return the last occurrence of a given character from the string.\n    '''\n    last_pos=0\n    for i in range(len(s)-1,0,-1):\n        if s[i]==ch:\n            last_pos=i\n    return last_pos\n    \n    \ndef count_ch(s,ch):\n    '''\n    Write a python function to count the number of occurrences of a given character from the string.\n    '''\n    count=0\n    for i in s:\n        if i==ch:\n            count+=1\n    return count\n    \n    \ndef count_ch2(s,ch):\n    '''\n    Write a python function to count the number of occurrences of a given character from the string.\n    '''\n    count=0\n    for i in s:\n        if i==ch:\n            count+=1\n    return count\n    \n    \ndef remove_all_ch(s,ch):\n    '''\n    Write a python function to remove all the occurrences of a given character from the string.\n    '''\n    newS=''\n    for i in s:\n        if i==ch:\n            pass\n        else:\n            newS+=i\n    return newS\n    \n    \ndef remove_all_ch2(s,ch):\n    '''\n    Write a python function to remove all the occurrences of a given character from the string.\n    '''\n    newS=''\n    for i in s:\n        if i==ch:\n            pass\n        else:\n            newS+=i\n    return newS\n    \n    \ndef first_n_ch(s,n,ch):\n    '''\n    Write a python function to return first n occurrences of a given character from the string.\n    '''\n    newS=''\n    for i in range(n):\n        if s[i]==ch:\n            newS+=ch\n    return newS\n    \n    \ndef first_n_ch2(s,n,ch):\n    '''\n    Write a python function to return first n occurrences of a given character from the string.\n    '''\n    newS=''\n    for i in range(n):\n        if s[i]==ch:\n            newS+=ch\n    return newS\n    \n    \ndef last_n_ch(s,n,ch):\n    '''\n    Write a python function to return last n occurrences of a given character from the string.\n    '''\n    newS=''\n    for i in range(len(s)-n,len(s)):\n        if s[i]==ch:\n            newS+=ch\n    return newS\n    \n    \ndef last_n_ch2(s,n,ch):\n    '''\n    Write a python function to return last n occurrences of a given character from the string.\n    '''\n    newS=''\n    for i in range(len(s)-n,len(s)):\n        if s[i]==ch:\n            newS+=ch\n    return newS\n    \n    \ndef nth_ch(s,n,ch):\n    '''\n    Write a python function to return nth occurrence of a given character from the string.\n    '''\n    newS=''\n    for i in range(len(s)):\n        if s[i]==ch:\n            if i==n:\n                newS+=ch\n            else:\n                pass\n        else:\n            newS+=s[i]\n    return newS\n    \n    \ndef nth_ch2(s,n,ch):\n    '''\n    Write a python function to return nth occurrence of a given character from the string.\n    '''\n    newS=''\n    for i in range(len(s)):\n        if s[i]==ch:\n            if i==n:\n                newS+=ch\n            else:\n                pass\n        else:\n            newS+=s[i]\n    return newS\n    \n    \ndef find_str(s,st):\n    '''\n    Write a python function to find a substring in a given string.\n    '''\n    pos=0\n    for i in range(len(s)):\n        if s[i:i+len(st)]==st:\n            pos=i\n            break\n    return pos\n    \n    \ndef find_str2(s,st):\n    '''\n    Write a python function to find a substring in a given string.\n    '''\n    pos=0\n    for i in range(len(s)):\n        if s[i:i+len(st)]==st:\n            pos=i\n            break\n    return pos\n    \n    \ndef find_str_all(s,st):\n    '''\n    Write a python function to find a substring in a given string.\n    '''\n    pos=[]\n    for i in range(len(s)):\n        if s[i:i+len(st)]==st:\n            pos.append(i)\n    return pos\n    \n    \ndef find_str_all2(s,st):\n    '''\n    Write a python function to find a substring in a given string.\n    '''\n    pos=[]\n    for i in range(len(s)):\n        if s[i:i+len(st)]==st:\n            pos.append(i)\n    return pos\n    \n    \ndef reverse_str(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    newS=''\n    for i in range(len(s)-1,-1,-1):\n        newS+=s[i]\n    return newS\n    \n    \ndef reverse_str2(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return s[::-1]\n    \n    \ndef reverse_str_split(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    newS=''\n    for i in s.split():\n        newS+=reverse_str(i)\n        newS+=' '\n    return newS\n    \n    \ndef reverse_str_split2(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return''.join(reverse_str2(i) for i in s.split())\n    \n    \ndef sort_str(s):\n    '''\n    Write a python function to sort a given string.\n    '''\n    newS=''\n    for i in sorted(s):\n        newS+=i\n    return newS\n    \n    \ndef sort_str2(s):\n    '''\n    Write a python function to sort a given string.\n    '''\n    return ''.join(sorted(s))\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    return s==s[::-1]\n    \n    \ndef is_palindrome2(s):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    for i in range(len(s)):\n        if s[i]!=s[len(s)-1-i]:\n            return False\n    return True\n    \n    \ndef is_palindrome3(s):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    i=0\n    j=len(s)-1\n    while "
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = s.split(ch)\n    return \"\".join(l[1:-1])\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    import re\n    return re.sub(ch+'+','',s)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    a=s.rfind(ch)\n    b=s.find(ch)\n    if(a==b):\n        return s\n    else:\n        return s[:a]+s[b+1:]\n    \n    \ndef remove_str_in_list(s,l):\n    '''\n    Write a python function to remove the string from a given list of strings.\n    '''\n    i=l.index(s)\n    return l[:i]+l[i+1:]\n    \ndef substring(s1,s2):\n    '''\n    Write a python function to check whether a substring is present in a string or not\n    '''\n    return s1 in s2\n    \ndef ispalindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not\n    '''\n    return s==s[::-1]\n    \ndef count_char(s):\n    '''\n    Write a python function to count the occurence of characters in a string\n    '''\n    return dict((i,s.count(i)) for i in set(s))\n    \ndef split(s,c):\n    '''\n    Write a python function to split a string into list of strings after a given character\n    '''\n    return s.split(c)\n    \ndef min_max(l):\n    '''\n    Write a python function to calculate the minimum and maximum of a list\n    '''\n    return min(l),max(l)\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse a string\n    '''\n    return s[::-1]\n    \ndef sort_str(s):\n    '''\n    Write a python function to sort a string based on ASCII value of the characters\n    '''\n    return \"\".join(sorted(s))\n    \ndef sort_str_in_list(s,l):\n    '''\n    Write a python function to sort a string based on ASCII value of the characters\n    '''\n    l=list(s)\n    l=sorted(l)\n    return \"\".join(l)\n    \ndef delete_duplicate_chars(s):\n    '''\n    Write a python function to delete all duplicate characters from a string\n    '''\n    return \"\".join(set(s))\n    \ndef map_str(s,m):\n    '''\n    Write a python function to replace the characters in a string with given mapping\n    '''\n    return \"\".join(m[i] for i in s)\n    \ndef swap(a,b):\n    '''\n    Write a python function to swap two integers\n    '''\n    return b,a\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to sum of the digits in a number\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef count_occurence(s,ch):\n    '''\n    Write a python function to count the number of occurrences of a given character in a string\n    '''\n    return s.count(ch)\n    \ndef replace(s,ch,s2):\n    '''\n    Write a python function to replace all occurrences of a character in a string with another string\n    '''\n    return s.replace(ch,s2)\n    \ndef print_list(l):\n    '''\n    Write a python function to print the list\n    '''\n    return [str(i) for i in l]\n    \ndef print_list_of_lists(l):\n    '''\n    Write a python function to print the list of lists\n    '''\n    return [print_list(i) for i in l]\n    \ndef print_dict(d):\n    '''\n    Write a python function to print the dictionary\n    '''\n    return dict((i,str(d[i])) for i in d)\n    \ndef print_dict_of_lists(d):\n    '''\n    Write a python function to print the dictionary of lists\n    '''\n    return dict((i,print_list(d[i])) for i in d)\n    \ndef print_dict_of_tuples(d):\n    '''\n    Write a python function to print the dictionary of tuples\n    '''\n    return dict((i,tuple(d[i])) for i in d)\n    \ndef print_dict_of_dict(d):\n    '''\n    Write a python function to print the dictionary of dict\n    '''\n    return dict((i,dict((j,str(d[i][j])) for j in d[i])) for i in d)\n    \ndef f(l):\n    '''\n    Write a python function to check whether a given list is consecutive or not\n    '''\n    return sorted(l)==list(range(min(l),max(l)+1))\n    \ndef has_all_unique_char(s):\n    '''\n    Write a python function to check whether a string has all unique characters or not\n    '''\n    return len(s)==len(set(s))\n    \ndef check_all_vowels(s):\n    '''\n    Write a python function to check whether a string is a permutation of a palindrome\n    '''\n    return s==s[::-1]\n    \ndef print_list_of_lists_of_list(l):\n    '''\n    Write a python function to print the list of lists of list\n    '''\n    return [[print_list(i) for i in j] for j in l]\n    \ndef print_list_of_lists_of_string(l):\n    '''\n    Write a python function to print the list of lists of string\n    '''\n    return [[print_list(i) for i in j] for j in l]\n    \ndef print_list_of_tuples_of_string(l):\n    '''\n    Write a python function to print the list of tuples of string\n    '''\n    return [[tuple(i) for i in j] for j in l]\n    \ndef print_list_of_tuples_of_list(l):\n    '''\n    Write a python function to print the list of tuples of list\n    '''\n    return [[tuple(i) for i in j] for j in l]\n    \ndef print_list_of_sets(l):\n    '''\n    Write a python function to print the list of sets\n    '''\n    return [set(i) for i in l]\n    \ndef print_list_of_tuples_of_set(l):\n    '''\n    Write a python function to print the list of tuples of set\n    '''\n    return [(tuple(i)) for i in l]\n    \ndef print_list_of_lists_of_set(l):\n    '''\n    Write a python function to print the list of lists of set\n    '''\n    return [[set(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_list(l):\n    '''\n    Write a python function to print the list of dictionary of list\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_tuple(l):\n    '''\n    Write a python function to print the list of dictionary of tuple\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_string(l):\n    '''\n    Write a python function to print the list of dictionary of string\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_dict(l):\n    '''\n    Write a python function to print the list of dictionary of dictionary\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_dict_of_list(l):\n    '''\n    Write a python function to print the list of dictionary of dictionary of list\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_list_of_dict(l):\n    '''\n    Write a python function to print the list of list of dictionary\n    '''"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1 = s.replace(ch, '')\n    s1 = s1.replace(ch, '')\n    return s1\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.strip(ch)\n    s=s.strip(ch)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip(ch)\n    s = s.strip(ch)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = 0\n    for i in s:\n        if i == ch:\n            count += 1\n    if count == 0:\n        return -1\n    s = s.replace(ch, '', 1)\n    s = s.replace(ch, '', 1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    str = list(s)\n    str.remove(ch)\n    str.remove(ch)\n    \n    return ''.join(str)\n    \n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    return sorted(M, key = lambda row: row_sums.index(sum(row)))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    new_matrix = sorted(M, key=sum)\n    return new_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in xrange(len(M)):\n        row_sum = sum(M[i])\n        if row_sum > 0:\n            return 'No'\n        else:\n            row_sum = -row_sum\n    return 'Yes'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    row_sum = [0]*n\n    for i in xrange(n):\n        for j in xrange(n):\n            row_sum[i] += M[i][j]\n        row_sum[i] += row_sum[i-1]\n        if i == 0:\n            row_sum[i] = row_sum[i] + M[i][i]\n        else:\n            row_sum[i] = row_sum[i] + row_sum[i-1]\n        M[i].append(row_sum[i])\n    M.append(row_sum)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if j == 0:\n                M[i][j] += M[i-1][j]\n            else:\n                M[i][j] += M[i][j-1]\n    for j in range(len(M[0])):\n        M[0][j] = 0\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n    for i in range(len(M) - 1):\n        for j in range(len(M[i])):\n            if M[i][j] > M[i + 1][j]:\n                temp = M[i][j]\n                M[i][j] = M[i + 1][j]\n                M[i + 1][j] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Get the length of each row\n    rows = [len(M[0])]\n    for i in range(len(M)):\n        rows.append(len(M[i]))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    r = len(M)\n    c = len(M[0])\n    d = {}\n    for i in range(r):\n        for j in range(c):\n            if i not in d:\n                d[i] = {}\n                d[i][j] = M[i][j]\n            else:\n                if j not in d[i]:\n                    d[i][j] = M[i][j]\n                else:\n                    d[i][j] += M[i][j]\n    # print d\n    res = []\n    for i in sorted(d.keys()):\n        # print i,d[i]\n        res.append(d[i])\n    return res\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    N = len(M)\n    S = len(M[0])\n    \n    M_sorted = []\n    \n    # print M\n    \n    for i in xrange(N):\n        M_i = sorted(M[i])\n        # print M_i\n        # print\n        M_i = [0] + M_i + [0]\n        # print M_i\n        # print\n        # print M_i\n        M_i = sum(M_i)\n        # print M_i\n        M_sorted.append(M_i)\n        # print M_sorted\n        # print\n        \n    M_sorted.sort()\n    \n    return M_sorted\n    \ndef print_matrix(M):\n    N = len(M)\n    S = len(M[0])\n    for i in xrange(N):\n        print M[i]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (h*(h+l))/2.0*b\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h)/3\n    \ndef find_area(a,b,c) :\n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    return (a * b)/2\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    return (b*h)/2.0\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return abs(l*b*h/6.0)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l <= 0 or b <= 0 or h <= 0 :\n        return \"Triangle can't be formed\"\n    else :\n        return l*b*h/(6)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # b * h / 2 =  1/2 (a + b + c) * h\n    return (b*h)/2 * (l + b + h)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #l is length of side 1\n    #b is length of side 2\n    #h is length of side 3\n    vol = l*b*h/6\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l=float(l)\n    b=float(b)\n    h=float(h)\n    return (l*b*h)/3.0\n    "
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.match('^[a-z]*_?[a-z]+$', text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    if re.search('[a-z]+_[a-z]+', text)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_+[a-z]*', text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'^[a-z]{1}_[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= 'a' and text[i] <= 'z':\n            return False\n        if text[i] == '_':\n            if i < len(text) - 1 and text[i+1] >= 'a' and text[i+1] <= 'z':\n                return False\n    return True\ndef text_lowercase_double_underscore(text):\n    '''\n    Write a function that returns true if the input string contains sequences of two consecutive lowercase letters and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text) - 1):\n        if text[i] == '_' and text[i+1] == '_':\n            return False\n        if text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'a' and text[i+1] <= 'z':\n            return False\n    return True\ndef text_upper_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of upper case letters and lower case letters and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= 'A' and text[i] <= 'Z':\n            return False\n        if text[i] >= 'a' and text[i] <= 'z':\n            return False\n    return True\ndef text_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of digits and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= '0' and text[i] <= '9':\n            return False\n    return True\ndef text_letters(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= 'a' and text[i] <= 'z':\n            return False\n        if text[i] >= 'A' and text[i] <= 'Z':\n            return False\n    return True\ndef text_substrings(text):\n    '''\n    Write a function to that returns true if the input string contains all the characters of the alphabet in the same order and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= 'a' and text[i] <= 'z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z':\n            continue\n        if i < len(text) - 1 and text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'A' and text[i+1] <= 'Z':\n            return False\n    return True\ndef text_substrings_space(text):\n    '''\n    Write a function to that returns true if the input string contains all the characters of the alphabet in the same order and true if there is a space character in the input string and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= 'a' and text[i] <= 'z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z':\n            continue\n        if i < len(text) - 1 and text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'A' and text[i+1] <= 'Z' and text[i]!='' and text[i+1]!='':\n            return False\n    return True\ndef text_substrings_special(text):\n    '''\n    Write a function to that returns true if the input string contains all the characters of the alphabet in the same order and true if there is a space character in the input string and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= 'a' and text[i] <= 'z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z':\n            continue\n        if i < len(text) - 1 and text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'A' and text[i+1] <= 'Z' and text[i]!='' and text[i+1]!='':\n            return False\n    return True\ndef text_words(text):\n    '''\n    Write a function to that returns true if the input string contains words, numbers, letters, and underscores, and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= '0' and text[i] <= '9':\n            continue\n        if text[i] >= 'a' and text[i] <= 'z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z' and text[i]!='':\n            continue\n        if i < len(text) - 1 and text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'A' and text[i+1] <= 'Z' and text[i]!='' and text[i+1]!='':\n            continue\n    return True\ndef text_words_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains words, numbers, letters, and underscores, and true if there is a space character in the input string and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= '0' and text[i] <= '9':\n            continue\n        if text[i] >= 'a' and text[i] <= 'z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z' and text[i]!='':\n            continue\n        if i < len(text) - 1 and text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'A' and text[i+1] <= 'Z' and text[i]!='' and text[i+1]!='':\n            continue\n    return True\ndef text_words_special(text):\n    '''\n    Write a function to that returns true if the input string contains words, numbers, letters, and underscores, and true if there is a space character in the input string and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= '0' and text[i] <= '9':\n            continue\n        if text[i] >= 'a' and text[i] <= 'z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z' and text[i]!='':\n            continue\n        if i < len(text) - 1 and text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'A' and text[i+1] <= 'Z' and text[i]!='' and text[i+1]!='':\n            continue\n    return True\ndef text_words_period(text):\n    '''\n    Write a function to that returns true if the input string contains words, numbers, letters, and underscores, and true if there is a period character in the input string and false otherwise"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text is None:\n        return False\n    if not isinstance(text, str):\n        raise TypeError('Input is not a string')\n    if len(text) == 0:\n        return False\n    if len(text) == 1:\n        return text.isalpha()\n    if len(text) > 1:\n        count = 0\n        for ch in text:\n            if ch.isalpha():\n                count += 1\n        if count >= 2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lowercase = re.compile(r'[a-z]+_+[a-z]*')\n    return lowercase.match(text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    if re.search('[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False\n    # for i in range(len(text) - 1):\n    #     if text[i].lower() == text[i+1].lower():\n    #         continue\n    #     else:\n    #         return False\n    # return True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub('\\s+', '_', text)\n    return all(i.isalpha() or i == '_' for i in text)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    \n    return a * 4\n    \ndef set_a():\n    a = float(input(\"Enter a: \"))\n    return a\n    \ndef set_b():\n    b = float(input(\"Enter b: \"))\n    return b\n    \ndef triangle_area(a, b):\n    c = (a + b) / 2\n    return (c * (c - a) * (c - b)) ** 0.5\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = []\n    for i in range(len(string)):\n        li.append(string[i])\n    return li\ndef remove_characters(list1,list2):\n    li = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            li.append(list1[i])\n    return li\ndef str_to_str(string):\n    li = []\n    for i in range(len(string)):\n        li.append(string[i])\n    return li\ndef remove_characters_from_end(string,string2):\n    li = []\n    for i in range(len(string)):\n        if string[len(string)-i-1] not in string2:\n            li.append(string[len(string)-i-1])\n    return li\ndef get_list_of_words(string):\n    li = []\n    li = string.split(\" \")\n    return li\ndef count_no_of_words(list):\n    '''\n    Write a function to count the number of words in a sentence.\n    '''\n    no_of_words = len(list)\n    return no_of_words\ndef count_no_of_chars(string):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    no_of_chars = len(string)\n    return no_of_chars\ndef count_no_of_strings(list):\n    '''\n    Write a function to count the number of strings in a list.\n    '''\n    no_of_strings = len(list)\n    return no_of_strings\ndef count_no_of_sentences(string):\n    '''\n    Write a function to count the number of sentences in a string.\n    '''\n    no_of_sentences = string.count(\".\")\n    return no_of_sentences\ndef count_no_of_lines(string):\n    '''\n    Write a function to count the number of lines in a string.\n    '''\n    no_of_lines = string.count(\"\\n\")\n    return no_of_lines\ndef count_no_of_exclamation_marks(string):\n    '''\n    Write a function to count the number of exclamation marks in a string.\n    '''\n    no_of_exclamation_marks = string.count(\"!\")\n    return no_of_exclamation_marks\ndef count_no_of_question_marks(string):\n    '''\n    Write a function to count the number of question marks in a string.\n    '''\n    no_of_question_marks = string.count(\"?\")\n    return no_of_question_marks\ndef count_no_of_hash_marks(string):\n    '''\n    Write a function to count the number of hash marks in a string.\n    '''\n    no_of_hash_marks = string.count(\"#\")\n    return no_of_hash_marks\ndef count_no_of_dollar_signs(string):\n    '''\n    Write a function to count the number of dollar signs in a string.\n    '''\n    no_of_dollar_signs = string.count(\"$\")\n    return no_of_dollar_signs\ndef count_no_of_percentage_signs(string):\n    '''\n    Write a function to count the number of percentage signs in a string.\n    '''\n    no_of_percentage_signs = string.count(\"%\")\n    return no_of_percentage_signs\ndef count_no_of_tilde_signs(string):\n    '''\n    Write a function to count the number of tilde signs in a string.\n    '''\n    no_of_tilde_signs = string.count(\"~\")\n    return no_of_tilde_signs\ndef count_no_of_comma_signs(string):\n    '''\n    Write a function to count the number of comma signs in a string.\n    '''\n    no_of_comma_signs = string.count(\",\")\n    return no_of_comma_signs\ndef count_no_of_colon_signs(string):\n    '''\n    Write a function to count the number of colon signs in a string.\n    '''\n    no_of_colon_signs = string.count(\":\")\n    return no_of_colon_signs\ndef count_no_of_ampersand_signs(string):\n    '''\n    Write a function to count the number of ampersand signs in a string.\n    '''\n    no_of_ampersand_signs = string.count(\"&\")\n    return no_of_ampersand_signs\ndef count_no_of_apostrophe_signs(string):\n    '''\n    Write a function to count the number of apostrophe signs in a string.\n    '''\n    no_of_apostrophe_signs = string.count(\"'\")\n    return no_of_apostrophe_signs\ndef count_no_of_at_signs(string):\n    '''\n    Write a function to count the number of at signs in a string.\n    '''\n    no_of_at_signs = string.count(\"@\")\n    return no_of_at_signs\ndef count_no_of_tilde_signs(string):\n    '''\n    Write a function to count the number of tilde signs in a string.\n    '''\n    no_of_tilde_signs = string.count(\"_\")\n    return no_of_tilde_signs\ndef count_no_of_pipe_signs(string):\n    '''\n    Write a function to count the number of pipe signs in a string.\n    '''\n    no_of_pipe_signs = string.count(\"|\")\n    return no_of_pipe_signs\ndef count_no_of_space_signs(string):\n    '''\n    Write a function to count the number of space signs in a string.\n    '''\n    no_of_space_signs = string.count(\" \")\n    return no_of_space_signs\ndef count_no_of_exclamation_marks(string):\n    '''\n    Write a function to count the number of exclamation marks in a string.\n    '''\n    no_of_exclamation_marks = string.count(\"!\")\n    return no_of_exclamation_marks\ndef count_no_of_question_marks(string):\n    '''\n    Write a function to count the number of question marks in a string.\n    '''\n    no_of_question_marks = string.count(\"?\")\n    return no_of_question_marks\ndef count_no_of_hash_marks(string):\n    '''\n    Write a function to count the number of hash marks in a string.\n    '''\n    no_of_hash_marks = string.count(\"#\")\n    return no_of_hash_marks\ndef count_no_of_dollar_signs(string):\n    '''\n    Write a function to count the number of dollar signs in a string.\n    '''\n    no_of_dollar_signs = string.count(\"$\")\n    return no_of_dollar_signs\ndef count_no_of_percentage_signs(string):\n    '''\n    Write a function to count the number of percentage signs in a string.\n    '''\n    no_of_percentage_signs = string.count(\"%\")\n    return no_of_percentage_signs\ndef count_no_of_tilde_signs(string):\n    '''\n    Write a function to count the number of tilde signs in a string.\n    '''\n    no_of_tilde_signs = string.count(\"~\")\n    return no_of_tilde_signs\ndef count_no_of_comma_signs(string):\n    '''\n    Write a function to count the number of comma signs in a string.\n    '''\n    no_of_comma_signs = string.count(\",\")\n    return no_of_comma_signs\ndef count_no_of_colon_signs(string):\n    '''\n    Write a function to count the number of colon signs in a string.\n    '''\n    no"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.split(string) \n    \n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in range(len(string)):\n        if string[i] not in list1:\n            list1.append(string[i])\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [0] * NO_OF_CHARS\n    list2 = [0] * NO_OF_CHARS\n    for i in string:\n        list1[ord(i)] += 1\n    for i in string:\n        list2[ord(i)] += 1\n    \n    list3 = []\n    for i in range(len(string)):\n        if list1[ord(string[i])] == list2[ord(string[i])]:\n            list3.append(string[i])\n    return list3\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #list1 = list(string)\n    #list2 = list(string2)\n    #list2 = list2[:len(list1)]\n    #return \"\".join(list2)\n    string2 = ''.join(list(string))\n    string1 = list(string)\n    return \"\".join(string1[:len(string2)])\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = [ch for ch in string]\n    return li\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string[0:len(string)]\n    str2 = string[len(string):len(string)]\n    str1 = list(str1)\n    str2 = list(str2)\n    if len(str1)!= len(str2):\n        return \"Error\"\n    else:\n        for i in range(len(str1)):\n            if str1[i] in str2:\n                str1.remove(str1[i])\n        return str1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if (len(string) > len(string_2)):\n        return None\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for x in string:\n        list1.append(x)\n    for x in string:\n        list2.append(x)\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for i in string:\n        list1.append(i)\n    return list1\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef list_to_dict(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict = {}\n    for i in list:\n        dict[i] = 0\n    return dict\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef compare(string1, string2):\n    '''\n    Write a function to compare the lexicographical order between two strings.\n    '''\n    string1 = list_to_str(string1)\n    string2 = list_to_str(string2)\n    if string1 > string2:\n        return 1\n    elif string1 < string2:\n        return -1\n    else:\n        return 0\ndef find_first(str1, str2):\n    '''\n    Write a function to find the first index of the first occurrence of the second string in the first string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            return i\n        else:\n            continue\n    return -1\ndef find_last(str1, str2):\n    '''\n    Write a function to find the last index of the last occurrence of the second string in the first string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            return i\n        else:\n            continue\n    return -1\ndef replace_first(str1, str2):\n    '''\n    Write a function to replace the first occurrence of the second string in the first string with the third string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            str1 = str1[:i] + str2 + str1[i+length2:]\n            return str1\n        else:\n            continue\n    return str1\ndef replace_last(str1, str2):\n    '''\n    Write a function to replace the last occurrence of the second string in the first string with the third string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            str1 = str1[:i] + str2 + str1[i+length2:]\n            return str1\n        else:\n            continue\n    return str1\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for i in string:\n        list1.append(i)\n    return list1\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef list_to_dict(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict = {}\n    for i in list:\n        dict[i] = 0\n    return dict\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef compare(string1, string2):\n    '''\n    Write a function to compare the lexicographical order between two strings.\n    '''\n    string1 = list_to_str(string1)\n    string2 = list_to_str(string2)\n    if string1 > string2:\n        return 1\n    elif string1 < string2:\n        return -1\n    else:\n        return 0\ndef find_first(str1, str2):\n    '''\n    Write a function to find the first index of the first occurrence of the second string in the first string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            return i\n        else:\n            continue\n    return -1\ndef find_last(str1, str2):\n    '''\n    Write a function to find the last index of the last occurrence of the second string in the first string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            return i\n        else:\n            continue\n    return -1\ndef replace_first(str1, str2):\n    '''\n    Write a function to replace the first occurrence of the second string in the first string with the third string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            str1 = str1[:i] + str2 + str1[i+length2:]\n            return str1\n        else:\n            continue\n    return str1\ndef replace_last(str1, str2):\n    '''\n    Write a function to replace the last occurrence of the second string in the first string with the third string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            str1 = str1[:i] + str2 + str1[i+length2:]\n            return str1\n        else:\n            continue\n    return str1\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for i in string:\n        list1.append(i)\n    return list1\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef list_to_dict(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict = {}\n    for i in list:\n        dict[i] = 0\n    return dict\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef compare(string1, string2):\n    '''\n    Write a function to compare the lexicographical order between two strings.\n    '''\n    string1 = list_to_str(string1)\n    string2 = list_to_str(string2)\n    if string1 > string2:\n        return 1\n    elif string1 < string2:\n        return -1\n    else:\n        return 0\ndef find_first(str1, str2):\n    '''\n    Write a function to find the first index of the first occurrence of the second string in the first string.\n    '''\n    length1 = le"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 1:\n        return False\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def hasDuplicate(array):\n        array.sort()\n        for i in range(len(array)-1):\n            if array[i] == array[i+1]:\n                return True\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        if arraynums.count(arraynums[i])!= 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = False\n    dupSet = set()\n    for num in arraynums:\n        if num in dupSet:\n            duplicates = True\n            break\n        else:\n            dupSet.add(num)\n    return duplicates\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for n in arraynums:\n        if arraynums.count(n) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n    length = len(arraynums)\n    for i in range(length):\n        for j in range(i+1, length):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    visited = {}\n    for i in arraynums:\n        if i in visited:\n            return True\n        visited[i] = 1\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # You may assume woodball numbers are 6-digit numbers.\n    return len(str(x)) == 6\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(x) == 1: \n        return True\n    elif x[0] == '0': \n        return False\n    else:\n        return is_woodball(x[1:])\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x[0] == 'w' and x[1] == 'o' and x[2] == 'd' and x[3] == 'l' and x[4] == 'l'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # check the length of the number\n    if len(x)!= 6:\n        return False\n    \n    # check each digit\n    for i in x:\n        if i not in \"0123456789\":\n            return False\n    \n    # check if it is a palindrome\n    return x == x[::-1]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == \"t\" or x == \"r\" or x == \"y\" or x == \"a\" or x == \"u\" or x == \"p\" or x == \"l\" or x == \"s\" or x == \"h\" or x == \"e\" or x == \"w\" or x == \"v\" or x == \"i\" or x == \"o\" or x == \"f\" or x == \"m\" or x == \"d\" or x == \"g\" or x == \"j\" or x == \"k\" or x == \"x\" or x == \"b\" or x == \"z\" or x == \"c\" or x == \"v\" or x == \"j\" or x == \"h\" or x == \"n\" or x == \"q\" or x == \"g\" or x == \"f\" or x == \"e\" or x == \"p\" or x == \"z\" or x == \"c\" or x == \"a\" or x == \"s\" or x == \"d\" or x == \"t\" or x == \"y\" or x == \"w\" or x == \"r\" or x == \"m\":\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    num = int(x)\n    if num>=100000:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    string = str(x)\n    if string[0] == '1':\n        return True\n    elif string[1] == '1':\n        return True\n    elif string[2] == '1':\n        return True\n    elif string[3] == '1':\n        return True\n    elif string[4] == '1':\n        return True\n    elif string[5] == '1':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x%2 == 0 and x%3 == 0) or (x%2 == 1 and x%3 == 1) or (x%2 == 1 and x%3 == 2):\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # your code goes here\n    return None\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # import pdb; pdb.set_trace()\n    \n    # return True if the number is of length 2\n    # or if the number is 'wood' and the first and last characters are the same.\n    # else return false\n    \n    return True if len(x)==2 or x[0]==x[-1]=='w' else False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (2*(num%10))\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        print 'The number is negative'\n    else:\n        temp = 0\n        while (num!= 0):\n            temp = temp*10 + num%10\n            num = num/10\n        if temp == 2*temp:\n            print 'The number is a palindrome'\n        else:\n            print 'The number is not a palindrome'\n    \n    \ndef check_permutation():\n    '''\n    Write a python function to check if two strings are permutations of each other\n    '''\n    word1 = raw_input('Enter the first word')\n    word2 = raw_input('Enter the second word')\n    flag = True\n    for i in word1:\n        if i not in word2:\n            flag = False\n            break\n    if word2 == '':\n        flag = False\n    else:\n        for i in word2:\n            if i not in word1:\n                flag = False\n                break\n    if flag:\n        print 'The two strings are permutations'\n    else:\n        print 'The two strings are not permutations'\n        \n        \ndef anagram_check():\n    '''\n    Write a python function to check if two strings are anagrams of each other\n    '''\n    word1 = raw_input('Enter the first word')\n    word2 = raw_input('Enter the second word')\n    flag = True\n    if len(word1)!= len(word2):\n        flag = False\n    else:\n        for i in word1:\n            if i not in word2:\n                flag = False\n                break\n    if flag:\n        print 'The two strings are anagrams'\n    else:\n        print 'The two strings are not anagrams'\n        \n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revNum = 0\n    while num > 0:\n        remainder = num % 10\n        num = num // 10\n        revNum = revNum * 10 + remainder\n    return revNum == (2*revNum)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num%10\n        rev_num = rev_num*10 + rem\n        num = num/10\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(num)==int(num[::-1])-2\ndef fl(num):\n    '''\n    Write a python function to check if a given number is one more than half of its reverse.\n    '''\n    return int(num)==int(num[::-1])+2\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    else:\n        rev = 0\n        while num > 0:\n            dig = num%10\n            rev = rev*10 + dig\n            num = num//10\n        if rev == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==0:\n        return True\n    elif num<0:\n        return False\n    else:\n        rev_num=0\n        while(num!=0):\n            rem=num%10\n            rev_num=rev_num*10+rem\n            num=num//10\n        if(rev_num==num-1):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if(num == num[::-1]):\n        return True\n    else:\n        return False\n    \n    \n    "
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp = num\n    rev = 0\n    while temp>0:\n        rev = rev*10 + temp%10\n        temp = temp/10\n    if num == rev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=str(num)[::-1]\n    if int(num)-int(rev) == 2*int(rev):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in xrange(1,n):\n        for j in xrange(i+1,n):\n            s = ''\n            for k in xrange(i,j):\n                s += str(arr[k])\n            num = int(s)\n            if num > max_num:\n                max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l=len(arr)\n    if l==0 : \n        return 0\n    if l==1 : \n        if arr[0]==0 : \n            return 0\n        else : \n            return arr[0]\n    if l==2 : \n        if arr[0]==0 and arr[1]==1 : \n            return 1\n        else : \n            return max(arr[0],arr[1])\n    if l==3 : \n        if arr[0]==0 and arr[1]==1 : \n            return 1\n        elif arr[0]==1 and arr[1]==2 : \n            return 2\n        elif arr[0]==2 and arr[1]==3 : \n            return 3\n        else : \n            return max(arr[0],arr[1])\n    if l==4 : \n        if arr[0]==0 and arr[1]==1 : \n            return 1\n        elif arr[0]==1 and arr[1]==2 : \n            return 2\n        elif arr[0]==2 and arr[1]==3 : \n            return 3\n        elif arr[0]==3 and arr[1]==4 : \n            return 4\n        else : \n            return max(arr[0],arr[1])\n    return -1\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest_num = -1\n    for i in range(len(arr)) : \n        if arr[i] > largest_num : \n            largest_num = arr[i]\n    return largest_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maximum = max(arr)\n    if len(arr) == 1 : \n        return arr[0]\n    elif len(arr) == 2 : \n        return arr[0]*10 + arr[1]\n    elif len(arr) == 3 : \n        return arr[0]*100 + arr[1]*10 + arr[2]\n    elif len(arr) == 4 : \n        return arr[0]*1000 + arr[1]*100 + arr[2]*10 + arr[3]\n    else : \n        return arr[0]*1000000 + arr[1]*10000 + arr[2]*1000 + arr[3]*100 + arr[4]*10 + arr[5]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = 0\n    for i in range(len(arr)) : \n        temp = arr[i]*arr[i]\n        if temp > num :\n            num = temp \n    print num \n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        if num > max_num :\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    biggest_num = max(arr)\n    return biggest_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #Method 1\n    '''\n    largest = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n    return largest\n    '''\n    #Method 2\n    largest = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n    return largest\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for x in arr : \n        max_num = max_num * 10 + x\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x < 0 and y > 0:\n        return True\n    if x > 0 and y < 0:\n        return True\n    if x == 0 and y!= 0:\n        return True\n    if x == 0 and y == 0:\n        return True\n    if x > 0 and y < 0:\n        return False\n    if x < 0 and y > 0:\n        return False\n    if x == 0 and y == 0:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=int(x)\n    y=int(y)\n    return (x<0 and y>0) or (x>0 and y<0)\n    \ndef reverse_string(x): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    x=x.lower()\n    return x==x[::-1]\n    \ndef remove_whitespace(x): \n    '''\n    Write a python function to check whether the given string is a whitespace or not.\n    '''\n    return x.isspace()\n    \ndef is_lowercase(x): \n    '''\n    Write a python function to check whether the given string is lowercase or not.\n    '''\n    return x.islower()\n    \ndef is_uppercase(x): \n    '''\n    Write a python function to check whether the given string is uppercase or not.\n    '''\n    return x.isupper()\n    \ndef is_alpha(x): \n    '''\n    Write a python function to check whether the given string is alphanumeric or not.\n    '''\n    return x.isalnum()\n    \ndef is_digit(x): \n    '''\n    Write a python function to check whether the given string is a digit or not.\n    '''\n    return x.isdigit()\n    \ndef is_hex(x): \n    '''\n    Write a python function to check whether the given string is hexadecimal or not.\n    '''\n    return x.isdigit() and len(x)==2\n    \ndef is_oct(x): \n    '''\n    Write a python function to check whether the given string is octal or not.\n    '''\n    return x.isdigit() and len(x)==3\n    \ndef is_binary(x): \n    '''\n    Write a python function to check whether the given string is binary or not.\n    '''\n    return x.isdigit() and len(x)==2\n    \ndef remove_duplicates(x): \n    '''\n    Write a python function to remove duplicates from a given string.\n    '''\n    return ''.join(set(x))\n    \ndef count_vowels(x): \n    '''\n    Write a python function to count vowels in a given string.\n    '''\n    return sum(x.count(vowel) for vowel in 'aeiouAEIOU')\n    \ndef count_consonants(x): \n    '''\n    Write a python function to count consonants in a given string.\n    '''\n    return sum(x.count(consonant) for consonant in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \ndef count_double_letter(x): \n    '''\n    Write a python function to count number of times the given string contains a double letter.\n    '''\n    return sum(1 for i in range(len(x)-1) if x[i]==x[i+1])\n    \ndef is_hyphenated(x): \n    '''\n    Write a python function to check whether a given string has at least one hyphenated word.\n    '''\n    return any(x.find('-')!=-1 for x in x.split())\n    \ndef is_integer(x): \n    '''\n    Write a python function to check whether the given string is an integer or not.\n    '''\n    try:\n        int(x)\n        return True\n    except:\n        return False\n    \ndef is_float(x): \n    '''\n    Write a python function to check whether the given string is a float or not.\n    '''\n    try:\n        float(x)\n        return True\n    except:\n        return False\n    \ndef is_alphanumeric(x): \n    '''\n    Write a python function to check whether the given string is alphanumeric or not.\n    '''\n    return x.isalnum()\n    \ndef is_special(x): \n    '''\n    Write a python function to check whether the given string is a special character or not.\n    '''\n    return x in '~!@#$%^&*()_+{}:\"<>?|/.,;:'\n    \ndef is_numeric(x): \n    '''\n    Write a python function to check whether the given string is numeric or not.\n    '''\n    return x.isdigit()\n    \ndef is_white(x): \n    '''\n    Write a python function to check whether the given string is whitespace or not.\n    '''\n    return x.isspace()\n    \ndef is_title(x): \n    '''\n    Write a python function to check whether the given string is title-cased or not.\n    '''\n    return x.istitle()\n    \ndef is_lower(x): \n    '''\n    Write a python function to check whether the given string is lower-cased or not.\n    '''\n    return x.islower()\n    \ndef is_upper(x): \n    '''\n    Write a python function to check whether the given string is uppercase or not.\n    '''\n    return x.isupper()\n    \ndef remove_delimiters(x): \n    '''\n    Write a python function to remove all delimiters from a given string.\n    '''\n    return x.translate(None,'-.,')\n    \ndef reverse_word(x): \n    '''\n    Write a python function to reverse a word.\n    '''\n    return x[::-1]\n    \ndef reverse_words(x): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return''.join(x.split()[::-1])\n    \ndef is_pangram(x): \n    '''\n    Write a python function to check whether the given string is a pangram or not.\n    '''\n    return len(set(x))==26\n    \ndef reverse_numbers(x): \n    '''\n    Write a python function to reverse all the numbers in a given string.\n    '''\n    return ''.join(str(int(y[::-1])) for y in x.split())\n    \ndef find_middle_char(x): \n    '''\n    Write a python function to find the middle character of a given string.\n    '''\n    return x[(len(x)//2)-1]+x[len(x)//2]+x[len(x)//2]\n    \ndef remove_middle_char(x): \n    '''\n    Write a python function to remove the middle character from a given string.\n    '''\n    return x[:len(x)//2-1]+x[len(x)//2+1:]\n    \ndef rotate_left(x, y): \n    '''\n    Write a python function to rotate a string to the left by y characters.\n    '''\n    return x[y:]+x[:y]\n    \ndef rotate_right(x, y): \n    '''\n    Write a python function to rotate a string to the right by y characters.\n    '''\n    return x[-y:]+x[:-y]\n    \ndef find_first_occurrence(x, y): \n    '''\n    Write a python function to find the first occurrence of a string in a given string.\n    '''\n    return x.find(y)+1\n    \ndef count_occurrence(x, y): \n    '''\n    Write a python function to count the number of times a string occurs in a given string.\n    '''\n    return x.count(y)\n    \ndef is_valid(x): \n    '''\n    Write a python function to check whether a given string is valid or not.\n    '''\n    return all(len(x)>=i for i in range(0,len(x)+1))\n    \ndef is_palindrome(x): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return x==x[::-1]\n    \ndef has_number(x): \n    '''\n    Write a python function to check whether a given string contains a number or no"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y>0) or (x<0 and y<0):\n        return True\n    else:\n        return False\n    \ndef is_power_of_2(x):\n    '''\n    Write a python function to check whether the given number is power of 2 or not.\n    '''\n    if x>0:\n        while x%2==0:\n            x=x/2\n        if x==1:\n            return True\n        else:\n            return False\n    else:\n        while x%2==0:\n            x=x/2\n        if x==1:\n            return True\n        else:\n            return False\n    \ndef prime_number_factorization(n):\n    '''\n    Write a python function to calculate the prime factorization of the given number.\n    '''\n    factorization_list=[]\n    while n%2==0:\n        factorization_list.append(2)\n        n=n/2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n%i==0:\n            factorization_list.append(i)\n            n=n/i\n    if n>2:\n        factorization_list.append(n)\n    return factorization_list\n    \ndef is_perfect_square(n):\n    '''\n    Write a python function to check whether the given number is perfect square or not.\n    '''\n    if is_power_of_2(n):\n        return True\n    else:\n        return False\n    \ndef is_perfect_square_optimized(n):\n    '''\n    Write a python function to check whether the given number is perfect square or not.\n    '''\n    if (n%4==0 and n>=0) or (n%4==0 and n<0):\n        return True\n    return False\n    \ndef get_distance_from_origin(x,y):\n    '''\n    Write a python function to calculate the distance from the origin of the given coordinate.\n    '''\n    return math.sqrt(x*x+y*y)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0: \n        return True\n    elif x > 0 and y < 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return \"both positive\"\n    elif x<0 and y<0:\n        return \"both negative\"\n    elif x<0 and y>0:\n        return \"x is negative and y is positive\"\n    elif x>0 and y<0:\n        return \"x is positive and y is negative\"\n    else:\n        return \"both zero\"\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0) is (y<0) \ndef count_digits(x):\n    '''\n    Write a python function to find count of digits in the given integer.\n    '''\n    return len(str(x))\ndef is_leap_year(x):\n    '''\n    Write a python function to check whether the given year is leap or not.\n    '''\n    return ((x%4==0) and (x%100!=0)) or (x%400==0)\ndef is_prime(x):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    return x>1 and all(x%i for i in range(2,int(x**0.5)+1))\ndef is_perfect(x):\n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    return sum(i for i in range(1,x//2+1) if x%i==0)==x\ndef check_alphabet(x):\n    '''\n    Write a python function to check whether the given string is a valid alphabet or not.\n    '''\n    return x.isalpha()\ndef is_vowel(x):\n    '''\n    Write a python function to check whether the given string is a vowel or not.\n    '''\n    return x in ['a','e','i','o','u','A','E','I','O','U']\ndef is_digits(x):\n    '''\n    Write a python function to check whether the given string is a valid number or not.\n    '''\n    return x.isdigit()\ndef is_dict(x):\n    '''\n    Write a python function to check whether the given dict is a valid dictionary or not.\n    '''\n    return type(x)==dict\ndef is_json(x):\n    '''\n    Write a python function to check whether the given json string is a valid json or not.\n    '''\n    import json\n    try:\n        json.loads(x)\n        return True\n    except ValueError:\n        return False\ndef is_number(x):\n    '''\n    Write a python function to check whether the given string is a valid number or not.\n    '''\n    try:\n        return type(float(x))==float\n    except ValueError:\n        return False\ndef is_string(x):\n    '''\n    Write a python function to check whether the given string is a valid string or not.\n    '''\n    return type(x)==str\ndef is_binary(x):\n    '''\n    Write a python function to check whether the given string is a valid binary or not.\n    '''\n    return x.count(\"0\")+x.count(\"1\")==len(x)\ndef is_tuple(x):\n    '''\n    Write a python function to check whether the given tuple is a valid tuple or not.\n    '''\n    return type(x)==tuple\ndef is_list(x):\n    '''\n    Write a python function to check whether the given list is a valid list or not.\n    '''\n    return type(x)==list\ndef is_set(x):\n    '''\n    Write a python function to check whether the given set is a valid set or not.\n    '''\n    return type(x)==set\ndef is_frozenset(x):\n    '''\n    Write a python function to check whether the given set is a valid set or not.\n    '''\n    return type(x)==frozenset\ndef is_list_of_set(x):\n    '''\n    Write a python function to check whether the given list of set is a valid list of set or not.\n    '''\n    return all(type(i)==set for i in x)\ndef is_list_of_dict(x):\n    '''\n    Write a python function to check whether the given list of dictionary is a valid list of dictionary or not.\n    '''\n    return all(type(i)==dict for i in x)\ndef is_list_of_list(x):\n    '''\n    Write a python function to check whether the given list of list is a valid list of list or not.\n    '''\n    return all(type(i)==list for i in x)\ndef is_list_of_tuple(x):\n    '''\n    Write a python function to check whether the given list of tuple is a valid list of tuple or not.\n    '''\n    return all(type(i)==tuple for i in x)\ndef is_list_of_string(x):\n    '''\n    Write a python function to check whether the given list of string is a valid list of string or not.\n    '''\n    return all(type(i)==str for i in x)\ndef is_list_of_list_of_string(x):\n    '''\n    Write a python function to check whether the given list of list of string is a valid list of list of string or not.\n    '''\n    return all(all(type(i)==str for i in j) for j in x)\ndef is_list_of_list_of_list(x):\n    '''\n    Write a python function to check whether the given list of list of list is a valid list of list of list or not.\n    '''\n    return all(all(type(i)==list for i in j) for j in x)\ndef is_list_of_list_of_list_of_string(x):\n    '''\n    Write a python function to check whether the given list of list of list of string is a valid list of list of list of string or not.\n    '''\n    return all(all(all(type(i)==str for i in j) for j in k) for k in x)\ndef is_list_of_list_of_list_of_list(x):\n    '''\n    Write a python function to check whether the given list of list of list of list is a valid list of list of list of list or not.\n    '''\n    return all(all(all(type(i)==list for i in j) for j in k) for k in x)\ndef is_list_of_list_of_list_of_list_of_string(x):\n    '''\n    Write a python function to check whether the given list of list of list of list of list of string is a valid list of list of list of list of string or not.\n    '''\n    return all(all(all(all(type(i)==str for i in j) for j in k) for k in l) for l in x)\ndef is_list_of_list_of_list_of_list_of_list(x):\n    '''\n    Write a python function to check whether the given list of list of list of list of list is a valid list of list of list of list of list or not.\n    '''\n    return all(all(all(all(type(i)==list for i in j) for j in k) for k in l) for l in x)\ndef is_list_of_list_of_list_of_list_of_list_of_string(x):\n    '''\n    Write a python function to check whether the given list of list of list of list of list of list of string is a valid list of list of list of list of list of string or not.\n    '''\n    return all(all(all(all(all(type(i)==str for i in j) for j in k) for k in l) for l in m) for m in x)\ndef is_list_of_list_of_list_of_list_of_list_of_list_of_string(x):\n    '''\n    Write a python function to check whether the given list of list of list of list of list of list of list of string is a valid list of list of list of list of list of string or not.\n    '''\n    return all(all(all(all(all(all(type(i)==str for i in j) for j in k) for k in l) for l in m) for m in n) for n in x)\ndef is_list_of_list_of_list_of_list_of_list_of_list_of_list(x):\n    '''\n    Write a python function to check whether the given list of list of list of list of list of list of list of list is a valid list of list of list of list of lis"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y > 0 or x > 0 and y < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y>0 or x>0 and y<0\ndef dotproduct(v1,v2):\n    '''\n    Write a python function to return the dot product of two vectors.\n    '''\n    sum=0\n    for i in range(len(v1)):\n        sum=sum+(v1[i]*v2[i])\n    return sum\ndef crossproduct(v1,v2):\n    '''\n    Write a python function to return the cross product of two vectors.\n    '''\n    product=[]\n    for i in range(len(v1)):\n        product.append(v1[i]*v2[i])\n    return product\ndef norm(v):\n    '''\n    Write a python function to return the norm of a vector.\n    '''\n    return sqrt(dotproduct(v,v))\ndef scalar_multiply(v,s):\n    '''\n    Write a python function to return a scalar multiplied vector.\n    '''\n    return [v[i]*s for i in range(len(v))]\ndef vector_add(v1,v2):\n    '''\n    Write a python function to return the vector addition of two vectors.\n    '''\n    return [v1[i]+v2[i] for i in range(len(v1))]\ndef vector_subtract(v1,v2):\n    '''\n    Write a python function to return the vector subtraction of two vectors.\n    '''\n    return [v1[i]-v2[i] for i in range(len(v1))]\ndef vector_sum(vectors):\n    '''\n    Write a python function to return the vector sum of a list of vectors.\n    '''\n    return reduce(vector_add,vectors)\ndef vector_average(vectors):\n    '''\n    Write a python function to return the vector average of a list of vectors.\n    '''\n    n=len(vectors)\n    return scalar_multiply(vector_sum(vectors),1/float(n))\ndef distance(v1,v2):\n    '''\n    Write a python function to return the distance between two vectors.\n    '''\n    return norm(vector_subtract(v1,v2))\ndef angle_between(v1,v2):\n    '''\n    Write a python function to return the angle in radians between two vectors.\n    '''\n    return acos(dotproduct(v1,v2)/(norm(v1)*norm(v2)))\ndef unit_vector(v):\n    '''\n    Write a python function to return the unit vector of a vector.\n    '''\n    return scalar_multiply(1/norm(v),v)\ndef angle_between_vectors(v1,v2):\n    '''\n    Write a python function to return the angle in radians between two vectors.\n    '''\n    return acos(dotproduct(v1,v2)/(norm(v1)*norm(v2)))\ndef project(v,w):\n    '''\n    Write a python function to return the projection of a vector onto another vector.\n    '''\n    return scalar_multiply(dotproduct(v,w)/(norm(w)*norm(v)),w)\ndef ray_intersect(ro,rd):\n    '''\n    Write a python function to return the point at which a ray hits the plane or else returns None.\n    '''\n    t=(dotproduct(ro,rd) / (dotproduct(rd,rd)))\n    if t>=0:\n        return scalar_multiply(t,rd)\n    else:\n        return None\ndef reflect(v,n):\n    '''\n    Write a python function to return the reflection vector from a vector reflecting from an n-tuple.\n    '''\n    return scalar_multiply(2*dotproduct(v,n),n)-n\ndef rotate_vector(v,angle,axis):\n    '''\n    Write a python function to return the rotated vector by an angle about a specified axis.\n    '''\n    angle=angle*pi/180\n    x=v[0]\n    y=v[1]\n    z=v[2]\n    cosa=cos(angle)\n    sina=sin(angle)\n    x1=x*cosa+y*sina\n    y1=-x*sina+y*cosa\n    z1=z\n    return [x1,y1,z1]\ndef rotate_vector_around_point(v,angle,axis,center):\n    '''\n    Write a python function to return the rotated vector by an angle about a specified axis.\n    '''\n    angle=angle*pi/180\n    x=v[0]\n    y=v[1]\n    z=v[2]\n    x1=x-center[0]\n    y1=y-center[1]\n    z1=z-center[2]\n    cosa=cos(angle)\n    sina=sin(angle)\n    x2=x1*cosa+y1*sina\n    y2=-x1*sina+y1*cosa\n    z2=z1\n    return [x2+center[0],y2+center[1],z2+center[2]]\ndef rotate_vector_around_point_new(v,angle,axis,center):\n    '''\n    Write a python function to return the rotated vector by an angle about a specified axis.\n    '''\n    angle=angle*pi/180\n    x=v[0]\n    y=v[1]\n    z=v[2]\n    x1=x-center[0]\n    y1=y-center[1]\n    z1=z-center[2]\n    cosa=cos(angle)\n    sina=sin(angle)\n    x2=x1*cosa+y1*sina\n    y2=-x1*sina+y1*cosa\n    z2=z1\n    return [x2+center[0],y2+center[1],z2+center[2]]\ndef new_angle_between_vectors(v1,v2):\n    '''\n    Write a python function to return the angle in radians between two vectors.\n    '''\n    return angle_between_vectors(v1,v2)\ndef angle_between_vectors_new(v1,v2):\n    '''\n    Write a python function to return the angle in radians between two vectors.\n    '''\n    return angle_between_vectors(v1,v2)\ndef v_add(v1,v2):\n    '''\n    Write a python function to return the vector addition of two vectors.\n    '''\n    return vector_add(v1,v2)\ndef v_subtract(v1,v2):\n    '''\n    Write a python function to return the vector subtraction of two vectors.\n    '''\n    return vector_subtract(v1,v2)\ndef v_sum(vectors):\n    '''\n    Write a python function to return the vector sum of a list of vectors.\n    '''\n    return vector_sum(vectors)\ndef v_average(vectors):\n    '''\n    Write a python function to return the vector average of a list of vectors.\n    '''\n    return vector_average(vectors)\ndef v_product(v1,v2):\n    '''\n    Write a python function to return the vector product of two vectors.\n    '''\n    return dotproduct(v1,v2)\ndef v_crossproduct(v1,v2):\n    '''\n    Write a python function to return the cross product of two vectors.\n    '''\n    return crossproduct(v1,v2)\ndef v_norm(v):\n    '''\n    Write a python function to return the norm of a vector.\n    '''\n    return norm(v)\ndef v_norm_new(v):\n    '''\n    Write a python function to return the norm of a vector.\n    '''\n    return norm(v)\ndef v_normalize(v):\n    '''\n    Write a python function to return the normalized vector.\n    '''\n    return scalar_multiply(1/v_norm(v),v)\ndef v_normalize_new(v):\n    '''\n    Write a python function to return the normalized vecto"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = []\n    for i in range(n):\n        octagonal.append(int((i*(3*i - 1))/2))\n    return octagonal[n - 1]\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = (1 + 8*n**2)**0.5\n    return int(x)**2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = [1,8,36,64,100,144,196,256,384,512,600,768,1024,1536,2048,3072,4096,65536,858993459]\n    if n <= 0:\n        return False\n    elif n in octagonal:\n        return True\n    else:\n        return is_octagonal(n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = n - 1\n    return n**2 + n + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n - 1) == (1 + 8*n)*(8*n + 1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (((8 * n) ** 0.5) + 1) ** 2 == 8 * n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * ((3 * n) - 1) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_numbers = [1,8,36,125,512,1001,3000,7625,153350]\n    return oct_numbers[n-1] if n <= 8 else None\n    \ndef is_triangular(n): \n    '''\n    Write a function to find the nth triangular number.\n    '''\n    tri_numbers = [1,3,6,10,15,21,28,36,45,55,66,76,87,98,99,99,99,99]\n    return tri_numbers[n-1] if n <= 9 else None\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = [1,8,27,64,125,216,343,512,729,1000]\n    if n < len(a):\n        return a[n-1]\n    else:\n        return 'Out of range'\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = list(s)\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[i] = 0\n        for j in range(i,len(s)):\n            d[i] += (len(s[i:j+1])==j-i+1)\n    return d[len(s)-1]\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[i] = 0\n        for j in range(i+1, len(s)+1):\n            if sum(int(x) for x in s[i:j]) == j-i:\n                d[i] += 1\n    return d[0]\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # A dictionary to store count of substrings\n    d = {}\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def get_total(sub_string):\n        return sum([int(d) for d in sub_string])\n    def count_substrings(s):\n        count = 0\n        for i in range(len(s)):\n            if get_total(s[:i]) == len(s[:i]):\n                count += 1\n        return count\n    return count_substrings(s)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substrings[s[i:j+1]] += 1\n    return sum(v for k, v in substrings.items() if len(k) == len(str(sum(int(d) for d in k))))\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    start=0\n    temp=0\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            temp=sum(map(int,list(s[i:j])))\n            if temp==len(s[i:j]):\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]] += 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        l = len(s)\n        sub_str = s[i:l]\n        dig = defaultdict(int)\n        for ch in sub_str:\n            dig[ch] += 1\n        \n        ch = s[i]\n        count += dig[ch]\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if int(s[0]) == int(s[1]):\n            return 1\n        else:\n            return 0\n    d = defaultdict(int)\n    count = 0\n    for i in range(len(s)-2):\n        d[s[i]+s[i+1]] += 1\n        if int(s[i]+s[i+1]) == len(s[i:i+3]):\n            count += d[s[i]+s[i+1]]\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if int(s[i]) == int(s[i+1]):\n            dp[i][i+1] = 1\n    for gap in range(3,n+1):\n        for i in range(n-gap+1):\n            j = i+gap-1\n            if int(s[i]) == int(s[j]) and dp[i+1][j-1] == 1:\n                dp[i][j] = 1\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if dp[i][j] == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_val = xs[0]\n    for item in xs:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = min(xs)\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None or x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for a in xs[1:]:\n        if a < smallest:\n            smallest = a\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # TODO: Your code here\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for item in xs:\n        if item < smallest:\n            smallest = item\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return \"Empty list\"\n    else:\n        return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    differences = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            differences.append(abs(test_list[i] - test_list[j]))\n    return max(differences)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    res = 0\n    for i in xrange(len(test_list)-1):\n        res = max(res, test_list[i+1] - test_list[i])\n    return res\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    length = len(test_list)\n    if length < 2:\n        return -1\n    else:\n        test_list.sort()\n        min = test_list[0] + test_list[1]\n        for i in range(2, length):\n            min = test_list[i] - test_list[i - 1]\n        return min\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    list_length = len(test_list)\n    max_difference = 0\n    \n    if list_length <= 2:\n        return max_difference\n    \n    for first_i in range(list_length - 1):\n        for second_i in range(first_i + 1, list_length):\n            max_difference = max(max_difference, abs(test_list[first_i] - test_list[second_i]))\n            \n    return max_difference\n    "
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    differences = []\n    for i in range(0, len(test_list)):\n        for j in range(i, len(test_list)):\n            differences.append(abs(test_list[i] - test_list[j]))\n    return max(differences)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    sorted_list = sorted(test_list)\n    left_max = sorted_list[0]\n    right_min = sorted_list[-1]\n    max_diff = right_min - left_max\n    for i in xrange(1, len(sorted_list)):\n        left_max = max(left_max, sorted_list[i-1])\n        right_min = min(right_min, sorted_list[i])\n        max_diff = max(max_diff, right_min - left_max)\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    difference = 0\n    for i in range(0,len(test_list),2):\n        difference = max(difference,test_list[i+1]-test_list[i])\n    return difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    tuple_list = list(set(test_list))\n    max_difference = 0\n    for i in tuple_list:\n        for j in tuple_list:\n            if i > j:\n                difference = i - j\n                if difference > max_difference:\n                    max_difference = difference\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = None\n    if len(test_list) < 2:\n        return None\n    test_list = sorted(test_list)\n    for i in range(1, len(test_list)):\n        diff = test_list[i] - test_list[i-1]\n        if max_diff is None:\n            max_diff = diff\n        else:\n            max_diff = max(max_diff, diff)\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(i,len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    lst=[]\n    for i in subjectmarks:\n        lst.append(i[1])\n    lst.sort()\n    return lst\n    \ndef count_marks(subjectmarks):\n    '''\n    Write a function to count the number of times a particular mark occurs in a list of tuples.\n    '''\n    mark_count = {}\n    for mark in subjectmarks:\n        if mark[1] in mark_count:\n            mark_count[mark[1]] = mark_count[mark[1]] + 1\n        else:\n            mark_count[mark[1]] = 1\n    return mark_count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    import operator\n    return sorted(subjectmarks,key=operator.itemgetter(1))\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marklist = list(subjectmarks)\n    return sorted(marklist, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subject_marks = sorted(subjectmarks,key=lambda x:x[1])\n    return sorted_subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = sorted(subjectmarks, key=itemgetter(1), reverse=True)\n    return marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    data = sorted(subjectmarks, key=lambda x: x[1])\n    return data\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    temp = sorted(subjectmarks, key = lambda x: x[1])\n    return temp\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    '''\n    >>> l = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    >>> s = subject_marks(l)\n    >>> print(s)\n    [(1, 5), (3, 4), (7, 8), (2, 6)]\n    >>> l = [(2, 1), (4, 3), (6, 5), (8, 7)]\n    >>> s = subject_marks(l)\n    >>> print(s)\n    [(2, 1), (4, 3), (6, 5), (8, 7)]\n    >>> l = [(3, 1), (5, 3), (7, 5), (9, 7)]\n    >>> s = subject_marks(l)\n    >>> print(s)\n    [(3, 1), (5, 3), (7, 5), (9, 7)]\n    '''\n    # Sort list according to second element\n    list_sort = sorted(subjectmarks, key = lambda x: x[1])\n    return list_sort\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    x = sorted(subjectmarks, key = lambda x: x[1], reverse = True)\n    return x\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list)==1:\n        return data_list[0]\n    else:\n        return data_list[0]+recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) is list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    if isinstance(data_list[0], int):\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        print \"Error: Type not supported.\"\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for el in data_list:\n        if type(el) is list:\n            total += recursive_list_sum(el)\n        else:\n            total += el\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == int:\n        return data_list\n    return sum(data_list) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    if isinstance(data_list, list):\n        for d in data_list:\n            result += recursive_list_sum(d)\n        return result\n    else:\n        return [data_list]\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count('pos')\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for n in list:\n        if n > 0:\n            pos = pos + 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x > 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    num = 0\n    for i in list:\n        if i > 0:\n            num += 1\n    return num\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # Your code goes here\n    return len([x for x in list if x > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for element in list:\n        if element > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0 or n==1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=0:\n        return 1\n    else:\n        return bell_number(n-1)+bell_number(n-2)+bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    res = [0] * (n + 1)\n    res[0] = 1\n    res[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, i):\n            res[i] += res[j-1] * res[i - j - 1]\n    return res[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    lookup = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    lookup[0][0] = 1\n    for i in range(n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                lookup[i][j] = lookup[i - 1][j]\n            else:\n                lookup[i][j] = lookup[i - 1][j - 1] + lookup[i - 1][j]\n    return lookup[n][n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    numbers = [1]\n    for i in xrange(1, n):\n        numbers.append(numbers[-1] + i)\n    \n    count = 0\n    for i in xrange(n, 0, -1):\n        for j in xrange(i + 1, n + 1):\n            if numbers[j] - numbers[i] <= n:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    import math\n    n = int(n)\n    b = [0]*(n+1)\n    b[0] = 1\n    b[1] = 1\n    if n > 1:\n        for i in range(2, n+1):\n            b[i] = b[i-1] + b[i-2]\n    return b[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0,len(A)):\n        if A[i]>=A[i-1]:\n            continue\n        else:\n            return False\n    return True\ndef is_Monotonic(A):\n    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1))\ndef is_Monotonic(A):\n    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    if len(A) == 1:\n        return True\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] >= A[i+1] for i in xrange(len(A)-1)) or all(A[i] <= A[i+1] for i in xrange(len(A)-1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    mono_list = []\n    for i in range(len(A)-1):\n        mono_list.append(A[i]<=A[i+1])\n    return all(mono_list)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A) == 0):\n        return True\n    elif(len(A) == 1):\n        return True\n    else:\n        i = 0\n        while i < len(A) - 1:\n            if(A[i] <= A[i+1]):\n                i += 1\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    N=len(A)\n    i=0\n    while i<N-1:\n        if A[i]>=A[i+1]:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return all(A[i] <= A[i+1] for i in xrange(len(A)-1)) or all(A[i] >= A[i+1] for i in xrange(len(A)-1))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return 1\n    mon = True\n    for i in range(1, len(A)):\n        if A[i-1] >= A[i]:\n            mon = False\n            break\n    if mon:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    a = sorted(A)\n    if a == A:\n        print \"Array is monotonic\"\n    else:\n        print \"Array is not monotonic\"\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i+1] for i in xrange(len(A)-1)) or\n        all(A[i] >= A[i+1] for i in xrange(len(A)-1)))\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return False\n    else:\n        if l[0] == s:\n            return True\n        else:\n            return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # sublist: a list with one or more elements\n    # l: the list\n    # s: the sublist\n    s = s[:]\n    s.reverse()\n    for sublist in l:\n        if sublist == s:\n            return True\n        elif sublist[::-1] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s==[]: return True\n    if len(s) > len(l): return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)]==s: return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    def compare(l, s):\n        if s == []:\n            return True\n        elif len(l) == 0:\n            return False\n        return l[0] == s[0] and compare(l[1:], s[1:])\n    return compare(l, s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)<=len(s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    elif len(l) < len(s):\n        return False\n    else:\n        sublist = l[:len(s)]\n        return sublist == s\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(0, len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(x)==len(Input[0]) for x in Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = sorted(Input)\n    i = 0\n    while i < len(Input):\n        if Input[i][0]!= Input[i][1]:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set([len(tup) for tup in Input])) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    i=0\n    while i<len(Input):\n        if len(Input[i])!=len(Input[i+1]):\n            return False\n        i+=2\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    l = len(Input)\n    for i in range(l):\n        for j in range(l-1):\n            if len(Input[i])!= len(Input[j+1]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuples = []\n    for each in Input:\n        tuples.append(each[1:])\n    \n    print tuples\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    arr = Input\n    if not arr:\n        return False\n    else:\n        l = arr[0]\n        if l == None:\n            l = 0\n        for i in range(len(arr)):\n            if not arr[i]:\n                return False\n            if l!= arr[i]:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # write your code here\n    if len(Input) == 0:\n        return True\n    return len(Input[0]) == len(Input[1])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    d = {}\n    \n    for i in Input:\n        d[len(i)] = d.get(len(i), 0) + 1\n    \n    if d.values().count(d.values().count(d.values()[0])) == len(d.values()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_len = len(Input)\n    for i in range(tuple_len):\n        if len(Input[i])!=tuple_len:\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # empty list\n    if nums == []:\n        return []\n    \n    # this list will be used to store the sorted elements\n    new_list = []\n    \n    # get the length of the list\n    length = len(nums)\n    \n    # get the minimum value of the list\n    min_val = min(nums)\n    \n    # get the maximum value of the list\n    max_val = max(nums)\n    \n    # get the difference between the max and min values\n    diff = max_val - min_val\n    \n    # get the stepsize\n    stepsize = diff/length\n    \n    # get the starting point\n    start_point = min_val\n    \n    # get the ending point\n    end_point = start_point + stepsize\n    \n    # iterate from the start point to the end point, adding each value to the new_list\n    for i in range(length):\n        new_list.append(start_point)\n        start_point += stepsize\n    \n    # iterate through the list, comparing each number to the number in the new_list\n    for i in range(length):\n        for j in range(i, length):\n            if nums[i] > new_list[j]:\n                # swap values\n                temp = nums[i]\n                nums[i] = new_list[j]\n                new_list[j] = temp\n    \n    return new_list\n    \ndef my_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # empty list\n    if nums == []:\n        return []\n    \n    # this list will be used to store the sorted elements\n    new_list = []\n    \n    # get the length of the list\n    length = len(nums)\n    \n    # get the minimum value of the list\n    min_val = min(nums)\n    \n    # get the maximum value of the list\n    max_val = max(nums)\n    \n    # get the difference between the max and min values\n    diff = max_val - min_val\n    \n    # get the stepsize\n    stepsize = diff/length\n    \n    # get the starting point\n    start_point = min_val\n    \n    # get the ending point\n    end_point = start_point + stepsize\n    \n    # iterate through the list, comparing each number to the number in the new_list\n    for i in range(length):\n        new_list.append(start_point)\n        start_point += stepsize\n    \n    # iterate through the list, comparing each number to the number in the new_list\n    for i in range(length):\n        for j in range(i, length):\n            if nums[i] > new_list[j]:\n                # swap values\n                temp = nums[i]\n                nums[i] = new_list[j]\n                new_list[j] = temp\n    \n    return new_list\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    min_val = min(nums)\n    max_val = max(nums)\n    index_range = range(min_val, max_val+1)\n    sorted_index = 0\n    while sorted_index < len(nums):\n        index = index_range.index(nums[sorted_index])\n        nums[sorted_index], nums[index] = nums[index], nums[sorted_index]\n        sorted_index += 1\n        index_range.remove(nums[sorted_index])\n        index_range.insert(sorted_index, nums[sorted_index])\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    gap = int(nums_len / 2)\n    while gap > 0:\n        for i in range(gap, nums_len):\n            j = i\n            while j >= gap and nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n        gap = int(gap / 2)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    gap = 1\n    swapped = True\n    while gap < nums_len:\n        gap = max(gap,1)\n        gap = gap * 10\n        swapped = False\n        for i in range(nums_len-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i],nums[i+gap] = nums[i+gap],nums[i]\n                swapped = True\n        if not swapped:\n            break\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(array, i, j):\n        temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n    def min_value_index(array, start, end):\n        min_value = array[start]\n        min_index = start\n        for i in range(start+1, end+1):\n            if array[i] < min_value:\n                min_value = array[i]\n                min_index = i\n        return min_index\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return nums\n    if len(nums) == 1:\n        return nums\n    else:\n        key = nums[0]\n        new_arr = []\n        for i in range(len(nums)):\n            if nums[i] < key:\n                new_arr.append(nums[i])\n        new_arr.append(key)\n        return new_arr + comb_sort(nums[1:])\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    step = len(nums) // 2\n    while step > 0:\n        for i in range(step, len(nums)):\n            j = i\n            while j >= step and nums[j] < nums[j - step]:\n                nums[j], nums[j - step] = nums[j - step], nums[j]\n                j -= step\n        step //= 2\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sq = int(math.sqrt(n))\n    if n < 0 or sq**2!= n: \n        return False\n    for i in range(sq+1, n+1):\n        if i**2-n in [1, n]:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n**0.5 == int(n**0.5):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    num=n\n    sq1=1\n    sq2=1\n    while(num>=2):\n        if (num%2)==1:\n            sq1+=1\n        num/=2\n    while(num>=1):\n        if (num%2)==1:\n            sq2+=1\n        num/=2\n    if sq1**2-sq2**2==n:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if (i**2-j**2)==n:\n                print \"Given number \"+str(n)+\" is the difference of \"+str(i**2)+\" and \"+str(j**2)\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 2:\n        print \"Yes\"\n    else:\n        if (n-2)**2==n:\n            print \"Yes\"\n        elif (n-4)**2==n:\n            print \"Yes\"\n        else:\n            print \"No\"\n            \ndef is_square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the sum of four squares or not.\n    '''\n    if n == 2:\n        print \"Yes\"\n    else:\n        if (n-2)**2==n:\n            print \"Yes\"\n        elif (n-4)**2==n:\n            print \"Yes\"\n        else:\n            print \"No\"\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    num=int(n)\n    n1=num//2\n    n2=num%2\n    \n    if n1*n1-n2*n2>=0 and n1*n1-n2*n2<=n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = int(sqrt(n))\n    b = int(sqrt(n))\n    c = a**2 - b**2\n    if (c == n): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s = 1\n    r = n\n    while (r > 0):\n        s += 1\n        r -= s**2\n    if (s**2 - n < 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<0:\n        return False\n    a=int(sqrt(n))\n    b=int(sqrt(n+1))\n    return a*a==n+1 and b*b==n\n    \ndef dif_num(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two different numbers.\n    '''\n    a=int(sqrt(n))\n    b=int(sqrt(n+1))\n    if n>=0:\n        return a*a!=n+1 and b*b!=n+2\n    else:\n        return a*a!=n and b*b!=n+1\n    \ndef dif_num_1(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two different numbers.\n    '''\n    a=int(sqrt(n))\n    b=int(sqrt(n+1))\n    if n>=0:\n        return a*a!=n and b*b!=n+1\n    else:\n        return a*a!=n and b*b!=n+2\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for x in range(n):\n        for y in range(x):\n            if x*x+y*y==n:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if len(patterns[i]) == len(colors):\n            for j in range(len(patterns[i])):\n                if patterns[i][j]!= colors[j]:\n                    return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # your code here\n    if not patterns:\n        return True\n    pattern = patterns.pop(0)\n    if len(pattern) == 0:\n        return is_samepatterns(colors, patterns)\n    else:\n        return any(is_samepatterns(colors, patterns + [pattern[1:] + colors[0]]) for colors in combinations(colors, len(pattern) - 1))\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if colors[i]==colors[i+1] and colors[i] not in patterns:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if patterns[i] == 0:\n            patterns[i] = -1\n            if colors[i] == 1:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in xrange(len(patterns)):\n        for j in xrange(len(patterns[i])):\n            if patterns[i][j] == 'a' and not colors[j]:\n                return False\n            elif patterns[i][j] == 'b' and colors[j]:\n                return False\n            elif patterns[i][j] == 'c' and colors[j] and not colors[j+1]:\n                return False\n            elif patterns[i][j] == 'd' and not colors[j]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(colors)-1):\n        if not patterns[i] in colors[i:]:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if patterns[i] == 'color':\n            if i + 1 < len(colors) and colors[i+1]!= colors[i]:\n                return False\n        else:\n            if i + 2 < len(colors) and colors[i+2]!= colors[i]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # First, we check whether we have a value that is larger than 0\n    # Check if we have the length of the patterns array\n    if len(patterns) > len(colors):\n        return False\n    else:\n        for i in range(len(patterns)):\n            # If it is greater than 0, check if the current color in the colors array is the same as the pattern at that index\n            if patterns[i] > 0 and patterns[i]!= colors[i]:\n                return False\n            # If it is not greater than 0, return False\n            elif patterns[i] <= 0:\n                return False\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_index = 0\n    for pattern in patterns:\n        # Check that current pattern matches with the last pattern.\n        if colors[pattern_index] == pattern:\n            pattern_index += 1\n        # If current pattern doesn't match with the last pattern, then return False.\n        else:\n            return False\n    # If patterns_index reached the end of patterns array, then return True\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    result_list = []\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        for i in range(len(tup)):\n            if (tup[i] % K!= 0):\n                break\n        else:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    div_list = []\n    for tuple in test_list:\n        temp = [x for x in tuple]\n        for i in xrange(len(temp)):\n            if temp[i]%K!= 0:\n                temp[i] = None\n                break\n        if temp[i]!=None:\n            div_list.append(tuple)\n    return div_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in test_list:\n        if sum(i)%K==0:\n            divisible_tuples.append(i)\n    return divisible_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if t[0] % K == 0 and t[1] % K == 0:\n            result.append(t)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    import collections\n    result_list = []\n    for each_tuple in test_list:\n        if all(i % K == 0 for i in each_tuple):\n            result_list.append(each_tuple)\n    return result_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [x for x in test_list if not set(x) - set(k for k in x if k % K!= 0)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all([int(t[i]/K) for i in range(len(t))])]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for test_tuple in test_list:\n        if all(test_tuple[i]%K == 0 for i in range(len(test_tuple))):\n            divisible_tuples.append(test_tuple)\n    return divisible_tuples\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        print \"11 is a divisor of %s\" % n\n    else: \n        print \"11 is not a divisor of %s\" % n\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11) == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        print(\"Its a word with even lenght\")\n    else:\n        print(\"Its a word with odd lenght\")\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l%2 == 0:\n        return False\n    else:\n        return True\n    \ndef rev(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef isPalindrome(s):\n    '''\n    Write a python function to check whether the string is a palindrome.\n    '''\n    if len(s)==1:\n        return True\n    else:\n        if s[0]==s[-1]:\n            return isPalindrome(s[1:-1])\n        else:\n            return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\nprint(word_len('apple'))\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum([i*(4*i-1) for i in range(1,n+1)])\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = 0\n    for i in range(n):\n        tetrahedral += ((1+i)**4)\n    return tetrahedral\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # In the tetrahedral number, the value of a number is its sum of the proper divisors of it.\n    # To get the proper divisors, we need to find all divisors of the number n.\n    # For the proper divisors, we can find all the divisors of the square of n. \n    # We can then do a similar process on all the divisors of the square of n,\n    # and add them all together.\n    # It's a simple calculation, but it's easy to find all the divisors of n,\n    # and then find all the divisors of the square of n, and add them all together.\n    # We can do it this way for all the numbers, and we'll get a list of the\n    # proper divisors of each number.\n    # At each number, we can add the number itself to the list of proper divisors,\n    # and then we can add all the proper divisors of n squared to the list of proper divisors,\n    # and add them all together.\n    # This can be done recursively, and the base case is n=1.\n    # If we don't know how many times we have to add the proper divisors,\n    # we'll know we'll need to use the \"recursive\" approach.\n    # If we know how many times we have to add the proper divisors,\n    # we'll know we'll need the \"non-recursive\" approach.\n    # Either way, the recursive approach is faster than the non-recursive approach.\n    # In any case, we'll probably use the recursive approach.\n    \n    # Base cases:\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    else:\n        # Recursive case:\n        divisors = [1,n]\n        for i in xrange(2,int(n**.5)+1):\n            if n%i == 0:\n                divisors.append(i)\n                divisors.append(n/i)\n        return sum(divisors)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    \n    # If n is 1, return 1\n    if n == 1: \n        return 1\n    \n    \n    # If n is 2, return 3\n    if n == 2: \n        return 3\n    \n    \n    # If n is 3, return 4\n    if n == 3: \n        return 4\n    \n    \n    # If n is 4, return 10\n    if n == 4: \n        return 10\n    \n    \n    # If n is 5, return 8\n    if n == 5: \n        return 8\n    \n    \n    # If n is 6, return 12\n    if n == 6: \n        return 12\n    \n    \n    # If n is 7, return 24\n    if n == 7: \n        return 24\n    \n    \n    # If n is 8, return 40\n    if n == 8: \n        return 40\n    \n    \n    # If n is 9, return 72\n    if n == 9: \n        return 72\n    \n    \n    # If n is 10, return 100\n    if n == 10: \n        return 100\n    \n    \n    # If n is 11, return 220\n    if n == 11: \n        return 220\n    \n    \n    # If n is 12, return 240\n    if n == 12: \n        return 240\n    \n    \n    # If n is 13, return 272\n    if n == 13: \n        return 272\n    \n    \n    # If n is 14, return 280\n    if n == 14: \n        return 280\n    \n    \n    # If n is 15, return 300\n    if n == 15: \n        return 300\n    \n    \n    # If n is 16, return 320\n    if n == 16: \n        return 320\n    \n    \n    # If n is 17, return 340\n    if n == 17: \n        return 340\n    \n    \n    # If n is 18, return 360\n    if n == 18: \n        return 360\n    \n    \n    # If n is 19, return 380\n    if n == 19: \n        return 380\n    \n    \n    # If n is 20, return 400\n    if n == 20: \n        return 400\n    \n    \n    # If n is 21, return 420\n    if n == 21: \n        return 420\n    \n    \n    # If n is 22, return 440\n    if n == 22: \n        return 440\n    \n    \n    # If n is 23, return 460\n    if n == 23: \n        return 460\n    \n    \n    # If n is 24, return 480\n    if n == 24: \n        return 480\n    \n    \n    # If n is 25, return 500\n    if n == 25: \n        return 500\n    \n    \n    # If n is 26, return 520\n    if n == 26: \n        return 520\n    \n    \n    # If n is 27, return 540\n    if n == 27: \n        return 540\n    \n    \n    # If n is 28, return 560\n    if n == 28: \n        return 560\n    \n    \n    # If n is 29, return 580\n    if n == 29: \n        return 580\n    \n    \n    # If n is 30, return 600\n    if n == 30: \n        return 600\n    \n    \n    # If n is 31, return 620\n    if n == 31: \n        return 620\n    \n    \n    # If n is 32, return 640\n    if n == 32: \n        return 640\n    \n    \n    # If n is 33, return 660\n    if n == 33: \n        return 660\n    \n    \n    # If n is 34, return 680\n    if n == 34: \n        return 680\n    \n    \n    # If n is 35, return 700\n    if n == 35: \n        return 700\n    \n    \n    # If n is 36, return 720\n    if n == 36: \n        return 720\n    \n    \n    # If n is 37, return 740\n    if n == 37: \n        return 740\n    \n    \n    # If n is 38, return 760\n    if n == 38: \n        return 760\n    \n    \n    # If n is 39, return 780\n    if n == 39: \n        return 780\n    \n    \n    # If n is 40, return 800\n    if n == 40: \n        return 800\n    \n    \n    # If n is 41, return 820\n    if n == 41: \n        return 820\n    \n    \n    # If n is 42, return 840\n    if n == 42: \n        return 840\n    \n    \n    # If n is 43, return 860\n    if n == 43: \n        return 860\n    \n    \n    # If n is 44, return 880\n    if n == 44: \n        return 880\n    \n    \n    # If n is 45, return 900\n    if n == 45: \n        return 900\n    \n    \n    # If n is 46, return 920\n    if n == 46: \n        return 920\n    \n    \n    # If n is 47, return 940\n    if n == 47: \n        return 940\n    \n    \n    # If n is 48, return 960\n    if n == 48: \n        return 960\n    \n    \n    # If n is 49, return 980\n    if n == 49: \n        return 980\n    \n    \n    # If n is 50, return 1000\n    if n == 50: \n        return 1000\n    \n    \n    # If n is 51, return 1020\n    if n == 51: \n        return 1020\n    \n    \n    # If n is 52, return 1040\n    if n == 52: \n        return 1040\n    \n    \n    # If n is 53, return 1060\n    if n == 53: \n        return 1060\n    \n    \n    # If n is 54, return 1080\n    if n == 54: \n        return 1080\n    \n    \n    # If n is 55, return 1100\n    if n == 55: \n        return 1100\n    \n    \n    # If n is 56, return 1120\n    if n == 56: \n        return 1120\n    \n    \n    # If n is 57, return 1140\n    if n == 57: \n        return 1140\n    \n    \n    # If n is 58, return 1160\n    if n == 58: \n        return 1160\n    \n    \n    # If n is 59, return 1180\n    if n == 59: \n        return 1180\n    \n    \n    # If n is 60, return 1200\n    if n == 60: \n        return 1200\n    \n    \n    # If n is 61, return 1220\n    if n == 61: \n        return 1220\n    \n    \n    # If n is 62, return 1240\n    if n == 62: \n        return 1240\n    \n    \n    # If n is 63, return 1260\n    if n == 63: \n        return 1260\n    \n    \n    # If n is 64, return 1280\n    if n == 64: \n        return 1280\n    \n    \n    # If n is 65, return 1300\n    if n == 65: \n        return 1300\n    \n    \n    # If n is 66, return 1320\n    if n == 66: \n        return 1320\n    \n    \n    # If n is 67, return 1340\n    if n == 67: \n        return 1340\n    \n    \n    # If n is 68, return 1360\n    if n == 68: \n        return 1360\n    \n    \n    # If n is 69, return 1380\n    if n == 69: \n        return 1380\n    \n    \n    # If n is 70, return 1400\n    if n == 70: \n        return 1400\n    \n    \n    # If n is 71, return 1420\n    if n == 71: \n        return 1420\n    \n    \n    # If n is 72, return 1440\n    if n == 72: \n        return 1440\n    \n    \n    # If n is 73, return 1460\n    if n == 73: \n        return 1460\n    \n    \n    # If n is 74, return 1480\n    if n == 74: \n        return 1480\n    \n    \n    # If n is 75, return 1500\n    if n == 75: \n        return 1500\n    \n    \n    # If n is 76, return 1520\n    if n == 76:"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    # Create a list to store the values.\n    value_list = [1]\n    \n    # If n is 0, return the first value (1).\n    if n == 0:\n        return 1\n    \n    # Calculate the sum of the values in the list.\n    s = sum(value_list)\n    \n    # If n is less than or equal to the length of the list, return the sum.\n    if n <= len(value_list):\n        return s\n    \n    # Loop through the list to get values until the desired number is found.\n    for i in range(len(value_list), n):\n        value_list.append(i+1)\n        s += i+1\n        \n    # Return the sum.\n    return s\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: return 1\n    if n < 0: return None\n    return tetrahedral_number(n-1) + n**4\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((1 + n)/(n + 1)*n)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    else:\n        return n**3 + n**2 + n\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) // 4 \n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*(math.pi)*(r**3)\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*math.pi*(r**2)\n    return a\ndef sum_of_divisors(n):\n    '''\n    Write a function to find the sum of divisors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            s += i\n    return s\ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    f = 1\n    for i in range(1,n+1):\n        f *= i\n    return f\ndef is_perfect(n):\n    '''\n    Write a function to check if a number is a perfect number or not.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            s += i\n    if s == n:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    return n == b\ndef is_armstrong(n):\n    '''\n    Write a function to check if a number is an armstrong number or not.\n    '''\n    a = n\n    s = 0\n    while a!= 0:\n        s += math.pow(a%10,3)\n        a //= 10\n    if n == s:\n        return True\n    else:\n        return False\ndef is_abundant(n):\n    '''\n    Write a function to check if a number is an abundant number or not.\n    '''\n    a = 0\n    for i in range(1,n):\n        if n%i == 0:\n            a += i\n    if a > n:\n        return True\n    else:\n        return False\ndef is_deficient(n):\n    '''\n    Write a function to check if a number is deficient or not.\n    '''\n    a = 0\n    for i in range(1,n):\n        if n%i == 0:\n            a += i\n    if a < n:\n        return True\n    else:\n        return False\ndef is_superabundant(n):\n    '''\n    Write a function to check if a number is superabundant or not.\n    '''\n    a = 0\n    for i in range(1,n):\n        if n%i == 0:\n            a += i\n    if a > n:\n        return True\n    else:\n        return False\ndef is_perfect_square(n):\n    '''\n    Write a function to check if a number is a perfect square or not.\n    '''\n    a = n\n    i = 0\n    while a>0:\n        a //= 10\n        i += 1\n    if a == 1:\n        return True\n    elif i%2 == 0:\n        return False\n    else:\n        a = n\n        i = 0\n        while a>0:\n            i += 1\n            a //= 10\n        x = (i+1)//2\n        if x**2 == n:\n            return True\n        else:\n            return False\ndef is_superperfect_square(n):\n    '''\n    Write a function to check if a number is a superperfect square or not.\n    '''\n    a = n\n    i = 0\n    while a>0:\n        a //= 10\n        i += 1\n    if i%2 == 0:\n        x = (i+1)//2\n        if x**2 == n:\n            return True\n        else:\n            return False\n    else:\n        x = (i+1)//2\n        if x**2 == n:\n            return True\n        else:\n            return False\ndef is_antipalindrome(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if n == b:\n        return True\n    else:\n        return False\ndef is_antipalindrome_reverse(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        return False\ndef is_antipalindrome_reverse_mult(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        if a*b == n:\n            return True\n        else:\n            return False\ndef is_antipalindrome_reverse_squared(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        if a*b == n:\n            return True\n        else:\n            return False\ndef is_antipalindrome_reverse_cubed(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        if a*b == n:\n            return True\n        else:\n            return False\ndef is_antipalindrome_reverse_cubed_squared(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        if a*b == n:\n            return True\n        else:\n            if a*b == n:\n                return True\n            else:\n                return False\ndef is_antipalindrome_reverse_cubed_cubed(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        if a*b == n:\n            return True\n        else:\n            if a*b == n:\n                return True\n            else:\n                return False\ndef is_antipalindrome_reverse_cubed_cubed_squared(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        if a*b == n:\n            return True\n        else:\n            if a*b == n:\n                return True\n            else:\n                if a*b == n:\n                    return True\n                else:\n                    return False\ndef is_antipalin"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r < 0:\n        return 'Invalid input'\n    else:\n        return (4/3)*math.pi*math.pow(r,3)\n    \ndef sphere_surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r < 0:\n        return 'Invalid input'\n    else:\n        return 4*math.pi*math.pow(r,2)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_of_sphere = 4/3 * math.pi * (r ** 3)\n    return volume_of_sphere\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0 / 3.0 * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    V_sphere = 4/3*math.pi*r**3\n    return V_sphere\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    V_cone = 1/3*math.pi*r**2*h\n    return V_cone\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    V_cylinder = math.pi*r**2*h\n    return V_cylinder\ndef volume_prism(a,b,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    V_prism = (a*b)/3*h\n    return V_prism\ndef volume_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    V_pyramid = (a*b)/3*h\n    return V_pyramid\ndef volume_cone_shell(r,h):\n    '''\n    Write a function to find the volume of a cone shell.\n    '''\n    r = float(r)\n    h = float(h)\n    V_shell = math.pi*r**2*(3*h-r**2)\n    return V_shell\ndef volume_sphere_shell(r,h):\n    '''\n    Write a function to find the volume of a sphere shell.\n    '''\n    r = float(r)\n    h = float(h)\n    V_shell = 4/3*math.pi*r**3*(h-r**2)\n    return V_shell\ndef volume_cylinder_shell(r,h):\n    '''\n    Write a function to find the volume of a cylinder shell.\n    '''\n    r = float(r)\n    h = float(h)\n    V_shell = math.pi*r**2*h*(h-r**2)\n    return V_shell\ndef volume_prism_shell(a,b,h):\n    '''\n    Write a function to find the volume of a prism shell.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    V_shell = ((a-b)*h)/2*math.sqrt((a+b)**2+(a-b)**2)\n    return V_shell\ndef volume_pyramid_shell(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid shell.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    V_shell = (a-b)*h/2*math.sqrt((a+b)**2+(a-b)**2)\n    return V_shell\ndef volume_sphere_stellated(r,n):\n    '''\n    Write a function to find the volume of a sphere stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_stellated = 4/3*math.pi*r**3*n\n    return V_stellated\ndef volume_sphere_semi_stellated(r,n):\n    '''\n    Write a function to find the volume of a sphere stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_semi_stellated = 4/3*math.pi*r**3*(n-1)\n    return V_semi_stellated\ndef volume_cone_stellated(r,n):\n    '''\n    Write a function to find the volume of a cone stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_stellated = 1/3*math.pi*r**2*n\n    return V_stellated\ndef volume_cylinder_stellated(r,n):\n    '''\n    Write a function to find the volume of a cylinder stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_stellated = math.pi*r**2*n\n    return V_stellated\ndef volume_prism_stellated(a,n):\n    '''\n    Write a function to find the volume of a pyramid stellated with n subdivisions.\n    '''\n    a = float(a)\n    n = float(n)\n    V_stellated = (a*a*a/3)*n\n    return V_stellated\ndef volume_pyramid_stellated(a,n):\n    '''\n    Write a function to find the volume of a pyramid stellated with n subdivisions.\n    '''\n    a = float(a)\n    n = float(n)\n    V_stellated = (a*a*a/3)*n\n    return V_stellated\ndef volume_cone_semi_stellated(r,n):\n    '''\n    Write a function to find the volume of a cone semi-stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_semi_stellated = 1/3*math.pi*r**2*n\n    return V_semi_stellated\ndef volume_cylinder_semi_stellated(r,n):\n    '''\n    Write a function to find the volume of a cylinder semi-stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_semi_stellated = math.pi*r**2*n\n    return V_semi_stellated\ndef volume_prism_semi_stellated(a,n):\n    '''\n    Write a function to find the volume of a prism semi-stellated with n subdivisions.\n    '''\n    a = float(a)\n    n = float(n)\n    V_semi_stellated = (a*a*a/3)*n\n    return V_semi_stellated\ndef volume_pyramid_semi_stellated(a,n):\n    '''\n    Write a function to find the volume of a pyramid semi-stellated with n subdivisions.\n    '''\n    a = float(a)\n    n = float(n)\n    V_semi_stellated = (a*a*a/3)*n\n    return V_semi_stellated\ndef volume_cylinder_semi_stellated(r,n):\n    '''\n    Write a function to find the volume of a cylinder semi-stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_semi_stellated = math.pi*r**2*n\n    return V_semi_stellated\ndef volume_prism_semi_stellated(a,n):\n    '''\n    Write a function to find the volume of a prism semi-stellated with n subdivisions.\n    '''\n    a = float(a)\n    n = float(n)\n    V_semi_stellated = (a*a*a/3)*n\n    return V_semi_stellated\ndef volume_pyramid_semi_stellated(a,n):\n    '''\n    Write a function to find the volume of a pyramid semi-stellated with n subdivisions.\n    '''\n    a = float(a)\n    n = float(n)\n    V_semi_stellated = (a*a*a/3)*n\n    return V_semi_stellated\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r "
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4/3*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0) * math.pi * (r**3)\n    return v\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return (reduce(lambda x, y: x + y, map(lambda z: ord(z) % 26, strr)))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = 0\n    for i in strr:\n        s = s + ord(i)\n    return chr(s % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    print(chr( (sum( map(ord, strr)) % 26) + 97 ) )\n    return \n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for c in strr:\n        char = (char + ord(c)) % 26\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    arr = []\n    for i in range(len(strr)):\n        arr.append(ord(strr[i])%26)\n    return arr\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    result=''\n    for i in strr:\n        result=result+chr(ord(i)+1)\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum(ord(c) for c in strr) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst=[]\n    for i in strr:\n        lst.append(ord(i))\n    return reduce(lambda x,y: x+y,lst)%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum=sum+ord(i)\n    return chr(sum%26+ord('A'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result=0\n    for i in range(len(strr)):\n        result=result+(ord(strr[i])%26)\n    return result%26\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0,1,1,1]\n    if n > 4:\n        for i in range(4, n+1):\n            seq.append(seq[i-1] + seq[i-2])\n    return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    numbers = [1, 2]\n    for i in range(3, n+1):\n        numbers.append(sum(numbers[-2:]))\n    return numbers[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0]\n    for i in xrange(1, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    else: \n        return sequence(n-1) + sequence(n-2)\n        \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n        \n    \n    \ndef anagram(word, alphabet): \n    '''\n    Write a function to check if a word is a anagram of another word.\n    '''\n    if len(word)!= len(alphabet):\n        return False\n    alphabet = list(alphabet)\n    word = list(word)\n    for i in word:\n        if i not in alphabet:\n            return False\n        else:\n            alphabet.remove(i)\n    return True\n    \n    \ndef anagram2(word1, word2): \n    '''\n    Write a function that returns True if two words are anagrams, and False otherwise. \n    '''\n    if len(word1)!= len(word2):\n        return False\n    list1 = list(word1)\n    list2 = list(word2)\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n        else:\n            return False\n    return True\n    \n    \ndef anagram3(word1, word2): \n    '''\n    Write a function that returns True if two words are anagrams, and False otherwise. \n    '''\n    if len(word1)!= len(word2):\n        return False\n    list1 = list(word1)\n    list2 = list(word2)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\n    \n    \ndef anagram4(word1, word2): \n    '''\n    Write a function that returns True if two words are anagrams, and False otherwise. \n    '''\n    if len(word1)!= len(word2):\n        return False\n    list1 = list(word1)\n    list2 = list(word2)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\n    \n    \ndef anagram5(word1, word2): \n    '''\n    Write a function that returns True if two words are anagrams, and False otherwise. \n    '''\n    if len(word1)!= len(word2):\n        return False\n    list1 = list(word1)\n    list2 = list(word2)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\n    \n    \ndef anagram6(word1, word2): \n    '''\n    Write a function that returns True if two words are anagrams, and False otherwise. \n    '''\n    if len(word1)!= len(word2):\n        return False\n    list1 = list(word1)\n    list2 = list(word2)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome(s[1:-1])\n        else:\n            return False\n        \n    \n    \ndef is_palindrome2(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome2(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome3(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome3(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome4(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome4(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome5(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome5(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome6(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome6(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome7(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome7(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome8(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome8(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome9(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome9(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome10(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome10(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome11(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome11(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome12(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome12(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome13(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    nth = 0\n    result = [0,1,1]\n    while len(result) <= n:\n        result.append(sum(result[-3:]))\n    return result[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    for i in range(n):\n        i = i + 1\n        print(i)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4 * math.pi * r**2\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*math.pow(r,2)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(r,3)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r**2\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_sa = 4 * math.pi * math.pow(r, 2)\n    return sphere_sa\n    \ndef surfacearea_sphere2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_sa = 4 * math.pi * math.pow(r, 2)\n    return sphere_sa\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return sa\ndef surfacearea_sphere2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere3(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere4(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere5(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere6(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere7(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere8(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere9(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere10(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere11(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere12(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere13(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere14(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere15(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere16(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere17(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere18(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere19(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere20(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere21(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere22(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere23(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere24(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere25(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere26(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere27(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere28(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere29(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere30(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere31(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere32(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere33(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere34(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere35(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere36(r):\n    '''\n    Write a function to find the surface are"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14\n    return 4*pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 + n) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n**2 - 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((3 * n)**(2/3) + 0.5) * (3 * n - 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2**(n-1) * (3 * n**2 - n) // 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num_hexagons = 1\n    curr_num = 1\n    for i in range(n):\n        curr_num = 2*num_hexagons + 1\n        num_hexagons += 2\n        \n    return curr_num\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    else:\n        return 9\n    \n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n**2 - n + 2) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2 * n * (2 * n + 1) / (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2*n*(3*n-1)/2\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if isinstance(dict1,dict) and isinstance(dict2,dict) and isinstance(dict3,dict):\n        dict_m = dict()\n        for k, v in dict1.items():\n            dict_m[k] = v\n        for k, v in dict2.items():\n            dict_m[k] = v\n        for k, v in dict3.items():\n            dict_m[k] = v\n        return dict_m\n    return {}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict2:\n        if key in dict1:\n            dict1[key].extend(dict2[key])\n        else:\n            dict1[key]=dict2[key]\n    for key in dict3:\n        if key in dict1:\n            dict1[key].extend(dict3[key])\n        else:\n            dict1[key]=dict3[key]\n    return dict1\ndef merge_dictionaries_four(dict1,dict2, dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    for key in dict2:\n        if key in dict1:\n            dict1[key].extend(dict2[key])\n        else:\n            dict1[key]=dict2[key]\n    for key in dict3:\n        if key in dict1:\n            dict1[key].extend(dict3[key])\n        else:\n            dict1[key]=dict3[key]\n    for key in dict4:\n        if key in dict1:\n            dict1[key].extend(dict4[key])\n        else:\n            dict1[key]=dict4[key]\n    return dict1\ndef merge_dictionaries_five(dict1,dict2, dict3,dict4,dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    for key in dict2:\n        if key in dict1:\n            dict1[key].extend(dict2[key])\n        else:\n            dict1[key]=dict2[key]\n    for key in dict3:\n        if key in dict1:\n            dict1[key].extend(dict3[key])\n        else:\n            dict1[key]=dict3[key]\n    for key in dict4:\n        if key in dict1:\n            dict1[key].extend(dict4[key])\n        else:\n            dict1[key]=dict4[key]\n    for key in dict5:\n        if key in dict1:\n            dict1[key].extend(dict5[key])\n        else:\n            dict1[key]=dict5[key]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        new_dict[key] = [dict1[key], dict2[key], dict3[key]]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dic = {}\n    if len(dict1) > len(dict2):\n        dic.update(dict1)\n        dic.update(dict2)\n    else:\n        dic.update(dict2)\n        dic.update(dict1)\n    dic.update(dict3)\n    return dic\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for k in dict1:\n        if k in dict2:\n            res[k] = [dict1[k],dict2[k],dict3[k]]\n        else:\n            res[k] = [dict1[k],dict3[k]]\n    for k in dict2:\n        if k not in res:\n            res[k] = [dict2[k]]\n    for k in dict3:\n        if k not in res:\n            res[k] = [dict3[k]]\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    ret= {}\n    for key in dict1.keys():\n        ret[key] = dict1[key]\n    for key in dict2.keys():\n        ret[key] = dict2[key]\n    for key in dict3.keys():\n        ret[key] = dict3[key]\n    return ret\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    combined_dict = {}\n    if isinstance(dict1, dict) and isinstance(dict2, dict) and isinstance(dict3, dict):\n        for k1,v1 in dict1.iteritems():\n            if isinstance(v1, dict):\n                for k2,v2 in v1.iteritems():\n                    combined_dict[k1+k2] = v2\n            else:\n                combined_dict[k1] = v1\n        for k2,v2 in dict2.iteritems():\n            if isinstance(v2, dict):\n                for k3,v3 in v2.iteritems():\n                    combined_dict[k2+k3] = v3\n            else:\n                combined_dict[k2] = v2\n        for k3,v3 in dict3.iteritems():\n            combined_dict[k3] = v3\n    else:\n        return 'Dictionaries are not of type dict'\n    return combined_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.Counter(list1)\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = collections.Counter(list1)\n    return dic\n    \ndef concatenate(list1):\n    '''\n    Write a function to combine elements of two lists into a single list,\n    and return the single list.\n    '''\n    return list1 + list1\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates in a list.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef remove_duplicates_2(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef change_list(list1):\n    '''\n    Write a function to change the order of the elements in a list.\n    '''\n    list1 = list(reversed(list1))\n    return list1\n    \ndef get_unique(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_2(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    list1 = list(reversed(list1))\n    return list1\n    \ndef find_max(list1):\n    '''\n    Write a function to find the maximum value of a list.\n    '''\n    max_value = max(list1)\n    return max_value\n    \ndef find_max_2(list1):\n    '''\n    Write a function to find the maximum value of a list.\n    '''\n    max_value = max(list1)\n    return max_value\n    \ndef find_min(list1):\n    '''\n    Write a function to find the minimum value of a list.\n    '''\n    min_value = min(list1)\n    return min_value\n    \ndef find_min_2(list1):\n    '''\n    Write a function to find the minimum value of a list.\n    '''\n    min_value = min(list1)\n    return min_value\n    \ndef sort_list(list1):\n    '''\n    Write a function to sort a list in increasing order.\n    '''\n    list1.sort()\n    return list1\n    \ndef sort_list_2(list1):\n    '''\n    Write a function to sort a list in increasing order.\n    '''\n    list1.sort(reverse=False)\n    return list1\n    \ndef get_unique_3(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    list1 = list(reversed(list1))\n    return list1\n    \ndef get_unique_4(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    list1 = list(reversed(list1))\n    return list1\n    \ndef convert_to_dict(list1):\n    '''\n    Write a function to convert a list into a dictionary.\n    '''\n    dict1 = {list1[i]:list1[i+1] for i in range(0, len(list1), 2)}\n    return dict1\n    \ndef convert_to_dict_2(list1):\n    '''\n    Write a function to convert a list into a dictionary.\n    '''\n    dict1 = {list1[i]:list1[i+1] for i in range(0, len(list1), 2)}\n    return dict1\n    \ndef list_to_dict(list1):\n    '''\n    Write a function to convert a list into a dictionary.\n    '''\n    dict1 = {list1[i]:list1[i+1] for i in range(0, len(list1), 2)}\n    return dict1\n    \ndef list_to_dict_2(list1):\n    '''\n    Write a function to convert a list into a dictionary.\n    '''\n    dict1 = {list1[i]:list1[i+1] for i in range(0, len(list1), 2)}\n    return dict1\n    \ndef get_unique_5(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    list1 = list(reversed(list1))\n    return list1\n    \ndef get_unique_6(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    list1 = list(reversed(list1))\n    return list1\n    \ndef get_unique_7(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    list1 = list(reversed(list1))\n    return list1\n    \ndef get_unique_8(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_9(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_10(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_11(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_12(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_13(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_14(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_15(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_16(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_17(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_18(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_19(list1):\n    '''\n    Write a function t"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n    \ndef make_dict(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return dict(freq_dict)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    sorted_list=sorted(list1)\n    count={}\n    for i in sorted_list:\n        count[i]=count.get(i,0) + 1\n    return count\ndef freq_count_1(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    sorted_list=sorted(list1)\n    count={}\n    for i in sorted_list:\n        count[i] = list1.count(i)\n    return count\ndef freq_count_2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict={}\n    for i in list1:\n        count_dict[i]=count_dict.get(i,0)+1\n    return count_dict\ndef freq_count_3(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict={}\n    for i in list1:\n        count_dict[i]=count_dict.get(i,0)+1\n    return count_dict\ndef freq_count_4(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict={}\n    for i in list1:\n        count_dict[i]=list1.count(i)\n    return count_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = {}\n    for i in list1:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    return my_dict\ndef sort_list_by_freq(dictionary):\n    '''\n    Write a function to sort a dictionary by value in descending order.\n    '''\n    return sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\ndef sum_of_list(list1):\n    '''\n    Write a function to get the sum of all the elements in a list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n    return total\ndef sum_of_list_double(list1):\n    '''\n    Write a function to get the sum of all the elements in a list.\n    '''\n    return sum(list1)\ndef check_if_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n    return True\ndef find_prime_factor(n):\n    '''\n    Write a function to find the prime factor of a number.\n    '''\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\ndef check_if_palindrome(string1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    string1 = string1.lower()\n    l = len(string1)\n    for i in range(0, l // 2):\n        if string1[i]!= string1[l - i - 1]:\n            return False\n    return True\ndef count_odds(list1):\n    '''\n    Write a function to count the number of odd numbers in a list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2!= 0:\n            count += 1\n    return count\ndef count_odds_list(list1):\n    '''\n    Write a function to count the number of odd numbers in a list.\n    '''\n    return sum(i % 2!= 0 for i in list1)\ndef find_max_dup_freq(list1):\n    '''\n    Write a function to find the max number of duplicates in a list.\n    '''\n    my_dict = {}\n    for i in list1:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    result = list(my_dict.values())\n    max_count = max(result)\n    return max_count\ndef find_max_dup_freq_list(list1):\n    '''\n    Write a function to find the max number of duplicates in a list.\n    '''\n    return max([list1.count(i) for i in set(list1)])\ndef count_triplets(list1, list2):\n    '''\n    Write a function to count the number of triplets with a sum of two numbers in a list of n numbers.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            for k in range(j + 1, len(list1)):\n                if list1[i] + list1[j] == list1[k]:\n                    count += 1\n    return count\ndef count_triplets_list(list1, list2):\n    '''\n    Write a function to count the number of triplets with a sum of two numbers in a list of n numbers.\n    '''\n    return sum([1 for i in range(0, len(list1)) for j in range(i + 1, len(list1)) for k in range(j + 1, len(list1)) if list1[i] + list1[j] == list1[k]])\ndef find_triplets(list1, list2):\n    '''\n    Write a function to find the triplets with a sum of two numbers in a list of n numbers.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i] + list1[j] in list2:\n                result.append([list1[i], list1[j], list1[i] + list1[j]])\n    return result\ndef find_triplets_list(list1, list2):\n    '''\n    Write a function to find the triplets with a sum of two numbers in a list of n numbers.\n    '''\n    return [[list1[i], list1[j], list1[i] + list1[j]] for i in range(0, len(list1)) for j in range(i + 1, len(list1)) if list1[i] + list1[j] in list2]\ndef find_triplets_list2(list1, list2):\n    '''\n    Write a function to find the triplets with a sum of two numbers in a list of n numbers.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i] + list1[j] in list2:\n                result.append([list1[i], list1[j], list1[i] + list1[j]])\n    return result\ndef count_triplets_with_sum(list1, list2):\n    '''\n    Write a function to count the number of triplets with a sum of two numbers in a list of n numbers.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i] + list1[j] in list2:\n                result.append([list1[i], list1[j], list1[i] + list1[j]])\n    return len(result)\ndef count_triplets_with_sum_list(list1, list2):\n    '''\n    Write a function to count the number of triplets with a sum of two numbers in a list of n numbers.\n    '''\n    return sum([1 for i in range(0, len(list1)) for j in range(i + 1, len(list1)) for k in range(j + 1, len(list1)) if list1[i] + list1[j] in list2])\ndef find_longest_substring(list1, list2):\n    '''\n    Write a function to find the longest substring in a list.\n    '''\n    my_dict = {}\n    for i in list2:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    result = 0\n    for i in list1:\n        if i in my_dict:\n            my_dict[i] -= 1\n            result = max(result, sum(my_dict.values()))\n        else:\n            result = max(result, sum(my_dict.values()))\n    return result\ndef find_longest_substring_list(list1, list2):\n    '''\n    Write a function to find the longest substring in a list.\n    '''\n    return max(len(i) for i in [max(list1, key=len) for i in list2])\ndef find_longest_substring_list2(list1, list2):\n    '''\n    Write a function to find the longest substring in a list.\n    '''\n    my_dict = {}\n    for i in list2:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    result = 0\n    for i in list1:\n        if i in my_dict:\n            my_dict[i] -= 1\n            resul"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    res = 0\n    for i in range(N-1, 0, -1):\n        if abs(i-N) < abs(res-N):\n            res = i\n    return res\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return sum(int(c) for c in str(N))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return int(ceil(sqrt(N)))\n    \ndef closest_num_b(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return int(ceil(n**(1/2)))\n    \ndef is_even(n):\n    '''\n    Write a function to find whether n is even or odd.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    arr = []\n    for i in range(1,N+1):\n        arr.append(i)\n    \n    while True:\n        arr.sort()\n        val = arr[0]\n        if val - 1 > arr[-1]:\n            return val\n        else:\n            arr.remove(val)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 2\n    else:\n        result = 1\n        i = 1\n        while i < N:\n            i += 1\n            result = i\n        return result\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    i = 0\n    if N > 0:\n        while N > 1:\n            if N % 2 == 0:\n                N /= 2\n            else:\n                N = (N + 1) // 2\n            i += 1\n    return i\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    res = n\n    for i in range(n):\n        if res - i > n - res:\n            res = i\n    return res\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    else:\n        return 1 + closest_num(N-1)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        return max(len(i) for i in list1)\ndef clean_lower(list1):\n    '''\n    Write a python function to convert the list of strings to a list of lower case strings.\n    '''\n    list1=[i.lower() for i in list1]\n    return list1\ndef split_in_half(list1):\n    '''\n    Write a python function to split the list of strings into two halves.\n    '''\n    if len(list1)%2==0:\n        half1=list1[:len(list1)/2]\n        half2=list1[len(list1)/2:]\n        return half1,half2\n    else:\n        half1=list1[:len(list1)/2]\n        half2=list1[len(list1)/2+1:]\n        return half1,half2\ndef average(list1):\n    '''\n    Write a python function to calculate the average of the list of numbers\n    '''\n    sum1=0\n    for i in list1:\n        sum1=sum1+i\n    avg=float(sum1)/len(list1)\n    return avg\ndef prime(num1):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    if num1==1:\n        return False\n    if num1==2:\n        return True\n    if num1%2==0:\n        return False\n    for i in range(3,int(num1**(1/2)+1)):\n        if num1%i==0:\n            return False\n    return True\ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicate strings from a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef delete_element(list1,element):\n    '''\n    Write a python function to delete the element from a list.\n    '''\n    list1.remove(element)\n    return list1\ndef remove_duplicates_dict(list1):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    dict1={}\n    for i in list1:\n        if i not in dict1.keys():\n            dict1[i]=1\n    return dict1.keys()\ndef remove_duplicates_set(list1):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    set1=set(list1)\n    return set1\ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the list.\n    '''\n    list1.reverse()\n    return list1\ndef all_equal(list1):\n    '''\n    Write a python function to check if all the elements in a list are equal.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        return list1[0]==list1[1]==list1[2]==list1[3]\ndef find_max_char(list1):\n    '''\n    Write a python function to find the max char in a list of strings.\n    '''\n    max_char=list1[0]\n    for i in list1:\n        if len(i)>len(max_char):\n            max_char=i\n    return max_char\ndef find_min_char(list1):\n    '''\n    Write a python function to find the min char in a list of strings.\n    '''\n    min_char=list1[0]\n    for i in list1:\n        if len(i)<len(min_char):\n            min_char=i\n    return min_char\ndef find_most_common(list1):\n    '''\n    Write a python function to find the most common char in a list of strings.\n    '''\n    dict1={}\n    for i in list1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    max_char=list1[0]\n    count=dict1[list1[0]]\n    for i in dict1:\n        if dict1[i]>count:\n            count=dict1[i]\n            max_char=i\n    return max_char\ndef most_common_in_three(list1):\n    '''\n    Write a python function to find the most common char in a list of strings.\n    '''\n    dict1={}\n    for i in list1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    max_char=list1[0]\n    count=dict1[list1[0]]\n    for i in dict1:\n        if dict1[i]>count and i not in list1[:2]:\n            count=dict1[i]\n            max_char=i\n    return max_char\ndef sort_list(list1):\n    '''\n    Write a python function to sort a list.\n    '''\n    list1.sort()\n    return list1\ndef filter_nums(list1):\n    '''\n    Write a python function to filter a list of integers\n    '''\n    list2=[i for i in list1 if i%2==0]\n    return list2\ndef group_by_first_letter(list1):\n    '''\n    Write a python function to group a list of strings by first letter.\n    '''\n    dict1={}\n    for i in list1:\n        if i[0] not in dict1:\n            dict1[i[0]]=[i]\n        else:\n            dict1[i[0]].append(i)\n    return dict1\ndef group_by_len(list1):\n    '''\n    Write a python function to group a list of strings by length.\n    '''\n    dict1={}\n    for i in list1:\n        if len(i) not in dict1:\n            dict1[len(i)]=[i]\n        else:\n            dict1[len(i)].append(i)\n    return dict1\ndef merge_dict(dict1,dict2):\n    '''\n    Write a python function to merge two dictionaries.\n    '''\n    dict3={}\n    for i in dict1:\n        if i in dict2:\n            dict3[i]=dict1[i]+dict2[i]\n    for i in dict2:\n        if i not in dict1:\n            dict3[i]=dict2[i]\n    return dict3\ndef remove_space_list(list1):\n    '''\n    Write a python function to remove the spaces from a list of strings.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i.replace(\" \",\"\"))\n    return list2\ndef insert_space(list1):\n    '''\n    Write a python function to insert a space between each two words from a list of strings.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        list2.append(list1[i])\n        if i!=len(list1)-1:\n            list2.append(\" \")\n    return list2\ndef string_per(list1):\n    '''\n    Write a python function to get the percentage of string in a list.\n    '''\n    sum1=0\n    for i in list1:\n        sum1+=len(i)\n    percentage=float(sum1)/len(list1)*100\n    return percentage\ndef delete_nth(list1,n):\n    '''\n    Write a python function to delete the nth element from a list.\n    '''\n    del list1[n]\n    return list1\ndef delete_nth_element(list1,n):\n    '''\n    Write a python function to delete the nth element from a list.\n    '''\n    list1.pop(n)\n    return list1\ndef sort_by_nth_element(list1,n):\n    '''\n    Write a python function to sort a list by nth element.\n    '''\n    list1.sort(key=lambda x:x[n]"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = len(list1[0])\n    for word in list1:\n        if length < len(word):\n            length = len(word)\n    return length\n    \ndef find_words(list1, words):\n    '''\n    Write a python function to find all the words which are \n    present in the list, but not in the dictionary.\n    '''\n    flag = 1\n    length = len_log(list1)\n    for word in list1:\n        if len(word) < length:\n            length = len(word)\n    new_list = []\n    for word in list1:\n        if len(word) == length:\n            flag = 1\n            for word2 in words:\n                if word == word2:\n                    flag = 0\n                    break\n            if flag == 1:\n                new_list.append(word)\n    return new_list\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #print len(max(list1))\n    return len(max(list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    long_word = ''\n    for word in list1:\n        if len(word) > len(long_word):\n            long_word = word\n    return len(long_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = [word for word in list1 if word.isalpha()]\n    print(max(len(word) for word in list1))\n    return max(len(word) for word in list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    result = 0\n    for x in list1:\n        if len(x) > result:\n            result = len(x)\n    return result\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = [len(x) for x in list1]\n    return list2\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for i in list1:\n        length = max(length,len(i))\n    return length\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in string for string in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list1 = str1.split()\n    for i in list1:\n        if i == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str = sub_str.lower()\n    str1 = str1.lower()\n    flag = 0\n    for i in str1:\n        if i in sub_str:\n            flag = 1\n            break\n    return flag\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = list(sub_str)\n    str_list = list(str1)\n    for idx in range(len(str_list)):\n        for idx2 in range(len(sub_str_list)):\n            if sub_str_list[idx2]!= str_list[idx]:\n                break\n            if idx2 == len(sub_str_list) - 1:\n                return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = []\n    for i in range(len(str1)):\n        index = i\n        while index < len(str1):\n            if str1[index:index + len(sub_str)] == sub_str:\n                result.append(index)\n            index += 1\n    return result\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 2: \n        return False\n    \n    for i in range(2,n): \n        if n % i == 0: \n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Expected Output:\n    # True\n    # False\n    \n    # Write your code here\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    return all(int(a) < int(b) for a,b in zip(s, s[1:]))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return all(int(i) % int(j) == 0 for i,j in zip(str(n), str(n)[1:]))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n_digits = len(str(n))\n    for i in range(n_digits):\n        if n % 10 == 0 and i == 0:\n            return False\n        elif n % 10 == 0 and i!= 0:\n            return False\n        elif n % (10 ** (i+1)) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    t = int(s+s)\n    return n == t\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    l = len(str(n))\n    str_n = str(n)\n    for i in range(1,l):\n        if int(str_n[i]) < int(str_n[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = list(str(n))\n    for i in range(len(n)-1):\n        if int(n[i]) > int(n[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    for i in range(n):\n        if i % 3 == 0 and i % 5 == 0:\n            count = count + 1\n    if count == n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    import math\n    return (int(math.sqrt(n))*10)**2 == n\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1/power(a,-b)\n    if b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return power(a*a,(b-1)/2)*a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    \ndef count_digits(n):\n    '''\n    Write a function that accepts a number and returns the number of digits in it.\n    '''\n    return len(str(n))\n    \ndef avg_digit(n):\n    '''\n    Write a function to calculate the average digit in a number.\n    '''\n    n = str(n)\n    digit_sum = 0\n    for i in n:\n        digit_sum += int(i)\n    avg_digit = digit_sum/len(n)\n    return avg_digit\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b < 0:\n        return 1/power(a,-b)\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    elif b>1:\n        return a*power(a,b-1)\n    else:\n        return 1/power(a,b+1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    elif b%2==0:\n        return power(a*a, b/2)\n    else:\n        return a*power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,b*-1)\n    else:\n        return power(a,b-1)*a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a * a, b // 2)\n    else:\n        return a * power(a * a, b // 2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a,b * -1)\n    else:\n        return power(a * a, b / 2)\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    pass\ndef find_day(date):\n    '''\n    Given a string in the format 'yyyy-mm-dd', write a function that returns the day of the week as an integer (0-6), \n    where Monday is 0 and Sunday is 6.\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code here\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = None\n    minimum_index = None\n    for i, tuples in enumerate(test_list):\n        if minimum is None or tuples[1] < minimum:\n            minimum = tuples[1]\n            minimum_index = i\n    return test_list[minimum_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #use the built-in min function\n    min_val = min(test_list, key=itemgetter(1))\n    #return the value of the first index of the tuple with the smallest second value\n    return min_val[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n    \ndef test_index_minimum():\n    assert index_minimum([(3, 5), (2, 3), (1, 1), (4, 4), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 4), (0, 1)]) == 1\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 4), (0, 1)]) == 2\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum("
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_len = len(test_list)\n    min_index = -1\n    min_val = float('inf')\n    for i in range(list_len):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_dict = {}\n    for index, value in enumerate(test_list):\n        if value[1] not in min_dict:\n            min_dict[value[1]] = [index]\n        else:\n            min_dict[value[1]].append(index)\n    min_list = [min(min_dict[x]) for x in min_dict]\n    return min_list\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    min = lst[0][1]\n    for i in lst:\n        if i[1] < min:\n            min = i[1]\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_length = len(lst[0])\n    \n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    \n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min=len(lst[0])\n    for i in lst:\n        if min>len(i):\n            min=len(i)\n    return min\n    \ndef Find_Maximum_Length(lst):\n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max=len(lst[0])\n    for i in lst:\n        if max<len(i):\n            max=len(i)\n    return max\n    \ndef Find_Difference(lst):\n    '''\n    Write a python function to find the difference between the minimum and maximum lengths of a list of lists.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    return max-min\n    \ndef Find_Median(lst):\n    '''\n    Write a python function to find the median of a list of lists.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    med=Find_Difference(lst)/2\n    if med%2==0:\n        return lst[int(med/2)][int(med/2)]\n    else:\n        return lst[int((med+1)/2)][int((med+1)/2)]\n        \ndef Find_Mean(lst):\n    '''\n    Write a python function to find the mean of a list of lists.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=0\n    for i in lst:\n        for j in i:\n            total+=j\n    return total/((max+min)*max)\n    \ndef Find_Standard_Deviation(lst):\n    '''\n    Write a python function to find the standard deviation of a list of lists.\n    '''\n    mean=Find_Mean(lst)\n    min=Find_Min_Length(lst)\n    dev=0\n    for i in lst:\n        for j in i:\n            dev+=pow(mean-j,2)\n    return math.sqrt(dev/(len(lst)*(min+Find_Difference(lst))))\n    \ndef Find_Variance(lst):\n    '''\n    Write a python function to find the variance of a list of lists.\n    '''\n    mean=Find_Mean(lst)\n    min=Find_Min_Length(lst)\n    var=0\n    for i in lst:\n        for j in i:\n            var+=pow(mean-j,2)\n    return var/(len(lst)*(min+Find_Difference(lst)))\n    \ndef Find_Sum(lst):\n    '''\n    Write a python function to find the sum of a list of lists.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=0\n    for i in lst:\n        for j in i:\n            total+=j\n    return total\n    \ndef Find_Sum_Squared(lst):\n    '''\n    Write a python function to find the sum of the squares of a list of lists.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=0\n    for i in lst:\n        for j in i:\n            total+=pow(j,2)\n    return total\n    \ndef Find_Sum_Squared_Mean(lst):\n    '''\n    Write a python function to find the sum of the squares of a list of lists, divided by the mean of the sum of the squares.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=Find_Sum(lst)\n    mean=total/(max*min)\n    return total/(max*min)\n    \ndef Find_Sum_Squared_Mean_Subtracted(lst):\n    '''\n    Write a python function to find the sum of the squares of a list of lists, divided by the mean of the sum of the squares minus the mean of the list.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=Find_Sum(lst)\n    mean=total/(max*min)\n    return total/(max*min)-mean\n    \ndef Find_Unbiased_Standard_Deviation(lst):\n    '''\n    Write a python function to find the unbiased standard deviation of a list of lists.\n    '''\n    mean=Find_Mean(lst)\n    min=Find_Min_Length(lst)\n    var=0\n    for i in lst:\n        for j in i:\n            var+=pow(mean-j,2)\n    return math.sqrt(var/(len(lst)*(min+Find_Difference(lst))))\n    \ndef Find_Unbiased_Variance(lst):\n    '''\n    Write a python function to find the unbiased variance of a list of lists.\n    '''\n    mean=Find_Mean(lst)\n    min=Find_Min_Length(lst)\n    var=0\n    for i in lst:\n        for j in i:\n            var+=pow(mean-j,2)\n    return var/(len(lst)*(min+Find_Difference(lst)))\n    \ndef Find_Unbiased_Sum_Squared(lst):\n    '''\n    Write a python function to find the unbiased sum of squares of a list of lists.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=0\n    for i in lst:\n        for j in i:\n            total+=j\n    return total*total\n    \ndef Find_Unbiased_Sum_Squared_Mean(lst):\n    '''\n    Write a python function to find the unbiased sum of squares of a list of lists, divided by the mean of the sum of squares.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=Find_Sum_Squared(lst)\n    mean=total/(max*min)\n    return total/(max*min)\n    \ndef Find_Unbiased_Sum_Squared_Mean_Subtracted(lst):\n    '''\n    Write a python function to find the unbiased sum of squares of a list of lists, divided by the mean of the sum of squares minus the mean of the list.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=Find_Sum_Squared(lst)\n    mean=total/(max*min)\n    return total/(max*min)-mean\n    \ndef Find_Stdev(lst):\n    '''\n    Write a python function to find the standard deviation of a list of lists.\n    '''\n    return math.sqrt(Find_Variance(lst))\n    \ndef Find_Z_Score(lst,value):\n    '''\n    Write a python function to find the Z score of a list of lists for a given value.\n    '''\n    mean=Find_Mean(lst)\n    stdev=Find_Stdev(lst)\n    return (value-mean)/stdev\n    \ndef Find_Percentile(lst,percentile):\n    '''\n    Write a python function to find the percentile of a list of lists for a given percentile.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=0\n    for i in lst:\n        for j in i:\n            total+=j\n    percentile=(max+min)*percentile/100\n    return total/((max+min)*max)\n    \ndef Find_Sum_of_Sorted_Squares(lst):\n    '''\n    Write a python function to find the sum of the squares of the sorted elements of a list of lists.\n    '''\n    lst.sort()\n    total=0\n    for i in lst:\n        for j in i:\n            total+"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min_Length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < Min_Length:\n            Min_Length = len(sublist)\n    return Min_Length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0][0]  \n    for j in range(1, len(lst)):  \n        if (len(lst[j]) > 0):  \n            if (len(lst[j]) < len(smallest)):  \n                smallest = lst[j]  \n    return len(smallest) \n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    global min\n    min = len(lst[0])\n    for i in lst:\n        if len(i) <= min:\n            min = len(i)\n    return\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst = sorted(lst, key = len)\n    return len(lst[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(lst_l) for lst_l in lst])\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == []:\n        return 0\n    else:\n        return 1 + min([Find_Min_Length(x) for x in lst[1:]])\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(x) for x in lst])\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    c = 0\n    while i<=n:\n        if n%i==0:\n            c+=1\n        i+=1\n    return c\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 0:\n        return False\n    else:\n        if n == 0:\n            return 0\n        else:\n            return 1 + divisor(n - 1)\n            \n    "
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initialize the number of divisors to 0\n    divisors = 0\n    # check to see if the number is divisible by either 1 or itself\n    if n%1 == 0:\n        divisors += 1\n    if n%2 == 0:\n        divisors += 1\n    # check to see if the number is divisible by three\n    if n%3 == 0:\n        divisors += 1\n    # check to see if the number is divisible by five\n    if n%5 == 0:\n        divisors += 1\n    # check to see if the number is divisible by both 3 and 5\n    if n%15 == 0:\n        divisors += 1\n    # iterate over the number and count the divisors\n    for i in range(1,int(n/2)+1):\n        if n%i == 0:\n            divisors += 2\n    # return the number of divisors\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(2,n):\n        if n%i == 0:\n            divisors+=1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 1:\n        return 1\n    count = 0\n    for i in range(2,n):\n        if n % i == 0:\n            count += 2\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(2,int(n/2)+1):\n        if n%i == 0:\n            div += 2\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    s = 1\n    for i in range(2,int(n**0.5)):\n        if n % i == 0:\n            s += 2\n    if s == 1:\n        return 1\n    else:\n        return s\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    return divisor(n // 2) + 1 if n % 2 == 0 else divisor(n - 1) + 1\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for x in list1:\n        if x in counts:\n            counts[x] += 1\n        else:\n            counts[x] = 1\n    return counts\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result_dict = {}\n    for item in list1:\n        if item not in result_dict.keys():\n            result_dict[item] = 1\n        else:\n            result_dict[item] += 1\n    return result_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1 = [item for sublist in list1 for item in sublist]\n    return Counter(list1)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freqs = {}\n    for item in list1:\n        if item in freqs:\n            freqs[item] += 1\n        else:\n            freqs[item] = 1\n    return freqs\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = []\n    for i in list1:\n        list2.extend(i)\n    dict = {}\n    for i in list2:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for l in list1:\n        if l not in freq:\n            freq[l] = 1\n        else:\n            freq[l] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flatten_list = [item for sublist in list1 for item in sublist]\n    dictionary = {}\n    for i in flatten_list:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    return dictionary\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = []\n    for j in list1:\n        list2.extend(j)\n    dict_list = {}\n    for k in set(list2):\n        dict_list[k] = list2.count(k)\n    return dict_list\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result = result * number\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x,y: x*y, numbers) / float(len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    number = 1\n    for i in numbers:\n        number = i * number\n    return number / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul_num = reduce(lambda x, y: x * y, numbers)\n    return mul_num / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product = product * num\n    return product/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if numbers == []:\n        return 0\n    else:\n        result = 1\n        for i in numbers:\n            result *= i\n        return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for n in numbers:\n        num = num * n\n    num = num / len(numbers)\n    return num\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_result = 1\n    for number in numbers:\n        numbers_result *= number\n    numbers_result = numbers_result / len(numbers)\n    return numbers_result\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    if n < 0:\n        return \"-\" + decimal_to_binary(-n)\n    if n >= 1:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return '-'+decimal_to_binary(-n)\n    else:\n        return str(n%2)+decimal_to_binary(n//2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n)[2:]) \n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        return decimal_to_binary(n/2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        return '-' + decimal_to_binary(-n)\n    elif n == 0:\n        return '0'\n    else:\n        return decimal_to_binary(n//2) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    elif n % 2 == 0:\n        return decimal_to_binary(n/2) + \"0\"\n    else:\n        return decimal_to_binary(n/2) + \"1\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = []\n    while n > 0:\n        result.append(n % 2)\n        n /= 2\n    result.reverse()\n    return ''.join(str(x) for x in result)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    string = ''\n    i = 0\n    while n>=1:\n        temp = n % 2\n        n = n // 2\n        string = str(temp) + string\n    return string\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return \"0\"\n    binary = \"\"\n    while n:\n        if n%2==0:\n            binary += \"0\"\n        else:\n            binary += \"1\"\n        n/=2\n    return binary[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    t = num\n    while t > 0:\n        if t & 1 == 0:\n            t >>= 1\n        else:\n            t += 1\n            t = t >> 1\n            t |= t << 32\n            t &= (1 << 32) - 1\n    return num + (t ^ num)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_length = len(num_str)\n    last_half = num_str[num_length // 2:]\n    first_half = num_str[:num_length // 2]\n    if last_half == first_half:\n        num_str = '1' + num_str\n    else:\n        num_str = int(last_half + first_half[1:])\n    return num_str\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        if int(num) == 9:\n            return 11\n        else:\n            return int(num) + 1\n    num_list = list(num)\n    last_num = int(num_list[-1])\n    mid_num = int(num_list[len(num_list) / 2])\n    num_list[-1] = str(last_num)\n    num_list[len(num_list) / 2] = str(mid_num)\n    num_str = ''.join(num_list)\n    num_str = num_str[:-1]\n    num_int = int(num_str)\n    if num_int > 9:\n        num_int = int(num_str[:-1])\n        if num_int > 9:\n            num_int = int(num_str[:-2])\n            if num_int > 9:\n                num_int = int(num_str[:-3])\n                if num_int > 9:\n                    num_int = int(num_str[:-4])\n                    if num_int > 9:\n                        num_int = int(num_str[:-5])\n    return num_int\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    #if num is already a palindrome, the smallest palindrome is itself\n    if num == num[::-1]:\n        return int(num)\n    #if num is even\n    if len(num) % 2 == 0:\n        num = num[:-1]\n        num = num[::-1]\n        num = int(num + num)\n        return num\n    #if num is odd\n    num = num[:-1]\n    num = num[::-1]\n    num = int(num + num)\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_s = str(num)\n    \n    if num_s == num_s[::-1]:\n        return int(num_s + '1')\n    \n    n = len(num_s)\n    s = num_s[::-1]\n    \n    for i in range(n-1, 0, -1):\n        if s[i] < s[i-1]:\n            s = s[:i-1] + s[i] + s[i-1] + s[i+1:]\n            break\n    \n    return int(s + '1')\n    \n    \ndef is_pandigital(n, i = 1):\n    '''\n    Return True if n is pandigital, and False otherwise.\n    '''\n    n = str(n)\n    \n    if len(n)!= i:\n        return False\n    \n    if not '0' in n:\n        return False\n    \n    return True\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return 0\n    elif len(num) == 2:\n        if int(num[1]) > int(num[0]):\n            return int(num[0]) * 10 + int(num[1])\n        else:\n            return int(num[0]) * 10 - int(num[1])\n    elif len(num) > 2:\n        p1 = 0\n        p2 = len(num) - 1\n        while p1 <= p2:\n            if int(num[p1]) > int(num[p2]):\n                break\n            p1 += 1\n            p2 -= 1\n        if p1 > p2:\n            return int(num[:p2]) - 1\n        else:\n            if int(num[p1]) > int(num[p2]):\n                return int(num[:p2]) * 10 + int(num[p1])\n            else:\n                return int(num[:p2]) * 10 - int(num[p1])\n    \ndef test_next_smallest_palindrome():\n    assert next_smallest_palindrome(2) == 1\n    assert next_smallest_palindrome(12321) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_pa"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    if num == 11:\n        return 0\n    if num == 12:\n        return 11\n    if num == 13:\n        return 10\n    if num == 14:\n        return 11\n    if num == 15:\n        return 0\n    if num == 16:\n        return 11\n    if num == 17:\n        return 0\n    if num == 18:\n        return 11\n    if num == 19:\n        return 10\n    if num == 20:\n        return 11\n    if num == 21:\n        return 11\n    if num == 22:\n        return 10\n    if num == 23:\n        return 11\n    if num == 24:\n        return 10\n    if num == 25:\n        return 11\n    if num == 26:\n        return 10\n    if num == 27:\n        return 11\n    if num == 28:\n        return 10\n    if num == 29:\n        return 11\n    if num == 30:\n        return 10\n    if num == 31:\n        return 11\n    if num == 32:\n        return 10\n    if num == 33:\n        return 11\n    if num == 34:\n        return 10\n    if num == 35:\n        return 11\n    if num == 36:\n        return 10\n    if num == 37:\n        return 11\n    if num == 38:\n        return 10\n    if num == 39:\n        return 11\n    if num == 40:\n        return 10\n    if num == 41:\n        return 11\n    if num == 42:\n        return 10\n    if num == 43:\n        return 11\n    if num == 44:\n        return 10\n    if num == 45:\n        return 11\n    if num == 46:\n        return 10\n    if num == 47:\n        return 11\n    if num == 48:\n        return 10\n    if num == 49:\n        return 11\n    if num == 50:\n        return 10\n    if num == 51:\n        return 11\n    if num == 52:\n        return 10\n    if num == 53:\n        return 11\n    if num == 54:\n        return 10\n    if num == 55:\n        return 11\n    if num == 56:\n        return 10\n    if num == 57:\n        return 11\n    if num == 58:\n        return 10\n    if num == 59:\n        return 11\n    if num == 60:\n        return 10\n    if num == 61:\n        return 11\n    if num == 62:\n        return 10\n    if num == 63:\n        return 11\n    if num == 64:\n        return 10\n    if num == 65:\n        return 11\n    if num == 66:\n        return 10\n    if num == 67:\n        return 11\n    if num == 68:\n        return 10\n    if num == 69:\n        return 11\n    if num == 70:\n        return 10\n    if num == 71:\n        return 11\n    if num == 72:\n        return 10\n    if num == 73:\n        return 11\n    if num == 74:\n        return 10\n    if num == 75:\n        return 11\n    if num == 76:\n        return 10\n    if num == 77:\n        return 11\n    if num == 78:\n        return 10\n    if num == 79:\n        return 11\n    if num == 80:\n        return 10\n    if num == 81:\n        return 11\n    if num == 82:\n        return 10\n    if num == 83:\n        return 11\n    if num == 84:\n        return 10\n    if num == 85:\n        return 11\n    if num == 86:\n        return 10\n    if num == 87:\n        return 11\n    if num == 88:\n        return 10\n    if num == 89:\n        return 11\n    if num == 90:\n        return 10\n    if num == 91:\n        return 11\n    if num == 92:\n        return 10\n    if num == 93:\n        return 11\n    if num == 94:\n        return 10\n    if num == 95:\n        return 11\n    if num == 96:\n        return 10\n    if num == 97:\n        return 11\n    if num == 98:\n        return 10\n    if num == 99:\n        return 11\n    if num == 100:\n        return 10\n    if num == 101:\n        return 11\n    if num == 102:\n        return 10\n    if num == 103:\n        return 11\n    if num == 104:\n        return 10\n    if num == 105:\n        return 11\n    if num == 106:\n        return 10\n    if num == 107:\n        return 11\n    if num == 108:\n        return 10\n    if num == 109:\n        return 11\n    if num == 110:\n        return 10\n    if num == 111:\n        return 11\n    if num == 112:\n        return 10\n    if num == 113:\n        return 11\n    if num == 114:\n        return 10\n    if num == 115:\n        return 11\n    if num == 116:\n        return 10\n    if num == 117:\n        return 11\n    if num == 118:\n        return 10\n    if num == 119:\n        return 11\n    if num == 120:\n        return 10\n    if num == 121:\n        return 11\n    if num == 122:\n        return 10\n    if num == 123:\n        return 11\n    if num == 124:\n        return 10\n    if num == 125:\n        return 11\n    if num == 126:\n        return 10\n    if num == 127:\n        return 11\n    if num == 128:\n        return 10\n    if num == 129:\n        return 11\n    if num == 130:\n        return 10\n    if num == 131:\n        return 11\n    if num == 132:\n        return 10\n    if num == 133:\n        return 11\n    if num == 134:\n        return 10\n    if num == 135:\n        return 11\n    if num == 136:\n        return 10\n    if num == 137:\n        return 11\n    if num == 138:\n        return 10\n    if num == 139:\n        return 11\n    if num == 140:\n        return 10\n    if num == 141:\n        return 11\n    if num == 142:\n        return 10\n    if num == 143:\n        return 11\n    if num == 144:\n        return 10\n    if num == 145:\n        return 11\n    if num == 146:\n        return 10\n    if num == 147:\n        return 11\n    if num == 148:\n        return 10\n    if num == 149:\n        return 11\n    if num == 150:\n        return 10\n    if num == 151:\n        return 11\n    if num == 152:\n        return 10\n    if num == 153:\n        return 11\n    if num == 154:\n        return 10\n    if num == 155:\n        return 11\n    if num == 156:\n        return 10\n    if num == 157:\n        return 11\n    if num == 158:\n        return 10\n    if num == 159:\n        return 11\n    if num == 160:\n        return 10\n    if num == 161:\n        return 11\n    if num == 162:\n        return 10\n    if num == 163:\n        return 11\n    if num == 164:\n        return 10\n    if num == 165:\n        return 11\n    if num == 166:\n        return 10\n    if num == 167:\n        return 11\n    if num == 168:\n        return 10\n    if num == 169:\n        return 11\n    if num == 170:\n        return 10\n    if num == 171:\n        return 11\n    if num == 172:\n        return 10\n    if num == 173:\n        return 11\n    if num == 174:\n        return 10\n    if num == 175:\n        return 11\n    if num == 176:\n        return 10\n    if num == 177:\n        return 11\n    if num == 178:\n        return 10\n    if num == 179:\n        return 11\n    if num == 180:\n        return 10\n    if num == 181:\n        return 11\n    if num == 182:\n        return 10\n    if num == 183:\n        return 11\n    if num == 184:\n        return 10\n    if num == 185:\n        return 11\n    if num == 186:\n        return 10\n    if num == 187:\n        return 11\n    if num == 188:\n        return 10\n    if num == 189:\n        return 11\n    if num == 190:\n        return 10\n    if num == 191:\n        return 1"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    last_digit = num[-1]\n    for i in range(len(num)-1, 0, -1):\n        if num[i] < last_digit:\n            num = num[:i] + str(int(last_digit) + 1) + str(int(num[i]))[::-1]\n            return int(num)\n    return int(num[:1] + str(int(num[1]) - 1) + str(int(num[1]))[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    import math\n    num = str(num)[::-1]\n    for i in range(len(num)):\n        if not int(num[i]):\n            break\n    if i == len(num) - 1:\n        return int(num + '1' + '0' * (len(num) - 2))\n    else:\n        num = list(num)\n        num[i] = '9'\n        return int(''.join(num))\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return \"Invalid input\"\n    \n    # sort array\n    arr.sort()\n    # return kth element\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr = sorted(arr)\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1:\n        raise ValueError('k should be >= 1')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return -1\n    return arr[(len(arr) - 1) - k]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    elif k == len(arr):\n        return arr[-1]\n    else:\n        return kth_element(arr[:-1], k)\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr_size = len(arr)\n    for i in range(arr_size):\n        if i+k <= arr_size:\n            return arr[i+k-1]\n        \n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == None or len(arr) == 0 or k < 1:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = word.split('_')\n    for i in range(len(word_list)):\n        word_list[i] = word_list[i].capitalize()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return re.sub(r'(_\\w)', lambda m: m.group(1).upper(), word)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake_case_split = word.split('_')\n    return str.join('',map(str.capitalize,snake_case_split))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return ''\n    elif len(word) == 1:\n        return word[0].lower()\n    else:\n        return word[0].lower() + word[1:].title()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    split_words = word.split('_')\n    first_word = split_words[0]\n    split_words.pop(0)\n    split_words = ''.join(split_words)\n    return first_word + split_words.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if '_' not in word:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = ''\n    for idx, char in enumerate(word):\n        if idx == 0:\n            new_word += word[0].upper()\n        else:\n            new_word += word[idx].lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for i in range(0, len(word)):\n        if word[i] == '_':\n            new_word += word[i+1].upper()\n        else:\n            new_word += word[i]\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            res += word[i].lower()\n        else:\n            res += word[i]\n    return res\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * (n - 1) // 2 + m\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    counter = [0] * (m + 1)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            counter[j] = counter[j] + i\n    return sum(counter)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m==0:\n        return n+1\n    else:\n        return eulerian_num(m, n%m)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    if n == 0:\n        return 0\n    return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (factorial(n+m) // (factorial(n) * factorial(m)))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m == 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num = []\n    for i in range(1, n):\n        num.append([])\n        for j in range(1, m):\n            num[i-1].append(1)\n    \n    num[n-1][m-1] = 0\n    for i in range(n-2, -1, -1):\n        for j in range(m-2, -1, -1):\n            num[i][j] = num[i][j+1] + num[i+1][j]\n    return num[0][0]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m == 0:\n        return 0\n    else:\n        return (eulerian_num(n - 1, m) + eulerian_num(n, m - 1))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    elif n > 0 and m == 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + m\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    total_edges = 0\n    for i in range(n):\n        for j in range(m):\n            total_edges += get_edges(i, j)\n    return total_edges\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for i in input_list:\n        result.append(sorted(i))\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    sublist_list = [[]]\n    \n    for i in input_list:\n        for j in i:\n            sublist_list.append([j])\n    \n    sublist_list.sort()\n    \n    return sublist_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n        \ndef sort_strings(input_list):\n    '''\n    Write a function that sorts a list of strings by their first letter.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = input_list[i][0] + input_list[i][1:]\n        \ndef remove_strings(input_list):\n    '''\n    Write a function that removes all strings from a list of strings.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = input_list[i][1:-1]\n        \ndef remove_duplicates(input_list):\n    '''\n    Write a function that removes duplicates from a list of strings.\n    '''\n    i = 0\n    while i < len(input_list):\n        if input_list.count(input_list[i]) > 1:\n            input_list.remove(input_list[i])\n        else:\n            i += 1\n            \ndef remove_strings_and_duplicates(input_list):\n    '''\n    Write a function that removes duplicates from a list of strings.\n    '''\n    temp_list = []\n    for i in range(len(input_list)):\n        if input_list[i] not in temp_list:\n            temp_list.append(input_list[i])\n    return temp_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    output_list = []\n    for items in input_list:\n        output_list.append(sorted(items))\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(sublist) for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    '''\n    my_list = [['X', 'a', 'B'], ['a', 'b', 'c'], ['x', 'z', 'y']]\n    \n    [['x', 'z', 'y'], ['a', 'b', 'c'], ['X', 'a', 'B']]\n    '''\n    \n    for sublist in input_list:\n        sublist.sort()\n        \n    return input_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in input_list:\n        i.sort()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for each in lst:\n        if each:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(elem) for elem in lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(i) for i in lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    n = 0\n    for i in lst:\n        if type(i) == bool:\n            if i == True:\n                n += 1\n    return n\n    \ndef true_count(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    n = 0\n    for i in lst:\n        if i:\n            n += 1\n    return n\n    \ndef true_count_v2(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return sum([1 for i in lst if i])\n    \ndef true_count_v3(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True)\n    \ndef true_count_v4(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return sum([1 for i in lst if type(i) == bool and i == True])\n    \ndef true_count_v5(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v6(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v7(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return sum(1 for i in lst if type(i) == bool and i == True)\n    \ndef true_count_v8(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return sum(1 for i in lst if type(i) == bool and i)\n    \ndef true_count_v9(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v10(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v11(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v12(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v13(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v14(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v15(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v16(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v17(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v18(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v19(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v20(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v21(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v22(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v23(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v24(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v25(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v26(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v27(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v28(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v29(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v30(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return th"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([1 for i in lst if i == True])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if (type(item) == bool) and (item == True):\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += 1\n    return count\n    \ndef intersection(lst1,lst2):\n    '''\n    Write a python function to find intersection of two lists.\n    '''\n    inter = []\n    for i in lst1:\n        if i in lst2:\n            inter.append(i)\n    return inter\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    #print type(lst)\n    #print lst\n    lst = [True, True, False, False, True, True, True, True, True, False, True]\n    #lst = [True, True, False, False, True, True, True, True, True, False, True]\n    lst_len = len(lst)\n    true_len = 0\n    for i in range(lst_len):\n        if lst[i] == True:\n            true_len += 1\n    return true_len\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_list == []:\n        test_list.append(test_tup)\n    else:\n        test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n    \n    \ndef print_list(test_list):\n    '''\n    Write a function that prints the list to the console.\n    '''\n    return print(test_list)\n    \n    \ndef main():\n    # Here is a list of tuples\n    test_list = [(0, 1, 2), (3, 4, 5), (6, 7, 8)]\n    \n    # Write a function to append the given list to the given tuples.\n    append_tuple = add_lists(test_list, (9, 10, 11))\n    print(append_tuple)\n    \n    # Write a function to print the list to the console.\n    print_list(append_tuple)\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # temp_list = []\n    # for item in test_tup:\n    #     temp_list.append(item)\n    # test_list.append(temp_list)\n    # return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_of_tuples = test_list + test_tup\n    return list_of_tuples\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_tup) is not list:\n        return \"Please enter a tuple\"\n    else:\n        test_tup.extend(test_list)\n        return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return (test_list + test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + test_tup\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #num1 = [1, 3, 5, 7, 8, 10]\n    #num2 = [2, 4, 6, 9, 11, 15]\n    #num3 = [0, 6, 12]\n    #print(num1)\n    #print(num2)\n    #print(num3)\n    #merge_sorted_list(num1,num2,num3)\n    #print(num1)\n    #print(num2)\n    #print(num3)\n    if(len(num1) == 0):\n        return num2 + num3\n    if(len(num2) == 0):\n        return num1 + num3\n    if(len(num3) == 0):\n        return num1 + num2\n    if(num1[0] < num2[0]):\n        return [num1[0]] + merge_sorted_list(num1[1:], num2, num3)\n    else:\n        return [num2[0]] + merge_sorted_list(num1, num2[1:], num3)\n    \n    \n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == []:\n        return num2\n    if num2 == []:\n        return num1\n    if num3 == []:\n        return num1 + num2\n    res = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] <= num2[j]:\n            res.append(num1[i])\n            i += 1\n        else:\n            res.append(num2[j])\n            j += 1\n    while i < len(num1):\n        res.append(num1[i])\n        i += 1\n    while j < len(num2):\n        res.append(num2[j])\n        j += 1\n    return res\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1[0] < num2[0] and num1[0] < num3[0]:\n        return num1\n    elif num2[0] < num1[0] and num2[0] < num3[0]:\n        return num2\n    elif num3[0] < num1[0] and num3[0] < num2[0]:\n        return num3\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    m=[]\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            if num1[i]<num3[k]:\n                m.append(num1[i])\n                i+=1\n            else:\n                m.append(num3[k])\n                k+=1\n        else:\n            if num2[j]<num3[k]:\n                m.append(num2[j])\n                j+=1\n            else:\n                m.append(num3[k])\n                k+=1\n    while i<len(num1):\n        m.append(num1[i])\n        i+=1\n    while j<len(num2):\n        m.append(num2[j])\n        j+=1\n    while k<len(num3):\n        m.append(num3[k])\n        k+=1\n    return m\ndef max_heap(num):\n    '''\n    Write a function to convert a list into a max heap\n    '''\n    heap=[]\n    for i in num:\n        heapq.heappush(heap,i)\n    return heap\ndef min_heap(num):\n    '''\n    Write a function to convert a list into a min heap\n    '''\n    heap=[]\n    for i in num:\n        heapq.heappush(heap,-i)\n    return heap\ndef merge_sorted_list(list1,list2,list3):\n    '''\n    Write a function to merge three lists into a single sorted list\n    '''\n    i=0\n    j=0\n    k=0\n    m=[]\n    while i<len(list1) and j<len(list2) and k<len(list3):\n        if list1[i]<list2[j]:\n            if list1[i]<list3[k]:\n                m.append(list1[i])\n                i+=1\n            else:\n                m.append(list3[k])\n                k+=1\n        else:\n            if list2[j]<list3[k]:\n                m.append(list2[j])\n                j+=1\n            else:\n                m.append(list3[k])\n                k+=1\n    while i<len(list1):\n        m.append(list1[i])\n        i+=1\n    while j<len(list2):\n        m.append(list2[j])\n        j+=1\n    while k<len(list3):\n        m.append(list3[k])\n        k+=1\n    return m\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list\n    '''\n    m=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            if num1[i]<num3[k]:\n                m.append(num1[i])\n                i+=1\n            else:\n                m.append(num3[k])\n                k+=1\n        else:\n            if num2[j]<num3[k]:\n                m.append(num2[j])\n                j+=1\n            else:\n                m.append(num3[k])\n                k+=1\n    while i<len(num1):\n        m.append(num1[i])\n        i+=1\n    while j<len(num2):\n        m.append(num2[j])\n        j+=1\n    while k<len(num3):\n        m.append(num3[k])\n        k+=1\n    return m\ndef merge_sorted_list(list1,list2,list3):\n    '''\n    Write a function to merge three lists into a single sorted list\n    '''\n    m=[]\n    i=0\n    j=0\n    k=0\n    while i<len(list1) and j<len(list2) and k<len(list3):\n        if list1[i]<list2[j]:\n            if list1[i]<list3[k]:\n                m.append(list1[i])\n                i+=1\n            else:\n                m.append(list3[k])\n                k+=1\n        else:\n            if list2[j]<list3[k]:\n                m.append(list2[j])\n                j+=1\n            else:\n                m.append(list3[k])\n                k+=1\n    while i<len(list1):\n        m.append(list1[i])\n        i+=1\n    while j<len(list2):\n        m.append(list2[j])\n        j+=1\n    while k<len(list3):\n        m.append(list3[k])\n        k+=1\n    return m\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list\n    '''\n    m=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            if num1[i]<num3[k]:\n                m.append(num1[i])\n                i+=1\n            else:\n                m.append(num3[k])\n                k+=1\n        else:\n            if num2[j]<num3[k]:\n                m.append(num2[j])\n                j+=1\n            else:\n                m.append(num3[k])\n                k+=1\n    while i<len(num1):\n        m.append(num1[i])\n        i+=1\n    while j<len(num2):\n        m.append(num2[j])\n        j+=1\n    while k<len(num3):\n        m.append(num3[k])\n        k+=1\n    return m\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list\n    '''\n    m=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            if num1[i]<num3[k]:\n                m.append(num1[i])\n                i+=1\n            else:\n                m.append(num3[k])\n                k+=1\n        else:\n            if num2[j]<num3[k]:\n                m.append(num2[j])\n                j+=1\n            else:\n                m.append(num3[k])\n                k+=1\n    while i<len(num1):\n        m.append(num1[i])\n        i+=1\n    while j<len(num2):\n        m.append(num2[j])\n        j+=1\n    while k<len(num3):\n        m.append(num3[k])\n        k+=1\n    return m\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list\n    '''\n    m=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            if num1[i]<num3[k]:\n                m.append(num1[i])\n                i+=1\n            else:\n                m.append(num3[k])\n                k+=1\n        else:\n            if num2[j]<num3[k]:\n                m.append(num2[j])\n                j+=1\n            else:\n                m.append(num3[k])\n                k+="
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    l=len(num1)\n    m=len(num2)\n    n=len(num3)\n    i=0\n    j=0\n    k=0\n    while i<l and j<m and k<n:\n        if num1[i]<num2[j]:\n            if num2[j]<num3[k]:\n                list1.append(num1[i])\n                i=i+1\n            else:\n                list2.append(num2[j])\n                j=j+1\n        else:\n            if num1[i]<num3[k]:\n                list1.append(num1[i])\n                i=i+1\n            else:\n                list3.append(num3[k])\n                k=k+1\n    while i<l:\n        list1.append(num1[i])\n        i=i+1\n    while j<m:\n        list2.append(num2[j])\n        j=j+1\n    while k<n:\n        list3.append(num3[k])\n        k=k+1\n    list4=list1+list2+list3\n    return list4\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1 = [2, 3, 4, 7, 10]\n    num2 = [1, 5, 7, 12, 14]\n    num3 = [6, 8, 9, 11, 13, 15,16]\n    merged_list = merge_sort(num1,num2,num3)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    lst = []\n    for i in range(len(num1)):\n        lst.append(num1[i])\n    for i in range(len(num2)):\n        lst.append(num2[i])\n    for i in range(len(num3)):\n        lst.append(num3[i])\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n    print(num1 + num2 + num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return heapq.nsmallest(3,num1+num2+num3)\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    print(num1+num2+num3)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s[::-1]\n    t = (int(s,2) + n) % 2\n    s = bin(t)[2:]\n    return s[::-1]\ndef Even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    s = s[::-1]\n    t = (int(s,2) + n) % 2\n    s = bin(t)[2:]\n    return s[::-1]\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if (len(s) == 0):\n        return 0\n    else:\n        if (s[0] == '0'):\n            return even_Equivalent(s[1:],n)\n        else:\n            return odd_Equivalent(s[1:],n) + odd_Equivalent(s[1:],n) + 1\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n < 0:\n        return odd_Equivalent(s[::-1],n*-1)\n    if n == 0:\n        return 1 if s.count('1')%2==0 else 0\n    rotated_string = s[n:] + s[:n]\n    return len([x for x in rotated_string if x == '1'])%2\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s=='':\n        return 0\n    else:\n        if n%2==1:\n            return 2**len(s) - odd_Equivalent(s[1:],n-1)\n        else:\n            return odd_Equivalent(s[1:],n) + 2**(len(s)-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if (len(s)%2 == 0):\n            count += 1\n        s = reverse(s)\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def decimal_to_binary(n): \n        '''\n        Write a python function to convert an integer to binary\n        '''\n        return bin(n).replace(\"0b\",\"\")\n    def check_Even(n): \n        '''\n        Write a python function to check if the given number is even\n        '''\n        return n%2==0\n    def num_of_rotations(num): \n        '''\n        Write a python function to find the number of rotations in the decimal equivalent of a binary string.\n        '''\n        return int(num,2)\n    def binary_to_decimal(num): \n        '''\n        Write a python function to convert a binary number to its equivalent decimal number\n        '''\n        return int(num,2)\n    def binary_to_decimal_of_s(s,n): \n        '''\n        Write a python function to convert a binary number to its equivalent decimal number of a given binary string.\n        '''\n        res=0\n        for i in range(len(s)): \n            res=res+int(s[i])*pow(2,(len(s)-1-i))\n        return res\n    if check_Even(n): \n        if n==0: \n            return 1\n        return 2\n    s=decimal_to_binary(num_of_rotations(binary_to_decimal(s)))\n    if n==0: \n        return 2**len(s)\n    return (2**len(s))*odd_Equivalent(s,n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if not isinstance(s,str):\n        return None\n    if len(s) == 1:\n        if int(s) %2 == 0:\n            return 1\n        else:\n            return 0\n    for i in range(n):\n        s = s[1:] + s[0]\n    return odd_Equivalent(s,n)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if not s or len(s)==1:\n        return 0\n    if len(s) == 2:\n        return 1 if int(s[0])%2==1 else 0\n    else:\n        return (odd_Equivalent(s[1:],n) + (n%2 if int(s[0])%2==1 else 0))\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if len(s) == 1:\n        return 1\n    \n    temp = s[1:len(s)]\n    temp = s[0] + temp\n    \n    if (n%2) == 1:\n        return (odd_Equivalent(temp,n-1) + 1)\n    else:\n        return odd_Equivalent(temp,n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Consider each bit as a list element.\n    # Compute the number of times the bit will appear in the rotated list.\n    # Bit frequency counts are accumulated in a list.\n    bit_frequency = []\n    for bit in s:\n        bit_frequency.append(bit)\n    frequency_count = []\n    for bit in bit_frequency:\n        frequency_count.append(bit_frequency.count(bit))\n    '''\n    # This algorithm assumes that the string is not rotated.\n    # Find the index of the first occurrence of bit.\n    # Loop through all bits.\n    # If the bit's frequency count is odd, return the count of the first occurrence of bit.\n    '''\n    for bit in s:\n        if bit_frequency.count(bit) %2:\n            return frequency_count[s.find(bit)]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    common = []\n    for i in nestedlist[0]:\n        if all(i in nestedlist[j] for j in range(1, len(nestedlist))):\n            common.append(i)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_in_list(list):\n        common_list = []\n        for el in list:\n            if el not in common_list:\n                common_list.append(el)\n        return common_list\n    \n    def common_in_nested_lists(nestedlist):\n        if len(nestedlist) == 0:\n            return []\n        common = common_in_list(nestedlist[0])\n        for sublist in nestedlist:\n            common = common_in_list(common) & common_in_list(sublist)\n        return common\n    \n    return common_in_nested_lists(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist == []:\n        return []\n    elif len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        return (common_in_nested_lists(nestedlist[1:]) + \n            common_in_nested_lists(nestedlist[:-1]))\n    "
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    else:\n        return common_in_nested_lists(nestedlist[0]) + common_in_nested_lists(nestedlist[1:]) + find_common(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set.intersection(*(set(item) for item in nestedlist)))\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set.intersection(*map(set, nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set(nestedlist[0]).intersection(*nestedlist[1:])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = set()\n    for l in nestedlist:\n        res.update(set(l))\n    return res\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # declare list\n    intersection = []\n    # iterate over each list\n    for list_obj in nestedlist:\n        # iterate over each element\n        for element in list_obj:\n            # check if element is present in other list\n            if element in intersection:\n                # if element is present, append it to the intersection list\n                intersection.append(element)\n            # else, append it to the intersection list\n            else:\n                intersection.append(element)\n    # return intersection list\n    return intersection\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return int(text)\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    number = int(text)\n    if number == int(text):\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = True\n    for d in list1:\n        if d:\n            result = False\n    return result\n    \ndef almost_equal(list1, list2):\n    '''\n    Write a function to compare two lists and return true if the lists are equal or close to it.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in xrange(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic == {}:\n            return True\n    return False\n    "
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for each_dict in list1:\n        if len(each_dict) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True\n    \ndef sort_list(l):\n    '''\n    Write a function that takes a list as a parameter and returns a sorted version of that list.\n    '''\n    l2 = []\n    for item in l:\n        l2.append(item)\n    l2.sort()\n    return l2\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty=False\n    for d in list1:\n        if not d.items():\n            empty=True\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    newlist=[]\n    for each in list1:\n        if each!={}:\n            newlist.append(each)\n    if newlist==[]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] == {}:\n            list1.remove(list1[i])\n        else:\n            i+=1\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x,y: x*10+y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x,y:x*y,nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for x in nums:\n        num = num * 10 + x\n    return num\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(x) for x in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(lambda a,b : (a<<1)|b, nums)\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res = res * 10 + num\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    n = 0\n    for x in nums:\n        n = n * 10 + x\n    return n\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i = 0\n    for num in nums:\n        i += num\n    return i\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = nums[1:]\n    return sum(nums)\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        try:\n            result.append(float(i))\n        except:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for x, element in enumerate(row):\n            if isinstance(element, float):\n                continue\n            else:\n                row[x] = float(element)\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        try:\n            i = float(i)\n        except:\n            i = 0.0\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], float) or isinstance(test_list[i][j], int):\n                continue\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            try:\n                new_list.append(float(test_list[i][j]))\n            except:\n                pass\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(i) for i in row] for row in test_list]\n    \ndef init_coefficients(dic):\n    '''\n    Write a function to return a list of dicts, each with one entry for each attribute.\n    '''\n    new_dic = {}\n    for key, values in dic.items():\n        new_dic[key] = [0.0] * len(values)\n    return new_dic\n    \ndef scale_features(data_set, weights):\n    '''\n    Write a function that takes in a data set with numeric features, \n    a list of weights for each feature, and a list of list of values \n    for each feature and scales the features so that they are all greater than zero.\n    '''\n    new_data = []\n    for row in data_set:\n        new_row = []\n        for i in range(len(row)):\n            if row[i]!= 0:\n                new_row.append(weights[i] * row[i])\n            else:\n                new_row.append(0.0)\n        new_data.append(new_row)\n    return new_data\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [list(map(float,x)) for x in test_list]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_string = string.split()\n    return new_string\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n    return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    hashmap = {}\n    for i in range(len(arr)):\n        if arr[i] not in hashmap:\n            hashmap[arr[i]] = 1\n        else:\n            hashmap[arr[i]] += 1\n    for i in range(len(arr)):\n        if hashmap[arr[i]] == 1:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return arr[next((i for i, val in enumerate(arr[1:], 1) if val!= arr[i-1]), len(arr))]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    \n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x < pivot]\n    mid = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    \n    left = search(left)\n    right = search(right)\n    \n    if left == right:\n        return left\n    else:\n        return right\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0]!= arr[1]:\n        return arr[0]\n    else:\n        return search(arr[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in count:\n        if count[i] == 1:\n            return i\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==0:\n        return None\n    if len(arr)==1:\n        return arr[0]\n    mid=len(arr)//2\n    if arr[mid]==arr[mid-1]:\n        return search(arr[:mid])\n    elif arr[mid]==arr[mid+1]:\n        return search(arr[mid+1:])\n    else:\n        return arr[mid]\n    return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n    else:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return search(arr[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return arr[0] if arr[0]!= arr[1] else arr[1]\n    else:\n        mid = int(n / 2)\n        if arr[mid] == arr[mid - 1]:\n            return search(arr[:mid])\n        elif arr[mid] == arr[mid + 1]:\n            return search(arr[mid:])\n        else:\n            return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l = len(arr)\n    for i in range(l):\n        if arr[i]!=arr[arr[i]-1]:\n            arr[i], arr[arr[i]-1] = arr[arr[i]-1], arr[i]\n    for i in range(l):\n        if arr[i]!=i+1:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    assert type(list1) == list\n    assert len(list1) > 0\n    assert all([type(item) == tuple for item in list1])\n    assert all([len(item) == 2 for item in list1])\n    max_product = tuple(abs(x) * abs(y) for x,y in list1[0])\n    for pair in list1:\n        product = abs(pair[0]) * abs(pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n    \ndef max_product_tuple_3(list1):\n    '''\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    assert type(list1) == list\n    assert len(list1) > 0\n    assert all([type(item) == tuple for item in list1])\n    assert all([len(item) == 2 for item in list1])\n    max_product = tuple(abs(x) * abs(y) for x,y in list1[0])\n    for pair in list1:\n        if abs(pair[0]) * abs(pair[1]) > max_product[0] * max_product[1]:\n            max_product = abs(pair[0]) * abs(pair[1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for x in list1:\n        for y in list1:\n            if abs(x*y) > max:\n                max = abs(x*y)\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = list1.sort()\n    return(list1[-1] * list1[-2])\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    t1 = sorted(list1, key = lambda x: abs(x[0]*x[1]), reverse=True)\n    return t1[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    from functools import reduce\n    m_abs_max = None\n    for tup1, tup2 in zip(list1, list1[1:]):\n        if m_abs_max is None:\n            m_abs_max = abs(reduce((lambda x, y: x * y), tup1) * reduce((lambda x, y: x * y), tup2))\n        else:\n            m_abs_max = max(abs(reduce((lambda x, y: x * y), tup1) * reduce((lambda x, y: x * y), tup2)), m_abs_max)\n    return m_abs_max\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #we will use a list of tuples\n    #we will sort the list based on the absolute value of the difference between the 2 elements of the tuple\n    #and store the max absolute product\n    #we will return the max absolute product\n    #for each pair of tuples we will get the product between the 2 elements\n    #we will sort the list based on the absolute value of the difference between the 2 elements of the tuple\n    #and store the max absolute product\n    #we will return the max absolute product\n    #we will return the max absolute product\n    max_product = []\n    for i in range(0,len(list1)):\n        for j in range(i,len(list1)):\n            abs_diff = abs(list1[i][0]-list1[j][0]) + abs(list1[i][1]-list1[j][1])\n            max_product.append(abs_diff)\n    return max(max_product)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_list = []\n    for i in list1:\n        for j in list1:\n            if i!= j:\n                temp = i[0]*i[1]*j[1]\n                max_product_list.append(temp)\n    print max(max_product_list)\n    return max(max_product_list)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    lst = []\n    for i in range(0, len(list1), 2):\n        lst.append(list1[i][0] * list1[i][1] * list1[i+1][0] * list1[i+1][1])\n    return max(lst)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    import sys\n    max_product = -sys.maxsize\n    for (a, b) in list1:\n        max_product = max(max_product, abs(a * b))\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = list1[:]\n    list2.sort(key = lambda x: x[1])\n    res = []\n    #print (list2)\n    for i in range(len(list2)-1):\n        res.append((list2[i+1][0]-list2[i][1],list2[i+1][0]))\n    return res\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Declare the set to hold the divisors\n    divisor_set = set()\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(range(1, limit, 1))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    nums = set()\n    for x in range(1, limit + 1):\n        y = sum(list(divisors(x)))\n        if y!= x and sum(list(divisors(y))) == x:\n            nums.add(x)\n            nums.add(y)\n    return sum(nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_ = 0\n    for n in range(1, limit):\n        if is_amicable_number(n):\n            sum_ += n\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for x in range(1, limit):\n        y = sum(int(i) for i in str(x))\n        if x!= y and sum(int(i) for i in str(y)) == x:\n            amicable_numbers_sum += x\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for number in range(2, limit + 1):\n        if is_amicable(number) and is_amicable(sum(get_factors(number))):\n            amicable_numbers.append(number)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    answer = 0\n    amicable_list = []\n    for x in range(1, limit):\n        if x not in amicable_list:\n            amicable_list.append(x)\n    for x in amicable_list:\n        sum_of_divisors = 0\n        y = 0\n        while y < x:\n            if x % y == 0:\n                sum_of_divisors += y\n            y += 1\n        if x!= sum_of_divisors and x == sum_of_divisors:\n            answer += x\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for x in range(1, limit):\n        y = sum(divisors(x))\n        if x!= y and sum(divisors(y)) == x:\n            amicable_numbers_sum += x + y\n    return amicable_numbers_sum\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a.conjugate()\n    angle = math.atan2(b.imag,b.real) - math.atan2(c.imag,c.real)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    theta = cmath.phase(a+b*1j)\n    return theta\ndef angle_complex_deg(a,b):\n    '''\n    Write a function to get the angle of a complex number in degrees.\n    '''\n    return 180*angle_complex(a,b)/pi\ndef angle_complex_rad(a,b):\n    '''\n    Write a function to get the angle of a complex number in radians.\n    '''\n    return pi*angle_complex(a,b)\ndef solve_quadratic(a,b,c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    d = b*b - 4*a*c\n    return (-b+cmath.sqrt(d))/(2*a)\ndef solve_quadratic_new(a,b,c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    d = b*b - 4*a*c\n    if d < 0:\n        return -1\n    elif d == 0:\n        return -b/(2*a)\n    else:\n        return (-b-cmath.sqrt(d))/(2*a)\ndef sos(n):\n    '''\n    Write a function to get the sum of the squares of the first n numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s = s + i*i\n    return s\ndef sos_new(n):\n    '''\n    Write a function to get the sum of the squares of the first n numbers.\n    '''\n    return n*(n+1)*(2*n+1)/6\ndef divisors(n):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return sum(divisors)\ndef divisors_new(n):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return len(divisors)\ndef divisors_new2(n):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return len(divisors)\ndef divisors_new3(n):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    divisors_set = set(divisors)\n    divisors_list = list(divisors_set)\n    return len(divisors_list)\ndef divisors_new4(n):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    divisors_set = set(divisors)\n    divisors_list = list(divisors_set)\n    return len(divisors_list)\ndef sos_new(n):\n    '''\n    Write a function to get the sum of the squares of the first n numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s = s + i*i\n    return s\ndef sos_new2(n):\n    '''\n    Write a function to get the sum of the squares of the first n numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s = s + i*i\n    return s\ndef get_largest_prime_factor(n):\n    '''\n    Write a function to get the largest prime factor of a number.\n    '''\n    divisor = 2\n    while n!= 1:\n        if n%divisor == 0:\n            n = n/divisor\n            print(divisor)\n        else:\n            divisor = divisor + 1\n    return divisor\ndef get_largest_prime_factor_new(n):\n    '''\n    Write a function to get the largest prime factor of a number.\n    '''\n    divisor = 2\n    while n!= 1:\n        if n%divisor == 0:\n            n = n/divisor\n            print(divisor)\n        else:\n            divisor = divisor + 1\n    return divisor\ndef sos_new(n):\n    '''\n    Write a function to get the sum of the squares of the first n numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s = s + i*i\n    return s\ndef sos_new2(n):\n    '''\n    Write a function to get the sum of the squares of the first n numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s = s + i*i\n    return s\ndef get_smallest_prime_factor(n):\n    '''\n    Write a function to get the smallest prime factor of a number.\n    '''\n    divisor = 2\n    while n!= 1:\n        if n%divisor == 0:\n            n = n/divisor\n            print(divisor)\n        else:\n            divisor = divisor + 1\n    return divisor\ndef get_smallest_prime_factor_new(n):\n    '''\n    Write a function to get the smallest prime factor of a number.\n    '''\n    divisor = 2\n    while n!= 1:\n        if n%divisor == 0:\n            n = n/divisor\n            print(divisor)\n        else:\n            divisor = divisor + 1\n    return divisor\ndef sos_new(n):\n    '''\n    Write a function to get the sum of the squares of the first n numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s = s + i*i\n    return s\ndef sos_new2(n):\n    '''\n    Write a function to get the sum of the squares of the first n numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s = s + i*i\n    return s\ndef get_sum_of_squares_even(n):\n    '''\n    Write a function to get the sum of the squares of the first n even numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if i%2 == 0:\n            s = s + i*i\n    return s\ndef get_sum_of_squares_odd(n):\n    '''\n    Write a function to get the sum of the squares of the first n odd numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if i%2!= 0:\n            s = s + i*i\n    return s\ndef get_sum_of_squares_odd_new(n):\n    '''\n    Write a function to get the sum of the squares of the first n odd numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if i%2!= 0:\n            s = s + i*i\n    return s\ndef get_sum_of_squares_even_new(n):\n    '''\n    Write a function to get the sum of the squares of the first n even numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if i%2 == 0:\n            s = s + i*i\n    return s\ndef get_sum_of_squares_odd_new(n):\n    '''\n    Write a function to get the sum of the squares o"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef rad_complex(a,b):\n    '''\n    Write a function to get the real part of a complex number.\n    '''\n    return cmath.real(complex(a,b))\ndef imag_complex(a,b):\n    '''\n    Write a function to get the imaginary part of a complex number.\n    '''\n    return cmath.imag(complex(a,b))\ndef get_complex(c,angle):\n    '''\n    Write a function to convert a complex number to a complex number with a given angle.\n    '''\n    return complex(c.real,c.imag)*cmath.exp(complex(0,angle))\ndef get_norm(c):\n    '''\n    Write a function to get the absolute value of a complex number.\n    '''\n    return cmath.hypot(c.real,c.imag)\ndef get_phase(c):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    return cmath.phase(c)\ndef mod(a,b):\n    '''\n    Write a function to get the modulus of a complex number.\n    '''\n    return cmath.hypot(a.real,a.imag)\ndef get_angle(c):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(c)\ndef get_divisors(n):\n    '''\n    Write a function to get all divisors of a number.\n    '''\n    return [i for i in range(1,n+1) if n%i==0]\ndef is_prime(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\ndef is_perfect(n):\n    '''\n    Write a function to determine whether a number is perfect or not.\n    '''\n    if n<2:\n        return False\n    else:\n        s=sum(get_divisors(n))\n        return s==n\ndef is_abundant(n):\n    '''\n    Write a function to determine whether a number is abundant or not.\n    '''\n    if n<2:\n        return False\n    else:\n        return sum(get_divisors(n))>n\ndef is_deficient(n):\n    '''\n    Write a function to determine whether a number is deficient or not.\n    '''\n    if n<2:\n        return False\n    else:\n        return sum(get_divisors(n))<n\ndef is_lucky(n):\n    '''\n    Write a function to determine whether a number is lucky or not.\n    '''\n    if n<2:\n        return False\n    else:\n        if sum(get_divisors(n))==n:\n            return True\n        else:\n            return False\ndef get_factor(n):\n    '''\n    Write a function to get all factors of a number.\n    '''\n    return [i for i in range(1,n+1) if n%i==0]\ndef get_all_factors(n):\n    '''\n    Write a function to get all factors of a number.\n    '''\n    return [i for i in range(1,n+1) if n%i==0]\ndef get_power(a,b):\n    '''\n    Write a function to get the power of a number.\n    '''\n    return a**b\ndef get_log(a,b):\n    '''\n    Write a function to get the log of a number.\n    '''\n    return cmath.log(b,a)\ndef get_sqrt(a,b):\n    '''\n    Write a function to get the square root of a number.\n    '''\n    return cmath.sqrt(b)\ndef get_radical(a,b):\n    '''\n    Write a function to get the radical of a number.\n    '''\n    return cmath.sqrt(a)*cmath.sqrt(b)\ndef get_exponent(a,b):\n    '''\n    Write a function to get the exponent of a number.\n    '''\n    return cmath.exp(b)\ndef get_pow(a,b):\n    '''\n    Write a function to get the power of a number.\n    '''\n    return a**b\ndef get_cos(a):\n    '''\n    Write a function to get the cosine of a number.\n    '''\n    return cmath.cos(a)\ndef get_sin(a):\n    '''\n    Write a function to get the sine of a number.\n    '''\n    return cmath.sin(a)\ndef get_tan(a):\n    '''\n    Write a function to get the tangent of a number.\n    '''\n    return cmath.tan(a)\ndef get_cot(a):\n    '''\n    Write a function to get the cotangent of a number.\n    '''\n    return cmath.cot(a)\ndef get_acos(a):\n    '''\n    Write a function to get the arccosine of a number.\n    '''\n    return cmath.acos(a)\ndef get_asin(a):\n    '''\n    Write a function to get the arcsine of a number.\n    '''\n    return cmath.asin(a)\ndef get_atan(a):\n    '''\n    Write a function to get the arctangent of a number.\n    '''\n    return cmath.atan(a)\ndef get_atan2(a,b):\n    '''\n    Write a function to get the atan of a number.\n    '''\n    return cmath.atan2(a,b)\ndef get_pi():\n    '''\n    Write a function to get the pi value.\n    '''\n    return cmath.pi\ndef get_e():\n    '''\n    Write a function to get the e value.\n    '''\n    return cmath.e\ndef get_euler():\n    '''\n    Write a function to get the euler constant.\n    '''\n    return cmath.euler\ndef get_tau():\n    '''\n    Write a function to get the tau value.\n    '''\n    return cmath.tau\ndef get_phi():\n    '''\n    Write a function to get the phi value.\n    '''\n    return cmath.phi\ndef get_lambda():\n    '''\n    Write a function to get the lambda value.\n    '''\n    return cmath.lambda_\ndef get_i():\n    '''\n    Write a function to get the imaginary part of a complex number.\n    '''\n    return cmath.im(complex(0,0))\ndef get_real(c):\n    '''\n    Write a function to get the real part of a complex number.\n    '''\n    return cmath.real(complex(c))\ndef get_imag(c):\n    '''\n    Write a function to get the imaginary part of a complex number.\n    '''\n    return cmath.imag(complex(c))\ndef get_mod(c):\n    '''\n    Write a function to get the modulus of a complex number.\n    '''\n    return cmath.hypot(c.real,c.imag)\ndef get_phase(c):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    return cmath.phase(c)\ndef get_polar(c):\n    '''\n    Write a function to get the polar form of a complex number.\n    '''\n    return cmath.polar(c)\ndef get_rect(c):\n    '''\n    Write a function to get the rectangular form of a complex number.\n    '''\n    return cmath.rect(c)\ndef get_conjugate(c):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    return cmath.conjugate(c)\ndef get_neg(c):\n    '''\n    Write a function t"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = cmath.phase(complex(a,b))\n    return c\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n    \ndef add_complex(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    return complex(a.real+b.real,a.imag+b.imag)\n    \ndef subtract_complex(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    return complex(a.real-b.real,a.imag-b.imag)\n    \ndef multiply_complex(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    return complex(a.real*b.real-a.imag*b.imag,a.imag*b.real+a.real*b.imag)\n    \ndef divide_complex(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    return complex(a.real*b.real+a.imag*b.imag,a.imag*b.real-a.real*b.imag)\n    \na = complex(3,5)\nb = complex(4,2)\nc = complex(0,6)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(\"Angle of \" + str(a) + \" + j\" + str(b) + \" is: \" + str(cmath.atan(b/a)) + \" rad\")\n    return\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n    \ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c=a+b*1j\n    angle_radians=cmath.phase(c)\n    angle_degrees=angle_radians/math.pi*180\n    return angle_degrees\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    if not string: \n        return 0\n    \n    zeros = 1\n    ones = 0\n    \n    zeros_start = 0\n    ones_start = 0\n    \n    zeros_max = 0\n    ones_max = 0\n    \n    for i in xrange(1, len(string)):\n        \n        if string[i] == '0':\n            zeros += 1\n            zeros_max = max(zeros_max, zeros - ones)\n            ones = 0\n            zeros_start = i\n        else:\n            ones += 1\n            ones_max = max(ones_max, zeros - ones)\n            zeros = 0\n            ones_start = i\n    \n    zeros_max = max(zeros_max, zeros - ones)\n    ones_max = max(ones_max, zeros - ones)\n    \n    return max(zeros_max, ones_max)\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    total_zeros = 0\n    total_ones = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    result = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            result = max(result, string[i+1:].count('0'))\n        else:\n            result = max(result, string[i+1:].count('1'))\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string: return 0\n    if string == '0': return -1\n    if string == '1': return float(\"inf\")\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    length = len(string)\n    count_0 = 0\n    count_1 = 0\n    \n    for i in range(length):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n    return count_1 - count_0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_1 = 0\n    count_0 = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count_1 += 1\n        else:\n            count_0 += 1\n        if count_1 - count_0 > 0:\n            return count_1 - count_0\n    return count_1 - count_0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    zeros, ones = 0, 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    \n    max_length = 0\n    length = len(string)\n    \n    for i in range(length):\n        one_count = 0\n        zero_count = 0\n        \n        for j in range(i, length):\n            if string[j] == '1':\n                one_count += 1\n            else:\n                zero_count += 1\n            \n            max_length = max(max_length, abs(one_count - zero_count))\n    \n    return max_lengt"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    # 2d array of the ones and zeros count\n    ones = []\n    for i in range(len(string)):\n        ones.append([0] * 2)\n    \n    # print ones\n    for i in range(len(string)):\n        if string[i] == '1':\n            ones[i][0] = 1\n            ones[i][1] = 0\n        else:\n            ones[i][0] = 0\n            ones[i][1] = 1\n    # print ones\n    ans = -1\n    for i in range(1, len(string)):\n        for j in range(i):\n            if ones[i][1] - ones[j][1] > ans:\n                ans = ones[i][1] - ones[j][1]\n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    num_0s = []\n    num_1s = []\n    if string[0] == '0':\n        num_0s.append(0)\n    else:\n        num_1s.append(0)\n    for i in range(len(string)):\n        if string[i] == '0':\n            num_0s.append(i)\n        else:\n            num_1s.append(i)\n    max_diff = 0\n    for i in range(len(num_0s)-1):\n        for j in range(i+1,len(num_1s)):\n            max_diff = max(max_diff,num_1s[j]-num_1s[i]+1)\n    for i in range(len(num_1s)-1):\n        for j in range(i+1,len(num_0s)):\n            max_diff = max(max_diff,num_0s[j]-num_0s[i]+1)\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    def gcd(a,b):\n        '''\n        This function takes in two numbers and computes their greatest common divisor.\n        '''\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n    \n    def lcm(a,b):\n        '''\n        This function takes in two numbers and computes their least common multiple.\n        '''\n        if b==0:\n            return a\n        else:\n            return lcm(b,a/gcd(a,b))\n    \n    if b>a:\n        return lcm(a,b)\n    else:\n        return lcm(b,a)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divs = [1]\n    for i in range(2,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = set(a) & set(b)\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors=[]\n    temp=max(a,b)\n    i=1\n    while i<=temp:\n        if a%i==0 and b%i==0:\n            divisors.append(i)\n        i=i+1\n    #print divisors\n    if len(divisors)==0:\n        return 'No common divisors found'\n    else:\n        s=0\n        for i in divisors:\n            s=s+i\n        #print s\n        return s\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lst = []\n    divisors = []\n    for i in range(1,int((b/2)+1)):\n        if b%i == 0:\n            lst.append(i)\n    for j in lst:\n        if j > 1:\n            divisors.append(j)\n    divisors = list(set(divisors))\n    return sum(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (a>b):\n        num=a\n        den=b\n    else:\n        num=b\n        den=a\n    rem=1\n    n=2\n    while(n<=num):\n        if (num%n==0 and den%n==0):\n            rem=rem*n\n        n=n+1\n    return rem\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum(common_divisors(a,b))\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    i = 1\n    while i <= min(a,b):\n        if a%i == 0 and b%i == 0:\n            i+=1\n        else:\n            i+=1\n    return a*b/i\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divs=0\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            divs+=i\n    return divs\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    l=[]\n    for i in range(1, min(a,b)+1):\n        if a%i==0 and b%i==0:\n            l.append(i)\n    return sum(l)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x > 0 and y > 0:\n        return x * y\n    elif x < 0 and y > 0:\n        return -(abs(x) * y)\n    elif x < 0 and y < 0:\n        return -(abs(x) * y)\n    else:\n        return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # if type(x) is not int or type(y) is not int:\n    #     return None\n    # else:\n    #     return x * y\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # result = x * y\n    # return result\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if len(str) < n:\n        return False\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    count=0\n    for i in str:\n        if len(i) > n:\n            count+=1\n    print count\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    output = []\n    for word in str:\n        if len(word) > n:\n            output.append(word)\n    return output\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    print(long_words)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    ans = []\n    for word in str:\n        if len(word) > n:\n            ans.append(word)\n    return ans\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_squares = [\n        [[8, 1, 6], [3, 5, 7], [4, 9, 2]],\n        [[6, 1, 8], [7, 5, 3], [2, 9, 4]],\n        [[4, 9, 2], [3, 5, 7], [8, 1, 6]],\n        [[2, 9, 4], [7, 5, 3], [6, 1, 8]],\n        [[8, 3, 4], [1, 5, 9], [6, 7, 2]],\n        [[4, 3, 8], [9, 5, 1], [2, 7, 6]],\n        [[6, 7, 2], [1, 5, 9], [8, 3, 4]],\n        [[2, 7, 6], [9, 5, 1], [4, 3, 8]],\n    ]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows, cols = len(my_matrix), len(my_matrix[0])\n    \n    # Check if each row sums to the same value\n    row_sum = [0] * rows\n    for row in my_matrix:\n        for i in range(len(row)):\n            row_sum[i] += row[i]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Method #1:\n    # matrix = map(map,my_matrix)\n    # for row in zip(*matrix):\n    #     if sum(row)!= sum(my_matrix[0]):\n    #         return False\n    # return True\n    # Method #2:\n    # square_sum = []\n    # for i in range(len(my_matrix)):\n    #     square_sum.append(sum(my_matrix[i]))\n    # if sum(square_sum)!= sum(my_matrix[0]):\n    #     return False\n    # return True\n    # Method #3:\n    # if sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))!= sum(my_matrix[0]):\n    #     return False\n    # return True\n    # Method #4:\n    # for i in range(len(my_matrix)):\n    #     if not my_matrix[i][i] == sum(my_matrix[i]):\n    #         return False\n    # return True\n    # Method #5:\n    # if sum(my_matrix[0])!= sum(my_matrix[i][i] for i in range(len(my_matrix))):\n    #     return False\n    # if sum(my_matrix[0])!= sum(my_matrix[-1][i] for i in range(len(my_matrix) - 1, -1, -1)):\n    #     return False\n    # if sum(my_matrix[-1])!= sum(my_matrix[i][-1] for i in range(1, len(my_matrix))):\n    #     return False\n    # return True\n    # Method #6:\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    rows, cols = (1,1) if len(my_matrix) < 3 else (2,2) if len(my_matrix) < 5 else (3,3)\n    for i in range(rows):\n        if sum(my_matrix[i])!= sum(my_matrix[0][j] for j in range(cols)):\n            return False\n        if sum(my_matrix[i][-1])!= sum(my_matrix[j][-1] for j in range(1, len(my_matrix)-1)):\n            return False\n        if sum(my_matrix[-1][-1])!= sum(my_matrix[-1][j] for j in range(1, len(my_matrix[0])-1)):\n            return False\n    return True\n    # Method #7:\n    # magic_squares = 0\n    # for i in range(1, int(math.sqrt(len(my_matrix)))+1):\n    #     magic_squares += i**2\n    # if magic_squares!= sum(sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))):\n    #     return False\n    # if magic_squares!= sum(sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0])-1, -1, -1)):\n    #     return False\n    # if magic_squares!= sum(sum(my_matrix[i][j] for i in range(len(my_matrix)-1, -1, -1)) for j in range(len(my_matrix[0]))):\n    #     return False\n    # return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sum = [0] * len(my_matrix)\n    col_sum = [0] * len(my_matrix)\n    left_sum = [0] * len(my_matrix)\n    for i in range(len(my_matrix)):\n        row_sum[i] = sum(my_matrix[i])\n        col_sum[i] = sum([row[i] for row in my_matrix])\n        left_sum[i] = sum([my_matrix[j][i] for j in range(len(my_matrix))])\n    if max(row_sum) == sum(my_matrix[i]) and max(col_sum) == sum(row[i] for row in my_matrix) and max(left_sum) == sum([my_matrix[i][j] for j in range(len(my_matrix)) for i in range(len(my_matrix))]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    magic_sum = 0\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[i])):\n            if my_matrix[i][j]!= magic_sum:\n                return False\n            magic_sum += my_matrix[i][j]\n    \n    if magic_sum!= len(my_matrix) * len(my_matrix):\n        return False\n    \n    magic_sum = 0\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[i])):\n            if my_matrix[j][i]!= magic_sum:\n                return False\n            magic_sum += my_matrix[j][i]\n    \n    if magic_sum!= len(my_matrix) * len(my_matrix):\n        return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # row sum should equal col sum\n    for i in range(len(my_matrix)):\n        sum_row = 0\n        for j in range(len(my_matrix)):\n            sum_row += my_matrix[i][j]\n        if sum_row!= sum_row:\n            return False\n    \n    # col sum should equal row sum\n    for i in range(len(my_matrix)):\n        sum_col = 0\n        for j in range(len(my_matrix)):\n            sum_col += my_matrix[j][i]\n        if sum_col!= sum_col:\n            return False\n    \n    # diagonal sums should equal each other\n    diag_sum = 0\n    for i in range(len(my_matrix)):\n        diag_sum += my_matrix[i][i]\n    if diag_sum!= diag_sum:\n        return False\n    \n    # if diag_sum is odd, then the row and column sums should be the same\n    diag_sum = 0\n    for i in range(len(my_matrix)):\n        diag_sum += my_matrix[i][-1-i]\n    if diag_sum!= diag_sum:\n        return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check size of the matrix\n    if len(my_matrix) == 0:\n        return False\n    \n    #check whether the matrix is a square\n    # for each cell\n    for i in range(len(my_matrix)):\n        #check whether the row is sum of square\n        if sum([my_matrix[i][j] for j in range(len(my_matrix[i]))])!= 0:\n            return False\n        #check whether the column is sum of square\n        if sum([my_matrix[j][i] for j in range(len(my_matrix))])!= 0:\n            return False\n    \n    #check whether the sum of diagonal is equal to sum of all cells\n    if sum([my_matrix[i][i] for i in range(len(my_matrix))])!= 0:\n        return False\n    \n    #check whether the sum of diagonal is equal to sum of all cells\n    if sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])!= 0:\n        return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    squares = get_magic_squares(my_matrix)\n    return squares!= []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # create a sum list to store the sum of each row, column and diagonal\n    row_sum = [0] * len(my_matrix)\n    col_sum = [0] * len(my_matrix)\n    diag_sum = 0\n    # calculate the sum of each row and store in a list\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            row_sum[i] += my_matrix[i][j]\n    # calculate the sum of each column and store in a list\n    for j in range(len(my_matrix)):\n        for i in range(len(my_matrix)):\n            col_sum[j] += my_matrix[i][j]\n    # calculate the sum of each diagonal and store in a list\n    for i in range(len(my_matrix)):\n        diag_sum += my_matrix[i][i]\n    # check if the sum is equal to each other, if not return False\n    for i in range(len(my_matrix)):\n        if row_sum[i]!= col_sum[i]!= diag_sum:\n            return False\n    # if no error found, return True\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def is_magic(my_matrix, N):\n        '''\n        Given a matrix of n rows and m columns, returns True if the matrix is a magic square and False if not.\n        '''\n        def get_adjacent(pos):\n            row = pos[0]\n            col = pos[1]\n            adjacents = [(row-1, col-1), (row-1, col), (row-1, col+1),\n                         (row, col-1), (row, col+1),\n                         (row+1, col-1), (row+1, col), (row+1, col+1)]\n            return adjacents\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    num_freq = defaultdict(int)\n    for num in nums:\n        num_freq[num] += 1\n    max_num = nums[0]\n    max_freq = 0\n    for num, freq in num_freq.items():\n        if freq > max_freq:\n            max_num = num\n            max_freq = freq\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    max_freq = 0\n    for num in nums:\n        freq = nums.count(num)\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    res = nums[0]\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                res = nums[i-1]\n                max_count = count\n            count = 1\n    if count > max_count:\n        res = nums[-1]\n        max_count = count\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for i in nums:\n        freq[i] += 1\n    max_freq = max(freq.values())\n    return max_freq, [k for k, v in freq.items() if v == max_freq]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_item = None\n    max_count = 0\n    for i in nums:\n        c = nums.count(i)\n        if c > max_count:\n            max_count = c\n            max_item = i\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_freq_item = None\n    for i in nums:\n        freq = nums.count(i)\n        if freq > max_freq:\n            max_freq = freq\n            max_freq_item = i\n    return max_freq_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    return max(set(nums), key = nums.count)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for num in nums:\n        dict[num] += 1\n    #print(dict)\n    max_item = -1\n    max_freq = -1\n    for item in dict:\n        if dict[item] > max_freq:\n            max_freq = dict[item]\n            max_item = item\n    return max_item, max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    my_dict = {}\n    max_frequency = 0\n    for x in nums:\n        if x in my_dict:\n            my_dict[x] += 1\n        else:\n            my_dict[x] = 1\n        if my_dict[x] > max_frequency:\n            max_frequency = my_dict[x]\n    max_item = []\n    for x, y in my_dict.items():\n        if y == max_frequency:\n            max_item.append(x)\n    print max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(lambda:0)\n    for num in nums:\n        d[num] += 1\n    return max(d.items(),key = lambda x:x[1])[0]\ndef two_sum(nums,target):\n    '''\n    Given an array of integers and an integer target, return indices of the two numbers such that they add up to target.\n    You may assume that each input would have exactly one solution.\n    '''\n    d = defaultdict(lambda:0)\n    for i,num in enumerate(nums):\n        if target-num in d:\n            return i,d[target-num]\n        else:\n            d[num] = i\n    return None\ndef is_anagram(str1,str2):\n    '''\n    Two strings are anagrams if they can be the same when the letters are replaced for any pair of letters.\n    Write a function that takes in two strings and returns true if they are anagrams, false if they are not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    s1 = sorted(str1)\n    s2 = sorted(str2)\n    return s1 == s2\ndef is_palindrome(str):\n    '''\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n    '''\n    s = str.lower()\n    l,r = 0,len(s)-1\n    while l < r:\n        if not s[l].isalnum():\n            l += 1\n        elif not s[r].isalnum():\n            r -= 1\n        else:\n            if s[l]!= s[r]:\n                return False\n            l += 1\n            r -= 1\n    return True\ndef is_subsequence(s,t):\n    '''\n    Given two strings, check if one is a subsequence of the other.\n    '''\n    if len(s) > len(t):\n        return False\n    else:\n        for i in range(len(t)):\n            if t[i] == s[0]:\n                s = s[1:]\n                if s == '':\n                    return True\n            else:\n                return False\ndef add_binary(a,b):\n    '''\n    Given two binary strings a and b, return their sum as a binary string.\n    '''\n    res = []\n    carry = 0\n    for i in range(max(len(a),len(b))):\n        if i < len(a):\n            a_bit = a[len(a)-i-1]\n        else:\n            a_bit = 0\n        if i < len(b):\n            b_bit = b[len(b)-i-1]\n        else:\n            b_bit = 0\n        bit = a_bit + b_bit + carry\n        res.append(bit%2)\n        carry = int(bit/2)\n    if carry == 1:\n        res.append(carry)\n    return ''.join(map(str,res[::-1]))\ndef is_subset(s1,s2):\n    '''\n    Given two strings, check if one is a subset of the other.\n    '''\n    if s1 == '':\n        return True\n    for i in range(len(s2)):\n        if s2[i] == s1[0]:\n            s2 = s2[i+1:]\n            if s2 == '':\n                return True\n    return False\ndef largest_plus_sign(nums):\n    '''\n    Given a list of integers, find the first missing positive integer in linear time and constant space.\n    If there is no missing positive integer return 1.\n    '''\n    n = len(nums)\n    for i in range(n):\n        while nums[i] > 0 and nums[i] <= n and nums[nums[i]-1]!= nums[i]:\n            temp = nums[i]\n            nums[i] = nums[temp-1]\n            nums[temp-1] = temp\n    for i in range(n):\n        if nums[i]!= i+1:\n            return i+1\n    return n+1\ndef is_anonymous(s):\n    '''\n    Given a string, return true if it is a valid variable name in JavaScript.\n    A variable name must start with a letter or underscore and must contain only letters, numbers, and underscores.\n    '''\n    if len(s) > 15:\n        return False\n    if s == '':\n        return False\n    for i in s:\n        if not i.isalnum() and i!= '_':\n            return False\n    return True\ndef find_sum_of_two_arrays(arr1,arr2,target):\n    '''\n    Given two arrays of distinct integers and a target number, return a pair of array indices whose values sum to the target.\n    You may assume that each input would have exactly one solution.\n    '''\n    d = defaultdict(lambda:0)\n    for i in arr1:\n        d[i] += 1\n    for i in arr2:\n        if target-i in d:\n            return arr1.index(i),arr2.index(target-i)\n    return None\ndef find_duplicates(nums):\n    '''\n    Given an array of integers, 1 <= a[i] <= n (n = size of array), some elements appear twice and others appear once.\n    Find all the elements that appear twice in this array.\n    Could you do it without extra space and in O(n) runtime?\n    '''\n    d = defaultdict(lambda:0)\n    for i in nums:\n        d[i] += 1\n    return [key for key in d if d[key]>1]\ndef three_sum(nums):\n    '''\n    Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n    Note: The solution set must not contain duplicate triplets.\n    '''\n    if len(nums) < 3:\n        return []\n    d = defaultdict(lambda:0)\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            d[nums[i]+nums[j]] += 1\n    res = []\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            target = -1*(nums[i]+nums[j])\n            if target in d:\n                res.append([nums[i],nums[j],target])\n    return res\ndef three_sum_closest(nums,target):\n    '''\n    Given an array S of n integers and an integer target, find three integers in S such that the sum is closest to target. Return the sum of the three integers.\n    You may assume that each input would have exactly one solution.\n    '''\n    d = defaultdict(lambda:0)\n    for i in nums:\n        d[i] += 1\n    res = []\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            target1 = target - nums[i] - nums[j]\n            if target1 in d:\n                res.append([nums[i],nums[j],target1])\n    if res == []:\n        return None\n    res = sorted(res,key = lambda x:abs(target-x[2]))\n    return sum(res[0])\ndef valid_parentheses(s):\n    '''\n    Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n    The brackets must close in the correct order, \"()\" and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not.\n    '''\n    stack = []\n    for i in s:\n        if i == '(' or i == '[' or i == '{':\n            stack.append(i)\n        elif i == ')' or i == ']' or i == '}':\n            if stack == []:\n                return False\n            top = stack.pop()\n            if top == '(' an"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    lst = []\n    for i in str1:\n        if i in vowels:\n            lst.append(i)\n    lst.reverse()\n    lst = ''.join(lst)\n    return lst\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    result = \"\"\n    for i in str1:\n        if i in vowels:\n            result = i + result\n        else:\n            result = result + i\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = ['a','e','i','o','u','y']\n    string = list(str1)\n    \n    for i in range(len(string)):\n        if string[i] not in vowels:\n            string[i] = string[i]\n        elif string[i] in vowels:\n            string[i] = string[i].replace(string[i],'',1)\n    \n    string = \"\".join(string)\n    \n    return string\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for ch in str1:\n        if ch in vowels:\n            new_str = new_str + ch\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] in vowels:\n            new_str = new_str + str1[i]\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = list(str1)\n    vowel_list = []\n    for index, value in enumerate(str1):\n        if value in vowels:\n            vowel_list.append(value)\n            str1[index] = vowel_list.pop()\n    str1 = \"\".join(str1)\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return ''.join([char for char in str1 if char not in vowels][::-1])\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.replace('y', 'Y')\n    return str1[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    str1 = str1.lower()\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            str2 = str2 + str1[i]\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    list1 = []\n    list2 = []\n    for i in str1:\n        if i.lower() in vowels:\n            list1.append(i)\n        else:\n            list2.append(i)\n    list2.reverse()\n    list1.extend(list2)\n    return ''.join(list1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # string = str1\n    list1 = []\n    list2 = []\n    for i in str1:\n        if i.lower() not in 'aeiou':\n            list1.append(i)\n        else:\n            list2.append(i)\n    list1.reverse()\n    list2.reverse()\n    list3 = list1 + list2\n    str1 = ''\n    for i in list3:\n        str1 += i\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i)\n    return string\n    \ndef matrix_generator(n):\n    '''\n    Write a function that takes in a positive integer n and generates an nxn matrix,\n    which is a sample of the n-th power of the identity matrix. The function should print\n    the matrix to the screen.\n    '''\n    n = int(n)\n    if n >= 1:\n        for i in range(n):\n            matrix = []\n            for j in range(n):\n                matrix.append(1)\n            print(matrix)\n    else:\n        print('The number of rows must be greater than zero.')\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate an nxn matrix 90 degrees (clockwise).\n    '''\n    if len(matrix) == 0:\n        return\n    if len(matrix)!= len(matrix[0]):\n        print('Not a square matrix')\n    else:\n        length = len(matrix)\n        if length % 2!= 0:\n            half = length // 2\n            for i in range(half):\n                for j in range(half):\n                    temp = matrix[i][j]\n                    matrix[i][j] = matrix[length - j - 1][i]\n                    matrix[length - j - 1][i] = matrix[length - i - 1][length - j - 1]\n                    matrix[length - i - 1][length - j - 1] = matrix[j][length - i - 1]\n                    matrix[j][length - i - 1] = temp\n        else:\n            for i in range(length // 2):\n                for j in range(length // 2):\n                    temp = matrix[i][j]\n                    matrix[i][j] = matrix[i][length - j - 1]\n                    matrix[i][length - j - 1] = matrix[length - i - 1][length - j - 1]\n                    matrix[length - i - 1][length - j - 1] = matrix[length - j - 1][length - i - 1]\n                    matrix[length - j - 1][length - i - 1] = temp\n        \ndef remove_adjacent(list1):\n    '''\n    Write a function to remove adjacent duplicates in a list.\n    '''\n    if len(list1) == 0:\n        return\n    else:\n        length = len(list1)\n        for i in range(length - 1):\n            if list1[i] == list1[i + 1]:\n                list1.pop(i + 1)\n            else:\n                pass\n        return list1\n    \ndef remove_adjacent_duplicates(list1):\n    '''\n    Write a function to remove adjacent duplicates in a list.\n    '''\n    if len(list1) == 0:\n        return\n    else:\n        length = len(list1)\n        for i in range(length - 1):\n            if list1[i] == list1[i + 1]:\n                list1.pop(i + 1)\n            else:\n                pass\n        return list1\n    \ndef all_equal(list1):\n    '''\n    Write a function to check if all the elements in a list are equal.\n    '''\n    if len(list1) == 0:\n        return\n    else:\n        for i in list1:\n            if list1.count(i) > 1:\n                return False\n        return True\n    \ndef how_many_larger(list1, value):\n    '''\n    Write a function to return the number of elements in a list that are larger than the given value.\n    '''\n    if len(list1) == 0:\n        return\n    else:\n        count = 0\n        for i in list1:\n            if i > value:\n                count += 1\n        return count\n    \ndef how_many_larger_duplicates(list1, value):\n    '''\n    Write a function to return the number of elements in a list that are larger than the given value.\n    '''\n    if len(list1) == 0:\n        return\n    else:\n        count = 0\n        for i in list1:\n            if i > value:\n                count += 1\n        return count\n    \ndef is_sorted(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    if len(list1) == 0:\n        return\n    elif len(list1) == 1:\n        return True\n    else:\n        for i in range(len(list1) - 1):\n            if list1[i] > list1[i + 1]:\n                return False\n        return True\n    \ndef is_sorted_reverse(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    if len(list1) == 0:\n        return\n    elif len(list1) == 1:\n        return True\n    else:\n        for i in range(len(list1) - 1):\n            if list1[i] < list1[i + 1]:\n                return False\n        return True\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string) == 0:\n        return\n    elif len(string) == 1:\n        return True\n    else:\n        for i in range(len(string) // 2):\n            if string[i]!= string[len(string) - i - 1]:\n                return False\n        return True\n    \ndef is_palindrome_reverse(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string) == 0:\n        return\n    elif len(string) == 1:\n        return True\n    else:\n        for i in range(len(string) // 2):\n            if string[i]!= string[len(string) - i - 1]:\n                return False\n        return True\n    \ndef is_palindrome_duplicates(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string) == 0:\n        return\n    elif len(string) == 1:\n        return True\n    else:\n        for i in range(len(string) // 2):\n            if string[i]!= string[len(string) - i - 1]:\n                return False\n        return True\n    \ndef is_palindrome_duplicates_reverse(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string) == 0:\n        return\n    elif len(string) == 1:\n        return True\n    else:\n        for i in range(len(string) // 2):\n            if string[i]!= string[len(string) - i - 1]:\n                return False\n        return True\n    \ndef is_perfect_square(n):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        root = n ** 0.5\n        if round(root) == root:\n            return True\n        else:\n            return False\n    \ndef is_perfect_square_duplicates(n):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        root = n ** 0.5\n        if round(root) == root:\n            return True\n        else:\n            return False\n    \ndef is_perfect_square_duplicates_reverse(n):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        root = n ** 0.5\n        if root ** 2 == n:\n            return True\n        else:\n            return False\n    \ndef find_smallest_sum(list1):\n    '''\n    Write a function to find the smallest sum of elements in a list.\n    '''"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for item in tup1:\n        tup_str += str(item)\n    return tup_str\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(str(x) for x in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''.join(tup1)\n    return tup_string\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1 = ''\n    for element in tup1:\n        string1 += str(element) +''\n    return string1[:-1]\n    \ndef tup_list(string1):\n    '''\n    Write a function to convert a string to a tuple.\n    '''\n    new_string1 = string1.split(' ')\n    return tuple(new_string1)\n    \ndef word_count(list1):\n    '''\n    Write a function to count the number of times a word appears in a string.\n    '''\n    count = 0\n    for element in list1:\n        if element in list1:\n            count += 1\n    return count\n    \ndef word_count2(string1):\n    '''\n    Write a function to count the number of times a word appears in a string.\n    '''\n    new_string1 = string1.split(' ')\n    count = 0\n    for element in new_string1:\n        if element in new_string1:\n            count += 1\n    return count\n    \ndef reverse_string(string1):\n    '''\n    Write a function to reverse a string.\n    '''\n    new_string1 = string1[::-1]\n    return new_string1\n    \ndef reverse_string2(string1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string1[::-1]\n    \ndef is_palindrome(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    new_string1 = string1.split(' ')\n    string2 = ''\n    for element in new_string1:\n        string2 += element[::-1]\n    return string1 == string2\n    \ndef is_palindrome2(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    elif string1[0]!= string1[-1]:\n        return False\n    else:\n        return is_palindrome(string1[1:-1])\n    \ndef is_palindrome3(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        if string1[0]!= string1[-1]:\n            return False\n        else:\n            return is_palindrome(string1[1:-1])\n    \ndef is_palindrome4(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome5(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        if string1[0]!= string1[-1]:\n            return False\n        else:\n            return is_palindrome(string1[1:-1])\n    \ndef is_palindrome6(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome7(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome8(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome9(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome10(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome11(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome12(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome13(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome14(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome15(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome16(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome17(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    else:\n        return string1[0] == string1[-1] and is_palindrome(string1[1:-1])\n    \ndef is_palindrome18(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string1) == 0 or len(string1) == 1:\n        return True\n    els"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = str(tup1)\n    print(tup2)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for x in tup1:\n        string += str(x) + ', '\n    return string[:-2]\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert to string\n    return str(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_num = 0\n    for num in nums:\n        if num < 0:\n            sum_num += num\n    return sum_num\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for n in nums:\n        if n < 0:\n            total = total + n\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    else:\n        return -1 * sum(nums)\n    \ndef sum_zeronum(nums):\n    '''\n    Write a function to calculate the sum of all positive numbers in a given list of numbers\n    \n    '''\n    if not nums:\n        return 0\n    else:\n        return sum(nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # sums = 0\n    # for num in nums:\n    #     sums = sums + num\n    # return sums\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif nums[0] < 0:\n        return sum_negativenum(nums[1:])\n    else:\n        return nums[0] + sum_negativenum(nums[1:])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total = total + num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n    \n    \ndef test_sum_negativenum():\n    assert sum_negativenum([-1,2,3,4,-5]) == -9\n    assert sum_negativenum([1,2,3,4,5]) == -9\n    assert sum_negativenum([]) == 0\n    assert sum_negativenum([-1,0,1,2,3,4]) == -5\n    \ntest_sum_negativenum()\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n < 0)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1) \n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n**2 + (n-1)**2\n    else:\n        return n**2 + (n-1)**2 + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n**2)*(2*n + 1)/2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    nums = []\n    for i in range(1, n + 1):\n        nums.append(int((i * (i + 1)) / 2))\n    return nums[n - 1]\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 1\n    j = 0\n    while i < n:\n        j += i * 2\n        i += 1\n    return j\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return hexagonal_num(n / 2) * 2 + 1\n    else:\n        return hexagonal_num(n / 2) * 2 + 1 + hexagonal_num((n - 1) / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))//2\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    zeroes = 0\n    nonzeroes = 0\n    for i in xrange(n):\n        if nums[i] == 0:\n            zeroes += 1\n        else:\n            nonzeroes += 1\n    return float(zeroes)/float(nonzeroes)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = 0\n    num_one = 0\n    for num in nums:\n        if num == 0:\n            num_zero += 1\n        else:\n            num_one += 1\n    return num_zero / num_one\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        if nums[0] == 0:\n            return 1\n        else:\n            return 0\n    else:\n        n = len(nums)\n        first = 0\n        second = 0\n        if nums[0] == 0:\n            first += 1\n        else:\n            second += 1\n        for i in range(1,n):\n            if nums[i] == 0:\n                first += 1\n            else:\n                second += 1\n        return float(first)/float(second)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/float(len(nums))\ndef permutations(l):\n    '''\n    Write a function that takes a list and returns a list of all permutations of that list.\n    '''\n    if len(l) == 1:\n        return l\n    else:\n        first_element = l[0]\n        rest = l[1:]\n        permutations_of_first_element = permutations(rest)\n        permutations_of_rest = permutations(rest)\n        return [p + [first_element] for p in permutations_of_first_element] + permutations_of_rest\ndef permute(s):\n    '''\n    Write a function that takes a string and returns a list of all permutations of that string.\n    '''\n    if len(s) == 1:\n        return [s]\n    else:\n        first_element = s[0]\n        rest = s[1:]\n        permutations_of_first_element = permute(rest)\n        permutations_of_rest = permute(rest)\n        return [p + [first_element] for p in permutations_of_first_element] + permutations_of_rest\ndef number_of_ways_to_climb_stairs(stairs):\n    '''\n    You are climbing a stair case. It takes n steps to reach to the top.\n    Each time you can either climb 1 stair or 2 stairs. In how many distinct ways can you climb to the top?\n    '''\n    if stairs == 1:\n        return 1\n    elif stairs == 2:\n        return 2\n    else:\n        num_stairs_1 = 1\n        num_stairs_2 = 2\n        for i in range(3, stairs+1):\n            num_stairs_1, num_stairs_2 = num_stairs_2, num_stairs_1 + num_stairs_2\n        return num_stairs_2\ndef is_palindrome(s):\n    '''\n    Write a function to check if a linked list is a palindrome.\n    '''\n    # for i in range(len(s)):\n    #     if s[i]!= s[len(s)-i-1]:\n    #         return False\n    # return True\n    fast = slow = s\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    node = None\n    while slow:\n        tmp = slow.next\n        slow.next = node\n        node = slow\n        slow = tmp\n    while node:\n        if node.val!= node.next.val:\n            return False\n        node = node.next\n    return True\ndef num_to_binary(n):\n    '''\n    Write a function that takes a non-negative integer and returns the binary representation of that integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%2 + 10*num_to_binary(n/2)\ndef binary_to_num(binary):\n    '''\n    Write a function that takes a binary representation of a non-negative integer and returns the integer.\n    '''\n    if binary == 0:\n        return 0\n    else:\n        return binary%2 + 2*(binary/2)\ndef split_string_in_half(s):\n    '''\n    Write a function that takes a string and returns a list containing two strings - the first half and the second half of the original string.\n    '''\n    mid = len(s)/2\n    return [s[:mid], s[mid:]]\ndef longest_palindrome(s):\n    '''\n    Write a function that takes a string s and returns the longest palindrome that can be obtained by deleting characters from s.\n    '''\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return 2\n        else:\n            return 1\n    else:\n        longest = 0\n        for i in range(len(s)):\n            left = i\n            right = i\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            left += 1\n            right -= 1\n            longest = max(longest, right - left - 1)\n            if right == len(s):\n                break\n        return longest\ndef word_count(s):\n    '''\n    Write a function that takes a string and counts the number of times each word occurs in that string.\n    The word count should be case insensitive.\n    '''\n    # first make the string lowercase\n    s = s.lower()\n    # now we will use a dictionary to store the words\n    d = {}\n    # to get the words in the string\n    words = s.split()\n    # for each word in the string\n    for word in words:\n        # if the word is already in the dictionary\n        if word in d:\n            # increment the count of that word\n            d[word] += 1\n        # if not in the dictionary\n        else:\n            # add the word and set the count to 1\n            d[word] = 1\n    return d\ndef find_letter_case_string_permutations(s):\n    '''\n    Write a function that takes a string s and returns a list of all the possible permutations of that string where the characters are \n    both lowercase and uppercase.\n    '''\n    permutations = []\n    permutations.append(s)\n    for i in range(len(s)):\n        if s[i].isupper():\n            permutations += [s[:i] + s[i].lower() + s[i+1:]]\n            permutations += [s[:i] + s[i].upper() + s[i+1:]]\n    return permutations\ndef is_square(n):\n    '''\n    Write a function that takes a number and returns True if it is a perfect square and False otherwise.\n    '''\n    return n**0.5 == int(n**0.5)\ndef all_perfect_squares(n):\n    '''\n    Write a function that takes a number n and returns a list of all the perfect squares less than n.\n    '''\n    perfect_squares = []\n    for i in range(1, n):\n        if is_square(i):\n            perfect_squares.append(i)\n    return perfect_squares\ndef get_primes(n):\n    '''\n    Write a function that takes a number n and returns a list of all the prime numbers less than n.\n    '''\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\ndef multiply_matrix(a, b):\n    '''\n    Write a function that takes two matrices and returns the product of the two matrices.\n    '''\n    # check that the dimensions are correct\n    if len(a)!= len(b) or len(a[0])!= len(b[0]):\n        return\n    n = len(a)\n    m = len(b[0])\n    p = len(a[0])\n    result = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            for k in range(p):\n                result[i][j] += a[i][k] * b[k][j]\n    return result\ndef rotate_matrix_in_place(m):\n    '''\n    Write a function that takes a 2d matrix and returns that matrix after it has been rotated 90 degrees clockwise.\n    '''\n    if len(m) == 0 or len(m)!= len(m[0]):\n        return\n    n = len(m)\n    for i in range(n/2):\n        for j in range(n/2):\n            temp = m[i][j]\n            m[i][j] = m[n-j-1][i]\n            m[n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n    return float(zero_count) / len(nums)\ndef sum_of_squares(nums):\n    '''\n    Given an array of integers, return the sum of square of each number.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i*i\n    return sum\ndef highest_product(nums):\n    '''\n    Given an array of integers, find the highest product of three integers in the array.\n    '''\n    nums.sort()\n    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])\ndef array_diff(a, b):\n    '''\n    Given two arrays, return the difference between the maximum and minimum of each array.\n    '''\n    new_array = []\n    for i in range(len(a)):\n        new_array.append(a[i]-b[i])\n    return new_array\ndef arrange_digits(n):\n    '''\n    Given an integer, return an array of digits in ascending order.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return [0]\n    else:\n        array = []\n        while n > 0:\n            array.append(n%10)\n            n /= 10\n        return array\ndef rotate_left(arr, n):\n    '''\n    Given an array of integers, return an array that is the input array rotated n steps left.\n    '''\n    n %= len(arr)\n    return arr[n:] + arr[:n]\ndef rotate_right(arr, n):\n    '''\n    Given an array of integers, return an array that is the input array rotated n steps right.\n    '''\n    n %= len(arr)\n    return arr[-n:] + arr[:-n]\ndef reverse(arr, start, end):\n    '''\n    Given an array of integers, reverse the sub-array between indices start and end.\n    '''\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\ndef move_zeros(arr):\n    '''\n    Given an array of integers, move all zeros to the end of the array.\n    '''\n    index = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            arr[i], arr[index] = arr[index], arr[i]\n            index += 1\ndef max_ones(arr):\n    '''\n    Given an array of integers, find the maximum number of contiguous ones in the array.\n    '''\n    max_count = 0\n    current_count = 0\n    for i in arr:\n        if i == 0:\n            current_count = 0\n        else:\n            current_count += 1\n        max_count = max(current_count, max_count)\n    return max_count\ndef first_recurring_char(string):\n    '''\n    Given a string, find the first recurring character and return it's index.\n    If there are no recurring characters, return -1.\n    '''\n    array = []\n    for i in string:\n        if i in array:\n            return array.index(i)\n        array.append(i)\n    return -1\ndef merge_intervals(intervals):\n    '''\n    Given a collection of intervals, merge all overlapping intervals.\n    '''\n    intervals.sort(key=lambda x:x[0])\n    merged_array = []\n    current_array = []\n    current_end = intervals[0][1]\n    for interval in intervals:\n        start = interval[0]\n        end = interval[1]\n        if current_end <= start:\n            current_array.append(interval)\n            current_end = end\n        else:\n            if end <= current_end:\n                current_array.append(interval)\n                current_end = end\n            else:\n                if end > current_end:\n                    current_array[-1] = (current_array[-1][0], current_end)\n                    current_array.append(interval)\n                    current_end = end\n    return current_array\ndef balanced_parentheses(string):\n    '''\n    Given a string that contains parentheses and +,-,/ operators, return true if balanced, and false if not.\n    '''\n    stack = []\n    for i in string:\n        if i == '(':\n            stack.append('(')\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\ndef xor_encrypted_hex(n):\n    '''\n    Given an integer, return the hexadecimal representation of its binary representation.\n    '''\n    array = []\n    binary = bin(n)\n    for i in binary:\n        if i == '0':\n            array.append(1)\n        else:\n            array.append(0)\n    hex_array = []\n    for i in range(len(array)):\n        if i < len(array)-1:\n            temp = array[i] ^ array[i+1]\n            hex_array.append(temp)\n        else:\n            temp = array[i]\n            hex_array.append(temp)\n    hex_string = []\n    for i in hex_array:\n        if i == 1:\n            hex_string.append('1')\n        else:\n            hex_string.append('0')\n    return ''.join(hex_string)\ndef xor_cipher(string, key):\n    '''\n    Given a string and a key, return the hexadecimal representation of the result of XOR operation on the string with the key.\n    '''\n    array = []\n    for i in range(len(string)):\n        if i < len(string)-1:\n            temp = ord(string[i]) ^ ord(string[i+1])\n            array.append(temp)\n        else:\n            temp = ord(string[i])\n            array.append(temp)\n    hex_array = []\n    for i in array:\n        if i < 0x10:\n            hex_array.append(str(i))\n        else:\n            hex_array.append(hex(i)[2:])\n    return ''.join(hex_array)\ndef set_bit(n, i):\n    '''\n    Given an integer and an index, set the i'th bit of n to 1 and return the result.\n    '''\n    return n | (1 << i)\ndef clear_bit(n, i):\n    '''\n    Given an integer and an index, clear the i'th bit of n and return the result.\n    '''\n    return n & ~(1 << i)\ndef min_max(nums):\n    '''\n    Given an array of integers, return the smallest and largest integer in the array.\n    '''\n    return min(nums), max(nums)\ndef swap_pairs(nums):\n    '''\n    Given an array of integers, return an array with each pair of adjacent elements swapped.\n    '''\n    n = len(nums)\n    if n < 2:\n        return nums\n    else:\n        for i in range(n-1):\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n        return nums\ndef merge_sort(nums):\n    '''\n    Given an array of integers, return an array of the same integers in ascending order.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        mid = len(nums)/2\n        left_array = merge_sort(nums[:mid])\n        right_array = merge_sort(nums[mid:])\n        return merge(left_array, right_array)\ndef merge(left, right):\n    '''\n    Given two sorted arrays, merge them together.\n    '''\n    array = []\n    index_left = 0\n    index_right = 0\n    while index_left < len(left) and index_right < le"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    result = [0, 0]\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            result[0] += 1\n        else:\n            result[1] += 1\n    return result\ndef rotate_by_two(nums):\n    '''\n    We are given an array A of non-negative integers. A second array B is formed by\n    shuffling the elements of the first array and deleting any numbers\n    exceeding the value of the i-th rank (the number of places in A that the i-th\n    element is on). Return the array B.\n    '''\n    n = len(nums)\n    b = array('i', [0] * n)\n    for i in range(n):\n        b[n - 1 - i] = nums[i]\n    return b\ndef is_anagram(str1, str2):\n    '''\n    Write a function that takes two strings as input and returns True if the\n    strings are anagrams of each other. Note that a string is an anagram of itself\n    and a string is an anagram of a string if the characters in the string can be\n    rearranged to form the string.\n    '''\n    return sorted(str1) == sorted(str2)\ndef find_anagrams(str, pattern):\n    '''\n    Find all anagrams of a pattern in a string.\n    '''\n    n, m = len(str), len(pattern)\n    if m > n:\n        return []\n    record = array('i', [0] * 26)\n    for i in range(m):\n        record[ord(pattern[i]) - 97] += 1\n    result = []\n    for i in range(n - m + 1):\n        j = i\n        record2 = array('i', [0] * 26)\n        while j < n:\n            record2[ord(str[j]) - 97] += 1\n            j += 1\n        if record2 == record:\n            result.append(i)\n    return result\ndef find_max_consecutive_ones(nums):\n    '''\n    Find the maximum number of consecutive 1's in the binary representation of a\n    given integer.\n    '''\n    n = len(nums)\n    result = 0\n    curr_count = 0\n    for i in range(n):\n        if nums[i] == 1:\n            curr_count += 1\n            if curr_count > result:\n                result = curr_count\n        else:\n            curr_count = 0\n    return result\ndef find_first_missing_positive(nums):\n    '''\n    Given a list of integers, find the first missing positive integer in linear\n    time and constant space.\n    '''\n    n = len(nums)\n    if n == 0:\n        return 1\n    i = 0\n    while i < n:\n        if nums[i] > 0 and nums[i] - 1 < n and nums[i]!= nums[nums[i] - 1]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        else:\n            i += 1\n    for i in range(n):\n        if nums[i]!= i + 1:\n            return i + 1\n    return n + 1\ndef is_valid_subsequence(array, sequence):\n    '''\n    Given a sequence of integers, write a function that determines if the sequence is\n    a valid subsequence\n    '''\n    n = len(array)\n    m = len(sequence)\n    if n < m:\n        return False\n    curr = 0\n    for i in range(m):\n        if array[curr] == sequence[i]:\n            curr += 1\n            if curr == n:\n                return True\n    return False\ndef is_increasing(nums):\n    '''\n    Given a list of integers, return True if the sequence is increasing.\n    '''\n    n = len(nums)\n    for i in range(1, n):\n        if nums[i] < nums[i - 1]:\n            return False\n    return True\ndef is_decreasing(nums):\n    '''\n    Given a list of integers, return True if the sequence is decreasing.\n    '''\n    n = len(nums)\n    for i in range(1, n):\n        if nums[i] > nums[i - 1]:\n            return False\n    return True\ndef is_rotation(str1, str2):\n    '''\n    Given two strings, write a function to check if one is a rotation of the\n    other.\n    '''\n    return sorted(str1) == sorted(str2)\ndef are_rotations(str1, str2):\n    '''\n    Given two strings, write a function to check if they are rotations of each\n    other.\n    '''\n    return is_rotation(str1, str2) and is_rotation(str2, str1)\ndef is_one_away(str1, str2):\n    '''\n    There are three types of edits that can be performed on strings: insert a\n    character, remove a character, or replace a character. Given two strings, write\n    a function to check if they are one edit (or zero edits) away.\n    '''\n    m = len(str1)\n    n = len(str2)\n    if abs(m - n) > 1:\n        return False\n    if m > n:\n        return is_one_away(str2, str1)\n    for i in range(n):\n        if m!= n:\n            if str1[i]!= str2[i]:\n                return str1[i + 1:] == str2[i + 1:]\n    return True\ndef is_permutation(str1, str2):\n    '''\n    Given two strings, write a function to check if one is a permutation of the\n    other.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return False\n    record = array('i', [0] * 26)\n    for i in range(n):\n        record[ord(str1[i]) - 97] += 1\n    for i in range(n):\n        if record[ord(str2[i]) - 97] == 1:\n            record[ord(str2[i]) - 97] -= 1\n        else:\n            return False\n    return True\ndef max_subarray(nums):\n    '''\n    Given a list of integers, find the subarray with the largest sum.\n    '''\n    n = len(nums)\n    sum_so_far = 0\n    curr_sum = 0\n    max_sum = -float('inf')\n    for i in range(n):\n        curr_sum += nums[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\ndef longest_common_prefix(strs):\n    '''\n    Write a function to find the longest common prefix string amongst an array of\n    strings.\n    '''\n    if len(strs) == 0:\n        return ''\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        j = 0\n        while j < len(prefix) and j < len(strs[i]):\n            if prefix[j]!= strs[i][j]:\n                prefix = prefix[:j]\n                break\n            j += 1\n    return prefix\ndef longest_common_prefix_no_overlap(strs):\n    '''\n    Write a function to find the longest common prefix string amongst an array of\n    strings.\n    '''\n    n = len(strs)\n    if n == 0:\n        return ''\n    min_length = len(strs[0])\n    for i in range(n):\n        min_length = min(min_length, len(strs[i]))\n    i = 0\n    while i < min_length:\n        char = strs[0][i]\n        for j in range(n):\n            if strs[j][i]!= char:\n                return strs[0][:i]\n        "
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total_zeroes = 0\n    total_non_zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            total_zeroes += 1\n        else:\n            total_non_zeroes += 1\n    return (total_zeroes/total_non_zeroes)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nonzero = 0\n    for i in nums:\n        if i!= 0:\n            nonzero += 1\n    return float(nums.count(0))/float(nonzero)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count\ndef three_sum(nums):\n    '''\n    Given an array of integers, find out whether there are triplets in the array whose sum is zero.\n    '''\n    if len(nums) < 3:\n        return False\n    nums.sort()\n    for i in range(len(nums)-2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            if nums[i] + nums[j] + nums[k] < 0:\n                j += 1\n            elif nums[i] + nums[j] + nums[k] > 0:\n                k -= 1\n            else:\n                return True\n    return False\ndef median_of_medians(nums):\n    '''\n    Write a function to find the median of a list of numbers\n    '''\n    n = len(nums)\n    if n % 5 == 0:\n        return find_kth_smallest(nums, int(n / 5))\n    k = int(n / 5)\n    mid = n % 5\n    lower = find_kth_smallest(nums, k)\n    upper = find_kth_smallest(nums, k+1)\n    return (lower + upper) / 2.0\ndef find_kth_smallest(nums, k):\n    '''\n    Quick select algorithm to find kth smallest element of a list\n    '''\n    def partition(nums, left, right):\n        pivot = nums[right]\n        i = left\n        for j in range(left, right):\n            if nums[j] <= pivot:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n        nums[i], nums[right] = nums[right], nums[i]\n        return i\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    bin = bin(n)[2:]\n    count = bin.count('1')\n    if count == 1:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    number = bin(n)[2:]\n    power_of_two = [2**i for i in range(len(number)) if number[-i-1] == '1']\n    return sum(power_of_two) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    a = n\n    sum = 0\n    for i in range(32):\n        k = 1<<i\n        while a >= k:\n            sum += k\n            a -= k\n    if a == 0:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    a = n\n    sum = 0\n    while (a > 0):\n        remainder = a % 2\n        if (remainder!= 0):\n            sum += 1\n        a = int(a / 2)\n    if (sum == 0):\n        print \"Yes\"\n    else:\n        print \"No\"\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n = int(n)\n    if n == 0:\n        return True\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    flag = 0\n    if n == 0:\n        return True\n    while n > 0:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            flag = 1\n            break\n    if flag == 1:\n        return False\n    else:\n        return True\n        \nprint is_Sum_Of_Powers_Of_Two(14)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1: return True\n    while n%2 == 0: n /= 2\n    if n == 1: return True\n    return False\n    \ndef is_Sum_Of_Powers_Of_Two_DP(n):\n    '''\n    Use DP to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1: return True\n    p = [0, 1]\n    for i in xrange(2, n+1):\n        if is_Power_Of_Two(i):\n            p.append(p[-1] + 1)\n        else:\n            p.append(p[-1])\n    return p[n] == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    temp = n \n    i = 0\n    while(temp): \n        temp /= 2\n        i += 1\n    if (n / 2**i == n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n / 2)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return is_Sum_Of_Powers_Of_Two(n / i)\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n = bin(n)\n    if n[2:] == '':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = math.pi\n    return 2 * pi * r\n    \ndef get_radius(r, length):\n    '''\n    Write a function to calculate the radius of a circle.\n    '''\n    return length / 2 / math.pi\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #addition\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        flattened_list.append(i)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [i for l in test_list for i in l]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = [x for sublist in test_list for x in sublist]\n    return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for item in test_list:\n        if type(item) == list:\n            res.extend(item)\n        else:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(set([e for l in test_list for e in l]))\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_list = []\n    for l in test_list:\n        for i in l:\n            return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    res = []\n    for l in test_list:\n        res += l\n    return res\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    left_most_pos = 0\n    while(length > 1):\n        max_pos = -1\n        for i in range(length):\n            if nums[i] > nums[max_pos]:\n                max_pos = i\n        if max_pos!= length - 1:\n            nums[:max_pos + 1] = nums[:max_pos + 1][::-1]\n            nums[:length - 1] = nums[:length - 1][::-1]\n        if max_pos!= 0:\n            nums[:length - 1] = nums[:length - 1][::-1]\n        left_most_pos = left_most_pos + 1\n        length = length - 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        for j in range(i, 0, -1):\n            if nums[j] > nums[j - 1]:\n                break\n        if j!= i:\n            nums[:j] = nums[:j][::-1]\n            nums[j:] = nums[j:][::-1]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in xrange(n//2):\n        nums[i], nums[n-i-1] = nums[n-i-1], nums[i]\n        n -= 1\n        if n % 2!= 0:\n            nums[n//2], nums[n//2-1] = nums[n//2-1], nums[n//2]\n        else:\n            nums[n//2], nums[n//2] = nums[n//2], nums[n//2]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n // 2, 0, -1):\n        shift_list(nums, i)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return\n    max_pivot = 0\n    for i in range(len(nums)):\n        if nums[i] > nums[max_pivot]:\n            max_pivot = i\n    \n    nums[:] = nums[:max_pivot] + nums[max_pivot:][::-1]\n    pancake_sort(nums[:max_pivot])\n    pancake_sort(nums[max_pivot:])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Use a helper function to flip the list.\n    # Flipping the list is done with this function\n    def flip_helper(nums, start, end):\n        # Base case, list is one item\n        if start >= end:\n            return\n        # Find the largest item.\n        # It will be at the end of the list\n        max_item_index = end\n        max_item = nums[max_item_index]\n        for i in range(start, end):\n            if nums[i] > max_item:\n                max_item_index = i\n                max_item = nums[i]\n        # Swap the max item with the last item in the list\n        # max_item_index is the index of the max item in the list\n        # swap the max item with the last item in the list\n        nums[max_item_index], nums[end] = nums[end], nums[max_item_index]\n        # swap the max item with the first item in the list\n        nums[start], nums[max_item_index] = nums[max_item_index], nums[start]\n        # Flip the list recursively.\n        flip_helper(nums, start, max_item_index)\n        flip_helper(nums, max_item_index + 1, end)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for n in range(len(nums) - 1, 0, -1):\n        nums_sorted = True\n        for i in range(1, n+1):\n            if nums[i] > nums[i - 1]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n                nums_sorted = False\n        if nums_sorted:\n            return\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip_and_reverse(nums,k):\n        '''\n        Reverse and then reverse the first k elements in the list.\n        '''\n        for i in range(k//2):\n            nums[i], nums[-1-i] = nums[-1-i], nums[i]\n    \n    \n    def pancake_sort_once(nums,k):\n        '''\n        Do one step of pancake sort.\n        '''\n        # Reverse the first k elements in the list.\n        flip_and_reverse(nums,k)\n        # Reverse the whole list.\n        flip_and_reverse(nums,len(nums))\n        # Reverse the first k elements again.\n        flip_and_reverse(nums,k)\n    \n    def pancake_sort_recursive(nums):\n        '''\n        Sort the list of elements by using pancake sort.\n        '''\n        # Sort the list of elements.\n        nums.sort()\n        # Use pancake sort to sort the first k elements in the list.\n        k = len(nums)\n        pancake_sort_once(nums,k)\n    \n    # Use recursive implementation of pancake sort.\n    pancake_sort_recursive(nums)\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum([1 for i in zip(list1,list2,list3) if i[0] == i[1] and i[1] == i[2]])\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1_number = len(list1)\n    list2_number = len(list2)\n    list3_number = len(list3)\n    count = 0\n    for i in range(list1_number):\n        if list1[i] == list2[i]:\n            count += 1\n        if list2[i] == list3[i]:\n            count += 1\n        if list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in xrange(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list3 = zip(list1,list2,list3)\n    count = 0\n    for item in list3:\n        if item[0] == item[1] and item[2] == item[1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num_samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            num_samepair += 1\n    return num_samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        dict[i] = [list1[i],list2[i],list3[i]]\n    result = 0\n    for key in dict.keys():\n        if dict[key] == dict[key][0]:\n            result += 1\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    a=list(Input)\n    b=[0]*len(a)\n    c=[]\n    for i in range(0,len(a)):\n        for j in range(0,len(a)):\n            if a[i]==a[j] and i!=j:\n                b[i]+=1\n        if b[i]>1:\n            c.append(b[i])\n    return c\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count = 0\n    if type(Input) == tuple:\n        for i in Input:\n            if type(i) == list:\n                count += 1\n    else:\n        return -1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = list(Input)\n    Output = 0\n    for i in range(len(Input)):\n        if Input[i] == \"(\":\n            Output = Output + 1\n        if Input[i] == \")\":\n            Output = Output - 1\n    return Output\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list1 = []\n    list2 = []\n    for item in Input:\n        if type(item) == type(list1):\n            list1.append(item)\n        else:\n            list2.append(item)\n    return list1,list2\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for t in Input:\n        if type(t)==list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for ele in Input:\n        if type(ele) == list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    tup = tuple(Input)\n    count = 0\n    for i in tup:\n        if isinstance(i,tuple):\n            count = count + 1\n    return count\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if Input[i] == []:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input=tuple(sorted(Input))\n    for i in Input:\n        if type(i) is list:\n            return i\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return -1\n    max_val = -1\n    for i in xrange(len(arr)):\n        for j in xrange(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_val:\n                max_val = abs(arr[i] - arr[j])\n    return max_val\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[-1] - arr[0]\n    return max_diff\n    \n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        max_diff = max(max_diff, arr[i] - arr[i - 1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = [1,2,3,4,5,6,7,8,9]\n    x = arr[0]\n    y = arr[1]\n    z = arr[2]\n    w = arr[3]\n    q = arr[4]\n    e = arr[5]\n    r = arr[6]\n    t = arr[7]\n    max_diff = 0\n    if (abs(x-y) > max_diff):\n        max_diff = abs(x-y)\n    if (abs(y-z) > max_diff):\n        max_diff = abs(y-z)\n    if (abs(z-w) > max_diff):\n        max_diff = abs(z-w)\n    if (abs(w-q) > max_diff):\n        max_diff = abs(w-q)\n    if (abs(q-e) > max_diff):\n        max_diff = abs(q-e)\n    if (abs(e-r) > max_diff):\n        max_diff = abs(e-r)\n    if (abs(r-t) > max_diff):\n        max_diff = abs(r-t)\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff = 0\n    for i in range(1,len(arr)):\n        if abs(arr[i]-arr[i-1]) > diff:\n            diff = abs(arr[i]-arr[i-1])\n    return diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    if len(arr) == 1:\n        return 0\n    else:\n        return arr[-1]-arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = arr[0]\n    min = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] < min:\n            min = arr[i]\n        elif arr[i] > max:\n            max = arr[i]\n    return max-min\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if abs(arr[i] - arr[j]) > diff:\n                diff = abs(arr[i] - arr[j])\n    return diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        max_diff = max(max_diff, arr[i]-arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(len(arr)): \n            if i!= j: \n                abs_diff = abs(arr[i] - arr[j])\n                if abs_diff > max_diff: \n                    max_diff = abs_diff\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    if a == 0:\n        return (b, n / b)\n    else:\n        d = gcd(a, b)\n        return (n / d, a / d)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Linear equations\n    # a * x + b * y = n\n    # x = (n - b * y) / a\n    # y = (n - a * x) / b\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    result = None\n    for x in range(1, n):\n        if a * x + b * n == n:\n            return (x, n/a)\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = None, None\n    \n    for i in range(0, n):\n        for j in range(0, n):\n            if i * a + j * b == n:\n                x, y = i, j\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return (n // a, 0)\n    else:\n        x = (n // b)\n        y = (n - x * b) // a\n        return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a * b == n:\n        return None\n    elif a == b:\n        if n % a == 0:\n            return (a, n / a)\n        else:\n            return None\n    elif a < b:\n        for i in range(n / a):\n            if n - i * a == b:\n                return (i, n / a)\n    else:\n        for i in range(n / b):\n            if n - i * b == a:\n                return (b, i)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    x1 = (n - b) / a\n    x2 = (n - b) // a\n    \n    if x1 == x2:\n        return x1, x2\n    \n    return None\n    \ndef find_solution_brute_force(a, b, n):\n    '''\n    Use a brute force approach to compute the solutions.\n    '''\n    \n    for x in range(0, n):\n        for y in range(0, n):\n            if a * x + b * y == n:\n                return x, y\n                \n    return None\n    \ndef test_solutions():\n    assert (1, 1) == find_solution(3, 6, 12)\n    assert (1, 2) == find_solution(4, 8, 14)\n    assert (1, 1) == find_solution(1, 2, 4)\n    assert (2, 2) == find_solution(1, 1, 4)\n    \n    assert None == find_solution_brute_force(3, 6, 12)\n    assert None == find_solution_brute_force(4, 8, 14)\n    assert None == find_solution_brute_force(1, 2, 4)\n    assert None == find_solution_brute_force(1, 1, 4)\n    \n    assert (1, 1) == find_solution(2, 3, 6)\n    assert (1, 2) == find_solution(2, 4, 6)\n    assert (1, 1) == find_solution(2, 2, 6)\n    \n    assert None == find_solution(1, 3, 6)\n    assert None == find_solution(1, 4, 6)\n    assert None == find_solution(1, 2, 6)\n    \nif __name__ == '__main__':\n    test_solutions()\n    \n    a, b, n = [int(x) for x in input().split()]\n    \n    print(find_solution(a, b, n))\n    print(find_solution_brute_force(a, b, n))"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 1)\n    if n < 0:\n        return None\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [element for element in list1 if element not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    return [i for i in list1 if i not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    if len(list1) == 0:\n        return list2\n    \n    i = 0\n    while i < len(list2):\n        if list1[0] == list2[i]:\n            del list1[0]\n            del list2[i]\n        else:\n            i += 1\n    \n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for item in list1:\n        if item not in list2:\n            list3.append(item)\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        while item in list1:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n    \n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    return (n - 2) * (sum_series(n-1) + sum_series(n-2))\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return (n - 2*sum_series(n - 1)) + sum_series(n - 1)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (((n+1)*(n+2))/2) - ((n-1)*(n+1)/2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + sum_series(n//2)\n    else:\n        return n + sum_series((n+1)//2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum(range(n-2))\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n-2) if n > 1 else 0\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l*s)/2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.5 * (s**2) * l) / tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * tan(pi/s) * l**2) / 4\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l**2) / (tan(pi/l))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # height ='s**2 / (2 * tan(2 * pi / l * n))'\n    # height = '((s**2) / (2 * tan(2 * pi / l * n))) / 2'\n    # height = '2 * s**2 / (tan(2 * pi / l * n) * 2)'\n    height = '2 * s**2 / tan(2 * pi / l * n)'\n    area ='s * l / n'\n    area = '(((s * l) / n)**2) / 4'\n    area ='s * l / n * (2 * n) / 4'\n    area = '((s * l) / n) * (2 * n) / 4'\n    area = '((s * l) / n) * (2 * n) / 4'\n    area = '((s * l) / n) * (2 * n) / 4'\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s<3:\n        return 0\n    else:\n        return (s * l)/2 * tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    assert s > 0, \"Polygon side length must be greater than zero\"\n    assert l > 0, \"Polygon sides length must be greater than zero\"\n    return s * (l / 2) * (1 / tan(pi / s))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l*s/2)*(s**2/4 + l**2/4)/4\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l <= 0:\n        raise ValueError('invalid number of sides')\n    area = 0\n    side_length = l * tan(pi/l)\n    area += side_length * s\n    area += side_length * (s - 1)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def get_p(s):\n        return s * s * (3*s-1) / (2*tan(pi/s))\n    return s * s * get_p(s) / 4\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(n): \n        i = 1\n        total = 0\n        while i <= math.sqrt(n):\n            if n % i == 0:\n                if n // i == i:\n                    total += i\n                else:\n                    total += i\n                    total += n // i\n            i += 1\n        return total - n\n    num1, num2 = 0, 0\n    num1 = sum_divisors(n)\n    num2 = sum_divisors(n)\n    return num1 == num2\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0: \n        n = n / 2\n        n = math.sqrt(n)\n        n = n * n\n        n = n / 2\n    else: \n        n = n / 2\n        n = math.sqrt(n)\n        n = n * n\n    s = 1\n    i = 2\n    while i <= n:\n        if n % i == 0: \n            s += i\n            n = n / i\n        else: \n            i += 1\n    if n > 1: \n        s += n\n    if s == n: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1: \n        return True \n    for i in range(1,n):\n        if n % i == 0:\n            x = 1\n            sum = 0\n            while x <= i:\n                if x == 1: \n                    sum += i \n                elif i % x == 0: \n                    sum += x \n                x += 1\n            if sum == n: \n                return True \n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        div_sum = 0\n        for i in range(1, n+1):\n            if n%i == 0:\n                div_sum = div_sum + i\n        return div_sum\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for x in range(1, n):\n        if n % x == 0:\n            s = s + x\n    return s == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return sum(get_divisors(n)) == n\n    \ndef get_divisors(n): \n    '''\n    Get all divisors of an integer\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i * i!= n:\n                divisors.append(n / i)\n    return divisors\n    \ndef is_multiple(n): \n    '''\n    Write a function that determines if a number is a multiple of another number\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_factor(n, m): \n    '''\n    Write a function that returns True if n is a factor of m, and False otherwise.\n    '''\n    if m % n == 0:\n        return True\n    else:\n        return False\n    \ndef is_prime(n): \n    '''\n    Write a function that determines if a number is a prime number. A prime number is a number greater than 1 that is only divisible by 1 and itself.\n    '''\n    if n % 2 == 0 and n > 2:\n        return False\n    else:\n        return True\n    \ndef div_sum_sqrt(n): \n    '''\n    Write a function to determine if the sum of the squares of the divisors of a number is equal to the number.\n    '''\n    divisors = get_divisors(n)\n    divisor_squares = []\n    for d in divisors:\n        divisor_squares.append(d**2)\n    return sum(divisor_squares) == n\n    \ndef is_amicable(n): \n    '''\n    Write a function that determines if a number n is amicable. \n    If the sum of the proper divisors of n is equal to n and the sum of the proper divisors of n + 1 is equal to n + 1, then n is an amicable number.\n    '''\n    sum_divisors = get_divisors(n)\n    divisor_squares = []\n    for d in sum_divisors:\n        divisor_squares.append(d**2)\n    if sum(divisor_squares) == n and sum(get_divisors(n+1)) == (n+1):\n        return True\n    else:\n        return False\n    \ndef is_abundant(n): \n    '''\n    Write a function that determines if a number n is abundant. A number is abundant if the sum of the proper divisors of n is greater than n.\n    '''\n    return sum(get_divisors(n)) > n\n    \ndef is_triangular(n): \n    '''\n    Write a function that determines if a number n is triangular. A triangular number is one whose square has a sum of at least n.\n    '''\n    return (n**2 + n) / 2 == n\n    \ndef is_perfect(n): \n    '''\n    Write a function that determines if a number n is perfect. A perfect number is a number whose proper divisors sum to n.\n    '''\n    return sum(get_divisors(n)) == n\n    \ndef is_skew(n): \n    '''\n    Write a function that determines if a number n is skew. A skew number is a number whose sum of the largest and smallest digits is equal to the number. \n    For example, the numbers 3, 5, and 697 are all skew numbers.\n    '''\n    n_string = str(n)\n    if n_string[0] == n_string[-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(n): \n    '''\n    Write a function that determines if a number n is a palindrome. A palindrome is a number that is the same when read backwards.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef is_pandigital(n): \n    '''\n    Write a function that determines if a number n is pandigital. A number n is pandigital if it is equal to the sum of the digits of n, each digit is a single digit number, and all digits are in ascending order.\n    '''\n    n_string = str(n)\n    n_digits = len(n_string)\n    n_digits_string = str(n_digits)\n    for i in range(n_digits):\n        if i == len(n_string):\n            return False\n        if int(n_string[i]) > int(n_digits_string[i]):\n            return False\n    return True\n    \ndef is_triangular_number(n): \n    '''\n    Write a function that determines if a number n is triangular. A triangular number is one whose square has a sum of at least n.\n    '''\n    return (n**2 + n) / 2 == n\n    \ndef is_fibonacci(n): \n    '''\n    Write a function that determines if a number n is a fibonacci number. A fibonacci number is a number that is the sum of the first 2 numbers of the Fibonacci sequence, starting from 0 and 1. \n    '''\n    if n == 0:\n        return False\n    elif n == 1 or n == 2:\n        return True\n    else:\n        return is_fibonacci(n - 1) + is_fibonacci(n - 2) == n\n    \ndef is_catalan(n): \n    '''\n    Write a function that determines if a number n is a catalan number. A catalan number is a natural number that is the product of the first n natural numbers, where n is odd.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return (n**2) / (n + 1) == n / 2\n    \ndef is_lucky(n): \n    '''\n    Write a function that determines if a number n is a lucky number. A lucky number is a number which is the sum of the digits of n, each digit is a single digit number, and all digits are in ascending order.\n    '''\n    n_string = str(n)\n    n_digits = len(n_string)\n    n_digits_string = str(n_digits)\n    for i in range(n_digits):\n        if i == len(n_string):\n            return False\n        if int(n_string[i]) > int(n_digits_string[i]):\n            return False\n    return True\n    \ndef is_goldbach(n): \n    '''\n    Write a function that determines if a number n is a goldbach number. A goldbach number is a positive even integer that is the sum of two odd numbers that are not equal to it. \n    '''\n    if n % 2 == 1:\n        return False\n    else:\n        return is_goldbach(n + 1) or is_goldbach(n - 1)\n    \ndef is_cyclopean(n): \n    '''\n    Write a function that determines if a number n is a cyclopean number. A cyclopean number is a number that is a sum of its digits to the power of the number of digits of n.\n    '''\n    n_string = str(n)\n    n_digits = len(n_string)\n    n_digits_string = str(n_digits)\n    n_digits_to_the_power_of_n = 1\n    for i in range(n_digits):\n        n_digits_to_the_power_of_n *= int(n_string[i])**int(n_digits_string[i])\n    return n_digits_to_the_power_of_n == n\n    \ndef is_heptagonal(n): \n    '''\n    Write a function that determines if a number n is a heptagonal number. A heptagonal number is a number that is the sum of the first 7 consecutive integers.\n    '''\n    return ((n**2 + n) / 2) == n\n    \ndef is_hexagonal(n): \n    '''\n    Write a function that determines if a number n i"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of divisors of n \n    s = 0\n    i = 1 \n    while i <= math.sqrt(n): \n        if n % i == 0: \n            if i == n / i:\n                s += i \n            else:\n                s += i \n                s += n / i\n        i += 1\n    return s \n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return sum([i for i in range(1, n) if n % i == 0]) == sum([i for i in range(1, (n+1)/2) if (n+1)/2 % i == 0])\ndef goldbach_pair(n):\n    '''\n    Write a function to find all the pairs of integers whose sum is equal to n.\n    '''\n    return [tup for tup in [(a, n-a) for a in range(1, n/2 + 1) if n % a == 0] if sum(tup) == n]\ndef even_generator():\n    '''\n    Write a generator that yields the even numbers to infinity, starting with the first even number 2.\n    '''\n    a,b = 2,3\n    while True:\n        yield b\n        a, b = b, a + b\ndef digit_sum(n):\n    '''\n    Write a function to find the sum of the digits of an integer.\n    '''\n    return sum(int(digit) for digit in str(n))\ndef is_palindrome(n):\n    '''\n    Write a function that checks whether a number is a palindrome. A palindrome is a number that remains the same when read forward and backward.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    return False\ndef format_palindrome(n):\n    '''\n    Write a function to check whether a number is a palindrome. A palindrome is a number that remains the same when read forward and backward.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    return False\ndef is_square(n):\n    '''\n    Write a function to check whether a number is a square number. A square number is a number that is the result of an integer being squared.\n    '''\n    return int(math.sqrt(n)) == math.sqrt(n)\ndef is_power(n, base):\n    '''\n    Write a function to check whether a number is a power of a given base. Assume the base is always a positive integer greater than 1.\n    '''\n    if n == 1:\n        return True\n    if n % base == 0:\n        return True\n    return False\ndef is_leap_year(n):\n    '''\n    Write a function that returns True if a given year is a leap year. A leap year is divisible by 4, but not divisible by 100, unless it is also divisible by 400.\n    '''\n    return n % 4 == 0 and n % 100!= 0 or n % 400 == 0\ndef get_factors(n):\n    '''\n    Write a function that returns a list of all the prime factors of a positive integer n.\n    '''\n    return [p for p in range(2, n) if n % p == 0]\ndef get_primes_between(n, m):\n    '''\n    Write a function that returns a list of all the prime numbers between n and m (both inclusive).\n    '''\n    return [p for p in range(n, m+1) if is_prime(p)]\ndef is_prime(n):\n    '''\n    Write a function that returns True if a given number is prime, and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Write a function that returns a list of all the prime factors of a positive integer n.\n    '''\n    return get_factors(n)\ndef get_prime_factors(n):\n    '''\n    Write a function that returns a list of all the prime factors of a positive integer n.\n    '''\n    return [p for p in get_factors(n) if is_prime(p)]\ndef get_all_factors(n):\n    '''\n    Write a function that returns a list of all the prime factors of a positive integer n.\n    '''\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n/i\n        else:\n            i = i + 1\n    return factors\ndef is_perfect(n):\n    '''\n    Write a function that returns True if a given number n is perfect, and False otherwise. A perfect number is a number that is half the sum of all of its positive divisors.\n    '''\n    return sum(get_factors(n)) == n\ndef get_perfect_divisors(n):\n    '''\n    Write a function that returns a list of all the perfect divisors of a given integer n.\n    '''\n    return [i for i in range(1, n + 1) if n % i == 0 and n/i == i]\ndef is_perfect_square(n):\n    '''\n    Write a function that returns True if a given number n is perfect square, and False otherwise. A perfect square is a number that is the square of a single digit.\n    '''\n    return int(math.sqrt(n)) == math.sqrt(n)\ndef is_perfect_cube(n):\n    '''\n    Write a function that returns True if a given number n is perfect cube, and False otherwise. A perfect cube is a number that is the cube of a single digit.\n    '''\n    return int(math.pow(n, 1./3.)) == math.pow(n, 1./3.)\ndef is_perfect_square_set(n):\n    '''\n    Write a function that returns True if a given number n is perfect square, and False otherwise. A perfect square is a number that is the square of a single digit.\n    '''\n    if is_perfect_square(n):\n        return True\n    if n == 1:\n        return True\n    if n % 10 == 1:\n        return is_perfect_square_set(n/10)\n    if n % 10 == 2:\n        return is_perfect_square_set(n/10)\n    if n % 10 == 3:\n        return is_perfect_square_set(n/10)\n    if n % 10 == 4:\n        return is_perfect_square_set(n/10)\n    if n % 10 == 5:\n        return is_perfect_square_set(n/10)\n    if n % 10 == 6:\n        return is_perfect_square_set(n/10)\n    if n % 10 == 7:\n        return is_perfect_square_set(n/10)\n    if n % 10 == 8:\n        return is_perfect_square_set(n/10)\n    if n % 10 == 9:\n        return is_perfect_square_set(n/10)\n    return False\ndef is_perfect_cube(n):\n    '''\n    Write a function that returns True if a given number n is perfect cube, and False otherwise. A perfect cube is a number that is the cube of a single digit.\n    '''\n    return int(math.pow(n, 1./3.)) == math.pow(n, 1./3.)\ndef is_perfect_cube_set(n):\n    '''\n    Write a function that returns True if a given number n is perfect cube, and False otherwise. A perfect cube is a number that is the cube of a single digit.\n    '''\n    if is_perfect_cube(n):\n        return True\n    if n == 1:\n        return True\n    if n % 10 == 1:\n        return is_perfect_cube_set(n/10)\n    if n % 10 == 2:\n        return is_perfect_cube_set(n/10)\n    if n % 10 == 3:\n        return is_perfect_cube_set(n/10)\n    if n % 10 == 4:\n        return is_perfect_cube_set(n/10)\n    if n % 10 == 5:\n        return is_perfect_cube_set(n/10)\n    if n % 10 == 6:\n        return is_perfect_cube_set(n/10)\n    if n % 10 == 7:\n        return is_perfect_cube_set(n/10)\n    if n % 10 == 8:\n    "
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    s = 1\n    for i in xrange(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            s+=i\n            if n/i!= i:\n                s+=n/i\n    return s == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor = set()\n    if n < 0:\n        n = -n\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if alphabet.lower().index(str1[i].lower()) == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    str_list = [alphabet[i] for i in range(26)]\n    str_dict = {}\n    for i in range(26):\n        str_dict[str_list[i]] = i\n    count = 0\n    for i in range(len(str1)):\n        if str_dict[str1[i]] == str_dict[str1[0]]:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = {} \n    for i in str1: \n        if i in count: \n            count[i] += 1 \n        else: \n            count[i] = 1 \n    return count \n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = [0] * 26\n    for i in str1:\n        if ord(i) <= 90:\n            index = ord(i) - ord('a')\n        else:\n            index = ord(i) - ord('A')\n        count[index] += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    for i in range(len(str1)):\n        if str1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            str1 = str1[i:].replace(str1[i], '_')\n    print len(str1)\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #https://www.hackerrank.com/challenges/ctci-ransom-note\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    counter = 0\n    for x in str1.lower():\n        if x in char_position:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    result = {}\n    for i in range(len(str1)):\n        if str1[i].lower() in result:\n            result[str1[i].lower()] += 1\n        else:\n            result[str1[i].lower()] = 1\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for i in range(len(str1)):\n        if str1[i].upper() not in d:\n            d[str1[i].upper()] = [i]\n        else:\n            d[str1[i].upper()].append(i)\n    return d\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # count = 0\n    # for i in range(len(A)):\n    #     for j in range(i+1, len(A)):\n    #         if (A[i] ^ A[j]) % 2 == 0:\n    #             count += 1\n    # return count\n    return len([a for a in A if a % 2 == 0]) * len([a for a in A if a % 2 == 1])\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_2(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_3(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_4(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_5(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_6(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_7(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_8(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_9(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_10(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_11(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_12(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_13(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_14(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_15(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_16(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_17(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_18(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_19(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_20(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_21(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([i for i in A if (i ^ (i + 1)) / 2 == i])\n    return len([i for i in A if ((i ^ i + 1) / 2) == i])\n    \ndef find_even_pair_22(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that "
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    answer = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                answer += 1\n    return answer\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # The xor of an even number is 0\n    # The xor of an odd number is 1\n    # An even number cannot be odd\n    # An odd number cannot be even\n    # The number of pairs is the number of even numbers divided by 2\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i,len(A)):\n            if ((A[i]^A[j])&1) == 0:\n                count += 1\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    XORs = {}\n    for i in A:\n        if i in XORs:\n            XORs[i] += 1\n        else:\n            XORs[i] = 1\n    ans = 0\n    for i in XORs:\n        if (i & 1) == 0 and XORs[i] > 1:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair = 0 \n    for i in xrange(len(A)-1): \n        for j in xrange(i+1, len(A)): \n            if A[i] ^ A[j] & 1 == 0: \n                pair += 1 \n    return pair \n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    odd_sum = 0\n    even_sum = 0\n    for i in range(0, len(A), 2):\n        if A[i] ^ A[i+1] % 2 == 0:\n            even_sum += 1\n        else:\n            odd_sum += 1\n    return even_sum*odd_sum\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return (2**(n-1))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    x = 1\n    while x <= n:\n        x = x * 2\n    return x\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    n = int(n)\n    power_of_2 = 1\n    while (power_of_2 < n):\n        power_of_2 *= 2\n    return power_of_2\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Source: http://stackoverflow.com/a/12406813/1250368\n    for i in range(n,1,-1):\n        if i**2 <= n:\n            return i**2\n        return i**2\n    #return 2**next_power_of_2(n)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 << (n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res = 1\n    while res < n:\n        res *= 2\n    return res\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # This is a simple binary search problem, we need a function to check whether an integer n is a power of 2\n    # First we check if n is power of 2 by checking the highest power of 2 that is less than or equal to n\n    power = 1\n    while power <= n:\n        power *= 2\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if n <= 0:\n        return 1\n    \n    return 1 << (n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n - 1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x not in a:\n        return 0\n    else:\n        return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if(a[i] == x):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            b = b + 1\n    return b\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b = 0\n    for i in a:\n        if i == x:\n            b+=1\n    return b\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = sorted(a)\n    if x in a:\n        return a.count(x)\n    else:\n        return \"Number does not exist in list\"\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n    \ndef insertion(a):\n    '''\n    Write a function to sort the given list using insertion sort.\n    '''\n    for i in range(1, len(a)):\n        key = a[i]\n        j = i - 1\n        while j >= 0 and a[j] > key:\n            a[j + 1] = a[j]\n            j -= 1\n        a[j + 1] = key\n    return a\n    \ndef merge(a, b):\n    '''\n    Write a function to merge two given sorted lists into a new sorted list.\n    '''\n    a.extend(b)\n    a.sort()\n    return a\n    \ndef palindrome(a):\n    '''\n    Write a function to determine if the given string is a palindrome.\n    '''\n    s = \"\"\n    for i in a:\n        if i == \" \":\n            continue\n        s += i\n    if s == s[::-1]:\n        return True\n    return False\n    \ndef max_product(a, b):\n    '''\n    Write a function to find the maximum product of two integers in a given list of integers.\n    '''\n    m = a[0] * b[0]\n    for i in range(1, len(a)):\n        if a[i] * b[i] > m:\n            m = a[i] * b[i]\n    return m\n    \ndef all_sublists(a):\n    '''\n    Write a function to find all sublists in the given list that sum to 0.\n    '''\n    sublist = []\n    for i in range(len(a)):\n        t = []\n        t.append(a[i])\n        for j in range(i+1, len(a)):\n            t.append(a[j])\n            if sum(t) == 0:\n                sublist.append(t)\n    return sublist\n    \ndef sieve_of_eratosthenes(n):\n    '''\n    Write a function to find the primes less than the given number using Sieve of Eratosthenes.\n    '''\n    sieve = [True for i in range(n)]\n    p = 2\n    while p * p <= n:\n        if sieve[p]:\n            for i in range(p*p, n, p):\n                sieve[i] = False\n        p += 1\n    primes = []\n    for i in range(2, n):\n        if sieve[i]:\n            primes.append(i)\n    return primes\n    \ndef largest_non_adjacent(a):\n    '''\n    Write a function to find the largest element that does not appear in its left or right side.\n    '''\n    max_left = 0\n    max_right = 0\n    max_sum = 0\n    for i in range(len(a)):\n        if i == 0:\n            max_left = a[i]\n            max_sum = max(max_sum, max_left)\n        else:\n            if max_left > a[i]:\n                max_sum = max(max_sum, max_left)\n            else:\n                max_sum = max(max_sum, a[i])\n            max_right = a[len(a) - 1 - i]\n            max_sum = max(max_sum, max_right)\n    return max_sum\n    \ndef nth_prime(n):\n    '''\n    Write a function to find the nth prime number.\n    '''\n    i = 1\n    primes = [2]\n    while i < n:\n        for p in primes:\n            if p > 2 and p*p > i:\n                primes.append(i)\n                i += 1\n                break\n            if i % p == 0:\n                break\n    return primes[n-1]\n    \ndef count_characters(a):\n    '''\n    Write a function to count the number of characters in the string.\n    '''\n    count = 0\n    for i in a:\n        count += 1\n    return count\n    \ndef reverse_string(a):\n    '''\n    Write a function to reverse a given string.\n    '''\n    s = \"\"\n    for i in a:\n        s = i + s\n    return s\n    \ndef reverse_list(a):\n    '''\n    Write a function to reverse a given list.\n    '''\n    s = []\n    for i in a:\n        s.insert(0, i)\n    return s\n    \ndef reverse_list_2(a):\n    '''\n    Write a function to reverse a given list using recursion.\n    '''\n    if len(a) == 1:\n        return [a[0]]\n    return [a[len(a)-1]] + reverse_list_2(a[0:len(a)-1])\n    \ndef largest_palindrome(a):\n    '''\n    Write a function to find the largest palindrome that can be made by any combination of numbers from the given list.\n    '''\n    largest = 0\n    for i in a:\n        for j in a:\n            t = i * j\n            if t > largest and str(t) == str(t)[::-1]:\n                largest = t\n    return largest\n    \ndef rotated_array_search(a, x):\n    '''\n    Write a function to search for an element in a rotated sorted array.\n    '''\n    p = 0\n    q = len(a) - 1\n    while p <= q:\n        mid = (p+q) / 2\n        if a[mid] == x:\n            return mid\n        if a[p] <= a[mid]:\n            if a[p] <= x and x < a[mid]:\n                q = mid - 1\n            else:\n                p = mid + 1\n        else:\n            if a[mid] < x and x <= a[q]:\n                p = mid + 1\n            else:\n                q = mid - 1\n    return -1\n    \ndef find_duplicate(a):\n    '''\n    Write a function to find an element that appears more than once in an array.\n    '''\n    for i in a:\n        if a.count(i) > 1:\n            return i\n    return -1\n    \ndef find_rotated_duplicate(a):\n    '''\n    Write a function to find an element that appears more than once in an array and also is a duplicate.\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if a[mid] == a[mid-1]:\n            left = mid + 1\n        elif a[mid] == a[mid+1]:\n            right = mid - 1\n        else:\n            return a[mid]\n    return -1\n    \ndef find_rotated_duplicate_optimized(a):\n    '''\n    Write a function to find an element that appears more than once in an array and also is a duplicate.\n    '''\n    p = 0\n    q = len(a) - 1\n    while p <= q:\n        if a[p] == a[q]:\n            p += 1\n            q -= 1\n        elif a[p] < a[q]:\n            q -= 1\n        else:\n            p += 1\n    return a[p]\n    \ndef find_rotated_duplicate_optimized_2(a):\n    '''\n    Write a function to find an element that appears more than once in an array and also is a duplicate.\n    '''\n    for i in range(len(a)):\n        if a[i]!= a[(i+1) % len(a)]:\n            return a[i]\n    return -1\n    \ndef find_rotated_duplicate_optimized_3(a):\n    '''\n    Write a function to find an element that appears more than once in an array and also is a duplicate.\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if a[mid] == a[mid-1]:\n            left = mid + 1\n        elif a[mid] == "
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= n:\n        return sum(list1[m:n+1])\n    else:\n        return sum(list1[m:n-1:-1])\n    \n    \ndef even_numbers_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find all even numbers in a list within a range specified by two indices.\n    '''\n    return [x for x in list1[m:n+1] if x%2 == 0]\n    \n    \ndef odd_numbers_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find all odd numbers in a list within a range specified by two indices.\n    '''\n    return [x for x in list1[m:n+1] if x%2!= 0]\n    \n    \ndef longest_common_prefix_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the longest common prefix of a list within a range specified by two indices.\n    '''\n    return list1[m].split('.')[0]\n    \n    \ndef minimum_value_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the minimum value in a list within a range specified by two indices.\n    '''\n    return min(list1[m:n+1])\n    \n    \ndef maximum_value_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the maximum value in a list within a range specified by two indices.\n    '''\n    return max(list1[m:n+1])\n    \n    \ndef average_value_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the average of all values in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])/float(n-m+1)\n    \n    \ndef sum_of_list_values(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of all values in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n    \n    \ndef sum_of_list_values_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of all values in a list within a range specified by two indices.\n    '''\n    return sum([x for x in list1[m:n+1]])\n    \n    \ndef absolute_value_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the absolute value of all values in a list within a range specified by two indices.\n    '''\n    return [abs(x) for x in list1[m:n+1]]\n    \n    \ndef absolute_value_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the absolute value of all values in a list within a range specified by two indices.\n    '''\n    return [abs(x) for x in list1[m:n+1]]\n    \n    \ndef reverse_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to reverse a list within a range specified by two indices.\n    '''\n    list1[m:n+1] = list1[m:n+1][::-1]\n    \n    \ndef reverse_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to reverse a list within a range specified by two indices.\n    '''\n    list1[m:n+1] = list1[m:n+1][::-1]\n    \n    \ndef length_of_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the length of a list within a range specified by two indices.\n    '''\n    return n-m+1\n    \n    \ndef length_of_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the length of a list within a range specified by two indices.\n    '''\n    return [len(list1[m:n+1])]\n    \n    \ndef sort_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to sort a list within a range specified by two indices.\n    '''\n    list1[m:n+1] = sorted(list1[m:n+1])\n    \n    \ndef sort_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to sort a list within a range specified by two indices.\n    '''\n    list1[m:n+1] = sorted(list1[m:n+1])\n    \n    \ndef split_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to split a list into two parts within a range specified by two indices.\n    '''\n    list1[m:n+1], list1[m:n+1] = list1[m:n+1][:n-m], list1[m:n+1][n-m:]\n    \n    \ndef split_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to split a list into two parts within a range specified by two indices.\n    '''\n    list1[m:n+1], list1[m:n+1] = list1[m:n+1][:n-m], list1[m:n+1][n-m:]\n    \n    \ndef sum_all_values_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of all values in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n    \n    \ndef sum_all_values_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of all values in a list within a range specified by two indices.\n    '''\n    return sum([x for x in list1[m:n+1]])\n    \n    \ndef average_all_values_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the average of all values in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])/float(n-m+1)\n    \n    \ndef average_all_values_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the average of all values in a list within a range specified by two indices.\n    '''\n    return sum([x for x in list1[m:n+1]])/float(n-m+1)\n    \n    \ndef standard_deviation_value(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the standard deviation of all values in a list within a range specified by two indices.\n    '''\n    return statistics.stdev(list1[m:n+1])\n    \n    \ndef standard_deviation_value_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the standard deviation of all values in a list within a range specified by two indices.\n    '''\n    return statistics.stdev([x for x in list1[m:n+1]])\n    \n    \ndef sum_of_squares_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of squares of all values in a list within a range specified by two indices.\n    '''\n    return sum([x**2 for x in list1[m:n+1]])\n    \n    \ndef sum_of_squares_list_list(list1, m, n)"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for item in list1[m:n+1]:\n        sum += item\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if n > len(list1) - 1:\n        return None\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in list1[m:n+1]:\n        total += i\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == 0:\n        return sum(list1[n:])\n    elif n == len(list1):\n        return sum(list1[m:])\n    else:\n        return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for item in list1[m:n]:\n        total += item\n    return total\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    pentagon_perimeter = (a*5)*math.sqrt(5)/2\n    return pentagon_perimeter\n    \ndef test_perimeter_pentagon():\n    '''\n    The function perimeter_pentagon should return 1.75 for pentagon with side length 5.\n    '''\n    pentagon_perimeter = perimeter_pentagon(5)\n    assert pentagon_perimeter == 1.75\n    \ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    nonagon_perimeter = (a*4*math.sqrt(3)/2)\n    return nonagon_perimeter\n    \ndef test_perimeter_nonagon():\n    '''\n    The function perimeter_nonagon should return 2.9 for nonagon with side length 3.\n    '''\n    nonagon_perimeter = perimeter_nonagon(3)\n    assert nonagon_perimeter == 2.9\n    \ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    hexagon_perimeter = (a*6)*math.sqrt(3)/2\n    return hexagon_perimeter\n    \ndef test_perimeter_hexagon():\n    '''\n    The function perimeter_hexagon should return 4.5 for hexagon with side length 5.\n    '''\n    hexagon_perimeter = perimeter_hexagon(5)\n    assert hexagon_perimeter == 4.5\n    \ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    heptagon_perimeter = (a*7)*math.sqrt(7)/2\n    return heptagon_perimeter\n    \ndef test_perimeter_heptagon():\n    '''\n    The function perimeter_heptagon should return 6.8 for heptagon with side length 5.\n    '''\n    heptagon_perimeter = perimeter_heptagon(5)\n    assert heptagon_perimeter == 6.8\n    \ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    octagon_perimeter = (a*8)*math.sqrt(8)/2\n    return octagon_perimeter\n    \ndef test_perimeter_octagon():\n    '''\n    The function perimeter_octagon should return 10.5 for octagon with side length 5.\n    '''\n    octagon_perimeter = perimeter_octagon(5)\n    assert octagon_perimeter == 10.5\n    \ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    nonagon_perimeter = (a*7)*math.sqrt(7)/2\n    return nonagon_perimeter\n    \ndef test_perimeter_nonagon():\n    '''\n    The function perimeter_nonagon should return 9.4 for nonagon with side length 3.\n    '''\n    nonagon_perimeter = perimeter_nonagon(3)\n    assert nonagon_perimeter == 9.4\n    \ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    heptagon_perimeter = (a*7)*math.sqrt(7)/2\n    return heptagon_perimeter\n    \ndef test_perimeter_heptagon():\n    '''\n    The function perimeter_heptagon should return 14.6 for heptagon with side length 5.\n    '''\n    heptagon_perimeter = perimeter_heptagon(5)\n    assert heptagon_perimeter == 14.6\n    \ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    hexagon_perimeter = (a*6)*math.sqrt(6)/2\n    return hexagon_perimeter\n    \ndef test_perimeter_hexagon():\n    '''\n    The function perimeter_hexagon should return 12.5 for hexagon with side length 5.\n    '''\n    hexagon_perimeter = perimeter_hexagon(5)\n    assert hexagon_perimeter == 12.5\n    \ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    octagon_perimeter = (a*8)*math.sqrt(8)/2\n    return octagon_perimeter\n    \ndef test_perimeter_octagon():\n    '''\n    The function perimeter_octagon should return 18.7 for octagon with side length 5.\n    '''\n    octagon_perimeter = perimeter_octagon(5)\n    assert octagon_perimeter == 18.7\n    \ndef perimeter_star(a):\n    '''\n    Write a function to find the perimeter of a star from the length of its sides.\n    '''\n    star_perimeter = a*(a+1)\n    return star_perimeter\n    \ndef test_perimeter_star():\n    '''\n    The function perimeter_star should return 25.5 for star with side length 5.\n    '''\n    star_perimeter = perimeter_star(5)\n    assert star_perimeter == 25.5\n    \ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    square_perimeter = a*4\n    return square_perimeter\n    \ndef test_perimeter_square():\n    '''\n    The function perimeter_square should return 16 for square with side length 5.\n    '''\n    square_perimeter = perimeter_square(5)\n    assert square_perimeter == 16\n    \ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from the length of its sides.\n    '''\n    rectangle_perimeter = 2*(a+b)\n    return rectangle_perimeter\n    \ndef test_perimeter_rectangle():\n    '''\n    The function perimeter_rectangle should return 22.5 for rectangle with sides length 5,6.\n    '''\n    rectangle_perimeter = perimeter_rectangle(5,6)\n    assert rectangle_perimeter == 22.5\n    \ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a rhombus from the length of its sides.\n    '''\n    rhombus_perimeter = (a*4*math.sqrt(3))/2\n    return rhombus_perimeter\n    \ndef test_perimeter_rhombus():\n    '''\n    The function perimeter_rhombus should return 13.8 for rhombus with side length 5.\n    '''\n    rhombus_perimeter = perimeter_rhombus(5)\n    assert rhombus_perimeter == 13.8\n    \ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    triangle_perimeter = a+b+c\n    return triangle_perimeter\n    \ndef test_perimeter_triangle():\n    '''\n    The function perimeter_triangle should return 16.5 for triangle with sides length 5,6,7.\n    '''\n    triangle_perimeter = perimeter_triangle(5,6,7)\n    assert triangle_perimeter == 16.5\n    \ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a non-right-angle triangle from the length of its sides.\n    '''\n    triangle_perimeter = a+b+c\n    return triangle_perimeter\n    \ndef test_perimeter_triangle():\n    '''\n    The function perimeter_triangle should return 17.8 for non-right-angle triangle with sides length 5,7,8.\n    '''\n    triangle_perimeter = perimeter_triangle(5,7,8)\n    assert triangle_perimeter == 17.8"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    side = a/math.sqrt(5)\n    return (5*side)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5*3**0.5\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5+10*math.sqrt(5)-10*math.sqrt(5)*math.sqrt(5)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6+8*math.sqrt(3)+8*math.sqrt(3)*math.sqrt(3)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7+12*math.sqrt(7)+12*math.sqrt(7)*math.sqrt(7)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8+12*math.sqrt(2)+12*math.sqrt(2)*math.sqrt(2)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9+8*math.sqrt(3)+8*math.sqrt(3)*math.sqrt(3)\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a*10+10*math.sqrt(5)+10*math.sqrt(5)*math.sqrt(5)\ndef perimeter_decagonal(a):\n    '''\n    Write a function to find the perimeter of a regular decagonal from the length of its sides.\n    '''\n    return a*11+6*math.sqrt(7)+6*math.sqrt(7)*math.sqrt(7)\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a*12+8*math.sqrt(2)+8*math.sqrt(2)*math.sqrt(2)\ndef perimeter_tridecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tridecagon from the length of its sides.\n    '''\n    return a*13+4*math.sqrt(3)+4*math.sqrt(3)*math.sqrt(3)\ndef perimeter_tetradecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetradecagon from the length of its sides.\n    '''\n    return a*14+10*math.sqrt(4)+10*math.sqrt(4)*math.sqrt(4)\ndef perimeter_petadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular petadecagon from the length of its sides.\n    '''\n    return a*15+8*math.sqrt(5)+8*math.sqrt(5)*math.sqrt(5)\ndef perimeter_hexadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexadecagon from the length of its sides.\n    '''\n    return a*16+12*math.sqrt(6)+12*math.sqrt(6)*math.sqrt(6)\ndef perimeter_heptadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptadecagon from the length of its sides.\n    '''\n    return a*17+10*math.sqrt(7)+10*math.sqrt(7)*math.sqrt(7)\ndef perimeter_octadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular octadecagon from the length of its sides.\n    '''\n    return a*18+10*math.sqrt(2)+10*math.sqrt(2)*math.sqrt(2)\ndef perimeter_enodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular enodecagon from the length of its sides.\n    '''\n    return a*19+8*math.sqrt(3)+8*math.sqrt(3)*math.sqrt(3)\ndef perimeter_dodecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecadecagon from the length of its sides.\n    '''\n    return a*20+6*math.sqrt(4)+6*math.sqrt(4)*math.sqrt(4)\ndef perimeter_decenidecagon(a):\n    '''\n    Write a function to find the perimeter of a regular decenidecagon from the length of its sides.\n    '''\n    return a*21+8*math.sqrt(5)+8*math.sqrt(5)*math.sqrt(5)\ndef perimeter_centenidecagon(a):\n    '''\n    Write a function to find the perimeter of a regular centenidecagon from the length of its sides.\n    '''\n    return a*22+4*math.sqrt(7)+4*math.sqrt(7)*math.sqrt(7)\ndef perimeter_undecenidecagon(a):\n    '''\n    Write a function to find the perimeter of a regular undecenidecagon from the length of its sides.\n    '''\n    return a*23+6*math.sqrt(2)+6*math.sqrt(2)*math.sqrt(2)\ndef perimeter_dodecadeceven(a):\n    '''\n    Write a function to find the perimeter of a regular dodecadeceven from the length of its sides.\n    '''\n    return a*24+6*math.sqrt(3)+6*math.sqrt(3)*math.sqrt(3)\ndef perimeter_tredecadeceven(a):\n    '''\n    Write a function to find the perimeter of a regular tredecadeceven from the length of its sides.\n    '''\n    return a*25+10*math.sqrt(4)+10*math.sqrt(4)*math.sqrt(4)\ndef perimeter_tetradeceven(a):\n    '''\n    Write a function to find the perimeter of a regular tetradeceven from the length of its sides.\n    '''\n    return a*26+8*math.sqrt(5)+8*math.sqrt(5)*math.sqrt(5)\ndef perimeter_petadeceven(a):\n    '''\n    Write a function to find the perimeter of a regular petadeceven from the length of its sides.\n    '''\n    return a*27+10*math.sqrt(6)+10*math.sqrt(6)*math.sqrt(6)\ndef perimeter_hexadeceven(a):\n    '''\n    Write a function to find the perimeter of a regular hexadeceven from the length of its sides.\n    '''\n    return a*28+12*math.sqrt(7)+12*math.sqrt(7)*math.sqrt(7)\ndef perimeter_heptadeceven(a):\n    '''\n    Write a function to find the perimeter of a regular heptadeceven from the length of its sides.\n    '''\n    return a*29+10*math.sqrt(2)+10*math.sqrt(2)*math.sqrt(2)\ndef perimeter_octadeceven(a):\n    '''\n    Write a function to find the perimeter of a regular octadeceven from the length of its sides.\n    '''\n    return a*30+10*math.sqrt(3)+10*math.sqrt(3)*math.sqrt(3)\ndef perimeter_enodeceven(a):\n    '''\n    Write a function to find the perimeter of a regular enodeceven from the length of its sides.\n    '''\n    return a*31+8*math.sqrt(4)+8*math.sqrt(4)*math.sqrt(4)\ndef perimeter_dodeceven(a):\n    '''\n    Write a function to find the perimeter of a regular dodeceven from the length of its sides.\n    '''\n    return a*32+"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * (a**2)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2 * a * 5 * math.sqrt(5)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 3*a + 4*a**2*math.sqrt(2)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5*2*math.sqrt(5)/2\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    #print (math.sqrt(3)*a)\n    return (math.sqrt(3)*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + a * math.sqrt(5) + (a * math.sqrt(5) + a) * math.sqrt(5)\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    l = len(s)\n    count = 0\n    for i in range(l):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for c in s:\n        if c == 'd':\n            count += 1\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s is None:\n        return 0\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    str1 ='std'\n    return s.count(str1)\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 0 if s!='std' else 1\n    else:\n        occurances = 0\n        for i in range(len(s)):\n            if s[i:i+3] =='std':\n                occurances += 1\n        return occurances\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if not s:\n        return 0\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = ('a',1,3,4,2)\n    print \"Input Tuple: \", test_tuple\n    def is_type_consistent(test_tuple):\n        '''\n        Write a function to check if all the elements in tuple have same data type or not.\n        '''\n        if len(set(type(i) for i in test_tuple)) > 1:\n            return False\n        return True\n    return is_type_consistent(test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for ele in test_tuple:\n        type_list.append(type(ele))\n    return type_list\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    def check(data):\n        if data == type(data):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(1,len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    if isinstance(test_tuple[0], int) or isinstance(test_tuple[0], float):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_tuple = []\n    for i in test_tuple:\n        type_tuple.append(type(i))\n    if len(set(type_tuple)) == 1:\n        return True\n    else:\n        return False\n    \nif __name__ == '__main__':\n    test_tuple = (1, 2, 3, 4, 5, 6)\n    print check_type(test_tuple)"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for x in test_tuple:\n        if type(x)!= type(test_tuple[0]):\n            return False\n    return True\n    \ndef check_type_tuple(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple)!= tuple:\n        return False\n    else:\n        for x in test_tuple:\n            if type(x)!= type(test_tuple[0]):\n                return False\n        return True\n    \n    \ndef count_each_type(list_type):\n    '''\n    Write a function to count the number of each type in a list.\n    '''\n    from collections import Counter\n    return Counter(list_type)\n    \ndef combine_list(list_1, list_2):\n    '''\n    Write a function to combine two list by element wise addition.\n    '''\n    from numpy import add\n    return add(list_1, list_2)\n    \ndef count_type(list_type):\n    '''\n    Write a function to count the number of each type in a list.\n    '''\n    from collections import Counter\n    return Counter(list_type)\n    \n    \ndef find_min(list_num):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    return min(list_num)\n    \n    \ndef find_max(list_num):\n    '''\n    Write a function to find the maximum value in a list.\n    '''\n    return max(list_num)\n    \ndef mean(list_num):\n    '''\n    Write a function to find the mean value in a list.\n    '''\n    return sum(list_num) / len(list_num)\n    \ndef median(list_num):\n    '''\n    Write a function to find the median value in a list.\n    '''\n    import numpy as np\n    return np.median(list_num)\n    \ndef variance(list_num):\n    '''\n    Write a function to find the variance value in a list.\n    '''\n    from numpy import var\n    return var(list_num)\n    \ndef standard_deviation(list_num):\n    '''\n    Write a function to find the standard deviation value in a list.\n    '''\n    from numpy import std\n    return std(list_num)\n    \ndef mode(list_num):\n    '''\n    Write a function to find the mode value in a list.\n    '''\n    from collections import Counter\n    return Counter(list_num).most_common(1)[0][0]\n    \ndef remove_duplicates(list_num):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return set(list_num)\n    \ndef modal_value(list_num):\n    '''\n    Write a function to find the modal value in a list.\n    '''\n    from collections import Counter\n    return Counter(list_num).most_common(1)[0][0]\n    \ndef first_digit(n):\n    '''\n    Write a function to find the first digit in a number.\n    '''\n    return n % 10\n    \ndef odd_digit_number(n):\n    '''\n    Write a function to check if a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef even_digit_number(n):\n    '''\n    Write a function to check if a number is even.\n    '''\n    return n % 2 == 0\n    \ndef odd_digit_number_list(n):\n    '''\n    Write a function to check if a number is odd.\n    '''\n    return [1 if n % 2!= 0 else 0]\n    \ndef even_digit_number_list(n):\n    '''\n    Write a function to check if a number is even.\n    '''\n    return [1 if n % 2 == 0 else 0]\n    \ndef add_digit_list(list_n):\n    '''\n    Write a function to add the first and second digit of a list.\n    '''\n    return [int(str(x)[0]) + int(str(x)[1]) for x in list_n]\n    \ndef check_second_digit(list_n):\n    '''\n    Write a function to check if the second digit in a list is even or not.\n    '''\n    return [1 if len(str(x)) == 2 and int(str(x)[1]) % 2 == 0 else 0 for x in list_n]\n    \ndef check_second_digit_list(list_n):\n    '''\n    Write a function to check if the second digit in a list is even or not.\n    '''\n    return [1 if len(str(x)) == 2 and int(str(x)[1]) % 2 == 0 else 0 for x in list_n]\n    \ndef sum_of_list(list_num):\n    '''\n    Write a function to find the sum of a list.\n    '''\n    return sum(list_num)\n    \ndef multiply_list(list_n):\n    '''\n    Write a function to find the product of all the elements in a list.\n    '''\n    return reduce(lambda x, y: x * y, list_n)\n    \ndef multiply_list_list(list_n):\n    '''\n    Write a function to find the product of all the elements in a list.\n    '''\n    return [reduce(lambda x, y: x * y, list_n)]\n    \ndef first_digit_of_list(list_n):\n    '''\n    Write a function to find the first digit of a list.\n    '''\n    return [int(str(x)[0]) for x in list_n]\n    \ndef last_digit_of_list(list_n):\n    '''\n    Write a function to find the last digit of a list.\n    '''\n    return [int(str(x)[-1]) for x in list_n]\n    \ndef test_function(function_name, test_tuple):\n    '''\n    Write a test function for a function.\n    '''\n    return function_name(*test_tuple)\n    \ndef test_function_tuple(function_name, test_tuple):\n    '''\n    Write a test function for a function.\n    '''\n    if check_type_tuple(test_tuple):\n        return function_name(*test_tuple)\n    else:\n        return \"Invalid type\"\n    \ndef test_function_list(function_name, list_num):\n    '''\n    Write a test function for a function.\n    '''\n    if check_type(list_num):\n        return function_name(*list_num)\n    else:\n        return \"Invalid type\"\n    \ndef test_function_tuple_list(function_name, list_num):\n    '''\n    Write a test function for a function.\n    '''\n    if check_type_tuple(list_num):\n        return function_name(*list_num)\n    else:\n        return \"Invalid type\"\n    \n    \ndef test_function_list_list(function_name, list_num):\n    '''\n    Write a test function for a function.\n    '''\n    if check_type(list_num):\n        return function_name(*list_num)\n    else:\n        return \"Invalid type\"\n    \ndef test_function_tuple_tuple(function_name, test_tuple):\n    '''\n    Write a test function for a function.\n    '''\n    if check_type(test_tuple):\n        return function_name(*test_tuple)\n    else:\n        return \"Invalid type\"\n    \n    \ndef test_function_tuple_list_list(function_name, list_num):\n    '''\n    Write a test function for a function.\n    '''\n    if check_type_tuple(list_num):\n        return function_name(*list_num)\n    else:\n        return \"Invalid type\"\n    \n    \ndef test_function_list_tuple(function_name, list_num):\n    '''\n    Write a test function for a function.\n    '''\n    if check_type(list"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #write your logic here\n    if len(test_tuple)==0:\n        return True\n    elif len(test_tuple)==1:\n        return True\n    else:\n        return test_tuple[0]==test_tuple[1]\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return tuple(map(type, test_tuple))\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # set count to 0\n    count = 0\n    # iterate through arr\n    for i in arr:\n        # if x is the current element\n        if i == x:\n            # increment count\n            count += 1\n    # if count is greater than n/2\n    if count > n/2:\n        # return true\n        return True\n    # otherwise false\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    \n    for i in range(0,n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    arr.remove(x)\n    count = 0\n    for item in arr:\n        if item == x:\n            count += 1\n    if count > len(arr) / 2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counter = 0\n    for i in range(n):\n        if arr[i] == x:\n            counter += 1\n    if counter > n / 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == arr[1] and arr[0] == x or arr[1] == arr[0] and arr[1] == x\n    if arr[0] == x:\n        return is_majority(arr[1:], n-1, x)\n    if arr[-1] == x:\n        return is_majority(arr[:-1], n-1, x)\n    else:\n        return is_majority(arr[1:], n-1, x) or is_majority(arr[:-1], n-1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # base case: empty array\n    if n == 0:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counter = 0\n    for i in range(n):\n        if arr[i] == x:\n            counter += 1\n    if counter > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l = 0\n    r = n - 1\n    while l <= r:\n        if arr[l] == x and arr[r] == x:\n            return True\n        elif arr[l] == x:\n            r -= 1\n        elif arr[r] == x:\n            l += 1\n        elif arr[l]!= x and arr[r]!= x:\n            l += 1\n            r -= 1\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    def majority_element(arr):\n        arr_len = len(arr)\n        if arr_len == 1:\n            return arr[0]\n        elif arr_len == 2:\n            return [arr[0], arr[1]][arr[0] == arr[1]]\n        else:\n            half = arr_len / 2\n            if arr[:half] == arr[half:]:\n                return arr[half]\n            elif arr[:half] == arr[half + 1:]:\n                return arr[half + 1]\n            else:\n                return majority_element(arr[:half])\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if n is 1 then return true if arr[0] == x\n    # else return false\n    if n == 1:\n        return True if arr[0] == x else False\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n &= n - 1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Python program to Count the number of set bits in a given number\n    count = 0\n    while (n):\n        n &= n - 1\n        count += 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while (n): \n        if n%2 == 1: \n            count += 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while n:\n        n=n&(n-1)\n        count+=1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize result \n    count = 0\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bin_str = bin(n)\n    count = 0\n    for i in bin_str[2:]:\n        if i == '1':\n            count += 1\n    return count\n    \ndef bitwise_And(n1, n2): \n    '''\n    Write a python function to compute the bitwise and of two given numbers.\n    '''\n    if n1 > 1:\n        for i in range(n1-1):\n            n1 = n1 & (n1-1)\n    return n1&n2\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    if (n & 1) == 1:\n        count += 1\n    while n:\n        n = n >> 1\n        if n & 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        if (n & 1): \n            count+=1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        if n & 1:\n            count+=1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c=0\n    while(n):\n        c+=n&1\n        n>>=1\n    return c\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = str[1::2]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list=list(str)\n    if len(str_list)%2==0:\n        for i in range(len(str_list)//2):\n            str_list[i],str_list[-i-1]=str_list[-i-1],str_list[i]\n    return ''.join(str_list)\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #return str[0::2]\n    return \"\".join(str[0::2])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([ch for ch in str[::2]])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([str[i] for i in range(len(str)) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string_list = list(str)\n    new_str = \"\"\n    for i in range(len(string_list)):\n        if i % 2 == 0:\n            new_str += string_list[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #A function to remove the characters which have odd index values of a given string.\n    new_str = ''\n    for i in range(len(str)):\n        if i%2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str is None:\n        return None\n    else:\n        return str[::2]\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        return c\n    if b < c:\n        return b\n    return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    if a <= b:\n        if b <= c:\n            return b\n        elif a <= c:\n            return c\n        else:\n            return a\n    elif b <= c:\n        return b\n    elif a <= c:\n        return c\n    else:\n        return a\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # Assume min of three is the first\n    min_val = a\n    if b < a and b < c:\n        min_val = b\n    if c < a and c < b:\n        min_val = c\n    return min_val\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = None\n    if a < b:\n        if a < c:\n            min = a\n        else:\n            min = c\n    else:\n        if b < c:\n            min = b\n        else:\n            min = c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    elif b<c:\n        return b\n    else:\n        return c\n    \n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #n is the given number\n    #l is the lower bound of the range\n    #r is the upper bound of the range\n    return not any(1<<i for i in range(l,r+1))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        if n&(1<<l)==0 and n&(1<<(l+1))==0 and n&(1<<(l+2))==0 and n&(1<<(l+3))==0:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l-1\n    for i in range(l,r):\n        if(n&(1<<i)!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bit_num = 1\n    while(bit_num <= r):\n        if ((n & bit_num) == 0):\n            bit_num = bit_num << 1\n        else:\n            return 0\n    if (bit_num > l):\n        return 0\n    return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(l>r):\n        return False\n    if(l<=r and r==2):\n        return True\n    if(r<=2):\n        return True\n    #else\n    if((n&(1<<r-1)==0) and (n&(1<<l-1)==0)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all(n & 2**i for i in range(l,r+1))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = int(n)\n    l = int(l)\n    r = int(r)\n    if n < 0:\n        return False\n    elif (n >= l) and (n <= r):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r):\n        if (n & (1<<i)!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not any(map(lambda x: (x & (1 << n)) > 0,range(l,r+1)))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    a = (n & l) == l\n    b = (n & r) == r\n    return a and b\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    ans = []\n    for i in range(n):\n        if arr[i] < 0:\n            ans.append(arr[i])\n    for i in range(n):\n        if arr[i] >= 0:\n            ans.append(arr[i])\n    return ans\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr, key=lambda x: (x < 0, x))[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # helper function to sort the array\n    def helper(arr, n):\n        return [x for (y,x) in sorted(zip(arr[:n],range(n)), key=lambda p: p[0])]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # If input array is not a list\n    if not isinstance(arr, list):\n        return None\n    # If input array is empty\n    if len(arr) == 0:\n        return None\n    # If n is not a valid positive integer\n    if n < 1:\n        return None\n    # Initialize negative_array and positive_array\n    negative_array = []\n    positive_array = []\n    # Sort array elements into positive and negative arrays\n    for i in arr:\n        if i < 0:\n            negative_array.append(i)\n        else:\n            positive_array.append(i)\n    # Initialize re-arranged array\n    rearranged_array = []\n    # Append first n elements from positive_array\n    if n > len(positive_array):\n        n = len(positive_array)\n    for i in range(0, n):\n        rearranged_array.append(positive_array[i])\n    # Append first n elements from negative_array\n    if n > len(negative_array):\n        n = len(negative_array)\n    for i in range(0, n):\n        rearranged_array.append(negative_array[i])\n    # Return re-arranged array\n    return rearranged_array\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    while j < n and i < len(arr):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    arr = [abs(x) for x in arr]\n    arr = arr[0:n] + [x for x in arr[n:] if x < 0] + [x for x in arr[n:] if x >= 0]\n    \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    return negative + positive\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    arr = arr[:n]\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < 0:\n            arr.insert(i, -arr[i])\n            arr.pop(i+1)\n            n += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    negative = []\n    for i in arr[:n]:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    return positive+negative\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_copy = arr[:n]\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            arr_copy.append(arr[i])\n        elif arr[i] > 0:\n            arr_copy.insert(0, arr[i])\n    return arr_copy\n    \ndef main():\n    #array1 = [1, 2, -3, 4, -5, 6, 7, 8, -9]\n    #array2 = [2, -1, 3, -4, 5, -6, 7, 8, -9]\n    #array3 = [1, -2, -3, 4, -5, 6, -7, 8, -9]\n    #array4 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    #array5 = [1, 2, 3, 4, 5, 6, -7, 8, 9]\n    array1 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array2 = [1, 2, 3, 4, 5, 6, -7, 8, 9]\n    array3 = [-1, 2, -3, -4, -5, 6, -7, 8, 9]\n    array4 = [1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array5 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array6 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array7 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array8 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array9 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array10 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array11 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array12 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array13 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array14 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array15 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array16 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array17 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array18 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array19 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    array20 = [-1, -2, -3, -4, -5, 6, -7, 8, 9]\n    \n    print(re_arrange_array(array1, 2))\n    print(re_arrange_array(array2, 2))\n    print(re_arrange_array(array3, 2))\n    print(re_arrange_array(array4, 2))\n    print(re_arrange_array(array5, 2))\n    print(re_arrange_array(array6, 2))\n    print(re_arrange_array(array7, 2))\n    print(re_arrange_array(array8, 2))\n    print(re_arrange_array(array9, 2))\n    print(re_arrange_array(array10, 2))\n    print(re_arrange_array(array11, 2))\n    print(re_arrange_array(array12, 2))\n    print(re_arrange_array(array13, 2))\n    print(re_arrange_array(array14, 2))\n    print(re_arrange_array(array15, 2))\n    print(re_arrange_array(array16, 2))\n    print(re_arrange_array(array17, 2))\n    print(re_arrange_array(array18, 2))\n    print(re_arrange_array(array19, 2))\n    print(re_arrange_array(array20, 2))\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \", char)\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Your code here\n    # Replace blank spaces with a character.\n    str1 = str1.replace(\" \",char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char in str1:\n        return str1.replace(' ','')\n    else:\n        return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    output = ''\n    for letter in str1:\n        if letter =='':\n            letter = char\n        output = output + letter\n    return output\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = []\n    for x in str1:\n        if x == \" \":\n            result.append(char)\n        else:\n            result.append(x)\n    return \"\".join(result)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1 = str1[:i] + char + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    return str1.replace(char,'')\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    char_in_str = str1.replace(' ','')\n    if char_in_str == '':\n        return char\n    else:\n        return str1.replace(' ','')\n        \ndef replace_blank(str1,char):\n    str1 = str1.replace(' ','')\n    str1 = str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    if len(list1) < n:\n        return list1\n    else:\n        return list1[-n:]\ndef m_largest_nums(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    if len(list1) < n:\n        return list1\n    else:\n        return list1[:n]\ndef smallest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    if len(list1) < n:\n        return list1\n    else:\n        return list1[:n]\ndef m_smallest_nums(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    if len(list1) < n:\n        return list1\n    else:\n        return list1[:n]\ndef digits_to_words(digit_list):\n    '''\n    Write a function that takes in a list of digits and returns a list of the same length of words made from those digits.\n    Each word must be spelled out as a sequence of those digits, with each digit being counted as it's own element in the returned list of words.\n    '''\n    digit_dict = {'0': 'zero', '1': 'one', '2': 'two', '3': 'three', '4': 'four', '5': 'five', '6':'six', '7':'seven', '8': 'eight', '9': 'nine'}\n    word_list = []\n    for i in range(len(digit_list)):\n        word_list.append(digit_dict[str(digit_list[i])])\n    return word_list\ndef count_upper_lower(str1):\n    '''\n    Write a function that takes in a string and returns a list containing the number of uppercase and lowercase letters in the string.\n    '''\n    upper_num = 0\n    lower_num = 0\n    for char in str1:\n        if char.isupper():\n            upper_num += 1\n        elif char.islower():\n            lower_num += 1\n    return [upper_num,lower_num]\ndef split_strings(str1):\n    '''\n    Write a function that takes in a string and returns a list of strings that are each character of the string broken into new strings.\n    '''\n    str_list = []\n    for char in str1:\n        str_list.append(char)\n    return str_list\ndef count_even_nums(num_list):\n    '''\n    Write a function that takes in a list of integers and returns a list of integers that represent the number of even integers in the original list.\n    '''\n    even_num_list = []\n    for num in num_list:\n        if num % 2 == 0:\n            even_num_list.append(num)\n    return even_num_list\ndef count_odd_nums(num_list):\n    '''\n    Write a function that takes in a list of integers and returns a list of integers that represent the number of odd integers in the original list.\n    '''\n    odd_num_list = []\n    for num in num_list:\n        if num % 2!= 0:\n            odd_num_list.append(num)\n    return odd_num_list\ndef min_max_diff(num_list):\n    '''\n    Write a function that takes in a list of integers and returns a tuple containing the minimum and maximum integers in the list.\n    '''\n    min_num = num_list[0]\n    max_num = num_list[0]\n    for num in num_list:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return (min_num,max_num)\ndef generate_sublists(num_list):\n    '''\n    Write a function that takes in a list of integers and returns a list of all possible sublists of the integers.\n    For example, a list [1,2,3,4] should return [[1],[2],[3],[4]].\n    '''\n    sub_list_list = []\n    for i in range(len(num_list)):\n        sub_list_list.append([num_list[i]])\n        for j in range(i+1,len(num_list)):\n            sub_list_list.append(num_list[i:j+1])\n    return sub_list_list\ndef heapsort_list(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted list of those numbers in increasing order.\n    The function should use heapq and sorted.\n    '''\n    list1 = sorted(list1)\n    return list1\ndef heap_sort_list(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted list of those numbers in increasing order.\n    The function should use heapq and sorted.\n    '''\n    list1 = heapq.heapify(list1)\n    return list1\ndef merge_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a sorted list of those two lists combined.\n    '''\n    list1.sort()\n    list2.sort()\n    return list1+list2\ndef merge_sort_list(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted list of those numbers in increasing order.\n    The function should use heapq and sorted.\n    '''\n    list1 = heapq.merge(list1)\n    return list1\ndef quick_sort_list(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted list of those numbers in increasing order.\n    The function should use heapq and sorted.\n    '''\n    list1 = heapq.nsmallest(len(list1), list1)\n    return list1\ndef quick_sort_rev(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted list of those numbers in increasing order.\n    The function should use heapq and sorted.\n    '''\n    list1 = heapq.nlargest(len(list1), list1)\n    return list1\ndef selection_sort_list(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted list of those numbers in increasing order.\n    The function should use heapq and sorted.\n    '''\n    for i in range(len(list1)):\n        index = i\n        for j in range(i+1, len(list1)):\n            if list1[j] < list1[index]:\n                index = j\n        if index!= i:\n            list1[index], list1[i] = list1[i], list1[index]\n    return list1\ndef insertion_sort_list(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted list of those numbers in increasing order.\n    The function should use heapq and sorted.\n    '''\n    for i in range(1, len(list1)):\n        for j in range(i, 0, -1):\n            if list1[j] < list1[j-1]:\n                list1[j], list1[j-1] = list1[j-1], list1[j]\n            else:\n                break\n    return list1\ndef counting_sort_list(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted list of those numbers in increasing order.\n    The function should use heapq and sorted.\n    '''\n    max_num = max(list1)\n    count_list = []\n    for i in range(max_num+1):\n        count_list.append(0)\n    for num in list1:\n        count_list[num] += 1\n    for i in range(1, max_num+1):\n    "
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # print list1\n    # max = 0\n    # for i in range(len(list1)):\n    #     if list1[i] > max:\n    #         max = list1[i]\n    # print max\n    # return max\n    # print heapq.nlargest(n, list1)\n    # print heapq.nsmallest(n, list1)\n    # return heapq.nsmallest(n, list1)\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #this is faster than my solution for large n\n    if n < 1:\n        return []\n    else:\n        return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #copy = list1.copy()\n    #for i in range(0,n):\n    #    heapq.heappushpop(copy,list1[i])\n    #return copy\n    return heapq.nlargest(n,list1)\n    \n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    ans=[]\n    for i in range(0,n):\n        ans.append(list1[i])\n    return ans\ndef find_min_max(l,s):\n    '''\n    Write a function that takes in a list and returns the index of the smallest item in the list and the index of the largest item in the list.\n    '''\n    ans=[0,0]\n    if s=='max':\n        ans[0]=max(l)\n        ans[1]=l.index(ans[0])\n    if s=='min':\n        ans[0]=min(l)\n        ans[1]=l.index(ans[0])\n    return ans\ndef find_min_max_slice(l,s):\n    '''\n    Write a function that takes in a list and returns the index of the smallest item in the list and the index of the largest item in the list.\n    '''\n    if s=='max':\n        ans=0\n        for i in range(0,len(l)):\n            if l[i]>l[ans]:\n                ans=i\n        return [ans,l.index(l[ans])]\n    if s=='min':\n        ans=len(l)-1\n        for i in range(0,len(l)):\n            if l[i]<l[ans]:\n                ans=i\n        return [ans,l.index(l[ans])]\n    return 0\ndef find_smallest(l):\n    '''\n    Write a function that takes in a list and returns the smallest item in the list.\n    '''\n    ans=l[0]\n    for i in range(0,len(l)):\n        if l[i]<ans:\n            ans=l[i]\n    return ans\ndef find_largest(l):\n    '''\n    Write a function that takes in a list and returns the largest item in the list.\n    '''\n    ans=l[0]\n    for i in range(0,len(l)):\n        if l[i]>ans:\n            ans=l[i]\n    return ans\ndef count_smaller(l,target):\n    '''\n    Write a function that takes in a list and a number and returns the number of items in the list that are smaller than the number.\n    '''\n    ans=0\n    for i in range(0,len(l)):\n        if l[i]<target:\n            ans=ans+1\n    return ans\ndef count_larger(l,target):\n    '''\n    Write a function that takes in a list and a number and returns the number of items in the list that are larger than the number.\n    '''\n    ans=0\n    for i in range(0,len(l)):\n        if l[i]>target:\n            ans=ans+1\n    return ans\ndef find_kth_smallest(l,k):\n    '''\n    Write a function that takes in a list and a number and returns the kth smallest number in the list.\n    '''\n    ans=l[0]\n    for i in range(0,len(l)):\n        if l[i]<ans:\n            ans=l[i]\n    for j in range(0,k):\n        l.remove(ans)\n    return ans\ndef find_kth_largest(l,k):\n    '''\n    Write a function that takes in a list and a number and returns the kth largest number in the list.\n    '''\n    ans=l[0]\n    for i in range(0,len(l)):\n        if l[i]>ans:\n            ans=l[i]\n    for j in range(0,k):\n        l.remove(ans)\n    return ans\ndef insert_sorted(l,target,s):\n    '''\n    Write a function that takes in a list, a number and a string and returns a sorted copy of the list with the number inserted at the correct index based on the string.\n    '''\n    if s=='asc':\n        for i in range(0,len(l)):\n            if l[i]==target:\n                l.insert(i,target)\n                break\n            if l[i]>target:\n                l.insert(i,target)\n                break\n            if i==len(l)-1:\n                l.insert(i+1,target)\n    if s=='desc':\n        for i in range(0,len(l)):\n            if l[i]==target:\n                l.insert(i,target)\n                break\n            if l[i]<target:\n                l.insert(i,target)\n                break\n            if i==len(l)-1:\n                l.insert(i+1,target)\n    return l\ndef is_sorted(l,s):\n    '''\n    Write a function that takes in a list and a string and returns True if the list is sorted based on the string.\n    '''\n    if s=='asc':\n        for i in range(0,len(l)-1):\n            if l[i]>l[i+1]:\n                return False\n        return True\n    if s=='desc':\n        for i in range(0,len(l)-1):\n            if l[i]<l[i+1]:\n                return False\n        return True\ndef contains_duplicates(l):\n    '''\n    Write a function that takes in a list and returns True if the list contains any duplicates and False if the list does not.\n    '''\n    ans=0\n    for i in range(0,len(l)):\n        for j in range(0,len(l)-1):\n            if l[i]==l[j]:\n                ans=1\n    if ans==1:\n        return True\n    return False\ndef move_to_end(l,target):\n    '''\n    Write a function that takes in a list and a number and returns a list with the number moved to the end of the list.\n    '''\n    for i in range(0,len(l)):\n        if l[i]==target:\n            l.remove(target)\n            l.append(target)\n    return l\ndef swap_positions(l,pos1,pos2):\n    '''\n    Write a function that takes in a list and two numbers and returns a list with the positions swapped.\n    '''\n    l[pos1],l[pos2]=l[pos2],l[pos1]\n    return l\ndef find_duplicates(l):\n    '''\n    Write a function that takes in a list and returns a list containing all the duplicate items in the list.\n    '''\n    ans=[l[0]]\n    for i in range(1,len(l)):\n        if l[i] in ans:\n            ans.append(l[i])\n    return ans\ndef all_anagrams(s):\n    '''\n    Write a function that takes in a string and returns a list containing all the anagrams of the string.\n    '''\n    ans=[]\n    for i in range(0,len(s)):\n        if i==0:\n            ans.append(s[i])\n        elif s[i] not in s[i-1]:\n            ans.append(s[i])\n    return ans\ndef get_all_rotations(l):\n    '''\n    Write a function that takes in a list and returns a list containing all the rotations of the list.\n    '''\n    ans=[]\n    for i in range(0,len(l)):\n        ans.append(l[i:len(l)]+l[0:i])\n    return ans\ndef reverse_string(s):\n    '''\n    Write a function that takes in a string and returns a string with all the letters in the string reversed.\n    '''\n    ans=''\n    for i in range(0,len(s)):\n        ans=ans+s[len(s)-1-i]\n    return ans\ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False if it is not.\n    '''\n    for i in range(0,len(s)//2):\n        if s[i]!=s[len(s)-1-i]:\n            return False\n    return True\ndef is_ro"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #Heapq is a mini-heap, so the function takes O(nlogn) time to sort.\n    #Each heap pop operation takes O(logn) time, so the function overall takes O(nlogn) time.\n    heapq.heapify(list1)\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #create a heap\n    heap=[]\n    #add all the items to the heap\n    for i in range(len(list1)):\n        heap.append(list1[i])\n    #pop off the smallest n items and add them to the new list\n    for i in range(n):\n        largest=heapq.heappop(heap)\n        list1.append(largest)\n    return list1\n    \n    \ndef second_largest(list1):\n    '''\n    Write a function that takes in a list and returns the second largest integer in the list.\n    '''\n    #set the largest integer to -1\n    second_largest=-1\n    #for each item in the list\n    for i in range(len(list1)):\n        #if the integer is greater than the current second largest\n        if list1[i]>second_largest:\n            #then set the second largest to that integer\n            second_largest=list1[i]\n    #return the second largest\n    return second_largest\n    \ndef n_largest_sorted(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list sorted in descending order.\n    '''\n    #create a heap\n    heap=[]\n    #for each item in the list\n    for i in range(len(list1)):\n        #add the item to the heap\n        heap.append(list1[i])\n    #pop off the smallest n items and add them to the new list\n    for i in range(n):\n        #pop off the smallest item\n        largest=heapq.heappop(heap)\n        #add the largest item to the new list\n        list1.append(largest)\n    #return the new list\n    return list1\n    \ndef n_smallest_sorted(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list sorted in ascending order.\n    '''\n    #create a heap\n    heap=[]\n    #for each item in the list\n    for i in range(len(list1)):\n        #add the item to the heap\n        heap.append(list1[i])\n    #pop off the smallest n items and add them to the new list\n    for i in range(n):\n        #pop off the smallest item\n        smallest=heapq.heappop(heap)\n        #add the smallest item to the new list\n        list1.append(smallest)\n    #return the new list\n    return list1\n    \ndef multiply_list(list1,m):\n    '''\n    Write a function that takes in a list and an integer m and returns a new list containing the elements of the first list multiplied by m.\n    '''\n    #create a list of the correct size\n    newlist=[]\n    #for each item in the list\n    for i in range(len(list1)):\n        #multiply the item by m\n        newlist.append(list1[i]*m)\n    #return the new list\n    return newlist\n    \ndef list_add(list1,list2):\n    '''\n    Write a function that takes in two lists of integers and returns a new list containing the sums of the integers in each list.\n    '''\n    #create a list of the correct size\n    newlist=[]\n    #for each item in the lists\n    for i in range(len(list1)):\n        #add the item to the new list\n        newlist.append(list1[i]+list2[i])\n    #return the new list\n    return newlist\n    \ndef even_num_list(list1):\n    '''\n    Write a function that takes in a list of integers and returns a new list containing only the even numbers from the original list.\n    '''\n    #create a list of the correct size\n    newlist=[]\n    #for each item in the list\n    for i in range(len(list1)):\n        #if the item is even\n        if list1[i]%2==0:\n            #add it to the new list\n            newlist.append(list1[i])\n    #return the new list\n    return newlist\n    \ndef odd_num_list(list1):\n    '''\n    Write a function that takes in a list of integers and returns a new list containing only the odd numbers from the original list.\n    '''\n    #create a list of the correct size\n    newlist=[]\n    #for each item in the list\n    for i in range(len(list1)):\n        #if the item is odd\n        if list1[i]%2!=0:\n            #add it to the new list\n            newlist.append(list1[i])\n    #return the new list\n    return newlist\n    \ndef sum_list(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all the elements in the list.\n    '''\n    #create a list of the correct size\n    newlist=[]\n    #for each item in the list\n    for i in range(len(list1)):\n        #add the item to the new list\n        newlist.append(list1[i])\n    #return the sum of the new list\n    return sum(newlist)\n    \ndef average_list(list1):\n    '''\n    Write a function that takes in a list and returns the average of all the elements in the list.\n    '''\n    #create a list of the correct size\n    newlist=[]\n    #for each item in the list\n    for i in range(len(list1)):\n        #add the item to the new list\n        newlist.append(list1[i])\n    #return the average of the new list\n    return sum(newlist)/len(newlist)\n    \ndef median_list(list1):\n    '''\n    Write a function that takes in a list and returns the median of all the elements in the list.\n    '''\n    #create a list of the correct size\n    newlist=[]\n    #for each item in the list\n    for i in range(len(list1)):\n        #add the item to the new list\n        newlist.append(list1[i])\n    #sort the new list\n    newlist.sort()\n    #return the middle value of the new list\n    return newlist[int(len(newlist)/2)]\n    \ndef sort_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the items from the original list sorted in ascending order.\n    '''\n    #create a new list\n    newlist=[]\n    #for each item in the list\n    for i in range(len(list1)):\n        #add the item to the new list\n        newlist.append(list1[i])\n    #sort the new list\n    newlist.sort()\n    #return the new list\n    return newlist\n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the items from the original list in reverse order.\n    '''\n    #create a new list\n    newlist=[]\n    #for each item in the list\n    for i in range(len(list1)):\n        #add the item to the new list\n        newlist.append(list1[len(list1)-1-i])\n    #return the new list\n    return newlist\n    \ndef index_of_largest(list1,item):\n    '''\n    Write a function that takes in a list and a number and returns the index of the largest number in the list that is not larger than the given number.\n    '''\n    #create a new list\n    newlist=[]\n    #for each item in the list\n    for i in range(len(list1)):\n        #if the item is less than the given item\n        if list1[i]<item:\n            #then add it to the new list\n            newlist.append(list1[i])\n    #if there are no numbers larger than the given number\n    if newlist==[]:\n        #then return the index of the item\n        return list1.index(list1[len(list1)-1])\n    #return the index of the largest number\n    return newlist.index(max(ne"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(key=lambda x:x[1],reverse=True)\n    return list1[:n]\ndef smal_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort(key=lambda x:x[1])\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    elif n == 0:\n        return []\n    elif n < 0:\n        return None\n    elif n < len(list1):\n        return heapq.nlargest(n,list1)\n    else:\n        return heapq.nlargest(len(list1),list1)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    print(\"r = \", r)\n    print(\"h = \", h)\n    print(\"==============================\")\n    A = pi * r * h\n    print(\"A = \", A)\n    print(\"==============================\")\n    print(\"The volume of the cylinder = \", A * h)\n    print(\"==============================\")\n    print(\"The surface area of the cylinder = \", A * 2)\n    print(\"==============================\")\n    print(\"The lateral surface area of the cylinder = \", A * 2)\n    print(\"==============================\")\n    return\n    \nlateralsuface_cylinder(3,2)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi*r**2\n    vol = area*h\n    return vol\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.1415926535897931\n    l = 2*pi*r\n    s = pi*r**2\n    volume = pi*r**2*h\n    return s + volume\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    L = 2*pi*r\n    H = 2*pi*r*h\n    A = L*H\n    print('The lateral surface area of a cylinder with radius'+ str(r) +'and height'+ str(h) +'is:'+ str(A))\n    \nlateralsuface_cylinder(3,3)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 4*pi*r*(r+h)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r**2+2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # y = r * sin(theta)\n    # A = pi * r^2\n    # A = pi * (r^2) * (sin(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    # A = pi * r * (r*sin(theta) + r*cos(theta))\n    # A = 2 * pi * r * (r*sin(theta) + r*cos(theta))\n    "
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.14159265\n    lateral=2*pi*r*h+2*pi*r**2\n    return lateral\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \ndef volume_cube_3(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    return (4/3)*pi*r**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    s = bin(n)[2:]\n    s = s.rjust(32, '0')\n    res = 0\n    for i in range(32):\n        if s[i] == '1':\n            res += 2**i\n    return res\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    x = 1\n    if n == 0:\n        return 0\n    while n:\n        if n % 2 == 1:\n            x = x * 3 + 1\n        n = n // 2\n    return x\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n & 0x55555555)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    n_bits = 32\n    n_bit_str = bin(n)[2:]\n    even_bits = []\n    for i in range(len(n_bit_str)):\n        if n_bit_str[i] == '1':\n            if i%2 == 0:\n                even_bits.append('0')\n            else:\n                even_bits.append('1')\n        else:\n            even_bits.append('0')\n    return int(''.join(even_bits), 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0x5555555555555555\n    return n ^ 0xAAAAAAAA\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    return n&0x55555555\n    \n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 1 << n.bit_length() - 1\n    return n & mask\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n:\n        result = result | 1<<n&1\n        n = n >> 1\n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert the number to a list of bits\n    n = list(map(int, list(bin(n)[2:])))\n    \n    # traverse the list\n    for i in range(len(n)): \n        # if the bit is 1, flip the bit\n        if n[i] == 1: \n            n[i] = 0\n        # else if the bit is 0, flip the bit\n        elif n[i] == 0: \n            n[i] = 1\n            \n    return int(''.join(map(str, n)), 2)\n    \ndef test_even_bit_set_number():\n    assert even_bit_set_number(2) == 3\n    assert even_bit_set_number(4) == 16\n    assert even_bit_set_number(20) == 65\n    assert even_bit_set_number(42) == 168\n    assert even_bit_set_number(124) == 189\n    assert even_bit_set_number(1046) == 3746\n    assert even_bit_set_number(2046) == 6046\n    assert even_bit_set_number(10046) == 10146\n    assert even_bit_set_number(100467) == 100467\n    assert even_bit_set_number(101467) == 101467\n    assert even_bit_set_number(2221446) == 22221446\n    assert even_bit_set_number(222144615) == 2222144615\n    assert even_bit_set_number(22214461515) == 222214461515\n    assert even_bit_set_number(32221446151515) == 32221446151515\n    assert even_bit_set_number(3222144615151515) == 3222144615151515\n    assert even_bit_set_number(323214461515151515) == 323214461515151515\n    assert even_bit_set_number(32221446151515151515) == 32221446151515151515\n    assert even_bit_set_number(3222144615151515151515) == 3222144615151515151515\n    \n    print(\"Passed all tests!\")\n    \ntest_even_bit_set_number("
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n    \n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #initialize dictionary with empty values\n    #create dictionary, store tuples as keys, map value to 0\n    #iterate through list\n    #if tuple is already in dictionary, increment value by 1\n    #else, add tuple to dictionary and map value to 1\n    #return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for each in test_list:\n        if each[0] in my_dict:\n            my_dict[each[0]] += 1\n        else:\n            my_dict[each[0]] = 1\n    return my_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter(test_list)\n    return d\ndef check_occurences2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for item in test_list:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tup in test_list:\n        occurence_dict[tup] = occurence_dict.get(tup,0) + 1\n    return occurence_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = Counter(test_list)\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #return {x:test_list.count(x) for x in set(test_list)}\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_3(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_4(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_5(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_6(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_7(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_8(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_9(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_10(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_11(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_12(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_13(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_14(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_15(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_16(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_17(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] += 1\n        else:\n            occurence_dict[i] = 1\n    return occurence_dict\ndef check_occurences_18(test_list):\n    '''\n    Write "
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for x in test_list:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    return d\ndef is_anagram(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    return sorted(s1) == sorted(s2)\ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False if it is not.\n    '''\n    return s == s[::-1]\ndef is_anagram_2(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        return Counter(s1) == Counter(s2)\ndef is_anagram_3(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        a = sorted(s1)\n        b = sorted(s2)\n        return a == b\ndef is_anagram_4(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_5(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_6(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_7(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_8(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_9(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_10(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_11(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_12(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_13(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_14(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_15(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_16(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lower()\n        s2 = s2.replace(' ', '').lower()\n        return sorted(s1) == sorted(s2)\ndef is_anagram_17(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '').lowe"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    return d\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(list(filter(lambda x:x!=\"\",str.split(' '))))\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    len_of_str = len(str)\n    if len_of_str < 1:\n        return 0\n    freq_of_letters = {}\n    count = 0\n    for char in str:\n        if char not in freq_of_letters:\n            freq_of_letters[char] = 1\n        else:\n            freq_of_letters[char] += 1\n    for char in str:\n        freq = freq_of_letters[char]\n        if freq > 0:\n            count += freq\n            freq_of_letters[char] -= 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        if str[0] == str[1]:\n            return 1\n        else:\n            return 0\n    else:\n        return sum([1 for i in range(n) if str[i] == str[i+1] and str[i]!= str[i-1]])\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring_lengths = {}\n    for i in range(len(str)): \n        substring_lengths[str[i:]] = len(str[i:])\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # starting and ending pointers\n    i = 0\n    j = 0\n    # initializing the counter\n    counter = 0\n    # loop to iterate over the string\n    while i < len(str):\n        # checking for a non-empty substring\n        if j < len(str) and str[j]!='':\n            # incrementing the counter\n            counter += 1\n            # incrementing the ending pointer\n            j += 1\n        # incrementing the starting pointer\n        else:\n            # decrementing the ending pointer\n            j -= 1\n            # decrementing the starting pointer\n            i -= 1\n        # incrementing the starting pointer\n        i += 1\n    # returning the counter\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str) \n    # substring is one character (length 1)\n    res = 1\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    string = str\n    substring = ''\n    count = 0\n    for index in range(len(string)):\n        substring += string[index]\n        if len(substring) > 0:\n            count += 1\n        if index == len(string)-1:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    str_length = len(str)\n    if str_length <= 1:\n        return 0\n    else:\n        count = 0\n        for i in range(0,str_length):\n            for j in range(i,str_length):\n                if str[i:j+1]!= \"\":\n                    count += 1\n        return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j]!='':\n                count+=1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m**n\n    \ndef get_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif m <= 0:\n        return 0\n    elif m == 1:\n        return 1\n    else:\n        return get_number_of_sequences(m-2,n-1) + get_number_of_sequences(m-1,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2:\n        return 0\n    elif m == 2:\n        return n\n    else:\n        return n * get_total_number_of_sequences(m-2, n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert type(m) == int and type(n) == int, 'The inputs m and n must be integers'\n    assert m >= 1 and n >= 1, 'The inputs m and n must be greater than 0'\n    return math.factorial(n) / ( math.factorial(n - 2) * math.factorial(2) )\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    if n == 2:\n        return ((m//2) * (m//2) + (m//2) + 1)\n    return (m*(m+1))/2 + (n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m-n, n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # total number of sequences for m = 2 and n = 3\n    # [[1,1,1], [1,1,2], [1,2,1], [1,2,2], [2,1,1], [2,1,2], [2,2,1], [2,2,2]]\n    \n    # total number of sequences for m = 3 and n = 2\n    # [[1,1], [1,2], [1,3], [2,1], [2,2], [2,3], [3,1], [3,2], [3,3]]\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    if m == 1:\n        return 1\n    if n == 2:\n        return m\n    if n > 2:\n        return m*m*m\n    \n    \n    \nprint get_total_number_of_sequences(1,1)\nprint get_total_number_of_sequences(2,1)\nprint get_total_number_of_sequences(3,1)\nprint get_total_number_of_sequences(5,1)\nprint get_total_number_of_sequences(10,1)\nprint get_total_number_of_sequences(10,2)\nprint get_total_number_of_sequences(10,3)\nprint get_total_number_of_sequences(10,4)\nprint get_total_number_of_sequences(10,5)\nprint get_total_number_of_sequences(10,6)"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #define recursion function\n    def number_of_sequences(m,n):\n        #base case\n        if n == 1:\n            return 1\n        #subcase 1: if m = 0, then we can only have n-1 sequences, so we return 1 less than the recursion function\n        elif m == 0:\n            return 1\n        #subcase 2: if n is 1, then we can only have n-1 sequences, so we return 1 less than the recursion function\n        elif n == 1:\n            return 1\n        #subcase 3: if m is negative, we have to find the number of sequences, so we return the recursion function\n        elif m < 0:\n            return number_of_sequences(m,n-1)\n        #subcase 4: if m is positive, we have to find the number of sequences, so we return the recursion function\n        elif m > 0:\n            return number_of_sequences(m-1,n-1) + number_of_sequences(m,n-1)\n    #we call the recursion function, passing in the m and n variables\n    return number_of_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= 1:\n        return 1\n    if m < n:\n        return 0\n    return get_total_number_of_sequences(m-2,n) + get_total_number_of_sequences(m-1,n)\n    "
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if m<2:\n        return 0\n    if m==2:\n        return 2\n    if m==3:\n        return 4\n    if n==1:\n        return 1\n    \n    total = 0\n    for i in range(1,m):\n        total += get_total_number_of_sequences(i,n-1)\n    return total\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print 'Original List 1:'\n    print list1\n    print 'Original List 2:'\n    print list2\n    temp_list = []\n    for i in list2:\n        temp_list.append(i)\n    list1[-1:] = temp_list\n    print 'List 1 with last element replaced:'\n    print list1\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        return list1\n    i = len(list1)-1\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        print(\"Error: list1 is shorter than list2.\")\n        return\n    for i in range(len(list1)-1):\n        list1[i] = list1[i+1]\n    list1[len(list1)-1] = list2[len(list2)-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < 1 or len(list2) < 1:\n        return None\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    while len(list1)!= 0:\n        list1.pop()\n    for elem in list2:\n        list1.append(elem)\n    return list1\n    \ndef replace_list2(list1,list2):\n    list1[:] = list2\n    return list1\n    \ndef swap_list(list1,list2):\n    '''\n    Write a function that takes in two lists and swaps the elements of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for elem in list1:\n        new_list.append(list2[list1.index(elem)])\n    return new_list\n    \ndef sort_list(list1):\n    '''\n    Write a function that takes in a list and sorts the elements of the list in ascending order.\n    '''\n    new_list = sorted(list1)\n    return new_list\n    \ndef search_list(list1,elem):\n    '''\n    Write a function that takes in a list and an element and returns the index of the element in the list. If the element is not in the list, the function should return -1.\n    '''\n    index = -1\n    for elem in list1:\n        index += 1\n        if elem == elem:\n            return index\n    return index\n    \ndef find_unique_elem(list1):\n    '''\n    Write a function that takes in a list and returns the unique elements of the list.\n    '''\n    uniq_elem = []\n    for elem in list1:\n        if elem not in uniq_elem:\n            uniq_elem.append(elem)\n    return uniq_elem\n    \ndef sort_by_index(list1,index):\n    '''\n    Write a function that takes in a list and an integer index and returns a list that is sorted in ascending order according to the value at the index position.\n    '''\n    new_list = sorted(list1)\n    return new_list[index]\n    \ndef index_of_element(list1,elem):\n    '''\n    Write a function that takes in a list and an element and returns the index of the element in the list. If the element is not in the list, the function should return -1.\n    '''\n    for index,elem in enumerate(list1):\n        if elem == elem:\n            return index\n    return -1\n    \ndef sum_of_list(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the values in the list.\n    '''\n    sum_elem = 0\n    for elem in list1:\n        sum_elem += elem\n    return sum_elem\n    \ndef multiply_list(list1):\n    '''\n    Write a function that takes in a list and returns the product of the values in the list.\n    '''\n    prod_elem = 1\n    for elem in list1:\n        prod_elem *= elem\n    return prod_elem\n    \ndef list_copy(list1):\n    '''\n    Write a function that takes in a list and returns a copy of the list.\n    '''\n    new_list = list1[:]\n    return new_list\n    \ndef sort_list_desc(list1):\n    '''\n    Write a function that takes in a list and returns a sorted copy of the list, sorted in descending order.\n    '''\n    new_list = sorted(list1)\n    new_list.reverse()\n    return new_list\n    \ndef get_unique_elem_list(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains all the unique elements of the list.\n    '''\n    uniq_elem = []\n    for elem in list1:\n        if elem not in uniq_elem:\n            uniq_elem.append(elem)\n    return uniq_elem\n    \ndef check_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that contains all the elements of the first list that are not in the second list.\n    '''\n    new_list = []\n    for elem in list1:\n        if elem not in list2:\n            new_list.append(elem)\n    return new_list\n    \ndef duplicate_list(list1):\n    '''\n    Write a function that takes in a list and returns a list that has all duplicates removed from the original list.\n    '''\n    new_list = []\n    for elem in list1:\n        if elem not in new_list:\n            new_list.append(elem)\n    return new_list\n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns a list that is the reverse of the original list.\n    '''\n    new_list = []\n    for elem in list1:\n        new_list.insert(0,elem)\n    return new_list\n    \ndef reverse_list2(list1):\n    '''\n    Write a function that takes in a list and returns a list that is the reverse of the original list.\n    '''\n    new_list = list1[::-1]\n    return new_list\n    \ndef search_list2(list1,elem):\n    '''\n    Write a function that takes in a list and an element and returns the index of the element in the list. If the element is not in the list, the function should return -1.\n    '''\n    index = -1\n    for index, elem in enumerate(list1):\n        if elem == elem:\n            return index\n    return index\n    \ndef sum_list(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the values in the list.\n    '''\n    sum_elem = 0\n    for elem in list1:\n        sum_elem += elem\n    return sum_elem\n    \ndef max_list(list1):\n    '''\n    Write a function that takes in a list and returns the maximum value in the list.\n    '''\n    max_elem = list1[0]\n    for elem in list1:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n    \ndef min_list(list1):\n    '''\n    Write a function that takes in a list and returns the minimum value in the list.\n    '''\n    min_elem = list1[0]\n    for elem in list1:\n        if elem < min_elem:\n            min_elem = elem\n    return min_elem\n    \ndef remove_elem(list1,elem):\n    '''\n    Write a function that takes in a list and an element and removes the element from the list. If the element is not in the list, the function should return the original list.\n    '''\n    new_list = []\n    for elem in list1:\n        if elem!= elem:\n            new_list.append(elem)\n    return new_list\n    \ndef remove_duplicate_elem(list1):\n    '''\n    Write a function that takes in a list and removes all duplicates from the list.\n    '''\n    new_list = []\n    for elem in list1:\n        if elem not in new_list:\n            new_list.append(elem)\n    return new_list\n    \ndef get_odd_list(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the odd values in the original list.\n    '''\n    new_list = []\n    for elem in list1:\n        if elem % 2!= 0:\n            new_list.append(elem)\n    return new_list\n    \ndef get_even_list(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the even values in the original list.\n    '''\n    new_list = []\n    for elem in list1:\n        if elem % 2 == 0:\n            new_list.append(elem)\n    return new_list\n    \ndef get_first_half"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return [list1[i] for i in range(len(list1)-1)] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1,len(list1)):\n        list1.remove(list1[len(list1)-1])\n    for i in range(0,len(list2)):\n        list1.append(list2[i])\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n    "
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str1 = str1\n    charac = len(str1)\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num = 0\n    for char in str1:\n        num += 1\n    return num\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    result = 0\n    for i in str1:\n        result += 1\n    return result\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    result = {}\n    for char in str1:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    return result\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N))) \n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    if root*root == N: \n        return (root + 1)**2\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if (root - math.floor(root)) == 0:\n        return math.ceil(root) ** 2\n    else:\n        return math.ceil(root) ** 2 + 1\ndef power(x,n):\n    '''\n    Write a python function to find the nth power of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return x * power(x,n-1)\ndef subsetSum(arr,n,sum):\n    '''\n    Write a python function to find all the subset sums that equal to a given number.\n    '''\n    if sum == 0:\n        return True\n    if sum < 0 or n < 0:\n        return False\n    if sum == arr[n-1] and n!= 0:\n        return subsetSum(arr,n-1,sum)\n    return subsetSum(arr,n-1,sum) or subsetSum(arr,n-1,sum-arr[n-1])\ndef subsetSum_trivial(arr,n,sum):\n    '''\n    Write a python function to find all the subset sums that equal to a given number.\n    '''\n    if sum == 0:\n        return True\n    if sum < 0 or n < 0:\n        return False\n    if sum == arr[n-1]:\n        return True\n    return subsetSum(arr,n-1,sum)\ndef maximum_subarray(arr):\n    '''\n    Write a python function to find the maximum subarray sum in a given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    for i in range(1,len(arr)):\n        curr_max = max(arr[i],curr_max+arr[i])\n        max_so_far = max(max_so_far,curr_max)\n    return max_so_far\ndef maximum_subarray_trivial(arr):\n    '''\n    Write a python function to find the maximum subarray sum in a given array.\n    '''\n    max_so_far = arr[0]\n    for i in range(len(arr)):\n        max_so_far = max(max_so_far+arr[i],arr[i])\n    return max_so_far\ndef knapsack(wt,val,W,n):\n    '''\n    Write a python function to find the maximum possible value of items\n    that can be carried within a knapsack of a given capacity.\n    '''\n    if n == 0 or W == 0:\n        return 0\n    if wt[n-1] > W:\n        return knapsack(wt,val,W,n-1)\n    else:\n        return max(val[n-1]+knapsack(wt,val,W-wt[n-1],n-1),knapsack(wt,val,W,n-1))\ndef knapsack_trivial(wt,val,W,n):\n    '''\n    Write a python function to find the maximum possible value of items\n    that can be carried within a knapsack of a given capacity.\n    '''\n    if n == 0 or W == 0:\n        return 0\n    if wt[n-1] > W:\n        return knapsack_trivial(wt,val,W,n-1)\n    else:\n        return max(val[n-1]+knapsack_trivial(wt,val,W-wt[n-1],n-1),knapsack_trivial(wt,val,W,n-1))\ndef binary_search(arr,target,low,high):\n    '''\n    Write a python function to find the index of a given element in a sorted array.\n    '''\n    if low > high:\n        return -1\n    mid = (low+high)/2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] > target:\n        return binary_search(arr,target,low,mid-1)\n    else:\n        return binary_search(arr,target,mid+1,high)\ndef binary_search_trivial(arr,target,low,high):\n    '''\n    Write a python function to find the index of a given element in a sorted array.\n    '''\n    if low > high:\n        return -1\n    mid = (low+high)/2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] > target:\n        return binary_search_trivial(arr,target,low,mid-1)\n    else:\n        return binary_search_trivial(arr,target,mid+1,high)\ndef rotated_array_search(arr,target):\n    '''\n    Write a python function to find the index of a given element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)/2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\ndef rotated_array_search_trivial(arr,target):\n    '''\n    Write a python function to find the index of a given element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)/2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\ndef minimum_swaps(arr):\n    '''\n    Write a python function to find the minimum number of swaps required to sort an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            temp = arr[i]\n            arr[i] = arr[temp-1]\n            arr[temp-1] = temp\n            count += 1\n    return count\ndef minimum_swaps_trivial(arr):\n    '''\n    Write a python function to find the minimum number of swaps required to sort an array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            return i\n    return 0\ndef next_permutation(nums):\n    '''\n    Write a python function to find the next permutation of a given array.\n    '''\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            break\n    if i == 0:\n        return []\n    else:\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        nums[i],nums[j] = nums[j],nums[i]\n    nums[i+1:] = nums[i+1:][::-1]\n    return nums\ndef next_permutation_trivial(nums):\n    '''\n    Write a python function to find the next permutation of a given array.\n    '''\n    if len(nums) <= 1:\n        return nums\n    if nums[-1] >= nums[-2]:\n        return nums\n    i = len(nums) - 2\n    while nums[i] >= nums[i+1]:\n        i -= 1\n    j = len(nums) - 1\n    while nums[j] <= nums[i]:\n        j -= 1\n    nums[i],nums[j] = nums[j],nums[i]\n    nums[i+1:] = nums[i+1:][::-1]\n    return nums\ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a given matrix 90 degrees counterclockwise.\n    '''\n    temp = []\n    for i in range(len(matrix)):\n        temp.append([])\n        for j in range(len(matrix[0])):\n            temp[i].append(matrix[len(matrix)-j"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N)) \n    if root * root == N: \n        return (root + 1) * (root + 1) \n    else: \n        return -1\ndef main():\n    #Question 1\n    print(\"Question 1\")\n    test = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    A = int(math.sqrt(N))\n    return (A+1)*(A+1)\ndef find_Unsorted_Interval(nums): \n    '''\n    Write a python function to find the Unsorted Interval of a given array. The function should return a tuple consisting of the first and last index of the smallest number out of the numbers in the array. The first element of the tuple is the index of the smallest number, while the last element is the index of the largest number. If there is no number out of the array, then return a tuple with -1 as the first element and -1 as the last element. \n    '''\n    l = []\n    i = 0\n    while i<len(nums): \n        if len(l)==0: \n            l.append(i)\n        else: \n            if nums[i] < nums[l[0]]: \n                l.insert(0,i)\n            elif nums[i] > nums[l[-1]]: \n                l.append(i)\n            else: \n                l.append(i)\n        i+=1\n    return (l[0],l[-1])\ndef break_WAV(st): \n    '''\n    Write a python function to break a string in a WAV sequence. The string can contain special characters such as `{`, `}`, `,`, `[`, `]`, `>`, `<`, `_`, `-`. The function should return a list of strings that each represents a word in the string. If a character is not a letter, it should not be part of the word. \n    '''\n    l = []\n    for i in st: \n        if i.isalpha(): \n            l.append(i)\n    return l\ndef number_of_Vowels(st): \n    '''\n    Write a python function to count the number of vowels in a string. The function should return a count of the vowels in the string. For example, `number_of_Vowels(\"the boy is a boy\")` should return `2`. \n    '''\n    s = 'aeiou'\n    c = 0\n    for i in st: \n        if i in s: \n            c+=1\n    return c\ndef find_Sorted_Interval(nums): \n    '''\n    Write a python function to find the sorted interval of a given array. The function should return a tuple consisting of the first and last index of the smallest number out of the numbers in the array. The first element of the tuple is the index of the smallest number, while the last element is the index of the largest number. If there is no number out of the array, then return a tuple with -1 as the first element and -1 as the last element. \n    '''\n    l = []\n    for i in range(len(nums)): \n        if len(l)==0: \n            l.append(i)\n        else: \n            if nums[i] > nums[l[-1]]: \n                l.append(i)\n            elif nums[i] < nums[l[0]]: \n                l.insert(0,i)\n            else: \n                l.append(i)\n    return (l[0],l[-1])\ndef is_Valid_Permutation(nums): \n    '''\n    Write a python function to check whether a given string is a valid permutation of a given dictionary. The function should return a boolean value. \n    '''\n    d = {}\n    for i in nums: \n        if i in d: \n            d[i]+=1\n        else: \n            d[i]=1\n    n = 0\n    for i in nums: \n        if i in d: \n            n+=1\n    if n == len(nums): \n        return True\n    return False\ndef count_Vowels(st): \n    '''\n    Write a python function to count the number of vowels in a string. The function should return a count of the vowels in the string. For example, `count_Vowels(\"the boy is a boy\")` should return `2`. \n    '''\n    s = 'aeiou'\n    c = 0\n    for i in st: \n        if i in s: \n            c+=1\n    return c\ndef count_Vowels_2(st): \n    '''\n    Write a python function to count the number of vowels in a string. The function should return a count of the vowels in the string. For example, `count_Vowels(\"the boy is a boy\")` should return `2`. \n    '''\n    return len([i for i in st if i in 'aeiou'])\ndef separate_Characters(st): \n    '''\n    Write a python function to separate a string into groups of two characters. The function should return a list of strings which each represent a pair of characters in the string. The number of pairs in the returned list should be equal to the number of characters in the string. \n    '''\n    l = []\n    i = 0\n    while i<len(st): \n        l.append(st[i]+st[i+1])\n        i+=2\n    return l\ndef count_Vowels_3(st): \n    '''\n    Write a python function to count the number of vowels in a string. The function should return a count of the vowels in the string. For example, `count_Vowels(\"the boy is a boy\")` should return `2`. \n    '''\n    s = 'aeiou'\n    c = 0\n    for i in st: \n        if i in s: \n            c+=1\n    return c\ndef is_Valid_Permutation_2(nums): \n    '''\n    Write a python function to check whether a given string is a valid permutation of a given dictionary. The function should return a boolean value. \n    '''\n    d = {}\n    for i in nums: \n        if i in d: \n            d[i]+=1\n        else: \n            d[i]=1\n    n = 0\n    for i in nums: \n        if i in d: \n            n+=1\n    if n == len(nums): \n        return True\n    return False\ndef max_Number_Of_Vowels(st): \n    '''\n    Write a python function to find the maximum number of vowels in a string. The function should return a count of the vowels in the string. For example, `max_Number_Of_Vowels(\"the boy is a boy\")` should return `2`. \n    '''\n    s = 'aeiou'\n    c = 0\n    for i in st: \n        if i in s: \n            c+=1\n    return c\ndef number_of_Subsets(N, r): \n    '''\n    Write a python function to find the number of subsets with a given r-value. The function should return a count of the subsets with a given r-value in the range [0,N]. \n    '''\n    return int(math.factorial(N)/(math.factorial(N-r)*math.factorial(r)))\ndef max_Sum_of_Two_Numbers(nums): \n    '''\n    Write a python function to find the maximum sum of two numbers out of a given array of numbers. The function should return the maximum sum of two numbers out of a given array of numbers. \n    '''\n    l = []\n    for i in range(len(nums)-1): \n        for j in range(i+1,len(nums)): \n            l.append(nums[i]+nums[j])\n    return max(l)\ndef sum_of_Digits(n): \n    '''\n    Write a python function to find the sum of the digits of a number. The function should return the sum of the digits of a number. \n    '''\n    s = 0\n    while n>0: \n        s+=n%10\n        n//=10\n    return s\ndef is_Valid_Permutation_3(nums): \n    '''\n    Write a python function to check whether a given string is a valid permutation of a given dictionary. The function should return a boolean value. \n    '''\n    d = {}\n    for i in nums: \n        if i in d: \n            d[i"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    return N**2 + 1\ndef next_Perfect_Square(N): \n    '''\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n    \ndef sum_Pairs(a, v, n):  \n    '''\n    Write a python function to find the sum of pairs of elements in a list such that the elements of the pair differ by a given value.\n    '''\n    d = {}\n    for i in a:\n        d[i] = 0\n    for i in a:\n        d[i] += 1\n    s = 0\n    for i in d.keys():\n        if i+v in d.keys():\n            s += 1\n    return s\n    \ndef plus_One(A):  \n    '''\n    Write a python function to find the next lowest integer that is larger than the given integer.\n    '''\n    l = len(A)\n    s = 0\n    for i in range(l):\n        s += pow(2, i)\n    s += 1\n    if s>=1<<(l-1):\n        return [0]*l\n    B = []\n    while(s):\n        if s&1:\n            B.append(1)\n        else:\n            B.append(0)\n        s = s >> 1\n    return B\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root.is_integer():\n        return (root+1)**2\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    if x*x == N:\n        return x*x\n    else:\n        return x*x+1\n    \ndef is_Prime(N): \n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if N==1:\n        return False\n    elif N==2:\n        return True\n    else:\n        for j in range(2,next_Perfect_Square(N)):\n            if N%j==0:\n                return False\n        return True\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    for i in xrange(1, len(arr)):\n        curr_sum = max(curr_sum + arr[i], arr[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def bitonic(arr):\n        '''\n        return the first index i where arr[i] > arr[i-1]\n        '''\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return i\n        return len(arr)-1\n    def max_sum_bitonic(arr):\n        '''\n        sort the array, and return the max sum\n        '''\n        arr = sorted(arr)\n        result = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                result += arr[i]\n        return result\n    return max_sum_bitonic(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    for i in range(1,len(arr)):\n        curr_max = max(curr_max + arr[i], arr[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Add your code here\n    \ndef bitonic_subsequence(arr):\n    # Sort the array\n    arr.sort()\n    # Traverse the array\n    for i in range(len(arr)):\n        # If the arr[i] is less than the previous element, add that element to the result\n        if arr[i] < arr[i - 1]:\n            return arr[i]\n    # If no increasing or decreasing sequence found, return -1\n    return -1\n    \ndef bitonic_subsequence(arr):\n    # Find the max sum of a sequence\n    result = arr[0]\n    i = 0\n    j = 1\n    while j < len(arr):\n        # If we have a subarray that is increasing and then decreasing\n        if arr[j] > arr[j - 1] and arr[i] > arr[i - 1]:\n            result = max(result, arr[j] + arr[i])\n            i += 1\n        elif arr[j] > arr[j - 1]:\n            i += 1\n        j += 1\n    # If we have no increasing or decreasing sequence, return -1\n    return -1\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = 1\n    for i in range(len(arr)):\n        j = i - 1\n        # Keep adding the current element if the current element is greater than the previous element\n        while j >= 0 and arr[i] > arr[j]:\n            j -= 1\n        # Find the longest increasing subsequence\n        result = max(result, i - j + 1)\n    return result\n    \ndef lis_length(arr):\n    # Find the length of the longest increasing subsequence\n    result = "
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    prev = arr[0]\n    curr = arr[1]\n    if prev > curr:\n        return prev\n    else:\n        return curr\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            if i >= 2:\n                return max(prev, arr[i])\n            else:\n                prev = arr[i]\n        else:\n            prev = arr[i]\n        curr = max(curr, prev)\n    return max(prev, curr)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = arr[0]\n    max_end = arr[0]\n    if n==1:\n        return max_end\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_end = max(max_end+arr[i], arr[i])\n        else:\n            max_end = arr[i]\n        if max_sum < max_end:\n            max_sum = max_end\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess ** 2 - number) > 0.000000000000001:\n        guess = (guess + (number / guess)) / 2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 0:\n        return False\n    if number == 1:\n        return True\n    tolerance = 0.0001\n    guess = number/2\n    guess_plus = guess + tolerance\n    guess_minus = guess - tolerance\n    while abs(guess_plus - guess_minus) > tolerance:\n        if guess_plus == guess_minus:\n            guess = guess_plus\n            break\n        guess_plus = guess + tolerance\n        guess_minus = guess - tolerance\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    number_squared = number**2\n    number_squared_str = str(number_squared)\n    number_squared_digits = len(number_squared_str)\n    number_squared_digits_half = int(number_squared_digits/2)\n    \n    #We use this to track our error\n    last_guess = number_squared\n    \n    while number_squared_digits_half >= 1:\n        if last_guess == 1:\n            return number_squared\n        else:\n            first_half = int(number_squared_str[0:number_squared_digits_half])\n            second_half = int(number_squared_str[number_squared_digits_half:number_squared_digits])\n            #We need to find the middle of the number_squared_digits_half/2 digits of the number_squared_str\n            half_to_half = int((number_squared_digits_half)/2)\n            #We do the comparison by hand and not using the square root method\n            if first_half < second_half:\n                first_half_half = int(first_half*10)\n                second_half_half = int(second_half*10)\n                #This needs to be 10 to do the comparison\n                if first_half_half == second_half_half:\n                    return last_guess\n                else:\n                    last_guess = int(last_guess*10)\n                    number_squared_digits_half = int(number_squared_digits_half/2)\n                    last_guess = last_guess*10\n            else:\n                first_half_half = int(first_half*10)\n                second_half_half = int(second_half*10)\n                #This needs to be 10 to do the comparison\n                if first_half_half == second_half_half:\n                    return last_guess\n                else:\n                    last_guess = int(last_guess*10)\n                    number_squared_digits_half = int(number_squared_digits_half/2)\n                    last_guess = last_guess*10\n    return number_squared\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sign = 1\n    if number < 0:\n        number *= -1\n        sign = -1\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    i = 0\n    while True:\n        x = (x + number / x) / 2\n        i += 1\n        if abs(x - number / x) < 1e-9:\n            break\n    return x, i\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    i = 1\n    while i < 100:\n        guess = (guess + number/guess)/2\n        i += 1\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 0.5 * number\n    while abs(guess * guess - number) > 0.001:\n        guess = 0.5 * (guess + number/guess)\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess ** 2 - number) > 0.0000001:\n        guess = ((guess + number / guess) / 2)\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    if number < 0:\n        raise ValueError(\"Square root cannot be computed for negative numbers\")\n    \n    #babylonian_sqrt is a helper function that uses a recursive algorithm to compute square roots\n    return babylonian_sqrt(number, 0.5, 0.00001)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Make a list of nxn size and fill it with \"\".\n    # After filling, we will find the longest palindromic sequence by checking each cell\n    # and finding the longest palindromic sequence either side of it.\n    dp = [[0]*n for i in range(n)]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n    for i in range(len(str)-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                if j-i == 1 or dp[i+1][j-1]:\n                    dp[i][j] = 1\n    return max([max(x) for x in dp])\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for i in range(n)] for i in range(n)] \n    for i in range(n): \n        for j in range(n): \n            if i == j: \n                dp[i][j] = 1\n            elif str[i] == str[j] and i + 1 == j: \n                dp[i][j] = 2\n            elif str[i] == str[j] and i + 1!= j: \n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) \n    return dp[0][n - 1] \n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 1:\n        return 1\n    maxlen = 0\n    for i in xrange(len(str)):\n        for j in xrange(i+1, len(str)+1):\n            if str[i:j] == str[i:j][::-1]:\n                maxlen = max(maxlen, j-i)\n    return maxlen\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    length = len(str)\n    l = [[0 for i in range(length)] for j in range(length)]\n    maxlength = 0\n    for i in range(length):\n        for j in range(i,length):\n            if (str[i]==str[j] and (j-i<3 or l[i+1][j-1])):\n                l[i][j] = 1\n                maxlength = max(maxlength,l[i][j])\n    print maxlength\n    for i in range(length):\n        for j in range(i,length):\n            if (l[i][j]==1):\n                print str[i:j+1],\n    print\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n < 2:\n        return n\n    # dp[i][j] will be storing the length of LPS ending with str[i..j]\n    dp = [[0 for x in range(n)] for x in range(n)] \n    # pal starts with 1. We can always expand on the last character and see if it forms a LPS\n    max_len = 1\n    for i in range(n): \n        dp[i][i] = 1\n        max_len = 1\n    # LPS can be of maximum length 1, 2, or 3 only\n    for start in range(n-1):\n        i = start\n        j = start + 1\n        if str[i] == str[j]:\n            dp[i][j] = 2 + dp[i+1][j-1]\n            if dp[i][j] > max_len:\n                max_len = dp[i][j]\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    m = len(str)\n    l = [[0 for i in range(m)] for i in range(m)]\n    for i in range(m):\n        l[i][i] = 1\n        if i < m - 1 and str[i] == str[i + 1]:\n            l[i][i + 1] = 2\n    for clen in range(3, m + 1):\n        for i in range(m - clen + 1):\n            j = i + clen - 1\n            if str[i] == str[j] and clen >= 3:\n                l[i][j] = l[i + 1][j - 1] + 2\n            else:\n                l[i][j] = max(l[i][j - 1], l[i + 1][j])\n    return l[0][m - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # print(str)\n    # print(str[::-1])\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 1:\n        return 1\n    mat = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        mat[i][i] = 1\n    for l in range(2,n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if str[i] == str[j] and l == 2:\n                mat[i][j] = 2\n            elif str[i] == str[j]:\n                mat[i][j] = 2 + mat[i+1][j-1]\n            else:\n                mat[i][j] = max(mat[i][j-1], mat[i+1][j])\n    return mat[0][n-1]\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return None\n    else:\n        return (1/n) + harmonic_sum(n - 1)\n    \n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + (1/n))**n\n    #return 1/n + 1/n**2 + 1/n**3 +... + 1/n**n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + n - 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n if n < 1 else 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n    \ndef main():\n    print(harmonic_sum(5))\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1 / n + (harmonic_sum(n - 1))\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 2:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1 = array_nums1\n    array2 = array_nums2\n    array1.sort()\n    array2.sort()\n    length1 = len(array1)\n    length2 = len(array2)\n    intersection = []\n    i = 0\n    j = 0\n    while i<length1 and j<length2:\n        if array1[i] == array2[j]:\n            intersection.append(array1[i])\n            i += 1\n            j += 1\n        elif array1[i] > array2[j]:\n            j += 1\n        else:\n            i += 1\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_nums = []\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 == None or array_nums2 == None or len(array_nums1) == 0 or len(array_nums2) == 0:\n        return None\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 is None or len(array_nums1) == 0 or array_nums2 is None or len(array_nums2) == 0:\n        return []\n    \n    res = []\n    for n1 in array_nums1:\n        for n2 in array_nums2:\n            if n1 == n2:\n                res.append(n1)\n                break\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1 or not array_nums2:\n        return []\n    elif not array_nums1[-1] or not array_nums2[-1]:\n        return []\n    elif array_nums1[-1] > array_nums2[-1]:\n        return intersection_array(array_nums2,array_nums1)\n    elif array_nums1[-1] < array_nums2[-1]:\n        return intersection_array(array_nums1,array_nums2)\n    else:\n        return array_nums1+[array_nums1[-1]]\n    \n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for element in array_nums1:\n        if element in array_nums2:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    len1 = len(array_nums1)\n    len2 = len(array_nums2)\n    if len1>len2:\n        for i in range(len1):\n            if array_nums1[i] in array_nums2:\n                array_nums1.pop(i)\n                array_nums2.remove(array_nums1[i])\n            else:\n                continue\n    else:\n        for i in range(len2):\n            if array_nums2[i] in array_nums1:\n                array_nums2.pop(i)\n                array_nums1.remove(array_nums2[i])\n            else:\n                continue\n    return array_nums1,array_nums2\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # the number of times the element appears in the tuple\n    count = 0\n    for element in tup:\n        if element == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    l = list(tup)\n    return l.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup1 = [x for x in tup if x == x]\n    return tup1.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for item in tup:\n        if item == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        list.insert(i,element)\n        i += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list:\n        return [element]\n    else:\n        return [list[0]] + insert_element(list[1:], element)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [list[i]+element for i in range(len(list))]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newlist = []\n    for i in range(0,len(list)):\n        newlist.append(list[i-1])\n        newlist.append(element)\n    newlist.append(list[len(list)-1])\n    return newlist\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # for i in range(0,len(list)):\n    #     list.insert(i,element)\n    # return list\n    return [element]*len(list)\n    \n    # return [element for i in range(0,len(list))]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return element + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Make a copy of the list\n    newList = list[:]\n    # Insert the element into each element in the list\n    for i in range(len(list)):\n        newList[i] = element + newList[i]\n    return newList\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    new_list.insert(0,element)\n    for i in range(1,len(list)):\n        new_list.insert(i,list[i-1])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r=0\n    d=0\n    for i in numbers:\n        r=i.real**2+i.imag**2\n        d=cmath.phase(i)\n    return r,d\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = [(i.real, i.imag) for i in numbers]\n    return [ cmath.polar(i) for i in numbers ]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #Iterating through every number and returning a list of tuples with x and y components\n    polar_coordinates = []\n    for i in numbers:\n        x = i.real\n        y = i.imag\n        polar_coordinates.append((x, y))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    i,j = numbers[0]\n    numbers[0] = cmath.polar(complex(i,j))\n    return numbers\ndef isprime(n):\n    '''\n    Write a python function to check if a number is prime or not\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not\n    '''\n    string = str(n)\n    string = string[::-1]\n    if string == str(n):\n        return True\n    else:\n        return False\ndef is_pandigital(n):\n    '''\n    Write a python function to check if a number is pandigital or not\n    '''\n    string = str(n)\n    length = len(string)\n    if length == 9:\n        if '0' not in string:\n            return True\n    else:\n        return False\ndef is_pandigital(n):\n    '''\n    Write a python function to check if a number is pandigital or not\n    '''\n    string = str(n)\n    length = len(string)\n    if length == 9:\n        if '0' not in string:\n            return True\n    else:\n        return False\ndef check_fibonacci(n):\n    '''\n    Write a python function to check if a number is Fibonacci or not\n    '''\n    if is_pandigital(n) and is_palindrome(n):\n        string = str(n)\n        length = len(string)\n        first = string[0]\n        second = string[1]\n        sum = first+second\n        sum = int(sum)\n        if sum == int(string):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef min_digits(n):\n    '''\n    Write a python function to find the minimum number of digits required to represent a number\n    '''\n    length = len(str(n))\n    return length\ndef min_digits(n):\n    '''\n    Write a python function to find the minimum number of digits required to represent a number\n    '''\n    length = len(str(n))\n    return length\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i >= j:\n                print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print j,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print i,\n        print\ndef print_triangle(n):\n    '''\n    Write a python function to print the full triangle of numbers in a triangle pattern.\n    '''\n    for i in range(1,n+1):\n        for j in range(1"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    return [complex(r,i) for r,i in zip(numbers.real,numbers.imag)]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if(numbers[0]!=0):\n        angle = cmath.phase(numbers[0])\n        r = cmath.polar(numbers[0])\n        print(angle,r)\n    else:\n        print(0,0)\ndef test():\n    numbers = [complex(1,2),complex(2,2),complex(0,-2),complex(3,2),complex(2,-3),complex(-1,-2),complex(4,2)]\n    convert(numbers)\n    \nif __name__ == '__main__':\n    test()    \n        "
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print (numbers)\n    a = (numbers.real,numbers.imag)\n    \n    r = complex(a[0],a[1])\n    theta = cmath.phase(r)\n    #print(theta)\n    return (r,theta)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if isinstance(numbers,complex):\n        r=abs(numbers)\n        theta=cmath.phase(numbers)\n        return (r,theta)\n    else:\n        print(\"The argument must be a complex number\")\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    # initialize variable\n    count = 0\n    # check each element\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n    \ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    \n    # initialize variable\n    count = 0\n    # check each element\n    for i in list1:\n        if isinstance(i, str):\n            count += 1\n    return count\n    \ndef count_float(list1):\n    '''\n    Write a python function that returns the number of float elements in a given list.\n    '''\n    \n    # initialize variable\n    count = 0\n    # check each element\n    for i in list1:\n        if isinstance(i, float):\n            count += 1\n    return count\n    \ndef count_boolean(list1):\n    '''\n    Write a python function that returns the number of boolean elements in a given list.\n    '''\n    \n    # initialize variable\n    count = 0\n    # check each element\n    for i in list1:\n        if isinstance(i, bool):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n    \ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==str:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_of_ints=0\n    for i in range(len(list1)):\n        if isinstance(list1[i],int):\n            num_of_ints+=1\n    return num_of_ints\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum([1 for i in list1 if isinstance(i,int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list(filter(lambda x: isinstance(x, int), list1)))\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in list1:\n        if type(i) == int:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num = 0\n    for each in list1:\n        if type(each) == int:\n            num += 1\n    return num\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum([1 for i in list1 if type(i) is int])\n    \ndef even_odd(list1):\n    '''\n    Write a python function that returns a list of integers with odd elements\n    concatenated to the end of the list and the even elements concatenated to the front.\n    '''\n    return list1[1::2] + list1[::2]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    combs = combinations_with_replacement(l, n)\n    for elem in combs:\n        result.append(elem)\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [x for x in list(combinations_with_replacement(l, n))]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if l is None or len(l) == 0:\n        return []\n    elif len(l) < n:\n        return []\n    elif n == 1:\n        return [l]\n    else:\n        list1 = combinations_colors(l[:-1], n-1)\n        list2 = [l[-1] + t for t in list1]\n        return list1 + list2\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    res = []\n    for i in comb:\n        res.append(i)\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in set(list(combinations_with_replacement(l, n))) ]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #n = len(l)\n    for i in combinations_with_replacement(l, n):\n        yield i\n    return 'done'\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list1 = list(combinations_with_replacement(l, n))\n    return list1\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(comb) for comb in combinations_with_replacement(l,n)]\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # IMPLEMENT THIS\n    if n==0:\n        return 0\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n%2==0:\n        return 0\n    if n==3:\n        return 1\n    else:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Initialize a list of zeros (that is, a list of False values, which corresponds to each number being 0)\n    list_of_zeros = [0] * (n + 1)\n    \n    # Set the first index of the list of zeros to True (which corresponds to each number being 1)\n    list_of_zeros[1] = 1\n    \n    # Loop through each index of the list of zeros starting with index 2 (skipping index 1)\n    for index in range(2, n + 1):\n        # If the index is divisible by an integer between 2 and the square root of the index, then set the value of that index to False\n        # (which corresponds to the index being 0)\n        if index % 2 == 0:\n            list_of_zeros[index] = 0\n        # If the index is not divisible by an integer between 2 and the square root of the index, then it is prime\n        # and we add 1 to the value of that index\n        else:\n            list_of_zeros[index] = 1\n    \n    # Return the value of the last index of the list of zeros, which is the number of prime numbers less than the given non-negative number\n    return list_of_zeros[-1]\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [1] * n\n    primes[0] = 0\n    primes[1] = 0\n    for i in range(2,int(n**0.5)):\n        if primes[i]:\n            primes[i*i:n:i] = [0] * len(primes[i*i:n:i])\n    return sum(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n < 2:\n        return count\n    for i in range(2,n):\n        if (i == 2) or (i == 3):\n            count+=1\n        elif (i % 2 == 0) or (i % 3 == 0):\n            continue\n        else:\n            count+=1\n    return count\n    \ndef bubble_sort(arr):\n    '''\n    Write a python function that takes in a non-empty array of distinct integers and returns a new array with the integers sorted in ascending order.\n    '''\n    for i in range(0,len(arr)-1):\n        for j in range(0,len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr\n    \ndef shuffle_string(s,n):\n    '''\n    Write a python function that takes in a string and a non-negative integer and returns the string with the characters of the string shuffled.\n    '''\n    s_list = []\n    for char in s:\n        s_list.append(char)\n    for i in range(0,n):\n        j = random.randint(0,len(s_list)-1)\n        s_list[j],s_list[i] = s_list[i],s_list[j]\n    return ''.join(s_list)\n    \ndef find_max_consecutive_ones(arr):\n    '''\n    Write a python function that takes in a non-empty array of integers and returns the maximum length of a non-empty subarray with the same number of 1's.\n    '''\n    max_length = 1\n    current_length = 1\n    for i in range(0,len(arr)-1):\n        if arr[i] == 1:\n            current_length+=1\n        elif arr[i] == 0:\n            current_length = 1\n        max_length = max(max_length,current_length)\n    return max_length\n    \ndef is_palindrome(s):\n    '''\n    Write a python function that takes in a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    s_list = []\n    for char in s:\n        s_list.append(char)\n    if ''.join(s_list[::-1]) == s:\n        return True\n    return False\n    \ndef find_largest_palindrome(n):\n    '''\n    Write a python function that takes in a non-negative integer and returns the largest palindrome that is smaller than the given integer.\n    '''\n    max_palindrome = 0\n    for i in range(1,n):\n        if i == 2:\n            if i > max_palindrome:\n                max_palindrome = i\n        elif (i % 2 == 0):\n            continue\n        else:\n            if i > max_palindrome:\n                max_palindrome = i\n    return max_palindrome\n    \ndef string_rotation(s1,s2):\n    '''\n    Write a python function that takes in two non-empty strings and returns True if the two strings are rotations of each other and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    for i in range(0,len(s1)):\n        if s1[i:] == s2[:len(s1)-i]:\n            return True\n    return False\n    \ndef reverse_string(s):\n    '''\n    Write a python function that takes in a string and returns the string with characters in reverse order.\n    '''\n    return s[::-1]\n    \ndef palindrome_permutation(s):\n    '''\n    Write a python function that takes in a string and returns True if the string has all unique characters and False otherwise.\n    '''\n    s_list = []\n    for char in s:\n        s_list.append(char)\n    s_list = list(set(s_list))\n    if len(s_list)!= len(s):\n        return False\n    return True\n    \ndef is_anagram(s1,s2):\n    '''\n    Write a python function that takes in two strings and returns True if the two strings are anagrams and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1_list = []\n    s2_list = []\n    for char in s1:\n        s1_list.append(char)\n    for char in s2:\n        s2_list.append(char)\n    s1_list = list(set(s1_list))\n    s2_list = list(set(s2_list))\n    if len(s1_list)!= len(s2_list):\n        return False\n    for char in s1_list:\n        if char in s2_list:\n            s2_list.remove(char)\n        else:\n            return False\n    return True\n    \ndef substrings(s):\n    '''\n    Write a python function that takes in a string and returns a list of all the substrings of the string.\n    '''\n    substring_list = []\n    for i in range(0,len(s)):\n        for j in range(0,len(s)):\n            substring_list.append(s[i:j+1])\n    return substring_list\n    \ndef all_anagrams(s):\n    '''\n    Write a python function that takes in a string and returns a list of all anagrams of the string.\n    '''\n    substring_list = []\n    for i in range(0,len(s)):\n        for j in range(0,len(s)):\n            if is_anagram(s[i:j+1],s[:i]):\n                substring_list.append(s[i:j+1])\n    return substring_list\n    \ndef is_unique(s):\n    '''\n    Write a python function that takes in a string and returns True if the string contains all unique characters and False otherwise.\n    '''\n    s_list = []\n    for char in s:\n        s_list.append(char)\n    s_list = list(set(s_list))\n    if len(s_list) == len(s):\n        return True\n    return False\n    \ndef count_vowels(s):\n    '''\n    Write a python function that takes in a string and returns the number of vowels in the string.\n    '''\n    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count+=1\n    return count\n    \ndef is_palindrome_permutation(s):\n    '''\n    Write a python function that takes in a string and returns True if the string is a permutation of a palindrome and False otherwise.\n    '''\n    s_list = []\n    for char in s:\n        s_list.append(char)\n    s_list = list(set(s_list))\n    if len(s_list)!= len(s):\n        return False\n    for i in range(0,len(s_list)):\n        if s_list[i] in 'aeiouAEIOU':\n            if s_list[len(s_list)-1-i] not in 'aeiouAEIOU':\n                return False\n    return True\n    \ndef find_longest_palindrome(s):\n    '''\n    Write a python function that takes in a string and returns the length of the longest palindrome that can be obtained from the given string.\n    '''\n    max_length = 1\n    current_length = 1\n    for i in range(0,len(s)-1):\n        if s[i] == s[i+1]:\n            current_length+=2\n            max_length = max(max_length,current_length)\n        else:\n            current_length = 1\n    return max_length\n    \ndef is_increasing(arr):\n    '''\n    Write a python function that takes in a non-empty array of integers and returns True if the array is monotonic and False otherwise.\n    '''\n    for i in range(0,len(arr)-"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 0:\n        raise ValueError(\"Input a non-negative number\")\n    else:\n        num = 0\n        for i in range(1, n + 1):\n            if is_Prime(i):\n                num += 1\n        return num\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<=0:\n        return 0\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        count=0\n        i=2\n        while i<=n:\n            is_prime=True\n            j=2\n            while j<=i**0.5:\n                if i%j==0:\n                    is_prime=False\n                    break\n                j+=1\n            if is_prime:\n                count+=1\n            i+=1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 1:\n        return 0\n    if n <= 3:\n        return n\n    if n % 2 == 0 or n % 3 == 0:\n        return 0\n    i = 5\n    primes = [2, 3, 5]\n    while primes[-1] * i <= n:\n        if n % primes[-1] == 0:\n            return 0\n        i += 2\n        if n % i == 0:\n            return 0\n        primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 1\n    if n == 8:\n        return 2\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 2\n    if n == 12:\n        return 1\n    if n == 13:\n        return 2\n    if n == 14:\n        return 1\n    if n == 15:\n        return 2\n    if n == 16:\n        return 1\n    if n == 17:\n        return 2\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n    if n == 20:\n        return 2\n    if n == 21:\n        return 1\n    if n == 22:\n        return 2\n    if n == 23:\n        return 1\n    if n == 24:\n        return 2\n    if n == 25:\n        return 1\n    if n == 26:\n        return 2\n    if n == 27:\n        return 1\n    if n == 28:\n        return 2\n    if n == 29:\n        return 1\n    if n == 30:\n        return 1\n    if n == 31:\n        return 2\n    if n == 32:\n        return 1\n    if n == 33:\n        return 2\n    if n == 34:\n        return 1\n    if n == 35:\n        return 2\n    if n == 36:\n        return 1\n    if n == 37:\n        return 2\n    if n == 38:\n        return 1\n    if n == 39:\n        return 1\n    if n == 40:\n        return 1\n    if n == 41:\n        return 2\n    if n == 42:\n        return 1\n    if n == 43:\n        return 2\n    if n == 44:\n        return 1\n    if n == 45:\n        return 2\n    if n == 46:\n        return 1\n    if n == 47:\n        return 2\n    if n == 48:\n        return 1\n    if n == 49:\n        return 2\n    if n == 50:\n        return 1\n    if n == 51:\n        return 2\n    if n == 52:\n        return 1\n    if n == 53:\n        return 2\n    if n == 54:\n        return 1\n    if n == 55:\n        return 2\n    if n == 56:\n        return 1\n    if n == 57:\n        return 2\n    if n == 58:\n        return 1\n    if n == 59:\n        return 2\n    if n == 60:\n        return 1\n    if n == 61:\n        return 2\n    if n == 62:\n        return 1\n    if n == 63:\n        return 2\n    if n == 64:\n        return 1\n    if n == 65:\n        return 2\n    if n == 66:\n        return 1\n    if n == 67:\n        return 2\n    if n == 68:\n        return 1\n    if n == 69:\n        return 2\n    if n == 70:\n        return 1\n    if n == 71:\n        return 2\n    if n == 72:\n        return 1\n    if n == 73:\n        return 2\n    if n == 74:\n        return 1\n    if n == 75:\n        return 2\n    if n == 76:\n        return 1\n    if n == 77:\n        return 2\n    if n == 78:\n        return 1\n    if n == 79:\n        return 2\n    if n == 80:\n        return 1\n    if n == 81:\n        return 2\n    if n == 82:\n        return 1\n    if n == 83:\n        return 2\n    if n == 84:\n        return 1\n    if n == 85:\n        return 2\n    if n == 86:\n        return 1\n    if n == 87:\n        return 2\n    if n == 88:\n        return 1\n    if n == 89:\n        return 2\n    if n == 90:\n        return 1\n    if n == 91:\n        return 2\n    if n == 92:\n        return 1\n    if n == 93:\n        return 2\n    if n == 94:\n        return 1\n    if n == 95:\n        return 2\n    if n == 96:\n        return 1\n    if n == 97:\n        return 2\n    if n == 98:\n        return 1\n    if n == 99:\n        return 2\n    if n == 100:\n        return 1\n    if n == 101:\n        return 2\n    if n == 102:\n        return 1\n    if n == 103:\n        return 2\n    if n == 104:\n        return 1\n    if n == 105:\n        return 2\n    if n == 106:\n        return 1\n    if n == 107:\n        return 2\n    if n == 108:\n        return 1\n    if n == 109:\n        return 2\n    if n == 110:\n        return 1\n    if n == 111:\n        return 2\n    if n == 112:\n        return 1\n    if n == 113:\n        return 2\n    if n == 114:\n        return 1\n    if n == 115:\n        return 2\n    if n == 116:\n        return 1\n    if n == 117:\n        return 2\n    if n == 118:\n        return 1\n    if n == 119:\n        return 2\n    if n == 120:\n        return 1\n    if n == 121:\n        return 2\n    if n == 122:\n        return 1\n    if n == 123:\n        return 2\n    if n == 124:\n        return 1\n    if n == 125:\n        return 2\n    if n == 126:\n        return 1\n    if n == 127:\n        return 2\n    if n == 128:\n        return 1\n    if n == 129:\n        return 2\n    if n == 130:\n        return 1\n    if n == 131:\n        return 2\n    if n == 132:\n        return 1\n    if n == 133:\n        return 2\n    if n == 134:\n        return 1\n    if n == 135:\n        return 2\n    if n == 136:\n        return 1\n    if n == 137:\n        return 2\n    if n == 138:\n        return 1\n    if n == 139:\n        return 2\n    if n == 140:\n        return 1\n    if n == 141:\n        return 2\n    if n == 142:\n        return 1\n    if n == 143:\n        return 2\n    if n == 144:\n        return 1\n    if n == 145:\n        return 2\n    if n == 146:\n        return 1\n    if n == 147:\n        return 2\n    if n == 148:\n        return 1\n    if n == 149:\n        return 2\n    if n == 150:\n        return 1\n    if n == 151:\n        return 2\n    if n == 152:\n        return 1\n    if n == 153:\n        return 2\n    if n == 154:\n        return 1\n    if n == 155:\n        return 2\n    if n == 156:\n        return 1\n    if n == 157:\n        return 2\n    if n == 158:\n        return 1\n    if n == 159:\n        return 2\n    if n == 160:\n        return 1\n    if n == 161:\n        return 2\n    if n == 162:\n        return 1\n    if n == 163:\n        return 2\n    if n == 164:\n        return 1\n    if n == 165:\n        return 2\n    if n == 166:\n        return 1\n    if n == 167:\n        return 2\n    if n == 168:\n        return 1\n    if n == 169:\n        return 2\n    if n == 170:\n        return 1\n    if n == 171:\n        return 2\n    if n == 172:\n        return 1\n    if n == 173:\n        return 2\n    if n == 174:\n        return 1\n    if n == 175:\n        return 2\n    if n == 176:\n        return 1\n    if n == 177:\n        return 2\n    if n == 178:\n        return 1\n    if n == 179:\n        return 2\n    if n == 180:\n        return 1\n    if n == 181:"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    count = 1\n    for i in range(2,n):\n        flag = True\n        for j in range(2,i):\n            if i%j == 0:\n                flag = False\n                break\n        if flag == True:\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        '''\n        Write a python function that takes in a non-negative number and returns True if that number is prime, and False if that number is not prime.\n        '''\n        if n <= 1:\n            return False\n        elif n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    def Primes(n):\n        '''\n        Write a python function that takes in a non-negative number and returns a list of all prime numbers less than the given non-negative number.\n        '''\n        lst = []\n        if n == 1:\n            return [1]\n        for i in range(2, n):\n            if isPrime(i):\n                lst.append(i)\n        return lst\n    def count_Primes(n):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        count = 0\n        for i in range(2, n):\n            if isPrime(i):\n                count += 1\n        return count\n    def prime_factorize(n):\n        '''\n        Write a python function that takes in a non-negative number and returns a list of all prime numbers less than the given non-negative number that can divide that number.\n        '''\n        lst = []\n        def isPrime(n):\n            if n <= 1:\n                return False\n            elif n == 2:\n                return True\n            else:\n                for i in range(2, n):\n                    if n % i == 0:\n                        return False\n                return True\n        if isPrime(n):\n            lst.append(n)\n            return lst\n        else:\n            for i in range(2, n):\n                if isPrime(i) and n % i == 0:\n                    lst.append(i)\n            return lst\n    def prime_factorize_nums(n):\n        '''\n        Write a python function that takes in a non-negative number and returns a list of all prime numbers less than the given non-negative number that can divide that number.\n        '''\n        lst = []\n        for i in range(2, n):\n            if isPrime(i) and n % i == 0:\n                lst.append(i)\n        return lst\n    def count_Primes(n):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        count = 0\n        for i in range(2, n):\n            if isPrime(i):\n                count += 1\n        return count\n    def prime_factorize_nums(n):\n        '''\n        Write a python function that takes in a non-negative number and returns a list of all prime numbers less than the given non-negative number that can divide that number.\n        '''\n        lst = []\n        for i in range(2, n):\n            if isPrime(i) and n % i == 0:\n                lst.append(i)\n        return lst\n    def divisors(n):\n        '''\n        Write a python function that takes in a non-negative number and returns all the divisors of the given number.\n        '''\n        lst = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                lst.append(i)\n        return lst\n    def is_divisor(n):\n        '''\n        Write a python function that takes in a non-negative number and returns True if that number is a divisor of the given number, and False if that number is not a divisor of the given number.\n        '''\n        divisors = divisors(n)\n        if n in divisors:\n            return True\n        else:\n            return False\n    def is_divisor_nums(n):\n        '''\n        Write a python function that takes in a non-negative number and returns True if that number is a divisor of the given number, and False if that number is not a divisor of the given number.\n        '''\n        lst = []\n        for i in range(1, n):\n            if n % i == 0:\n                lst.append(i)\n        if n in lst:\n            return True\n        else:\n            return False\n    def perfect_number(n):\n        '''\n        Write a python function that takes in a non-negative number and returns True if that number is a perfect number, and False if that number is not a perfect number.\n        '''\n        divisors = divisors(n)\n        sum_divisors = sum(divisors)\n        if sum_divisors == n:\n            return True\n        else:\n            return False\n    def perfect_number_nums(n):\n        '''\n        Write a python function that takes in a non-negative number and returns True if that number is a perfect number, and False if that number is not a perfect number.\n        '''\n        lst = []\n        for i in range(1, n):\n            if n % i == 0:\n                lst.append(i)\n        if sum(lst) == n:\n            return True\n        else:\n            return False\n    def count_Primes(n):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        count = 0\n        for i in range(2, n):\n            if isPrime(i):\n                count += 1\n        return count\n    def count_Primes(n):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        count = 0\n        for i in range(2, n):\n            if isPrime(i):\n                count += 1\n        return count\n    def count_Primes(n):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        count = 0\n        for i in range(2, n):\n            if isPrime(i):\n                count += 1\n        return count\n    def count_Primes(n):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        count = 0\n        for i in range(2, n):\n            if isPrime(i):\n                count += 1\n        return count\n    def count_Primes(n):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        count = 0\n        for i in range(2, n):\n            if isPrime(i):\n                count += 1\n        return count\n    def count_Primes(n):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        count = 0\n        for i in range(2, n):\n            if isPrime(i):\n                count += 1\n        return count\n    def count_Primes(n):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        count = 0\n        for i in range(2, n):\n            if isPrime(i):\n                count += 1\n        return count\n    def count_Primes(n):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        count = 0\n        for i in range(2, n):\n            if isPrime(i):\n                count += 1\n        return count\n    def count_Primes(n):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        count = 0\n        for i in range(2, n):\n            if isPrime"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \ndef sum_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns the sum of the numbers.\n    '''\n    return a+b\n    \ndef increment_number(num):\n    '''\n    Write a function that takes in a number and returns the number incremented by one.\n    '''\n    return num+1\n    \ndef decrement_number(num):\n    '''\n    Write a function that takes in a number and returns the number decremented by one.\n    '''\n    return num-1\n    \ndef increment_list(list_of_nums):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that includes the same numbers incremented by one.\n    '''\n    return [x+1 for x in list_of_nums]\n    \ndef decrement_list(list_of_nums):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that includes the same numbers decremented by one.\n    '''\n    return [x-1 for x in list_of_nums]\n    \ndef count_words(str, word):\n    '''\n    Write a function that takes in a string and a word and returns the number of times the word occurs in the string.\n    '''\n    return str.count(word)\n    \ndef count_letters(str, letter):\n    '''\n    Write a function that takes in a string and a letter and returns the number of times the letter occurs in the string.\n    '''\n    return str.count(letter)\n    \ndef replace_letter(str, old_letter, new_letter):\n    '''\n    Write a function that takes in a string and replaces a letter with a new letter.\n    '''\n    return str.replace(old_letter,new_letter)\n    \ndef replace_letter_in_string(str, old_letter, new_letter):\n    '''\n    Write a function that takes in a string and replaces a letter with a new letter in the same string.\n    '''\n    return str.replace(old_letter,new_letter)\n    \ndef find_substring(str, substring):\n    '''\n    Write a function that takes in a string and a substring and returns the first index in the string where the substring is found.\n    If the substring is not found, the function should return -1.\n    '''\n    return str.find(substring)\n    \ndef find_last_substring(str, substring):\n    '''\n    Write a function that takes in a string and a substring and returns the last index in the string where the substring is found.\n    If the substring is not found, the function should return -1.\n    '''\n    return str.rfind(substring)\n    \ndef count_substring(str, substring):\n    '''\n    Write a function that takes in a string and a substring and returns the number of times the substring occurs in the string.\n    '''\n    return str.count(substring)\n    \ndef replace_substring(str, old_substring, new_substring):\n    '''\n    Write a function that takes in a string and replaces a substring with a new substring.\n    '''\n    return str.replace(old_substring,new_substring)\n    \ndef replace_substring_in_string(str, old_substring, new_substring):\n    '''\n    Write a function that takes in a string and replaces a substring with a new substring in the same string.\n    '''\n    return str.replace(old_substring,new_substring)\n    \ndef remove_substring(str, substring):\n    '''\n    Write a function that takes in a string and removes a substring from the string.\n    '''\n    return str.replace(substring,'')\n    \ndef remove_substring_in_string(str, substring):\n    '''\n    Write a function that takes in a string and removes a substring from the string in the same string.\n    '''\n    return str.replace(substring,'')\n    \ndef add_string(str, num):\n    '''\n    Write a function that takes in a string and a number and returns the string repeated num times.\n    '''\n    return str * num\n    \ndef add_string_in_string(str, num):\n    '''\n    Write a function that takes in a string and a number and returns the string repeated num times in the same string.\n    '''\n    return str * num\n    \ndef count_vowels(str):\n    '''\n    Write a function that takes in a string and returns the number of vowels in the string.\n    '''\n    vowels = 0\n    for letter in str:\n        if letter in 'aeiou':\n            vowels += 1\n    return vowels\n    \ndef count_vowels_in_string(str):\n    '''\n    Write a function that takes in a string and returns the number of vowels in the string.\n    '''\n    vowels = 0\n    for letter in str:\n        if letter in 'aeiou':\n            vowels += 1\n    return vowels\n    \ndef count_consonants(str):\n    '''\n    Write a function that takes in a string and returns the number of consonants in the string.\n    '''\n    consonants = 0\n    for letter in str:\n        if letter not in 'aeiou':\n            consonants += 1\n    return consonants\n    \ndef count_consonants_in_string(str):\n    '''\n    Write a function that takes in a string and returns the number of consonants in the string.\n    '''\n    consonants = 0\n    for letter in str:\n        if letter not in 'aeiou':\n            consonants += 1\n    return consonants\n    \ndef compute_average(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the average of the numbers.\n    '''\n    return sum(num_list) / len(num_list)\n    \ndef compute_average_in_string(str_list):\n    '''\n    Write a function that takes in a string and returns the average of the numbers in the string.\n    '''\n    numbers = [float(i) for i in str_list.split() if i.isdigit()]\n    return compute_average(numbers)\n    \ndef compute_median(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the median of the numbers.\n    '''\n    num_list.sort()\n    middle = len(num_list) / 2\n    if len(num_list) % 2 == 0:\n        return (num_list[middle-1] + num_list[middle]) / 2.0\n    else:\n        return num_list[middle]\n    \ndef compute_median_in_string(str_list):\n    '''\n    Write a function that takes in a string and returns the median of the numbers in the string.\n    '''\n    numbers = [float(i) for i in str_list.split() if i.isdigit()]\n    return compute_median(numbers)\n    \ndef compute_variance(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the variance of the numbers.\n    '''\n    average = compute_average(num_list)\n    squared_diff = [(num - average)**2 for num in num_list]\n    return sum(squared_diff) / len(num_list)\n    \ndef compute_variance_in_string(str_list):\n    '''\n    Write a function that takes in a string and returns the variance of the numbers in the string.\n    '''\n    numbers = [float(i) for i in str_list.split() if i.isdigit()]\n    return compute_variance(numbers)\n    \ndef compute_standard_deviation(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the standard deviation of the numbers.\n    '''\n    return math.sqrt(compute_variance(num_list))\n    \ndef compute_standard_deviation_in_string(str_list):\n    '''\n    Write a function that take"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x,y = b,a\n    return (y,x)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(zip(*sorted(zip(test_tup1, test_tup2), reverse=True)[:2]))\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max_elements(test_tup2, test_tup1)\n    else:\n        return max_elements(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        tuple_len = len(test_tup1)\n    else:\n        tuple_len = len(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # your code here\n    return None\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Define a dictionary to store the result\n    result = {}\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if not test_tup1 and not test_tup2:\n        return ()\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #example: (0, 1, 3, 6), (0, 2, 4, 6) --> (0, 6)\n    if len(test_tup1) <= len(test_tup2):\n        return sorted(test_tup1 + test_tup2, reverse = True)[:len(test_tup1)]\n    return sorted(test_tup2 + test_tup1, reverse = True)[:len(test_tup2)]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    ans = 0\n    first_max = 0\n    for i in test_tup1:\n        if i > first_max:\n            first_max = i\n    for i in test_tup2:\n        if i > first_max:\n            first_max = i\n    for i in test_tup1:\n        if i > first_max:\n            ans += i\n    return ans\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if not test_tup1 and not test_tup2:\n        return (0,0)\n    elif not test_tup1:\n        return (0,test_tup2[0])\n    elif not test_tup2:\n        return (test_tup1[0],0)\n    else:\n        return (max(test_tup1[0], test_tup2[0]), min(test_tup1[1], test_tup2[1]))\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    assert (type(test_tup1) == tuple)\n    assert (type(test_tup2) == tuple)\n    if not len(test_tup1) == len(test_tup2):\n        print(\"Lengths do not match.\")\n        return\n    result = tuple()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result += (test_tup1[i],)\n        elif test_tup1[i] < test_tup2[i]:\n            result += (test_tup2[i],)\n        else:\n            result += (test_tup1[i], test_tup2[i])\n    return result\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # the gcd is used to find the order of a group.\n    # It can also be used to find the modular multiplicative inverse.\n    gcd = lambda a, b: a if b == 0 else gcd(b, a % b)\n    \n    def trial_division(n):\n        '''\n        This function takes a positive integer and returns a list of all\n        its factors, excluding the number itself.\n        '''\n        factor_list = [1]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factor_list.append(i)\n        return factor_list\n    \n    def generate_random_prime():\n        '''\n        This function takes a random integer between 0 and 100 and returns the \n        corresponding prime number.\n        '''\n        return random.randrange(2, 100)\n    \n    def generate_n(p, q):\n        '''\n        This function takes two random integers between 0 and 100 and returns \n        the corresponding n.\n        '''\n        return (p - 1) * (q - 1)\n    \n    def modexp(a, b, c):\n        '''\n        This function takes three integers and returns the modular \n        exponentiation of the first integer to the power of the second integer.\n        '''\n        if b == 0:\n            return 1\n        if b == 1:\n            return a % c\n        b_bits = bin(b)[2:]\n        result = modexp(a, int(b_bits[0]), c)\n        if len(b_bits) > 1:\n            for i in b_bits[1:]:\n                result = (result * result) % c\n                if i == '1':\n                    result = (result * a) % c\n        return result\n    \n    def generate_e(n):\n        '''\n        This function takes a positive integer and returns a random integer \n        between 1 and n-1\n        '''\n        while True:\n            e = random.randrange(1, n)\n            if gcd(e, n) == 1:\n                return e\n    \n    def generate_d(e, n):\n        '''\n        This function takes the two integers e and n and returns the\n        modular multiplicative inverse of e mod n.\n        '''\n        x1 = 1\n        x2 = 0\n        y1 = 0\n        y2 = 1\n        while n!= 0:\n            q = e // n\n            r = e % n\n            m = x2 - q * x1\n            n = y2 - q * y1\n            e = r\n            x2 = x1\n            x1 = m\n            y2 = y1\n            y1 = n\n        if x1 < 0:\n            x1 += n\n        return x1\n    \n    def generate_keys():\n        '''\n        This function takes no parameters and returns a tuple containing the\n        e, n, and d, each of which is an integer.\n        '''\n        p = generate_random_prime()\n        q = generate_random_prime()\n        n = generate_n(p, q)\n        e = generate_e(n)\n        d = generate_d(e, n)\n        return (e, n, d)\n    \n    def encrypt(plaintext, e, n):\n        '''\n        This function takes an integer plaintext, integer e, and integer n, \n        and returns the encrypted ciphertext.\n        '''\n        ciphertext = ''\n        for i in plaintext:\n            ciphertext += chr(modexp(ord(i), e, n))\n        return ciphertext\n    \n    def decrypt(ciphertext, d, n):\n        '''\n        This function takes an integer ciphertext, integer d, and integer n, \n        and returns the decrypted plaintext.\n        '''\n        plaintext = ''\n        for i in ciphertext:\n            plaintext += chr(modexp(ord(i), d, n))\n        return plaintext\n    \n    def main():\n        e, n, d = generate_keys()\n        # Write a function to test whether a number is prime.\n        def is_prime(num):\n            if num == 1 or num == 0:\n                return False\n            for i in range(2, num):\n                if num % i == 0:\n                    return False\n            return True\n        \n        def find_prime(num):\n            while True:\n                if is_prime(num):\n                    return num\n                else:\n                    num += 1\n        \n        def get_primitive_root(p):\n            # assume p is prime\n            if p == 1:\n                return 1\n            \n            x = 2\n            while True:\n                if (x ** (p - 1)) % p!= 1:\n                    return x\n                x += 1\n        \n        def get_inverse_mod_p(a, p):\n            # assume p is prime\n            for i in range(p):\n                if ((a % p) * (i % p)) % p == 1:\n                    return i\n            return None\n        \n        def is_generator(g, p):\n            return (p - 1) % g == 0\n        \n        def generate_keys(p, q):\n            n = p * q\n            z = (p - 1) * (q - 1)\n            e = 65537\n            d = get_inverse_mod_p(e, z)\n            return ((e, n), (d, n))\n        \n        def pow_mod(a, b, n):\n            x = 1\n            while b > 0:\n                if b % 2 == 1:\n                    x = (x * a) % n\n                a = (a * a) % n\n                b = b // 2\n            return x\n        \n        def encrypt(plaintext, e, n):\n            ciphertext = ''\n            for i in plaintext:\n                ciphertext += chr(pow_mod(ord(i), e, n))\n            return ciphertext\n        \n        def decrypt(ciphertext, d, n):\n            plaintext = ''\n            for i in ciphertext:\n                plaintext += chr(pow_mod(ord(i), d, n))\n            return plaintext\n        \n        def newman_williams(a, b):\n            '''\n            This function takes two random integers a and b and returns the \n            nth newman\u2013williams prime number.\n            '''\n            while True:\n                if is_prime(a) and is_prime(b):\n                    return a * b\n                a = generate_random_prime()\n                b = generate_random_prime()\n        \n        def newman_williams_test(n):\n            '''\n            This function takes a positive integer and returns true if the\n            number is prime, false otherwise.\n            '''\n            if n == 1:\n                return False\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return False\n            return True\n        \n        def newman_williams_primes(n):\n            '''\n            This function takes a positive integer and returns a list of all \n            the primes less than or equal to the specified number, n.\n            '''\n            prime_list = [2]\n            for i in range(3, n + 1):\n                if newman_williams_test(i):\n                    prime_list.append(i)\n            return prime_list\n        \n        def newman_williams_prime_factorization(n):\n            '''\n            This function takes a positive integer n and returns a list of all\n            the prime factors of n, in increasing order.\n            '''\n            factor_list = []\n            for i in newman_williams_primes(n):\n                while n % i == 0:\n                    factor_list.append(i)\n                    n = n // i\n            return factor_list\n        \n        def generate_public_key(phi):\n            '''\n            This function takes a prime integer n and returns an integer\n            e such that (1 < e < n) and gcd(e, n) = 1.\n            '''\n            while True:\n                e = generate_random_prime()\n                if gcd(e, phi) == 1:\n                    return e\n        \n        def generate_private_key(e, phi):\n            '''\n            This function takes an integer e and a prime integer n and return"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    else:\n        x = newman_prime(n-1)\n        d = 1\n        while True:\n            d += 1\n            y = (x**2 + 1) % n\n            if d == n:\n                return y\n            x = y\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    \n    i = 1\n    j = 2\n    \n    while True:\n        \n        if j%2 == 0:\n            i += 1\n            j += 2\n            continue\n        \n        j_ = j**2\n        \n        for i_ in range(3, int(j_**0.5 + 1), 2):\n            if j_ % i_ == 0:\n                j += 2\n                break\n        \n        else:\n            return j\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1:\n        return 2\n    elif n==2:\n        return 3\n    elif n==3:\n        return 5\n    elif n%2==0:\n        return None\n    elif n%3==0:\n        return None\n    elif n%5==0:\n        return None\n    else:\n        a=0\n        b=0\n        p=1\n        r=n-1\n        while r>0:\n            q=a+b\n            r=r-1\n            p=p+1\n            if r%2==0:\n                a=a+1\n            if r%3==0:\n                b=b+1\n        return p*n+1"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 2:\n        return 2\n    else:\n        s = 1\n        t = 0\n        r = 1\n        while r!= 0:\n            t = (s + n - 1) // n\n            s = (t*n) + n - 1\n            r = n * t % n\n        return s\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    s = 0\n    k = 0\n    while s!= n:\n        if is_prime(k, k**2 + 1):\n            s += 1\n        k += 1\n    return k - 1\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    if n < 1:\n        raise ValueError('n must be positive')\n    \n    q = 1\n    for i in xrange(1, n):\n        if i == 1:\n            q = 2\n        else:\n            q = (2 * q) + 1\n    \n    return q\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def get_p(n):\n        i = 1\n        p = 2\n        while i < n:\n            p = (p*(2 + randint(0,1))) + 1\n            i += 1\n        return p\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_williams_prime(n, 0)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        raise ValueError(\"{} is not a valid input for n\".format(n))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    return tuple((test_tup1[i] / test_tup2[i]) for i in range(len(test_tup1)))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples have different lengths')\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i], )\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1])\n    )\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # return tuple([test_tup1[i]/test_tup2[i] for i in range(len(test_tup1))])\n    return (tuple([int(test_tup1[i]/test_tup2[i]) for i in range(len(test_tup1))]),tuple([test_tup1[i]%test_tup2[i] for i in range(len(test_tup1))]))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in test_tup1:\n        list1.append(i)\n    \n    for i in test_tup2:\n        list2.append(i)\n    \n    return list1[0] / list2[0], list1[1] / list2[1]\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (a // b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    answer_list = []\n    for i in range(len(test_tup1)):\n        answer = (test_tup1[i]/test_tup2[i])\n        answer_list.append(answer)\n    return tuple(answer_list)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # 1. Add your code here\n    div_elements = tuple()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            div_elements += (test_tup1[i] / test_tup2[i], )\n        return div_elements\n    return None\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if (test_tup1[1] == 0):\n        return (0,0)\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #define division_elements function here\n    \n    #divide test_tup1 and test_tup2 by using / operator and ** operator\n    return (test_tup1/test_tup2, test_tup2/test_tup1)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    left_list = []\n    right_list = []\n    for i in range(0,L):\n        left_list.append(list1[i])\n    for j in range(L,len(list1)):\n        right_list.append(list1[j])\n    return(left_list, right_list)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if list1 == []:\n        return (list1, [])\n    if len(list1) < 2 * L:\n        return ([list1[:L]], [list1[L:]])\n    midpoint = int(len(list1) / 2)\n    list1_1 = list1[:midpoint]\n    list1_2 = list1[midpoint:]\n    return (list1_1, list1_2)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = []\n    second_part = []\n    if L > len(list1):\n        print \"The length of the first list cannot be longer than the length of the second list\"\n    else:\n        for i in xrange(L):\n            first_part.append(list1[i])\n        for i in xrange(L, len(list1)):\n            second_part.append(list1[i])\n        return (first_part, second_part)\n        \ndef split_two_parts2(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = []\n    second_part = []\n    if L > len(list1):\n        print \"The length of the first list cannot be longer than the length of the second list\"\n    else:\n        for i in xrange(L):\n            first_part.append(list1[i])\n        for i in xrange(L, len(list1)):\n            second_part.append(list1[i])\n        return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return ([], list1)\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    i = 0\n    while (i < len(list1)):\n        if (i+1) < L:\n            list2.append(list1[i])\n        else:\n            list2.append(list1[i:i+1])\n        i+=1\n    return list2\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 10.5\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age <= 2:\n        return 10.5 * h_age\n    elif h_age <= 6:\n        return 15 * h_age\n    elif h_age <= 12:\n        return 21 * h_age\n    elif h_age <= 18:\n        return 26 * h_age\n    else:\n        return 31.5 * h_age\n        \nprint(dog_age(2))\nprint(dog_age(6))\nprint(dog_age(12))\nprint(dog_age(18))\nprint(dog_age(24))\nprint(dog_age(40))\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == 1:\n        return h_age\n    else:\n        return 1 + dog_age(h_age - 1)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age) * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == None:\n        return 0\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == 0:\n        return 0\n    elif h_age < 0:\n        return \"Enter a positive age.\"\n    else:\n        return h_age * (365 / dog_lifespan)\n    \n    \ndog_age(12) # Should return Dog years: 4\ndog_age(0) # Should return 0\ndog_age(1) # Should return 0\ndog_age(12) # Should return Dog years: 4\ndog_age(5) # Should return Dog years: 10\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == 1:\n        return \"3 years\"\n    elif h_age == 2:\n        return \"5 years\"\n    elif h_age > 2:\n        return \"7 years\"\n    else:\n        return \"Sorry, that's not a valid input!\"\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == None:\n        return 'None'\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    ret = []\n    for i in range(0, len(S), step):\n        ret.append(S[i:i + step])\n    return ret\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    for i in range(0, len(S), step):\n        res.append(S[i:i+step])\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    i = 0\n    l = []\n    while i < len(S):\n        l.append(S[i:i+step])\n        i += step\n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    newList = []\n    for i in range(0, len(S), step):\n        newList.append(S[i:i+step])\n    return newList\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side_length = l\n    side_area = side_length ** 2\n    lateral_area = 6 * side_area\n    return lateral_area\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * pow(l, 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import sqrt\n    l = int(l)\n    s = l**2\n    return round(s*6, 1)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def surface_area(l):\n        return 6*l**2\n    def lateral_surface_area(l):\n        return l**2\n    return lateral_surface_area(l)\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    def surface_area(r):\n        return 4 * math.pi * r ** 2\n    def lateral_surface_area(r):\n        return 4 * math.pi * r ** 2\n    return lateral_surface_area(r)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l == 0:\n        return 0\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * 6\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = (3*l**2)/4\n    print(s)\n    return s\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import sqrt\n    return 6*l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #variable declaration\n    sum = 0\n    #base case\n    if n <= 0:\n        return 0\n    #recursive case\n    else:\n        sum += (n*(n+1))/2\n        return square_Sum(n-1) + sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    # check inputs\n    if not isinstance(n,int):\n        raise TypeError(\"Input must be a integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # find the sum of the squares of the first n odd natural numbers\n    n_sum = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            n_sum = n_sum + i*i\n    \n    return n_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize running sum variable\n    sum = 0\n    # For each natural number from 1 to n\n    for i in range(1, n + 1):\n        # If the current number is odd\n        if i % 2!= 0:\n            # Add the current number to the running sum\n            sum += i ** 2\n    # Return the running sum\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n**2 + square_Sum(n-1)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1, n+1, 2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def square_Sum_Helper(n):\n        if n == 1:\n            return 1\n        else:\n            return n + square_Sum_Helper(n-1)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(x**2 for x in range(1, n+1, 2))\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #initialize list of sum of the squares to be returned\n    sum_list = [0]\n    #get sum of the first n odd numbers\n    n = get_odd_numbers(n)\n    for i in range(1,n+1):\n        sum_list.append(sum_list[i-1] + i*i)\n    return sum(sum_list)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def square_Sum_Helper(n, sum):\n        if n == 1:\n            return sum\n        else:\n            return square_Sum_Helper(n-1, sum + n*n)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    # nth star number = (n-1) * (n-2) *... * (1)\n    return (n - 1) * find_star_num(n - 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_of_stars = 0\n    count = 1\n    while num_of_stars < n:\n        count = count * 2\n        num_of_stars = num_of_stars + count\n    return count\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    number_of_stars = 1\n    for i in range(1,n+1):\n        number_of_stars *= i\n    return number_of_stars\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #decrease the star_num, and if the star_num < n, increase the star_num.\n    star_num = 1\n    while n > star_num:\n        star_num = star_num * 2 + 1\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # create an empty list to hold the numbers\n    stars = [0]*(n+1)\n    # first star number is 1\n    stars[0] = 1\n    # first star is 1 star\n    stars[1] = 1\n    # first star is 2 stars\n    stars[2] = 2\n    # first star is 3 stars\n    stars[3] = 4\n    # first star is 4 stars\n    stars[4] = 7\n    # first star is 5 stars\n    stars[5] = 13\n    # first star is 6 stars\n    stars[6] = 24\n    # first star is 7 stars\n    stars[7] = 33\n    # first star is 8 stars\n    stars[8] = 39\n    # first star is 9 stars\n    stars[9] = 49\n    # first star is 10 stars\n    stars[10] = 64\n    # first star is 11 stars\n    stars[11] = 81\n    # first star is 12 stars\n    stars[12] = 105\n    # first star is 13 stars\n    stars[13] = 134\n    # first star is 14 stars\n    stars[14] = 153\n    # first star is 15 stars\n    stars[15] = 171\n    # first star is 16 stars\n    stars[16] = 208\n    # first star is 17 stars\n    stars[17] = 263\n    # first star is 18 stars\n    stars[18] = 355\n    # first star is 19 stars\n    stars[19] = 438\n    # first star is 20 stars\n    stars[20] = 552\n    # first star is 21 stars\n    stars[21] = 805\n    # first star is 22 stars\n    stars[22] = 987\n    # first star is 23 stars\n    stars[23] = 1103\n    # first star is 24 stars\n    stars[24] = 1331\n    # first star is 25 stars\n    stars[25] = 1451\n    # first star is 26 stars\n    stars[26] = 1732\n    # first star is 27 stars\n    stars[27] = 1993\n    # first star is 28 stars\n    stars[28] = 2216\n    # first star is 29 stars\n    stars[29] = 2389\n    # first star is 30 stars\n    stars[30] = 2679\n    # first star is 31 stars\n    stars[31] = 2973\n    # first star is 32 stars\n    stars[32] = 3194\n    # first star is 33 stars\n    stars[33] = 3323\n    # first star is 34 stars\n    stars[34] = 3475\n    # first star is 35 stars\n    stars[35] = 3599\n    # first star is 36 stars\n    stars[36] = 3727\n    # first star is 37 stars\n    stars[37] = 3811\n    # first star is 38 stars\n    stars[38] = 3853\n    # first star is 39 stars\n    stars[39] = 3915\n    # first star is 40 stars\n    stars[40] = 4049\n    # first star is 41 stars\n    stars[41] = 4077\n    # first star is 42 stars\n    stars[42] = 4089\n    # first star is 43 stars\n    stars[43] = 4147\n    # first star is 44 stars\n    stars[44] = 4275\n    # first star is 45 stars\n    stars[45] = 4309\n    # first star is 46 stars\n    stars[46] = 4348\n    # first star is 47 stars\n    stars[47] = 4383\n    # first star is 48 stars\n    stars[48] = 4398\n    # first star is 49 stars\n    stars[49] = 4427\n    # first star is 50 stars\n    stars[50] = 4534\n    # first star is 51 stars\n    stars[51] = 4551\n    # first star is 52 stars\n    stars[52] = 4576\n    # first star is 53 stars\n    stars[53] = 4845\n    # first star is 54 stars\n    stars[54] = 4884\n    # first star is 55 stars\n    stars[55] = 4964\n    # first star is 56 stars\n    stars[56] = 4983\n    # first star is 57 stars\n    stars[57] = 5080\n    # first star is 58 stars\n    stars[58] = 5088\n    # first star is 59 stars\n    stars[59] = 5094\n    # first star is 60 stars\n    stars[60] = 5145\n    # first star is 61 stars\n    stars[61] = 5160\n    # first star is 62 stars\n    stars[62] = 5165\n    # first star is 63 stars\n    stars[63] = 5168\n    # first star is 64 stars\n    stars[64] = 5179\n    # first star is 65 stars\n    stars[65] = 5202\n    # first star is 66 stars\n    stars[66] = 5229\n    # first star is 67 stars\n    stars[67] = 5252\n    # first star is 68 stars\n    stars[68] = 5264\n    # first star is 69 stars\n    stars[69] = 5278\n    # first star is 70 stars\n    stars[70] = 5298\n    # first star is 71 stars\n    stars[71] = 5333\n    # first star is 72 stars\n    stars[72] = 5349\n    # first star is 73 stars\n    stars[73] = 5362\n    # first star is 74 stars\n    stars[74] = 5385\n    # first star is 75 stars\n    stars[75] = 5403\n    # first star is 76 stars\n    stars[76] = 5430\n    # first star is 77 stars\n    stars[77] = 5443\n    # first star is 78 stars\n    stars[78] = 5451\n    # first star is 79 stars\n    stars[79] = 5468\n    # first star is 80 stars\n    stars[80] = 5480\n    # first star is 81 stars\n    stars[81] = 5496\n    # first star is 82 stars\n    stars[82] = 5506\n    # first star is 83 stars\n    stars[83] = 5524\n    # first star is 84 stars\n    stars[84] = 5535\n    # first star is 85 stars\n    stars[85] = 5557\n    # first star is 86 stars\n    stars[86] = 5576\n    # first star is 87 stars\n    stars[87] = 5594\n    # first star is 88 stars\n    stars[88] = 5621\n    # first star is 89 stars\n    stars[89] = 5641\n    # first star is 90 stars\n    stars[90] = 5670\n    # first star is 91 stars\n    stars[91] = 5723\n    # first star is 92 stars\n    stars[92] = 5733\n    # first star is 93 stars\n    stars[93] = 5749\n    # first star is 94 stars\n    stars[94] = 5775\n    # first star is 95 stars\n    stars[95] = 5802\n    # first star is 96 stars\n    stars[96] = 5819\n    # first star is 97 stars\n    stars[97] = 5829\n    # first star is 98 stars\n    stars[98] = 5838\n    # first star is 99 stars\n    stars[99] = 5849\n    # first star is 100 stars\n    stars[100] = 5860\n    # first star is 101 stars\n    stars[101] = 5876\n    # first star is 102 stars\n    stars[102] = 5893\n    # first star is 103 stars\n    stars[103] = 5911\n    # first star is 104 stars\n    stars[104] = 5927\n    # first star is 105 stars\n    stars[105] = 5939\n    # first star is 106 stars\n    stars[106] = 5948\n    # first star is 107 stars\n    stars[107] = 5960\n    # first star is 108 stars\n    stars[108] = 5969\n    # first star is 109 stars\n    stars[109] = 5987\n    # first star is 110 stars\n    stars[110] = 6007\n    # first star is 111 stars\n    stars[111] = 6019\n    # first star is 112 stars\n    stars[112] = 6031\n    # first star is 113 stars\n    stars[113] = 6045\n    # first star is 114 stars\n    stars[114] = 6060\n    # first star is 115 stars\n    stars[115] = 6075\n    # first star is 116 stars\n    stars[116] = 6092\n    # first star is 117 stars\n    stars[117] = 6101\n    # firs"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    x = 0\n    for i in range(n):\n        x = x + 2*i + 1\n    return x\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 0\n    k = 1\n    while k <= n:\n        result += 1\n        k *= 10\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    c = 0\n    if n == 0:\n        return 1\n    else:\n        return find_star_num(n-1)*(n+1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    k = 1\n    while n > 1:\n        k += 1\n        n -= 1\n    return k\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 1\n    result = 1\n    while count <= n:\n        result *= count\n        count += 1\n    return result\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == \" \":\n        return \"32\"\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k) - 97\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) > 127:\n        print('ASCII value for \"', k, '\" is', ord(k) - 256)\n    else:\n        print('ASCII value for \"', k, '\" is', ord(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k =='':\n        return 32\n    elif k == 'a':\n        return 97\n    elif k == 'b':\n        return 98\n    elif k == 'c':\n        return 99\n    elif k == 'd':\n        return 100\n    elif k == 'e':\n        return 101\n    elif k == 'f':\n        return 102\n    elif k == 'g':\n        return 103\n    elif k == 'h':\n        return 104\n    elif k == 'i':\n        return 105\n    elif k == 'j':\n        return 106\n    elif k == 'k':\n        return 107\n    elif k == 'l':\n        return 108\n    elif k =='m':\n        return 109\n    elif k == 'n':\n        return 110\n    elif k == 'o':\n        return 111\n    elif k == 'p':\n        return 112\n    elif k == 'q':\n        return 113\n    elif k == 'r':\n        return 114\n    elif k =='s':\n        return 115\n    elif k == 't':\n        return 116\n    elif k == 'u':\n        return 117\n    elif k == 'v':\n        return 118\n    elif k == 'w':\n        return 119\n    elif k == 'x':\n        return 120\n    elif k == 'y':\n        return 121\n    elif k == 'z':\n        return 122\n    else:\n        return -1\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_to_char(ascii_value):\n    '''\n    Write a function to convert an ascii value to a character.\n    '''\n    return chr(ascii_value)\n    \ndef char_to_ascii(char):\n    '''\n    Write a function to convert a character to its ASCII value.\n    '''\n    return ord(char)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for index, value in enumerate(arr):\n        if index%2 == 0 and value%2 == 0:\n            sum_even += value\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_at_even = 0\n    for i in range(0,len(arr),2):\n        if(arr[i]%2==0):\n            sum_even_at_even+=arr[i]\n    return sum_even_at_even\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0,len(arr),2):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for index, value in enumerate(arr):\n        if index % 2 == 0:\n            if value % 2 == 0:\n                sum += value\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index_sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0) and (arr[i] % 2 == 0):\n            even_index_sum += arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i%2==0:\n            if arr[i]%2==0:\n                sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[0::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0,len(arr),2):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([arr[i] for i in range(0,len(arr),2) if i%2==0])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # def sum_even_index(arr):\n    if arr == []:\n        return 0\n    # print(arr[0])\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] % 2 == 0:\n        return arr[0] + sum_even_index(arr[1:])\n    else:\n        return sum_even_index(arr[1:])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # set the initial value of the sum\n    sum = 0 \n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return n*(n+1)*(2*n+1)*(3*n+2)*(4*n+3)\n    \n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(x for x in xrange(1,n,2) if x**5)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #assign the variables\n    total_sum = 0\n    i = 1\n    #while loop\n    while i < n:\n        if i**5 % 2 == 0:\n            total_sum += i**5\n        i += 1\n    return total_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(0,n,1):\n        if (i%2 == 0) and (i**5 == i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    if n < 1:\n        print(\"Invalid Input!\")\n    elif n == 1:\n        return 0\n    else:\n        return even_Power_Sum(n-1) + (n * (n+1) * (2*n + 1)) / 5\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    n = n + 1\n    total = 0\n    for x in range(1,n,2):\n        total = total + (x**5)\n    return total\nprint(even_Power_Sum(10))\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return n*(n+1)*(n+2)*(n+3)*(n+4)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(0,n):\n        if i%2 == 0:\n            total += (i**5)\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    result = 0\n    for i in range(n):\n        if i % 2 == 0:\n            result += i ** 5\n    return result\n    \n    \nprint(even_Power_Sum(9))\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(i[-1]) for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n    \ndef rear_extract2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[-1] for tuple in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return new_list\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([(a - b) for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = (3, 2, 1, -4, 8)\n    test_tup2 = (1, 2, 3, 4, 5)\n    return test_tup1 - test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert isinstance(test_tup1, tuple), \"Input is not a tuple!\"\n    assert isinstance(test_tup2, tuple), \"Input is not a tuple!\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i]-test_tup2[i],)\n    return result\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    substract_list = []\n    for index, element in enumerate(test_tup1):\n        substract_list.append(element - test_tup2[index])\n    \n    return tuple(substract_list)\n    \n    \nif __name__ == '__main__':\n    # print(substract_elements((5, 3, 1), (1, 2, 3)))\n    # print(substract_elements((4, 5, 6), (1, 2, 3)))\n    \n    print(substract_elements((5, 3, 1), (1, 2, 3)))\n    print(substract_elements((4, 5, 6), (1, 2, 3)))\n    \n    print(substract_elements((6, 2, 4), (4, 3, 1)))\n    print(substract_elements((5, 3, 1), (4, 3, 1)))\n    \n    print(substract_elements((4, 5, 6), (3, 2, 1)))\n    print(substract_elements((5, 3, 1), (3, 2, 1)))\n    \n    print(substract_elements((3, 3, 4), (3, 2, 1)))\n    print(substract_elements((5, 3, 1), (3, 2, 1)))\n    \n    print(substract_elements((3, 3, 4), (4, 3, 1)))\n    print(substract_elements((5, 3, 1), (4, 3, 1)))\n    \n    print(substract_elements((3, 3, 4), (3, 3, 3)))\n    print(substract_elements((5, 3, 1), (3, 3, 3)))\n    \n    print(substract_elements((3, 3, 4), (4, 3, 3)))\n    print(substract_elements((5, 3, 1), (4, 3, 3)))\n    \n    print(substract_elements((3, 3, 4), (5, 3, 3)))\n    print(substract_elements((5, 3, 1), (5, 3, 3)))\n    \n    print(substract_elements((3, 3, 4), (6, 3, 3)))\n    print(substract_elements((5, 3, 1), (6, 3, 3)))\n    \n    print(substract_elements((3, 3, 4), (7, 3, 3)))\n    print(substract_elements((5, 3, 1), (7, 3, 3)))\n    \n    print(substract_elements((3, 3, 4), (8, 3, 3)))\n    print(substract_elements((5, 3, 1), (8, 3, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 3, 3)))\n    print(substract_elements((5, 3, 1), (9, 3, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 4, 3)))\n    print(substract_elements((5, 3, 1), (9, 4, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 5, 3)))\n    print(substract_elements((5, 3, 1), (9, 5, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 6, 3)))\n    print(substract_elements((5, 3, 1), (9, 6, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 7, 3)))\n    print(substract_elements((5, 3, 1), (9, 7, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 8, 3)))\n    print(substract_elements((5, 3, 1), (9, 8, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 9, 3)))\n    print(substract_elements((5, 3, 1), (9, 9, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 10, 3)))\n    print(substract_elements((5, 3, 1), (9, 10, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 11, 3)))\n    print(substract_elements((5, 3, 1), (9, 11, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 12, 3)))\n    print(substract_elements((5, 3, 1), (9, 12, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 13, 3)))\n    print(substract_elements((5, 3, 1), (9, 13, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 14, 3)))\n    print(substract_elements((5, 3, 1), (9, 14, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 15, 3)))\n    print(substract_elements((5, 3, 1), (9, 15, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 16, 3)))\n    print(substract_elements((5, 3, 1), (9, 16, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 17, 3)))\n    print(substract_elements((5, 3, 1), (9, 17, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 18, 3)))\n    print(substract_elements((5, 3, 1), (9, 18, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 19, 3)))\n    print(substract_elements((5, 3, 1), (9, 19, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 20, 3)))\n    print(substract_elements((5, 3, 1), (9, 20, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 21, 3)))\n    print(substract_elements((5, 3, 1), (9, 21, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 22, 3)))\n    print(substract_elements((5, 3, 1), (9, 22, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 23, 3)))\n    print(substract_elements((5, 3, 1), (9, 23, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 24, 3)))\n    print(substract_elements((5, 3, 1), (9, 24, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 25, 3)))\n    print(substract_elements((5, 3, 1), (9, 25, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 26, 3)))\n    print(substract_elements((5, 3, 1), (9, 26, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 27, 3)))\n    print(substract_elements((5, 3, 1), (9, 27, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 28, 3)))\n    print(substract_elements((5, 3, 1), (9, 28, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 29, 3)))\n    print(substract_elements((5, 3, 1), (9, 29, 3)))\n    \n    print(substract_elements((3, 3, 4), (9, 30, 3)))\n    print(substract_elements((5, 3, 1), (9, 3"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    output_tup = []\n    for i in range(len(test_tup1)):\n        output_tup.append(test_tup1[i] - test_tup2[i])\n    return output_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError('Both tuples should be given as tuples')\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuple lengths should be same')\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    elem_subs = []\n    for i in range(len(test_tup1)):\n        elem_subs.append(test_tup1[i] - test_tup2[i])\n    return tuple(elem_subs)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = []\n    for i in range(n + 1):\n        if i == 0 or i == 1:\n            binomial_coeff.append(1)\n        elif i > 1:\n            a = math.factorial(n)\n            b = math.factorial(n - i)\n            c = math.factorial(i)\n            binomial_coeff.append(math.floor(a/(b * c)))\n    even_binomial_coeff_sum = sum(binomial_coeff)\n    return even_binomial_coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coefficient = 1.0\n    for i in range(2,n+1):\n        coefficient += ( math.factorial(n)/(math.factorial(n-i)*(i+1)))\n    return coefficient\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    \n    n_factorial=1\n    for i in range(1,n+1):\n        n_factorial=n_factorial*i\n        \n    n_factorial=n_factorial/math.factorial(n)\n    \n    final_result=0\n    for j in range(0,n/2+1):\n        final_result=final_result+pow(2,j)*pow(n_factorial,n-2*j)\n    return final_result\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    n_factorial = math.factorial(n)\n    binomial_list = [1]\n    for i in range(2,n+1):\n        binomial_list.append(binomial_list[-1]*i)\n    Coeff_sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            Coeff_sum += binomial_list[n]/binomial_list[i]\n    return Coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n-1) + n\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 1\n    else:\n        return n*even_binomial_Coeff_Sum(n-1)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binom_list = []\n    for i in range(0,n+1):\n        binom_list.append(0)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_coeff = [1,1,2]\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2,n+1):\n            bin_coeff.append( bin_coeff[i-1]+bin_coeff[i-2])\n        return bin_coeff[n]\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeffs = [1 for i in xrange(n)]\n    for i in xrange(n):\n        coeffs[i] = (n - i) * coeffs[i] // i\n    return sum(coeffs)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return n + even_binomial_Coeff_Sum(n - 2)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.1415 * r * r * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = math.pi*(r**2)*h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=math.pi*r**2*h\n    return volume\n    \n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = math.pi * r**2 * h\n    return v\n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the volume.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v\n    \ndef area_cube(s):\n    '''\n    Write a function that takes in the side of a cube and returns the the surface area.\n    '''\n    a = 6 * s**2\n    return a\n    \ndef area_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the surface area.\n    '''\n    a = 4 * math.pi * r**2\n    return a\n    \ndef area_rectangle(b, h):\n    '''\n    Write a function that takes in the length and height of a rectangle and returns the the surface area.\n    '''\n    a = b * h\n    return a\n    \ndef area_trapezoid(b1,b2,h):\n    '''\n    Write a function that takes in the base of one of the sides of a trapezoid and the height of the rectangle and returns the the surface area.\n    '''\n    a = (1/2) * (b1 + b2) * h\n    return a\n    \ndef area_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the surface area.\n    '''\n    a = math.pi * r**2 * h / 3\n    return a\n    \ndef area_torus(r1,r2):\n    '''\n    Write a function that takes in the radius of a torus and returns the the surface area.\n    '''\n    a = math.pi * (r1**2 + r2**2)\n    return a\n    \ndef area_sphere_volume(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the volume.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v\n    \ndef area_sphere_surface(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the surface area.\n    '''\n    a = 4 * math.pi * r**2\n    return a\n    \ndef area_sphere_volume_surface(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the volume and the surface area.\n    '''\n    v = (4/3) * math.pi * r**3\n    a = 4 * math.pi * r**2\n    return v,a\n    \ndef area_triangle(b,h):\n    '''\n    Write a function that takes in the base and height of a triangle and returns the the surface area.\n    '''\n    a = (b * h) / 2\n    return a\n    \ndef area_triangle_rectangle(b,h):\n    '''\n    Write a function that takes in the base and height of a triangle and returns the the surface area of a rectangle that can be made from it.\n    '''\n    a = (b * h)\n    return a\n    \ndef area_rectangle_sphere(b,h):\n    '''\n    Write a function that takes in the base and height of a rectangle and returns the the surface area of a sphere that can be made from it.\n    '''\n    a = (b * h) / 2\n    return a\n    \ndef area_rectangle_sphere_volume(b,h):\n    '''\n    Write a function that takes in the base and height of a rectangle and returns the the surface area of a sphere that can be made from it.\n    '''\n    v = (b * h) / 2\n    return v\n    \ndef area_rectangle_cylinder(b,h):\n    '''\n    Write a function that takes in the base and height of a rectangle and returns the the surface area of a cylinder that can be made from it.\n    '''\n    v = (b * h) / 2\n    return v\n    \ndef area_cylinder_sphere(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the surface area of a sphere that can be made from it.\n    '''\n    a = (math.pi * r**2) / 4\n    return a\n    \ndef area_cylinder_volume(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume of a cylinder that can be made from it.\n    '''\n    v = (math.pi * r**2) * h\n    return v\n    \ndef area_cylinder_sphere_volume(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume of a sphere that can be made from it.\n    '''\n    v = (math.pi * r**2) * h / 4\n    return v\n    \ndef area_sphere_area_volume(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the surface area, the volume and the surface area.\n    '''\n    a = 4 * math.pi * r**2\n    v = (4/3) * math.pi * r**3\n    return a,v,a\n    \ndef area_sphere_surface_volume(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the surface area, the volume and the surface area.\n    '''\n    a = 4 * math.pi * r**2\n    v = (4/3) * math.pi * r**3\n    return a,v,a\n    \ndef area_sphere_surface_volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius of a cylinder and returns the the surface area, the volume and the surface area.\n    '''\n    a = 4 * math.pi * r**2\n    v = (4/3) * math.pi * r**3 * h\n    return a,v,a\n    \ndef area_sphere_surface_volume_rectangle(b,h):\n    '''\n    Write a function that takes in the base and height of a rectangle and returns the the surface area, the volume and the surface area.\n    '''\n    a = 4 * math.pi * r**2\n    v = (b * h) / 2\n    return a,v,a\n    \ndef area_sphere_surface_volume_triangle(b,h):\n    '''\n    Write a function that takes in the base and height of a triangle and returns the the surface area, the volume and the surface area.\n    '''\n    a = 4 * math.pi * r**2\n    v = (b * h) / 2\n    return a,v,a\n    \ndef area_sphere_surface_volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the surface area, the volume and the surface area.\n    '''\n    a = 4 * math.pi * r**2\n    v = (4/3) * math.pi * r**3\n    return a,v,a\n    \ndef area_sphere_surface_volume_sphere_rectangle(r,b,h):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the surface area, the volume and the surface area of a rectangle that can be made from it.\n    '''\n    a = 4 * math.pi * r**2\n    v = (b * h) / 2\n    return a,v,a\n    \ndef area_sphere_surface_volume_sphere_triangle(r,b,h):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the surface area, the volume and the surface area of a rectangle that can be made from it.\n    '''\n    a = 4 * math.pi * r**2\n    v = (b * h) / 2\n    return a,v,a\n    \ndef area_sphere_surface_volume_sphere_cylinder(r,h):\n    '''\n    Write a function that takes in the radius of a cylinder and returns the the surface area, the volume and the surface area.\n    ''"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.1415926) * (r**2) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = math.pi\n    v = pi * (r**2) * h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = pi * r**2 * h\n    return v\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output = {}\n    for key, value in dict.iteritems():\n        if value >= n:\n            output[key] = value\n    return output\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for i in dict:\n        if dict[i] < n:\n            dict[i]=0\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    ret = {}\n    for key, value in dict.iteritems():\n        if value >= n:\n            ret[key] = value\n    return ret\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    out = {}\n    for key in dict:\n        if dict[key] >= n:\n            out[key] = dict[key]\n    return out\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #Create a new dictionary and return it\n    dict_n = {}\n    for key,val in dict.items():\n        if val >= n:\n            dict_n[key] = val\n    return dict_n\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k in dict:\n        if dict[k] >= n:\n            new_dict[k] = dict[k]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if not isinstance(dict,dict):\n        return \"Invalid input\"\n    if not isinstance(n,int):\n        return \"Invalid input\"\n    \n    for key in dict:\n        if dict[key] < n:\n            del dict[key]\n    return dict\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Convert the tuple into a list\n    temp_list = list(test_tup)\n    # Split the list into the tuple elements\n    temp_list = [elem.split(' ') for elem in temp_list]\n    # Get the first element from each tuple and store them in a new list\n    temp_list_2 = []\n    for elem in temp_list:\n        temp_list_2.append(elem[0])\n    # Count the number of occurence of each element in the list\n    count = {}\n    for elem in temp_list_2:\n        if elem in count.keys():\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    # Return the dictionary of elements and count\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    def first(tup):\n        return tup[0]\n    return len(reduce(lambda x, y: x if first(x) < first(y) else y, test_tup))\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    return len([item for item in test_tup[1:] if item <= test_tup[0]])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    index = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            return index\n        index += 1\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            break\n        count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(0, len(test_tup)):\n        if test_tup[i] == 0:\n            count = count + 1\n        elif test_tup[i] > 0:\n            return count\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for tup in test_tup:\n        if tup[0] < tup[1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([val for val in test_tup[1:] if val < test_tup[0]])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Please input a tuple.'\n    else:\n        count = 0\n        for i in test_tup:\n            if type(i)!= tuple:\n                continue\n            else:\n                count += 1\n                if count > 1:\n                    print 'More than one elements before', i\n                else:\n                    print 'The first element is', i\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    d = dict()\n    for x in test_tup:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    return d\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n+1)*(n+2)/2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        # Recursively calculate the last n decagonals\n        return n*10 + n*(n+1)/2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n -= 1\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    n = n * 10\n    res = n + (n % 100)\n    if res < 100:\n        return False\n    for i in range(1, n // 100):\n        x = 100 * i\n        y = (i + 1) * (i + 1)\n        z = (i + 2) * (i + 2)\n        res = x + y + z\n        if res == n:\n            return True\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    digit_sum = 0\n    for i in range(1,n+1):\n        digit_sum += i\n    return digit_sum**2 == n\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (2 * n + 1) / 2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return -1\n    else:\n        return int(n/2)\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize num_list to store the decagonal numbers\n    num_list = [0] * (n + 1)\n    num_list[0] = 1\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    d = 0\n    i = 1\n    while True:\n        d += i\n        if d >= n:\n            return i\n        i += 1\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = n * (n + 1) // 2\n    if is_num_square(num): return True\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(n + 1)) // 2\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, x in enumerate(dlist):\n        if x == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    idx = 0\n    for i in dlist:\n        if i == item:\n            return True, idx\n        idx = idx + 1\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    i = 0\n    found = False\n    while i < len(dlist) and not found:\n        if dlist[i] == item:\n            found = True\n        else:\n            i += 1\n    return (found, i)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #This is how you'd do this in python\n    #return [i for i in range(len(dlist)) if item == dlist[i]][0] if item in dlist else -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            pos = i\n            break\n    return pos\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for x in test_list:\n        for y in test_list:\n            if x == y:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #start writing your code here\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n    \ndef factorial(n):\n    '''\n    Write a python function to return the factorial of a given number n.\n    '''\n    factorial_n = 1\n    for i in range(1,n+1):\n        factorial_n = factorial_n * i\n    return factorial_n\n    \ndef two_digit_number(num):\n    '''\n    Write a python function to check if a given number is a two digit or not.\n    '''\n    if len(str(num)) == 2:\n        return True\n    return False\n    \ndef fizz_buzz_list(num):\n    '''\n    Write a python function to return a list of fizzbuzz result, where the number is divisible by 3 or by 5.\n    '''\n    return []\n    \ndef fizz_buzz_list_1(num):\n    '''\n    Write a python function to return a list of fizzbuzz result, where the number is divisible by 3 or by 5.\n    '''\n    return []\n    \ndef fizz_buzz_list_2(num):\n    '''\n    Write a python function to return a list of fizzbuzz result, where the number is divisible by 3 or by 5.\n    '''\n    return []\n    \ndef super_reduced_string(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_1(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_2(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_3(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_4(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_5(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_6(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_7(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_8(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_9(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_10(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_11(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_12(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_13(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_14(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_15(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_16(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_17(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_18(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_19(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_20(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_21(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_22(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_23(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_24(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_25(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_26(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_27(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_28(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_29(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_30(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_31(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_32(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_33(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_34(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_35(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_36(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_37(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_38(string):\n    '''\n    Write a python function to return a string after removing consecutive duplicate characters.\n    '''\n    return []\n    \ndef super_reduced_string_39(string)"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (test_list[i] == test_list[j] and i!= j):\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    result = []\n    for el in test_list:\n        if el in result:\n            return False\n        else:\n            result.append(el)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n    \n    \nall_unique([1,2,3,4,5])\nall_unique([1,2,3,4,1])\nall_unique([1,2,3,4])\nall_unique([1,2,2,4])\nall_unique([1,2,3,3])\nall_unique([1,1,1,1,1])\nall_unique([])\nall_unique([1])\nall_unique([1,2,3,4,5])"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for item in test_list:\n        if test_list.count(item) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    unique = True\n    for i in test_list:\n        if test_list.count(i) > 1:\n            unique = False\n            break\n    return unique\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    ans = []\n    for i in range(len(nums1)):\n        ans.append(nums1[i] - nums2[i])\n    return ans\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n    else:\n        return [i-j for i,j in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    if len(nums1) < len(nums2):\n        length = len(nums1)\n    else:\n        length = len(nums2)\n    for i in range(length):\n        new_list.append(nums1[i] - nums2[i])\n    return new_list\ndef chmul_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]*nums2[i])\n    return new_list\ndef reverse_list(nums):\n    '''\n    Write a function to reverse a list.\n    '''\n    for i in range(len(nums)/2):\n        temp = nums[i]\n        nums[i] = nums[len(nums)-i-1]\n        nums[len(nums)-i-1] = temp\n    return nums\ndef list_reversed(nums):\n    '''\n    Write a function that takes a list of numbers and\n    reverses the order of the elements in place.\n    '''\n    nums.reverse()\n    return nums\ndef is_palindrome(nums):\n    '''\n    Write a function to check whether a list is a palindrome.\n    '''\n    if len(nums) == 1:\n        return True\n    elif len(nums) > 1:\n        if nums[0]!= nums[len(nums)-1]:\n            return False\n        else:\n            return is_palindrome(nums[1:len(nums)-1])\n    else:\n        return False\ndef list_palindrome(nums):\n    '''\n    Write a function that returns a list of palindromes\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        new_list.append(nums[i])\n    for i in range(len(nums)):\n        new_list.append(nums[i])\n    new_list = list_reversed(new_list)\n    return new_list\ndef find_nth_number(nums,n):\n    '''\n    Write a function that takes a list of numbers and\n    returns the nth number.\n    '''\n    for i in range(len(nums)):\n        if len(nums) - i == n:\n            return nums[i]\n    return 'IndexError'\ndef binary_search(nums,value):\n    '''\n    Write a function that takes a sorted list of numbers\n    and returns the index of the first occurence of value in the list.\n    '''\n    low = 0\n    high = len(nums)\n    mid = (low+high)//2\n    while low <= high:\n        if nums[mid] == value:\n            return mid\n        elif value < nums[mid]:\n            high = mid -1\n        else:\n            low = mid + 1\n        mid = (low+high)//2\n    return 'Not found'\ndef sgn_list(nums):\n    '''\n    Write a function that takes a list of numbers and\n    returns the sign of the number with the smallest absolute value\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) > 1:\n        if abs(nums[0]) < abs(nums[1]):\n            return nums[0]\n        else:\n            return nums[1]\n    else:\n        return 'Error'\ndef find_max(nums):\n    '''\n    Write a function that returns the max number in a list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums)\ndef find_min(nums):\n    '''\n    Write a function that returns the min number in a list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return min(nums)\ndef list_max(nums):\n    '''\n    Write a function that returns the max number in a list.\n    '''\n    max_num = find_max(nums)\n    for i in range(len(nums)):\n        if nums[i] == max_num:\n            return nums[i]\n    return 'Not found'\ndef list_min(nums):\n    '''\n    Write a function that returns the min number in a list.\n    '''\n    min_num = find_min(nums)\n    for i in range(len(nums)):\n        if nums[i] == min_num:\n            return nums[i]\n    return 'Not found'\ndef find_element(nums,element):\n    '''\n    Write a function that returns the index of the element if it exists\n    in the list, or -1 if it does not.\n    '''\n    for i in range(len(nums)):\n        if nums[i] == element:\n            return i\n    return -1\ndef remove_duplicate(nums):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\ndef count_vowels(string):\n    '''\n    Write a function that counts the number of vowels in a string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(string)):\n        if string[i] in vowels:\n            count += 1\n    return count\ndef list_sum(nums):\n    '''\n    Write a function that sums up all the numbers in a list.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    return total\ndef get_median(nums):\n    '''\n    Write a function that takes a list and returns the median.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        nums.sort()\n        length = len(nums)\n        if length%2 == 0:\n            return (nums[length//2] + nums[length//2-1])/2\n        else:\n            return nums[length//2]\ndef list_median(nums):\n    '''\n    Write a function that takes a list of numbers and returns the\n    median.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        nums.sort()\n        length = len(nums)\n        if length%2 == 0:\n            return (nums[length//2] + nums[length//2-1])/2\n        else:\n            return nums[length//2]\ndef find_missing(nums):\n    '''\n    Write a function that takes a list of numbers and returns the\n    number that is missing.\n    '''\n    total = list_sum(nums)\n    length = len(nums)\n    return (total - sum(nums)) - length\ndef bsearch(nums,element):\n    '''\n    Write a function that takes a list and returns the index of\n    the number if it exists, or -1 if it does not.\n    '''\n    low = 0\n    high = len(nums)\n    while low <= high:\n        mid = (low+high)//2\n        if nums[mid] == element:\n            return mid\n        elif nums[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\ndef max_gap(nums):\n    '''\n    Write a function that takes a list of numbers and returns the\n    maximum gap between two numbers in the list.\n    '''\n    max_gap = -float('inf')\n    for i in range(len(nums)-1):\n        if nu"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(nums1)):\n        list1.append(nums1[i] - nums2[i])\n    return list1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1) > len(nums2):\n        return \"Not Possible\"\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    l = []\n    for i in range(n):\n        l.append(nums1[i] - nums2[i])\n    return l\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1_len = len(nums1)\n    nums2_len = len(nums2)\n    if nums1_len > nums2_len:\n        return [num1-num2 for num1,num2 in zip(nums1[:nums2_len],nums2)]\n    else:\n        return [num2-num1 for num2,num1 in zip(nums2[:nums1_len],nums1)]\ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    nums1_len = len(nums1)\n    nums2_len = len(nums2)\n    if nums1_len > nums2_len:\n        return [num1+num2 for num1,num2 in zip(nums1[:nums2_len],nums2)]\n    else:\n        return [num2+num1 for num2,num1 in zip(nums2[:nums1_len],nums1)]\ndef move_zeros(nums):\n    '''\n    Write a function to move all zeros to the end of a list.\n    '''\n    return [num for num in nums if num!= 0] + [0] * (len(nums) - len(nums))\ndef rotate_list(nums, n):\n    '''\n    Write a function that rotates a list by a given number of steps.\n    '''\n    n = n % len(nums)\n    return nums[n:] + nums[:n]\ndef remove_duplicates(nums):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    return set(nums)\ndef delete_elements(nums, idxs):\n    '''\n    Write a function that deletes multiple elements from a list.\n    '''\n    return [num for idx, num in enumerate(nums) if idx not in idxs]\ndef delete_element(nums, idx):\n    '''\n    Write a function that deletes an element from a list.\n    '''\n    return nums[:idx] + nums[idx+1:]\ndef find_duplicates(nums):\n    '''\n    Write a function that finds all the duplicates in a list.\n    '''\n    return [num for num in nums if nums.count(num) > 1]\ndef find_missing(nums):\n    '''\n    Write a function that finds the missing element in a list of numbers.\n    '''\n    return [i for i in range(len(nums)) if i not in nums]\ndef largest_product(nums):\n    '''\n    Write a function that finds the largest product of two integers in a list.\n    '''\n    return max(reduce(mul, nums),reduce(mul, reversed(nums)))\ndef two_largest(nums):\n    '''\n    Write a function that finds the two largest integers in a list.\n    '''\n    return sorted(nums)[-2:]\ndef find_duplicates(nums):\n    '''\n    Write a function that finds the duplicates in a list of numbers.\n    '''\n    return [num for num in nums if nums.count(num) > 1]\ndef find_duplicates(nums):\n    '''\n    Write a function that finds the duplicates in a list of numbers.\n    '''\n    return [num for num in nums if nums.count(num) > 1]\ndef replace_first(nums, val):\n    '''\n    Write a function that replaces the first element of a list with a new value.\n    '''\n    return nums[1:] + [val]\ndef replace_last(nums, val):\n    '''\n    Write a function that replaces the last element of a list with a new value.\n    '''\n    return nums[:-1] + [val]\ndef top_3_words(text):\n    '''\n    Write a function that returns the top 3 most occurring words in a string.\n    '''\n    return sorted(set(text.split()), key=lambda s: text.split().count(s), reverse=True)[:3]\ndef add_str(str1, str2):\n    '''\n    Write a function that adds two strings together without using the '+' operator.\n    '''\n    return str1 + str2\ndef reverse_str(str1):\n    '''\n    Write a function that returns the reverse of a string.\n    '''\n    return str1[::-1]\ndef reverse_list(nums):\n    '''\n    Write a function that returns the reverse of a list.\n    '''\n    return nums[::-1]\ndef add_strs(str1, str2):\n    '''\n    Write a function that returns the sum of two strings together without using the '+' operator.\n    '''\n    return str1 + str2\ndef add_str_str(str1, str2):\n    '''\n    Write a function that returns the sum of two strings together using a for loop.\n    '''\n    return sum(str1 + str2)\ndef add_str_list(str1, str2):\n    '''\n    Write a function that returns the sum of two strings together using a for loop and a list.\n    '''\n    return sum([str1,str2])\ndef remove_duplicates(nums):\n    '''\n    Write a function that returns a new list that is the list of unique elements of a list.\n    '''\n    return set(nums)\ndef get_rotated_list(nums, n):\n    '''\n    Write a function that returns the rotated list of a list of integers by an amount n.\n    '''\n    return nums[n:] + nums[:n]\ndef is_rotated(nums):\n    '''\n    Write a function that returns true if the list is rotated.\n    '''\n    return len(nums) >= 3 and nums[1:] == nums[:-1]\ndef rotate_right(nums):\n    '''\n    Write a function that returns the rotated list of a list of integers by an amount n.\n    '''\n    return nums[-1:] + nums[:-1]\ndef rotate_left(nums):\n    '''\n    Write a function that returns the rotated list of a list of integers by an amount n.\n    '''\n    return nums[1:] + nums[:1]\ndef count_rotations(nums):\n    '''\n    Write a function that returns the number of rotations of a list.\n    '''\n    if len(nums) < 3:\n        return 0\n    for idx in xrange(len(nums)-1):\n        if nums[idx]!= nums[idx+1]:\n            return idx+1\n    return len(nums)\ndef first_unique_char(str1):\n    '''\n    Write a function that returns the first unique character in a string.\n    '''\n    unique_chars = []\n    for char in str1:\n        if char not in unique_chars:\n            unique_chars.append(char)\n    return unique_chars[0]\ndef length_of_last_word(str1):\n    '''\n    Write a function that returns the length of the last word in a string.\n    '''\n    return len(str1.split()[-1])\ndef sort_by_last_char(str1):\n    '''\n    Write a function that returns a sorted list of strings by their last character.\n    '''\n    return sorted(str1, key=lambda s: s[-1])\ndef sort_by_last_2_char(str1):\n    '''\n    Write a function that returns a sorted list of strings by their last 2 characters.\n    '''\n    return sorted(str1, key=lambda s: s[-1:-3:-1])\ndef sort_by_last_3_char(str1):\n    '''\n    Write a function that returns a sorted list of strings by their last 3 characters.\n    '''\n    return sorted(str1, key=lambda s: s[-1:-4:-1])\ndef remove_last_n_chars(str1, n):\n    '''"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in xrange(len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len([x for x in str(n) if int(x) <= int(x)]) == len(str(n))\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    m = [int(i) for i in str(n)]\n    freq = {i: m.count(i) for i in set(m)}\n    return all(freq[i] <= i for i in freq.keys())\n    \n    \ndef isPrime(n):\n    if n == 2:\n        return True\n    if n%2 == 0 or n <= 1:\n        return False\n    for i in range(3,int(n**0.5) + 1,2):\n        if n%i == 0:\n            return False\n    return True\n    \ndef testIsPrime():\n    assert isPrime(0) == False\n    assert isPrime(1) == False\n    assert isPrime(2) == True\n    assert isPrime(3) == True\n    assert isPrime(4) == False\n    assert isPrime(5) == True\n    assert isPrime(6) == False\n    assert isPrime(7) == True\n    assert isPrime(8) == False\n    assert isPrime(9) == False\n    assert isPrime(10) == False\n    assert isPrime(11) == True\n    assert isPrime(12) == False\n    assert isPrime(13) == True\n    assert isPrime(14) == False\n    assert isPrime(15) == True\n    assert isPrime(16) == False\n    assert isPrime(17) == True\n    assert isPrime(18) == False\n    assert isPrime(19) == True\n    assert isPrime(20) == False\n    assert isPrime(21) == False\n    assert isPrime(22) == True\n    assert isPrime(23) == False\n    assert isPrime(24) == False\n    assert isPrime(25) == False\n    assert isPrime(26) == False\n    assert isPrime(27) == False\n    assert isPrime(28) == False\n    assert isPrime(29) == False\n    assert isPrime(30) == False\n    assert isPrime(31) == True\n    assert isPrime(32) == False\n    assert isPrime(33) == False\n    assert isPrime(34) == False\n    assert isPrime(35) == False\n    assert isPrime(36) == False\n    assert isPrime(37) == False\n    assert isPrime(38) == False\n    assert isPrime(39) == False\n    assert isPrime(40) == False\n    assert isPrime(41) == False\n    assert isPrime(42) == False\n    assert isPrime(43) == True\n    assert isPrime(44) == False\n    assert isPrime(45) == False\n    assert isPrime(46) == False\n    assert isPrime(47) == False\n    assert isPrime(48) == False\n    assert isPrime(49) == False\n    assert isPrime(50) == False\n    assert isPrime(51) == False\n    assert isPrime(52) == False\n    assert isPrime(53) == True\n    assert isPrime(54) == False\n    assert isPrime(55) == False\n    assert isPrime(56) == False\n    assert isPrime(57) == False\n    assert isPrime(58) == False\n    assert isPrime(59) == False\n    assert isPrime(60) == False\n    assert isPrime(61) == False\n    assert isPrime(62) == False\n    assert isPrime(63) == False\n    assert isPrime(64) == False\n    assert isPrime(65) == False\n    assert isPrime(66) == False\n    assert isPrime(67) == False\n    assert isPrime(68) == False\n    assert isPrime(69) == False\n    assert isPrime(70) == False\n    assert isPrime(71) == False\n    assert isPrime(72) == False\n    assert isPrime(73) == True\n    assert isPrime(74) == False\n    assert isPrime(75) == False\n    assert isPrime(76) == False\n    assert isPrime(77) == False\n    assert isPrime(78) == False\n    assert isPrime(79) == False\n    assert isPrime(80) == False\n    assert isPrime(81) == False\n    assert isPrime(82) == False\n    assert isPrime(83) == False\n    assert isPrime(84) == False\n    assert isPrime(85) == False\n    assert isPrime(86) == False\n    assert isPrime(87) == False\n    assert isPrime(88) == False\n    assert isPrime(89) == False\n    assert isPrime(90) == False\n    assert isPrime(91) == False\n    assert isPrime(92) == False\n    assert isPrime(93) == False\n    assert isPrime(94) == False\n    assert isPrime(95) == False\n    assert isPrime(96) == False\n    assert isPrime(97) == False\n    assert isPrime(98) == False\n    assert isPrime(99) == False\n    assert isPrime(100) == False\n    assert isPrime(101) == False\n    assert isPrime(102) == False\n    assert isPrime(103) == False\n    assert isPrime(104) == False\n    assert isPrime(105) == False\n    assert isPrime(106) == False\n    assert isPrime(107) == False\n    assert isPrime(108) == False\n    assert isPrime(109) == False\n    assert isPrime(110) == False\n    assert isPrime(111) == False\n    assert isPrime(112) == False\n    assert isPrime(113) == False\n    assert isPrime(114) == False\n    assert isPrime(115) == False\n    assert isPrime(116) == False\n    assert isPrime(117) == False\n    assert isPrime(118) == False\n    assert isPrime(119) == False\n    assert isPrime(120) == False\n    assert isPrime(121) == False\n    assert isPrime(122) == False\n    assert isPrime(123) == False\n    assert isPrime(124) == False\n    assert isPrime(125) == False\n    assert isPrime(126) == False\n    assert isPrime(127) == False\n    assert isPrime(128) == False\n    assert isPrime(129) == False\n    assert isPrime(130) == False\n    assert isPrime(131) == False\n    assert isPrime(132) == False\n    assert isPrime(133) == False\n    assert isPrime(134) == False\n    assert isPrime(135) == False\n    assert isPrime(136) == False\n    assert isPrime(137) == False\n    assert isPrime(138) == False\n    assert isPrime(139) == False\n    assert isPrime(140) == False\n    assert isPrime(141) == False\n    assert isPrime(142) == False\n    assert isPrime(143) == False\n    assert isPrime(144) == False\n    assert isPrime(145) == False\n    assert isPrime(146) == False\n    assert isPrime(147) == False\n    assert isPrime(148) == False\n    assert isPrime(149) == False\n    assert isPrime(150) == False\n    assert isPrime(151) == True\n    assert isPrime(152) == False\n    assert isPrime(153) == False\n    assert isPrime(154) == False\n    assert isPrime(155) == False\n    assert isPrime(156) == False\n    assert isPrime(157) == False\n    assert isPrime(158) == False\n    assert isPrime(159) == False\n    assert isPrime(160) == False\n    assert isPrime(161) == False\n    assert isPrime(162) == False\n    assert isPrime(163) == False\n    assert isPrime(164) == False\n    assert isPrime(165) == False\n    assert isPrime(166) == False\n    assert isPrime(167) == False\n    assert isPrime(168) == False\n    assert isPrime(169) == False\n    assert isPrime(170) == False\n    assert isPrime(171) == False\n    assert isPrime(172) == False\n    assert isPrime(173) == False\n    assert isPrime(174) == False\n    assert isPrime(175) == False\n    assert isPrime(176) == False\n    assert isPrime(177) == False\n    assert isPrime(178) == False\n    assert isPrime(179) == False\n    assert isPrime(180) == False\n    assert isPrime(181) == False\n    assert isPrime(182) == False\n    assert isPrime(183) == False\n    assert isPrime(184) == False\n    assert isPrime(185) == Fals"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 10:\n        return True\n    temp = n%10\n    for i in range(10):\n        if(n%(10**(i+1))//(10**i)>temp):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    temp = str(n)\n    for i in range(10):\n        if temp.count(str(i)) > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    l = [i for i in s]\n    a = sorted(l)\n    t = set(a)\n    if len(t) == len(a):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n<10:\n        return True\n    else:\n        digits = [int(i) for i in str(n)]\n        sorted_digits = sorted(digits)\n        return all(i <= j for i, j in zip(sorted_digits, sorted_digits[1:]))\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = n\n    s = str(n)\n    for i in range(0,10):\n        if s.count(str(i)) > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0:\n        n = -n\n    print '{0}'.format(n)\n    num = str(n)\n    nlist = []\n    for i in num:\n        nlist.append(int(i))\n    nlist.sort()\n    print '{0}'.format(nlist)\n    \n    numdict = {}\n    for i in nlist:\n        if i not in numdict:\n            numdict[i] = 0\n        numdict[i] += 1\n    print '{0}'.format(numdict)\n    \n    flag = True\n    for i in numdict:\n        if numdict[i] < i:\n            flag = False\n            break\n    if flag:\n        print \"YES\"\n    else:\n        print \"NO\"\n    \ndef check_exp(n):\n    '''\n    Check whether an integer is a power of 2.\n    '''\n    if n < 0:\n        n = -n\n    print '{0}'.format(n)\n    num = str(n)\n    nlist = []\n    for i in num:\n        nlist.append(int(i))\n    nlist.sort()\n    print '{0}'.format(nlist)\n    \n    numdict = {}\n    for i in nlist:\n        if i not in numdict:\n            numdict[i] = 0\n        numdict[i] += 1\n    print '{0}'.format(numdict)\n    \n    flag = True\n    for i in numdict:\n        if numdict[i] < 2*i:\n            flag = False\n            break\n    if flag:\n        print \"YES\"\n    else:\n        print \"NO\"\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return all([int(i) <= int(i) for i in str(n)])\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10\n    n = abs(n)\n    while n > 0:\n        digit = n % 10\n        count[digit] += 1\n        n = n / 10\n    for i in range(len(count)):\n        if count[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return list[0] == element\n    else:\n        if list[0] == element:\n            return check_element(list[1:],element)\n        else:\n            return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list.count(element) == len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(r'(.)\\1{2}', text)\n    return match\n    \n    \ndef text_match_two_three_end(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters,\n    and ends in 'the' or 'in'.\n    '''\n    match = re.search(r'(.)\\1{2}(.the|.in)', text)\n    return match\n    \n    \ndef text_match_two_three_no_end(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters,\n    and does not end in 'the' or 'in'.\n    '''\n    match = re.search(r'(.)\\1{2}(?!.the|.in)', text)\n    return match\n    \n    \ndef text_match_one_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}', text)\n    return match\n    \n    \ndef text_match_one_two_three_end(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character, and ends in 'the' or 'in'.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}(.the|.in)', text)\n    return match\n    \n    \ndef text_match_one_two_three_no_end(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character, and does not end in 'the' or 'in'.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}(?!.the|.in)', text)\n    return match\n    \n    \ndef text_match_one_two_three_no_end_different_pattern(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character, and does not end in 'the' or 'in', and uses a different pattern.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}(?!.the|.in)', text)\n    return match\n    \n    \ndef text_match_one_two_three_no_end_different_pattern_double(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character, and does not end in 'the' or 'in', and uses a different pattern.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}(?!.the|.in)', text)\n    return match\n    \n    \ndef text_match_one_two_three_no_end_different_pattern_double_end(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character, and does not end in 'the' or 'in', and uses a different pattern.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}(?!.the|.in)(.the|.in)', text)\n    return match\n    \n    \ndef text_match_one_two_three_no_end_different_pattern_double_end_different_pattern(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character, and does not end in 'the' or 'in', and uses a different pattern.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}(?!.the|.in)(.the|.in)', text)\n    return match\n    \n    \ndef text_match_one_two_three_no_end_different_pattern_double_end_different_pattern_double(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character, and does not end in 'the' or 'in', and uses a different pattern.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}(?!.the|.in)(.the|.in)', text)\n    return match\n    \n    \ndef text_match_one_two_three_no_end_different_pattern_double_end_different_pattern_double_end(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character, and does not end in 'the' or 'in', and uses a different pattern.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}(?!.the|.in)(.the|.in)(.the|.in)', text)\n    return match\n    \n    \ndef text_match_one_two_three_no_end_different_pattern_double_end_different_pattern_double_end_different_pattern(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character, and does not end in 'the' or 'in', and uses a different pattern.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}(?!.the|.in)(.the|.in)(.the|.in)', text)\n    return match\n    \n    \ndef text_match_one_two_three_no_end_different_pattern_double_end_different_pattern_double_end_different_pattern_double(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character, and does not end in 'the' or 'in', and uses a different pattern.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}(?!.the|.in)(.the|.in)(.the|.in)', text)\n    return match\n    \n    \ndef text_match_one_two_three_no_end_different_pattern_double_end_different_pattern_double_end_different_pattern_double_end(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character, and does not end in 'the' or 'in', and uses a different pattern.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}(?!.the|.in)(.the|.in)(.the|.in)(.the|.in)', text)\n    return match\n    \n    \ndef text_match_one_two_three_no_end_different_pattern_double_end_different_pattern_double_end_different_pattern_double_end_different_pattern(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters,\n    and then another 'b' character, and does not end in 'the' or 'in', and uses a different pattern.\n    '''\n    match = re.search(r'(.)\\1{1}(.b){2}(?!.the|.in)(.the|.in)(.the|.in)(.the|.in)(.the|.i"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    reg = re.compile(r'\\ba{2,3}\\b')\n    print reg.match(text)\ndef text_match_two_three_array(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    print bool(re.search('\\ba{2,3}\\b',text))\ndef text_match_two_three_obj(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    reg = re.compile(r'\\ba{2,3}\\b')\n    print reg.match(text)\ndef text_match_three_one(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_array(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    print bool(re.search('\\b\\ba{3}\\b',text))\ndef text_match_three_one_obj(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_two(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_three(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_four(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_five(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_six(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_seven(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_eight(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_nine(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_ten(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_eleven(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_twelve(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_thirteen(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_fourteen(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_fifteen(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_sixteen(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_seventeen(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_eighteen(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_nineteen(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_twenty(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_thirty(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r'\\b\\ba{3}\\b')\n    print reg.match(text)\ndef text_match_three_one_obj_fourty(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by three 'a' characters.\n    '''\n    reg = re.compile(r"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab(?=ab)'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group())\n    else:\n        print('Not found')\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    res = re.search(r'ab*', text)\n    return True if res else False\n    \nprint(text_match_two_three('aabbb'))\nprint(text_match_two_three('ababab'))\nprint(text_match_two_three('abbb'))\nprint(text_match_two_three('ab'))\nprint(text_match_two_three('baa'))\nprint(text_match_two_three('aa'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('abab'))\nprint(text_match_two_three('ababab'))\nprint(text_match_two_three('aba'))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match(r'.*[ab]{2,3}.*', text):\n        print(\"Match found.\")\n    else:\n        print(\"No match found.\")\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(r'ab{2,3}', text)\n    return match!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}', text))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #finds a followed by two or three 'b'\n    #returns true if found, else returns false\n    pattern = re.compile('ab{2,3}')\n    if pattern.search(text):\n        return True\n    return False\n    \n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(\"ab{2,3}\", text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('a(b)+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    max_sum = 0\n    sum = 0\n    for i in range(0, n, 1):\n        sum = sum + a[i]\n    for i in range(0, n, 1):\n        max_sum = max(max_sum, sum)\n        if i + k <= n:\n            sum = sum - a[i] + a[i + k]\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    totals = [0] * (k+1)\n    totals[0] = 0\n    for i in range(1, k+1):\n        totals[i] = a[i-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    sum = 0\n    m = max_sub_array_sum(a, n)\n    \n    for i in range(n):\n        for j in range(k):\n            sum += a[i]\n            \n        if m < sum:\n            m = sum\n        \n        sum = 0\n    \n    return m\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < 1:\n        return 0\n    if n == k:\n        return max(a)\n    if k == 1:\n        return max(a)\n    if k > n:\n        return max(a)\n    \n    m = len(a)\n    sum_array = [0] * m\n    \n    sum_array[0] = a[0]\n    for i in range(1, k):\n        sum_array[i] = max(a[i], a[i] + sum_array[i-1])\n    \n    max_ending_here = max(sum_array)\n    \n    for i in range(k, n):\n        sum_array[i] = max(a[i], a[i] + sum_array[i-1])\n        max_ending_here = max(max_ending_here, sum_array[i])\n    \n    return max_ending_here\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    '''\n    Algorithm :\n    Given an array A[], a maxSum array B[], and k, we will traverse the array,\n    and find the maxSum array. We will start from the beginning, and use the \n    'k' array(A[:k]) to compute the maxSum. \n    Next, we will use the 'k' array to compute the maxSum, and use the 'k' \n    array(A[k:2k]) to compute the maxSum. \n    Finally, we will use the 'k' array to compute the maxSum, and use the \n    'k' array(A[2k:3k]) to compute the maxSum.\n    '''\n    sum = 0\n    for i in range(n):\n        if i < k:\n            sum += a[i]\n        else:\n            sum += a[i] - a[i-k]\n    return sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == k:\n        return sum(a)\n    max_sum = sum(a[0:k])\n    max_sum_k_repeated = sum(a[0:k])\n    for i in range(1,n-k+1):\n        max_sum += max_sum_k_repeated - a[i-1] - a[i-1+k]\n        max_sum_k_repeated = max_sum_k_repeated - a[i-1] + a[i-1+k]\n    return max_sum\n    \ndef kadane(a):\n    '''\n    Given an array of integers, find the contiguous subarray which has the largest sum. \n    '''\n    max_sum = max_ending_here = a[0]\n    for i in range(1,len(a)):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_sum = max(max_sum, max_ending_here)\n    return max_sum\n    \ndef find_subarray(arr):\n    '''\n    Given a sorted array of integers, find the starting and ending index of a given target value.\n    '''\n    left, right, sum_so_far = 0, 0, 0\n    for i in range(len(arr)):\n        if sum_so_far == 0:\n            sum_so_far = arr[i]\n            left, right = i, i\n        else:\n            sum_so_far += arr[i]\n            right = i\n        if sum_so_far == 0:\n            break\n    return [left, right]\n    \ndef maximum_length(arr, n):\n    '''\n    Given a sorted array of integers, find the length of longest increasing subsequence.\n    '''\n    if n == 0:\n        return 0\n    max_length = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_length += 1\n    return max_length\n    \ndef find_range(arr, n):\n    '''\n    Given a sorted array of integers, find the range of a given number.\n    '''\n    if n == arr[-1]:\n        return [arr[-1], arr[-1]]\n    start, end = None, None\n    for i in range(len(arr)-1):\n        if arr[i] == n:\n            if start is None:\n                start = i\n            if end is None:\n                end = i\n        elif arr[i] > n:\n            end = i\n            break\n    return [start, end]\n    \ndef min_bribes(q):\n    '''\n    Given an array of people standing in a queue, each person is assigned a different number of people in front of them. \n    Assuming all people standing have different number of people in front of them, write an algorithm to move people from front to back.\n    '''\n    \n    swaps = 0\n    for i in range(len(q)-1):\n        if q[i]!= i+1:\n            if q[i+1] == i+1:\n                q[i], q[i+1] = q[i+1], q[i]\n                swaps += 1\n            elif q[i+1] < q[i]:\n                q[i+1], q[i] = q[i], q[i+1]\n                swaps += 1\n            else:\n                return 'Too chaotic'\n    return swaps\n    \ndef max_consecutive_ones(arr):\n    '''\n    Given a binary array, find the maximum number of consecutive 1s in this array.\n    '''\n    n = len(arr)\n    max_count = 0\n    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n    if count > max_count:\n        max_count = count\n    return max_count\n    \ndef find_smallest_range(arr, k):\n    '''\n    Given an array of integers, find the range of smallest k numbers where the range is made by numbers in the array. \n    '''\n    if k > len(arr):\n        return None\n    n = len(arr)\n    smallest = None\n    for i in range(n - k + 1):\n        if smallest is None:\n            smallest = arr[i:i+k]\n            biggest = arr[i:i+k]\n        else:\n            if arr[i:i+k] < smallest:\n                smallest = arr[i:i+k]\n            if arr[i:i+k] > biggest:\n                biggest = arr[i:i+k]\n    return [smallest, biggest]\n    \ndef find_k_largest_numbers(arr, k):\n    '''\n    Given an array of numbers and a number k, find the k largest numbers in the array. \n    '''\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap\n    \ndef merge_sorted_arrays(arr1, arr2):\n    '''\n    Given two sorted arrays, merge them into a new array.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    i, j = 0, 0\n    res = []\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            res.append(arr1[i])\n            i += 1\n        else:\n            res.append(arr2[j])\n            j += 1\n    if i < n1:\n        res.extend(arr1[i:])\n    elif j < n2:\n        res.extend(arr2[j:])\n    return res\n    \ndef spiral(matrix):\n    '''\n    Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\n    '''\n    res = []\n    if matrix == []:\n        return res\n    top, right, bottom, left = 0, len(matrix[0])-1, len(matrix)-1, 0\n    while top <= bottom and left <= right:\n        for i in range(left, right+1):\n            res.append(matrix[top][i])\n        for i in range(top+1, bottom+1):\n            res.append(matrix[i][right])\n        for i in reversed(range(left, right+1)):\n            if top!= bottom:\n                res.append(matrix[bottom][i])\n        for i in reversed(range(top+1, bottom+1)):\n            if left!= right:\n                res.append(matrix[i][left])\n        top += 1\n        bottom -= 1\n        right -= 1\n        left += 1\n    return res\n    \ndef find_subarrays(arr, n):\n    '''\n    Given an array of positive integers, compute the sum of all possible odd-length subarrays.\n    '''\n    sums = [0]*(n+1)\n    sums[0] = arr[0]\n    for i in range(1, n):\n        sums[i] = sums[i-1] + arr[i]\n    res = 0\n    for i in range(n-1, 0, -1):\n        if sums[i] % 2!= 0:\n            res += 1\n    return res\n    \ndef find_shortest_subarray(arr):\n    '''\n    Given an array of integers, find the length of the smallest subarray that contains at least one number which is the same in both arrays.\n    '''\n    if len(arr) == 1:\n        return 0\n    n = len(arr)\n    left = 0\n    right = 1\n    min_len = n\n    while right < n:\n        if arr[left] == arr[right]:\n            min_len = min(min_len, right - left)\n            left += 1\n        else:\n            right += 1\n    return min_len\n    \ndef mi"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n    if k == 2:\n        return max(a[0]+a[1], a[1]+a[2], a[2]+a[3])\n    if k > 2:\n        b = max_sub_array_sum_repeated(a, n, k-1)\n        curr = a[0] + a[1]\n        for i in range(1, n-1):\n            curr = max(curr, a[i]+a[i+1], a[i+1]+a[i+2])\n        b = max(b, curr)\n        curr = a[-1] + a[-2]\n        for i in range(n-2, 0, -1):\n            curr = max(curr, a[i]+a[i-1], a[i-1]+a[i-2])\n        b = max(b, curr)\n        return b\n        \ndef longest_run_of_ones(n, a):\n    \"\"\"\n    A non-empty array A consisting of N integers is given. The consecutive integers along\n    this array represent consecutive cars on a road.\n    \n    Array A contains only 0s and/or 1s:\n    \n    N is an integer within the range [1..100,000];\n    the elements of array A are all distinct;\n    each element of array A is an integer within the range [0..1,000,000,000].\n    For example, the following array A:\n    \n    [0,1,0,1,1,0,1,1,1,1,1]\n    represents the following cars on the road:\n    \n    car 1: 0\n    car 2: 1\n    car 3: 0\n    car 4: 1\n    car 5: 0\n    car 6: 1\n    car 7: 1\n    car 8: 1\n    car 9: 1\n    car 10: 1\n    The goal is to count passing cars. We say that a pair of cars (P, Q), where 0 \u2264 P < Q <\n    N, is passing when P is faster than Q, and the distance between these two cars is d.\n    More formally, for each pair PQ of passing cars, we have:\n    \n    d \u2264 |(A[P] - A[Q]) mod 1,000,000,000|\n    \n    For example, consider array A such that:\n    \n    A[0] = 0\n    A[1] = 1\n    A[2] = 0\n    A[3] = 1\n    A[4] = 1\n    A[5] = 1\n    A[6] = 1\n    A[7] = 1\n    \n    The following passing pairs are considered: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3).\n    \n    Write a function:\n    \n    def solution(A)\n    \n    that, given a non-empty array A of N integers, returns the number of pairs of passing cars.\n    \n    The function should return \u22121 if the number of pairs of passing cars exceeds 1,000,000,000.\n    \n    For example, given:\n    \n    A[0] = 0\n    A[1] = 1\n    A[2] = 0\n    A[3] = 1\n    A[4] = 1\n    A[5] = 1\n    A[6] = 1\n    A[7] = 1\n    \n    the function should return 8, as explained above.\n    \n    Assume that:\n    \n    N is an integer within the range [1..100,000];\n    each element of array A is an integer within the range [0..1,000,000,000].\n    \n    Complexity:\n    \n    expected worst-case time complexity is O(N);\n    expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).\n    \n    Elements of input arrays can be modified.\n    \"\"\"\n    s, c = 0, 1\n    for i in range(1, len(a)):\n        if a[i-1] == a[i]:\n            c += 1\n        else:\n            s += max(c, 1)\n            c = 1\n    return max(s, c)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(n-k+1):\n        ans = 0\n        for j in range(k):\n            ans = ans + a[i+j]\n        print(ans,end=\" \")\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return a[0]\n    # max_ending_here is the max subarray ending with the last element of the given array\n    max_ending_here = max_sub_array_sum_repeated(a, n-1, k)\n    # max_till_now is the max subarray ending with the last k elements of the given array\n    max_till_now = max_sub_array_sum_repeated(a, n-k, k)\n    # now, if the last element of the given array is same as the first element of the given array, then the max_till_now would be negative, \n    # we need to add the last element of the given array as the first element to the max_ending_here to get the maximum possible subarray sum.\n    if max_till_now > 0:\n        max_ending_here += a[n-1]\n    return max(max_ending_here, max_till_now)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    max_start = 0\n    max_end = 0\n    \n    for i in range(k):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[j]\n            if curr_sum < 0:\n                curr_sum = 0\n            elif max_sum < curr_sum:\n                max_sum = curr_sum\n                max_start = i\n                max_end = j\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return (n*(n+1))*(2*n + 1) / 6\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum( [i*i for i in range(1,n+1) if i%2==0] )\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        if i%2 == 0:\n            total += i*i\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return n**2 + square_Sum(n - 2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return square_Sum(n - 1) + n * n\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    return sum([i**2 for i in xrange(n) if i % 2 == 0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total=0\n    for i in range(n):\n        total+=i**2\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    square_Sum = 0\n    for i in range(2, n+1):\n        square_Sum += i ** 2\n    return square_Sum\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n ** 2 + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = -1\n    for sublist in list1:\n        if max_len < len(sublist):\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list2 = []\n    for element in list1:\n        list2.append(len(element))\n    return max(list2)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = -1\n    for i in range(len(list1)):\n        if max_length < len(list1[i]):\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = len(list1[0])\n    list2 = []\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    for i in list1:\n        if len(i) == max:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    temp_dict = {}\n    for l in list1:\n        temp_dict[len(l)] = temp_dict.get(len(l),0) + 1\n    max_len = max(temp_dict)\n    return temp_dict[max_len]\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    if len(list1) > 0:\n        max_len = len(list1[0])\n        for i in range(1, len(list1)):\n            if len(list1[i]) > max_len:\n                max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(len(i))\n    list3=max(list2)\n    return list3\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    max_length = 0\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #max_len = 0\n    #for ele in list1:\n    #    if max_len < len(ele):\n    #        max_len = len(ele)\n    #        max_len_list = ele\n    #return max_len_list\n    return max(list1,key=len)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = list1\n    result = len(l)\n    for i in l:\n        if len(i) > result:\n            result = len(i)\n    return result\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_recur(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 0 or k < 0: \n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for x in range(n + 1)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            elif i > 0:\n                if colors[j - 1] == colors[j]:\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i][j - 1]\n    return dp[k][n]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    n = int(n)\n    k = int(k)\n    #n - 1 - k + 1\n    #k - 1\n    if n == 1:\n        if k == 1:\n            return 1\n        elif k == 2:\n            return 1\n        else:\n            return 0\n    \n    if k == 1:\n        if n == 2:\n            return 1\n        elif n == 3:\n            return 2\n        else:\n            return 0\n    \n    if n == 2:\n        if k == 2:\n            return 2\n        elif k == 3:\n            return 2\n        else:\n            return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    memo = {}\n    return helper(n, k, memo)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n    \n    no_of_ways = 0\n    for c in range(1, k):\n        no_of_ways += count_no_of_ways(n - 1, k - c)\n    return no_of_ways\n    \n    \ndef print_fence(n, k, i, j):\n    '''\n    This function prints the fence with n posts and k colors.\n    '''\n    \n    if j == n:\n        print\n    else:\n        if i == 0:\n            print \" \" * (j + 1) + \"#\"\n        else:\n            print \" \" * j + \"*\"\n            print_fence(n, k, i - 1, j + 1)\n            \ndef print_fence_with_count(n, k):\n    '''\n    This function prints the count of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    count = count_no_of_ways(n, k)\n    if count == 1:\n        print \"There is one way to paint the fence.\"\n        print_fence(n, k, 1, 1)\n    else:\n        print \"There are %d ways to paint the fence.\" % count\n        print_fence(n, k, 1, 1)\n        \n        \n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    if k == 2:\n        return 2**(n-1)\n    if k == 3:\n        return 4**(n-1)\n    if k > 3:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k-2) + count_no_of_ways(n-1, k-3)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    return int(math.floor(n/m))\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n==m:\n        return n\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    q = (n+m-1)//m\n    print(n, m, q)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n / m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m>n:\n        return 0\n    elif m == n:\n        return 1\n    else:\n        return find(m,n-1)\n    \ndef recursive_find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m>n:\n        return 0\n    elif m == n:\n        return 1\n    else:\n        return recursive_find(m,n-1)\n    \ndef factorial(n):\n    '''\n    Write a python function to find factorial of a number (n!).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return int(n/m)\n    else:\n        return int(n/m + 1)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    else:\n        return find(n,m-1)\n    \nprint find(3,3)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return n\n    else:\n        return int(n/m)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2\ndef righttriangle(a,b,c):\n    '''\n    Write a function that checks whether a triangle is right angled.\n    '''\n    return a**2 + b**2 == c**2\ndef count_triangle(w,h):\n    '''\n    Write a function to count the number of triangles in a rectangular area.\n    '''\n    if w < 0 or h < 0:\n        raise ValueError('positive numbers only')\n    if w == 0 or h == 0:\n        raise ValueError('cannot have zero area')\n    return w*h\ndef rec_sum(n):\n    '''\n    Write a recursive function to find the sum of the first n positive integers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + rec_sum(n-1)\ndef rec_sum2(n):\n    '''\n    Write a recursive function to find the sum of the first n positive integers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return rec_sum2(n-1) + n\ndef factorial(n):\n    '''\n    Write a recursive function to calculate n!\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef rec_pow(n,m):\n    '''\n    Write a recursive function to raise n to the power of m\n    '''\n    if m == 0:\n        return 1\n    else:\n        return n*rec_pow(n,m-1)\ndef sum_digits(n):\n    '''\n    Write a recursive function to find the sum of the digits of a number\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n//10)\ndef fib(n):\n    '''\n    Write a recursive function to find the nth value of the fibonacci sequence\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\ndef palindrom(n):\n    '''\n    Write a recursive function to determine if a number is a palindrome.\n    '''\n    if n == 0:\n        return True\n    elif n % 10 == n/10 % 10:\n        return palindrom(n//10)\n    else:\n        return False\ndef factorial_iter(n):\n    '''\n    Write a recursive function to find the factorial of n!\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_iter(n-1)\ndef binomial_coefficient(n,k):\n    '''\n    Write a recursive function to calculate the binomial coefficient.\n    '''\n    if k > n:\n        return 0\n    elif k == n:\n        return 1\n    else:\n        return binomial_coefficient(n-1,k) + binomial_coefficient(n-1,k-1)\ndef bunny_ears(n):\n    '''\n    Write a recursive function that can calculate the number of bunny ears in a given cage.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return 2 + bunny_ears(n-1)\ndef permutations(n,r):\n    '''\n    Write a recursive function that can find the permutations of a string.\n    '''\n    if r == 0:\n        return 1\n    else:\n        return permutations(n,r-1)*(n-r+1)\ndef nth_permutation(n):\n    '''\n    Write a recursive function that can find the nth permutation of a string.\n    '''\n    if n == 0:\n        return ''\n    else:\n        return nth_permutation(n-1) + str(n)\ndef nth_permutation2(n, s):\n    '''\n    Write a recursive function that can find the nth permutation of a string.\n    '''\n    if n == 0:\n        return s\n    else:\n        return nth_permutation2(n-1, s[1:] + s[0])\ndef permutations2(n,r):\n    '''\n    Write a recursive function that can find the permutations of a string.\n    '''\n    if r == 0:\n        return 1\n    else:\n        return permutations2(n,r-1)*(n-r+1)\ndef nth_permutation_iter(n):\n    '''\n    Write a recursive function that can find the nth permutation of a string.\n    '''\n    if n == 0:\n        return ''\n    else:\n        s = nth_permutation_iter(n-1)\n        r = str(n) + s\n        return r\ndef nth_permutation_iter2(n, s):\n    '''\n    Write a recursive function that can find the nth permutation of a string.\n    '''\n    if n == 0:\n        return s\n    else:\n        return nth_permutation_iter2(n-1, s[1:] + s[0])\ndef factorial_iter(n):\n    '''\n    Write a recursive function to find the factorial of n!\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_iter(n-1)\ndef fib_iter(n):\n    '''\n    Write a recursive function to find the nth value of the fibonacci sequence\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_iter(n-1) + fib_iter(n-2)\ndef sum_digits_iter(n):\n    '''\n    Write a recursive function to find the sum of the digits of a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits_iter(n//10)\ndef fib_iter2(n):\n    '''\n    Write a recursive function to find the nth value of the fibonacci sequence\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_iter2(n-1) + fib_iter2(n-2)\ndef sum_digits_iter2(n):\n    '''\n    Write a recursive function to find the sum of the digits of a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits_iter2(n//10)\ndef no_teen_sum(a, b, c):\n    '''\n    Write a recursive function to find the sum of the values of all numbers before 15.\n    '''\n    if a > 15:\n        return no_teen_sum(a-16,b,c)\n    elif b > 15:\n        return no_teen_sum(a,b-16,c)\n    elif c > 15:\n        return no_teen_sum(a,b,c-16)\n    else:\n        return a + b + c\ndef no_teen_sum2(a, b, c):\n    '''\n    Write a recursive function to find the sum of the values of all numbers before 15.\n    '''\n    if a == 15:\n        return 0\n    elif b == 15:\n        return 0\n    elif c == 15:\n        return 0\n    else:\n        return a + b + c\ndef reverse(n):\n    '''\n    Write a recursive function that can reverse a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*10 + reverse(n/10)\ndef reverse2(n):\n    '''\n    Write a recursive function that can reverse a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n//10 + reverse(n%10)\ndef is_binary(n):\n    '''\n    Write a recursive function to determine if a number is binary.\n    '''\n    if n == 0:\n        return True\n    else:\n        return is"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s1 = h**2 + w**2\n    s2 = 2*h*w\n    return s1 - s2\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # return w*h/2/((h**2 + w**2)**0.5)\n    return w*h/2/math.hypot(w,h)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round((w**2 + h**2)**(1/2),1)\ndef otherside_triangle_all(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round((w**2 + h**2)**(1/2),1)\ndef otherside_triangle_all_included(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\ndef otherside_triangle_all_included_means_without_rounding_included(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included_means(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_with_decimal_place(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_with_decimal_place_all(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_with_decimal_place_all_included(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_means(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_means_with_decimal_place(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_means_with_decimal_place_all(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_means_with_decimal_place_all_included(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_with_decimal_place_all_included_means_without_rounding_included_means_with_decimal_place_all_included_means(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2),1)\ndef otherside_triangle_all_included_means_without_rounding_i"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = (w**2 - h**2) / 2\n    return a,b\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == 0 or h == 0:\n        return None\n    if w > h:\n        return w*h/w\n    return h*w/h\ndef otherside_rightangle_alternate(w,h):\n    '''\n    Alternate solution using math functions\n    '''\n    a = math.sqrt(w**2+h**2)\n    b = w*h/a\n    return a,b\ndef triangle_area(a,b):\n    return 0.5*a*b\ndef triangle_area_alternate(a,b):\n    return 0.5*a*b\ndef find_b(a,h):\n    '''\n    a = side, h = hypotenuse\n    '''\n    return h*(1/a)\ndef is_int(a):\n    return a % 1 == 0\ndef test_area():\n    a = 7\n    b = 3\n    assert otherside_rightangle(a,b) == a*b/a\n    assert otherside_rightangle_alternate(a,b)[0] == a*b/a\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate2():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate3():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate4():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate5():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate6():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate7():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate8():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate9():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate10():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate11():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate12():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate13():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate14():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate15():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate16():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate17():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate18():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate19():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate20():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate21():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate22():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate23():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate24():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area_alternate25():\n    a = 7\n    b = 3\n    assert otherside_rightangle_alternate(a,b)[1] == find_b(a,b)\n    assert is_int(otherside_rightangle_alternate(a,b)[1])\ndef test_area"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    import math\n    s1 = (w**2 + h**2)**0.5\n    s2 = (w**2 - h**2)**0.5\n    return s1 + s2\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/math.sqrt(w**2+h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n    \ndef isosceles_triangle(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return \"Same side length\"\n    \ndef factor_multiply(n):\n    '''\n    Write a function that returns a function which takes a number as a parameter and returns the product of all the numbers in the factorization of the number, which is obtained by dividing the number by prime numbers starting from 2.\n    '''\n    def return_function(x):\n        product=1\n        for i in range(2,x):\n            if x%i==0:\n                product=product*i\n        return product\n    return return_function\n    \ndef prime_factors(n):\n    '''\n    Write a function that returns a function which takes a number as a parameter and returns the product of all the numbers in the factorization of the number, which is obtained by dividing the number by prime numbers starting from 2.\n    '''\n    def return_function(x):\n        product=1\n        for i in range(2,x):\n            if x%i==0:\n                product=product*i\n        return product\n    return return_function\n    \ndef reverse_string(s):\n    '''\n    Write a function that returns a function which takes a string as a parameter and returns the reversed string.\n    '''\n    def return_function(x):\n        return x[::-1]\n    return return_function\n    \ndef sieve_of_eratosthenes(n):\n    '''\n    Write a function to return all the prime numbers up to n.\n    '''\n    sieve=[True]*(n+1)\n    sieve[0]=sieve[1]=False\n    for i in range(4,n+1,2):\n        sieve[i]=False\n    for i in range(3,int(n**0.5)+1,2):\n        if sieve[i]:\n            for j in range(i*i,n+1,i):\n                sieve[j]=False\n    return [i for i in range(len(sieve)) if sieve[i]]\n    \ndef is_prime(n):\n    '''\n    Write a function to check if the given number is prime.\n    '''\n    if n==1 or n==0:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\n    \ndef count_primes(n):\n    '''\n    Write a function to return the count of the prime numbers from 1 to n.\n    '''\n    if n<0:\n        return \"Invalid input\"\n    sieve=[True]*n\n    sieve[0]=sieve[1]=False\n    count=0\n    for i in range(2,int(n**0.5)+1):\n        if sieve[i]:\n            count+=1\n            for j in range(i*i,n,i):\n                sieve[j]=False\n    return count\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if the given string is palindrome.\n    '''\n    def return_function(x):\n        if len(x)<2:\n            return True\n        else:\n            if x[0]==x[-1]:\n                return is_palindrome(x[1:-1])\n            else:\n                return False\n    return return_function\n    \ndef is_anagram(s1,s2):\n    '''\n    Write a function to check if the two strings are anagrams of each other.\n    '''\n    def return_function(x):\n        if len(x)!=len(s1) and len(x)!=len(s2):\n            return False\n        else:\n            for i in range(len(x)):\n                if x[i] not in s1 and x[i] not in s2:\n                    return False\n            return True\n    return return_function\n    \ndef is_anagram_dict(s1,s2):\n    '''\n    Write a function to check if the two strings are anagrams of each other.\n    '''\n    d1={}\n    d2={}\n    for i in s1:\n        if i in d1:\n            d1[i]=d1[i]+1\n        else:\n            d1[i]=1\n    for i in s2:\n        if i in d2:\n            d2[i]=d2[i]+1\n        else:\n            d2[i]=1\n    if d1==d2:\n        return True\n    else:\n        return False\n    \ndef rotate_a_string(s,k):\n    '''\n    Write a function to rotate a string.\n    '''\n    def return_function(x):\n        return x[k%len(x):]+x[:k%len(x)]\n    return return_function\n    \ndef rabin_karp(s,p):\n    '''\n    Write a function to implement Rabin Karp Algorithm.\n    '''\n    def return_function(t):\n        n=len(t)\n        m=len(p)\n        t=s+'-'+t\n        p=p+'-'+p\n        d=0\n        h=0\n        for i in range(m):\n            d+=ord(p[i])*(31**(m-1-i))\n        for i in range(n+1):\n            h=(h*31+ord(t[i]))%d\n        for i in range(n-m+1):\n            if h==d and t[i:i+m]==p:\n                return True\n        return False\n    return return_function\n    \ndef nth_permutation(n,s):\n    '''\n    Write a function to rearrange string s into a nth permutation of the string s.\n    '''\n    def return_function(x):\n        result=[]\n        def permutation(n,s):\n            if n==1:\n                return s\n            else:\n                for i in range(len(s)):\n                    result.append(s[i])\n                    n=n-1\n                    permutation(n,s[:i]+s[i+1:])\n        permutation(n,s)\n        result.sort()\n        return ''.join(result)\n    return return_function\n    \ndef nth_combination(n,s):\n    '''\n    Write a function to rearrange string s into a nth combination of the string s.\n    '''\n    def return_function(x):\n        result=[]\n        def combination(n,s):\n            if n==1:\n                return s\n            else:\n                for i in range(len(s)):\n                    result.append(s[i])\n                    n=n-1\n                    combination(n,s[:i]+s[i+1:])\n        combination(n,s)\n        result.sort()\n        return ''.join(result)\n    return return_function\n    \ndef is_perfect_number(n):\n    '''\n    Write a function to check if the given number is a perfect number.\n    '''\n    def return_function(x):\n        if (n/2)*(n/2)==n:\n            return True\n        else:\n            return False\n    return return_function\n    \ndef is_factor(a,n):\n    '''\n    Write a function to check if n is a factor of a.\n    '''\n    if n==1:\n        return True\n    elif n>a:\n        return False\n    elif n==a:\n        return True\n    elif n%a==0:\n        return True\n    else:\n        return False\n    \ndef is_factor_dict(a,n):\n    '''\n    Write a function to check if n is a factor of a.\n    '''\n    d={}\n    for i in range(1,n+1):\n        if is_factor(a,i):\n            if i in d:\n                d[i]+=1\n            else:\n                d[i]=1"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #x = (w*w+h*h-w*h)**0.5\n    #return x\n    return w*h/2.0\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = 0\n    for i in listval:\n        if i>maximum:\n            maximum = i\n    return maximum\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize maximum value variable to first value in list\n    max_val = listval[0]\n    # Iterate through list and compare values\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    val = 0\n    for each in listval:\n        if each > val:\n            val = each\n    return val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #maxval=listval[0]\n    #for i in range(1,len(listval)):\n    #    if maxval<listval[i]:\n    #        maxval=listval[i]\n    #return maxval\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    if listval == []:\n        return None\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = float('-inf')\n    for i in listval:\n        if i>maxval:\n            maxval = i\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        return max(listval)\ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        return min(listval)\ndef max_val_index(listval):\n    '''\n    Write a function to find the index of the maximum value in a given heterogeneous list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        max_val=max(listval)\n        index=0\n        for i in range(len(listval)):\n            if listval[i]==max_val:\n                break\n            index+=1\n        return index\ndef min_val_index(listval):\n    '''\n    Write a function to find the index of the minimum value in a given heterogeneous list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        min_val=min(listval)\n        index=0\n        for i in range(len(listval)):\n            if listval[i]==min_val:\n                break\n            index+=1\n        return index\ndef max_val_index_count(listval):\n    '''\n    Write a function to find the index of the maximum value in a given heterogeneous list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        max_val=max(listval)\n        index=0\n        count=0\n        for i in range(len(listval)):\n            if listval[i]==max_val:\n                count+=1\n                index=i\n        return [index,count]\ndef min_val_index_count(listval):\n    '''\n    Write a function to find the index of the minimum value in a given heterogeneous list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        min_val=min(listval)\n        index=0\n        count=0\n        for i in range(len(listval)):\n            if listval[i]==min_val:\n                count+=1\n                index=i\n        return [index,count]\ndef max_val_index_count_index(listval):\n    '''\n    Write a function to find the index of the maximum value in a given heterogeneous list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        max_val=max(listval)\n        index=0\n        count=0\n        for i in range(len(listval)):\n            if listval[i]==max_val:\n                count+=1\n                index=i\n        return [index,count]\ndef min_val_index_count_index(listval):\n    '''\n    Write a function to find the index of the minimum value in a given heterogeneous list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        min_val=min(listval)\n        index=0\n        count=0\n        for i in range(len(listval)):\n            if listval[i]==min_val:\n                count+=1\n                index=i\n        return [index,count]\ndef max_val_index_count_index_index(listval):\n    '''\n    Write a function to find the index of the maximum value in a given heterogeneous list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        max_val=max(listval)\n        index=0\n        count=0\n        for i in range(len(listval)):\n            if listval[i]==max_val:\n                count+=1\n                index=i\n        return [index,count]\ndef min_val_index_count_index_index(listval):\n    '''\n    Write a function to find the index of the minimum value in a given heterogeneous list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        min_val=min(listval)\n        index=0\n        count=0\n        for i in range(len(listval)):\n            if listval[i]==min_val:\n                count+=1\n                index=i\n        return [index,count]\ndef sum_list(listval):\n    '''\n    Write a function to sum a list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        return sum(listval)\ndef prod_list(listval):\n    '''\n    Write a function to compute the product of a list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        prod=1\n        for i in range(len(listval)):\n            prod*=listval[i]\n        return prod\ndef len_list(listval):\n    '''\n    Write a function to compute the length of a list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        return len(listval)\ndef reverse_list(listval):\n    '''\n    Write a function to reverse a list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        return listval[::-1]\ndef reverse_list_recur(listval):\n    '''\n    Write a function to reverse a list recursively.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        return reverse_list_recur_helper(listval)\ndef reverse_list_recur_helper(listval):\n    if len(listval)==1:\n        return listval\n    else:\n        return reverse_list_recur_helper(listval[1:])+listval[0:1]\ndef sort_list(listval):\n    '''\n    Write a function to sort a list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        return sort_list_helper(listval)\ndef sort_list_helper(listval):\n    if len(listval)==1:\n        return listval\n    else:\n        return sort_list_helper(listval[1:])+[listval[0]]\ndef sort_list_recur(listval):\n    '''\n    Write a function to sort a list recursively.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        return sort_list_recur_helper(listval)\ndef sort_list_recur_helper(listval):\n    if len(listval)==1:\n        return listval\n    else:\n        return sort_list_recur_helper(listval[1:])+[listval[0]]\ndef rotate_list(listval):\n    '''\n    Write a function to rotate a list.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        return rotate_list_helper(listval)\ndef rotate_list_helper(listval):\n    if len(listval)==1:\n        return listval\n    else:\n        return [listval[-1]]+rotate_list_helper(listval[:-1])\ndef rotate_list_recur(listval):\n    '''\n    Write a function to rotate a list recursively.\n    '''\n    listval=[]\n    if len(listval)==0:\n        return -1\n    else:\n        return rotate_list_recur_helper(listval)"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = range(1, number)\n    return sum(div)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    for i in range(2,number//2):\n        if number%i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # sum = 1\n    # for i in range(2,number):\n    #     if number % i == 0:\n    #         sum += i\n    # return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,int(number/2)+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # create list of divisors\n    divisors = [1]\n    # list of all divisors of number\n    divisors_list = []\n    # list of divisors of number\n    divisors_list_2 = []\n    # number divisors\n    number_divisors = 0\n    # 1 is the only number divisible by zero\n    if number == 0:\n        divisors_list.append(0)\n    # for all integers from 1 to number\n    for i in range(1, number+1):\n        # if i is divisible by number\n        if number % i == 0:\n            # add i to the divisors\n            divisors.append(i)\n            # add i to divisors_list\n            divisors_list.append(i)\n            # increase number divisors\n            number_divisors += 1\n    # create a list of tuples where first element is divisor and second is number of occurrences of divisor\n    divisors_list = list(zip(divisors, list(divisors_list)))\n    # sort tuples by divisor\n    divisors_list.sort()\n    # create a list of divisors that are not divisible by number\n    for i in range(0, number_divisors):\n        # divisor that is not divisible by number\n        if divisors_list[i][0]!= number:\n            # append divisor to divisors_list_2\n            divisors_list_2.append(divisors_list[i][0])\n    # return sum of divisors\n    return sum(divisors_list_2)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for divisor in range(2, number):\n        if number % divisor == 0:\n            sum += divisor\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 1\n    for i in range(2,int(math.sqrt(number))+1):\n        if number % i == 0:\n            divisors += i\n            divisors += int(number/i)\n    return divisors\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    if n == 1: \n        return 0\n    else: \n        return get_Inv_Count(arr[:n//2]) + get_Inv_Count(arr[n//2:]) + merge_count(arr[:n//2], arr[n//2:]) \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr_size = len(arr)\n    return _get_Inv_Count_Recursive(arr, 0, arr_size - 1)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n=len(arr)\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                count=count+1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if not arr:\n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # arr = sorted(arr)\n    return get_count_helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    #print \"n=%d\" % n\n    if n < 2:\n        return 0, arr\n    \n    count = 0\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count, arr\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return arr, 0\n    else:\n        mid = len(arr)//2\n        a = arr[:mid]\n        b = arr[mid:]\n        a, inversion1 = get_Inv_Count(a)\n        b, inversion2 = get_Inv_Count(b)\n        inversion3 = 0\n        i, j = 0, 0\n        # Merge the arrays and sort them\n        while i < len(a) and j < len(b):\n            if a[i] > b[j]:\n                inversion3 += len(a) - i\n                j += 1\n            elif a[i] < b[j]:\n                i += 1\n            else:\n                i += 1\n                j += 1\n        return arr, inversion1 + inversion2 + inversion3\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    N = len(arr) \n    count = 0 \n    for i in range(N): \n        for j in range(i+1, N): \n            if arr[i] > arr[j]: \n                count += 1 \n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i = 0\n    Inversions = 0\n    while i < len(arr):\n        if arr[i] > arr[i + 1]:\n            Inversions += 1\n        i += 1\n    return Inversions\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return reduce(lambda l, i: l + flatten(i) if isinstance(i, list) else l + [i], list1, [])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for elem in list1:\n        if isinstance(elem, list):\n            flatten_list(elem)\n        else:\n            flatten_list.result += [elem]\n    return flatten_list.result\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    elif not isinstance(list1, list):\n        return list1\n    else:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [y for x in list1 for y in x]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if isinstance(item, list):\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n    \nprint flatten_list([1, [2, 3, [4, 5], 6], 7, [8, [9, [10]]]])"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        return list1[0] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    if isinstance(list1, list):\n        return list1 + flatten_list(list1[1:])\n    return [list1] + flatten_list(list1.__dict__[1:])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(lambda:0)\n    for stid, stname, stscore in stdata:\n        aggregate[stid] += stscore\n    max_score = max(aggregate.values())\n    return max_score\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for s,a in stdata:\n        d[s].append(a)\n    n = max(d,key=lambda x: max(d[x]))\n    return n\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #preprocessing\n    data = []\n    for each in stdata:\n        data.append(each[0])\n    data = sorted(data)\n    #variables\n    aggregate = 0\n    max_count = 0\n    #main logic\n    for i in range(len(data)):\n        count = 1\n        for j in range(i+1,len(data)):\n            if data[j] - data[i] <= 3:\n                count += 1\n            else:\n                if count > max_count:\n                    max_count = count\n                    aggregate = count\n                    break\n                break\n    #return\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sum = 0\n    for x in stdata:\n        sum += x[1]\n    return sum\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for item in stdata:\n        d[item[0]] += item[1]\n    return max(d.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = defaultdict(int)\n    for a,b in stdata:\n        agg[a] += b\n    max_val = max(agg.values())\n    return max_val\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # This function will be called a number of times, so we need a way to store\n    # values in the aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = 0\n    for item in stdata:\n        aggregate = aggregate + item[1]\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not stdata:\n        return 0\n    sum = 0\n    for item in stdata:\n        if item[1] == 'A':\n            sum += item[0]\n        else:\n            sum -= item[0]\n    return sum\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg=0\n    for i in stdata:\n        if i[0]>max_agg:\n            max_agg=i[0]\n    return max_agg\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    min_agg=0\n    for i in stdata:\n        if i[0]<min_agg:\n            min_agg=i[0]\n    return min_agg\ndef mean_aggregate(stdata):\n    '''\n    Write a function to calculate the mean aggregate from the list of tuples.\n    '''\n    return sum(i[0] for i in stdata)/len(stdata)\ndef sum_aggregate(stdata):\n    '''\n    Write a function to calculate the sum aggregate from the list of tuples.\n    '''\n    return sum(i[0] for i in stdata)\ndef median_aggregate(stdata):\n    '''\n    Write a function to calculate the median aggregate from the list of tuples.\n    '''\n    # getting the list of tuples\n    lst=[]\n    for i in stdata:\n        lst.append(i[0])\n    # getting the length of the list\n    n=len(lst)\n    # selecting the mid point of the list\n    mid=n/2\n    # taking the median\n    if n%2==0:\n        return (lst[mid]+lst[mid-1])/2.0\n    else:\n        return lst[mid]\ndef mode_aggregate(stdata):\n    '''\n    Write a function to calculate the mode aggregate from the list of tuples.\n    '''\n    # making a dictionary of the values\n    dic=defaultdict(int)\n    for i in stdata:\n        dic[i[0]]+=1\n    # getting the mode\n    m=max(dic.values())\n    for i in dic:\n        if dic[i]==m:\n            return i\ndef variance_aggregate(stdata):\n    '''\n    Write a function to calculate the variance aggregate from the list of tuples.\n    '''\n    # getting the mean\n    mean=mean_aggregate(stdata)\n    # getting the sum\n    s=sum_aggregate(stdata)\n    # calculating the variance\n    variance=s-(mean**2)\n    return variance\ndef standard_deviation_aggregate(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate from the list of tuples.\n    '''\n    variance=variance_aggregate(stdata)\n    return variance**0.5\ndef count_aggregate(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    return len(stdata)\ndef count_all(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    count=0\n    for i in stdata:\n        count+=1\n    return count\ndef count_distinct(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    dic=defaultdict(int)\n    for i in stdata:\n        dic[i[0]]+=1\n    return len(dic)\ndef count_distinct_aggregate(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    return len(set(i[0] for i in stdata))\ndef mode_distinct_aggregate(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    dic=defaultdict(int)\n    for i in stdata:\n        dic[i[0]]+=1\n    m=max(dic.values())\n    for i in dic:\n        if dic[i]==m:\n            return i\ndef variance_distinct_aggregate(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    dic=defaultdict(int)\n    for i in stdata:\n        dic[i[0]]+=1\n    s=sum_aggregate(stdata)\n    mean=s/len(stdata)\n    return sum(((i-mean)**2)*dic[i] for i in dic)\ndef standard_deviation_distinct_aggregate(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    variance=variance_distinct_aggregate(stdata)\n    return variance**0.5\ndef skewness_aggregate(stdata):\n    '''\n    Write a function to calculate the skew aggregate from the list of tuples.\n    '''\n    return 3*(mean_aggregate(stdata)-median_aggregate(stdata))/standard_deviation_distinct_aggregate(stdata)\ndef kurtosis_aggregate(stdata):\n    '''\n    Write a function to calculate the kurtosis aggregate from the list of tuples.\n    '''\n    return skewness_aggregate(stdata)**4\ndef standard_deviation_aggregate_with_error(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate with error from the list of tuples.\n    '''\n    return standard_deviation_aggregate(stdata)/count_aggregate(stdata)\ndef variance_aggregate_with_error(stdata):\n    '''\n    Write a function to calculate the variance aggregate with error from the list of tuples.\n    '''\n    return variance_aggregate(stdata)/count_aggregate(stdata)\ndef standard_deviation_distinct_aggregate_with_error(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate with error from the list of tuples.\n    '''\n    return standard_deviation_distinct_aggregate(stdata)/count_aggregate(stdata)\ndef variance_distinct_aggregate_with_error(stdata):\n    '''\n    Write a function to calculate the variance aggregate with error from the list of tuples.\n    '''\n    return variance_distinct_aggregate(stdata)/count_aggregate(stdata)\ndef standard_deviation_aggregate_of_aggregate_with_error(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate of aggregate with error from the list of tuples.\n    '''\n    return standard_deviation_aggregate_with_error(stdata)/count_aggregate(stdata)\ndef variance_aggregate_of_aggregate_with_error(stdata):\n    '''\n    Write a function to calculate the variance aggregate of aggregate with error from the list of tuples.\n    '''\n    return variance_aggregate_with_error(stdata)/count_aggregate(stdata)\ndef kurtosis_aggregate_of_aggregate_with_error(stdata):\n    '''\n    Write a function to calculate the kurtosis aggregate of aggregate with error from the list of tuples.\n    '''\n    return kurtosis_aggregate(stdata)/count_aggregate(stdata)\ndef standard_deviation_distinct_aggregate_of_aggregate_with_error(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate of aggregate with error from the list of tuples.\n    '''\n    return standard_deviation_distinct_aggregate_with_error(stdata)/count_aggregate(stdata)\ndef count_distinct_of_aggregate_with_error(stdata):\n    '''\n    Write a function to calculate the count aggregate of aggregate with error from the list of tuples.\n    '''\n    return count_distinct_aggregate_with_error(stdata)/count_aggregate(stdata)\ndef count_distinct_of_aggregate_of_aggregate_with_error(stdata):\n    '''\n    Write a function to calculate the count aggregate of aggregate of aggregate with error from the list of tuples.\n    '''\n    return count_distinct_of_aggregate_with_error(stdata)/count_aggregate(stdata"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    a = n - 1\n    b = n\n    c = 2*n\n    \n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                if i+j == k:\n                    print i, j, k\n                    cnt = 0\n                    if i <= a:\n                        cnt += 1\n                    if j <= b:\n                        cnt += 1\n                    if k <= c:\n                        cnt += 1\n                    if cnt == 3:\n                        print cnt\n                        return True\n    return False\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(0, 2**n):\n        s = bin(i)[2:]\n        if sum([int(j) for j in s[:n]]) == sum([int(j) for j in s[n:]]):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    memo = {}\n    def helper(n): \n        if n in memo: return memo[n]\n        if n == 1: return 1\n        if n == 2: return 2\n        if n == 3: return 4\n        memo[n] = 0\n        for i in range(n-1):\n            memo[n] += helper(i) * helper(n-1-i)\n        return memo[n]\n    return helper(2*n)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        count += count_binary_seq(n-2)\n        count += count_binary_seq(n-1)\n        count += (count_binary_seq(n-1)//2)*(count_binary_seq(n-1)//2+1)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 1\n    count = 0 \n    for i in xrange(2, 2*n): \n        if i%2 == 0: \n            # i is even\n            if (i-1)//2 + 1 <= n and (i+1)//2 <= 2*n: \n                # i-1 and i+1 is all odd numbers\n                count += count_binary_seq(i-1) + count_binary_seq(i+1)\n        else: \n            # i is odd\n            if (i+1)//2 <= n and (i+2)//2 <= 2*n: \n                # i+1 and i+2 is all odd numbers\n                count += count_binary_seq(i+1) + count_binary_seq(i+2)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    global D\n    D[1] = 1\n    D[2] = 2\n    D[3] = 4\n    for i in range(4,n+1):\n        D[i] = D[i-1] + D[i-2] + D[i-3]\n    \n    return D[n]\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    count = 0\n    for i in range(n):\n        count += count_binary_seq(i) * count_binary_seq(n-i-1)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    curr_sum = 0\n    t = bin(n)[2:]\n    for i in range(1,len(t)):\n        curr_sum = curr_sum+int(t[i-1])\n        if curr_sum == int(t[-i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    return count_binary_seq(n-1) + count_binary_seq(n-2) + count_binary_seq(n-3)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initializing the count to 0 \n    count = 0 \n    # Given a number n, we have 2n numbers. To find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits, we need to find the count of all possible binary sequences of length 2n with first n bits equal to last n bits. \n    # To do this, we iterate through all possible binary sequences of length 2n, from 0 to 2n-1, from right to left. \n    for i in range(2, n + 1):\n        # Initializing the count to 0 \n        count = 0 \n        # For each possible binary sequence of length 2n, from right to left, we check if the first n bits are equal to the last n bits. \n        for j in range(1, 2 * n):\n            if (j < i and (j + 1 == i or j - 1 == i)):\n                # If the first n bits are equal to the last n bits, then we increment the count by 1\n                count = count + 1\n        # This count will be the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. \n        print(count)\n    return count \n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([dict_depth(d[k]) if isinstance(d[k], dict) else 1 for k in d])\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    def depth(d, curr_depth = 0):\n        if type(d) is dict:\n            for key in d:\n                depth(d[key], curr_depth+1)\n        return curr_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max([dict_depth(v) for v in d.values()])\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    return 1 + max([dict_depth(v) for v in d.itervalues()])\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.itervalues())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    if isinstance(d, dict):\n        return max([dict_depth(v) for v in d.values()] + [1])\n    else:\n        return 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)-ranges-1,len(arr)-rotations-1,-1) :\n        if i==index :\n            return arr[i]\n        else :\n            continue\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        arr = arr[1:] + [arr[0]]\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index] == 0 :\n        return arr[index]\n    elif ranges[index] == 1 :\n        return arr[rotations[index] - 1]\n    else :\n        return find_Element(arr,ranges,rotations,rotations[index] - 1)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    if index > n : \n        return \"Invalid index\"\n    else :\n        for i in range(rotations) :\n            arr = arr[-1]+arr[:-1]\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index == 0 :\n        return arr[rotations%len(arr)]\n    \n    l = len(arr)\n    for i in range(l) :\n        if i*rotations%l == index :\n            return arr[(i*rotations+l-1)%l]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if ranges[i] <= index <= ranges[i+1] :\n            return arr[i] + index - ranges[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr) == 1 :\n        return arr[0]\n    else :\n        if index == 0 :\n            return find_Element(arr[1:],ranges,rotations,index)\n        elif index == len(ranges) :\n            return find_Element(arr[:-1],ranges,rotations,index)\n        else :\n            return (find_Element(arr[1:],ranges,rotations,index) + find_Element(arr[:-1],ranges,rotations,index))/2\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index <= len(arr) :\n        if index == rotations :\n            return arr[index-rotations]\n        return find_Element(arr,ranges,rotations,index+1)\n    else :\n        return None\n    \narr = [1,2,3,4,5,6,7,8,9,10]\nrotations = 2\nindex = 9\nprint(find_Element(arr,rotations,index)"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        if index >= len(arr) :\n            index = index%len(arr)\n        else :\n            break\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(rotations)==0 :\n        return arr[index]\n    if ranges[0] <= rotations[0] :\n        return find_Element(arr, ranges[1:], rotations[1:], index)\n    if ranges[-1] >= rotations[-1] :\n        return find_Element(arr, ranges[:-1], rotations[:-1], index)\n    if rotations[0] < ranges[0] and rotations[-1] > ranges[-1] :\n        return find_Element(arr, ranges[1:-1], rotations[1:-1], index)\n    if rotations[0] == ranges[0] :\n        return find_Element(arr, ranges[1:], rotations[1:], index)\n    if rotations[-1] == ranges[-1] :\n        return find_Element(arr, ranges[:-1], rotations[:-1], index)\n    return arr[rotations[0]]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    patt = re.compile('^p.{0,3}$')\n    results = [word for word in words if re.search(patt, word)]\n    return results\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    output = []\n    for word in words:\n        if word[0] == 'p':\n            output.append(word)\n    return output\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0]=='p' and word.endswith('ed'):\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    print \"The list of words starts with 'p' is\",\n    for word in words:\n        if re.match(\"^p\", word):\n            print word,\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    def start_withp(words):\n        for word in words:\n            if word[0] == 'p':\n                return word\n    return start_withp\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # return re.findall('[p]+[a-zA-Z0-9]+',words)\n    patt = re.compile('[p]+[a-zA-Z0-9]*')\n    p = re.findall(patt,words)\n    return p\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    for word in words:\n        if re.match(r'p',word):\n            return [word]\n            break\n    return []\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            return i\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return re.compile('.*p.+',re.IGNORECASE).match(words).group(0).split('p')\nprint start_withp('pythoPythoPythonPython')\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return a[index]\n    elif k == index:\n        return a[index] + a[index-1]\n    else:\n        max1 = max_sum_increasing_subseq(a, n, index+1, k)\n        max2 = max_sum_increasing_subseq(a, n, index+1, k+1)\n        return max1 if max1 > max2 else max2\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (n == 0) or (k == index):\n        return 0\n    elif k < index:\n        return max_sum_increasing_subseq(a, n - 1, index, k)\n    else:\n        return max(a[n - 1] + max_sum_increasing_subseq(a, n - 1, index, k - 1), max_sum_increasing_subseq(a, n - 1, index, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    result = 0\n    for i in range(index, n):\n        result = max(result, a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n    return result\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == index:\n        return a[index]\n    elif k < index:\n        return 0\n    else:\n        ans = a[index]\n        for i in xrange(index + 1, n):\n            ans = max(ans, max_sum_increasing_subseq(a, n, i, k) + a[i])\n        return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n or k < 0:\n        return 0\n    if index == n:\n        return 0\n    if a[index] == k:\n        return max(a[index]+max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1))\n    return max(a[index]+max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k+2))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return k\n    return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+a[index]) - a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n    if index == n:\n        return a[n - 1]\n    if index < n:\n        return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    else:\n        maximum = a[index]\n        if index + k - 1 < n:\n            maximum += max_sum_increasing_subseq(a, n, index + 1, k)\n        if index + k < n:\n            maximum += max_sum_increasing_subseq(a, n, index + 1, k - 1)\n        return maximum\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = deepcopy(tuplex)\n    l = list(tuplex)\n    for i in range(m,n):\n        l[i] = ':'\n    return tuple(l)\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c=()\n    for x in xrange(0,m):\n        for y in xrange(0,n):\n            c=c+(tuplex[x][y],)\n    return c\ndef list_tuples(tuplex,m,n):\n    '''\n    Write a function to get a list of tuples of a tuple.\n    '''\n    l=[]\n    for x in xrange(0,m):\n        for y in xrange(0,n):\n            l.append((tuplex[x][y],))\n    return l\ndef tuplex_str(tuplex,m,n):\n    '''\n    Write a function to get a string of a tuple.\n    '''\n    s=''\n    for x in xrange(0,m):\n        for y in xrange(0,n):\n            s=s+str(tuplex[x][y])\n    return s\ndef tuple_list(l,m,n):\n    '''\n    Write a function to get a tuple of a list.\n    '''\n    tuplex=()\n    for x in xrange(0,m):\n        tuplex=tuplex+(l[x],)\n    return tuplex\ndef list_list(l,m,n):\n    '''\n    Write a function to get a list of lists of a list.\n    '''\n    l2=[]\n    for x in xrange(0,m):\n        l2.append(l[x])\n    return l2\ndef tuple_list(l,m,n):\n    '''\n    Write a function to get a tuple of a list.\n    '''\n    tuplex=()\n    for x in xrange(0,m):\n        tuplex=tuplex+(l[x],)\n    return tuplex\ndef matrix_mul(matrix_a,matrix_b):\n    '''\n    Write a function to multiply two matrices.\n    '''\n    m=len(matrix_a)\n    n=len(matrix_b[0])\n    l=[]\n    for x in xrange(0,m):\n        l.append([])\n        for y in xrange(0,n):\n            l[x].append(0)\n    for x in xrange(0,m):\n        for y in xrange(0,n):\n            for z in xrange(0,len(matrix_b)):\n                l[x][y]+=matrix_a[x][z]*matrix_b[z][y]\n    return l\ndef list_list_dot(l1,l2):\n    '''\n    Write a function to get the dot product of two lists of lists.\n    '''\n    m=len(l1)\n    n=len(l2[0])\n    l3=[]\n    for x in xrange(0,m):\n        l3.append([])\n        for y in xrange(0,n):\n            l3[x].append(0)\n    for x in xrange(0,m):\n        for y in xrange(0,n):\n            for z in xrange(0,len(l2)):\n                l3[x][y]+=l1[x][z]*l2[z][y]\n    return l3\ndef list_list_transpose(l):\n    '''\n    Write a function to get the transpose of a list of lists.\n    '''\n    m=len(l)\n    n=len(l[0])\n    l2=[]\n    for x in xrange(0,n):\n        l2.append([])\n        for y in xrange(0,m):\n            l2[x].append(l[y][x])\n    return l2\ndef list_list_transpose_str(l):\n    '''\n    Write a function to get the transpose of a list of lists.\n    '''\n    m=len(l)\n    n=len(l[0])\n    l2=[]\n    for x in xrange(0,n):\n        l2.append([])\n        for y in xrange(0,m):\n            l2[x].append(str(l[y][x]))\n    return l2\ndef list_list_transpose_int(l):\n    '''\n    Write a function to get the transpose of a list of lists.\n    '''\n    m=len(l)\n    n=len(l[0])\n    l2=[]\n    for x in xrange(0,n):\n        l2.append([])\n        for y in xrange(0,m):\n            l2[x].append(int(l[y][x]))\n    return l2\ndef list_list_transpose_float(l):\n    '''\n    Write a function to get the transpose of a list of lists.\n    '''\n    m=len(l)\n    n=len(l[0])\n    l2=[]\n    for x in xrange(0,n):\n        l2.append([])\n        for y in xrange(0,m):\n            l2[x].append(float(l[y][x]))\n    return l2\ndef list_list_transpose_str_int(l):\n    '''\n    Write a function to get the transpose of a list of lists.\n    '''\n    m=len(l)\n    n=len(l[0])\n    l2=[]\n    for x in xrange(0,n):\n        l2.append([])\n        for y in xrange(0,m):\n            l2[x].append(str(l[y][x])+' '+str(int(l[y][x])))\n    return l2\ndef list_list_transpose_int_str(l):\n    '''\n    Write a function to get the transpose of a list of lists.\n    '''\n    m=len(l)\n    n=len(l[0])\n    l2=[]\n    for x in xrange(0,n):\n        l2.append([])\n        for y in xrange(0,m):\n            l2[x].append(str(int(l[y][x]))+' '+str(l[y][x]))\n    return l2\ndef list_list_transpose_float_str(l):\n    '''\n    Write a function to get the transpose of a list of lists.\n    '''\n    m=len(l)\n    n=len(l[0])\n    l2=[]\n    for x in xrange(0,n):\n        l2.append([])\n        for y in xrange(0,m):\n            l2[x].append(str(float(l[y][x]))+' '+str(l[y][x]))\n    return l2\ndef list_list_transpose_float_int(l):\n    '''\n    Write a function to get the transpose of a list of lists.\n    '''\n    m=len(l)\n    n=len(l[0])\n    l2=[]\n    for x in xrange(0,n):\n        l2.append([])\n        for y in xrange(0,m):\n            l2[x].append(float(l[y][x])+float(l[y][x]))\n    return l2\ndef list_list_transpose_str_float(l):\n    '''\n    Write a function to get the transpose of a list of lists.\n    '''\n    m=len(l)\n    n=len(l[0])\n    l2=[]\n    for x in xrange(0,n):\n        l2.append([])\n        for y in xrange(0,m):\n            l2[x].append(str(l[y][x])+' '+str(float(l[y][x])))\n    return l2\ndef list_list_transpose_str_int_float(l):\n    '''\n    Write a function to get the transpose of a list of lists.\n    '''\n    m=len(l)\n    n=len(l[0])\n    l2=[]\n    for x in xrange(0,n):\n        l2.append([])\n        for y in xrange(0,m)"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a,b = tuple_index(tuplex,m)\n    if a == b:\n        return ':('\n    else:\n        new_tuplex = tuplex[:a]+tuplex[b+1:]\n        return new_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m<=0 or n<=0:\n        return ()\n    return tuplex[m-1],tuplex[m:n]\n    \ndef get_list_insert_index(lst,val):\n    '''\n    Write a function to get the index of the first occurance of val in a list.\n    '''\n    for i in xrange(0,len(lst)):\n        if lst[i]==val:\n            return i\n    return -1\n    \ndef get_list_insert_index_recur(lst,val):\n    '''\n    Write a function to get the index of the first occurance of val in a list.\n    '''\n    if len(lst)==0:\n        return -1\n    if lst[0]==val:\n        return 0\n    return get_list_insert_index_recur(lst[1:],val)\n    \ndef add_tuple(tuplex,tupley):\n    '''\n    Write a function to get a tuple as the sum of two tuples.\n    '''\n    return tuple(x+y for x,y in zip(tuplex,tupley))\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    try:\n        colon=tuplex[m:n]\n        return colon\n    except IndexError:\n        return IndexError\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>n:\n        return tuplex[n:m+1]\n    else:\n        return tuplex[m:n+1]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n==1:\n        return tuplex[m]\n    return colon_tuplex(tuplex,m,n-1)+tuplex[m+1]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:m+n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        return tuplex[n]\n    elif m==n:\n        return tuplex[m-1]\n    else:\n        return tuplex[m-1][n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a=tuplex[0:m]\n    b=tuplex[m:n]\n    c=tuplex[n:len(tuplex)]\n    d=tuplex[0:m]+tuplex[n:len(tuplex)]\n    return a,b,c,d\ndef max_length(lst):\n    return max(map(len,lst))\ndef print_list(lst):\n    for i in range(len(lst)):\n        print lst[i]\ndef print_matrix(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            print matrix[i][j],' ',\n        print ''\ndef tuplex_matrix(tuplex,m,n,matrix):\n    '''\n    Write a function to get a tuple of a matrix.\n    '''\n    a=tuplex[0:m]\n    b=tuplex[m:n]\n    c=tuplex[n:len(tuplex)]\n    d=tuplex[0:m]+tuplex[n:len(tuplex)]\n    for i in range(m):\n        for j in range(n):\n            matrix[i][j]=tuplex[i*m+j]\n    return a,b,c,d,matrix\ndef matrix_tuplex(matrix,m,n,tuplex):\n    '''\n    Write a function to get a matrix of a tuple.\n    '''\n    a=matrix[0:m]\n    b=matrix[m:n]\n    c=matrix[n:len(matrix)]\n    d=matrix[0:m]+matrix[n:len(matrix)]\n    for i in range(m):\n        for j in range(n):\n            tuplex[i*n+j]=matrix[i][j]\n    return a,b,c,d,tuplex\ndef remove_duplicate(lst):\n    lst1=[]\n    for i in range(len(lst)):\n        if lst[i] not in lst1:\n            lst1.append(lst[i])\n    return lst1\ndef sort_list(lst):\n    lst1=remove_duplicate(lst)\n    lst1.sort()\n    return lst1\ndef sort_matrix(matrix):\n    lst=[]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            lst.append(matrix[i][j])\n    lst=remove_duplicate(lst)\n    lst.sort()\n    return lst\ndef sort_tuplex(tuplex):\n    lst=[]\n    for i in range(len(tuplex)):\n        lst.append(tuplex[i])\n    lst=remove_duplicate(lst)\n    lst.sort()\n    return lst\ndef matrix_sort_list(matrix):\n    lst=[]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            lst.append(matrix[i][j])\n    lst=remove_duplicate(lst)\n    lst.sort()\n    return lst\ndef matrix_sort_tuplex(matrix):\n    lst=[]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            lst.append(matrix[i][j])\n    lst=remove_duplicate(lst)\n    lst.sort()\n    return lst\ndef tuple_list_max(lst):\n    max_len=max_length(lst)\n    for i in range(len(lst)):\n        lst[i]=lst[i]+(max_len-len(lst[i]))*' '\n    return lst\ndef tuple_list_min(lst):\n    max_len=max_length(lst)\n    for i in range(len(lst)):\n        lst[i]=lst[i]+(max_len-len(lst[i]))*' '\n    return lst\ndef print_matrix_v1(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            print matrix[i][j],' ',\n        print ''\ndef print_matrix_v2(matrix):\n    for i in range(len(matrix)):\n        print '\\n',\n        for j in range(len(matrix[i])):\n            print matrix[i][j],' ',\n    print ''\ndef tuple_list_max_1(lst):\n    max_len=max_length(lst)\n    for i in range(len(lst)):\n        lst[i]=lst[i]+(max_len-len(lst[i]))*' '\n    return lst\ndef tuple_list_min_1(lst):\n    max_len=max_length(lst)\n    for i in range(len(lst)):\n        lst[i]=lst[i]+(max_len-len(lst[i]))*' '\n    return lst\ndef tuple_list_max_2(lst):\n    max_len=max_length(lst)\n    for i in range(len(lst)):\n        lst[i]=lst[i]+(max_len-len(lst[i]))*' '\n        lst[i]=lst[i]+' '\n    return lst\ndef tuple_list_min_2(lst):\n    max_len=max_length(lst)\n    for i in range(len(lst)):\n        lst[i]=lst[i]+(max_len-len(lst[i]))*' '\n        lst[i]=lst[i]+' '\n    return lst\ndef tuple_list_max_3(lst):\n    max_len=max_length(lst)\n    for i in range(len(lst)):\n        lst[i]=lst[i]+(max_len-len(lst[i]))*' '\n        lst[i]=lst[i]+' '\n        lst[i]=lst[i]+' '\n    return lst\ndef tuple_list_min_3(lst):\n    max_len=max_length(lst)\n    for i in range(len(lst)):\n        lst[i]=lst[i]+(max_len-len(lst[i]))*' '\n        lst[i]=lst[i]+' '\n        lst[i]=lst[i]+' '\n    return lst\ndef tuple_list_max_4(lst):\n    max_len=max_length(lst)\n    for i in range(len(lst)):\n        lst[i]=lst[i]+(max_len-len(lst[i]))*' '\n        lst[i]=lst[i]+' '\n        lst[i]=lst[i]+' '\n        lst[i]=lst[i]+' '\n    return lst\ndef tuple_list_min_4(lst):\n    max_len=max_length(lst)\n    for i in range(len(lst)):\n        lst[i]=lst[i]+(max_len-len(lst[i]))*' '\n        lst[i]=lst[i]+' '\n        lst[i]=lst[i]+' '\n        lst[i]=lst[i]+' '\n    return lst\ndef tuple_list_max_5(lst):\n    max_len=max_length(lst)\n    for i in range(len(lst)):\n        lst[i]=lst[i]+(max_len-len(lst[i]))*' '\n        lst[i]=lst[i]+' '\n        lst[i]=lst[i]"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    answer = []\n    \n    for i in xrange(N):\n        a, b = nums1[i], nums2[i]\n        temp1, temp2 = [], []\n        for n in nums1:\n            temp1.append(n/a)\n        for n in nums2:\n            temp2.append(n/b)\n        \n        answer.append(max(temp1) * max(temp2))\n        \n    return answer\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for n1 in nums1:\n        for n2 in nums2:\n            for i in range(1, N):\n                if n1 * i <= N and n2 * i <= N:\n                    result.append(n1 * n2 * i)\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    count = 0\n    product1 = 1\n    product2 = 1\n    for num1 in nums1:\n        for num2 in nums2:\n            product1 *= num1\n            product2 *= num2\n            if (product1 > product2):\n                count += 1\n            elif (product2 > product1):\n                count += 1\n            if (count == N):\n                return [product1, product2]\n    return [product1, product2]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def large_product_helper(nums1, nums2, N, result, factor):\n        if len(nums1) == 0 or len(nums2) == 0:\n            return\n        if N == 0:\n            result.append(factor * nums1[0] * nums2[0])\n            return\n        large_product_helper(nums1[1:], nums2, N - 1, result, factor * nums1[0])\n        large_product_helper(nums1, nums2[1:], N - 1, result, factor * nums2[0])\n        return\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    large_products = []\n    for _ in range(N):\n        large_products.append(max(nums1) * max(nums2))\n        nums1.remove(max(nums1))\n        nums2.remove(max(nums2))\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return max(\n        [\n            product(nums1[i:], nums2[:N - i])\n            for i in xrange(N)\n        ]\n    )\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import functools\n    import itertools\n    return functools.reduce(lambda x, y: x * y,\n                           sorted(list(\n                               itertools.product(nums1, nums2))[-N:],\n                                  key=lambda x: x[0] * x[1])[::-1])\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pairs = []\n    for i in xrange(N):\n        pairs.append((nums1[i], nums2[i]))\n    pairs.sort(key = lambda pair : pair[0] * pair[1], reverse = True)\n    return pairs[0][0] * pairs[0][1]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # print nums1, nums2\n    # print type(nums1)\n    # print type(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2, reverse=True)\n    for i in xrange(N):\n        for j in xrange(i, len(nums1)):\n            for k in xrange(j, len(nums2)):\n                if nums1[j] * nums2[k] > nums1[i] * nums2[j]:\n                    break\n                elif nums1[j] * nums2[k] == nums1[i] * nums2[j]:\n                    res.append(nums1[i] * nums2[j])\n                else:\n                    res.append(nums1[j] * nums2[k])\n                    break\n    return res\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n    \ndef absolute(a):\n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    if (a<0):\n        return -a\n    else:\n        return a\n    \ndef cube(a):\n    '''\n    Write a python function to find the cube of a number.\n    '''\n    return a**3\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to return the nth number in the Fibonacci sequence.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n    \n    \ndef factorial(n):\n    '''\n    Write a python function to return the factorial of a given number\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse a string\n    '''\n    if len(s) == 0:\n        return s\n    else:\n        return reverse(s[1:])+s[0]\n    \ndef palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome\n    '''\n    return s == reverse(s)\n    \n    \ndef is_anagram(s1,s2):\n    '''\n    Write a python function to check whether two strings are anagrams\n    '''\n    dict1,dict2 = {},{}\n    for i in s1:\n        dict1[i] = dict1.get(i,0)+1\n    for i in s2:\n        dict2[i] = dict2.get(i,0)+1\n    return dict1==dict2\n    \n    \ndef all_palindromes(s):\n    '''\n    Write a python function to check whether a string is a palindrome\n    '''\n    n = len(s)\n    for i in range(n):\n        if not s[i] in s[:i]:\n            return False\n        if not s[-1-i] in s[n-1:]:\n            return False\n    return True\n    \n    \ndef all_anagrams(s):\n    '''\n    Write a python function to check whether a string is a palindrome\n    '''\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n):\n            if not s[i] in s[j]:\n                return False\n    return True\n    \n    \ndef all_anagrams2(s):\n    '''\n    Write a python function to check whether a string is a palindrome\n    '''\n    n = len(s)\n    result = []\n    for i in range(n):\n        for j in range(i+1,n):\n            if not s[i] in s[j]:\n                result.append(s[i:j])\n    return sorted(result)\n    \n    \ndef all_anagrams3(s):\n    '''\n    Write a python function to check whether a string is a palindrome\n    '''\n    n = len(s)\n    result = []\n    for i in range(n):\n        for j in range(i+1,n):\n            if not s[i] in s[j]:\n                result.append(s[i:j])\n    return sorted(result)\n    \n    \ndef all_anagrams4(s):\n    '''\n    Write a python function to check whether a string is a palindrome\n    '''\n    n = len(s)\n    dict = {}\n    for i in range(n):\n        if s[i] in dict:\n            dict[s[i]] += 1\n        else:\n            dict[s[i]] = 1\n    result = []\n    for i in range(n):\n        if dict[s[i]] == 1:\n            result.append(s[i:])\n        else:\n            dict[s[i]] -= 1\n    return result\n    \n    \ndef is_mirror(s1,s2):\n    '''\n    Write a python function to check whether two strings are a mirror of each other\n    '''\n    dict1,dict2 = {},{}\n    for i in s1:\n        dict1[i] = dict1.get(i,0)+1\n    for i in s2:\n        dict2[i] = dict2.get(i,0)+1\n    return dict1==dict2\n    \n    \ndef char_histogram(s):\n    '''\n    Write a python function to count the frequency of each character\n    '''\n    dict = {}\n    for i in s:\n        dict[i] = dict.get(i,0)+1\n    return dict\n    \n    \ndef char_histogram2(s):\n    '''\n    Write a python function to count the frequency of each character\n    '''\n    dict = {}\n    for i in s:\n        dict[i] = dict.get(i,0)+1\n    return sorted(dict.items(),key=lambda x:x[1],reverse=True)\n    \n    \ndef char_histogram3(s):\n    '''\n    Write a python function to count the frequency of each character\n    '''\n    dict = {}\n    for i in s:\n        dict[i] = dict.get(i,0)+1\n    return sorted(dict.items(),key=lambda x:x[1])\n    \n    \ndef char_histogram4(s):\n    '''\n    Write a python function to count the frequency of each character\n    '''\n    dict = {}\n    for i in s:\n        dict[i] = dict.get(i,0)+1\n    return [dict[i] for i in sorted(dict)]\n    \n    \ndef char_histogram5(s):\n    '''\n    Write a python function to count the frequency of each character\n    '''\n    dict = {}\n    for i in s:\n        dict[i] = dict.get(i,0)+1\n    return sorted(dict)\n    \n    \ndef is_reverse(s1,s2):\n    '''\n    Write a python function to check whether two strings are a reverse of each other\n    '''\n    dict1,dict2 = {},{}\n    for i in s1:\n        dict1[i] = dict1.get(i,0)+1\n    for i in s2:\n        dict2[i] = dict2.get(i,0)+1\n    return dict1==dict2\n    \n    \ndef find_all(s,ch):\n    '''\n    Write a python function to return a list of indices of all characters in a string\n    '''\n    list = []\n    for i in range(len(s)):\n        if s[i] == ch:\n            list.append(i)\n    return list\n    \n    \ndef find_all2(s,ch):\n    '''\n    Write a python function to return a list of indices of all characters in a string\n    '''\n    list = []\n    for i in range(len(s)):\n        if s[i] == ch:\n            list.append(i)\n    return list\n    \n    \ndef find_all3(s,ch):\n    '''\n    Write a python function to return a list of indices of all characters in a string\n    '''\n    list = []\n    for i in range(len(s)):\n        if s[i:].startswith(ch):\n            list.append(i)\n    return list\n    \n    \ndef find_all4(s,ch):\n    '''\n    Write a python function to return a list of indices of all characters in a string\n    '''\n    list = []\n    for i in range(len(s)):\n        if s[i:].startswith(ch):\n            list.append(i)\n    return list\n    \n    \ndef count_all(s,ch):\n    '''\n    Write a python function to return the number of times a character repeats in a string\n    '''\n    n = 0\n    for i in s:\n        if i == ch:\n            n += 1\n    return n\n    \n    \ndef count_all2(s,ch):\n    '''\n    Write a python function to return the number of times a character repeats in a string\n    '''\n    n = 0\n    for i in s:\n        if i == ch:\n            n += 1\n    return n\n    \n    \ndef count_all3(s,ch):\n    '''\n    Write a python function to return the number of times a character repeat"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a > b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return str1\n    \n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #import re\n    #return tuple(re.findall(r'\\w', str1))\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    "
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = tuple(str1)\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    l = list(str1)\n    l.sort()\n    return tuple(l)\n    \ndef is_prime(x):\n    '''\n    Write a function to check whether a given number is a prime number.\n    '''\n    for i in range(2, x):\n        if x%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #Convert the string to a tuple\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup1 = tuple(str1)\n    return tup1\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while (n & 1) == 0:\n        n >>= 1\n        count += 1\n    n |= (1 << count)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert to binary, and find the index of the right most 1\n    bin_str = bin(n)\n    ind = bin_str.rfind('1')\n    # set the index to 1, and return\n    return int(bin_str[:ind+1] + '1' + bin_str[ind+1:], 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert the number to binary\n    n = int(n)\n    s = bin(n)\n    s = s[2:]\n    s = list(s)\n    # set all unset bits to 1\n    for i in range(len(s)):\n        if s[i] == '0':\n            s[i] = '1'\n            break\n    # convert the list back to a string\n    s = ''.join(s)\n    return s\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (n-1)\n    return n | 1\n    \ndef right_shift(n,k):\n    '''\n    Write a python function to right shift a number.\n    '''\n    return n >> k\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (n-1)\n    n = n + 1\n    return n\n    \ndef test_set_left_most_unset_bit():\n    assert(set_left_most_unset_bit(12) == 15)\n    assert(set_left_most_unset_bit(1) == 2)\n    assert(set_left_most_unset_bit(9) == 10)\n    assert(set_left_most_unset_bit(15) == 16)\n    print 'Passed'\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    m = 2 ** (len(bin(n)) - 2) - 1\n    n = n | m\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | 1 << 0\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    \n    return (n & -n)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n==0:\n        return 1\n    k=0\n    while (n&1==0 and k<32):\n        n=n>>1\n        k+=1\n    return 1<<k\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = ((math.pi * (r**2) * (h/3)) / 3)\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol=1/3*math.pi*r**2*h\n    return vol\ndef surface_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    srf=1/2*math.pi*r**2+1/2*math.pi*r**2*h\n    return srf\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol=math.pi*r**2*h\n    return vol\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    srf=math.pi*r**2+math.pi*r**2*h\n    return srf\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol=4/3*math.pi*r**3\n    return vol\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    srf=4*math.pi*r**2\n    return srf\ndef volume_sphere_in_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere inside a cylinder.\n    '''\n    vol=4/3*math.pi*r**3*h\n    return vol\ndef surface_sphere_in_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a sphere inside a cylinder.\n    '''\n    srf=4*math.pi*r**2*h\n    return srf\ndef volume_sphere_in_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere inside a cone.\n    '''\n    vol=4/3*math.pi*r**3*h\n    return vol\ndef surface_sphere_in_cone(r,h):\n    '''\n    Write a function to find the surface area of a sphere inside a cone.\n    '''\n    srf=4*math.pi*r**2*h\n    return srf\ndef volume_sphere_in_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere inside a cylinder.\n    '''\n    vol=4/3*math.pi*r**3*h\n    return vol\ndef surface_sphere_in_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a sphere inside a cylinder.\n    '''\n    srf=4*math.pi*r**2*h\n    return srf\ndef volume_sphere_in_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere inside a cone.\n    '''\n    vol=4/3*math.pi*r**3*h\n    return vol\ndef surface_sphere_in_cone(r,h):\n    '''\n    Write a function to find the surface area of a sphere inside a cone.\n    '''\n    srf=4*math.pi*r**2*h\n    return srf\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef surface_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere inside another sphere.\n    '''\n    srf=4*math.pi*r1**2*r2**2\n    return srf\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef surface_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere inside another sphere.\n    '''\n    srf=4*math.pi*r1**2*r2**2\n    return srf\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef surface_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere inside another sphere.\n    '''\n    srf=4*math.pi*r1**2*r2**2\n    return srf\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef surface_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere inside another sphere.\n    '''\n    srf=4*math.pi*r1**2*r2**2\n    return srf\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef surface_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere inside another sphere.\n    '''\n    srf=4*math.pi*r1**2*r2**2\n    return srf\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere inside another sphere.\n    '''\n    vol=4/3*math.pi*r1**3*r2**3\n    return vol\ndef volume_sphere_in_sphere(r1,r2):\n    '''\n    Write a function to find the volume o"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*r*h/3.0\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3 * math.pi * r**2 * h\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    pi = math.pi\n    return (1/3)*pi*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r<0 or h<0:\n        return 'Invalid Input'\n    return math.pi*(r**2)*h/3\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol=math.pi*(r**2)*(h/3)\n    return vol\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol=math.pi*(r**2)*h\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print((math.pi/3)*(r**2)*h)\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * (r**2) * h) / 3\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    i = 1\n    while i <= n:\n        i = i << 1\n    return i-1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    m = 1\n    while m <= n:\n        m = m * 2\n    return m//2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<=0:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(math.ceil(math.log(n,2)))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        return -1\n    \n    start = 1\n    while(start<=n):\n        start = start*2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # base case\n    if n < 1:\n        return 0\n    # recursive call\n    else:\n        return 2**(n-1).bit_length()\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while (power <= n):\n        power *= 2\n    return power/2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(n,0,-1):\n        if(2**i <= n):\n            print(2**i)\n            return i\n    \n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(log(n, 2))\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    else:\n        L = [0, 1]\n        for i in range(2, n + 1):\n            L.append(L[i-1] + L[i-2])\n        return L[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n -= 1\n    if n <= 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    lucas_nums = [2, 1]\n    \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n):\n            lucas_nums.append(lucas_nums[-1] + lucas_nums[-2])\n        return lucas_nums[-1]\n    \ndef find_fibonacci(n):\n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    \n    fib_nums = [1, 1]\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n):\n            fib_nums.append(fib_nums[-1] + fib_nums[-2])\n        return fib_nums[-1]\n    \ndef find_pisano_period(m):\n    '''\n    Write a function to find the pisano period of a number.\n    '''\n    \n    fib_nums = [1, 1]\n    \n    if m == 0:\n        return 1\n    elif m == 1:\n        return 2\n    else:\n        for i in range(2, m*m + 1):\n            fib_nums.append((fib_nums[-1] + fib_nums[-2]) % m)\n            if fib_nums[-1] == 0 and fib_nums[-2] == 1:\n                break\n    return len(fib_nums) - 2\n    \ndef find_fibonacci_in_pisano_period(m):\n    '''\n    Write a function to find a fibonacci number n that is in the m'th pisano period of a number.\n    '''\n    \n    fib_nums = [1, 1]\n    \n    if m == 0:\n        return 0\n    elif m == 1:\n        return 1\n    else:\n        for i in range(2, m*m + 1):\n            fib_nums.append((fib_nums[-1] + fib_nums[-2]) % m)\n        return fib_nums[-1]\n    \ndef find_divisor(n):\n    '''\n    Write a function to find all the divisors of a number.\n    '''\n    \n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n    \ndef find_sum_of_divisors(n):\n    '''\n    Write a function to find the sum of divisors of a number.\n    '''\n    \n    divisors = find_divisor(n)\n    return sum(divisors)\n    \ndef find_sum_of_divisors_list(n):\n    '''\n    Write a function to find the sum of divisors of a number using list comprehension.\n    '''\n    \n    return sum([i for i in range(1, n) if n % i == 0])\n    \ndef find_product_of_divisors(n):\n    '''\n    Write a function to find the product of the divisors of a number.\n    '''\n    \n    divisors = find_divisor(n)\n    return math.prod(divisors)\n    \ndef find_product_of_divisors_list(n):\n    '''\n    Write a function to find the product of the divisors of a number using list comprehension.\n    '''\n    \n    return math.prod([i for i in range(1, n) if n % i == 0])\n    \ndef find_perfect_square(n):\n    '''\n    Write a function to find the perfect square of a number.\n    '''\n    \n    i = int(math.sqrt(n))\n    while i * i <= n:\n        if i * i == n:\n            return i * i\n        i -= 1\n    return None\n    \ndef find_perfect_square_list(n):\n    '''\n    Write a function to find the perfect square of a number using list comprehension.\n    '''\n    \n    return [i * i for i in range(int(math.sqrt(n)), 1, -1) if i * i <= n]\n    \ndef find_perfect_squares_less_than(n):\n    '''\n    Write a function to find all the perfect squares less than a number.\n    '''\n    \n    perfect_squares = []\n    \n    if n < 0:\n        return []\n    \n    for i in range(0, int(math.sqrt(n)) + 1):\n        perfect_squares.append(i * i)\n    \n    return perfect_squares\n    \ndef find_perfect_squares_less_than_list(n):\n    '''\n    Write a function to find all the perfect squares less than a number using list comprehension.\n    '''\n    \n    return [i * i for i in range(0, int(math.sqrt(n)) + 1) if i * i < n]\n    \ndef find_divisors_less_than(n):\n    '''\n    Write a function to find all the divisors less than a number.\n    '''\n    \n    divisors = []\n    \n    if n < 0:\n        return []\n    \n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(int(n / i))\n    \n    divisors.sort()\n    return divisors\n    \ndef find_divisors_less_than_list(n):\n    '''\n    Write a function to find all the divisors less than a number using list comprehension.\n    '''\n    \n    return [i for i in range(1, int(n ** 0.5) + 1) if n % i == 0]\n    \ndef find_divisors_greater_than(n):\n    '''\n    Write a function to find all the divisors greater than a number.\n    '''\n    \n    divisors = []\n    \n    if n < 0:\n        return []\n    \n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(int(n / i))\n    \n    divisors.sort()\n    divisors.reverse()\n    return divisors\n    \ndef find_divisors_greater_than_list(n):\n    '''\n    Write a function to find all the divisors greater than a number using list comprehension.\n    '''\n    \n    return [i for i in range(1, int(n ** 0.5) + 1) if n % i == 0]\n    \ndef find_divisors_equal_to(n):\n    '''\n    Write a function to find all the divisors equal to a number.\n    '''\n    \n    divisors = []\n    \n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    \n    divisors.sort()\n    return divisors\n    \ndef find_divisors_equal_to_list(n):\n    '''\n    Write a function to find all the divisors equal to a number using list comprehension.\n    '''\n    \n    return [i for i in range(1, int(n ** 0.5) + 1) if n % i == 0]\n    \ndef find_nth_prime_number(n):\n    '''\n    Write a function to find the nth prime number.\n    '''\n    \n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        is_prime = True\n        for divisor in primes:\n            if i % divisor == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n    \n    return primes[n - "
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    first = 2\n    second = 1\n    for i in range(n-1):\n        first, second = second, first + second\n    return first\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = format_string(item, string)\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    format_string = string.strip()\n    for i in range(len(list_)):\n        list_[i] = format_string % list_[i]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(e) for e in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string % i for i in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_[:] = [x.format(string) for x in list_]\n    \ndef main():\n    list_ = [1,2,3,4,5,6,7,8,9]\n    add_string(list_, \"my name is {0}\")\n    print(list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    format_string = string\n    for i in range(len(list_)):\n        list_[i] = format_string.format(list_[i])\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in xrange(0, len(list_)):\n        list_[i] = string % list_[i]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Write your code here\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace('%s', string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list(map(lambda x: string.format(x), list_))\n    \ndef dotproduct(v1, v2):\n    \"\"\"Compute the dot product of v1 and v2.\"\"\"\n    return sum(v1[i] * v2[i] for i in range(len(v1)))\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]:l3[i] for i in range(len(l1))} for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i, j, k in zip(l1, l2, l3):\n        dictionary = dict()\n        dictionary['the_key'] = i\n        dictionary['the_key1'] = j\n        dictionary['the_key2'] = k\n        yield dictionary\n    \n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0:\n        return dict()\n    elif len(l1) == 1:\n        return {l1[0]: l2}\n    elif len(l1) == 2:\n        return {l1[0]: {l1[1]: l3}}\n    else:\n        return {l1[0]: {l1[1]: l2}, l1[2]: l3}\n    \n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dict = {}\n    for i in range(len(l1)):\n        new_dict[l1[i]] = {l2[i]: l3[i]}\n    return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    final = {}\n    for item in l1:\n        final[item] = {}\n        for i in l2:\n            final[item][i] = l3[l1.index(item)][l2.index(i)]\n    return final\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1,l2)), dict(zip(l1,l3))]\n    \ndef convert_dict_dictionary(d1, d2, d3):\n    '''\n    Write a function to convert more than one dictionary to nested dictionary.\n    '''\n    return {k: dict(zip(d1,d2)), dict(zip(d1,d3))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l1 == []:\n        return l2\n    dic = {}\n    dic[l1[0]] = convert_list_dictionary(l1[1:], l2, l3)\n    return dic\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l1, l3))\n    dic = {**d1, **d2}\n    return dic\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # l1 = [1, 2, 3, 4]\n    # l2 = ['a', 'b', 'c', 'd']\n    # l3 = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    a = f(n/2) + f(n/3) + f(n/4) + f(n/5)\n    if n % 2 == 0:\n        b = f(n/2) + f(n/3) + f(n/4) + f(n/5)\n    else:\n        b = n\n    return max(a, b)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def max_sum (n):\n        if n == 1:\n            return 1\n        else:\n            return max(max_sum(n/2) + max_sum(n/3) + max_sum(n/4) + max_sum(n/5), n)\n    return max_sum(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5)\n    else:\n        return get_max_sum (n - 1) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return 0\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    max_sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if max_sum < n:\n        max_sum += n\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    \n    # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n    # n = f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max( (n/2 + n/3 + n/4 + n/5), n )\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    res = []\n    if n == 1:\n        res.append(1)\n        return res\n    elif n == 2:\n        res.append(2)\n        res.append(1)\n        return res\n    elif n == 3:\n        res.append(3)\n        res.append(3)\n        res.append(1)\n        return res\n    elif n == 4:\n        res.append(4)\n        res.append(4)\n        res.append(4)\n        res.append(2)\n        return res\n    elif n == 5:\n        res.append(5)\n        res.append(5)\n        res.append(5)\n        res.append(5)\n        res.append(3)\n        return res\n    else:\n        max_n = int(n/2)\n        max_n = max_n + int((n/3) + int((n/4) + int((n/5) + 1)))\n        res.append(int(max_n))\n        for i in range(2, max_n+1):\n            if n % i == 0:\n                max_n = i\n        res.append(int(max_n))\n        return res\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 17\n    elif n == 6:\n        return 26\n    elif n == 7:\n        return 41\n    elif n == 8:\n        return 55\n    elif n == 9:\n        return 89\n    elif n == 10:\n        return 152\n    elif n == 11:\n        return 233\n    elif n == 12:\n        return 377\n    elif n == 13:\n        return 566\n    elif n == 14:\n        return 836\n    elif n == 15:\n        return 1451\n    elif n == 16:\n        return 2465\n    elif n == 17:\n        return 3999\n    elif n == 18:\n        return 4782\n    elif n == 19:\n        return 76561\n    elif n == 20:\n        return 1276561\n    elif n == 21:\n        return 25401428\n    elif n == 22:\n        return 34151213\n    elif n == 23:\n        return 46968917\n    elif n == 24:\n        return 56281477\n    elif n == 25:\n        return 7205759\n    elif n == 26:\n        return 87960930\n    elif n == 27:\n        return 12799721\n    elif n == 28:\n        return 16605795\n    elif n == 29:\n        return 2591284\n    elif n == 30:\n        return 43980465\n    elif n == 31:\n        return 57397465\n    elif n == 32:\n        return 70796501\n    elif n == 33:\n        return 9227465\n    elif n == 34:\n        return 1128765\n    elif n == 35:\n        return 15661592\n    elif n == 36:\n        return 19800554\n    elif n == 37:\n        return 24099713\n    elif n == 38:\n        return 37192771\n    elif n == 39:\n        return 4989908\n    elif n == 40:\n        return 60472961\n    elif n == 41:\n        return 72583772\n    elif n == 42:\n        return 88717933\n    elif n == 43:\n        return 11265591\n    elif n == 44:\n        return 16606495\n    elif n == 45:\n        return 23931634\n    elif n == 46:\n        return 3881589\n    elif n == 47:\n        return 519089\n    elif n == 48:\n        return 6267716\n    elif n == 49:\n        return 7103743\n    elif n == 50:\n        return 86080808\n    elif n == 51:\n        return 1129027\n    elif n == 52:\n        return 17206501\n    elif n == 53:\n        return 25931134\n    elif n == 54:\n        return 33655089\n    elif n == 55:\n        return 4790807\n    elif n == 56:\n        return 6458056\n    elif n == 57:\n        return 7877581\n    elif n == 58:\n        return 9331020\n    elif n == 59:\n        return 11051749\n    elif n == 60:\n        return 17299068\n    elif n == 61:\n        return 25815355\n    elif n == 62:\n        return 4399429\n    elif n == 63:\n        return 5778315\n    elif n == 64:\n        return 79171334\n    elif n == 65:\n        return 1004737\n    elif n == 66:\n        return 12285539\n    elif n == 67:\n        return 18934904\n    elif n == 68:\n        return 30261664\n    elif n == 69:\n        return 43994035\n    elif n == 70:\n        return 60487424\n    elif n == 71:\n        return 71608735\n    elif n == 72:\n        return 85138219\n    elif n == 73:\n        return 98304077\n    elif n == 74:\n        return 11303684\n    elif n == 75:\n        return 14644583\n    elif n == 76:\n        return 19274416\n    elif n == 77:\n        return 26045297\n    elif n == 78:\n        return 37204038\n    elif n == 79:\n        return 51874133\n    elif n == 80:\n        return 68640579\n    elif n == 81:\n        return 84229116\n    elif n == 82:\n        return 99443059\n    elif n == 83:\n        return 113107896\n    elif n == 84:\n        return 17331139\n    elif n == 85:\n        return 24698266\n    elif n == 86:\n        return 38056921\n    elif n == 87:\n        return 4788112\n    elif n == 88:\n        return 66083379\n    elif n == 89:\n        return 86912962\n    elif n == 90:\n        return 103116839\n    elif n == 91:\n        return 12532639\n    elif n == 92:\n        return 18961454\n    elif n == 93:\n        return 30573025\n    elif n == 94:\n        return 43994497\n    elif n == 95:\n        return 5798612\n    elif n == 96:\n        return 71256183\n    elif n == 97:\n        return 89117019\n    elif n == 98:\n        return 106083025\n    elif n == 99:\n        return 138482459\n    elif n == 100:\n        return 192787907\n    elif n == 101:\n        return 26288746\n    elif n == 102:\n        return 36992595\n    elif n == 103:\n        return 49159951\n    elif n == 104:\n        return 6391112\n    elif n == 105:\n        return 75280685\n    elif n == 106:\n        return 98634961\n    elif n == 107:\n        return 11299963\n    elif n == 108:\n        return 16607632\n    elif n == 109:\n        return 23963444\n    elif n == 110:\n        return 39993558\n    elif n == 111:\n        return 51884983\n    elif n == 112:\n        return 67569001\n    elif n == 113:\n        return 85423140\n    elif n == 114:\n        return 104747280\n    elif n == 115:\n        return 146425705\n    elif n == 116:\n        return 189348914\n    elif n == 117:\n        return 30261384\n    elif n == 118:\n        return 43988258\n    elif n == 119:\n        return 57787309\n    elif n == 120:\n        return 79085642\n    elif n == 121:\n        return 100471927\n    elif n == 122:\n        return 12285748\n    elif n == 123:\n        return 18934908\n    elif n == 124:\n        return 38056918\n    elif n == 125:\n        return 51874129\n    elif n == 126:\n        return 68640938\n    elif n == 127:\n        return 84229131\n    elif n == 128:\n        return 99443059\n    elif n == 129:\n        return 11310680\n    elif n == 130:\n        return 17331046\n    elif n == 131:\n        return 24698958\n    elif n == 132:\n        return 37903123\n    elif n == 133:\n        return 5187414\n    elif n == 134:\n        return 65961015\n    elif n == 135:\n        return 75762319\n    elif n == 136:\n        return 86911142\n    elif n == 137:\n        return 10"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = len(input_list[0])\n    result = input_list[0]\n    for i in input_list:\n        if len(i) > length:\n            length = len(i)\n            result = i\n    return result\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for l in input_list:\n        if len(l)>max_len:\n            max_len = len(l)\n            max_len_list = [l]\n        elif len(l)==max_len:\n            max_len_list.append(l)\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = 0\n    max_list = []\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    max_length = 0\n    max_list = None\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n            \n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for i in range(1,len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    max_length = 0\n    max_length_list = []\n    \n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    \n    for i in range(len(input_list)):\n        if len(input_list[i]) == max_length:\n            max_length_list.append(input_list[i])\n    \n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list,key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = [len(x) for x in input_list]\n    return input_list[length_list.index(max(length_list))]\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    output_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            output_list = i\n    return output_list\n    \nprint(max_length_list(['abc', 'xyz', 'aba', '1221', 'asdf', 'hello']))\nprint(max_length_list(['my', 'name', 'is', 'kevin', 'harry', 'and', 'is', 'a', 'cool', 'guy']))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for item in test_tup:\n        if test_tup.count(item) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # duplicate_list = []\n    # for i in range(0, len(test_tup)):\n    #     if test_tup[i] in duplicate_list:\n    #         return False\n    #     else:\n    #         duplicate_list.append(test_tup[i])\n    # return True\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    my_set = set(test_tup)\n    return len(my_set) == len(test_tup)\n    \n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for val in test_tup:\n        if val in seen:\n            return False\n        seen.add(val)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup_check = set(test_tup)\n    if len(tup_check) == len(test_tup):\n        return True\n    else:\n        return False\n    \ndef find_duplicate(test_tup):\n    '''\n    Write a function to find duplicate in a tuple.\n    '''\n    test_set = set(test_tup)\n    for i in test_set:\n        if test_tup.count(i) > 1:\n            return i\n    \ndef remove_duplicate(test_tup):\n    '''\n    Write a function to remove all the duplicates from a tuple.\n    '''\n    new_tup = tuple(set(test_tup))\n    return new_tup\n    \ndef find_common_member(test_set):\n    '''\n    Write a function to find common members in a set.\n    '''\n    for i in test_set:\n        if test_set.count(i) == len(test_set):\n            return i\n            \ndef find_missing_member(test_set):\n    '''\n    Write a function to find missing members in a set.\n    '''\n    s = set(range(1, 21))\n    if s.issuperset(test_set):\n        return False\n    else:\n        return True\n    \ndef find_different_members(test_set):\n    '''\n    Write a function to find different members in a set.\n    '''\n    for i in test_set:\n        if test_set.count(i) > 1:\n            return i\n            \ndef find_longest_member(test_set):\n    '''\n    Write a function to find longest member in a set.\n    '''\n    max_len = max(test_set, key=len)\n    return max_len\n    \ndef find_shortest_member(test_set):\n    '''\n    Write a function to find shortest member in a set.\n    '''\n    min_len = min(test_set, key=len)\n    return min_len\n    \ndef find_maximum_member(test_set):\n    '''\n    Write a function to find maximum member in a set.\n    '''\n    max_num = max(test_set)\n    return max_num\n    \ndef find_minimum_member(test_set):\n    '''\n    Write a function to find minimum member in a set.\n    '''\n    min_num = min(test_set)\n    return min_num\n    \ndef find_union_member(test_set):\n    '''\n    Write a function to find union member in a set.\n    '''\n    union_set = set(test_set)\n    union_set.union(test_set)\n    return union_set\n    \ndef find_intersection_member(test_set):\n    '''\n    Write a function to find intersection member in a set.\n    '''\n    intersect_set = set(test_set)\n    intersect_set.intersection(test_set)\n    return intersect_set\n    \ndef find_difference_member(test_set):\n    '''\n    Write a function to find difference member in a set.\n    '''\n    diff_set = set(test_set)\n    diff_set.difference(test_set)\n    return diff_set\n    \ndef find_symmetric_difference_member(test_set):\n    '''\n    Write a function to find symmetric difference member in a set.\n    '''\n    sym_diff_set = set(test_set)\n    sym_diff_set.symmetric_difference(test_set)\n    return sym_diff_set\n    \ndef get_missing_element(test_set):\n    '''\n    Write a function to find missing element in a set.\n    '''\n    s = set(range(1, 21))\n    if s.issuperset(test_set):\n        return False\n    else:\n        return True\n    \ndef find_duplicate_element(test_set):\n    '''\n    Write a function to find duplicate element in a set.\n    '''\n    dup_set = set(test_set)\n    for i in dup_set:\n        if dup_set.count(i) > 1:\n            return i\n            \ndef find_common_member_value(test_set):\n    '''\n    Write a function to find common member in a set with same value.\n    '''\n    for i in test_set:\n        if test_set.count(i) > 1:\n            return i\n            \ndef get_duplicate_element(test_set):\n    '''\n    Write a function to find duplicate element in a set.\n    '''\n    dup_set = set(test_set)\n    for i in dup_set:\n        if dup_set.count(i) > 1:\n            return i\n            \ndef get_common_member_value(test_set):\n    '''\n    Write a function to find common member in a set with same value.\n    '''\n    common_member = set(test_set)\n    for i in common_member:\n        if test_set.count(i) > 1:\n            return i\n            \ndef get_missing_element(test_set):\n    '''\n    Write a function to find missing element in a set.\n    '''\n    s = set(range(1, 21))\n    if s.issuperset(test_set):\n        return False\n    else:\n        return True\n    \ndef get_duplicate_element(test_set):\n    '''\n    Write a function to find duplicate element in a set.\n    '''\n    dup_set = set(test_set)\n    for i in dup_set:\n        if dup_set.count(i) > 1:\n            return i\n            \ndef get_common_member_value(test_set):\n    '''\n    Write a function to find common member in a set with same value.\n    '''\n    common_member = set(test_set)\n    for i in common_member:\n        if test_set.count(i) > 1:\n            return i\n            \ndef get_different_element(test_set):\n    '''\n    Write a function to find different element in a set.\n    '''\n    for i in test_set:\n        if test_set.count(i) > 1:\n            return i\n            \ndef get_longest_element(test_set):\n    '''\n    Write a function to find longest element in a set.\n    '''\n    max_len = max(test_set, key=len)\n    return max_len\n    \ndef get_shortest_element(test_set):\n    '''\n    Write a function to find shortest element in a set.\n    '''\n    min_len = min(test_set, key=len)\n    return min_len\n    \ndef get_maximum_element(test_set):\n    '''\n    Write a function to find maximum element in a set.\n    '''\n    max_num = max(test_set)\n    return max_num\n    \ndef get_minimum_element(test_set):\n    '''\n    Write a function to find minimum element in a set.\n    '''\n    min_num = min(test_set)\n    return min_num\n    \ndef get_union_element(test_set):\n    '''\n    Write a function to find union element in a set.\n    '''\n    union_set = set(test_set)\n    union_set.union(test_set)\n    return union_set\n    \ndef get_intersection_element(test_set):\n    '''\n    Write a function to find intersection element in a set.\n    '''\n    intersect_set = set(test_set)\n    intersect_set.intersection(test_set)\n    return intersect_set\n    \ndef get_difference_element(test_set):\n    '''\n    Write a function to find difference element in a set.\n    '''\n    diff_set = set(test_set)\n    diff_set.difference(test_set)\n    return diff_set\n    \ndef get_symmetric_difference_element(test_set):\n    '''\n    Write a function to find symmetric difference element in a set."
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    result = []\n    for i in str1:\n        if str1.count(i) == 1:\n            result.append(i)\n    return result[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # a1 = len(str1)\n    # a2 = a1 - 1\n    # while a2 > 0:\n    #     if str1[a1 - 1] == str1[a2]:\n    #         a2 -= 1\n    #     else:\n    #         return str1[a1 - 1]\n    #     a1 -= 1\n    # return ''\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n    return \"No non repeating character\"\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for key,value in char_dict.items():\n        if value == 1:\n            return key\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for char in str1:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    for i in range(len(str1)):\n        if dict[str1[i]] == 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    seen = {}\n    for i in str1:\n        if i in seen:\n            seen[i] += 1\n        else:\n            seen[i] = 1\n    for i in str1:\n        if seen[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    import collections\n    counter = collections.Counter(str1)\n    for i in str1:\n        if counter[i] == 1:\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        dict1[i] = str1.count(i)\n    for j in str1:\n        if dict1[j] == 1:\n            return j\n    return 'No repeating characters'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dic = {}\n    for i in str1:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    print dic\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # turn the string into a list of characters\n    str1 = list(str1)\n    # create a dictionary to store the number of times each letter is seen\n    dic = {}\n    # iterate over the characters in the string\n    for char in str1:\n        # add each character to the dictionary\n        dic[char] = dic.get(char,0) + 1\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return False\n    if string[0] == string[-1]:\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    result = re.match(regex,string)\n    if result:\n        return True\n    else:\n        return False\n    \nprint(check_char('a'))\nprint(check_char('b'))\nprint(check_char('aaaaa'))\nprint(check_char('ab'))\nprint(check_char('abcd'))\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    char = string[0]\n    for i in string:\n        if i!= char:\n            return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    try:\n        return bool(re.match(regex,string))\n    except:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\ncheck_char(\"A\")\ncheck_char(\"aa\")\ncheck_char(\"aa\")\ncheck_char(\"aa1\")\ncheck_char(\"A1\")\ncheck_char(\"A1\")\ncheck_char(\"A1A1A1\")\ncheck_char(\"A1A1\")\ncheck_char(\"a1A1A1\")\ncheck_char(\"a1A1\")\ncheck_char(\"a1\")\ncheck_char(\"a1A1A1a1\")\ncheck_char(\"\")\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0]!= string[-1]:\n        return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    first_char = string[0]\n    last_char = string[-1]\n    if first_char == last_char:\n        return True\n    else:\n        return False\n    \ndef alternate_character(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same alternate character or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        if check_char(string[0]) and check_char(string[-1]):\n            if string[0]!= string[-1]:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef alternate_character_bw(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same alternate character or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        return check_char(string[0]) and check_char(string[-1])\ndef alternate_character_halfway(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same alternate character or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        if check_char(string[0]) and check_char(string[-1]):\n            if string[0]!= string[-1]:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef alternating_pair(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        if check_char(string[0]) and check_char(string[-1]):\n            if string[0] == string[-1]:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef alternating_pair_halfway(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        if check_char(string[0]) and check_char(string[-1]):\n            if string[0]!= string[-1]:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef alternating_pair_bw(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_firsthalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_secondhalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_bw_firsthalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_bw_secondhalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_bw_thirdhalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_bw_forthhalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_bw_fifthhalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_bw_sixthhalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_bw_seventhhalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_bw_eighthhalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_bw_ninthhalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_bw_tenthhalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_bw_eleventhhalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternating_pair_bw_twelfthhalf(string):\n    '''\n    Write a function to check whether the given string starts and ends with alternating pairs of characters or not.\n    '''\n    if len(string) == 1:\n        return True\n    else:\n        mid = len(string)//2\n        return check_char(string[0]) and check_char(string[-1])\ndef alternatin"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    return (a+b+c)/3.0\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b < c or c < b < a:\n        return b\n    if b < c < a or a < c < b:\n        return c\n    if a < c < b or b < a < c:\n        return a\n    return None\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    elif c>a and c>b:\n        return c\n    else:\n        return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            median = c\n        elif a>c:\n            median = b\n        else:\n            median = a\n    else:\n        if a>c:\n            median = c\n        elif b>c:\n            median = b\n        else:\n            median = a\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a + b + c) / 3.0\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        if b > c:\n            return b\n        else:\n            return c\n    if a < b:\n        if b > c:\n            return b\n        if c > a:\n            return c\n        else:\n            return a\n    if a == b:\n        if a > c:\n            return a\n        if c > a:\n            return c\n        else:\n            return a\n    if a == c:\n        if a > b:\n            return a\n        if b > c:\n            return b\n        else:\n            return c\n    if b == c:\n        if b > a:\n            return b\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        return 0\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = (a + b + c) / 2\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    elif b > c:\n        return c\n    elif a > c:\n        return a\n    else:\n        return b\n    \n    \nprint median_numbers(1,2,3)\nprint median_numbers(3,2,1)\nprint median_numbers(3,3,3)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median_numbers(1,1,2)\nprint median_numbers(2,2,2)\nprint median_numbers(2,3,1)\nprint median_numbers(3,2,1)\nprint median_numbers(1,1,1)\nprint median"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    if b < a and b < c:\n        return b\n    return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return a\n        else:\n            return c\n    elif a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        return a\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_of_nums = []\n    for num in nums:\n        sum_of_digits_of_nums.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits_of_nums\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum([int(digit) for digit in str(num)])\n    return digit_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        s = str(i)\n        for j in s:\n            total += int(j)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(map(int, str(i))) for i in nums]\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(x) for x in str(n)) for n in nums]\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum = sum + sum_of_digits_aux(i)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(n) for n in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in nums:\n        s += sum(int(x) for x in str(i))\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for n in nums:\n        nums = str(n)\n        for d in nums:\n            sum += int(d)\n    return sum\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return ((test_tup1[0] | test_tup2[0]) & ~(test_tup1[1] & test_tup2[1]))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1) == 1 and len(test_tup2) == 1:\n        return (test_tup1[0], test_tup2[0])\n    elif len(test_tup1) == 1 and len(test_tup2) > 1:\n        return (test_tup1[0], [x for x in test_tup2 if x!= test_tup1[0]])\n    elif len(test_tup1) > 1 and len(test_tup2) == 1:\n        return ([x for x in test_tup1 if x!= test_tup2[0]], test_tup2[0])\n    else:\n        return ([x for x in test_tup1 if x!= test_tup2[0]], [x for x in test_tup2 if x!= test_tup1[0]])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(a^b for a,b in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return tuple((test_tup1[i] ^ test_tup2[i]) for i in range(len(test_tup1)))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = []\n    # for each tuple in the first tuple, convert the number to binary representation\n    for tup in test_tup1:\n        tup_bin = []\n        for digit in tup:\n            tup_bin.append(bin(digit).replace('0b',''))\n    # for each tuple in the second tuple, convert the number to binary representation\n    for tup in test_tup2:\n        tup_bin = []\n        for digit in tup:\n            tup_bin.append(bin(digit).replace('0b',''))\n    # for each element in the binary representations, calculate the xor and append to result\n    for i in range(len(tup_bin[0])):\n        xor_result.append(int(tup_bin[0][i]) ^ int(tup_bin[1][i]))\n    return xor_result\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([a^b for a,b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([test_tup1[i] ^ test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = len(set(test_list))\n    return count\n    \ndef extract_unique_tup(test_list):\n    '''\n    Write a function to extract all unique tuples from the given list\n    '''\n    unique_tuples = []\n    for x in test_list:\n        if x not in unique_tuples:\n            unique_tuples.append(x)\n    return unique_tuples\n    \ndef extract_freq_dict(test_list):\n    '''\n    Write a function to extract the number of unique tuples from the given list\n    '''\n    freq_dict = {}\n    for x in test_list:\n        if x not in freq_dict:\n            freq_dict[x] = 1\n        else:\n            freq_dict[x] += 1\n    return freq_dict\n    \ndef extract_max_occurence(test_list):\n    '''\n    Write a function to extract the max occurence tuple from the given list\n    '''\n    max_tup = []\n    max_count = 0\n    for x in test_list:\n        if test_list.count(x) > max_count:\n            max_tup = x\n            max_count = test_list.count(x)\n    return max_tup\n    \ndef extract_freq_tuples(test_list):\n    '''\n    Write a function to extract the freq tuples from the given list\n    '''\n    freq_dict = {}\n    for x in test_list:\n        if x not in freq_dict:\n            freq_dict[x] = 1\n        else:\n            freq_dict[x] += 1\n    return freq_dict\n    \ndef extract_freq_list(test_list):\n    '''\n    Write a function to extract the freq list from the given list\n    '''\n    freq_dict = {}\n    for x in test_list:\n        if x not in freq_dict:\n            freq_dict[x] = 1\n        else:\n            freq_dict[x] += 1\n    return freq_dict.values()\n    \ndef extract_freq_dict_val(test_list):\n    '''\n    Write a function to extract the freq dictionary from the given list\n    '''\n    freq_dict = {}\n    for x in test_list:\n        if x not in freq_dict:\n            freq_dict[x] = 1\n        else:\n            freq_dict[x] += 1\n    return freq_dict.keys()\n    \ndef extract_freq_dict_val_count(test_list):\n    '''\n    Write a function to extract the freq dictionary from the given list\n    '''\n    freq_dict = {}\n    for x in test_list:\n        if x not in freq_dict:\n            freq_dict[x] = 1\n        else:\n            freq_dict[x] += 1\n    return freq_dict.values()\n    \ndef extract_dict_tup(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_count(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_val(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_val_count(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_freq(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_freq_count(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_freq_val(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_freq_val_count(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_freq_val_count_func(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_freq_val_count_func2(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_freq_val_count_func3(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_freq_val_count_func4(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_freq_val_count_func5(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_freq_val_count_func6(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict[x]))\n    return tup_list\n    \ndef extract_dict_tup_freq_val_count_func7(test_dict):\n    '''\n    Write a function to extract the dictionary tuples from the given dictionary\n    '''\n    tup_list = []\n    for x in test_dict:\n        tup_list.append((x, test_dict["
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    d = {}\n    for x in test_list:\n        d[x] = 1 if x not in d else d[x] + 1\n    return d\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    assert type(test_list)==list,'Input needs to be a list'\n    count=len(test_list)\n    lst=[]\n    for i in test_list:\n        lst.append(i)\n    if lst==[]:\n        return None\n    elif type(lst[0])==list:\n        for j in lst:\n            for i in j:\n                lst.append(i)\n    elif type(lst[0])==dict:\n        for i in lst:\n            for j in i.keys():\n                lst.append(j)\n    else:\n        pass\n    count=len(lst)\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i])\n    unique_list = set(test_list)\n    for each in unique_list:\n        count += 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_set = set(test_list)\n    return len(test_set)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 0\n        freq[i] += 1\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for tup in test_list:\n        if tup not in freq_list:\n            freq_list.append(tup)\n    return len(freq_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        freq[item] = freq.get(item,0) + 1\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    d = defaultdict(int)\n    for item in test_list:\n        d[item] += 1\n    return d\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not len(test_tup1) == len(test_tup2):\n        raise ValueError, 'Size of nested tuples are not same'\n    tup = ()\n    for i in range(len(test_tup1)):\n        tup += ((test_tup1[i] + test_tup2[i]),)\n    return tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    # Initialize a list to store the result\n    res = []\n    \n    # Iterate over the length of the tuples\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # use zip()\n    list1 = [tup[0] for tup in test_tup1]\n    list2 = [tup[1] for tup in test_tup2]\n    \n    for i in range(len(list1)):\n        list1[i] += list2[i]\n    \n    print (list1)\n    \nif __name__ == '__main__':\n    test_tup1 = ((1,2,3),(3,2,1),(2,1,3))\n    test_tup2 = ((1,2,3),(2,3,1),(3,1,2))\n    add_nested_tuples(test_tup1,test_tup2)"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        print \"Length Mismatch\"\n        return new_tup\n    \n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] + test_tup2[i],)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)==len(test_tup2):\n        new_tup=()\n        for i in range(len(test_tup1)):\n            new_tup=new_tup+(test_tup1[i]+test_tup2[i],)\n        return new_tup\n    else:\n        print \"The two tuples are of unequal lengths\"\n        return None\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j]+=test_tup2[i][j]\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([x + y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return ((test_tup1[0]+test_tup2[0]),(test_tup1[1]+test_tup2[1]))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if test_tup1 is None:\n        return test_tup2\n    elif test_tup2 is None:\n        return test_tup1\n    else:\n        if len(test_tup1) == len(test_tup2):\n            tup = ((test_tup1[0][0] + test_tup2[0][0]),)\n            for i in range(1, len(test_tup1)):\n                tup = tup + ((test_tup1[i][0] + test_tup2[i][0]),)\n            return tup\n        else:\n            return None\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a < b):\n        return a\n    else:\n        return b\n    \nprint minimum(3,4)\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef absolut_value(a):\n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    if a < 0:\n        return -a\n    else:\n        return a\ndef divide(a,b):\n    '''\n    Write a python function to divide two numbers.\n    '''\n    return a/b\ndef remainder(a,b):\n    '''\n    Write a python function to find the remainder when two numbers are divisible.\n    '''\n    return a % b\ndef power(a,b):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    return a**b\ndef sin_value(a):\n    '''\n    Write a python function to find the sine value of a number.\n    '''\n    import math\n    return math.sin(a)\ndef cos_value(a):\n    '''\n    Write a python function to find the cosine value of a number.\n    '''\n    import math\n    return math.cos(a)\ndef tan_value(a):\n    '''\n    Write a python function to find the tangent value of a number.\n    '''\n    import math\n    return math.tan(a)\ndef cot_value(a):\n    '''\n    Write a python function to find the cotangent value of a number.\n    '''\n    import math\n    return math.cot(a)\ndef asin_value(a):\n    '''\n    Write a python function to find the sine inverse value of a number.\n    '''\n    import math\n    return math.asin(a)\ndef acos_value(a):\n    '''\n    Write a python function to find the cos inverse value of a number.\n    '''\n    import math\n    return math.acos(a)\ndef atan_value(a):\n    '''\n    Write a python function to find the tangent inverse value of a number.\n    '''\n    import math\n    return math.atan(a)\ndef cot_value(a):\n    '''\n    Write a python function to find the cotangent inverse value of a number.\n    '''\n    import math\n    return math.atan(a)\ndef ln_value(a):\n    '''\n    Write a python function to find the natural logarithm value of a number.\n    '''\n    import math\n    return math.log(a)\ndef log_value(a,b):\n    '''\n    Write a python function to find the logarithm value of a number.\n    '''\n    import math\n    return math.log(a,b)\ndef degrees_to_radians(a):\n    '''\n    Write a python function to convert degrees to radians.\n    '''\n    import math\n    return math.pi*a/180\ndef radians_to_degrees(a):\n    '''\n    Write a python function to convert radians to degrees.\n    '''\n    import math\n    return 180*a/math.pi\ndef random_number(a,b):\n    '''\n    Write a python function to generate a random number.\n    '''\n    import random\n    return random.random()*(b-a)+a\ndef random_number_int(a,b):\n    '''\n    Write a python function to generate a random number as an integer.\n    '''\n    import random\n    return random.randint(a,b)\ndef is_prime(a):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if a < 2:\n        return False\n    elif a == 2:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        for i in range(3,a,2):\n            if a % i == 0:\n                return False\n        return True\ndef is_prime_number(a):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if a < 2:\n        return False\n    elif a == 2:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return True\ndef is_perfect_number(a):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    if a < 2:\n        return False\n    else:\n        b = 0\n        for i in range(1,a):\n            if a % i == 0:\n                b = b+i\n        if b == a:\n            return True\n        else:\n            return False\ndef is_abundant_number(a):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if a < 2:\n        return False\n    else:\n        b = 0\n        for i in range(1,a):\n            if a % i == 0:\n                b = b+i\n        if b > a:\n            return True\n        else:\n            return False\ndef is_abundant_number(a):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if a < 2:\n        return False\n    else:\n        b = 0\n        for i in range(1,a):\n            if a % i == 0:\n                b = b+i\n        if b > a:\n            return True\n        else:\n            return False\ndef is_triangular(a):\n    '''\n    Write a python function to check if a number is triangular or not.\n    '''\n    if a < 2:\n        return False\n    else:\n        b = 0\n        for i in range(1,a):\n            if a % i == 0:\n                b = b+i\n        if b == a:\n            return True\n        else:\n            return False\ndef is_pentagonal(a):\n    '''\n    Write a python function to check if a number is pentagonal or not.\n    '''\n    if a < 2:\n        return False\n    else:\n        b = 0\n        for i in range(1,a):\n            if a % i == 0:\n                b = b+i\n        if b == a:\n            return True\n        else:\n            return False\ndef is_hexagonal(a):\n    '''\n    Write a python function to check if a number is hexagonal or not.\n    '''\n    if a < 2:\n        return False\n    else:\n        b = 0\n        for i in range(1,a):\n            if a % i == 0:\n                b = b+i\n        if b == a:\n            return True\n        else:\n            return False\ndef is_heptagonal(a):\n    '''\n    Write a python function to check if a number is heptagonal or not.\n    '''\n    if a < 2:\n        return False\n    else:\n        b = 0\n        for i in range(1,a):\n            if a % i == 0:\n                b = b+i\n        if b == a:\n            return True\n        else:\n            return False\ndef is_octagonal(a):\n    '''\n    Write a python function to check if a number is octagonal or not.\n    '''\n    if a < 2:\n        return False\n    else:\n        b = 0\n        for i in range(1,a):\n            if a % i == 0:\n                b = b+i\n        if b == a:\n            return True\n        else:\n            return False\ndef is_isosceles_triangle(a):\n    '''\n    Write a python function to check if a number is isosceles triangle or not.\n    '''\n    if a < 2:\n        return False\n    else:\n        b = 0\n        for i in range(1,a):\n            if a % i == 0:\n                b = b+i\n        if b == a:\n            return True\n        else:\n            return False\ndef is_isosceles_triangle(a):\n    '''\n    Write a python function to check if a numbe"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return b\n    else:\n        return a\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n        \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if(n==1):\n        return 1\n    else:\n        return n*factorial(n-1)\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n        \nprint minimum(2,3)\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1)>=1:\n        return True\n    else:\n        return False\n    \ndef delete_in_tuple(tuplex,del_tuplex):\n    '''\n    Write a function to delete a particular item from a tuple\n    '''\n    list1=[]\n    for i in tuplex:\n        if i!=del_tuplex:\n            list1.append(i)\n    return tuple(list1)\n    \ndef main():\n    '''\n    1. write a function to find the length of a tuple\n    '''\n    tuplex=('a','b','c','d','e','f')\n    print(len(tuplex))\n    \n    '''\n    2. write a function to find the length of a tuple\n    '''\n    tuplex=('a','b','c','d','e','f')\n    print(check_tuplex(tuplex,'e'))\n    \n    '''\n    3. write a function to delete a particular item from a tuple\n    '''\n    tuplex=('a','b','c','d','e','f')\n    print(delete_in_tuple(tuplex,'c'))\n    \n    '''\n    4. write a function to delete a particular item from a tuple\n    '''\n    tuplex=('a','b','c','d','e','f')\n    print(delete_in_tuple(tuplex,'c'))\n    \nif __name__=='__main__':\n    main("
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\ndef check_tuplex_not(tuplex,tuple1):\n    for i in tuplex:\n        if i == tuple1:\n            return False\n    return True\ndef print_list(li):\n    '''\n    Write a function to print a list.\n    '''\n    print li\ndef check_list(li,x):\n    '''\n    Write a function to check whether a element exists within a list.\n    '''\n    if li.count(x):\n        return True\n    return False\ndef check_list_not(li,x):\n    '''\n    Write a function to check whether a element exists within a list.\n    '''\n    if li.count(x):\n        return False\n    return True\ndef tuple_insert(tuplex,tuple1):\n    '''\n    Write a function to insert a tuple to a tuple.\n    '''\n    li=list(tuplex)\n    li.insert(1,tuple1)\n    tuplex=tuple(li)\n    return tuplex\ndef tuple_index(tuplex,tuple1):\n    '''\n    Write a function to find the index of a tuple.\n    '''\n    return tuplex.index(tuple1)\ndef tuple_count(tuplex,tuple1):\n    '''\n    Write a function to find the count of a tuple.\n    '''\n    return tuplex.count(tuple1)\ndef tuple_reverse(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    li=list(tuplex)\n    li.reverse()\n    tuplex=tuple(li)\n    return tuplex\ndef tuple_sort(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    li=list(tuplex)\n    li.sort()\n    tuplex=tuple(li)\n    return tuplex\ndef tuple_pop(tuplex):\n    '''\n    Write a function to pop a tuple element.\n    '''\n    return tuplex.pop()\ndef tuple_max(tuplex):\n    '''\n    Write a function to find the max value of a tuple.\n    '''\n    return max(tuplex)\ndef tuple_min(tuplex):\n    '''\n    Write a function to find the min value of a tuple.\n    '''\n    return min(tuplex)\ndef tuple_len(tuplex):\n    '''\n    Write a function to find the length of a tuple.\n    '''\n    return len(tuplex)\ndef tuple_join(tuplex):\n    '''\n    Write a function to join a tuple into a string.\n    '''\n    return ''.join(tuplex)\ndef tuple_str(tuplex):\n    '''\n    Write a function to convert a tuple into a string.\n    '''\n    return str(tuplex)\ndef tuple_int(tuplex):\n    '''\n    Write a function to convert a tuple into an integer.\n    '''\n    return int(tuplex)\ndef tuple_tuple(tuplex):\n    '''\n    Write a function to convert a tuple into a tuple.\n    '''\n    return tuple(tuplex)\ndef tuple_copy(tuplex):\n    '''\n    Write a function to copy a tuple into another tuple.\n    '''\n    return tuplex[:]\ndef tuple_dict(tuplex):\n    '''\n    Write a function to convert a tuple into a dictionary.\n    '''\n    return dict(zip(tuplex[::2],tuplex[1::2]))\ndef tuple_set(tuplex):\n    '''\n    Write a function to convert a tuple into a set.\n    '''\n    return set(tuplex)\ndef tuple_dict_key(tuplex):\n    '''\n    Write a function to convert a tuple into a dictionary and return the keys.\n    '''\n    return dict(zip(tuplex[::2],tuplex[1::2]))\ndef tuple_dict_val(tuplex):\n    '''\n    Write a function to convert a tuple into a dictionary and return the values.\n    '''\n    return dict(zip(tuplex[::2],tuplex[1::2]))\ndef tuple_dict_items(tuplex):\n    '''\n    Write a function to convert a tuple into a dictionary and return the keys and values.\n    '''\n    return dict(zip(tuplex[::2],tuplex[1::2]))\ndef tuple_count_keys(tuplex,tuple1):\n    '''\n    Write a function to count the number of a tuple keys.\n    '''\n    return tuplex.count(tuple1)\ndef tuple_count_values(tuplex,tuple1):\n    '''\n    Write a function to count the number of a tuple values.\n    '''\n    return tuplex.count(tuple1)\ndef tuple_count_items(tuplex,tuple1):\n    '''\n    Write a function to count the number of a tuple values.\n    '''\n    return tuplex.count(tuple1)\ndef tuple_index_keys(tuplex,tuple1):\n    '''\n    Write a function to find the index of a tuple keys.\n    '''\n    return tuplex.index(tuple1)\ndef tuple_index_values(tuplex,tuple1):\n    '''\n    Write a function to find the index of a tuple values.\n    '''\n    return tuplex.index(tuple1)\ndef tuple_index_items(tuplex,tuple1):\n    '''\n    Write a function to find the index of a tuple values.\n    '''\n    return tuplex.index(tuple1)\ndef tuple_slice(tuplex,tuple1):\n    '''\n    Write a function to convert a tuple into a string.\n    '''\n    return tuplex[tuplex.index(tuple1):tuplex.index(tuple1)+tuplex.count(tuple1)]\ndef tuple_range(tuplex,tuple1):\n    '''\n    Write a function to convert a tuple into a range.\n    '''\n    return range(tuplex.index(tuple1),tuplex.index(tuple1)+tuplex.count(tuple1))\ndef tuple_sort_keys(tuplex):\n    '''\n    Write a function to sort a tuple keys.\n    '''\n    li=list(tuplex)\n    li.sort()\n    tuplex=tuple(li)\n    return tuplex\ndef tuple_sort_values(tuplex):\n    '''\n    Write a function to sort a tuple values.\n    '''\n    li=list(tuplex)\n    li.sort()\n    tuplex=tuple(li)\n    return tuplex\ndef tuple_sort_items(tuplex):\n    '''\n    Write a function to sort a tuple values.\n    '''\n    li=list(tuplex)\n    li.sort()\n    tuplex=tuple(li)\n    return tuplex\ndef tuple_comp(tuplex,tuple1,tuple2):\n    '''\n    Write a function to compare two tuple.\n    '''\n    return tuplex[tuplex.index(tuple1)] == tuplex[tuplex.index(tuple2)]\ndef tuple_comp_not(tuplex,tuple1,tuple2):\n    '''\n    Write a function to compare two tuple.\n    '''\n    return tuplex[tuplex.index(tuple1)]!= tuplex[tuplex.index(tuple2)]\ndef tuple_comp_or(tuplex,tuple1,tuple2):\n    '''\n    Write a function to compare two tuple.\n    '''\n    return tuplex[tuplex.index(tuple1)] | tuplex[tuplex.index(tuple2)]\ndef tuple_comp_and(tuplex,tuple1,tuple2):\n    '''\n    Write a function to compar"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex.count(tuple1) > 0\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #Convert tuple to list so it can be modified\n    l = list(tuplex)\n    #Check for element in list\n    if tuple1 in l:\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuplex: \n        if elem == tuple1: \n            return True \n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex==tuple1:\n        return True\n    else:\n        return False\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] == tuple1[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print 'Even'\n    else: \n        print 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = str(x)\n    # if the lenght of the string is odd, then the parity is 1\n    if (len(x) % 2) == 1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x & 0x1):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n    \ndef find_Permutation(x,y): \n    '''\n    Write a python function to find whether the permutation of a given pair of numbers is odd.\n    '''\n    if x%2 == 0:\n        if y%2 == 0:\n            return \"Permutation\"\n        else:\n            return \"Not a Permutation\"\n    else:\n        if y%2 == 0:\n            return \"Not a Permutation\"\n        else:\n            return \"Permutation\"\n            \ndef find_Max(nums): \n    '''\n    Write a python function to find the maximum number in the given list.\n    '''\n    max = 0\n    for i in nums:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return 1\n    else:\n        return 0\ndef count_odd(l):\n    '''\n    Write a python function to count the number of odd numbers in a list.\n    '''\n    n=0\n    for i in l:\n        if find_Parity(i)==1:\n            n+=1\n    return n\ndef main():\n    l=list(range(1,21))\n    n=count_odd(l)\n    print n\nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    sum = 0\n    while (x!=0):\n        sum = sum + (x % 10)\n        x = x // 10\n    if (sum % 2 == 0):\n        print(\"Parity is Even\")\n    else:\n        print(\"Parity is Odd\")\n        \nfind_Parity(907)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # x = int(input(\"enter the number\"))\n    if x%2==0:\n        print(\"Parity is Even\")\n    else:\n        print(\"Parity is Odd\")\nfind_Parity(x)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    p = 0\n    n = x\n    while(n > 0):\n        p += (n % 2)\n        n = n/2\n    if(p % 2 == 0):\n        print(\"Parity is EVEN\")\n    else:\n        print(\"Parity is ODD\")\nfind_Parity(56)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n<10:\n        return n\n    else:\n        s=str(n)\n        l=len(s)\n        i=0\n        for i in range(l-1,0,-1):\n            if s[i]>s[i-1]:\n                break\n        if i==0:\n            return int(s+str(1))\n        else:\n            newstr=s[:i-1]+s[i:]\n            newstr=''.join(sorted(newstr))\n            return int(newstr+str(int(s[i-1])+1))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    nums = [int(x) for x in str(n)]\n    nums.sort()\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] < nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n            count += 1\n        if count == len(nums) - 1:\n            return int(''.join([str(x) for x in nums]))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = ''\n    for i in range(len(n)):\n        if i == 0:\n            continue\n        temp = i\n        while temp > 0:\n            if n[i] > n[temp - 1]:\n                break\n            temp -= 1\n        res += n[temp-1] * (10**(i-temp))\n    return int(res)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    arr = []\n    while n!= 0:\n        arr.append(n % 10)\n        n /= 10\n    \n    l = len(arr)\n    for i in range(l-1):\n        if arr[i] < arr[i+1]:\n            temp = arr[i+1]\n            for j in range(i+1, l):\n                if arr[j] > temp:\n                    arr[i+1], arr[j] = arr[j], arr[i+1]\n                    break\n            break\n    \n    res = 0\n    for i in range(l):\n        res = res * 10 + arr[i]\n    return res\n    \n    \nprint rearrange_bigger(987654"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    if len(s) == 1:\n        return int(s)\n    else:\n        l = len(s)\n        for i in range(l):\n            for j in range(i + 1, l):\n                if int(s[i] + s[j]) > int(s):\n                    return int(s[:i] + s[j] + s[i] + s[j+1:])\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits.sort()\n    s = ''\n    for i in digits:\n        s += i\n    return int(s)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n + 1\n    str_n = str(n)\n    for i in range(len(str_n) - 1, -1, -1):\n        if str_n[i] < str_n[i - 1]:\n            str_n = str_n[:i] + str_n[i - 1] + str_n[i:]\n            break\n    return int(str_n)\n    \ndef rearrange_smaller(n):\n    '''\n    Write a function to create the next smaller number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n - 1\n    str_n = str(n)\n    for i in range(len(str_n) - 1, -1, -1):\n        if str_n[i] > str_n[i - 1]:\n            str_n = str_n[:i] + str_n[i - 1] + str_n[i:]\n            break\n    return int(str_n)\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    if n < 10:\n        return True\n    str_n = str(n)\n    mid = int(len(str_n) / 2)\n    for i in range(mid):\n        if str_n[i]!= str_n[len(str_n) - 1 - i]:\n            return False\n    return True\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    nums = list(map(int, str(n)))\n    if nums[0] > nums[-1]:\n        nums = sorted(nums)\n        nums = nums[::-1]\n        nums[0] += 1\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    ret = n\n    n = list(str(n))\n    i = 0\n    while i < len(n) - 1:\n        if int(n[i]) < int(n[i+1]):\n            for j in range(i, len(n)):\n                if int(n[j]) >= int(n[i]) and j!= i:\n                    n[i], n[j] = n[j], n[i]\n                    ret = int(''.join(n))\n                    break\n        i += 1\n    return ret\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def rearrange(n):\n        if n == 0:\n            return 0\n        if n < 10:\n            return n\n        n = str(n)\n        if len(n) == 2:\n            return int(n[0] + n[1])\n        else:\n            return int(n[0] + n[2] + n[1])\n    def find_next_bigger(n):\n        if n == 0:\n            return 0\n        if n < 10:\n            return n\n        n = str(n)\n        if len(n) == 2:\n            return int(n[0] + n[1])\n        else:\n            return int(n[0] + n[2] + n[1])\n    def test_rearrange_bigger():\n        assert rearrange(1324) == 3234\n        assert rearrange(1000) == 1020\n        assert rearrange(0) == 0\n        assert rearrange(1234) == 1234\n        assert rearrange(1999) == 2099\n    def test_find_next_bigger():\n        assert find_next_bigger(1) == 2\n        assert find_next_bigger(3) == 4\n        assert find_next_bigger(12) == 21\n        assert find_next_bigger(1234) == 1234\n        assert find_next_bigger(2000) == 2001\n    def test_rearrange_bigger_1():\n        assert rearrange(1234) == 3234\n        assert rearrange(12345) == 5234\n        assert rearrange(1234) == 3234\n        assert rearrange(12345) == 5234\n        assert rearrange(1234) == 3234\n        assert rearrange(12345) == 5234\n    def test_rearrange_bigger_2():\n        assert rearrange(134) == 434\n        assert rearrange(134) == 434\n        assert rearrange(134) == 434\n        assert rearrange(134) == 434\n        assert rearrange(134) == 434\n    def test_rearrange_bigger_3():\n        assert rearrange(123) == 321\n        assert rearrange(123) == 321\n        assert rearrange(123) == 321\n        assert rearrange(123) == 321\n        assert rearrange(123) == 321\n    def test_rearrange_bigger_4():\n        assert rearrange(1234) == 1234\n        assert rearrange(1234) == 1234\n        assert rearrange(1234) == 1234\n        assert rearrange(1234) == 1234\n        assert rearrange(1234) == 1234\n    def test_rearrange_bigger_5():\n        assert rearrange(12345) == 12345\n        assert rearrange(12345) == 12345\n        assert rearrange(12345) == 12345\n        assert rearrange(12345) == 12345\n        assert rearrange(12345) == 12345\n    def test_rearrange_bigger_6():\n        assert rearrange(123456) == 123456\n        assert rearrange(123456) == 123456\n        assert rearrange(123456) == 123456\n        assert rearrange(123456) == 123456\n        assert rearrange(123456) == 123456\n    def test_rearrange_bigger_7():\n        assert rearrange(1234567) == 1234567\n        assert rearrange(1234567) == 1234567\n        assert rearrange(1234567) == 1234567\n        assert rearrange(1234567) == 1234567\n        assert rearrange(1234567) == 1234567\n    def test_rearrange_bigger_8():\n        assert rearrange(12345678) == 12345678\n        assert rearrange(12345678) == 12345678\n        assert rearrange(12345678) == 12345678\n        assert rearrange(12345678) == 12345678\n        assert rearrange(12345678) == 12345678\n    def test_rearrange_bigger_9():\n        assert rearrange(123456789) == 123456789\n        assert rearrange(123456789) == 123456789\n        assert rearrange(123456789) == 123456789\n        assert rearrange(123456789) == 123456789\n        assert rearrange(123456789) == 123456789\n    def test_rearrange_bigger_10():\n        assert rearrange(12345678901) == 12345678901\n        assert rearrange(12345678901) == 12345678901\n        assert rearrange(12345678901) == 12345678901\n        assert rearrange(12345678901) == 12345678901\n        assert rearrange(12345678901) == 12345678901\n    def test_rearrange_bigger_11():\n        assert rearrange(12345678901234) == 12345678901234\n        assert rearrange(12345678901234) == 12345678901234\n        assert rearrange(12345678901234) == 12345678901234\n        assert rearrange(12345678901234) == 12345678901234\n        assert rearrange(12345678901234) == 12345678901234\n    def test_rearrange_bigger_12():\n        assert rearrange(1234567890123456) == 1234567890123456\n        assert rearrange(1234567890123456) == 1234567890123456\n        assert rearrange(1234567890123456) == 1234567890123456\n        assert rearrange(1234567890123456) == 1234567890123456\n        assert rearrange(1234567890123456) == 1234567890123456\n    def test_rearrange_bigger_13():\n        assert rearrange(123456789012345678) == 123456789012345678\n        assert rearrange(123456789012345678) == 123456789012345678\n        assert rearrange(123456789012345678) == 123456789012345678\n        assert rearrange(123456789012345678) == 123456789012345678\n        assert rearrange(123456789012345678) == 123456789012345678\n    def test_rearrange_bigger_14():\n        assert rearrange(1234567890123456789) == 1234567890123456789\n        assert rearrange(1234567890123456789) == 1234567890123456789\n        assert rearrange(1234567890123456789) == 1234567890123456789\n        assert rearrange(1234567890123456789) == 1234567890123456789\n        assert rearrange(1234567890123456789) == 1234567890123456789\n    def test_rearrange_bigger_15():\n        assert rearrange(12345678901234567890) == 12345678901234567890\n        assert rearrange(12345678901234567890) == 12345678901234567890\n        assert rearrange(12345678901234567890) == 12345678901234567890\n        assert rearrange(12345678901234567890) == 12345678901234567890\n        assert rearrange(12345678901234567890) == 12345678901234567890\n    def test_rearrange_bigger_16():\n        assert rearrange(123456789012345678901) == 123456789012345678901\n        assert rearrange(123456789012345678901) == 123456789012345678901\n        assert rearrange(123456789012345678901) == 123456789012345678901\n        assert rearrange(123456789012345678901) == 123456789012345678901\n        assert rearrange(123456789012345678901) == 123456789012345678901\n    def test_rearrange_bigger_17():\n        assert rearrange(123456789012345678901234) == 123456789012345678901234\n        assert rearrange(123456789012345678901234) ="
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    res = []\n    index1, index2 = 0, 0\n    while index1 < len(nums1) and index2 < len(nums2):\n        if nums1[index1] < nums2[index2]:\n            res.append((nums1[index1], nums2[index2]))\n            index1 += 1\n            index2 += 1\n        elif nums1[index1] > nums2[index2]:\n            index2 += 1\n        else:\n            index1 += 1\n            index2 += 1\n        if len(res) == k:\n            break\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    if k > len(nums1) * len(nums2):\n        return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heapq.heapify(pairs)\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                heapq.heappush(pairs, (num1 + num2, num1, num2))\n            else:\n                if num1 + num2 < pairs[0][0]:\n                    heapq.heappop(pairs)\n                    heapq.heappush(pairs, (num1 + num2, num1, num2))\n    return [pair for pair, _, _ in pairs]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    heapq.heapify(result)\n    for x in nums1:\n        for y in nums2:\n            heapq.heappush(result, (abs(x-y), x, y))\n    return [heapq.heappop(result)[1:3] for _ in range(k)]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    l1 = len(nums1)\n    l2 = len(nums2)\n    if l1 * l2 < k:\n        return []\n    pairs = []\n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    visited = set()\n    while len(pairs) < k:\n        if len(heap) == 0:\n            return pairs\n        if len(pairs) == k:\n            return pairs\n        x, i, j = heapq.heappop(heap)\n        pairs.append([nums1[i], nums2[j]])\n        if (i, j) in visited:\n            continue\n        visited.add((i, j))\n        if i + 1 < l1:\n            heapq.heappush(heap, (nums1[i+1] + nums2[j], i+1, j))\n        if j + 1 < l2:\n            heapq.heappush(heap, (nums1[i] + nums2[j+1], i, j+1))\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # print(nums1,nums2)\n    if k>len(nums1) or k>len(nums2):\n        return []\n    res = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(res, (nums1[i] + nums2[j], i, j))\n    result = []\n    while k>0:\n        result.append(heapq.heappop(res))\n        k-=1\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    res = []\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n            elif len(heap) == k:\n                if heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n            if len(heap) == k:\n                res.append([heap[0][1], heap[0][2]])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(h, [nums1[i]+nums2[j], i, j])\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def k_smallest_pairs_helper(start1, end1, start2, end2, result):\n        if start1 >= end1:\n            return\n        if start2 >= end2:\n            result.append([nums1[start1], nums2[start2]])\n            return\n        if nums1[start1] < nums2[start2]:\n            k_smallest_pairs_helper(start1 + 1, end1, start2, end2, result)\n        else:\n            k_smallest_pairs_helper(start1, end1, start2 + 1, end2, result)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product_list = []\n    for i in list1:\n        for j in list1:\n            product = i[0] * i[1] * j[1]\n            product_list.append(product)\n    return min(product_list)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    total_product = 1\n    list1 = sorted(list1, key=itemgetter(1))\n    print(list1)\n    for i in range(len(list1)):\n        total_product *= list1[i][1]\n    return total_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return reduce(lambda a, b: (a[0] * a[1], a[1] * b[1], b[0] * b[1]), list1)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    length_list1 = len(list1)\n    for i in range(0, length_list1):\n        for j in range(i+1, length_list1):\n            if list1[i][1] * list1[j][1] == 0:\n                print(list1[i][0], list1[j][0])\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    res = []\n    for ele in list1:\n        if res:\n            if res[0][0]*ele[1] > ele[0]*res[0][1]:\n                res = [ele,]\n            elif res[0][0]*ele[1] == ele[0]*res[0][1]:\n                res.append(ele)\n        else:\n            res.append(ele)\n    return res[0][0]*res[0][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return max(product for pair in list1 for product in pair)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    output = 0\n    for i in list1:\n        output += i[0] * i[1]\n    return output\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    m = len(list1[0])\n    list2 = []\n    for i in range(n):\n        for j in range(m):\n            list2.append(list1[i][j])\n    print list2\n    return min(list2)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    from functools import reduce\n    return min([reduce(lambda x,y:x*y, t) for t in list1])\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    #print list1\n    #print list1[0]\n    #print list1[0][0]\n    #print list1[0][1]\n    #print list1[1][0]\n    #print list1[1][1]\n    print list1[0][0]*list1[1][1]\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==1:\n        return listval[0]\n    elif len(listval)==0:\n        return None\n    else:\n        return min(listval[0],min_val(listval[1:]))\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    return listval[0]\ndef min_val_num(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list of numbers\n    '''\n    if len(listval)==0:\n        return None\n    return min(listval)\ndef min_val_float(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list of numbers\n    '''\n    if len(listval)==0:\n        return None\n    return min(listval, key=float)\ndef min_val_string(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list of strings\n    '''\n    if len(listval)==0:\n        return None\n    return min(listval, key=str)\ndef min_val_compare(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef min_val_compare_num(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef min_val_compare_float(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef min_val_compare_string(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef min_val_compare_comp(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef min_val_compare_set(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list\n    '''\n    if len(listval)==0:\n        return None\n    return listval[0]\ndef max_val_num(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list of numbers\n    '''\n    if len(listval)==0:\n        return None\n    return max(listval)\ndef max_val_float(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list of numbers\n    '''\n    if len(listval)==0:\n        return None\n    return max(listval, key=float)\ndef max_val_string(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list of strings\n    '''\n    if len(listval)==0:\n        return None\n    return max(listval, key=str)\ndef max_val_compare(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef max_val_compare_num(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef max_val_compare_float(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef max_val_compare_string(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef max_val_compare_comp(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef max_val_compare_set(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef index_val(listval, item):\n    '''\n    Write a function to find the index of an item in a list\n    '''\n    return listval.index(item)\ndef index_val_num(listval, item):\n    '''\n    Write a function to find the index of an item in a list\n    '''\n    return listval.index(item)\ndef index_val_float(listval, item):\n    '''\n    Write a function to find the index of an item in a list\n    '''\n    return listval.index(item)\ndef index_val_string(listval, item):\n    '''\n    Write a function to find the index of an item in a list\n    '''\n    return listval.index(item)\ndef index_val_compare(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef index_val_compare_num(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef index_val_compare_float(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef index_val_compare_string(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef index_val_compare_comp(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef index_val_compare_set(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef count_val(listval, item):\n    '''\n    Write a function to find the count of an item in a list\n    '''\n    return listval.count(item)\ndef count_val_num(listval, item):\n    '''\n    Write a function to find the count of an item in a list\n    '''\n    return listval.count(item)\ndef count_val_float(listval, item):\n    '''\n    Write a function to find the count of an item in a list\n    '''\n    return listval.count(item)\ndef count_val_string(listval, item):\n    '''\n    Write a function to find the count of an item in a list\n    '''\n    return listval.count(item)\ndef count_val_compare(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef count_val_compare_num(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef count_val_compare_float(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef count_val_compare_string(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef count_val_compare_comp(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef count_val_compare_set(a, b):\n    '''\n    Write a function to compare two values\n    '''\n    return (a>b) - (a<b)\ndef avg_val(listval):\n    '''\n    Write a function to find the average value in a given heterogeneous list\n    '''\n    if len(listval)==0:\n        return None\n    return sum(listval)/float(len(listval))\ndef avg_val_num(listval):\n    '''\n    Write a function to find the average value in a given heterogeneous list of numbers\n    ''"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    listval.sort()\n    return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if(min > listval[i]):\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = None\n    for i in listval:\n        if minval == None or i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    return min(listval[0], min_val(listval[1:]))\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for value in listval:\n        if value < minimum:\n            minimum = value\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if i<min:\n            min = i\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_list = re.split('([a-z]+)',word)\n    return snake_list[0] + ''.join(x.title() for x in snake_list[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # First, get rid of all non-alphanumeric characters in the string.\n    word = re.sub('[^0-9a-zA-Z]+', '', word)\n    # Then, replace all spaces with underscore, and then capitalize the first letter of the string.\n    word = re.sub('[\\s]+', '_', word).title()\n    return word\ndef convert_list_to_dict(lst):\n    '''\n    Write a function to convert a list of dictionary to a dictionary of lists.\n    '''\n    # First, create a list of all the keys of the dictionary.\n    keys = []\n    for elem in lst:\n        keys.extend(elem.keys())\n    # Then, create a dictionary of lists.\n    dic = {key: [] for key in set(keys)}\n    # And finally, put the elements of the list into the dictionary.\n    for elem in lst:\n        for key in dic:\n            if key in elem.keys():\n                dic[key].append(elem[key])\n    return dic\ndef convert_list_to_dict_alternative(lst):\n    '''\n    Alternative implementation for converting a list of dictionary to a dictionary of lists.\n    '''\n    # First, create a set of all the keys of the dictionary.\n    keys = set()\n    for elem in lst:\n        keys.update(elem.keys())\n    # Then, create a dictionary of lists.\n    dic = {key: [] for key in keys}\n    # And finally, put the elements of the list into the dictionary.\n    for elem in lst:\n        for key in dic:\n            if key in elem.keys():\n                dic[key].append(elem[key])\n    return dic\ndef convert_list_to_dict_with_dict_comprehension(lst):\n    '''\n    Write a function to convert a list of dictionary to a dictionary of lists.\n    '''\n    # First, create a set of all the keys of the dictionary.\n    keys = set()\n    for elem in lst:\n        keys.update(elem.keys())\n    # Then, create a dictionary of lists.\n    dic = {key: [elem[key] for elem in lst] for key in keys}\n    return dic\ndef convert_list_to_dict_with_dict_comprehension_alternative(lst):\n    '''\n    Alternative implementation for converting a list of dictionary to a dictionary of lists.\n    '''\n    # First, create a set of all the keys of the dictionary.\n    keys = set()\n    for elem in lst:\n        keys.update(elem.keys())\n    # Then, create a dictionary of lists.\n    dic = {key: [elem[key] for elem in lst] for key in keys}\n    return dic\ndef remove_empty_strings(lst):\n    '''\n    Write a function to remove empty strings from a list of strings.\n    '''\n    return [elem for elem in lst if elem]\ndef remove_empty_strings_with_list_comprehension(lst):\n    '''\n    Alternative implementation for removing empty strings from a list of strings.\n    '''\n    return [elem for elem in lst if elem]\ndef remove_empty_strings_from_list_of_strings(lst):\n    '''\n    Write a function to remove empty strings from a list of strings.\n    '''\n    return [elem for elem in lst if elem]\ndef remove_empty_strings_from_list_of_strings_with_list_comprehension(lst):\n    '''\n    Alternative implementation for removing empty strings from a list of strings.\n    '''\n    return [elem for elem in lst if elem]\ndef remove_empty_strings_from_list_of_strings_with_filter(lst):\n    '''\n    Write a function to remove empty strings from a list of strings.\n    '''\n    return list(filter(None, lst))\ndef remove_empty_strings_from_list_of_strings_with_filter_alternative(lst):\n    '''\n    Alternative implementation for removing empty strings from a list of strings.\n    '''\n    return list(filter(None, lst))\ndef remove_empty_strings_from_list_of_strings_with_map(lst):\n    '''\n    Write a function to remove empty strings from a list of strings.\n    '''\n    return list(map(lambda elem: elem.strip(), lst))\ndef remove_empty_strings_from_list_of_strings_with_map_alternative(lst):\n    '''\n    Alternative implementation for removing empty strings from a list of strings.\n    '''\n    return list(map(lambda elem: elem.strip(), lst))\ndef remove_empty_strings_from_list_of_strings_with_filter_and_map(lst):\n    '''\n    Write a function to remove empty strings from a list of strings.\n    '''\n    return list(map(lambda elem: elem.strip(), list(filter(None, lst))))\ndef remove_empty_strings_from_list_of_strings_with_filter_and_map_alternative(lst):\n    '''\n    Alternative implementation for removing empty strings from a list of strings.\n    '''\n    return list(map(lambda elem: elem.strip(), list(filter(None, lst))))\ndef remove_duplicate_words_from_list_of_strings(lst):\n    '''\n    Write a function to remove duplicate words from a list of strings.\n    '''\n    words = set()\n    for elem in lst:\n        words.update(elem.split())\n    return list(words)\ndef remove_duplicate_words_from_list_of_strings_with_list_comprehension(lst):\n    '''\n    Alternative implementation for removing duplicate words from a list of strings.\n    '''\n    return list(set(word for word in lst if word))\ndef remove_duplicate_words_from_list_of_strings_with_map(lst):\n    '''\n    Write a function to remove duplicate words from a list of strings.\n    '''\n    words = set()\n    for elem in lst:\n        words.update(elem.split())\n    return list(map(lambda word: word, words))\ndef remove_duplicate_words_from_list_of_strings_with_map_alternative(lst):\n    '''\n    Alternative implementation for removing duplicate words from a list of strings.\n    '''\n    words = set()\n    for elem in lst:\n        words.update(elem.split())\n    return list(map(lambda word: word, words))\ndef remove_duplicate_words_from_list_of_strings_with_filter(lst):\n    '''\n    Write a function to remove duplicate words from a list of strings.\n    '''\n    words = set()\n    for elem in lst:\n        words.update(elem.split())\n    return list(filter(lambda word: word, words))\ndef remove_duplicate_words_from_list_of_strings_with_filter_alternative(lst):\n    '''\n    Alternative implementation for removing duplicate words from a list of strings.\n    '''\n    words = set()\n    for elem in lst:\n        words.update(elem.split())\n    return list(filter(lambda word: word, words))\ndef remove_duplicate_words_from_list_of_strings_with_map_and_filter(lst):\n    '''\n    Write a function to remove duplicate words from a list of strings.\n    '''\n    words = set()\n    for elem in lst:\n        words.update(elem.split())\n    return list(filter(lambda word: word, words))\ndef remove_duplicate_words_from_list_of_strings_with_map_and_filter_alternative(lst):\n    '''\n    Alternative implementation for removing duplicate words from a list of strings.\n    '''\n    words = set()\n    for elem in lst:\n        words.update(elem.split())\n    return list(filter(lambda word: word"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    splited = re.split(r'_', word)\n    camel = [splited[0]]\n    for i in range(1, len(splited)):\n        camel.append(splited[i].title())\n    return ''.join(camel)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    word = word.lower()\n    word = word.replace('-', '')\n    word = word.split('_')\n    l = []\n    for i in word:\n        if i == word[0]:\n            l.append(i)\n        else:\n            l.append(i.capitalize())\n    return ''.join(l)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    res = \"\"\n    for word in word.split('_'):\n        res += word.capitalize()\n    return res\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_case = re.sub(r\"(.)_(\\d+)\", r\"\\1_\\2\", word)\n    return re.sub(r\"_([a-z])\", lambda x: x.group(1).upper(), snake_case)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == None or len(word) == 0:\n        return word\n    new_word = ''\n    for letter in word:\n        if letter == '_':\n            new_word +=''\n        elif letter.isupper():\n            new_word += letter\n        else:\n            new_word += letter.lower()\n    return new_word\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    if '_' not in word:\n        return word\n    word = re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n    return word[0].lower() + word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    result = word.split('_')\n    result[0] = result[0].capitalize()\n    for i in range(1, len(result)):\n        result[i] = result[i].capitalize()\n    return ''.join(result)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    return re.sub('([A-Z]{2,})', r'\\1', s).lower()\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2==1:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = l[::2]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = [x for x in l if x%2 ==0]\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2!=0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = l[1::2]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2!=0:\n            l.remove(l[i])\n    return l"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\nprint(remove_odd([1, 2, 3, 4, 5, 6, 7, 8]))\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l2 = []\n    for i in l:\n        if i%2 == 0:\n            l2.append(i)\n    return l2\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [row[n] for row in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # zip(*list1) is used to unpack all the tuples of a list to separate lists.\n    # *list1 is a tuple\n    return list(zip(*list1))[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # populate dictionary with key value pairs of the form (number, list)\n    list_dict = {}\n    for x in list1:\n        list_dict[x[0]] = x[1]\n    # check that n is less than the number of keys in the dictionary\n    if n < len(list_dict):\n        return list_dict[n]\n    return None\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item[n] for item in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list_length = len(list1)\n    if list_length > n:\n        result = list1[n]\n    else:\n        result = None\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [sublist[n] for sublist in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return True if bool(set(list1).intersection(set(list2))) else False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Check if any of the elements in list1 exists in list2\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #list1 = [10,20,30,40,50,60,70,80,90,100]\n    #list2 = [1,2,3,4,5,6,7,8,9,10]\n    #return len(set(list1) & set(list2)) > 0\n    #return any(x in list2 for x in list1)\n    #print(len(set(list1) & set(list2)))\n    #return any(x in list1 for x in list2)\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return True if set(list1) & set(list2) else False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \n    \nprint(overlapping([1,2,3,4], [1,2,3,4]))\nprint(overlapping([1,2,3,4], [1,2,5,6,7]))\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == len(list2):\n        for i in list1:\n            if i in list2:\n                return True\n            else:\n                return False\n    else:\n        return \"Length of lists are not same\"\ndef common(list1,list2):\n    '''\n    Write a python function to check whether all values in a sequence are present in the sequence or not.\n    '''\n    if len(list1) == len(list2):\n        for i in list1:\n            if i not in list2:\n                return False\n    return True\ndef get_number_of_elements_in_a_list(list):\n    '''\n    Write a python function to return the count of the elements in a list.\n    '''\n    count = 0\n    for i in list:\n        count = count +1\n    return count\ndef get_number_of_elements_in_a_list_recursive(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return list[0] + get_number_of_elements_in_a_list_recursive(list[1:])\ndef get_number_of_elements_in_a_list_recursive_2(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return get_number_of_elements_in_a_list_recursive_2(list[1:]) + list[0]\ndef get_number_of_elements_in_a_list_recursive_3(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return get_number_of_elements_in_a_list_recursive_3(list[1:]) + list[0]\ndef get_number_of_elements_in_a_list_recursive_4(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return 1 + get_number_of_elements_in_a_list_recursive_4(list[1:])\ndef get_number_of_elements_in_a_list_recursive_5(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return 1 + get_number_of_elements_in_a_list_recursive_5(list[1:])\ndef get_number_of_elements_in_a_list_recursive_6(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return 1 + get_number_of_elements_in_a_list_recursive_6(list[1:])\ndef get_number_of_elements_in_a_list_recursive_7(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return list[0] + get_number_of_elements_in_a_list_recursive_7(list[1:])\ndef get_number_of_elements_in_a_list_recursive_8(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return list[0] + get_number_of_elements_in_a_list_recursive_8(list[1:])\ndef get_number_of_elements_in_a_list_recursive_9(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return list[0] + get_number_of_elements_in_a_list_recursive_9(list[1:])\ndef get_number_of_elements_in_a_list_recursive_10(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return list[0] + get_number_of_elements_in_a_list_recursive_10(list[1:])\ndef get_number_of_elements_in_a_list_recursive_11(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return list[0] + get_number_of_elements_in_a_list_recursive_11(list[1:])\ndef get_number_of_elements_in_a_list_recursive_12(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return list[0] + get_number_of_elements_in_a_list_recursive_12(list[1:])\ndef get_number_of_elements_in_a_list_recursive_13(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return list[0] + get_number_of_elements_in_a_list_recursive_13(list[1:])\ndef get_number_of_elements_in_a_list_recursive_14(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return list[0] + get_number_of_elements_in_a_list_recursive_14(list[1:])\ndef get_number_of_elements_in_a_list_recursive_15(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return list[0] + get_number_of_elements_in_a_list_recursive_15(list[1:])\ndef get_number_of_elements_in_a_list_recursive_16(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return list[0] + get_number_of_elements_in_a_list_recursive_16(list[1:])\ndef get_number_of_elements_in_a_list_recursive_17(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n    else:\n        return list[0] + get_number_of_elements_in_a_list_recursive_17(list[1:])\ndef get_number_of_elements_in_a_list_recursive_18(list):\n    '''\n    Write a python function to return the count of the elements in a list recursively.\n    '''\n    if len(list) == 1:\n        return 1\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for val in list1:\n        if val in list2:\n            return 1\n            break\n        else:\n            continue\n            \n    return 0\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    res = [0 for i in range(2)]\n    res[0] = arr[n-1] * arr[n-2]\n    res[1] = arr[0] * arr[1]\n    return max(res)\n    \ndef find_smallest_number(arr):\n    '''\n    Write a python function to find the smallest number from a given array of integers.\n    '''\n    arr.sort()\n    return arr[0]\n    \ndef find_missing_number(arr):\n    '''\n    Write a python function to find a missing number in the given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i]!= i+1:\n            return i+1\n            \ndef find_even_number(arr):\n    '''\n    Write a python function to find an even number in the given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i]%2 == 0:\n            return arr[i]\n            \ndef is_Permutation(a, b):\n    '''\n    Write a python function to check whether two strings are permutations of each other or not.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n    \ndef find_odd_number(arr):\n    '''\n    Write a python function to find an odd number from the given array of integers.\n    '''\n    for i in arr:\n        if i%2!= 0:\n            return i\n            \ndef find_factorial(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * find_factorial(n-1)\n        \ndef find_isogram(s):\n    '''\n    Write a python function to find whether a string is a isogram or not.\n    '''\n    s = s.lower()\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] > 1:\n            return False\n    return True\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    n = len(s)\n    for i in range(n/2):\n        if s[i]!= s[n-i-1]:\n            return False\n    return True\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    n = len(s1)\n    if len(s1)!= len(s2):\n        return False\n    for i in range(n):\n        if s1[i] in s2:\n            s2 = s2.replace(s1[i], '', 1)\n    if s2!= '':\n        return False\n    return True\n    \ndef is_reverse_palindrome(s):\n    '''\n    Write a python function to check whether a string is a reverse palindrome or not.\n    '''\n    n = len(s)\n    for i in range(n/2):\n        if s[i]!= s[n-i-1]:\n            return False\n    return True\n    \ndef is_rotated_string(s1, s2):\n    '''\n    Write a python function to check whether the first string is a rotation of the second string or not.\n    '''\n    n = len(s1)\n    if len(s2)!= n:\n        return False\n    s2 = s2 + s2\n    for i in range(n):\n        if s2[i:i+n] == s1:\n            return True\n    return False\n    \ndef find_rotation_index(s1, s2):\n    '''\n    Write a python function to find the index where the first string is a rotation of the second string or not.\n    '''\n    n = len(s2)\n    for i in range(n):\n        if s2[i:i+n] == s1:\n            return i\n    return -1\n    \ndef find_rotation_points(s, start, end):\n    '''\n    Write a python function to find all the possible rotation points in a string.\n    '''\n    if start == end:\n        return [start]\n    elif start > end:\n        return []\n    else:\n        res = []\n        for i in range(start, end+1):\n            if is_rotated_string(s[start:i+1], s[i:]):\n                res.append(i)\n        return res\n        \ndef common_digits(n, m):\n    '''\n    Write a python function to find the common digits between two numbers n and m.\n    '''\n    n = str(n)\n    m = str(m)\n    l = len(n)\n    if l > len(m):\n        n, m = m, n\n    n = n[::-1]\n    m = m[::-1]\n    for i in range(len(n)):\n        if int(n[i]) == int(m[i]):\n            continue\n        else:\n            return False\n    return True\n    \ndef sum_digits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    s = str(n)\n    res = 0\n    for i in s:\n        res += int(i)\n    return res\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function to find the sum of squares of digits of a number.\n    '''\n    s = str(n)\n    res = 0\n    for i in s:\n        res += int(i)**2\n    return res\n    \ndef find_largest_number(arr):\n    '''\n    Write a python function to find the largest number from an array of integers.\n    '''\n    arr.sort()\n    return arr[-1]\n    \ndef two_sum(arr, k):\n    '''\n    Write a python function to find two elements with a sum equal to a given number from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        left = i+1\n        right = n-1\n        while left < right:\n            if arr[i] + arr[left] + arr[right] == k:\n                return (arr[i], arr[left])\n            elif arr[i] + arr[left] + arr[right] < k:\n                left += 1\n            else:\n                right -= 1\n    return None\n    \ndef nth_power_number(n):\n    '''\n    Write a python function to find the nth power number of a number.\n    '''\n    res = 1\n    for i in range(1, n+1):\n        res *= i\n    return res\n    \ndef is_power_of_2(n):\n    '''\n    Write a python function to check whether a given number is a power of 2 or not.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef find_power_of_2(n):\n    '''\n    Write a python function to find the power of 2 from a given number.\n    '''\n    if n & (n-1) == 0:\n        return 2**(n-1)\n    else:\n        return -1\n    \ndef decimal_to_binary(n):\n    '''\n    Write a python function to convert a decimal number to binary number.\n    '''\n    if n == 0:\n    "
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #code here\n    if len(arr)==0:\n        return 0\n    max1=arr[0]\n    max2=arr[0]\n    for i in arr[1:]:\n        if max1*i>i*max2:\n            max2=max1*i\n        if max2*i>i*max1:\n            max1=max2*i\n        if max1>max2:\n            max2=max1\n    return max1\n    \nif __name__=='__main__':\n    arr=[1,2,3,4,5]\n    print(max_Product(arr))\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    max_so_far = max(arr[0], arr[1])\n    min_so_far = min(arr[0], arr[1])\n    res = max_so_far\n    for i in range(2, len(arr)):\n        curr = max(arr[i], arr[i]*max_so_far, arr[i]*min_so_far)\n        min_so_far = min(arr[i], arr[i]*max_so_far, arr[i]*min_so_far)\n        max_so_far = curr\n        res = max(res, max_so_far)\n    return res\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if arr == []:\n        return []\n    max_product = arr[0] * arr[1]\n    result = [arr[0], arr[1]]\n    for i in range(2, len(arr)):\n        temp = arr[i] * result[-1]\n        if temp > max_product:\n            max_product = temp\n            result.append(arr[i])\n        else:\n            result.append(arr[i])\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    arr.sort()\n    x = arr[0] * arr[1]\n    y = arr[-1] * arr[-2]\n    return max(x,y)\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m1 = arr[0]\n    m2 = arr[1]\n    max_product = m1 * m2\n    if (m1 > m2):\n        max_product = m2 * m1\n    for i in xrange(2, len(arr)):\n        if (m1 * arr[i] > m2 * arr[i]):\n            m2 = m1\n            m1 = arr[i]\n        elif (m2 * arr[i] > m1 * arr[i]):\n            m2 = arr[i]\n        if (m1 * m2 > max_product):\n            max_product = m1 * m2\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Code here\n    arr = sorted(arr)\n    m1 = arr[-1]\n    m2 = arr[-2]\n    \n    return m1*m2\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    result = arr[0]*arr[1]*arr[2]\n    if(arr[0] < arr[1] < arr[2]):\n        result = arr[1]*arr[2]\n    if(arr[0] < arr[2] < arr[1]):\n        result = arr[2]*arr[1]\n    if(arr[1] < arr[2] < arr[0]):\n        result = arr[2]*arr[0]\n    return result\n    \n    \nprint max_Product([1,3,5,7,9,2])\n    \n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # We use a heap to find a pair with max product\n    # to store all products of elements at each index\n    \n    # Initialize a max heap\n    heap = [-1 * arr[0]]\n    \n    # We start with the first index\n    i = 0\n    \n    # While the index is less than the length of the array\n    while i < len(arr):\n        \n        # Get the product of the current element and the element at the index\n        # and push it to the heap\n        # Pop the heap and store the value in a variable\n        # Add the current element to the heap\n        curr = arr[i] * heapq.heappop(heap)\n        \n        # Push the current element to the heap\n        heapq.heappush(heap, -1 * curr)\n        \n        # Increment the index\n        i += 1\n        \n    # Get the product of the last element and the element at the root of the heap\n    # and return the product of them\n    return -1 * heap[0]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[-1]*arr[-2]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    sorted_list = sorted(Input)\n    previous = sorted_list[0]\n    grouped_list = []\n    for element in sorted_list:\n        if element!= previous:\n            grouped_list.append((previous,))\n            previous = element\n    grouped_list.append((previous,))\n    return grouped_list\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    grouped_list = [] \n    for item in Input: \n        grouped_list.append(item[0]) \n    # grouped_list = list(set(grouped_list)) \n    return grouped_list\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = [] \n    for i in Input:\n        try: Output.append(i[0])\n        except: pass\n    Output = sorted(set(Output))\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dict_of_group = {}\n    for i in Input:\n        if i[0] in dict_of_group:\n            dict_of_group[i[0]].append(i)\n        else:\n            dict_of_group[i[0]] = [i]\n    return dict_of_group\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for each in Input: \n        if len(each) > 1: \n            return each[0]\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for tuple in Input:\n        Output.append(tuple[0])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for t in Input:\n        if len(t)>=2:\n            if t[0] == t[1]:\n                result.append(t[0])\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list=[]\n    list1=[]\n    for item in Input:\n        list.append(item[0])\n    for item in set(list):\n        list1.append(item)\n    list1.sort()\n    return list1\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return (sorted(list(set([x[0] for x in Input]))))\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Check to see if Input is empty list\n    if not Input:\n        return \n    \n    # Define a function to find the length of each tuple\n    def find_length(tup):\n        return len(tup)\n    \n    # Pass the Input list to a dictionary \n    dict_tuples = {}\n    for i in Input:\n        if i in dict_tuples:\n            dict_tuples[i] += 1\n        else:\n            dict_tuples[i] = 1\n    \n    # Define a function to extract the first element in each tuple\n    def extract_first_ele(tup):\n        return tup[0]\n    \n    # Pass the dictionary to a list\n    list_tuples = []\n    for i in dict_tuples:\n        list_tuples.append(i)\n    \n    # Sort the list and extract the first element in each tuple\n    list_tuples = sorted(list_tuples, key=extract_first_ele)\n    \n    # Define a function to find common first element in tuple and return the count\n    def common_ele_count(tup1, tup2):\n        common_ele = []\n        for i in tup1:\n            if i in tup2:\n                common_ele.append(i)\n        return len(common_ele)\n    \n    # Find the common first element in each tuple and return the count\n    count = []\n    for i in range(0, len(list_tuples)):\n        count.append(common_ele_count(list_tuples[i], Input))\n    \n    # Return the count list\n    return count\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n    return max\n    \ndef Convert_to_Pairs(lst): \n    '''\n    Write a python function to convert a list of strings to pairs. For example, convert [\"egg\", \"spam\", \"spam\", \"bacon\"] to [(egg,spam), (spam,bacon)].\n    '''\n    pairs = []\n    for i in lst:\n        for j in lst:\n            if i!= j:\n                pairs.append((i,j))\n    return pairs\n    \ndef Filter_Out_Duplicates(lst): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    lst2 = []\n    for i in lst:\n        if i not in lst2:\n            lst2.append(i)\n    return lst2\n    \ndef Remove_Element(lst, val): \n    '''\n    Write a python function to remove element val from a list.\n    '''\n    lst2 = []\n    for i in lst:\n        if i!= val:\n            lst2.append(i)\n    return lst2\n    \ndef Remove_Element_Duplicates(lst): \n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    lst2 = []\n    for i in lst:\n        if i not in lst2:\n            lst2.append(i)\n    return lst2\n    \ndef Find_Intersect(lst1, lst2): \n    '''\n    Write a python function to find the intersection of two lists.\n    '''\n    intersect = []\n    for i in lst1:\n        if i in lst2:\n            intersect.append(i)\n    return intersect\n    \ndef Find_Union(lst1, lst2): \n    '''\n    Write a python function to find the union of two lists.\n    '''\n    union = []\n    for i in lst1:\n        union.append(i)\n    for i in lst2:\n        if i not in union:\n            union.append(i)\n    return union\n    \ndef Find_Difference(lst1, lst2): \n    '''\n    Write a python function to find the difference of two lists.\n    '''\n    diff = []\n    for i in lst1:\n        if i not in lst2:\n            diff.append(i)\n    return diff\n    \ndef Find_Difference_Asterisks(lst1, lst2): \n    '''\n    Write a python function to find the difference of two lists using asterisks (*)\n    '''\n    diff = []\n    for i in lst1:\n        if i not in lst2:\n            diff.append(i)\n    return diff\n    \ndef Find_Difference_Brackets(lst1, lst2): \n    '''\n    Write a python function to find the difference of two lists using brackets\n    '''\n    diff = []\n    for i in lst1:\n        if i not in lst2:\n            diff.append(i)\n    return diff\n    \ndef Find_Elements(lst, s): \n    '''\n    Write a python function to find all elements of a list that are a substring of a string.\n    '''\n    lst2 = []\n    for i in lst:\n        if i.startswith(s):\n            lst2.append(i)\n    return lst2\n    \ndef Count_Element(lst, s): \n    '''\n    Write a python function to find the number of times a substring occurs in a string.\n    '''\n    count = 0\n    for i in lst:\n        if i.startswith(s):\n            count += 1\n    return count\n    \ndef Find_Unique_Element(lst): \n    '''\n    Write a python function to find the unique element of a list.\n    '''\n    for i in lst:\n        if lst.count(i) == 1:\n            return i\n            \ndef Find_All_Element(lst, s): \n    '''\n    Write a python function to find all elements of a list that are a substring of a string.\n    '''\n    lst2 = []\n    for i in lst:\n        if i.startswith(s):\n            lst2.append(i)\n    return lst2\n    \ndef Find_All_Element_Duplicates(lst): \n    '''\n    Write a python function to find all elements of a list that are a substring of a string.\n    '''\n    lst2 = []\n    for i in lst:\n        if lst.count(i) > 1:\n            lst2.append(i)\n    return lst2\n    \ndef Find_All_Element_Duplicates_Asterisks(lst): \n    '''\n    Write a python function to find all elements of a list that are a substring of a string.\n    '''\n    lst2 = []\n    for i in lst:\n        if lst.count(i) > 1:\n            lst2.append(i)\n    return lst2\n    \ndef Find_All_Element_Duplicates_Brackets(lst): \n    '''\n    Write a python function to find all elements of a list that are a substring of a string.\n    '''\n    lst2 = []\n    for i in lst:\n        if lst.count(i) > 1:\n            lst2.append(i)\n    return lst2\n    \ndef Find_All_Element_Duplicates_Brackets_Asterisks(lst): \n    '''\n    Write a python function to find all elements of a list that are a substring of a string.\n    '''\n    lst2 = []\n    for i in lst:\n        if lst.count(i) > 1:\n            lst2.append(i)\n    return lst2\n    \ndef Find_All_Element_Duplicates_Brackets_Asterisks_Func(lst): \n    '''\n    Write a python function to find all elements of a list that are a substring of a string.\n    '''\n    lst2 = []\n    for i in lst:\n        if lst.count(i) > 1:\n            lst2.append(i)\n    return lst2\n    \ndef Find_All_Element_Duplicates_Brackets_Asterisks_Func2(lst): \n    '''\n    Write a python function to find all elements of a list that are a substring of a string.\n    '''\n    lst2 = []\n    for i in lst:\n        if lst.count(i) > 1:\n            lst2.append(i)\n    return lst2\n    \ndef Find_All_Element_Duplicates_Brackets_Asterisks_Func3(lst): \n    '''\n    Write a python function to find all elements of a list that are a substring of a string.\n    '''\n    lst2 = []\n    for i in lst:\n        if lst.count(i) > 1:\n            lst2.append(i)\n    return lst2\n    \ndef Find_All_Element_Duplicates_Brackets_Asterisks_Func4(lst): \n    '''\n    Write a python function to find all elements of a list that are a substring of a string.\n    '''\n    lst2 = []\n    for i in lst:\n        if lst.count(i) > 1:\n            lst2.append(i)\n    return lst2\n    \ndef Find_All_Element_Duplicates_Brackets_Asterisks_Func5(lst): \n    '''\n    Write a python function to find all elements of a list that are a substring of a string.\n    '''\n    lst2 = []\n    for i in lst:\n        if lst.count(i) > 1:\n            lst2.append(i)\n    return lst2\n    \ndef Find_All_Element_Duplicates_Brackets"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen = 0\n    i = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > maxlen:\n            maxlen = len(lst[i])\n            maxIndex = i\n    return maxIndex\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n            max_str=i\n    return max_str\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if not lst:\n        return None\n    else:\n        maxLen = 0\n        for i in lst:\n            if len(i)>maxLen:\n                maxLen = len(i)\n                max_i = i\n        return max_i\ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    if not lst:\n        return None\n    else:\n        minLen = float('inf')\n        for i in lst:\n            if len(i)<minLen:\n                minLen = len(i)\n                min_i = i\n        return min_i\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    x=len(lst)\n    return lst[x-1]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    max_element = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    print('Maximum length element is:'+ str(max_element))\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    res = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            res = lst[i]\n    return res\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = -1\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n            elem = i\n    return elem\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for item in lst:\n        if len(item) > max:\n            max = len(item)\n            return max\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    if len(lst)==1:\n        return lst[0]\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum([round(x) for x in list1])*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(round(sum(list1),3))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    summation = 0\n    for i in list1:\n        i = round(i)\n        summation += i\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        i = round(i)\n        total = total + i\n    print(\"The sum of the rounded numbers is %s and the length is %s\" %(total, len(list1)))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    return total*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum=0\n    for i in list1:\n        sum+=round(i)\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total += round(x)\n    print(total*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1=0\n    for i in list1:\n        i=round(i)\n        sum1=sum1+i\n    print(sum1*len(list1))\n    return sum1*len(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for x in range(0, n):\n        if x%2 == 0:\n            cube_sum = cube_sum + x*x*x\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    def sum_of_cubes(n):\n        '''\n        Write a python function to find the sum of cubes of first n even natural numbers.\n        '''\n        return sum(x*x*x for x in range(n+1) if x%2==0)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    res = 0\n    for i in xrange(n): \n        if i%2 == 0:\n            res += i*i*i\n    return res\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2,n+1,2):\n        cube_sum += i*i*i\n    return cube_sum\n    "
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    ans = 0\n    for x in range(1, n+1):\n        if x % 2 == 0:\n            ans += x**3\n    return ans\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            result = result + i**3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    x = []\n    for i in range(1,n+1):\n        if i%2==0:\n            x.append(i**3)\n    return sum(x)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 2*n*(n+1)/3 + cube_Sum(n-1)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Code\n    sum = 0\n    for x in range(n):\n        if x % 2 == 0:\n            sum += x * x * x\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    x = 0\n    for i in range(n):\n        if i%2 == 0:\n            x += i*i*i\n    return x\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup_str = ''\n    for i in range(len(test_tup)):\n        tup_str += str(test_tup[i])\n        if i!= len(test_tup) - 1:\n            tup_str += delimiter\n    return tup_str\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(x.split('|') for x in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    result = \"\"\n    for tup_element in test_tup:\n        result += str(tup_element)\n        result += DELIMITER\n    \n    return result[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated = ''\n    for t in test_tup:\n        concatenated += str(t)\n        concatenated += delimiter\n    return concatenated[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for elem in test_tup:\n        result += elem\n        result += delimiter\n    return result[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup = \"\"\n    for elem in test_tup:\n        tup += str(elem) + ','\n    return tup[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    temp_lst = []\n    for i in test_tup:\n        temp_lst.append(i)\n    test_str = ''.join(temp_lst)\n    return test_str\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str_out = \"\"\n    for element in test_tup:\n        str_out = str_out + element + \" \"\n    return str_out[0:-1]\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total = total + i**3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    nums = range(1,n+1)\n    #print nums\n    return (sum(nums))**(1.0/3.0)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(n+1)])/float(n+1)\n    \ndef main():\n    print find_Average_Of_Cube(100)\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    a = 1\n    b = 1\n    c = 1\n    nums = []\n    total = 0\n    while a <= n:\n        nums.append(a)\n        total = total + a*a*a\n        a = a + 1\n    average = total / len(nums)\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        sum = sum + i**3\n        i += 1\n    return sum/n\n    \nprint(find_Average_Of_Cube(1000))\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes_list = []\n    sum = 0\n    for i in range(1,n+1):\n        cubes_list.append(i**3)\n        sum = sum + i**3\n    return sum / len(cubes_list)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    def find_Average(n):\n        total = 0\n        for i in range(1,n+1):\n            total += i*i*i\n        return total/n\n    return find_Average(n)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total = total + i*i*i\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    res = []\n    for i in range(1, n + 1):\n        res.append(i ** 3)\n    print \"Average of cubes of first \" + str(n) + \" natural numbers is: \" + str(sum(res) / float(n))\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(1,n+1):\n        avg = avg + (i**3)\n    avg = avg/n\n    return avg\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = tuple(list(map(lambda x: x[-1], test_tuple)))\n    return new_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(s[-1] for s in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1::2]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = ()\n    for i in test_tuple:\n        i = i.rstrip()\n        new_tuple += (i[-1],)\n    return new_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(i[-1] for i in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([s[-1] for s in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    l = [len(i) for i in test_tuple]\n    return tuple([i[-1] for i in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1],test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # The following line is a placeholder for the real code\n    return test_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # INITIALIZE EMPTY LIST\n    result_list = []\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    cnt = 0\n    for i in list1:\n        if x in i:\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            c = c + 1\n    return c\n    \n    \ndef count_element_in_list_recursive(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive(list1[1:], x)\n    else:\n        return count_element_in_list_recursive(list1[1:], x)\n    \n    \ndef count_element_in_list_iterative(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            c = c + 1\n            if i == len(list1) - 1:\n                return c\n    return c\n    \n    \ndef count_element_in_list_recursive_1(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_1(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_1(list1[1:], x)\n    \ndef count_element_in_list_recursive_2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_2(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_2(list1[1:], x)\n    \n    \ndef count_element_in_list_recursive_3(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_3(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_3(list1[1:], x)\n    \ndef count_element_in_list_recursive_4(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_4(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_4(list1[1:], x)\n    \ndef count_element_in_list_recursive_5(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_5(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_5(list1[1:], x)\n    \n    \ndef count_element_in_list_recursive_6(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_6(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_6(list1[1:], x)\n    \n    \ndef count_element_in_list_recursive_7(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_7(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_7(list1[1:], x)\n    \n    \ndef count_element_in_list_recursive_8(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_8(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_8(list1[1:], x)\n    \n    \ndef count_element_in_list_recursive_9(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_9(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_9(list1[1:], x)\n    \n    \ndef count_element_in_list_recursive_10(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_10(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_10(list1[1:], x)\n    \n    \ndef count_element_in_list_recursive_11(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_11(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_11(list1[1:], x)\n    \n    \ndef count_element_in_list_recursive_12(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_12(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_12(list1[1:], x)\n    \n    \ndef count_element_in_list_recursive_13(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif x in list1[0]:\n        return 1 + count_element_in_list_recursive_13(list1[1:], x)\n    else:\n        return count_element_in_list_recursive_13(list1[1:], x)\n    \n    \ndef count_element_in_list_recursive_14(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    from itertools import groupby\n    return sum(1 for i in groupby(list1))\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif list1[0] == x:\n        return 1 + count_element_in_list(list1[1:], x)\n    else:\n        return count_element_in_list(list1[1:], x)\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count += 1\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list1.sort()\n    list2 = list1[:]\n    list2.sort()\n    count = 0\n    i, j = 0, 0\n    while i < len(list1):\n        if list1[i] == x:\n            count = count + (len(list2) - j)\n            i = i + 1\n            j = i\n        else:\n            i = i + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i in list1 if x in i])\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            new_nums.append(num)\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)\n    \nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6, 7, 8]\n    print filter_oddnumbers(l"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            del nums[i]\n            return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #return list(filter(lambda num: num % 2 == 0, nums))\n    return list(filter(lambda num: not num % 2 == 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2==0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda n: n % 2 == 1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # filters the odd numbers and returns the resulting array\n    return [x for x in nums if x % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2 == 0:\n            nums.remove(i)\n    return nums\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # return dt[4:] + '-' + dt[6:] + '-' + dt[:4]\n    return dt[6:] + '-' + dt[3:5] + '-' + dt[:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace('-','')\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import datetime\n    date_format = '%Y-%m-%d'\n    d = datetime.datetime.strptime(dt, date_format)\n    dd = d.strftime('%d-%m-%Y')\n    return dd\ndef get_city_details(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    details = []\n    reg_ex = r'[<h1>](.+)[<\\/h1>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        details = match_obj.group(1)\n    details = re.split(',', details)\n    details = details[0].split('<br>')\n    for i in range(len(details)):\n        details[i] = details[i].strip()\n    details[-1] = change_date_format(details[-1])\n    return details\ndef get_geo_details(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    details = []\n    reg_ex = r'[<div class=\"city-details\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        details = match_obj.group(1)\n    details = re.split(',', details)\n    details = details[0].split('<br>')\n    for i in range(len(details)):\n        details[i] = details[i].strip()\n    details[-1] = change_date_format(details[-1])\n    return details\ndef get_temperature(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    temperature = []\n    reg_ex = r'[<div class=\"temperature\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        temperature = match_obj.group(1)\n    temperature = re.split(',', temperature)\n    temperature = temperature[0].split('<br>')\n    for i in range(len(temperature)):\n        temperature[i] = temperature[i].strip()\n    temperature[-1] = change_date_format(temperature[-1])\n    return temperature\ndef get_weather_details(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    details = []\n    reg_ex = r'[<h2>](.+)[<\\/h2>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        details = match_obj.group(1)\n    details = re.split(',', details)\n    details = details[0].split('<br>')\n    for i in range(len(details)):\n        details[i] = details[i].strip()\n    details[-1] = change_date_format(details[-1])\n    return details\ndef get_wind_details(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    details = []\n    reg_ex = r'[<div class=\"wind\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        details = match_obj.group(1)\n    details = re.split(',', details)\n    details = details[0].split('<br>')\n    for i in range(len(details)):\n        details[i] = details[i].strip()\n    details[-1] = change_date_format(details[-1])\n    return details\ndef get_probability(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    probability = []\n    reg_ex = r'[<div class=\"probability\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        probability = match_obj.group(1)\n    probability = re.split(',', probability)\n    probability = probability[0].split('<br>')\n    for i in range(len(probability)):\n        probability[i] = probability[i].strip()\n    probability[-1] = change_date_format(probability[-1])\n    return probability\ndef get_snowfall(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    snowfall = []\n    reg_ex = r'[<div class=\"snowfall\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        snowfall = match_obj.group(1)\n    snowfall = re.split(',', snowfall)\n    snowfall = snowfall[0].split('<br>')\n    for i in range(len(snowfall)):\n        snowfall[i] = snowfall[i].strip()\n    snowfall[-1] = change_date_format(snowfall[-1])\n    return snowfall\ndef get_rainfall(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    rainfall = []\n    reg_ex = r'[<div class=\"rainfall\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        rainfall = match_obj.group(1)\n    rainfall = re.split(',', rainfall)\n    rainfall = rainfall[0].split('<br>')\n    for i in range(len(rainfall)):\n        rainfall[i] = rainfall[i].strip()\n    rainfall[-1] = change_date_format(rainfall[-1])\n    return rainfall\ndef get_moisture(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    moisture = []\n    reg_ex = r'[<div class=\"moisture\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        moisture = match_obj.group(1)\n    moisture = re.split(',', moisture)\n    moisture = moisture[0].split('<br>')\n    for i in range(len(moisture)):\n        moisture[i] = moisture[i].strip()\n    moisture[-1] = change_date_format(moisture[-1])\n    return moisture\ndef get_rain_probability(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    y, m, d = dt.split('-')\n    return '{}-{}-{}'.format(d, m, y)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # print(dt)\n    # if dt.endswith('-'):\n    #     return dt\n    # else:\n    #     return dt+'-'+dt[3:5]+'-'+dt[0:2]\n    return dt[3:5]+'-'+dt[0:2]+'-'+dt[6:10]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    return '{0}-{1}-{2}'.format(dt[2],dt[1],dt[0])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace('-','')\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = re.compile(r'(\\d{4}-\\d{1,2}-\\d{1,2})')\n    match = re.findall(date_format, dt)\n    for i in match:\n        y,m,d = i.split('-')\n        print(d+'-'+m+'-'+y)\nchange_date_format('2019-11-25')\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.search(\"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\", dt):\n        return dt[6:8]+\"-\"+dt[4:6]+\"-\"+dt[0:4]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        match = re.search('(\\d{4})-(\\d{2})-(\\d{2})', dt)\n        dt = dt[:4]+'-'+dt[5:7]+'-'+dt[8:]\n        return dt\n    except:\n        return dt\n    \ndef calculate_age(born):\n    '''\n    Write a function that takes a date of yyyy-mm-dd format and returns the age of a person in years.\n    '''\n    try:\n        return 2015 - int(born[:4])\n    except:\n        return 0\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) / 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap / 2\n    return my_list\n    \nprint shell_sort([1,2,3,4,5])"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    '''\n    Hint:\n    Shell sort is one of the most efficient sorting algorithms, \n    and it was invented by Stephen Shell in 1980. \n    Each pass through the list, the algorithm selects a number of items, n, \n    and moves them to an appropriate location, i.e., to their correct position \n    in the sorted list. At each pass through the list, the algorithm selects \n    an element, x, from the unsorted list, and finds its correct location, i, \n    in the sorted list. If, for example, i=6, x=5, then the element that is \n    being moved to the correct position is the element that is already in \n    the correct position (i.e., in the sorted list), then the algorithm \n    continues with the next element. The entire process of sorting is done \n    until all the elements are in their correct positions.\n    '''\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_position in range(sublist_count):\n            gap_InsertionSort(my_list, start_position, sublist_count)\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # We will start with a gap of the length of the array.\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        \n        for i in range(gap, len(my_list)):\n            \n            temp = my_list[i]\n            \n            # For each position i, sort the sublist from position i - gap to i\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            my_list[j] = temp\n            \n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublistcount = len(my_list) // 2\n    while sublistcount > 0:\n        for start in range(sublistcount):\n            gap_insertion_sort(my_list, start, sublistcount)\n        print(\"After increments of size\", sublistcount, \"The list is\", my_list)\n        sublistcount = sublistcount // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n/2\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = ()\n    for i,j in zip(test_tup1, test_tup2):\n        res += (i & j, )\n    return res\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [(tup1[i] and tup2[i]) for i in range(len(tup1))]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (list(zip(test_tup1, test_tup2)), list(zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(list(tup1) + list(tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [x & y for x, y in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] + test_tup2[i]) / 2)\n    return tuple(result)\n    \nif __name__ == \"__main__\":\n    print(and_tuples((1,2), (3,4)))"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [i[0] and i[1] for i in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] & test_tup2[i],)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    return tuple(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 < 4 * a * c:\n        return None\n    elif b**2 == 4 * a * c:\n        return -b / (2 * a)\n    else:\n        x1 = (-b - math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n        x2 = (-b + math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n        return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Compute the directrix.\n    D = b*b - 4*a*c\n    if D < 0:\n        print(\"The parabola does not exist.\")\n    elif D == 0:\n        x = -b / (2 * a)\n        print(\"The parabola has two real roots:\")\n        print(\"    \", x)\n    else:\n        x1 = (-b + math.sqrt(D)) / (2 * a)\n        x2 = (-b - math.sqrt(D)) / (2 * a)\n        print(\"The parabola has two real roots:\")\n        print(\"    \", x1, \"or\", x2)\n    \n    return\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # your code here\n    x1 = -b / (2*a)\n    y1 = a * x1**2 + b * x1 + c\n    x2 = -b / (2*a)\n    y2 = a * x2**2 + b * x2 + c\n    print(x1)\n    print(y1)\n    print(x2)\n    print(y2)\n    return\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # get a-b and c-b\n    d = b**2 - 4*a*c\n    # if d is negative, return None\n    if d < 0:\n        return None\n    else:\n        # d is positive\n        return -b + d**0.5/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b**2 - 4*a*c) / (2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/2/a\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b / (2 * a)\n    return directrix\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    parabola = lambda x: a * x**2 + b * x + c\n    \n    directrix = fsolve(parabola, 0)\n    return directrix\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list(set(list1).intersection(list2))!= []\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    l1 = len(list1)\n    l2 = len(list2)\n    if l1 == 0 or l2 == 0:\n        return False\n    elif l1 > l2:\n        for i in range(l2):\n            if list1[i] in list2:\n                return True\n        return False\n    elif l1 < l2:\n        for i in range(l1):\n            if list2[i] in list1:\n                return True\n        return False\n    else:\n        for i in range(l1):\n            if list1[i] in list2:\n                return True\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = set(list1) & set(list2)\n    if len(common) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    dict1 = {}\n    dict2 = {}\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \nassert common_element([1, 2, 3], [2, 3, 4]) == True\nassert common_element([1, 2, 3], [2, 4]) == False\nassert common_element([1, 2, 3, 4], [2, 4]) == True\nassert common_element([1, 2, 3, 4, 5], [2, 4, 6]) == False\nassert common_element([], [2, 4, 6]) == False\nassert common_element([1], []) == False\nassert common_element([], []) == False"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height/2\n    a = base1 + base2\n    return (a*height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_area = (base1 + base2) * height/2.0\n    return trapezium_area\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(median_trapezium(3,4,5))\n    print(median_trapezium(10,15,25))\n    print(median_trapezium(5,12,7))\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1 + base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 <= base2:\n        return median_trapezium(base1,base2,height)\n    else:\n        return height * 1/2 * (base1 + base2)\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2*(base1+base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return.5 * base1 +.5 * base2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2.0\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    total = base1 + base2\n    length = total/2\n    return length\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2*(base1+base2)*height\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_array = []\n    for item in arr:\n        if item > number:\n            greater_array.append(item)\n    return greater_array\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # TODO: Write your code here\n    for i in arr:\n        if number > i:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    #check if the number is greater than the last element of the array\n    if arr[-1] <= number:\n        return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] < number:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        for i in arr:\n            if number > i:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return 1\n    return 0\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile(r'ab+')\n    return regex.search(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match('a*b', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.match(r'a(.*?)b',text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r\"a+b\", text)\n    if match:\n        return match.group()\n    return \"No match\"\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if 'a' in text:\n        if text.count('a') < 2:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches "
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    search_string = r\"a(.+?)b\"\n    match = re.search(search_string, text)\n    if match:\n        print(match.group(1))\n    else:\n        print(\"match not found\")\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(r'^a\\b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'ab*', text)\n    if result:\n        print(result.group())\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = (n%10)\n    return last\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        n = n * -1\n    elif n == 0 :\n        return 0\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n=str(n)\n    return int(n[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    num = n%10\n    return num\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n / 10)\n    \ndef isPalindrome(x) :\n    '''\n    Write a python function to check whether a given number is a palindrome number.\n    '''\n    n = x\n    t = n\n    f = 0\n    while n > 0 :\n        last = last_Digit(n)\n        if last!= t % 10 :\n            f = 1\n            break\n        n = n / 10\n        t = t % 10\n    if f == 0 :\n        return 1\n    else :\n        return 0\n    \ndef isPandigital(n) :\n    '''\n    Write a python function to check whether a given number is a pandigital number.\n    '''\n    s = ''.join(sorted(str(n)))\n    if s == '123456789' :\n        return 1\n    else :\n        return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n // 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    if n < 10 :\n        return n\n    else :\n        return n%10\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_negative=[]\n    for i in list1:\n        if i<0:\n            list_negative.append(i)\n    return list_negative\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l=[]\n    for i in list1:\n        if i < 0:\n            l.append(i)\n    return l\n    \ndef sum(list1):\n    '''\n    Write a python function to return the sum of a list.\n    '''\n    s=0\n    for i in list1:\n        s=s+i\n    return s\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    ans = []\n    for i in list1:\n        if i < 0:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = [item for item in list1 if item < 0]\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #Negative nos\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print(i)\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    ans = []\n    for num in list1:\n        if num < 0:\n            ans.append(num)\n    return ans\n    \ndef neg_nos1(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in range(0,len(str1)):\n        if i%2==0:\n            str2 = str2+str1[i]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for char in str1:\n        if ord(char)%2==1:\n            str1 = str1.replace(char,\"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for i in range(len(str1)):\n        if ord(str1[i]) % 2 == 1:\n            odd_chars.append(str1[i])\n    for i in range(len(odd_chars)):\n        str1 = str1.replace(odd_chars[i], '')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([str1[i] for i in range(0, len(str1), 2)])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x%2==0, str1))\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda ch: ch%2==0,str1))\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    lst=list(str1)\n    for i in range(len(lst)):\n        if i%2!=0:\n            lst.pop(i)\n    return \"\".join(lst)\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if (i%2 == 0):\n            new_str = new_str + str1[i]\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) <= 1:\n        return str1\n    else:\n        return str1[1:len(str1)]\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            lst.append(str1[i])\n    return \"\".join(lst)\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward_count = 0\n    backward_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] < test_list[j]:\n                forward_count += 1\n            if test_list[i] > test_list[j]:\n                backward_count += 1\n    return (forward_count,backward_count)\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) < 2:\n        return 0\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] <= test_list[j][0] and test_list[i][0] >= test_list[j][1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #f is forward, b is backward\n    f, b, r = 0, 0, 0\n    for a, b in test_list:\n        if a < b:\n            f += 1\n        elif b < a:\n            b += 1\n        else:\n            r += 1\n    return f, b, r\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def count(list, i, j):\n        return sum(list[i][k] == list[j][k] for k in range(len(list[0])))\n    def dfs(list, i, j):\n        if i == j:\n            return 0\n        return 1 + dfs(list, i, list[i][j]) + dfs(list, list[i][j], j)\n    return dfs(test_list, 0, len(test_list) - 1)\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (test_list[i] == test_list[j]) and (i > j):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward_pair_list = []\n    backward_pair_list = []\n    \n    for i in test_list:\n        for j in test_list:\n            if i[0] < j[0] and i[1] > j[1]:\n                forward_pair_list.append((i,j))\n            if i[0] > j[0] and i[1] < j[1]:\n                backward_pair_list.append((i,j))\n    return len(forward_pair_list) + len(backward_pair_list)\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    for item1 in test_list:\n        for item2 in test_list:\n            if item1 > item2 and item2 > item1:\n                total += 1\n    return total\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum(1 for a,b in combinations(test_list,2) if a[0]<b[0] and b[0]<a[0] and a[1]<b[1] and b[1]<a[1])\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #sort the list\n    test_list.sort()\n    #check the first and last elem\n    if test_list[0]!= (0,0):\n        return 0\n    elif test_list[-1]!= (n-1,n-1):\n        return 0\n    else:\n        #count the pairs\n        pairs = 0\n        #count the triplets\n        triplets = 0\n        for i in xrange(len(test_list)):\n            #check the first elem\n            if i == 0:\n                first = test_list[0]\n                first_opp = test_list[1]\n            else:\n                first = test_list[i]\n                first_opp = test_list[i-1]\n            if first[0] == first_opp[0]:\n                #check the second elem\n                if i == len(test_list)-1:\n                    second = test_list[-1]\n                    second_opp = test_list[-2]\n                else:\n                    second = test_list[i+1]\n                    second_opp = test_list[i]\n                if second[1] == second_opp[1]:\n                    #increase the count\n                    pairs += 1\n            else:\n                #check the second elem\n                if i == len(test_list)-1:\n                    second = test_list[-1]\n                    second_opp = test_list[-2]\n                else:\n                    second = test_list[i+1]\n                    second_opp = test_list[i]\n                if second[0] == second_opp[0]:\n                    #increase the count\n                    triplets += 1\n        return pairs*3+triplets\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    try:\n        return int(''.join(map(str, L)))\n    except ValueError:\n        print 'List contains non-int.'\n        return None\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    a=0\n    for n in range(0,len(L)):\n        a+=L[n]*10**n\n    return a\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    print(\"Input list:\", L)\n    res = \"\"\n    for x in L:\n        res = res + str(x)\n    print(\"Single int:\", res)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    \n    result = ''\n    for i in L:\n        result += str(i)\n    return int(result)\n    \n    '''\n    result = 0\n    for i in L:\n        result *= 10\n        result += i\n    return result\n    '''\n    \n    \ndef main():\n    print(multiple_to_single([1,3,5]))\n    print(multiple_to_single([0,5,10]))\n    print(multiple_to_single([3,0,9]))\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    if len(L) == 2:\n        return L[0]*10 + L[1]\n    if len(L) == 3:\n        return L[0]*100 + L[1]*10 + L[2]\n    if len(L) == 4:\n        return L[0]*1000 + L[1]*100 + L[2]*10 + L[3]\n    return 0\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    n = len(L)\n    num = ''\n    for i in range(n):\n        num += str(L[i])\n    return int(num)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return L[0]*10**len(L) + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n    \ndef single_to_multiple(num, multiple):\n    '''\n    Write a function to separate a single integer from multiple integers in a list and return them as a list.\n    '''\n    numbers = []\n    for i in range(0, len(num)):\n        numbers.append(num % 10)\n        num = num // 10\n    return numbers\n    \ndef single_to_multiple_v2(num, multiple):\n    '''\n    Write a function to separate a single integer from multiple integers in a list and return them as a list.\n    '''\n    numbers = []\n    for i in range(0, len(str(num))):\n        numbers.append(num % multiple)\n        num = num // multiple\n    return numbers\n    \ndef create_list(start, end):\n    '''\n    Write a function to create a list of the numbers in the range [start, end] inclusive.\n    '''\n    numbers = []\n    for i in range(start, end + 1):\n        numbers.append(i)\n    return numbers\n    \ndef create_list_v2(start, end):\n    '''\n    Write a function to create a list of the numbers in the range [start, end] inclusive.\n    '''\n    numbers = []\n    for i in range(start, end + 1):\n        numbers.append(i)\n    return [i for i in range(start, end + 1)]\n    \ndef check_all_same(L):\n    '''\n    Write a function to check if all the elements in a list are the same.\n    '''\n    return all(x == L[0] for x in L)\n    \ndef check_all_same_v2(L):\n    '''\n    Write a function to check if all the elements in a list are the same.\n    '''\n    return all(L[0] == x for x in L)\n    \ndef check_all_same_v3(L):\n    '''\n    Write a function to check if all the elements in a list are the same.\n    '''\n    if len(L) == 0:\n        return True\n    else:\n        return all(L[0] == x for x in L)\n        \ndef find_all_same(L):\n    '''\n    Write a function to check if all the elements in a list are the same.\n    '''\n    return all(x == L[0] for x in L)\n    \ndef find_all_same_v2(L):\n    '''\n    Write a function to check if all the elements in a list are the same.\n    '''\n    return [x == L[0] for x in L]\n    \ndef find_all_same_v3(L):\n    '''\n    Write a function to check if all the elements in a list are the same.\n    '''\n    if len(L) == 0:\n        return True\n    else:\n        return all(L[0] == x for x in L)\n    \ndef find_all_same_v4(L):\n    '''\n    Write a function to check if all the elements in a list are the same.\n    '''\n    if len(L) == 0:\n        return True\n    else:\n        return all(L[0] == x for x in L)\n    \ndef sum_all_same(L):\n    '''\n    Write a function to check if all the elements in a list are the same.\n    '''\n    return sum(L) == L[0]\n    \ndef sum_all_same_v2(L):\n    '''\n    Write a function to check if all the elements in a list are the same.\n    '''\n    return sum(L) == 0\n    \ndef sum_all_same_v3(L):\n    '''\n    Write a function to check if all the elements in a list are the same.\n    '''\n    if len(L) == 0:\n        return True\n    else:\n        return sum(L) == L[0]\n    \ndef sum_all_same_v4(L):\n    '''\n    Write a function to check if all the elements in a list are the same.\n    '''\n    if len(L) == 0:\n        return True\n    else:\n        return sum(L) == 0\n    \ndef remove_duplicate_v1(L):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(L))\n    \ndef remove_duplicate_v2(L):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(L))\n    \ndef remove_duplicate_v3(L):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    if len(L) == 0:\n        return L\n    else:\n        L_without_dup = []\n        for i in range(0, len(L)):\n            if L[i] not in L_without_dup:\n                L_without_dup.append(L[i])\n        return L_without_dup\n    \ndef remove_duplicate_v4(L):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    if len(L) == 0:\n        return L\n    else:\n        return list(set(L))\n    \ndef find_min(L):\n    '''\n    Write a function to find the minimum element in a list.\n    '''\n    if len(L) == 0:\n        return None\n    else:\n        return min(L)\n    \ndef find_min_v2(L):\n    '''\n    Write a function to find the minimum element in a list.\n    '''\n    if len(L) == 0:\n        return None\n    else:\n        return min(L)\n    \ndef find_min_v3(L):\n    '''\n    Write a function to find the minimum element in a list.\n    '''\n    if len(L) == 0:\n        return None\n    else:\n        return min(L)\n    \ndef find_min_v4(L):\n    '''\n    Write a function to find the minimum element in a list.\n    '''\n    if len(L) == 0:\n        return None\n    else:\n        return min(L)\n    \ndef find_max(L):\n    '''\n    Write a function to find the maximum element in a list.\n    '''\n    if len(L) == 0:\n        return None\n    else:\n        return max(L)\n    \ndef find_max_v2(L):\n    '''\n    Write a function to find the maximum element in a list.\n    '''\n    if len(L) == 0:\n        return None\n    else:\n        return max(L)\n    \ndef find_max_v3(L):\n    '''\n    Write a function to find the maximum element in a list.\n    '''\n    if len(L) == 0:\n        return None\n    else:\n        return max(L)\n    \ndef find_max_v4(L):\n    '''\n    Write a function to find the maximum element in a list.\n    '''\n    if len(L) == 0:\n        return None\n    else:\n        return max(L)\n    \ndef remove_element(L, x):\n    '''\n    Write a function to remove all elements from a list that are equal to a given element.\n    '''\n    return [i for i in L if i!= x]\n    \ndef remove_element_v2(L, x):\n    '''\n    Write a function to remove all elements from a list that are equal to a given element.\n    '''\n    return [i for i in L if i!= x]\n    \ndef remove_element_v3(L, x):\n    '''\n    Write a function to remove all elements from a list that are equal to a given element.\n    '''\n    if len(L) == 0:\n        return L\n    else:\n        return [i for i in L if i!= x]\n    \ndef remove_element_v4(L, x):\n    '''\n    Write a function to remove all elements from a list that are equal to a given element.\n    '"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = re.sub(r'[^\\w\\s]','',text)\n    words = sentence.lower().split()\n    adverb_positions = []\n    for word in words:\n        if word in ['was','were','have']:\n            adverb_positions.append([words.index(word),word])\n            break\n    if len(adverb_positions) > 0:\n        return adverb_positions\n    else:\n        return None\ndef count_adverbs(text):\n    '''\n    Write a function to count the number of adverbs used in a sentence.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    count = 0\n    for word in words:\n        if word in ['was','were','have']:\n            count += 1\n    return count\ndef find_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    sentence = re.sub(r'[^\\w\\s]','',text)\n    words = sentence.lower().split()\n    adjective_positions = []\n    for word in words:\n        if word in ['is','am','are','was','were','has','have']:\n            adjective_positions.append([words.index(word),word])\n            break\n    if len(adjective_positions) > 0:\n        return adjective_positions\n    else:\n        return None\ndef count_adjectives(text):\n    '''\n    Write a function to count the number of adjectives used in a sentence.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    count = 0\n    for word in words:\n        if word in ['is','am','are','was','were','has','have']:\n            count += 1\n    return count\ndef extract_content_words(text):\n    '''\n    Write a function to extract all the content words from a given text.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    content_words = []\n    for word in words:\n        if word in ['is','am','are','was','were','has','have']:\n            content_words.append(word)\n    return content_words\ndef extract_content_words_with_positions(text):\n    '''\n    Write a function to extract all the content words and their positions from a given text.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    content_words = []\n    for word in words:\n        if word in ['is','am','are','was','were','has','have']:\n            content_words.append([words.index(word),word])\n    return content_words\ndef find_content_words_positions(text):\n    '''\n    Write a function to find the positions of the first occurrence of content words in a given text.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    content_words = []\n    for word in words:\n        if word in ['is','am','are','was','were','has','have']:\n            content_words.append([words.index(word),word])\n            break\n    if len(content_words) > 0:\n        return content_words\n    else:\n        return None\ndef find_content_words_positions_with_case(text):\n    '''\n    Write a function to find the positions of the first occurrence of content words in a given text.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    content_words = []\n    for word in words:\n        if word in ['is','am','are','was','were','has','have']:\n            content_words.append([words.index(word),word])\n            break\n    if len(content_words) > 0:\n        return content_words\n    else:\n        return None\ndef find_content_words(text):\n    '''\n    Write a function to find the first occurrence of content words in a given text.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    content_words = []\n    for word in words:\n        if word in ['is','am','are','was','were','has','have']:\n            content_words.append(word)\n            break\n    if len(content_words) > 0:\n        return content_words\n    else:\n        return None\ndef find_content_words_with_positions(text):\n    '''\n    Write a function to find the positions of the first occurrence of content words in a given text.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    content_words = []\n    for word in words:\n        if word in ['is','am','are','was','were','has','have']:\n            content_words.append([words.index(word),word])\n            break\n    if len(content_words) > 0:\n        return content_words\n    else:\n        return None\ndef extract_question_words(text):\n    '''\n    Write a function to extract all the question words from a given text.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    question_words = []\n    for word in words:\n        if word in ['who','what','when','where','which','how']:\n            question_words.append(word)\n    return question_words\ndef extract_question_words_with_positions(text):\n    '''\n    Write a function to extract all the question words and their positions from a given text.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    question_words = []\n    for word in words:\n        if word in ['who','what','when','where','which','how']:\n            question_words.append([words.index(word),word])\n    return question_words\ndef find_question_words_positions(text):\n    '''\n    Write a function to find the positions of the first occurrence of question words in a given text.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    question_words = []\n    for word in words:\n        if word in ['who','what','when','where','which','how']:\n            question_words.append([words.index(word),word])\n            break\n    if len(question_words) > 0:\n        return question_words\n    else:\n        return None\ndef find_question_words_positions_with_case(text):\n    '''\n    Write a function to find the positions of the first occurrence of question words in a given text.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    question_words = []\n    for word in words:\n        if word in ['who','what','when','where','which','how']:\n            question_words.append([words.index(word),word])\n            break\n    if len(question_words) > 0:\n        return question_words\n    else:\n        return None\ndef extract_question_words_positions(text):\n    '''\n    Write a function to extract all the question words and their positions from a given text.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.lower().split()\n    question_words = []\n    for word in words:\n        if word in ['who','what','when','where','which','how']:\n            question_words.append([words.index(word),word])\n            break\n    if len(questio"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    start=0\n    end=0\n    i=0\n    if text.find(',')!= -1:\n        text=text.replace(',','')\n    if text.find('-')!= -1:\n        text=text.replace('-','')\n    if text.find('?')!= -1:\n        text=text.replace('?','')\n    if text.find('!')!= -1:\n        text=text.replace('!','')\n    if text.find('.')!= -1:\n        text=text.replace('.','')\n    text=text.lower()\n    for i in range(0,len(text)):\n        if text[i] in 'aeiou':\n            start=i\n            break\n    if start == 0:\n        return [0]\n    for i in range(start,len(text)):\n        if text[i] in 'aeiou':\n            end=i\n            break\n    if end == 0:\n        return [start]\n    return [start, end]\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    position_of_adverb = []\n    words = text.split()\n    for word in words:\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"er\") or word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"ed\") or word.endswith(\"ing\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"er\") or word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"ed\") or word.endswith(\"ing\"):\n            word = word[:-2]\n        if word.endswith(\"ed\") or word.endswith(\"ing\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\") or word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\") or word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith("
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r\"(?<!\\w)(?:(?:can|have|has|may|might|must|will|should|were|will|will\\.)+)(?:(?:t|not|now)\\.)+(?=\\w+)\"\n    matches = re.findall(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverbs.append(match)\n    return adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    \n    index = text.find('adverb')\n    if index!= -1:\n        return index\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    start = re.search('\\w+', text)\n    end = re.search('\\w+', text[::-1])\n    if start and end:\n        return start.end() + 1, end.start() + 1\n    return None, None\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'(?<=\\s)[\\w]+$')\n    match = re.findall(pattern, text)\n    return match\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return re.findall(r\"\\w+\\'?\\w+\", text)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regexp = re.compile(r'(\\w+)(\\s)(.*?)(\\s)(\\w+)(\\s)(.*)')\n    text = regexp.search(text).group(7)\n    adverb_pos_list = []\n    for index, word in enumerate(text.split(' ')):\n        if word.lower() in ['now', 'then', 'i', 'he','she', 'they', 'it', 'they', 'its', 'it', 'they', 'he','she', 'him', 'them','my', 'your', 'his', 'hers','mine', 'yours', 'ours','my', 'your', 'his', 'hers','mine', 'yours', 'ours', 'their', 'their', 'it', 'its', 'theirs', 'their', 'its', 'the','she', 'he', 'they','she', 'he', 'they', 'it', 'he','she', 'they', 'them','me', 'him', 'her', 'us', 'you', 'us', 'them','my', 'your', 'him', 'her', 'us', 'you', 'us', 'them','my', 'your', 'him', 'her', 'us', 'you', 'us', 'them','my', 'your', 'him', 'her', 'us', 'you', 'us', 'them','my', 'your', 'him', 'her', 'us', 'you', 'us', 'them','my', 'your', 'him', 'her', 'us', 'you', 'us', 'them','my', 'your', 'him', 'her', 'us', 'you', 'us', 'them','my', 'your', 'him', 'her', 'us', 'you', 'us', 'them']:\n            adverb_pos_list.append(index)\n    return adverb_pos_list\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    position = {}\n    for i in range(0,len(text)):\n        if re.match(r'[a-z]+',text[i]):\n            position[text[i]] = i\n    return position\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l < 1:\n        raise ValueError('size should be positive and non-zero')\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = l**2\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Write your code here\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return float(count)/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    #If array is empty, it is not possible to find the ratio\n    if len(nums) == 0:\n        return 0\n    \n    #Calculate the sum of the array\n    total = 0\n    for num in nums:\n        total += num\n    \n    #The final count is the ratio of positive numbers to the sum of all numbers\n    #E.g. if the array was [1,2,-5,7,-8,9,0] then the ratio would be 6/9\n    final_count = 0\n    for num in nums:\n        if num > 0:\n            final_count += 1\n    \n    return final_count / total\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums: return 0\n    if len(nums) == 1: return nums[0]\n    return nums.count(1)/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos, neg = 0, 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n        else:\n            neg += 1\n    return float(pos) / (pos + neg)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for x in nums:\n        if x > 0:\n            pos_count += 1\n        elif x < 0:\n            neg_count += 1\n    return (pos_count,neg_count)\ndef pair_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pair_count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1,n):\n            if nums[i] + nums[j] == 0:\n                pair_count += 1\n    return pair_count\ndef rotate_letter(c, n):\n    '''\n    Write a function to rotate a string\n    '''\n    if c.isalpha():\n        if ord(c) + n > ord('z'):\n            return chr(ord(c) + n - ord('z') + ord('a') - 1)\n        else:\n            return chr(ord(c) + n)\n    else:\n        return c\ndef rotate_letter_array(c, n):\n    '''\n    Write a function to rotate a string\n    '''\n    if c.isalpha():\n        if ord(c) + n > ord('z'):\n            return array('c',[chr(ord(c) + n - ord('z') + ord('a') - 1)] )\n        else:\n            return array('c',[chr(ord(c) + n)])\n    else:\n        return c\ndef reverse_words(words):\n    '''\n    Write a function to reverse words in a string\n    '''\n    return''.join(reversed(words.split()))\ndef fibonacci(n):\n    '''\n    Write a function that takes a number n and returns the nth Fibonacci number.\n    '''\n    if n < 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef fibonacci_array(n):\n    '''\n    Write a function that takes a number n and returns the nth Fibonacci number.\n    '''\n    array = array('i',[0,1])\n    for i in range(2,n):\n        array.append(array[i-1] + array[i-2])\n    return array[n-1]\ndef sum_of_squares(nums):\n    '''\n    Write a function that takes an array of integers and returns the sum of the square of each number\n    '''\n    n = len(nums)\n    sum = 0\n    for i in nums:\n        sum += i * i\n    return sum\ndef rotate_matrix(matrix):\n    '''\n    Write a function that takes an array of integers and returns the array after rotation (clockwise)\n    '''\n    n = len(matrix[0])\n    for i in range(n):\n        for j in range(i,n):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[j][i]\n            matrix[j][i] = temp\n    for i in range(n):\n        matrix[i].reverse()\n    return matrix\ndef rotate_matrix_array(matrix):\n    '''\n    Write a function that takes an array of integers and returns the array after rotation (clockwise)\n    '''\n    n = len(matrix[0])\n    for i in range(n):\n        for j in range(i,n):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[j][i]\n            matrix[j][i] = temp\n    return matrix\ndef is_palindrome(s):\n    '''\n    Write a function that takes a string s and returns true if it is a palindrome.\n    '''\n    l = len(s)\n    for i in range(l/2):\n        if s[i]!= s[l-i-1]:\n            return False\n    return True\ndef is_palindrome_array(s):\n    '''\n    Write a function that takes a string s and returns true if it is a palindrome.\n    '''\n    n = len(s)\n    for i in range(n/2):\n        if s[i]!= s[n-1-i]:\n            return False\n    return True\ndef is_palindrome_recursive(s):\n    '''\n    Write a function that takes a string s and returns true if it is a palindrome.\n    '''\n    if s == '':\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_palindrome_recursive(s[1:-1])\ndef is_palindrome_recursive_array(s):\n    '''\n    Write a function that takes a string s and returns true if it is a palindrome.\n    '''\n    n = len(s)\n    if s == '':\n        return True\n    elif n == 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_palindrome_recursive_array(s[1:-1])\ndef is_rotated_string(s1, s2):\n    '''\n    Write a function that takes two strings s1 and s2 and returns true if s2 is a rotated version of s1\n    '''\n    if len(s1)!= len(s2):\n        return False\n    l = len(s1)\n    for i in range(l):\n        if s1[i]!= s2[(l-1)-i]:\n            return False\n    return True\ndef is_rotated_string_array(s1, s2):\n    '''\n    Write a function that takes two strings s1 and s2 and returns true if s2 is a rotated version of s1\n    '''\n    n = len(s1)\n    for i in range(n):\n        if s1[i]!= s2[(n-1)-i]:\n            return False\n    return True\ndef reverse_vowels(s):\n    '''\n    Write a function that takes a string s and returns the string with all the vowels reversed.\n    '''\n    vowels = ['a','e','i','o','u']\n    string = ''\n    for i in s:\n        if i.lower() in vowels:\n            string += i.lower()\n    for i in s:\n        if i.isalpha():\n            string += i\n    return string\ndef reverse_vowels_array(s):\n    '''\n    Write a function that takes a string s and returns the string with all the vowels reversed.\n    '''\n    vowels = ['a','e','i','o','u']\n    array = array('c')\n    for i in s:\n        if i.lower() in vowels:\n            array.append(i.lower())\n    array.reverse()\n    string = ''\n    for i in array:\n        string += i\n    return string\ndef count_substring(string, sub_string):\n    '''\n    Write a function that takes a string and a substring and returns the number of times the substring occurs in the string.\n    '''\n    l = len(sub_string)\n    count = 0\n    for i in range(len(string)-l+1):\n        if string[i:i+l] == sub_string:\n            count += 1\n    return count\ndef count_substring_array(string, sub_string):\n    '''\n    Write a function that takes a string and a substring and returns the number of times the substring occurs in the string.\n    '''\n    n = len(string)\n    m = len(sub_string)\n    array = array('i',[0]*(n+1))\n    for i in range(1,n+1):\n        for j in range(m):\n            if (i-j) < 0:\n                break\n            elif string[i-j]!= sub_string[j]:\n                break\n            if j == m-1:\n                array[i] += 1\n    return array[n]\ndef minimum_char_replace(strin"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    p = 0\n    for x in nums:\n        if x > 0:\n            p += 1\n    return float(p) / float(len(nums))\ndef interquartile_range(nums):\n    '''\n    Write a function that takes an array of integers as input and returns the difference between the third highest and the third lowest number.\n    '''\n    nums.sort()\n    return nums[len(nums)-3] - nums[1]\ndef missing_positive(nums):\n    '''\n    Write a function that takes an array of numbers and returns the number of missing positive numbers.\n    '''\n    n = 0\n    for x in nums:\n        if x > 0 and not x == 1:\n            n += 1\n    return n\ndef median(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns the median of the array\n    '''\n    nums.sort()\n    return nums[int(len(nums)/2)]\ndef average(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns the average of the array\n    '''\n    return sum(nums) / float(len(nums))\ndef binary_search(nums, target):\n    '''\n    Write a function that takes an array of numbers as input and returns the index of the target number if it exists. Otherwise return -1.\n    '''\n    nums.sort()\n    if len(nums) == 1:\n        if nums[0] == target:\n            return 0\n        else:\n            return -1\n    else:\n        return binary_search(nums[int(len(nums)/2):], target) if target > nums[0] else binary_search(nums[:int(len(nums)/2)], target)\ndef first_greater(nums, target):\n    '''\n    Write a function that takes an array of numbers as input and returns the first index of the number greater than the target. If the number is not greater than the target, return -1\n    '''\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] > target:\n            return i\n    return -1\ndef is_unique(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns true if all the numbers are unique and false otherwise.\n    '''\n    nums.sort()\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return False\n    return True\ndef max_product(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns the maximum product of any three consecutive elements in the array.\n    '''\n    nums.sort()\n    l = len(nums)\n    max_prod = 1\n    for i in range(l-2):\n        for j in range(i+1, l-1):\n            for k in range(j+1, l):\n                if nums[i]*nums[j]*nums[k] > max_prod:\n                    max_prod = nums[i]*nums[j]*nums[k]\n    return max_prod\ndef max_consecutive(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns the maximum sum of consecutive elements in the array.\n    '''\n    nums.sort()\n    max_sum = 0\n    for i in range(len(nums)-1):\n        if nums[i] + nums[i+1] > nums[i+1]:\n            max_sum += nums[i] + nums[i+1]\n        else:\n            max_sum += nums[i+1]\n    return max_sum\ndef first_and_last(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns the sum of the first element and the last element.\n    '''\n    return nums[0] + nums[-1]\ndef max_count(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns the number of times that the maximum element appears in the array.\n    '''\n    nums.sort()\n    m = max(nums)\n    return nums.count(m)\ndef first_and_last_rec(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns the sum of the first element and the last element.\n    '''\n    return nums[0] + nums[-1]\ndef smallest_substring(s):\n    '''\n    Write a function that takes an array of lowercase letters as input and returns the smallest substring containing all the letters in the array.\n    '''\n    l = len(s)\n    if l == 0:\n        return \"\"\n    else:\n        l_o = l_c = 0\n        for i in range(l):\n            j = i+1\n            while j <= l:\n                if s[i:j] in s[l_o:l_c]:\n                    l_c = j\n                else:\n                    l_o = j\n                j += 1\n        return s[l_o:l_c]\ndef longest_common_prefix(s):\n    '''\n    Write a function that takes an array of strings as input and returns the longest common prefix of the array.\n    '''\n    if len(s) == 1:\n        return s[0]\n    else:\n        l = len(s[0])\n        for x in s[1:]:\n            while l > 0 and x[:l]!= s[0][:l]:\n                l -= 1\n        return s[0][:l]\ndef gcd(a, b):\n    '''\n    Write a function that takes two numbers as input and returns their greatest common divisor.\n    '''\n    while b!= 0:\n        a, b = b, a % b\n    return a\ndef has_duplicates(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns true if there is a duplicate number in the array and false otherwise.\n    '''\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            return True\n    return False\ndef contains_cycle(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns true if there is a cycle in the array and false otherwise.\n    '''\n    nums.sort()\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\ndef is_palindrome(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns true if the array is a palindrome and false otherwise.\n    '''\n    nums.sort()\n    l = len(nums)\n    for i in range(l/2):\n        if nums[i]!= nums[l-i-1]:\n            return False\n    return True\ndef palindrome_sentence(s):\n    '''\n    Write a function that takes an array of numbers as input and returns true if the array is a palindrome and false otherwise.\n    '''\n    s.sort()\n    if s[0]!= s[-1]:\n        return False\n    else:\n        return palindrome_sentence(s[1:-1])\ndef find_duplicates(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns an array of the indices of the duplicate elements in the array.\n    '''\n    nums.sort()\n    l = len(nums)\n    i = 0\n    dup_index = []\n    while i < l-1:\n        if nums[i] == nums[i+1]:\n            dup_index.append(i)\n            i += 2\n        else:\n            i += 1\n    return dup_index\ndef find_largest_number(nums):\n    '''\n    Write a function that takes an array of numbers as input and returns the largest number in the array.\n    '''\n    nums.sort()"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(sum(nums))/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for i in nums:\n        if i > 0:\n            pos_count += 1\n        elif i < 0:\n            neg_count += 1\n    return pos_count/(pos_count + neg_count)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(sum(nums)) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\ndef greatest_common_divisor(m, n):\n    '''\n    Write a function to find the greatest common divisor of two integers.\n    '''\n    while m%n!= 0:\n        oldm = m\n        oldn = n\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max_neg:\n                max_neg = list1[i]\n    return max_neg\n    "
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max1 = -100000000\n    for i in range(len(list1)): \n        if list1[i] < max1 and list1[i] > -100000000: \n            max1 = list1[i]\n    if max1 == -100000000:\n        return None\n    else:\n        return max1\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #list1 = [-5,4,-3,2,-1,-2,4,-5]\n    #list1 = [-4,2,5,1,0,-2,2,4,6,8,10]\n    list1.sort()\n    for i in range(0,len(list1)):\n        if list1[i]<0:\n            return list1[i]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = 0\n    for i in list1:\n        if i < 0 and i > largest_neg:\n            largest_neg = i\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_negative = -999999999\n    for i in list1:\n        if i < max_negative:\n            max_negative = i\n    return max_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1 == []:\n        return 0\n    return min(list1)\n    \ndef sort_list(list1):\n    '''\n    Write a python function to sort the list in ascending order.\n    '''\n    if list1 == []:\n        return list1\n    return sorted(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for num in list1:\n        if num < max_neg and num!= 0:\n            max_neg = num\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1[0] < 0:\n        return list1[0]\n    else:\n        for i in range(1,len(list1)):\n            if list1[i] < 0 and list1[i] > list1[0]:\n                return list1[i]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = filter(lambda x: x < 0, list1)\n    if len(list1) > 0:\n        list1.sort()\n        return list1[0]\n    else:\n        return None\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max([i for i in list1 if i < 0])\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for t in test_list:\n        if len(t) == K:\n            trimmed_list.append(t)\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(a, b[:K]) for a, b in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][K:]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][0:K])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(i[0], i[1][:K]) for i in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    res = []\n    for tup in test_list:\n        if len(tup) >= K:\n            res.append(tup[:K])\n        else:\n            res.append(tup)\n    return res\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][K:]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in xrange(len(test_list)):\n        tuple_len = len(test_list[i])\n        if tuple_len > K:\n            test_list[i] = test_list[i][0:K]\n        elif tuple_len < K:\n            num_zero = K - tuple_len\n            for j in range(num_zero):\n                test_list[i].append(0)\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(i[0], i[1][K:]) for i in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x, y) for (x, y) in test_list if len(y) > K]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    ans = []\n    for i in xrange(len(test_tup1)):\n        ans.append(test_tup1[i] * test_tup2[i])\n    return tuple(ans)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i*j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([x*y for x,y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Invalid Input'\n    return_val = []\n    for i in range(len(test_tup1)):\n        return_val.append(test_tup1[i] * test_tup2[i])\n    return tuple(return_val)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        test_tup = [tup1*tup2 for tup1, tup2 in zip(test_tup1, test_tup2)]\n        return test_tup\n    else:\n        return 'Length is not equal'\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    answer = ()\n    for i in range(len(test_tup1)):\n        answer += (test_tup1[i] * test_tup2[i],)\n    return answer\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    new_tup = []\n    for item1 in test_tup1:\n        for item2 in test_tup2:\n            new_tup.append(item1*item2)\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for idx, val in enumerate(test_tup1):\n        test_tup1[idx] = test_tup1[idx] * test_tup2[idx]\n    return test_tup1\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    def get_index(test_tup, index):\n        return test_tup[index]\n    \n    return tuple(get_index(test_tup1, i) * get_index(test_tup2, i) for i in range(len(test_tup1)))\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i*j for i,j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup)[x]\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dict = {} \n    for i in lst: \n        if i in dict: \n            dict[i] += 1\n        else: \n            dict[i] = 1 \n    return dict \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup)[lst]\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum(1 for elem in lst if (elem == tup))\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # tup_d = Counter(tup)\n    # tup_l = Counter(lst)\n    # tup_d.subtract(tup_l)\n    # print tup_d\n    return Counter(tup) & Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum(el == tup for el in lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum((lst.count(x) for x in tup))\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) & Counter(lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    return tup.count(lst)\n    \ndef isAnagram(s1, s2):\n    '''\n    Write a python function to check if two strings are anagram or not.\n    '''\n    \n    if len(s1)!= len(s2):\n        return 0\n    else:\n        return sorted(s1) == sorted(s2)\n    \ndef maxProduct(lst):\n    '''\n    Write a python function to find maximum product in a list.\n    '''\n    \n    return max([x * y for x, y in lst])\n    \ndef maxOddEven(lst):\n    '''\n    Write a python function to find maximum odd/even in a list.\n    '''\n    \n    odd = 0\n    even = 0\n    for i in lst:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    \n    if odd > even:\n        return odd\n    else:\n        return even\n    \ndef maxThree(lst):\n    '''\n    Write a python function to find maximum 3 elements in a list.\n    '''\n    \n    return max([lst[i] for i in range(3)])\n    \ndef maxThreeInRow(lst):\n    '''\n    Write a python function to find maximum 3 elements in a list in a row.\n    '''\n    \n    return max([lst[i] for i in range(3)])\n    \ndef maxThreeInRow(lst):\n    '''\n    Write a python function to find maximum 3 elements in a list in a row.\n    '''\n    \n    return max([lst[i] for i in range(3)])\n    \ndef sortList(lst):\n    '''\n    Write a python function to sort a list.\n    '''\n    \n    return sorted(lst)\n    \ndef findMin(lst):\n    '''\n    Write a python function to find minimum element in a list.\n    '''\n    \n    return min(lst)\n    \ndef findMax(lst):\n    '''\n    Write a python function to find maximum element in a list.\n    '''\n    \n    return max(lst)\n    \ndef maxLength(lst):\n    '''\n    Write a python function to find max length of a list.\n    '''\n    \n    return max([len(i) for i in lst])\n    \ndef minLength(lst):\n    '''\n    Write a python function to find min length of a list.\n    '''\n    \n    return min([len(i) for i in lst])\n    \ndef isPrime(num):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    \n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return 0\n    else:\n        return 0\n    return 1\n    \ndef isPrime_2(num):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    \n    if num > 1:\n        if num == 2:\n            return 1\n        if num % 2 == 0:\n            return 0\n        for i in range(3, int(num ** (1/2))+1, 2):\n            if num % i == 0:\n                return 0\n    else:\n        return 0\n    return 1\n    \ndef revString(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    \n    return s[::-1]\n    \ndef palindrome(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    \n    return s == revString(s)\n    \ndef maxOccurrence(lst, value):\n    '''\n    Write a python function to find maximum occurence of an element in a list.\n    '''\n    \n    return lst.count(value)\n    \ndef make_list(lst):\n    '''\n    Write a python function to convert a string to a list of characters.\n    '''\n    \n    return list(lst)\n    \ndef make_string(lst):\n    '''\n    Write a python function to convert a list of characters to a string.\n    '''\n    \n    return ''.join(lst)\n    \ndef remove_duplicate(lst):\n    '''\n    Write a python function to remove duplicate elements of a list.\n    '''\n    \n    return list(set(lst))\n    \ndef find_occurrence(lst, value):\n    '''\n    Write a python function to find number of occurances of an element in a list.\n    '''\n    \n    return lst.count(value)\n    \ndef get_median(lst):\n    '''\n    Write a python function to find median of a list.\n    '''\n    \n    return sum(lst)/len(lst)\n    \ndef get_mode(lst):\n    '''\n    Write a python function to find mode of a list.\n    '''\n    \n    return max(Counter(lst).items(), key=lambda x: x[1])[0]\n    \ndef get_difference(lst, num):\n    '''\n    Write a python function to find difference of consecutive elements in a list.\n    '''\n    \n    return [lst[i] - lst[i-1] for i in range(1, len(lst))]\n    \ndef get_power(lst):\n    '''\n    Write a python function to find power of elements of a list.\n    '''\n    \n    return [x**2 for x in lst]\n    \ndef get_prod(lst):\n    '''\n    Write a python function to find product of elements of a list.\n    '''\n    \n    return [x*y for x,y in lst]\n    \ndef get_sum(lst):\n    '''\n    Write a python function to find sum of elements of a list.\n    '''\n    \n    return sum(lst)\n    \ndef get_mean(lst):\n    '''\n    Write a python function to find mean of elements of a list.\n    '''\n    \n    return sum(lst)/len(lst)\n    \ndef get_median(lst):\n    '''\n    Write a python function to find median of elements of a list.\n    '''\n    \n    return sum(lst)/len(lst)\n    \ndef get_median(lst):\n    '''\n    Write a python function to find median of elements of a list.\n    '''\n    \n    return sum(lst)/len(lst)\n    \ndef get_mode(lst):\n    '''\n    Write a python function to find mode of elements of a list.\n    '''\n    \n    return max(Counter(lst).items(), key=lambda x: x[1])[0]\n    \ndef get_difference(lst, num):\n    '''\n    Write a python function to find difference of consecutive elements in a list.\n    '''\n    \n    return [lst[i] - lst[i-1] for i in range(1, len(lst))]\n    \ndef get_power(lst):\n    '''\n    Write a python function to find power of elements of a list.\n    '''\n    \n    return [x**2 for x in lst]\n    \ndef get_prod(lst):\n    '''\n    Write a python function to find product of elements of a list.\n    '''\n    \n    return [x*y for x,y in lst]\n    \ndef get_sum(lst):\n    '''\n    Write a python function to find sum of elements of a list.\n    '''\n    \n    return sum(lst)\n    \ndef get_mean(lst):\n    '''\n    Write a python function to find mean of elements of a list.\n    '''\n    \n    return sum(lst)/len(lst)\n    \ndef get_mode(lst):\n    '''\n    Write a python function to find mode of elements of a list.\n    '''\n    \n    return max(Counter(lst).item"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for j in lst: \n        if j in tup: \n            cnt = cnt + 1\n    return cnt \ndef get_Ascending(lst): \n    '''\n    Write a python function to get the list of integers that are in ascending order.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\ndef compute_M_Seq(lst):\n    '''\n    Write a python function to compute M_Seq and return a tuple of (M_Seq, len_M_Seq).\n    '''\n    max_m = 0\n    m_seq = []\n    for i in lst:\n        if lst.count(i)>max_m:\n            max_m = lst.count(i)\n            m_seq = [i]\n        elif lst.count(i) == max_m:\n            m_seq.append(i)\n    return (max_m, len(m_seq))\ndef comput_LCS_Length(x,y):\n    '''\n    Write a python function to compute the length of the longest common substring between two strings\n    and return the length.\n    '''\n    len_x = len(x)\n    len_y = len(y)\n    dp_table = [[0 for i in range(len_y+1)] for j in range(len_x+1)]\n    for i in range(1,len_x+1):\n        for j in range(1,len_y+1):\n            if x[i-1] == y[j-1]:\n                dp_table[i][j] = 1 + dp_table[i-1][j-1]\n            else:\n                dp_table[i][j] = 0\n    return dp_table[-1][-1]\ndef comput_LCS_String(x,y):\n    '''\n    Write a python function to compute the length of the longest common substring between two strings\n    and return the string.\n    '''\n    len_x = len(x)\n    len_y = len(y)\n    dp_table = [[0 for i in range(len_y+1)] for j in range(len_x+1)]\n    for i in range(1,len_x+1):\n        for j in range(1,len_y+1):\n            if x[i-1] == y[j-1]:\n                dp_table[i][j] = 1 + dp_table[i-1][j-1]\n            else:\n                dp_table[i][j] = max(dp_table[i-1][j],dp_table[i][j-1])\n    return x[dp_table[-1][-1]:]\ndef comput_LCS_Length_Table(x,y,table):\n    '''\n    Write a python function to compute the length of the longest common substring between two strings\n    and return the length.\n    '''\n    len_x = len(x)\n    len_y = len(y)\n    dp_table = [[0 for i in range(len_y+1)] for j in range(len_x+1)]\n    for i in range(1,len_x+1):\n        for j in range(1,len_y+1):\n            if x[i-1] == y[j-1]:\n                dp_table[i][j] = 1 + dp_table[i-1][j-1]\n            else:\n                dp_table[i][j] = max(dp_table[i-1][j],dp_table[i][j-1])\n    return dp_table[-1][-1]\ndef comput_LCS_String_Table(x,y,table):\n    '''\n    Write a python function to compute the length of the longest common substring between two strings\n    and return the string.\n    '''\n    len_x = len(x)\n    len_y = len(y)\n    dp_table = [[0 for i in range(len_y+1)] for j in range(len_x+1)]\n    for i in range(1,len_x+1):\n        for j in range(1,len_y+1):\n            if x[i-1] == y[j-1]:\n                dp_table[i][j] = 1 + dp_table[i-1][j-1]\n            else:\n                dp_table[i][j] = max(dp_table[i-1][j],dp_table[i][j-1])\n    return x[dp_table[-1][-1]:]\ndef comput_LCS_String_table(x,y):\n    '''\n    Write a python function to compute the length of the longest common substring between two strings\n    and return the string.\n    '''\n    len_x = len(x)\n    len_y = len(y)\n    dp_table = [[0 for i in range(len_y+1)] for j in range(len_x+1)]\n    for i in range(1,len_x+1):\n        for j in range(1,len_y+1):\n            if x[i-1] == y[j-1]:\n                dp_table[i][j] = 1 + dp_table[i-1][j-1]\n            else:\n                dp_table[i][j] = max(dp_table[i-1][j],dp_table[i][j-1])\n    return dp_table\ndef comput_LCS_String_iter(x,y):\n    '''\n    Write a python function to compute the length of the longest common substring between two strings\n    and return the string.\n    '''\n    len_x = len(x)\n    len_y = len(y)\n    dp_table = [[0 for i in range(len_y+1)] for j in range(len_x+1)]\n    for i in range(1,len_x+1):\n        for j in range(1,len_y+1):\n            if x[i-1] == y[j-1]:\n                dp_table[i][j] = 1 + dp_table[i-1][j-1]\n            else:\n                dp_table[i][j] = max(dp_table[i-1][j],dp_table[i][j-1])\n    return x[dp_table[-1][-1]:]\ndef compute_DP_Table(x,y):\n    '''\n    Write a python function to compute the length of the longest common substring between two strings\n    and return the string.\n    '''\n    len_x = len(x)\n    len_y = len(y)\n    dp_table = [[0 for i in range(len_y+1)] for j in range(len_x+1)]\n    for i in range(1,len_x+1):\n        for j in range(1,len_y+1):\n            if x[i-1] == y[j-1]:\n                dp_table[i][j] = 1 + dp_table[i-1][j-1]\n            else:\n                dp_table[i][j] = max(dp_table[i-1][j],dp_table[i][j-1])\n    return dp_table\ndef compute_LCSM(x,y):\n    '''\n    Write a python function to compute the length of the longest common substring between two strings\n    and return the string.\n    '''\n    len_x = len(x)\n    len_y = len(y)\n    dp_table = compute_DP_Table(x,y)\n    return x[dp_table[-1][-1]:]\ndef compute_LCSM_table(x,y):\n    '''\n    Write a python function to compute the length of the longest common substring between two strings\n    and return the string.\n    '''\n    len_x = len(x)\n    len_y = len(y)\n    dp_table = compute_DP_Table(x,y)\n    return dp_table\ndef compute_LCSM_iter(x,y):\n    '''\n    Write a python function to compute the length of the longest common substrin"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print 'Cube of',num,'is',num**3\n        \ndef sum_elem(nums):\n    '''\n    Write a function to find the sum of elements in a list.\n    '''\n    sum=0\n    for num in nums:\n        sum=sum+num\n    print 'Sum of list is',sum\n        \ndef min_elem(nums):\n    '''\n    Write a function to find the minimum elements in a list.\n    '''\n    min_num=nums[0]\n    for num in nums:\n        if num<min_num:\n            min_num=num\n    print 'Min of list is',min_num\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    l = []\n    for i in nums:\n        l.append(i ** 3)\n    return l\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i*i)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    #for element in nums:\n    #    print(element**3)\n    #    return(element**3)\n    \n    return [element**3 for element in nums]\n    \n    \nprint(cube_nums(nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<1:\n        return 0\n    else:\n        return n+cal_sum(n-1)\n    \ndef perrin_num(n):\n    '''\n    Write a function to calculate the number of perrin numbers for nth term.\n    '''\n    if n==1:\n        return 1\n    else:\n        return perrin_num(n-1)+perrin_num(n-2)\n    \ndef even_sum(n):\n    '''\n    Write a function to calculate the sum of all even numbers less than n.\n    '''\n    if n<0:\n        return 0\n    else:\n        if n%2==0:\n            return n+even_sum(n-2)\n        else:\n            return even_sum(n-2)\n    \ndef fib_num(n):\n    '''\n    Write a function to calculate nth fibonacci number.\n    '''\n    if n==1 or n==2:\n        return 1\n    else:\n        return fib_num(n-1)+fib_num(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    return cal_sum(n-1) + (n*(n+1))/2\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in xrange(1,n):\n        s += i * (3 * i - 1)\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    summ = 0\n    if n <= 1:\n        return n\n    else:\n        for i in range(n):\n            if i%2 == 0:\n                summ += i*(3*i-1)/2\n            else:\n                summ += i*(3*i+1)/2\n        return summ\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    assert type(n)==int and n>=0\n    if n==0:\n        return 0\n    else:\n        return n+cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*cal_sum(n-1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<=0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1, n+1))\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    #This code is not really efficient, but it works.\n    #Hence, I will not comment it out here.\n    new_l = []\n    for ele in l:\n        new_l.append(ele[:l])\n    return new_l\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # we can use the same approach as in knapsack\n    k = l\n    p = len(str)\n    t = [0] * (p+1)\n    t[0] = 1\n    for i in range(1, p+1):\n        for j in range(k):\n            if i < len(str):\n                t[i] += t[i-1] if str[i-1] == str[j] else 0\n        if t[i] >= l:\n            return str[0:i]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > l:\n        return str[:l]\n    else:\n        return str\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l < 2:\n        return None\n    list_len = len(str) - l + 1\n    sub_list = []\n    for i in range(list_len):\n        sub_list.append(str[i:i+l])\n    return sub_list\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # return [ str[i:i+l] for i in range(0, len(str), l) ]\n    return [ x[i:i+l] for i in range(0, len(x), l) ]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == 0:\n        return ''\n    else:\n        return str[:l]+'\\n'+extract_string(str[l:], l-1)\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[x:x+l] for x in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    sublist = []\n    for i in range(len(l)):\n        sublist.append(l[i][:l[i]])\n    return sublist\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l < 0:\n        return -1\n    elif l == 0:\n        return \"\"\n    elif l == 1:\n        return str\n    elif l > 1:\n        return str[:l]\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'[\\s]+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','',text1)\n    return text1\ndef remove_characters(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text1 = re.sub('[^0-9a-zA-Z]+','',text1)\n    return text1\ndef count_characters(text1):\n    '''\n    Write a function to count the number of alphabets, digits and special characters.\n    '''\n    text1 = re.sub('\\s+','',text1)\n    characters = 0\n    digits = 0\n    for char in text1:\n        if char.isalpha():\n            characters += 1\n        elif char.isdigit():\n            digits += 1\n    return characters, digits\ndef palindrome(text1):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    text1 = re.sub('\\s+','',text1)\n    text1 = remove_characters(text1)\n    if text1[::-1] == text1:\n        return True\n    else:\n        return False\ndef is_palindrome(text1):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    text1 = remove_characters(text1)\n    if text1[::-1] == text1:\n        return True\n    else:\n        return False\ndef count_substrings(text1):\n    '''\n    Write a function to count the number of substrings of a given string.\n    '''\n    text1 = re.sub('\\s+','',text1)\n    text1 = remove_characters(text1)\n    substrings = []\n    for i in range(0,len(text1)):\n        substrings.append(text1[i:])\n    print substrings\n    return len(substrings)\ndef is_string_a_palindrome(text1):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    text1 = remove_characters(text1)\n    if text1[::-1] == text1:\n        return True\n    else:\n        return False\ndef count_words(text1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    text1 = re.sub('\\s+','',text1)\n    text1 = remove_characters(text1)\n    text1 = re.split('\\s+',text1)\n    return len(text1)\ndef count_words_no_punctuation(text1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    text1 = re.sub('[^0-9a-zA-Z]+',' ',text1)\n    text1 = re.split('\\s+',text1)\n    return len(text1)\ndef count_words_with_punctuation(text1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    text1 = re.sub('[^0-9a-zA-Z]+',' ',text1)\n    text1 = re.split('\\s+',text1)\n    return len(text1)\ndef count_upper_case(text1):\n    '''\n    Write a function to count the number of upper case characters in a given string.\n    '''\n    text1 = remove_characters(text1)\n    count = 0\n    for char in text1:\n        if char.isupper():\n            count += 1\n    return count\ndef count_lower_case(text1):\n    '''\n    Write a function to count the number of lower case characters in a given string.\n    '''\n    text1 = remove_characters(text1)\n    count = 0\n    for char in text1:\n        if char.islower():\n            count += 1\n    return count\ndef count_numbers(text1):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    text1 = re.sub('\\s+','',text1)\n    text1 = remove_characters(text1)\n    count = 0\n    for char in text1:\n        if char.isdigit():\n            count += 1\n    return count\ndef count_letters(text1):\n    '''\n    Write a function to count the number of alphabets in a given string.\n    '''\n    text1 = remove_characters(text1)\n    count = 0\n    for char in text1:\n        if char.isalpha():\n            count += 1\n    return count\ndef count_alphabets(text1):\n    '''\n    Write a function to count the number of alphabets in a given string.\n    '''\n    text1 = remove_characters(text1)\n    count = 0\n    for char in text1:\n        if char.isalpha():\n            count += 1\n    return count\ndef count_special_characters(text1):\n    '''\n    Write a function to count the number of special characters in a given string.\n    '''\n    text1 = remove_characters(text1)\n    count = 0\n    for char in text1:\n        if char.isdigit() or char.isalpha() or char =='':\n            count += 1\n    return count\ndef count_special_characters_no_space(text1):\n    '''\n    Write a function to count the number of special characters in a given string.\n    '''\n    text1 = remove_characters(text1)\n    count = 0\n    for char in text1:\n        if char.isdigit() or char.isalpha():\n            count += 1\n    return count\ndef count_digits(text1):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    text1 = remove_characters(text1)\n    count = 0\n    for char in text1:\n        if char.isdigit():\n            count += 1\n    return count\ndef count_words_beginning_with_a(text1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    text1 = remove_characters(text1)\n    text1 = re.split('\\s+',text1)\n    count = 0\n    for word in text1:\n        if word[0] == 'a':\n            count += 1\n    return count\ndef count_words_beginning_with_A(text1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    text1 = remove_characters(text1)\n    text1 = re.split('\\s+',text1)\n    count = 0\n    for word in text1:\n        if word[0].lower() == 'a':\n            count += 1\n    return count\ndef count_words_beginning_with_e(text1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    text1 = remove_characters(text1)\n    text1 = re.split('\\s+',text1)\n    count = 0\n    for word in text1:\n        if word[0] == 'e':\n            count += 1\n    return count\ndef count_words_beginning_with_E(text1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    text1 = remove_characters(text1)\n    text1 = re.split('\\s+',text1)\n    count = 0\n    for word in text1:\n        if word[0].lower() == 'e':\n            count += 1\n    return count\ndef count_words_beginning_with_i(text1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    text1 = remove_characters(text1)\n    text1 = re.split('\\s+',text1)\n    count = 0\n    for word in text1:\n        if word[0] == 'i':\n            count += 1"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # output = text1.split()\n    # return''.join(output)\n    return re.sub('\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"\\s+\",'', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\ndef get_age_string(age):\n    '''\n    Write a function to convert the given age to a string.\n    '''\n    age_in_years = 'years' if age > 1 else 'year'\n    return str(age) +'' + age_in_years if age > 0 else 'You were born'\ndef count_substrings(text, substrings):\n    '''\n    Write a function to count the occurrences of each substring in a given string.\n    '''\n    return len([1 for substring in substrings if substring in text])\ndef get_first_name(full_name):\n    '''\n    Write a function to return the first name from the given full name.\n    '''\n    return full_name.split(' ')[0]\ndef get_last_name(full_name):\n    '''\n    Write a function to return the last name from the given full name.\n    '''\n    return full_name.split(' ')[1]\ndef get_first_three_letters(full_name):\n    '''\n    Write a function to return the first three letters of the given full name.\n    '''\n    return full_name[:3]\ndef get_last_three_letters(full_name):\n    '''\n    Write a function to return the last three letters of the given full name.\n    '''\n    return full_name[-3:]\ndef get_all_strings(text, substring):\n    '''\n    Write a function to return all the strings in the text that contain the given substring.\n    '''\n    return [string for string in text.split(' ') if substring in string]\ndef get_all_strings_with_index(text, substring):\n    '''\n    Write a function to return all the strings in the text that contain the given substring.\n    '''\n    return [(index, string) for index, string in enumerate(text.split(' ')) if substring in string]\ndef get_all_numbers(text):\n    '''\n    Write a function to return all the numbers in the text.\n    '''\n    return re.findall(r'\\d+', text)\ndef get_all_words_with_index(text):\n    '''\n    Write a function to return all the words in the text with their index.\n    '''\n    return [(index, word) for index, word in enumerate(text.split(' '))]\ndef reverse(text):\n    '''\n    Write a function to reverse the given string.\n    '''\n    return text[::-1]\ndef string_to_float(text):\n    '''\n    Write a function to convert a string to float.\n    '''\n    return float(text)\ndef is_float(text):\n    '''\n    Write a function to check whether a string is a float.\n    '''\n    return text.replace('.', '', 1).isdigit()\ndef is_integer(text):\n    '''\n    Write a function to check whether a string is an integer.\n    '''\n    return text.replace('.', '', 1).isdigit()\ndef to_upper_case(text):\n    '''\n    Write a function to convert all the characters in the given string to uppercase.\n    '''\n    return text.upper()\ndef get_all_words_with_length(text, length):\n    '''\n    Write a function to return all the words in the text that have the given length.\n    '''\n    return [word for word in text.split(' ') if len(word) == length]\ndef is_anagram(text1, text2):\n    '''\n    Write a function to check whether two strings are anagrams of each other.\n    '''\n    return sorted(text1.replace(' ','')) == sorted(text2.replace(' ',''))\ndef is_palindrome(text):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    return text == text[::-1]\ndef get_largest_number(text):\n    '''\n    Write a function to get the largest number in a list of numbers.\n    '''\n    return max(text)\ndef get_smallest_number(text):\n    '''\n    Write a function to get the smallest number in a list of numbers.\n    '''\n    return min(text)\ndef remove_every_other_number(text):\n    '''\n    Write a function to remove every other number from a list of numbers.\n    '''\n    return [number for index, number in enumerate(text) if index % 2 == 0]\ndef get_second_largest_number(text):\n    '''\n    Write a function to get the second largest number in a list of numbers.\n    '''\n    return sorted(text)[-2]\ndef find_word(text, word):\n    '''\n    Write a function to find the index of a word in a text.\n    '''\n    return text.index(word)\ndef find_longest_word(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    return max(text.split(), key=len)\ndef to_lower_case(text):\n    '''\n    Write a function to convert all the characters in the given string to lowercase.\n    '''\n    return text.lower()\ndef replace_with_empty(text):\n    '''\n    Write a function to replace all spaces with empty strings.\n    '''\n    return text.replace(' ', '')\ndef remove_numbers(text):\n    '''\n    Write a function to remove all the numbers in the given string.\n    '''\n    return re.sub(r'\\d+', '', text)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation in the given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef get_numbers_after_decimal(text):\n    '''\n    Write a function to return all the numbers after the decimal in the given string.\n    '''\n    return re.findall(r'\\d+\\.\\d+', text)\ndef get_first_number(text):\n    '''\n    Write a function to return the first number in the given string.\n    '''\n    return re.findall(r'\\d+', text)[0]\ndef get_only_numbers(text):\n    '''\n    Write a function to return all the numbers in the given string.\n    '''\n    return re.findall(r'\\d+', text)\ndef find_all_integers(text):\n    '''\n    Write a function to find all the integers in the given string.\n    '''\n    return re.findall(r'\\d+', text)\ndef get_first_and_last_character(text):\n    '''\n    Write a function to return the first and last character of the given string.\n    '''\n    return text[0] + text[-1]\ndef remove_spaces(text):\n    '''\n    Write a function to remove all spaces from the given string.\n    '''\n    return text.replace(' ', '')\ndef get_all_caps_words(text):\n    '''\n    Write a function to return all the words in the text that have all uppercase letters.\n    '''\n    return [word for word in text.split(' ') if word.isupper()]\ndef get_words_in_alphabetical_order(text):\n    '''\n    Write a function to return all the words in the text in alphabetical order.\n    '''\n    return sorted(text.split(' '))\ndef count_exclamation_marks(text):\n    '''\n    Write a function to return the number of exclamation marks in the given string.\n    '''\n    return text.count('!')\ndef get_most_common_word(text):\n    '''\n    Write a function to find the most common word in the given string.\n    '''\n    return max(text.split(' '), key=text.split(' ').count)\ndef get_all_unique_words(text):\n    '''\n    Write a function to return all the unique words in the given string.\n    '''\n    return set(text.split(' '))\ndef get_all_even_numbers(text):\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return''.join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\ndef remove_whitespaces_excluding_last(text1):\n    '''\n    Write a function to remove all whitespaces excluding the last.\n    '''\n    return re.sub('[\\s]+','', text1)\ndef replace_numbers(text1):\n    '''\n    Write a function to replace all the numbers in the string with the word \"NUMBER\".\n    '''\n    return re.sub('[0-9]+', 'NUMBER', text1)\ndef replace_lower_and_upper_case(text1):\n    '''\n    Write a function to replace all the lower and upper case letters in the string with the word \"Lower and upper\".\n    '''\n    return re.sub('[a-z]+', 'Lower and upper', text1)\ndef replace_numbers_and_alphabets(text1):\n    '''\n    Write a function to replace all the numbers and alphabets in the string with the word \"Numbers and alphabets\".\n    '''\n    return re.sub('[a-zA-Z]+', 'Numbers and alphabets', text1)\ndef replace_numbers_and_alphabets_with_lower_and_upper_case(text1):\n    '''\n    Write a function to replace all the numbers and alphabets in the string with the word \"Numbers and alphabets\".\n    '''\n    return re.sub('[a-zA-Z]+', 'Numbers and alphabets', text1)\ndef replace_numbers_and_alphabets_with_lower_and_upper_case_using_ranges(text1):\n    '''\n    Write a function to replace all the numbers and alphabets in the string with the word \"Numbers and alphabets\".\n    '''\n    return re.sub('[a-zA-Z]+', 'Numbers and alphabets', text1)\ndef replace_using_reg_exp(text1):\n    '''\n    Write a function to replace all the numbers and alphabets in the string with the word \"Numbers and alphabets\".\n    '''\n    return re.sub('[a-zA-Z]+', 'Numbers and alphabets', text1)\ndef replace_alphabets_and_numbers_with_lower_and_upper_case(text1):\n    '''\n    Write a function to replace all the alphabets and numbers in the string with the word \"Alphabets and numbers\".\n    '''\n    return re.sub('[a-zA-Z0-9]+', 'Alphabets and numbers', text1)\ndef replace_alphabets_and_numbers_with_lower_and_upper_case_using_ranges(text1):\n    '''\n    Write a function to replace all the alphabets and numbers in the string with the word \"Alphabets and numbers\".\n    '''\n    return re.sub('[a-zA-Z0-9]+', 'Alphabets and numbers', text1)\ndef replace_alphabets_and_numbers_with_lower_and_upper_case_using_ranges_except_last_character(text1):\n    '''\n    Write a function to replace all the alphabets and numbers in the string with the word \"Alphabets and numbers\".\n    '''\n    return re.sub('[a-zA-Z0-9]+', 'Alphabets and numbers', text1)\ndef remove_multiple_spaces_and_new_line(text1):\n    '''\n    Write a function to remove all the multiple spaces and new line from the given string.\n    '''\n    return re.sub(' +','', text1)\ndef remove_multiple_spaces_and_new_line_using_ranges(text1):\n    '''\n    Write a function to remove all the multiple spaces and new line from the given string.\n    '''\n    return re.sub(' +','', text1)\ndef remove_multiple_spaces_and_new_line_using_ranges_except_last_character(text1):\n    '''\n    Write a function to remove all the multiple spaces and new line from the given string.\n    '''\n    return re.sub(' +','', text1)\ndef replace_multiple_spaces_with_single_space(text1):\n    '''\n    Write a function to replace all the multiple spaces with single space from the given string.\n    '''\n    return re.sub(' +','', text1)\ndef replace_multiple_spaces_with_single_space_using_ranges(text1):\n    '''\n    Write a function to replace all the multiple spaces with single space from the given string.\n    '''\n    return re.sub(' +','', text1)\ndef replace_multiple_spaces_with_single_space_using_ranges_except_last_character(text1):\n    '''\n    Write a function to replace all the multiple spaces with single space from the given string.\n    '''\n    return re.sub(' +','', text1)\ndef convert_words_to_lower_case(text1):\n    '''\n    Write a function to convert all the words in the string to lower case.\n    '''\n    return text1.lower()\ndef convert_words_to_lower_case_using_ranges(text1):\n    '''\n    Write a function to convert all the words in the string to lower case.\n    '''\n    return text1.lower()\ndef convert_words_to_lower_case_using_ranges_except_last_character(text1):\n    '''\n    Write a function to convert all the words in the string to lower case.\n    '''\n    return text1.lower()\ndef convert_to_lower_case_using_ranges(text1):\n    '''\n    Write a function to convert all the words in the string to lower case.\n    '''\n    return text1.lower()\ndef convert_to_lower_case_using_ranges_except_last_character(text1):\n    '''\n    Write a function to convert all the words in the string to lower case.\n    '''\n    return text1.lower()\ndef convert_to_lower_case_using_ranges_excluding_last(text1):\n    '''\n    Write a function to convert all the words in the string to lower case.\n    '''\n    return text1.lower()\ndef convert_to_lower_case_using_ranges_excluding_last_character(text1):\n    '''\n    Write a function to convert all the words in the string to lower case.\n    '''\n    return text1.lower()\ndef convert_to_lower_case_using_ranges_excluding_last(text1):\n    '''\n    Write a function to convert all the words in the string to lower case.\n    '''\n    return text1.lower()\ndef convert_to_lower_case_using_ranges_excluding_last_character(text1):\n    '''\n    Write a function to convert all the words in the string to lower case.\n    '''\n    return text1.lower()\ndef remove_multiple_spaces(text1):\n    '''\n    Write a function to remove all the multiple spaces from the given string.\n    '''\n    return re.sub(' +','', text1)\ndef remove_multiple_spaces_using_ranges(text1):\n    '''\n    Write a function to remove all the multiple spaces from the given string.\n    '''\n    return re.sub(' +','', text1)\ndef remove_multiple_spaces_using_ranges_excluding_last_character(text1):\n    '''\n    Write a function to remove all the multiple spaces from the given string.\n    '''\n    return re.sub(' +','', text1)\ndef remove_multiple_spaces_and_new_line(text1):\n    '''\n    Write a function to remove all the multiple spaces and new line from the given string.\n    '''\n    return re.sub(' +','', text1)\ndef remove_multiple_spaces_and_new_line_using_ranges(text1):\n    '''\n    Write a function to remove all the multiple spaces and new line from the given string.\n    '''\n    return re.sub(' +','', text1)\ndef remove_multiple_spaces_and"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return sale_amount-actual_cost\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return 0 if sale_amount-actual_cost >= 0 else sale_amount-actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == sale_amount:\n        return 0\n    elif sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = (actual_cost - sale_amount)*100/actual_cost\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    import math\n    if actual_cost == sale_amount:\n        return math.ceil((sale_amount/actual_cost)*100)\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return abs(actual_cost - sale_amount) if actual_cost > sale_amount else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss=abs(actual_cost-sale_amount)\n    return loss\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if n % i == 0 :\n            if (n/i == i) : \n                sum += i \n            else : \n                sum += i + n/i \n    return sum\ndef test_sumofFactors() :\n    '''\n    Write a python function to find the sum of all numbers from 0 to 500.\n    '''\n    sum = 0\n    for i in range(0,501) :\n        sum += sumofFactors(i)\n    return sum\ndef isPerfect(n) : \n    '''\n    Write a python function to check whether a given number is perfect or not. \n    The function returns true if n is perfect, else it returns false.\n    '''\n    sum = 0\n    for i in range(1,n) :\n        if n % i == 0 :\n            sum += i\n    if (sum == n) :\n        return True\n    else :\n        return False\ndef test_isPerfect() :\n    '''\n    Write a python function to check whether a given number is perfect or not. \n    The function returns true if n is perfect, else it returns false.\n    '''\n    for i in range(1,50) :\n        if (isPerfect(i)) :\n            print \"%d is a perfect number\" %i\n        else :\n            print \"%d is not a perfect number\" %i\ndef isPrime(n) : \n    '''\n    Write a python function to check whether a given number is prime or not. \n    The function returns true if n is prime, else it returns false.\n    '''\n    if (n==1) :\n        return False\n    if (n==2) :\n        return True\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            return False\n    return True\ndef test_isPrime() :\n    '''\n    Write a python function to check whether a given number is prime or not. \n    The function returns true if n is prime, else it returns false.\n    '''\n    for i in range(1,50) :\n        if (isPrime(i)) :\n            print \"%d is a prime number\" %i\n        else :\n            print \"%d is not a prime number\" %i\ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a given number is palindrome or not. \n    The function returns true if n is palindrome, else it returns false.\n    '''\n    n=str(n)\n    if (n[::-1]==n) :\n        return True\n    else :\n        return False\ndef test_isPalindrome() :\n    '''\n    Write a python function to check whether a given number is palindrome or not. \n    The function returns true if n is palindrome, else it returns false.\n    '''\n    for i in range(1,50) :\n        if (isPalindrome(i)) :\n            print \"%d is a palindrome\" %i\n        else :\n            print \"%d is not a palindrome\" %i\ndef factorial(n) : \n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if (n==0) :\n        return 1\n    else :\n        return n * factorial(n-1)\ndef test_factorial() :\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    for i in range(10) :\n        print factorial(i)\ndef gcd(n,m) : \n    '''\n    Write a python function to calculate gcd of two numbers. \n    '''\n    if (m==0) :\n        return n\n    return gcd(m,n%m)\ndef test_gcd() :\n    '''\n    Write a python function to calculate gcd of two numbers.\n    '''\n    for i in range(1,50) :\n        for j in range(1,50) :\n            if (gcd(i,j)==1) :\n                print \"%d and %d are coprime\" %(i,j)\n            else :\n                print \"%d and %d are not coprime\" %(i,j)\ndef lcm(n,m) : \n    '''\n    Write a python function to calculate lcm of two numbers. \n    '''\n    return (n*m)/gcd(n,m)\ndef test_lcm() :\n    '''\n    Write a python function to calculate lcm of two numbers.\n    '''\n    for i in range(1,50) :\n        for j in range(1,50) :\n            if (lcm(i,j)==12) :\n                print \"%d and %d are co-prime\" %(i,j)\n            else :\n                print \"%d and %d are not co-prime\" %(i,j)\ndef isAnagram(str1, str2) : \n    '''\n    Write a python function to check whether two strings are anagrams or not. \n    The function returns true if the two strings are anagrams, else it returns false.\n    '''\n    if (len(str1)==len(str2)) :\n        for i in range(len(str1)) :\n            if (str1[i]!=str2[i]) :\n                return False\n        return True\n    else :\n        return False\ndef test_isAnagram() :\n    '''\n    Write a python function to check whether two strings are anagrams or not. \n    The function returns true if the two strings are anagrams, else it returns false.\n    '''\n    for i in range(100) :\n        for j in range(100) :\n            if (isAnagram(str(i),str(j))) :\n                print \"%d and %d are anagrams\" %(i,j)\n            else :\n                print \"%d and %d are not anagrams\" %(i,j)\ndef isAnagram2(str1, str2) : \n    '''\n    Write a python function to check whether two strings are anagrams or not. \n    The function returns true if the two strings are anagrams, else it returns false.\n    '''\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if (len(str1)==len(str2)) :\n        for i in range(len(str1)) :\n            if (str1[i]!=str2[i]) :\n                return False\n        return True\n    else :\n        return False\ndef test_isAnagram2() :\n    '''\n    Write a python function to check whether two strings are anagrams or not. \n    The function returns true if the two strings are anagrams, else it returns false.\n    '''\n    for i in range(100) :\n        for j in range(100) :\n            if (isAnagram2(str(i),str(j))) :\n                print \"%d and %d are anagrams\" %(i,j)\n            else :\n                print \"%d and %d are not anagrams\" %(i,j)\ndef isAnagram3(str1, str2) : \n    '''\n    Write a python function to check whether two strings are anagrams or not. \n    The function returns true if the two strings are anagrams, else it returns false.\n    '''\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    str1 = ''.join(str1)\n    str2 = ''.join(str2)\n    if (len(str1)==len(str2)) :\n        for i in range(len(str1)) :\n            if (str1[i]!=str2[i]) :\n                return False\n        return True\n    else :\n        return False\ndef test_isAnagram3() :\n    '''\n    Write a python function to check whether two strings are anagrams or not. \n    The function returns true if the two strings are anagrams, else it returns false.\n    '''\n    for i in range(100) :\n        for j in range(100) :\n            if (isAnagram3(str(i)"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    sum = 0\n    while i < n : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n        i += 1\n    return sum \ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n    return sum \ndef findPrimes(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes2(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes3(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes4(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes5(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes6(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes7(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes8(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes9(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes10(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes11(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes12(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes13(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes14(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes15(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes16(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    p"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n%2 == 0:\n        return n*(n+1)/2\n    i = 3\n    sum = 1\n    while i <= math.sqrt(n):\n        if n%i == 0:\n            sum = sum + i + n/i\n        i += 2\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    return n + sumofFactors(n - 2)\ndef getLargestPrimeFactor(n) : \n    '''\n    Write a python function to find the largest prime factor of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    largestPrimeFactor = 0\n    if n % 2 == 0 : \n        largestPrimeFactor = 2\n    else : \n        largestPrimeFactor = 3\n    while n % 2 == 0 : \n        n = n / 2\n    if n > 2 : \n        largestPrimeFactor = n\n    return largestPrimeFactor\ndef getLargestPrimeFactorUsingFunction(n) : \n    '''\n    Write a python function to find the largest prime factor of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    largestPrimeFactor = 0\n    if n % 2 == 0 : \n        largestPrimeFactor = 2\n    elif n % 3 == 0 : \n        largestPrimeFactor = 3\n    else : \n        largestPrimeFactor = 5\n    while n % 2 == 0 or n % 3 == 0 : \n        n = n / 2\n    if n > 5 : \n        largestPrimeFactor = n\n    return largestPrimeFactor\ndef getFactors(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    if n % 2 == 0 : \n        return 2\n    else : \n        return 1 + getFactors(n - 1)\ndef getFactorsUsingFunction(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    if n % 2 == 0 : \n        return 2\n    elif n % 3 == 0 : \n        return 3\n    else : \n        return 1 + getFactorsUsingFunction(n - 1)\ndef getFactors2(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    if n % 2 == 0 : \n        return 2\n    else : \n        return 1 + getFactors2(n - 1)\ndef getFactors2UsingFunction(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    if n % 2 == 0 : \n        return 2\n    elif n % 3 == 0 : \n        return 3\n    else : \n        return 1 + getFactors2UsingFunction(n - 1)\ndef getFactorsUsingFunction2(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    factors = []\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            factors.append(i)\n    return factors\ndef getFactorsUsingFunction3(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    factors = []\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            factors.append(i)\n    return factors\ndef getFactorsUsingFunction4(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    factors = []\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            factors.append(i)\n    return factors\ndef getFactorsUsingFunction5(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    factors = []\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            factors.append(i)\n    return factors\ndef getFactorsUsingFunction6(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    factors = []\n    i = 1\n    while i <= math.sqrt(n) :\n        if n % i == 0 :\n            factors.append(i)\n            factors.append(n / i)\n        i = i + 1\n    return factors\ndef getFactorsUsingFunction7(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    factors = []\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            factors.append(i)\n    return factors\ndef getFactorsUsingFunction8(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    factors = []\n    i = 1\n    while i <= math.sqrt(n) :\n        if n % i == 0 :\n            factors.append(i)\n            factors.append(n / i)\n        i = i + 1\n    return factors\ndef getFactorsUsingFunction9(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    factors = []\n    i = 1\n    while i <= math.sqrt(n) :\n        if n % i == 0 :\n            factors.append(i)\n            factors.append(n / i)\n        i = i + 1\n    return factors\ndef getFactorsUsingFunction10(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    factors = []\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            factors.append(i)\n    return factors\ndef getFactorsUsingFunction11(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    factors = []\n    i = 1\n    while i <= math.sqrt(n) :\n        if n % i == 0 :\n            factors.append(i)\n            factors.append(n / i)\n        i = i + 1\n    return factors\ndef getFactorsUsingFunction12(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    factors = []\n    i = 1\n    while i <= math.sqrt(n) :\n        if n % i == 0 :\n            factors.append(i)\n            factors.append(n / i)\n        i = i + 1\n    return factors\ndef getFactorsUsingFunction13(n) : \n    '''\n    Write a python function to find the factors of a number\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    factors = []\n    i = 1\n    while i <= n :"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum = sum + i \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n<0 :\n        return 0\n    else :\n        sum=0\n        for i in range(2,int(math.sqrt(n))+1) :\n            if n%i==0 :\n                if n/i==i :\n                    sum=sum+i\n                else :\n                    sum=sum+i+n/i\n        return sum\ndef checkPalindrome(n) : \n    '''\n    Write a python function to check whether a number is a palindrome or not.\n    '''\n    if n<0 :\n        return False\n    else :\n        rev=0\n        temp=n\n        while temp > 0 :\n            digit=temp%10\n            rev=rev*10+digit\n            temp=temp/10\n        if n==rev :\n            return True\n        else :\n            return False\ndef checkArmstrong(n) : \n    '''\n    Write a python function to check whether a number is an armstrong number or not.\n    '''\n    if n<0 :\n        return False\n    else :\n        temp=n\n        sum=0\n        while temp>0 :\n            digit=temp%10\n            sum=sum+pow(digit,3)\n            temp=temp/10\n        if sum==n :\n            return True\n        else :\n            return False\ndef perfectNumber(n) : \n    '''\n    Write a python function to check whether a number is a perfect number or not.\n    '''\n    if n<0 :\n        return False\n    else :\n        sum=0\n        for i in range(1,n) :\n            if n%i==0 :\n                sum=sum+i\n        if n==sum :\n            return True\n        else :\n            return False\ndef amicable(n) : \n    '''\n    Write a python function to check whether a number is amicable or not.\n    '''\n    if n<0 :\n        return 0\n    else :\n        sum=0\n        for i in range(1,n) :\n            if n%i==0 :\n                sum=sum+i\n                if sum==i and n!=i :\n                    return sum\ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n<0 :\n        return False\n    else :\n        i=2\n        while i<n :\n            if n%i==0 :\n                return False\n            i=i+1\n        return True\ndef sumofDigits(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    sum=0\n    while n>0 :\n        digit=n%10\n        sum=sum+digit\n        n=n/10\n    return sum\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of digits of a number which is prime.\n    '''\n    if n<0 :\n        return 0\n    else :\n        sum=0\n        while n>0 :\n            digit=n%10\n            if isPrime(digit)==True :\n                sum=sum+digit\n            n=n/10\n        return sum\ndef countDigits(n) : \n    '''\n    Write a python function to find the count of digits of a number.\n    '''\n    count=0\n    while n>0 :\n        digit=n%10\n        count=count+1\n        n=n/10\n    return count\ndef countDigitsPrime(n) : \n    '''\n    Write a python function to find the count of digits of a number which is prime.\n    '''\n    if n<0 :\n        return 0\n    else :\n        count=0\n        while n>0 :\n            digit=n%10\n            if isPrime(digit)==True :\n                count=count+1\n            n=n/10\n        return count\ndef largestNumber(n) : \n    '''\n    Write a python function to find the largest number of digits in a number.\n    '''\n    sum=0\n    while n>0 :\n        digit=n%10\n        sum=sum+1\n        n=n/10\n    return sum\ndef greatestCommonDivisor(a,b) : \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a<b :\n        temp=a\n        a=b\n        b=temp\n    while b>0 :\n        digit=b%10\n        if a%digit==0 and b%digit==0 :\n            gcd=digit\n        b=b/10\n    return gcd\ndef isPerfectNumber(n) : \n    '''\n    Write a python function to check whether a number is a perfect number or not.\n    '''\n    sum=0\n    for i in range(1,n) :\n        if n%i==0 :\n            sum=sum+i\n    if sum==n :\n        return True\n    else :\n        return False\ndef isPerfectSquare(n) : \n    '''\n    Write a python function to check whether a number is a perfect square or not.\n    '''\n    if n<0 :\n        return False\n    else :\n        a=int(math.sqrt(n))\n        if pow(a,2)==n :\n            return True\n        else :\n            return False\ndef isHarshad(n) : \n    '''\n    Write a python function to check whether a number is a harshad number or not.\n    '''\n    if n<0 :\n        return False\n    else :\n        sum=0\n        temp=n\n        while temp>0 :\n            digit=temp%10\n            sum=sum+digit\n            temp=temp/10\n        if n%sum==0 :\n            return True\n        else :\n            return False\ndef isHarshadPrime(n) : \n    '''\n    Write a python function to check whether a number is a harshad prime or not.\n    '''\n    if n<0 :\n        return 0\n    else :\n        sum=0\n        temp=n\n        while temp>0 :\n            digit=temp%10\n            if isPrime(digit)==True :\n                sum=sum+digit\n            temp=temp/10\n        if n%sum==0 :\n            return True\n        else :\n            return False\ndef toBinary(n) : \n    '''\n    Write a python function to convert decimal to binary.\n    '''\n    if n<0 :\n        return 0\n    else :\n        binary=\"\"\n        while n>0 :\n            remainder=n%2\n            binary=binary+str(remainder)\n            n=n/2\n        if len(binary)<=36 :\n            while len(binary)!=36 :\n                binary=binary+\"0\"\n        return binary\ndef toDecimal(n) : \n    '''\n    Write a python function to convert binary to decimal.\n    '''\n    if n<0 :\n        return 0\n    else :\n        decimal=0\n        for i in range(len(n)) :\n            digit=int(n[len(n)-i-1])\n            decimal=decimal+digit*pow(2,i)\n        return decimal\ndef isBase(n,base) : \n    '''\n    Write a python function to check whether a number is a base or not.\n    '''\n    if n<0 :\n        return False\n    else :\n        sum=0\n        while n>0 :\n            digit=n%base\n            sum=sum+digit\n            n=n/base\n        if n==sum :\n            return True\n        else :\n            return False\ndef isBasePrime(n,base) : \n    '''\n    Write a python function to check whether a number is a base prime or not.\n    '''\n    if n<0 :\n        return 0\n    else :\n        sum=0\n        temp=n\n        while temp>0 :\n            digit=temp%base\n            if isPrime(digit)==True :\n                sum=sum+digit\n            temp=temp/base\n        if n%sum==0 :\n            return True\n        else :\n            return False\ndef gcd(a,b) : \n    '''\n    Write a python function to find the greatest common divisor o"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 0:\n        return -1\n    sum = 0\n    for i in range(2, n):\n        if i*i <= n:\n            if n % i == 0:\n                sum += i\n                if i*i!= n:\n                    sum += n / i\n        else:\n            break\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # return sum([x for x in range(1, n) if n % x == 0])\n    total = 0\n    i = 1\n    while i < n:\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n        i += 1\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                sum = sum + i \n            else : \n                sum = sum + n/i\n    return sum \ndef happyNumber(n):\n    '''\n    Write a python function to find whether a number is a happy number or not.\n    '''\n    sum = 0\n    while (n!= 0) : \n        sum = sum + (n % 10)**2\n        n = int(n/10)\n    return (sum == 1)\ndef prime(n):\n    '''\n    Write a python function to find whether a number is a prime or not.\n    '''\n    if (n > 1) :\n        if (n == 2) :\n            return True\n        elif (n % 2 == 0) :\n            return False\n        else :\n            for i in range(2, int(math.sqrt(n)) + 1) :\n                if (n % i == 0) :\n                    return False\n            return True\n    return False\ndef nthPerfectNumber(n):\n    '''\n    Write a python function to find the nth perfect number.\n    '''\n    if (n == 1) :\n        return 2\n    if (n == 2) :\n        return 3\n    return (6*n-5)\ndef isPrime(n):\n    '''\n    Write a python function to find whether a number is a prime or not.\n    '''\n    if (n > 1) :\n        if (n == 2) :\n            return True\n        elif (n % 2 == 0) :\n            return False\n        else :\n            for i in range(2, int(math.sqrt(n)) + 1) :\n                if (n % i == 0) :\n                    return False\n            return True\n    return False\ndef countDigits(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count = 0\n    while (n!= 0) :\n        n = int(n/10)\n        count = count + 1\n    return count\ndef isPalindrome(n):\n    '''\n    Write a python function to check whether a number is a palindrome or not.\n    '''\n    n = str(n)\n    if (n == n[::-1]) :\n        return True\n    else :\n        return False\ndef isPrime2(n):\n    '''\n    Write a python function to check whether a number is a prime or not.\n    '''\n    if (n <= 1) :\n        return False\n    elif (n == 2) :\n        return True\n    else :\n        for i in range(2, int(math.sqrt(n)) + 1) :\n            if (n % i == 0) :\n                return False\n        return True\ndef isPrime3(n):\n    '''\n    Write a python function to check whether a number is a prime or not.\n    '''\n    if (n <= 1) :\n        return False\n    elif (n == 2) :\n        return True\n    elif (n % 2 == 0) :\n        return False\n    else :\n        for i in range(3, int(math.sqrt(n)) + 1, 2) :\n            if (n % i == 0) :\n                return False\n        return True\ndef nthPrime(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    if (n == 1) :\n        return 2\n    count = 1\n    num = 3\n    while (count < n) :\n        if (isPrime3(num)) :\n            count = count + 1\n        num = num + 2\n    return num\ndef isPrime4(n):\n    '''\n    Write a python function to check whether a number is a prime or not.\n    '''\n    if (n <= 1) :\n        return False\n    elif (n == 2) :\n        return True\n    elif (n % 2 == 0) :\n        return False\n    else :\n        for i in range(3, int(math.sqrt(n)) + 1, 2) :\n            if (n % i == 0) :\n                return False\n        return True\ndef sumOfPrimeFactors(n):\n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    if (isPrime4(n)) :\n        sum = 1\n        while (n!= 1) :\n            if (isPrime4(n)) :\n                sum = sum + n\n            n = int(n/2)\n        return sum\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1) :\n        if (isPrime4(i) and n % i == 0) :\n            sum = sum + i + n/i\n    if (isPrime4(n)) :\n        sum = sum + n\n    return sum\ndef sumofSquareNumbers(n):\n    '''\n    Write a python function to find the sum of square numbers between 1 and a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        sum = sum + i**2\n    return sum\ndef sumofSquareDifference(n):\n    '''\n    Write a python function to find the sum of square difference between a number and the square of the number.\n    '''\n    return sumofSquareNumbers(n) - (n**2)\ndef sumofSquares(n):\n    '''\n    Write a python function to find the sum of squares between 1 and a number.\n    '''\n    return sumofSquareDifference(n)\ndef sumofSquaresDifference(n):\n    '''\n    Write a python function to find the sum of squares difference between a number and the square of the number.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        sum = sum + (i**2)\n    return sum\ndef sumofSquaresDifference2(n):\n    '''\n    Write a python function to find the sum of squares difference between a number and the square of the number.\n    '''\n    return sumofSquares(n) - (n**2)\ndef sumofSquaresDifference3(n):\n    '''\n    Write a python function to find the sum of squares difference between a number and the square of the number.\n    '''\n    return (n**2) - sumofSquares(n)\ndef sumofSquareDifference(n):\n    '''\n    Write a python function to find the sum of square difference between a number and the square of the number.\n    '''\n    return (n**2) - sumofSquares(n)\ndef sumofSquaresDifference2(n):\n    '''\n    Write a python function to find the sum of square difference between a number and the square of the number.\n    '''\n    return (n**2) - sumofSquares(n)\ndef sumofSquaresDifference3(n):\n    '''\n    Write a python function to find the sum of square difference between a number and the square of the number.\n    '''\n    return (n**2) - sumofSquares(n)\ndef sumofSquareDifference(n):\n    '''\n    Write a python function to find the sum of square difference between a number and the square of the number.\n    '''\n    return (n**2) - sumofSquares(n)\ndef sumofSquareDifference2(n):\n    '''\n    Write a python function to find the sum of square difference between a number and the square of the number.\n    '''\n    return (n**2) - sumofSquares(n)\ndef sumofSquareDifference3(n):\n    '''\n    Write a python function to find the sum of square difference between a number and the square of the number.\n    '''\n    return (n**2) - sumofSquares(n)\ndef sumofCubeDifference(n):\n    '''\n    Write a python function to find the sum of cube difference between a number and the cube of the number.\n    '''\n    return (n**3) - sumofSquares(n)\ndef sumofCubeDifference2(n):\n    '''\n    Write a python function to find the sum of cube difference betwee"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum = sum + i\n            else:\n                sum = sum + n//i\n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = re.findall('[a-z]+',text)\n    return any(['z' in word for word in words])\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    x = re.search('z',text)\n    if x:\n        return x.group()\n    else:\n        return None\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    m = re.search(r\"\\w*z\\w*\", text)\n    if m:\n        print(m.group(0))\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'[a-zA-Z]*z[a-zA-Z]*',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-z]{3,}\\b')\n    print(pattern.findall(text))\ndef text_match_one_or_more_zs(text):\n    '''\n    Write a function that matches a word containing 'z' or more.\n    '''\n    pattern = re.compile(r'\\b[a-z]{2,}\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z0-9]{2,}\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_with_no_repeat(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z0-9]{3,}\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_with_no_repeat_except_last(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_no_repeat_letter_digits(text):\n    '''\n    Write a function that matches a word containing no repeating letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{2,}\\b')\n    print(pattern.findall(text))\ndef text_match_no_repeat_letter_digits_except_last(text):\n    '''\n    Write a function that matches a word containing no repeating letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_last(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_first(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_first_and_last(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_last_and_first(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_last_and_first_except_middle(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_first_and_last_except_middle(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_last_and_first_except_middle(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_last_and_first_except_middle(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_last_and_first_except_middle(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_last_and_first_except_middle(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_last_and_first_except_middle(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_last_and_first_except_middle(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_last_and_first_except_middle(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_last_and_first_except_middle(text):\n    '''\n    Write a function that matches a word containing letters and digits.\n    '''\n    pattern = re.compile(r'\\b[^\\d]\\b[a-zA-Z0-9]{3,}[^\\d]\\b')\n    print(pattern.findall(text))\ndef text_match_letter_digits_no_repeat_except_last_and_first_except_middl"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b[a-z]+z\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    r = re.compile('z')\n    print(r.search(text))\n    return r.search(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('\\w*z\\w*',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b[^aeiou][z]\\w+\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\bz\\b',text)\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 12 and monthnum2 >= 1:\n        return True\n    else:\n        return False\ndef check_leapyear(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_1(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_2(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_3(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_4(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        return True\n    else:\n        return False\ndef find_number_of_days(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    days_in_month = {\n        1 : 31,\n        2 : 28,\n        3 : 31,\n        4 : 30,\n        5 : 31,\n        6 : 30,\n        7 : 31,\n        8 : 31,\n        9 : 30,\n        10 : 31,\n        11 : 30,\n        12 : 31\n    }\n    if check_monthnumb_number(month) == True:\n        return days_in_month[month]\n    else:\n        if check_leapyear(year) == True:\n            return days_in_month[month] + 1\n        else:\n            return days_in_month[month]\ndef find_number_of_days_1(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 29\n        else:\n            return 28\ndef find_number_of_days_2(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 31\ndef find_number_of_days_3(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_4(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_5(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 30\ndef find_number_of_days_6(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_7(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_8(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_9(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 30\ndef find_number_of_days_10(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 31\ndef find_number_of_days_11(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_12(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 31\ndef find_number_of_days_13(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_14(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_15(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            retur"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif monthnum2 in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 29\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return 31\n    elif monthnum2 in [4,6,9,11]:\n        return 30\n    else:\n        return 29\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in (1, 3, 5, 7, 8, 10, 12):\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if year % 400 == 0 or (year % 4 == 0 and year % 100!= 0):\n            print(\"This is a leap year\")\n            return True\n        else:\n            print(\"This is not a leap year\")\n            return False\n    else:\n        if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == '1':\n        return True\n    elif monthnum2 == '2':\n        if (year % 4) == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 == '3':\n        return True\n    elif monthnum2 == '4':\n        return True\n    elif monthnum2 == '5':\n        return True\n    elif monthnum2 == '6':\n        return True\n    elif monthnum2 == '7':\n        return True\n    elif monthnum2 == '8':\n        return True\n    elif monthnum2 == '9':\n        return True\n    elif monthnum2 == '10':\n        return True\n    elif monthnum2 == '11':\n        return True\n    elif monthnum2 == '12':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 2:\n        if yearnum % 4 == 0:\n            if yearnum % 100 == 0:\n                if yearnum % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_list = []\n    for string in stringlist:\n        rev_list.append(string[::-1])\n    return rev_list\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = []\n    for i in stringlist:\n        #do the work\n        reversedlist.append(i[::-1])\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return map(lambda x: x[::-1], stringlist)\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # for i, s in enumerate(stringlist):\n    #     stringlist[i] = s[::-1]\n    return [s[::-1] for s in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if stringlist == []:\n        return stringlist\n    else:\n        return [stringlist[-1]] + reverse_string_list(stringlist[:-1])\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Your code here\n    stringlist = stringlist[::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    rev_list = [string[::-1] for string in stringlist]\n    return rev_list\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n    \nif __name__ == '__main__':\n    input_string = ['red', 'yellow', 'blue', 'pink']\n    print(reverse_string_list(input_string))"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = len(lst[0])\n    result = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])<minimum:\n            minimum = len(lst[i])\n            result = lst[i]\n    return result\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0: \n        return lst\n    min_lst = lst[0] \n    for i in lst: \n        if len(i) < len(min_lst): \n            min_lst = i \n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = 0\n    for i in lst:\n        if len(i) > min_len:\n            min_len = len(i)\n    for i in lst:\n        if len(i) == min_len:\n            print i\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    min = lst[0]\n    min_index = 0\n    for i in range(0,n):\n        if len(lst[i]) < len(min):\n            min = lst[i]\n            min_index = i\n    return min, min_index\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minLen = lst[0]\n    minSubList = lst[0]\n    for i in lst:\n        if len(i) < len(minSubList):\n            minSubList = i\n        elif len(i) == len(minSubList):\n            minSubList = min(i, minSubList)\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    ans = []\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            ans = i\n    return ans\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    size = len(lst)\n    sublist_min = []\n    for i in range(size):\n        for j in range(i+1,size):\n            if len(lst[i:j+1]) < len(sublist_min):\n                sublist_min = lst[i:j+1]\n    return sublist_min\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst) \n    min = lst[0] \n    min_index = 0\n    for i in range(1, n): \n        if len(lst[i]) < len(min): \n            min = lst[i] \n            min_index = i \n    return min_index \n    \ndef Find_Max(lst): \n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    n = len(lst) \n    max = lst[0] \n    max_index = 0\n    for i in range(1, n): \n        if len(lst[i]) > len(max): \n            max = lst[i] \n            max_index = i \n    return max_index \n    \ndef main(): \n    # print(\"Find Minimum length sublist:\") \n    # x = Find_Min(['one', 'two', 'three', 'four', 'five','six','seven', 'eight'])\n    # print(x) \n    \n    # print(\"Find Maximum length sublist:\") \n    # x = Find_Max(['one', 'two', 'three', 'four', 'five','six','seven', 'eight'])\n    # print(x) \n    \n    # print(\"Find Maximum length sublist:\") \n    # x = Find_Max(['one', 'two', 'three', 'four', 'five','six','seven', 'eight'])\n    # print(x) \n    \n    \n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    # lst.sort()\n    # print(lst)\n    \n    # print(\"Find Maximum length sublist:\") \n    # x = Find_Max(lst)\n    # print(x) \n    \n    # print(\"Find Minimum length sublist:\") \n    # x = Find_Min(lst)\n    # print(x) \n    \n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    # lst.sort()\n    # print(lst)\n    \n    # print(\"Find Minimum length sublist:\") \n    # x = Find_Min(lst)\n    # print(x) \n    \n    \nif __name__==\"__main__\": \n    main("
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_index = i\n    return lst[min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    Min = -1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > Min and len(sublist) > 1:\n                Min = len(sublist)\n                Min_sublist = sublist\n    return Min_sublist\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(area)\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r\"[A-Z]\",\"\",str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r\"[a-z]\",\"\",str1)\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return re.sub(r\"[0-9]\",\"\",str1)\ndef remove_punctuations(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    return re.sub(r\"[,.:;\\'\\\"/[\\]\\|]\",\"\",str1)\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return re.sub(r\"[0-9]\",\"\",str1)\ndef remove_special_chars(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return re.sub(r\"[^A-Za-z0-9_]\",\" \",str1)\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    return re.sub(r\"\\s+\",\" \",str1)\ndef remove_end_spaces(str1):\n    '''\n    Write a function to remove end spaces from a given string.\n    '''\n    return re.sub(r\"\\s$\",\"\",str1)\ndef remove_single_characters(str1):\n    '''\n    Write a function to remove single characters from a given string.\n    '''\n    return re.sub(r\"\\b[A-Za-z]+\\b\",\" \",str1)\ndef remove_beginning_spaces(str1):\n    '''\n    Write a function to remove spaces at the beginning of a given string.\n    '''\n    return re.sub(r\"\\s+\",\"\",str1)\ndef remove_non_ascii_chars(str1):\n    '''\n    Write a function to remove non ascii characters from a given string.\n    '''\n    return re.sub(r\"\\W+\",\"\",str1)\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove all whitespaces from a given string.\n    '''\n    return re.sub(r\"\\s+\",\"\",str1)\ndef remove_all_whitespaces(str1):\n    '''\n    Write a function to remove all whitespaces from a given string.\n    '''\n    return re.sub(r\"\\s+\",\"\",str1)\ndef remove_accents(str1):\n    '''\n    Write a function to remove all accents from a given string.\n    '''\n    return re.sub(r\"\\p{Mn}\",\"\",str1)\ndef remove_all_non_ascii_chars(str1):\n    '''\n    Write a function to remove all non ascii characters from a given string.\n    '''\n    return re.sub(r\"\\W+\",\"\",str1)\ndef remove_all_non_ascii_chars_except_space(str1):\n    '''\n    Write a function to remove all non ascii characters from a given string.\n    '''\n    return re.sub(r\"\\p{Mn}+\",\" \",str1)\ndef remove_all_non_ascii_chars_except_space_and_new_line(str1):\n    '''\n    Write a function to remove all non ascii characters from a given string.\n    '''\n    return re.sub(r\"\\p{Mn}+\\n\",\" \",str1)\ndef remove_all_non_ascii_chars_except_space_and_new_line_except_space(str1):\n    '''\n    Write a function to remove all non ascii characters from a given string.\n    '''\n    return re.sub(r\"\\p{Mn}+\\s*\",\" \",str1)\ndef remove_all_non_ascii_chars_except_space_and_new_line_except_space_and_new_line(str1):\n    '''\n    Write a function to remove all non ascii characters from a given string.\n    '''\n    return re.sub(r\"\\p{Mn}+\\s*\\n+\\s*\",\" \",str1)\ndef remove_all_non_ascii_chars_except_space_and_new_line_except_space_and_new_line_except_space(str1):\n    '''\n    Write a function to remove all non ascii characters from a given string.\n    '''\n    return re.sub(r\"\\p{Mn}+\\s*\\n+\\s*\\n+\\s*\",\" \",str1)\ndef remove_all_non_ascii_chars_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line(str1):\n    '''\n    Write a function to remove all non ascii characters from a given string.\n    '''\n    return re.sub(r\"\\p{Mn}+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\",\" \",str1)\ndef remove_all_non_ascii_chars_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space(str1):\n    '''\n    Write a function to remove all non ascii characters from a given string.\n    '''\n    return re.sub(r\"\\p{Mn}+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\",\" \",str1)\ndef remove_all_non_ascii_chars_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space(str1):\n    '''\n    Write a function to remove all non ascii characters from a given string.\n    '''\n    return re.sub(r\"\\p{Mn}+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\",\" \",str1)\ndef remove_all_non_ascii_chars_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space(str1):\n    '''\n    Write a function to remove all non ascii characters from a given string.\n    '''\n    return re.sub(r\"\\p{Mn}+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\\n+\\s*\",\" \",str1)\ndef remove_all_non_ascii_chars_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new_line_except_space_and_new"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = str1.upper()\n    return res\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #return re.sub(r'[A-Z]', '', str1)\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #create a new string\n    newstr = ''\n    #for each letter in the string\n    for i in range(len(str1)):\n        #add to the new string the new letter that is lowercase\n        if str1[i].islower():\n            newstr+=str1[i]\n    #return the new string\n    return newstr\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = \"\"\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].islower():\n            res = res + str1[i]\n    return res\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join([ch for ch in str1 if ch not in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"])\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # set to be all uppercase\n    new_str = set(str1)\n    for c in str1:\n        if c.isupper():\n            new_str.remove(c)\n    return ''.join(new_str)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r\"[A-Z]\", \"\", str1)\n    return str2\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [] \n    for i in lst: \n        res.append(i[0]) \n    return res \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = [lst[i][0] for i in range(len(lst))] \n    return lst \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [] \n    for i in lst: \n        res.append(i[0]) \n    return res \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst=[]\n    for item in lst:\n        new_lst.append(item[0])\n    return new_lst\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # lst = [[3, 4, 5], [4, 5, 6], [7, 8], [9], [10, 11]]\n    # lst = [[3, 4, 5], [4, 5, 6], [7, 8], [9], [10, 11], [12, 13, 14], [15, 16, 17]]\n    lst2 = []\n    for i in lst:\n        lst2.append(i[0])\n    return lst2\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n    \ndef Extract2(lst): \n    '''\n    Write a python function to get the last element of each sublist.\n    '''\n    return [x[-1] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = [item[0] for item in lst]\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [l[0] for l in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for letter in str:\n        if letter.isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    d={\"UPPER_CASE\":0, \"LOWER_CASE\":0}\n    for c in str:\n        if c.isupper():\n            d[\"UPPER_CASE\"]+=1\n        elif c.islower():\n            d[\"LOWER_CASE\"]+=1\n        else:\n            pass\n    print (\"Original String : \", str)\n    print (\"No. of Upper case characters : \", d[\"UPPER_CASE\"])\n    print (\"No. of Lower case Characters : \", d[\"LOWER_CASE\"])\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for s in str:\n        if s.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for x in range(0, len(str)):\n        if str[x].isupper():\n            count += 1\n    print(\"Number of upper case characters: \", count)\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if(i.isupper()):\n            ctr=ctr+1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for char in str:\n        if char.isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] >= 'A' and str[i] <= 'Z':\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    all_combinations = []\n    for i in range(1, n+1):\n        combinations = itertools.combinations(list1, i)\n        for j in combinations:\n            all_combinations.append(list(j))\n    return all_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    if len(list1) == 0:\n        return list2\n    elif len(list1) == 1:\n        list2.append(list1)\n        return list2\n    else:\n        list2 = combinations_list(list1[1:])\n        for i in range(0,len(list1)):\n            temp = [list1[i]]\n            temp2 = combinations_list(list1[:i]+list1[i+1:])\n            list2 = list2 + temp + temp2\n        return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) > 1:\n        for i in list1:\n            temp = [i]\n            result = result + combinations_list(list1[list1.index(i)+1:])\n    else:\n        result.append(list1)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    def permutations(first, rest):\n        if not rest:\n            res.append(first)\n        else:\n            first_item = rest[0]\n            rest_rest = rest[1:]\n            permutations(first + [first_item], rest_rest)\n            permutations(first, rest_rest)\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    elif len(list1) == 2:\n        return [[list1[0], list1[1]], [list1[1], list1[0]]]\n    else:\n        result = []\n        for i in range(len(list1)):\n            list2 = list1[:i] + list1[i+1:]\n            for x in combinations_list(list2):\n                result.append([list1[i]] + x)\n        return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1 == []:\n        return [[]]\n    else:\n        first = list1[0]\n        rest = list1[1:]\n        rest_combos = combinations_list(rest)\n        result = []\n        for r in rest_combos:\n            result.append([first]+r)\n        return result+rest_combos\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        list_combinations = []\n        for i in range(len(list1)):\n            list2 = list1[:i] + list1[i+1:]\n            for element in combinations_list(list2):\n                list_combinations.append([list1[i]] + element)\n        return list_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return [[]]\n    return_list = []\n    for x in range(len(list1)):\n        list2 = [element for index, element in enumerate(list1) if index!= x]\n        for y in combinations_list(list2):\n            return_list.append([list1[x]] + y)\n    return return_list\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n    if len(list1)==1:\n        return [list1]\n    combinations_list = []\n    for i in range(len(list1)):\n        sub_list = list1[0:i] + list1[i+1:]\n        for sub_list_item in combinations_list(sub_list):\n            combinations_list.append([list1[i]] + sub_list_item)\n    return combinations_list\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    print (list1)\n    list1 = list(list1)\n    if len(list1) == 1:\n        return [list1]\n    else:\n        r = []\n        for i in range(len(list1)):\n            print (i)\n            l = list1[0:i] + list1[i+1:]\n            for x in combinations_list(l):\n                r.append([list1[i]]+x)\n        return r\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_ending = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending = max_ending * arr[i]\n        else:\n            max_ending = arr[i]\n        max_so_far = max(max_ending, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = arr[0]\n    max_start = 0\n    max_end = 0\n    min_prod = arr[0]\n    min_start = 0\n    min_end = 0\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_end += 1\n            max_prod = max(max_prod, arr[i])\n        else:\n            if arr[i] < 0:\n                min_end += 1\n                min_prod = min(min_prod, arr[i])\n            else:\n                max_start = i - 1\n                min_start = i - 1\n                max_end = i\n                min_end = i\n        if i == len(arr) - 1:\n            if max_start == i - 1:\n                max_end = i + 1\n            if min_start == i - 1:\n                min_end = i + 1\n            if min_prod > max_prod:\n                max_prod = min_prod\n            if max_prod > max_prod:\n                max_prod = max_prod\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global result\n    global k\n    result = arr[0]\n    for i in range(1, len(arr)):\n        for j in range(i, len(arr)):\n            tmp = 1\n            for m in arr[i:j+1]:\n                tmp *= m\n            if tmp > result:\n                result = tmp\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    local_max = float('-inf')\n    global_max = float('-inf')\n    for i in range(len(arr)):\n        local_max = max(arr[i], arr[i] * local_max)\n        if local_max > global_max:\n            global_max = local_max\n    return global_max\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    curr_min, curr_max = arr[0], arr[0]\n    max_prod, min_prod = arr[0], arr[0]\n    for i in range(1, len(arr)):\n        # if arr[i] is positive, update max_prod and min_prod\n        if arr[i] < 0:\n            max_prod, min_prod = curr_max, curr_min\n        curr_max = max(curr_max * arr[i], arr[i])\n        curr_min = min(curr_min * arr[i], arr[i])\n        # compare max_prod and min_prod with curr_max and curr_min\n        max_prod = max(max_prod, curr_max)\n        min_prod = min(min_prod, curr_min)\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    curr_min = arr[0]\n    curr_max = arr[0]\n    max_prod = arr[0]\n    for num in arr[1:]:\n        curr_min = min(curr_min * num, num)\n        curr_max = max(curr_max * num, num)\n        max_prod = max(max_prod, curr_max)\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    #brute force algorithm\n    product = arr[0]\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = max(product, arr[i]*arr[j])\n    return product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_max, current_min = current_min, current_max\n        current_max = max(current_max * arr[i], arr[i])\n        current_min = min(current_min * arr[i], arr[i])\n        max_product = max(max_product, current_max)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    result = [0, 0]\n    max_product = arr[0]\n    for num in arr:\n        if num > max_product:\n            max_product = num\n        if max_product < 0:\n            max_product = num\n        result[0] += num\n    min_product = arr[0]\n    for num in arr:\n        if num < min_product:\n            min_product = num\n        if min_product > 0:\n            result[1] += num\n    return max(result)\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return\n    elif len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # dict = {'a': 1, 'b': 2, 'c': 1, 'd': 4, 'e': 4}\n    # n = '1'\n    if len(dict) == len(n):\n        pass\n    else:\n        print('The length of the dict and the number must be equal')\n        return False\n    # for key, value in dict.items():\n    #     if value == n:\n    #         pass\n    #     else:\n    #         return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if(dict[key] == dict[key-1]):\n            n = n + 1\n    return n\n    \ndef count_same(list):\n    '''\n    Write a function to count the number of same elements in a list.\n    '''\n    n = 1\n    for i in range(len(list)-1):\n        if(list[i] == list[i+1]):\n            n = n + 1\n    return n\n    \ndef check_list(list):\n    '''\n    Write a function to check if all values in the list are same.\n    '''\n    return list[0] == list[-1]\n    \ndef check_str(str):\n    '''\n    Write a function to check if all characters in a string are the same.\n    '''\n    return str[0] == str[-1]\n    \ndef count_same_string(str):\n    '''\n    Write a function to count the number of same characters in a string.\n    '''\n    n = 1\n    for i in range(len(str)-1):\n        if(str[i] == str[i+1]):\n            n = n + 1\n    return n\n    \ndef rotate(arr, k):\n    '''\n    Write a function to rotate the array by k elements.\n    '''\n    return arr[k:] + arr[:k]\n    \ndef spiral(arr):\n    '''\n    Write a function to spiral print a matrix.\n    '''\n    if(len(arr) == 0 or len(arr[0]) == 0):\n        return\n    rows = len(arr)\n    cols = len(arr[0])\n    n = 0\n    # loop through all rows\n    for i in range(rows):\n        # loop through all columns\n        for j in range(cols):\n            print arr[i][j],\n            n = n + 1\n        print\n    return n\n    \ndef check_tup(tup):\n    '''\n    Write a function to check if a tuple is valid.\n    '''\n    n = 0\n    for i in tup:\n        if(i == tup[-1]):\n            n = n + 1\n        elif(i!= tup[tup.index(i) + 1]):\n            return False\n    return True\n    \ndef check_count_tup(tup):\n    '''\n    Write a function to check if a tuple has equal numbers of positive and negative integers.\n    '''\n    n = 0\n    for i in tup:\n        if(i >= 0):\n            n = n + 1\n        else:\n            n = n - 1\n    return n == 0\n    \ndef check_left_right(tup):\n    '''\n    Write a function to check if a tuple is a left-to-right sequence.\n    '''\n    return tup[0] <= tup[-1]\n    \ndef check_up_down(tup):\n    '''\n    Write a function to check if a tuple is a up-to-down sequence.\n    '''\n    return tup[0] >= tup[-1]\n    \ndef check_sum(arr):\n    '''\n    Write a function to check if a list is sum of its consecutive elements.\n    '''\n    n = 0\n    for i in range(len(arr)-1):\n        if(arr[i] + arr[i+1] == arr[i+2]):\n            n = n + 1\n    return n\n    \ndef check_sub(arr):\n    '''\n    Write a function to check if a list is a subset of another.\n    '''\n    for i in range(len(arr)):\n        if(arr[i] not in arr[:i]):\n            return False\n    return True\n    \ndef check_perm(arr):\n    '''\n    Write a function to check if a list is a permutation of another.\n    '''\n    return sorted(arr) == sorted(arr[:])\n    \ndef check_repetition(arr):\n    '''\n    Write a function to check if a list has a repeating element.\n    '''\n    if(len(arr) == 1):\n        return True\n    elif(arr[0] == arr[-1]):\n        return check_repetition(arr[1:len(arr)-1])\n    else:\n        return False\n    \ndef check_equal_length(arr):\n    '''\n    Write a function to check if a list is an equal length.\n    '''\n    return len(arr) == len(arr[0])\n    \ndef check_reverse(arr):\n    '''\n    Write a function to check if a list is a reverse of another.\n    '''\n    return arr[::-1] == arr\n    \ndef check_rotation(arr):\n    '''\n    Write a function to check if a list is a rotation of another.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if(arr[i:i+n] == arr[i:] + arr[:i]):\n            return True\n    return False\n    \ndef check_reorder(arr):\n    '''\n    Write a function to check if a list is a reorder of another.\n    '''\n    if(len(arr) == 1):\n        return True\n    elif(len(arr) == 2):\n        return arr[0] == arr[1]\n    n = len(arr)\n    for i in range(n):\n        if(arr[i:i+n] == arr[i:] + arr[:i]):\n            return True\n    return False\n    \ndef check_sorted(arr):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return arr == sorted(arr)\n    \ndef check_valid_soln(arr):\n    '''\n    Write a function to check if a solution is valid.\n    '''\n    for i in range(len(arr)):\n        if(arr[i] < 0):\n            return False\n    return True\n    \ndef check_valid_soln_dict(arr):\n    '''\n    Write a function to check if a solution is valid.\n    '''\n    for i in range(len(arr)):\n        if(arr[i] < 0):\n            return False\n    return True\n    \ndef check_valid_soln_set(arr):\n    '''\n    Write a function to check if a solution is valid.\n    '''\n    for i in range(len(arr)):\n        if(arr[i] < 0):\n            return False\n    return True\n    \ndef check_valid_soln_tup(tup):\n    '''\n    Write a function to check if a solution is valid.\n    '''\n    for i in tup:\n        if(i < 0):\n            return False\n    return True\n    \ndef check_valid_soln_list(arr):\n    '''\n    Write a function to check if a solution is valid.\n    '''\n    for i in range(len(arr)):\n        if(arr[i] < 0):\n            return False\n    return True\n    \ndef check_valid_soln_list_set(arr):\n    '''\n    Write a function to check if a solution is valid.\n    '''\n    for i in range(len(arr)):\n        if(arr[i] < 0):\n            return False\n    return True\n    \ndef check_valid_soln_list_dict(arr):\n    '''\n    Write a function to check if a solution is valid.\n    '''\n    for i in range(len(arr)):\n        if(arr[i] < 0):\n            return False\n    return True\n    \ndef check_valid_soln_list_tup(tup):\n    '''\n    Write a function to check if a solution is valid.\n    '''\n    for i in tup:\n        if(i < 0):\n            return False\n    return True\n    \ndef check_valid_soln_list_bool(arr):\n    '''\n    Write a function to check if a solution is valid.\n    '''\n    for i in range(len(arr)):\n        if(arr[i] < 0):\n            return False\n    return True\n    \ndef check_valid_soln_list_str(arr):"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print('All values are same')\n    else:\n        print('Not all values are same')\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    result = True\n    for key in dict:\n        if dict[key]!= dict[key]:\n            result = False\n    return result\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if(dict[i]!= dict[n]):\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key,value in dict.items():\n        if n!= value:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    keys = [key for key in dict.keys()]\n    if len(keys) < 2:\n        return True\n    if len(keys) == 2:\n        if keys[0] == keys[1]:\n            return check_value(dict[keys[0]], n)\n        else:\n            return False\n    return check_value(dict[keys[0]], n) and check_value(dict[keys[1]], n)\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if dict[key]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= n:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for (k,v) in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.iteritems():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in list(dict1.keys()):\n        if not dict1[key]:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.iteritems():\n        if value!= None:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if isinstance(v, dict):\n            drop_empty(v)\n        elif isinstance(v, list):\n            for i, e in enumerate(v):\n                if not e:\n                    v.pop(i)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    newdict = {}\n    for key, value in dict1.iteritems():\n        if value!= '':\n            newdict[key] = value\n    return newdict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for (key, value) in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    newdict = {}\n    for k,v in dict1.items():\n        if v!= '':\n            newdict[k] = v\n    return newdict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if dict1[key] == '':\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    current_prod = 1\n    for i in range(len(arr)):\n        current_prod = 1\n        for j in range(i, len(arr)):\n            current_prod *= arr[j]\n            max_prod = max(max_prod, current_prod)\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n    for num in arr[1:]:\n        current_product *= num\n        if current_product < num:\n            current_product = num\n        max_product = max(max_product, current_product)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    min_so_far = max_so_far = arr[0]\n    \n    for n in arr[1:]:\n        max_so_far, min_so_far = max(max_so_far * n, min_so_far * n, n), min(max_so_far * n, min_so_far * n, n)\n    \n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    dp = [0 for i in range(len(arr))]\n    \n    \n    # dp = [0 for i in range(len(arr))]\n    #\n    # dp[0] = arr[0]\n    # for i in range(1,len(arr)):\n    #     dp[i] = max(dp[i-1]*arr[i],arr[i])\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_val = arr[0]\n    curr_max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            curr_max = max(curr_max * arr[i], arr[i])\n        else:\n            curr_max = arr[i]\n        max_val = max(max_val, curr_max)\n    return max_val\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    min_val = arr[0]\n    max_val = arr[0]\n    max_product = arr[0]\n    for num in arr[1:]:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n        max_product = max(max_product, max_val * min_val)\n        \n    return max_product\n    \ndef max_product_2(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    min_val = arr[0]\n    max_val = arr[0]\n    max_product = arr[0]\n    for num in arr[1:]:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n        max_product = max(max_product, max_val * min_val)\n        \n    return max_product\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    l = len(arr)\n    dp = [[0 for i in xrange(l)] for j in xrange(l)]\n    #print dp\n    for i in xrange(l):\n        dp[i][i] = arr[i]\n        for j in xrange(i+1,l):\n            if i==0:\n                dp[i][j] = arr[j]\n            elif i==j:\n                dp[i][j] = arr[i]*arr[j]\n            else:\n                dp[i][j] = max(arr[i]*arr[j],dp[i+1][j-1],dp[i][j-1])\n    #print dp\n    return dp[0][l-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if arr == None or len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if type(test_tup) == tuple:\n        # Write your code here\n        if len(test_tup) > 1:\n            return (test_tup[0] + test_tup[1],)\n    return None\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # your code goes here\n    sum = 0\n    for i in range(len(test_tup)-1):\n        sum += abs(test_tup[i] + test_tup[i+1])\n    return sum\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 2:\n        return test_tup\n    else:\n        return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise = []\n    #iterate over the length of the tuple\n    for index in range(len(test_tup)):\n        #if the index is the length of the tuple, then add the last and first element\n        if index == len(test_tup)-1:\n            pairwise.append(test_tup[index] + test_tup[0])\n        #else add the current index and index+1\n        else:\n            pairwise.append(test_tup[index] + test_tup[index+1])\n    #return the resulting list\n    return pairwise\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)==1:\n        return test_tup[0]\n    else:\n        return test_tup[0]+test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup\n    else:\n        return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return(test_tup[0] + test_tup[1], test_tup[1] + test_tup[2])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup\n    len_tup = len(tup)\n    if len_tup == 1:\n        return tup\n    else:\n        for i in range(len_tup - 1):\n            tup = tup[:i+1] + (tup[i] + tup[i+1],) + tup[i+2:]\n    return tup\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod*i\n    return prod%n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    accum = 1\n    for i in range(len(arr)):\n        accum = (accum * arr[i]) % n\n    return accum\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 1:\n        return 1\n    total = 1\n    for elem in arr:\n        total *= elem\n    return total % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x,y: x*y % n, arr)\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for ele in arr:\n        prod = (prod * ele)%n\n    return prod\ndef efficient_arithmetic(n):\n    '''\n    Find a+b+c such that a+b+c = n\n    '''\n    for a in range(1,n):\n        for b in range(1,n):\n            if a+b+n-a-b==n:\n                print a,b\n                return True\n    return False\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # n is the product of the array\n    # arr is the array\n    # Note: you can use the property of modular arithmetic to compute the product of an array\n    # return the remainder of the product of the array and n\n    # return product % n\n    m = 1\n    for i in range(len(arr)):\n        m = (m * arr[i]) % n\n    return m\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    multiplied = 1\n    for i in arr:\n        multiplied *= i % n\n    return multiplied % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Check if n is negative\n    if n < 0:\n        return\n    \n    # If n is 0, return 0\n    if n == 0:\n        return\n    \n    # If n is 1, return 0\n    if n == 1:\n        return 0\n    \n    # If n is 2, return 1\n    if n == 2:\n        return 1\n    \n    # If n is 3, return 2\n    if n == 3:\n        return 2\n    \n    # If n is greater than 3, find the remainder modulo n\n    if n > 3:\n        remainder = (n % 3)\n        if remainder == 0:\n            remainder = 3\n        \n        return find_remainder(arr, remainder) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res *= i\n        res %= n\n    return res\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    elif len(l) == 1:\n        return True\n    elif l[0] + 1 == l[1]:\n        return check_Consecutive(l[1:])\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    d = {}\n    for e in l:\n        if e in d:\n            d[e] = d[e] + 1\n        else:\n            d[e] = 1\n    for e in d:\n        if d[e] > 1:\n            return False\n    return True\n    \n    \n    "
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]!=l[i]+1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n    \ndef check_String(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return s[::-1] == s\n    \ndef permutations(arr):\n    '''\n    Write a python function to permute an array.\n    '''\n    temp = arr[:]\n    perm = []\n    if len(arr) <= 1:\n        return [arr]\n    else:\n        for i in range(len(arr)):\n            for j in permutations(temp[:i] + temp[i+1:]):\n                perm.append([arr[i]] + j)\n    return perm\n    \ndef permute_reorder(arr):\n    '''\n    Write a python function to reorder an array.\n    '''\n    perm = permutations(arr)\n    for i in perm:\n        if check_Consecutive(i):\n            return i\n    return []\n    \ndef largest_number(arr):\n    '''\n    Write a python function to find the largest number in an array.\n    '''\n    arr = sorted(arr, reverse=True)\n    largest = ''.join(arr)\n    return int(largest)\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==0:\n        return True\n    elif len(l)==1:\n        return True\n    elif l[0]+1==l[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return True\n    if l[0] + 1 == l[1]: \n        return check_Consecutive(l[1:])\n    else: \n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l) + 1))\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    print([(l[i], l[i+1]) for i in range(len(l)-1) if l[i] + 1 == l[i+1]])\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if not test_list1:\n        return []\n    return [tuple1 for tuple1 in test_list1 if tuple1 in test_list2]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # for i in range(len(test_list1)):\n    #     if test_list1[i] in test_list2:\n    #         print test_list1[i]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) < len(test_list2):\n        return [t for t in test_list1 if t in test_list2]\n    else:\n        return [t for t in test_list2 if t in test_list1]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # you can also use a set of sets to make this faster\n    return list(set(test_list1).intersection(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for ele in test_list1:\n        if ele in test_list2:\n            result.append(ele)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    if len(test_list1) > len(test_list2):\n        return list(set(test_list1) & set(test_list2))\n    else:\n        return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    assert isinstance(test_list1, tuple)\n    assert isinstance(test_list2, tuple)\n    return tuple(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for c in str1:\n        if c == ch:\n            str2 += newch\n        else:\n            str2 += c\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    str1[2] = newch\n    str1 = ''.join(str1)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str1 = str1.replace(ch,newch)\n    return new_str1\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,newch)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = str1.replace(ch,newch)\n    return result\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return newch + str1.replace(ch,'')\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=list(str1)\n    for i in range(len(str1)):\n        if(str1[i]==ch):\n            str1[i]=newch\n    return ''.join(str1)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    if not dict1:\n        return []\n    else:\n        return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(),key=lambda k:k[1],reverse=True)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    \ndef frequency_sort(list1):\n    '''\n    Write a function to sort a list of tuples by frequency of number.\n    The input will be a list of tuples, with each tuple consisting of a single integer.\n    The output should be a list of tuples, with each tuple consisting of two integers.\n    '''\n    sort_list = []\n    for x in list1:\n        sort_list.append([x, list1.count(x)])\n    return sorted(sort_list, key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    if type(dict1) == str:\n        print \"dictionary is not correct\"\n        return\n    dic = dict1\n    for i in dic:\n        dic[i] = dict1[i]\n    dic = sorted(dic.items(),key = lambda x:x[1],reverse=True)\n    return dic\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda t: t[1])\n    return sorted_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big = max(nums)\n    small = min(nums)\n    return big + small\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(max(nums), sum(min(nums)))\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(max(nums), sum(min(nums)))\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(max(nums) - min(nums), min(nums) + max(nums))\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    result = []\n    for index in range(len(nums)):\n        if nums[index] > sum(nums) - nums[index]:\n            result.append(nums[index])\n        else:\n            result.append(sum(nums) - nums[index])\n    return sum(result)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = min_num = 0\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    small = min(nums)\n    big = max(nums)\n    return small + big\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_sum = 0\n    small_sum = 0\n    for i in nums:\n        if i > big_sum:\n            big_sum = i\n        elif i < small_sum:\n            small_sum = i\n    return big_sum + small_sum\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if(string.islower()):\n        return True\n    return False\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # return re.sub(r'\\b[a-z]{1,}\\b', '', str1)\n    return re.sub(r'\\b[a-z]{1,}\\b', '', str1)\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # return re.sub(r'[A-Z]{1,}\\b', '', str1)\n    return re.sub(r'[A-Z]{1,}\\b', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # code here\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n    \ndef check_anagrams(str1):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    # code here\n    if sorted(str1) == sorted(str1.lower()):\n        return True\n    return False\n    \ndef index_to_word(index, data):\n    '''\n    Write a function to convert an index to a word in a data set\n    '''\n    # code here\n    return data[index]\n    \ndef word_to_index(word, data):\n    '''\n    Write a function to convert a word to an index in a data set\n    '''\n    # code here\n    return data.index(word)\n    \ndef count_words_given_length(length, data):\n    '''\n    Write a function to count the number of words in a data set of a given length\n    '''\n    # code here\n    return len(filter(lambda x: len(x)==length, data))\n    \ndef check_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    # code here\n    return str1==str1[::-1]\n    \ndef check_pallindrome_without_split(str1):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    # code here\n    if not str1:\n        return True\n    if len(str1)==1:\n        return True\n    if str1[0]==str1[-1]:\n        return check_pallindrome_without_split(str1[1:-1])\n    return False\n    \ndef count_non_repeat_characters(str1):\n    '''\n    Write a function to count the number of non-repeating characters in a given string.\n    '''\n    # code here\n    return len(set(str1))\n    \ndef count_repeat_characters(str1):\n    '''\n    Write a function to count the number of repeating characters in a given string.\n    '''\n    # code here\n    return len(set(str1)) - count_non_repeat_characters(str1)\n    \ndef get_longest_palindrome(str1):\n    '''\n    Write a function to find the longest palindromic substring in a given string\n    '''\n    # code here\n    str1 = str1.replace(' ', '')\n    if len(str1)==1:\n        return str1\n    max_str = ''\n    for i in range(len(str1)):\n        if len(max_str)<=len(str1[i:i+len(max_str)+1]):\n            max_str = str1[i:i+len(max_str)+1]\n    return max_str\n    \ndef get_longest_palindrome_2(str1):\n    '''\n    Write a function to find the longest palindromic substring in a given string\n    '''\n    # code here\n    str1 = str1.replace(' ', '')\n    return max([str1[i:i+len(str1)] for i in range(len(str1))], key=len)\n    \ndef check_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams of each other\n    '''\n    # code here\n    return sorted(str1)==sorted(str2)\n    \ndef check_anagram_without_sort(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams of each other\n    '''\n    # code here\n    if not str1 and not str2:\n        return True\n    if len(str1)!= len(str2):\n        return False\n    dict1 = {}\n    dict2 = {}\n    for char in str1:\n        if char in dict1:\n            dict1[char] += 1\n        else:\n            dict1[char] = 1\n    for char in str2:\n        if char in dict2:\n            dict2[char] += 1\n        else:\n            dict2[char] = 1\n    return dict1 == dict2\n    \ndef get_longest_anagram(str1, str2):\n    '''\n    Write a function to find the longest anagram of two strings\n    '''\n    # code here\n    return max([str1[i:i+len(str2)] for i in range(len(str1)) if str1[i:i+len(str2)]==str2], key=len)\n    \ndef get_longest_anagram_2(str1, str2):\n    '''\n    Write a function to find the longest anagram of two strings\n    '''\n    # code here\n    str1 = str1.replace(' ', '')\n    str2 = str2.replace(' ', '')\n    if len(str1)!= len(str2):\n        return False\n    return max([str1[i:i+len(str2)] for i in range(len(str1)) if str1[i:i+len(str2)]==str2], key=len)\n    \ndef check_anagram_3(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams of each other\n    '''\n    # code here\n    if not str1 and not str2:\n        return True\n    if len(str1)!= len(str2):\n        return False\n    d1 = {}\n    d2 = {}\n    for char in str1:\n        if char in d1:\n            d1[char] += 1\n        else:\n            d1[char] = 1\n    for char in str2:\n        if char in d2:\n            d2[char] += 1\n        else:\n            d2[char] = 1\n    return d1 == d2\n    \ndef reverse_anagram(str1):\n    '''\n    Write a function to reverse the characters in a given string\n    '''\n    # code here\n    return ''.join(reversed(str1))\n    \ndef is_lowercase(str1):\n    '''\n    Write a function to check if all the characters in a given string are lowercase\n    '''\n    # code here\n    for char in str1:\n        if char not in \"abcdefghijklmnopqrstuvwxyz\":\n            return False\n    return True\n    \ndef is_uppercase(str1):\n    '''\n    Write a function to check if all the characters in a given string are uppercase\n    '''\n    # code here\n    for char in str1:\n        if char not in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            return False\n    return True\n    \ndef get_lower_indices(str1):\n    '''\n    Write a function to return the indices of all the lowercase characters in a given string\n    '''\n    # code here\n    return [i for i, x in enumerate(str1) if x.islower()]\n    \ndef get_upper_indices(str1):\n    '''\n    Write a function to return the indices of all the uppercase characters in a given string\n    '''\n    # code here\n    return [i for i, x in enumerate(str1) if x.isupper()]\n    \ndef is_alphanumeric(str1):\n    '''\n    Write a function to check if all the characters in a given string are alphanumeric\n    '''\n    # code here\n    return str1.isalnum()\n    \ndef get_alphanumeric_indices(str1):\n    '''\n    Write a function to return the indices of all the alphanumeric characters in a given string\n    '''\n    # code here\n    return [i for i, x in enumerate(str1) if x.isalnum()]\n    \ndef get_uppercase_alphanumeric_indices(str1):\n    '''\n    Write a function to return the indices of all the uppercase and alphanumeric characters in a given string\n    '''\n    # code here\n    return [i for i, x in enumerate(str1) if x.isa"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = re.sub(r'[a-z]+', '', str1)\n    return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]+', '', str1, flags=re.I)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1\n    while str2.find(\"ab\") >= 0:\n        str2 = str2.replace(\"ab\", \"\", 1)\n    print(str2)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]','',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    tstr1 = str1\n    lstr1 = tstr1.lower()\n    return lstr1\n    \ndef remove_numbers(str1):\n    '''\n    Write a function to remove all the numbers from a given string.\n    '''\n    tstr1 = str1\n    lstr1 = re.sub(r'\\d+','',tstr1)\n    return lstr1\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # a Python program to find the first digit of a given number\n    # initializing the string to zero \n    n = 0\n    # looping through the integer n\n    while (n) :\n    # checking whether the integer is zero \n        if n == 0 :\n            # returning the value of n\n            return 0\n        else :\n            # adding the value of n to the string\n            n = n + 1\n            # returning the value of n\n            return n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if (n < 10) :  \n        return n\n    else : \n        return first_Digit(n//10) \n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    if (n % 10) : \n        return n % 10\n    else :\n        return last_Digit(n//10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return int(n / 10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\ndef first_Digit_str(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n>9 :\n        n = n/10\n    return int(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10**1)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    return n//10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10)\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2==1]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    a = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            a.append(list[i])\n    return a\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [int(i) for i in list if int(i)%2!=0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Your Code Here\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_of_odds = []\n    for index in range(0,len(list)):\n        if list[index]%2!= 0:\n            list_of_odds.append(list[index])\n    return list_of_odds\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    list_odd = []\n    for i in list:\n        if i % 2!= 0:\n            list_odd.append(i)\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!=0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    return [elem for elem in list if elem % 2!= 0]\n    \nprint Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 0 :\n        return 0\n    if n == 1 :\n        return 1\n    return (n * (n + 1)) ** 2 / 4 - sum_cubes(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(range(1, n+1))**3 - sum(range(1, n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return ((n*(n+1)*(2*n+1))/6) - sum_of_cubes(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**3\n    return sum**3 -sum\ndef output(n) :\n    '''\n    Write a python function to find the difference between the sum of the squares of the first n natural numbers and the square of the sum of the first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    return sum*sum-sum**2\ndef find_quad_root(n):\n    '''\n    Write a python function to find the quadratic root of a number.\n    '''\n    count=0\n    while True:\n        count=count+1\n        x=n**0.5\n        if x==int(x):\n            return int(x)\n            break\n        else:\n            n=n+1\ndef find_quad_root2(n):\n    '''\n    Write a python function to find the quadratic root of a number.\n    '''\n    count=0\n    while True:\n        count=count+1\n        x=n**0.5\n        if x==int(x):\n            return int(x)\n            break\n        else:\n            n=n+1\ndef find_quad_root3(n):\n    '''\n    Write a python function to find the quadratic root of a number.\n    '''\n    count=0\n    while True:\n        count=count+1\n        x=n**0.5\n        if x==int(x):\n            return int(x)\n            break\n        else:\n            n=n+1\ndef find_quad_root4(n):\n    '''\n    Write a python function to find the quadratic root of a number.\n    '''\n    count=0\n    while True:\n        count=count+1\n        x=n**0.5\n        if x==int(x):\n            return int(x)\n            break\n        else:\n            n=n+1\ndef find_quad_root5(n):\n    '''\n    Write a python function to find the quadratic root of a number.\n    '''\n    count=0\n    while True:\n        count=count+1\n        x=n**0.5\n        if x==int(x):\n            return int(x)\n            break\n        else:\n            n=n+1\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(range(n+1))**3 - sum(range(n+1))**2\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n < 1 :\n        return -1\n    else:\n        return sum([i**3 for i in range(1,n+1)]) - sum([i for i in range(1,n+1)])**3\nprint(difference(10))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)/6\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return int(((n**3)*(n+1)/2)**2) - int(n*(n+1)*(2*n+1)/6)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(n)]) - sum([i for i in range(n)])\n    \nif __name__ == '__main__' :\n    print(difference(100)"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Python code to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    # sum1 = 0\n    # for i in range(1,n+1) : \n    #     sum1 += i**3\n    # sum2 = 0\n    # for i in range(1,n+1) : \n    #     sum2 += i\n    # return sum1-sum2\n    # return ((n**3) - (n**2))/2\n    return (n**3/3) - (n**2/2)\n    "
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return count_Pairs(A,N)\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N): \n        for j in range(i+1,N): \n            if (A[i] ^ A[j]) & 1 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if len(A)%2!= 0 :\n        return -1\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return sum(1 for i in xrange(N) if A[i]^A[(i+1)%N]^A[(i+2)%N]^A[(i+3)%N]^A[(i+4)%N]^A[(i+5)%N]^A[(i+6)%N]^A[(i+7)%N]^A[(i+8)%N]^A[(i+9)%N]^A[(i+10)%N]^A[(i+11)%N]^A[(i+12)%N]^A[(i+13)%N]^A[(i+14)%N]^A[(i+15)%N]^A[(i+16)%N]^A[(i+17)%N]^A[(i+18)%N]^A[(i+19)%N]^A[(i+20)%N]^A[(i+21)%N]^A[(i+22)%N]^A[(i+23)%N]^A[(i+24)%N]^A[(i+25)%N]^A[(i+26)%N]^A[(i+27)%N]^A[(i+28)%N]^A[(i+29)%N]^A[(i+30)%N]^A[(i+31)%N]^A[(i+32)%N]^A[(i+33)%N]^A[(i+34)%N]^A[(i+35)%N]^A[(i+36)%N]^A[(i+37)%N]^A[(i+38)%N]^A[(i+39)%N]^A[(i+40)%N]^A[(i+41)%N]^A[(i+42)%N]^A[(i+43)%N]^A[(i+44)%N]^A[(i+45)%N]^A[(i+46)%N]^A[(i+47)%N]^A[(i+48)%N]^A[(i+49)%N]^A[(i+50)%N]^A[(i+51)%N]^A[(i+52)%N]^A[(i+53)%N]^A[(i+54)%N]^A[(i+55)%N]^A[(i+56)%N]^A[(i+57)%N]^A[(i+58)%N]^A[(i+59)%N]^A[(i+60)%N]^A[(i+61)%N]^A[(i+62)%N]^A[(i+63)%N]^A[(i+64)%N]^A[(i+65)%N]^A[(i+66)%N]^A[(i+67)%N]^A[(i+68)%N]^A[(i+69)%N]^A[(i+70)%N]^A[(i+71)%N]^A[(i+72)%N]^A[(i+73)%N]^A[(i+74)%N]^A[(i+75)%N]^A[(i+76)%N]^A[(i+77)%N]^A[(i+78)%N]^A[(i+79)%N]^A[(i+80)%N]^A[(i+81)%N]^A[(i+82)%N]^A[(i+83)%N]^A[(i+84)%N]^A[(i+85)%N]^A[(i+86)%N]^A[(i+87)%N]^A[(i+88)%N]^A[(i+89)%N]^A[(i+90)%N]^A[(i+91)%N]^A[(i+92)%N]^A[(i+93)%N]^A[(i+94)%N]^A[(i+95)%N]^A[(i+96)%N]^A[(i+97)%N]^A[(i+98)%N]^A[(i+99)%N]^A[(i+100)%N]^A[(i+101)%N]^A[(i+102)%N]^A[(i+103)%N]^A[(i+104)%N]^A[(i+105)%N]^A[(i+106)%N]^A[(i+107)%N]^A[(i+108)%N]^A[(i+109)%N]^A[(i+110)%N]^A[(i+111)%N]^A[(i+112)%N]^A[(i+113)%N]^A[(i+114)%N]^A[(i+115)%N]^A[(i+116)%N]^A[(i+117)%N]^A[(i+118)%N]^A[(i+119)%N]^A[(i+120)%N]^A[(i+121)%N]^A[(i+122)%N]^A[(i+123)%N]^A[(i+124)%N]^A[(i+125)%N]^A[(i+126)%N]^A[(i+127)%N]^A[(i+128)%N]^A[(i+129)%N]^A[(i+130)%N]^A[(i+131)%N]^A[(i+132)%N]^A[(i+133)%N]^A[(i+134)%N]^A[(i+135)%N]^A[(i+136)%N]^A[(i+137)%N]^A[(i+138)%N]^A[(i+139)%N]^A[(i+140)%N]^A[(i+141)%N]^A[(i+142)%N]^A[(i+143)%N]^A[(i+144)%N]^A[(i+145)%N]^A[(i+146)%N]^A[(i+147)%N]^A[(i+148)%N]^A[(i+149)%N]^A[(i+150)%N]^A[(i+151)%N]^A[(i+152)%N]^A[(i+153)%N]^A[(i+154)%N]^A[(i+155)%N]^A[(i+156)%N]^A[(i+157)%N]^A[(i+158)%N]^A[(i+159)%N]^A[(i+160)%N]^A[(i+161)%N]^A[(i+162)%N]^A[(i+163)%N]^A[(i+164)%N]^A[(i+165)%N]^A[(i+166)%N]^A[(i+167)%N]^A[(i+168)%N]^A[(i+169)%N]^A[(i+170)%N]^A[(i+171)%N]^A[(i+172)%N]^A[(i+173)%N]^A[(i+174)%N]^A[(i+175)%N]^A[(i+176)%N]^A[(i+177)%N]^A[(i+178)%N]^A[(i+179)%N]^A[(i+180)%N]^A[(i+18"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1 == 1:\n                return 1\n    return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1 == 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] == 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    XOR_Table = []\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) :\n            if A[i] ^ A[j] & 1 == 1 : \n                count += 1\n                XOR_Table.append((i,j))\n    return count, XOR_Table\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in xrange(0,N) : \n        for j in xrange(i+1,N) : \n            if (A[i]^A[j]) & 1 == 1 : \n                count = count + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1) :\n        if A[i]^A[i+1]&1 :\n            count = count + 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            new_string += string[i].lower()\n        elif string[i].islower():\n            new_string += string[i].upper()\n        else:\n            new_string += string[i]\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for letter in string:\n        new_string += toggle_letter(letter)\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for x in string:\n        if x.isupper():\n            new_string += x.lower()\n        else:\n            new_string += x.upper()\n    return new_string\n    \ndef check_palindrome(string):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) == 0:\n        return string\n    else:\n        return string[0].swapcase() + toggle_string(string[1:])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) < 2:\n        return string\n    else:\n        string_array = [char for char in string]\n        for i in range(1, len(string_array)):\n            if string_array[i].isupper():\n                string_array[i] = string_array[i].lower()\n            else:\n                string_array[i] = string_array[i].upper()\n        return ''.join(string_array)\n    \n    \ndef test_toggle_string():\n    assert toggle_string('abcd') == 'ABD'\n    assert toggle_string('adC') == 'abC'\n    assert toggle_string('dC') == 'Dc'\n    assert toggle_string('Dc') == 'Dc'\n    assert toggle_string('AAABBB') == 'aAAbbBB'\n    assert toggle_string('Hello') == 'elloH'\n    assert toggle_string('Abc') == 'Abc'\n    assert toggle_string('123') == '321'\n    assert toggle_string('a') == 'A'\n    assert toggle_string('aA') == 'Aa'\n    assert toggle_string('aAa') == 'aAa'\n    assert toggle_string('aaa') == 'aaa'\n    \n    \nif __name__ == '__main__':\n    test_toggle_string("
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        new_string += char.swapcase()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    newstring = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            newstring += string[i].lower()\n        elif string[i].islower():\n            newstring += string[i].upper()\n        else:\n            newstring += string[i]\n    return newstring\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x:x.swapcase(), string))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        raise Exception('Number lengths must be the same')\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = int(n1)\n    n2 = int(n2)\n    \n    if n1 == n2:\n        return 0\n    \n    if n1 > n2:\n        n1, n2 = n2, n1\n        \n    r = n1 - n2\n    \n    d = 0\n    \n    while r > 0:\n        d += r % 10\n        r /= 10\n    \n    return d\n    "
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = abs(n1), abs(n2)\n    dif = 0\n    while n1 > 0:\n        if n1 % 10 > n2 % 10:\n            dif += n1 % 10 - n2 % 10\n            n1 //= 10\n        else:\n            n1 //= 10\n    return dif\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    sum = 0\n    if len(n1) == len(n2):\n        for i in range(len(n1)):\n            sum += abs(int(n1[i]) - int(n2[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1, d2 = 0, 0\n    if n1 > n2:\n        d1, d2 = n2, n1\n    else:\n        d1, d2 = n1, n2\n    tot = 0\n    while d1 > 0:\n        d1, rem = divmod(d1, 10)\n        tot += abs(rem-d2)\n    return tot\n    \n    \ndef range_squared(start, end):\n    '''\n    Write a python function to find the total squared range of the numbers between start and end.\n    '''\n    return (end-start)**2\n    \n    \ndef is_magic_square(grid):\n    '''\n    Write a python function to determine if a grid is a magic square. \n    '''\n    \n    # total rows and columns\n    rows, cols = len(grid), len(grid[0])\n    \n    # check each row\n    for row in grid:\n        if len(row)!= cols:\n            return False\n    \n    # check each column\n    for i in range(cols):\n        total = 0\n        for row in grid:\n            total += row[i]\n        if total!= rows * cols:\n            return False\n    \n    # check each diagonal\n    total = 0\n    for i in range(cols):\n        total += grid[i][i]\n    if total!= rows * cols:\n        return False\n    total = 0\n    for i in range(rows):\n        total += grid[i][rows-1-i]\n    if total!= rows * cols:\n        return False\n    \n    return True\n    \n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(str(n1)[i]) - int(str(n2)[i])) for i in range(len(str(n1)))]\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = abs(n1), abs(n2)\n    return sum(n1[i] - n2[i] for i in range(len(n1)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = str(n1)\n    num2 = str(n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    summ = 0\n    if diff > 0:\n        while diff > 0:\n            summ += diff % 10\n            diff = diff // 10\n    return summ\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -sys.maxint-1\n    for i in xrange(size):\n        current_sum = 0\n        for j in xrange(i, size):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_max = a[0]\n    max_so_far = a[0]\n    for i in range(1, size):\n        current_max = max(a[i], current_max + a[i])\n        max_so_far = max(current_max, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # max_sum = a[0]\n    # for i in range(1, size):\n    #     max_sum = max(max_sum, max_sum+a[i])\n    # return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n        \ndef max_sub_array_sum_2(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray. \n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n        \ndef max_sub_array_sum_3(a, size):\n    '''\n    Best solution. The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(0,size):\n        max_ending_here = max_ending_here + a[i]\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_4(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_5(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(0,size):\n        max_ending_here = max_ending_here + a[i]\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_6(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_7(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_8(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_9(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_10(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_11(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_12(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_13(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_14(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_15(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    ma"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    \n    max_so_far = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_so_far = max(max_so_far, curr_sum)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 1:\n        return None\n    if size == 1:\n        return a[0]\n    max_ending_here = a[0]\n    max_so_far = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here+a[i])\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    max_ending_here = max_so_far = a[size - 1]\n    for i in range(size - 2, -1, -1):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    elif size == 2:\n        return max(a[0], a[1])\n    else:\n        arr = a[:size]\n        #print arr\n        return max(arr[0], arr[1], max_sub_array_sum(arr, size-1) + arr[-1])\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_tup = list(union_set)\n    union_tup.sort()\n    return tuple(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    union_set = test_set1.union(test_set2)\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = []\n    union_set.extend(test_tup1)\n    union_set.extend(test_tup2)\n    union_set = set(union_set)\n    return sorted(union_set)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    sorted_union = set(test_tup1) | set(test_tup2)\n    return sorted(sorted_union)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(test_tup1) + list(test_tup2)\n    union_list.sort()\n    return union_list\n    \n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_tup = tuple(union_list)\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = list(test_tup1)\n    union_elements.extend(list(test_tup2))\n    union_elements = set(union_elements)\n    union_elements = list(union_elements)\n    union_elements.sort()\n    return tuple(union_elements)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup3 = list(test_tup1) + list(test_tup2)\n    test_tup3.sort()\n    return test_tup3\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    union_set = test_tup1.union(test_tup2)\n    union_set = sorted(union_set)\n    return union_set\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in union_elements:\n            union_elements.append(test_tup1[i])\n    for j in range(len(test_tup2)):\n        if test_tup2[j] not in union_elements:\n            union_elements.append(test_tup2[j])\n    union_elements.sort()\n    return tuple(union_elements)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    len_max = 0\n    for sublist in lst:\n        len_sublist = len(sublist)\n        if len_sublist > len_max:\n            len_max = len_sublist\n    return len_max\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Declare the empty dp list\n    dp = [0] * len(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max = 0\n    for item in lst:\n        if len(item) > Max:\n            Max = len(item)\n    return Max\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = len(lst)\n    if length == 0:\n        return 0\n    maxLen = 1\n    start = 0\n    for i in range(length):\n        if lst[i] == 0:\n            start = i\n        else:\n            maxLen = max(maxLen, i - start + 1)\n    return maxLen\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sublist_len=[]\n    for sublist in lst:\n        sublist_len.append(len(sublist))\n    return max(sublist_len)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    list_len = len(lst)\n    res_list = []\n    for i in xrange(list_len):\n        temp = []\n        for j in xrange(i, list_len):\n            temp.append(lst[j])\n            if len(temp) > len(res_list):\n                res_list = temp\n    return len(res_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        temp = 0\n        for j in range(i, len(lst)):\n            if lst[j] > lst[i]:\n                temp += 1\n            else:\n                break\n        if temp > max_length:\n            max_length = temp\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return len(lst[0])\n    if len(lst) == 2:\n        return max(len(lst[0]), len(lst[1]))\n    if len(lst) > 2:\n        a = lst[0]\n        b = lst[1]\n        c = lst[2]\n        if len(a) > len(b):\n            if len(a) > len(c):\n                return len(a)\n            else:\n                return len(c)\n        else:\n            if len(b) > len(c):\n                return len(b)\n            else:\n                return len(c)\nlst = [[1,2,3,4,5], [0,1,2,3,4,5], [0,1,2,3,4,5,6,7,8]]\nprint Find_Max_Length(lst)"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(x) for x in lst])\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    ret_val = 0\n    for ele in lst:\n        if len(ele) > ret_val:\n            ret_val = len(ele)\n    return ret_val\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"(.*?)\\\"',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    r = re.findall('\\\".*?\\\"', text)\n    if r:\n        return r\n    else:\n        print('No values found')\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        return re.findall(r'\\\"[^\\\"]*\\\"', text)[0]\n    except:\n        return None\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.strip('\"')\n    values = re.findall(r'\"(.*?)\"', text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    '''\n    # Method 1\n    text = text.split('\"')\n    values = [v for i,v in enumerate(text) if i%2 == 0]\n    '''\n    '''\n    # Method 2\n    text = text.split('\"')\n    values = [v for i,v in enumerate(text) if i%2 == 1]\n    '''\n    # Method 3\n    text = text.split('\"')\n    values = [v for i,v in enumerate(text) if i%2 == 1]\n    values = [v.strip(' ') for v in values]\n    values = [v.strip('\"') for v in values]\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end]\ndef extract_values_in_text(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start:end]\ndef extract_values_in_text_in_brackets(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start:end]\ndef extract_values_in_text_in_brackets2(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end-1]\ndef get_values_from_regex(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end]\ndef get_values_from_regex2(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start:end]\ndef get_values_from_regex3(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end]\ndef get_values_from_regex4(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end]\ndef get_values_from_regex5(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end]\ndef get_values_from_regex6(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end]\ndef get_values_from_regex7(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end]\ndef get_values_from_regex8(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end]\ndef get_values_from_regex9(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end]\ndef get_values_from_regex10(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end]\ndef get_values_from_regex11(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end]\ndef get_values_from_regex12(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    s = re.search('\"',text)\n    if s == None:\n        return None\n    start = s.start()\n    end = s.end()\n    while end < len(text) and text[end]!= '\"':\n        end = end + 1\n    return text[start+1:end]\ndef get_values_from_regex13(text,regex):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    reg_exp = re.compile(r'\\\"(.*)\\\"')\n    matches = re.findall(reg_exp, text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"[^\"]+\"|\\d+', text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    results = []\n    quotes = []\n    for i in range(len(text)):\n        if text[i] == \"\\\"\":\n            if len(quotes) > 0:\n                results.append(quotes)\n                quotes = []\n            else:\n                quotes.append(i)\n        if len(quotes) == 0 and text[i] == \" \":\n            results.append(i)\n    if len(quotes) > 0:\n        results.append(quotes)\n    return results\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r'(\\\".+?\\\")'\n    values = re.findall(regex, text)\n    return values\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n):\n            if arr[i]!= arr[j]: \n                count += 1\n    return count \n    \n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    unordered_Pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                unordered_Pairs += 1\n    return unordered_Pairs\n    "
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    arr.sort()\n    count = 0\n    for i in range(n):\n        if(i>0):\n            if(arr[i]!=arr[i-1]):\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n    \n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #The code is the same as the CountPairs with two differences. \n    #The elements are not counted when they are equal.\n    #This code will work on a list of integers.\n    #Here we use the array of integers (arr) and the size of the list (n) to check each possible pairing.\n    #We count the number of unequal pairs for each element in the list and return the total sum of them.\n    #Another difference is that we use a dictionary to store the count of the pairs.\n    pair_count = {}\n    for i in range(n):\n        if (arr[i] in pair_count):\n            pair_count[arr[i]] += 1\n        else:\n            pair_count[arr[i]] = 1\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dict = {}\n    for i in range(0,n): \n        dict[i] = arr[i]\n    pairs = 0\n    for i in range(0,n): \n        dict[i] = arr[i]\n        for j in range(0,n): \n            if i!= j: \n                if (arr[i] == arr[j]): \n                    if (dict[i] == 0 and dict[j]!= 0): \n                        pairs = pairs + 1\n                    elif (dict[i]!= 0 and dict[j] == 0): \n                        pairs = pairs + 1\n                    dict[j] = 0\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n    \narr = [1,2,3,4]\nprint count_Pairs(arr,4)"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d={}\n    for i in arr:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    c=0\n    for i in d:\n        for j in d:\n            if i!=j:\n                c+=d[i]*d[j]\n    return c\nn=int(input().strip())\narr=[]\nfor i in range(n):\n    arr.append(int(input().strip()))\nprint(count_Pairs(arr,n))"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Given a number n, the function returns the sum of the digits of n.\n    # For example:\n    # sum_digits(123) = 6\n    # sum_digits(1234) = 9\n    # sum_digits(12345) = 15\n    # sum_digits(123456) = 21\n    # sum_digits(1234567890) = 45\n    # sum_digits(1234567890123) = 45\n    # sum_digits(1234) = 4\n    # sum_digits(1) = 1\n    # sum_digits(10) = 1\n    # sum_digits(9) = 1\n    # sum_digits(8) = 1\n    # sum_digits(7) = 1\n    # sum_digits(6) = 1\n    # sum_digits(5) = 1\n    # sum_digits(4) = 1\n    # sum_digits(3) = 1\n    # sum_digits(2) = 1\n    # sum_digits(1) = 1\n    # sum_digits(0) = 1\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # \u4e00\u4f4d\u6570 = \u5341\u4f4d\u6570 + \u4e8c\u4f4d\u6570\n    # \u4e8c\u4f4d\u6570 = \u5341\u4f4d\u6570 + \u4e2a\u4f4d\u6570\n    # \u4e09\u4f4d\u6570 = \u4e2a\u4f4d\u6570 + \u5341\u4f4d\u6570 + \u4e8c\u4f4d\u6570\n    # \u4ee5\u6b64\u7c7b\u63a8\n    if n < 10:\n        return n\n    else:\n        return (n % 10) + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n / 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return int(str(n)[0]) + sum_digits(int(str(n)[1:]))\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    else:\n        for i in range(0, len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1[0] < list1[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    for i in range(len(list1)):\n        if i == 0:\n            continue\n        if list1[i-1] > list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    else:\n        for i in range(1, len(list1)):\n            if list1[i] <= list1[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # your code here\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i] <= list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    if list1 == range(1, len(list1)+1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    if len(list1) == 0:\n        return False\n    if list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n    \ndef test_issort_list():\n    assert issort_list([1,2,3,4]) == True\n    assert issort_list([1,2,3,5]) == False\n    assert issort_list([]) == True\n    assert issort_list([1]) == True\n    assert issort_list([2,3]) == True\n    assert issort_list([2,4]) == False\n    assert issort_list([2,3,5]) == True\n    assert issort_list([5,3,2,4]) == False\n    assert issort_list([3,2,4,5]) == False\n    assert issort_list([2,3,2,4]) == True\n    assert issort_list([2,3,2,2]) == True\n    assert issort_list([1,2,3,4,5,6,7,8]) == False\n    assert issort_list([8,7,6,5,4,3,2,1]) == True\n    assert issort_list([2,1,3,4,5,6]) == False\n    assert issort_list([]) == True\n    assert issort_list([1]) == True\n    assert issort_list([1,1]) == True\n    assert issort_list([1,2]) == True\n    assert issort_list([2,1]) == True\n    assert issort_list([1,2,3,4,5,6]) == False\n    assert issort_list([2,1,3,4,5,6]) == False\n    assert issort_list([2,1,3,4,5,5]) == False\n    assert issort_list([2,1,3,4,5,6,6]) == True\n    assert issort_list([2,1,3,4,5,6,6,6]) == True\n    assert issort_list([2,1,3,4,5,6,6,7,8]) == False\n    assert issort_list([2,1,3,4,5,6,6,7,8,8]) == True\n    assert issort_list([2,1,3,4,5,6,6,7,8,9]) == False\n    assert issort_list([2,1,3,4,5,6,6,7,8,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,6,7,8,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == True\n    assert issort_list([2,1,3,4,5,6,7,8,9"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Initialize a list to contain dictionaries\n    list = []\n    # Iterate through the range of length\n    for i in range(length):\n        # Create empty dictionary\n        dic = {}\n        # Add dictionary to list\n        list.append(dic)\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = [{} for i in range(length)]\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print '***'\n    print'sort_sublists'\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # first I tried to use the sorted() function to sort the sublists\n    # and then I had to add them to the list in order\n    # because I needed to add in the 1st element (which is the max length)\n    # so I made a new list and then added the new list to the end of the main list\n    # so I can then sort the sublists\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda l:l[0])\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for each in list1:\n        list2.append(sorted(each))\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    res = []\n    for l in list1:\n        l = sorted(l)\n        res.append(l)\n    return res\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n        i.reverse()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: x[-1])\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print \"Input list of lists: \", list1\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    print \"Sorted list: \", list1\n    return\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    a = set(nums[0])\n    b = set(nums[1])\n    c = a.symmetric_difference(b)\n    return list(c)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if nums:\n        return len(set(nums)) == len(nums)\n    return 0\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n    return unique\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return set(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set()\n    for i in nums:\n        if i not in nums_set:\n            nums_set.add(i)\n            # print i\n    return nums_set\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return len(set(nums))\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #solution 1\n    nums_unique = []\n    for i in nums:\n        if i not in nums_unique:\n            nums_unique.append(i)\n    return nums_unique\n    \n    #solution 2\n    nums_unique = list(set(nums))\n    return nums_unique\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in nums:\n        if i not in unique_nums:\n            unique_nums.append(i)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for item in nums:\n        if item not in unique_nums:\n            unique_nums.append(item)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_num = []\n    for x in nums:\n        if x not in new_num:\n            new_num.append(x)\n    return new_num\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    product = 1\n    for num in list_data:\n        if list_data.count(num) > 1:\n            product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    return (unique_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for data in list_data:\n        product *= data\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    res=1\n    for i in list_data:\n        res=res*i\n    return res\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x,y: x*y, [i for i in set(list_data)])\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique = []\n    for i in list_data:\n        if i not in unique:\n            unique.append(i)\n    product = 1\n    for i in unique:\n        product = product*i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if not isinstance(list_data,list):\n        return 'Please input a list!'\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for data in list_data:\n        if data not in product:\n            product *= data\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for number in list_data:\n        if number not in unique_list:\n            unique_list.append(number)\n    result = 1\n    for unique in unique_list:\n        result = result * unique\n    return result\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*(r**2)*2 + pi*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    sa = 2*pi*r*(r+h)\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.141592653589793\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2 * 3.14 * r**2) + (2 * 3.14 * r * h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Surface area of cylinder = 2(pi)*r*(r+h)\n    #   pi = 3.14\n    #   r = radius\n    #   h = height\n    # http://mathworld.wolfram.com/Cylinder.html\n    # return 2*3.14*r*(r+h)\n    return 2*3.14*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Solution is based on the formula for a cylinder, which is the same as a circle with the same area.\n    # Formula for circle is a = pi(r)^2\n    # Formula for circle is a = pi(r)^2, then you can change r to h to get the formula for a circle.\n    # To find the surface area of a cylinder, we need to add the surface area of the circle above it, and\n    # the surface area of the circle below it.\n    # The surfaces of the two circles are the same, so the surface area of the cylinder is 2*pi*r*(h+r)\n    return (2*math.pi*r*(h+r))\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*r*r + 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(B[start:start + len(A)] == A for start in range(len(B) - len(A) + 1))\n    \n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)>len(A):\n        return False\n    for i in range(len(B)):\n        if A[i]==B[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): return False\n    for i in range(len(A)):\n        if A[i] == B[0]:\n            if A[i:i+len(B)] == B: return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    start=0\n    end=len(B)\n    while end<len(A):\n        if B==A[start:end]:\n            return True\n        start+=1\n        end+=1\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    s=len(B)\n    for i in range(s):\n        if B[i] not in A:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    def sublist(a,b):\n        if(len(a)>len(b)):\n            return False\n        else:\n            for i in range(len(a)):\n                if(a[i]!=b[i]):\n                    return False\n            return True\n    if(sublist(A,B)==True):\n        return True\n    else:\n        return False\ndef plusOne(A):\n    '''\n    Write a python function to add one to an array.\n    '''\n    B = []\n    for i in range(len(A)):\n        B.append(A[i]+1)\n    return B\ndef find_difference(A,B):\n    '''\n    Write a python function to find the difference between two arrays.\n    '''\n    C = []\n    for i in range(len(A)):\n        if(A[i]!=B[i]):\n            C.append(A[i])\n    return C\ndef is_power(n):\n    '''\n    Write a python function to check whether a number is a power of another or not.\n    '''\n    if(n>1):\n        if(n%2==0):\n            return is_power(n//2)\n        else:\n            if(is_power(n-1)==True):\n                return True\n            else:\n                return False\n    else:\n        return True\ndef get_length(A):\n    '''\n    Write a python function to find the length of an array.\n    '''\n    if(A==[]):\n        return 0\n    else:\n        return 1+get_length(A[1:])\ndef sum_array(A):\n    '''\n    Write a python function to find the sum of the elements of an array.\n    '''\n    if(A==[]):\n        return 0\n    else:\n        return A[0]+sum_array(A[1:])\ndef multiply_array(A):\n    '''\n    Write a python function to find the product of the elements of an array.\n    '''\n    if(A==[]):\n        return 1\n    else:\n        return A[0]*multiply_array(A[1:])\ndef product_of_array(A):\n    '''\n    Write a python function to find the product of the elements of an array.\n    '''\n    if(A==[]):\n        return 1\n    else:\n        return A[0]*product_of_array(A[1:])\ndef bubble_sort(A):\n    '''\n    Write a python function to implement the bubble sort algorithm.\n    '''\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if(A[i]>A[j]):\n                temp = A[i]\n                A[i] = A[j]\n                A[j] = temp\n    return A\ndef selection_sort(A):\n    '''\n    Write a python function to implement the selection sort algorithm.\n    '''\n    for i in range(len(A)-1):\n        min_index = i\n        for j in range(i+1,len(A)):\n            if(A[j]<A[min_index]):\n                min_index = j\n        if(min_index!=i):\n            temp = A[i]\n            A[i] = A[min_index]\n            A[min_index] = temp\n    return A\ndef insertion_sort(A):\n    '''\n    Write a python function to implement the insertion sort algorithm.\n    '''\n    for i in range(1,len(A)):\n        temp = A[i]\n        j = i-1\n        while(j>=0 and temp<A[j]):\n            A[j+1] = A[j]\n            j-=1\n        A[j+1] = temp\n    return A\ndef sort_array(A):\n    '''\n    Write a python function to implement the selection sort algorithm.\n    '''\n    return selection_sort(A)\ndef merge_sort(A):\n    '''\n    Write a python function to implement the merge sort algorithm.\n    '''\n    def merge_helper(A,low,high,mid):\n        if(low==high):\n            return A\n        else:\n            mid = (low+high)//2\n            merge_helper(A,low,mid,high)\n            merge_helper(A,low,mid,high)\n    def merge(A,low,high,mid):\n        if(low==high):\n            return A\n        else:\n            mid = (low+high)//2\n            merge(A,low,mid,high)\n            merge(A,low,mid,high)\n            B = []\n            low_i = low\n            high_i = mid\n            for i in range(high-low+1):\n                if(low_i<mid and high_i<high):\n                    if(A[low_i]<A[high_i]):\n                        B.append(A[low_i])\n                        low_i+=1\n                    else:\n                        B.append(A[high_i])\n                        high_i+=1\n                elif(low_i<mid):\n                    B.append(A[low_i])\n                    low_i+=1\n                elif(high_i<high):\n                    B.append(A[high_i])\n                    high_i+=1\n            for i in range(high-low+1):\n                A[low+i] = B[i]\n    if(A==[]):\n        return A\n    else:\n        mid = len(A)//2\n        merge_helper(A,0,len(A),mid)\n        return A\ndef quick_sort(A):\n    '''\n    Write a python function to implement the quick sort algorithm.\n    '''\n    def partition(A,low,high):\n        pivot = A[high]\n        i = low-1\n        for j in range(low,high):\n            if(A[j]<pivot):\n                i+=1\n                temp = A[i]\n                A[i] = A[j]\n                A[j] = temp\n        temp = A[i+1]\n        A[i+1] = A[high]\n        A[high] = temp\n        return i+1\n    def quick_sort_helper(A,low,high):\n        if(low<high):\n            p = partition(A,low,high)\n            quick_sort_helper(A,low,p-1)\n            quick_sort_helper(A,p+1,high)\n    quick_sort_helper(A,0,len(A)-1)\n    return A\ndef dijkstra(G,s):\n    '''\n    Write a python function to find the length of the shortest path from source node to every other nodes using Dijkstra's algorithm.\n    '''\n    inf = float('inf')\n    V = len(G)\n    dist = [inf for i in range(V)]\n    dist[s] = 0\n    prev = [None for i in range(V)]\n    U = [False for i in range(V)]\n    for i in range(V):\n        min_node = -1\n        min_dist = inf\n        for j in range(V):\n            if(U[j]==False and dist[j]<min_dist):\n                min_dist = dist[j]\n                min_node = j\n        U[min_node] = True\n        for v in range(V):\n            if(G[min_node][v]!=0):\n                if(U[v]==False and dist[min_node]+G[min_node][v]<dist[v]):\n                    dist[v] = dist[min_node]+G[min_node][v]\n                    prev[v] = min_node\n    return dist,prev\ndef floyd_warshall(G):\n    '''\n    Write a python function to find the length of the shortest path from source node to every other nodes using Floyd-Warshall's algorithm.\n    '''\n    inf = float('inf')\n    V = len(G)\n    dist = [[0 for i in range(V)] for j in range(V)]\n    for i in range"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    else:\n        for i in range(0, len(B)):\n            if A[i]!= B[i]:\n                return False\n        return True\ndef is_subset(A, B): \n    '''\n    Write a python function to check whether a list is subset of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    else:\n        for i in range(0, len(B)):\n            if A[i]!= B[i]:\n                return False\n        return True\ndef print_string_matrix(m):\n    for i in range(0, len(m)):\n        for j in range(0, len(m[i])):\n            print(m[i][j], end=\" \")\n        print()\ndef is_matrix_equal(A, B):\n    if len(A)!= len(B):\n        return False\n    elif len(A) == len(B) == len(A[0]):\n        for i in range(0, len(A)):\n            for j in range(0, len(A[i])):\n                if A[i][j]!= B[i][j]:\n                    return False\n        return True\ndef print_matrix(m):\n    for i in range(0, len(m)):\n        for j in range(0, len(m[i])):\n            print(m[i][j], end=\" \")\n        print()\ndef matrix_multiplication(m1, m2):\n    #checking if the dimensions are valid\n    if len(m1[0])!= len(m2):\n        return None\n    else:\n        #checking if we are dealing with a square matrix\n        if len(m1) == len(m2):\n            result = [[0 for j in range(len(m2[0]))] for i in range(len(m1))]\n            for i in range(len(m1)):\n                for j in range(len(m2[0])):\n                    for k in range(len(m2)):\n                        result[i][j] += m1[i][k] * m2[k][j]\n            return result\n        else:\n            return None\ndef add_matrix(m1, m2):\n    #checking if the dimensions are valid\n    if len(m1)!= len(m2) or len(m1[0])!= len(m2[0]):\n        return None\n    else:\n        result = [[0 for j in range(len(m1[0]))] for i in range(len(m1))]\n        for i in range(len(m1)):\n            for j in range(len(m1[i])):\n                result[i][j] = m1[i][j] + m2[i][j]\n        return result\ndef matrix_exponentiation(A, power):\n    if power == 1:\n        return A\n    elif power%2 == 0:\n        B = matrix_exponentiation(A, power/2)\n        return add_matrix(B, B)\n    elif power%2 == 1:\n        C = matrix_exponentiation(A, (power-1)/2)\n        return matrix_multiplication(C, A)\ndef transpose(A):\n    transposed = [[A[j][i] for j in range(len(A))] for i in range(len(A[0]))]\n    return transposed\ndef inverse_matrix(A):\n    det = determinant(A)\n    if det == 0:\n        return None\n    n = len(A)\n    #identity matrix\n    I = [[0 for j in range(n)] for i in range(n)]\n    #add identity matrix to A\n    for i in range(n):\n        I[i][i] = 1\n    #if A is square then\n    if len(A) == len(A[0]):\n        if det == 1:\n            return I\n        else:\n            return None\n    #if A is not square\n    else:\n        return None\ndef determinant(A):\n    n = len(A)\n    if n == 1:\n        return A[0][0]\n    else:\n        det = 0\n        for i in range(n):\n            det += ((-1)**i) * A[0][i] * determinant(minor(A, 0, i))\n        return det\ndef minor(A, i, j):\n    m = []\n    for p in range(0, len(A)):\n        if p!= i:\n            m.append(A[p])\n    return m\ndef is_pivot_element(A, i, j):\n    m = []\n    for p in range(0, len(A)):\n        if p!= i:\n            m.append(A[p])\n    if len(m)!= 1:\n        return False\n    else:\n        return True\ndef swap_rows(A, i, j):\n    m = []\n    for p in range(0, len(A)):\n        if p!= i:\n            m.append(A[p])\n    m[i], m[j] = m[j], m[i]\n    return m\ndef row_reduction(A):\n    n = len(A)\n    m = []\n    p = 0\n    for i in range(n):\n        if is_pivot_element(A, i, i) == True:\n            p = i\n            break\n    if p == 0:\n        return A\n    else:\n        #swap i-th row with p-th row\n        A = swap_rows(A, p, i)\n        m.append(A[p])\n        for j in range(0, n):\n            A[p][j] = 0\n        for j in range(0, n):\n            A[j][p] = 0\n    return row_reduction(A)\ndef upper_triangular_matrix(A):\n    #checking if A is a square matrix\n    if len(A)!= len(A[0]):\n        return None\n    else:\n        n = len(A)\n        for i in range(n):\n            for j in range(n):\n                if j <= i:\n                    A[i][j] = 0\n                else:\n                    A[i][j] = A[j][i]\n    return A\ndef lower_triangular_matrix(A):\n    #checking if A is a square matrix\n    if len(A)!= len(A[0]):\n        return None\n    else:\n        n = len(A)\n        for i in range(n):\n            for j in range(n):\n                if j >= i:\n                    A[i][j] = 0\n                else:\n                    A[i][j] = A[j][i]\n    return A\ndef upper_triangular_matrix_inverse(A):\n    #checking if A is a square matrix\n    if len(A)!= len(A[0]):\n        return None\n    else:\n        n = len(A)\n        #identity matrix\n        I = [[0 for j in range(n)] for i in range(n)]\n        #add identity matrix to A\n        for i in range(n):\n            I[i][i] = 1\n        for i in range(n):\n            for j in range(n):\n                if j <= i:\n                    A[i][j] = 0\n                else:\n                    A[i][j] = A[j][i]\n        return upper_triangular_matrix(I)\ndef lower_triangular_matrix_inverse(A):\n    #checking if A is a square matrix\n    if len(A)!= len(A[0]):\n        return None\n    else:\n        n = len(A)\n        #identity matrix\n        I = [[0 for j in range(n)] for i in range(n)]\n        #add identity matrix to A\n        for i in range(n):\n            I[i][i] = 1\n        for i in range(n):\n            for j in range(n):\n                if j >= i:\n                    A[i][j] = 0\n                else:\n                    A[i][j] = A[j][i]\n        return lower_triangular_matrix"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    if len(A) > len(B):\n        return False\n    \n    i = 0\n    while i < len(A):\n        if A[i] == B[0]:\n            if list(B) == A[i:i+len(B)]:\n                return True\n        i += 1\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return set(A) < set(B)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 1): \n        return 1\n    else: \n        return n*last_Digit_Factorial(n-1)\ndef power(x,y): \n    '''\n    Write a python function to calculate the power of 2. \n    '''\n    if(y == 0):\n        return 1\n    if(y == 1):\n        return x\n    if(y%2 == 0):\n        return power(x*x, y/2)\n    else:\n        return x*power(x*x, (y-1)/2)\ndef binary_search(left, right, A, x):\n    '''\n    Write a python function to search an element in a sorted array. \n    '''\n    while (left <= right):\n        mid = (left + right) / 2\n        if (A[mid] == x):\n            return mid\n        elif (A[mid] < x):\n            left = mid+1\n        elif (A[mid] > x):\n            right = mid-1\n    return -1\ndef fibonacci(n): \n    '''\n    Write a python function to find the nth fibonacci number. \n    '''\n    if (n <= 1): \n        return n\n    else:\n        return (fibonacci(n-1)+fibonacci(n-2))\ndef fibonacci_lst(n): \n    '''\n    Write a python function to find the nth fibonacci number. \n    '''\n    lst = [0,1]\n    for i in range(2, n+1):\n        lst.append(lst[i-2] + lst[i-1])\n    return lst[n]\ndef count_vowels(str): \n    '''\n    Write a python function to find the vowels in a string. \n    '''\n    count = 0\n    vowels = 'aeiou'\n    for char in str: \n        if (char in vowels): \n            count += 1\n    return count\ndef is_permutation(str1, str2): \n    '''\n    Write a python function to check if two strings are permutations of each other. \n    '''\n    if (len(str1)!= len(str2)): \n        return 0\n    for i in range(len(str1)): \n        if (str1[i]!= str2[i]): \n            return 0\n    return 1\ndef is_palindrome(str): \n    '''\n    Write a python function to check if a string is a palindrome. \n    '''\n    if (str == str[::-1]):\n        return 1\n    else:\n        return 0\ndef first_vowel_index(str): \n    '''\n    Write a python function to find the first vowel index in a string. \n    '''\n    vowels = 'aeiou'\n    for i in range(len(str)): \n        if (str[i] in vowels): \n            return i\n    return -1\ndef double_char(str): \n    '''\n    Write a python function to double all the characters in a string. \n    '''\n    double_char = ''\n    for char in str:\n        double_char += char*2\n    return double_char\ndef find_substring(str, pattern): \n    '''\n    Write a python function to search a substring in a string. \n    '''\n    if (len(str) < len(pattern)):\n        return -1\n    for i in range(len(str)-len(pattern)):\n        if (str[i:i+len(pattern)] == pattern): \n            return i\n    return -1\ndef is_palin(str): \n    '''\n    Write a python function to check if a string is a palindrome. \n    '''\n    for i in range(len(str)/2): \n        if (str[i]!= str[-i-1]): \n            return 0\n    return 1\ndef remove_spaces(str): \n    '''\n    Write a python function to remove leading and trailing spaces in a string. \n    '''\n    while (str[0] ==''): \n        str = str[1:]\n    while (str[-1] ==''): \n        str = str[:-1]\n    return str\ndef count_digits(str): \n    '''\n    Write a python function to count the number of digits in a string. \n    '''\n    count = 0\n    for char in str: \n        if (char.isdigit()): \n            count += 1\n    return count\ndef count_chars(str): \n    '''\n    Write a python function to count the number of characters in a string. \n    '''\n    count = 0\n    for char in str: \n        count += 1\n    return count\ndef count_vowels(str): \n    '''\n    Write a python function to count the number of vowels in a string. \n    '''\n    count = 0\n    vowels = 'aeiou'\n    for char in str: \n        if (char in vowels): \n            count += 1\n    return count\ndef find_missing_number(lst): \n    '''\n    Write a python function to find the missing number in a list. \n    '''\n    total = (len(lst)+1)*(len(lst)+2)/2\n    sum_lst = sum(lst)\n    return int(total - sum_lst)\ndef find_missing_number_2(lst): \n    '''\n    Write a python function to find the missing number in a list. \n    '''\n    total = (len(lst)+1)*(len(lst)+2)/2\n    lst.sort()\n    for i in range(len(lst)): \n        if (lst[i]!= i): \n            return i\n    return len(lst)\ndef find_missing_number_3(lst): \n    '''\n    Write a python function to find the missing number in a list. \n    '''\n    lst.sort()\n    for i in range(len(lst)): \n        if (lst[i]!= i): \n            return i\n    return len(lst)\ndef is_substring(str, pattern): \n    '''\n    Write a python function to check if a string is a substring of another string. \n    '''\n    if (len(str) < len(pattern)):\n        return 0\n    for i in range(len(str)-len(pattern)):\n        if (str[i:i+len(pattern)] == pattern): \n            return 1\n    return 0\ndef find_substring_2(str, pattern): \n    '''\n    Write a python function to find the substring in a string. \n    '''\n    if (len(str) < len(pattern)):\n        return -1\n    for i in range(len(str)-len(pattern)+1):\n        if (str[i:i+len(pattern)] == pattern): \n            return i\n    return -1\ndef count_characters(str): \n    '''\n    Write a python function to count the number of characters in a string. \n    '''\n    count = 0\n    for char in str: \n        count += 1\n    return count\ndef count_characters_2(str): \n    '''\n    Write a python function to count the number of characters in a string. \n    '''\n    count = 0\n    for i in range(len(str)): \n        count += 1\n    return count\ndef count_characters_3(str): \n    '''\n    Write a python function to count the number of characters in a string. \n    '''\n    return len(str)\ndef longest_word(str): \n    '''\n    Write a python function to find the longest word in a string. \n    '''\n    str = str.split()\n    longest_str = ''\n    for word in str: \n        if (len(word) > len(longest_str)): \n            longest_str = word\n    return longest_str\ndef longest_word_2(str): \n    '''\n    Write a python functio"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = n % 10\n    return n\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = n * 10\n    for i in xrange(n): \n        if n % 10 == 0: \n            n = int(n / 10)\n        else:\n            break\n    return n\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while(n > 1):\n        factorial *= n\n        n -= 1\n    return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<=1:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    total = 1\n    while (n!= 0): \n        total *= n % 10\n        n /= 10\n    return total\n    \n    \ndef main():\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = int(input(\"Enter a number: \"))\n    print(last_Digit_Factorial(n))\n    \nif __name__ == \"__main__\":\n    main()\n    "
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n - 1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (last_Digit_Factorial(n/10)) * (n%10)\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for a,b,c in zip(list1,list2,list3):\n        new_list.extend([a,b,c])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #both the lists have to be the same length\n    #the function returns a list\n    l = []\n    for x in range(len(list1)):\n        l.extend([list1[x], list2[x], list3[x]])\n    return l\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for l1 in [list1, list2, list3] for item in l1]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('The lists must be of equal length')\n    for i in range(len(list1)):\n        yield list1[i]\n        yield list2[i]\n        yield list3[i]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    '''\n    def interleave_lists(list1,list2,list3):\n        new_list = []\n        for i in range(len(list1)):\n            new_list.append(list1[i])\n            new_list.append(list2[i])\n            new_list.append(list3[i])\n        return new_list\n    '''\n    \n    return interleave_lists(list1,list2,list3)\n    "
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return False\n    \n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newlist = []\n    for l1,l2,l3 in zip(list1,list2,list3):\n        newlist += l1 + l2 + l3\n    return newlist\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('The lists do not have the same length')\n    newlist = [None]*(len(list1)*3)\n    for i in range(len(list1)):\n        newlist[i] = list1[i]\n        newlist[i+len(list1)] = list2[i]\n        newlist[i+2*len(list1)] = list3[i]\n    return newlist\n    \ndef find_doubles(list):\n    '''\n    Write a function to return the number of elements in a list that are duplicates.\n    '''\n    newlist = []\n    for item in list:\n        if item in newlist:\n            newlist.append(item)\n        else:\n            newlist.append(item)\n    return len(newlist) - len(list)\n    \ndef sorted_integers(list):\n    '''\n    Write a function to sort a list of integers.\n    '''\n    newlist = []\n    for item in list:\n        newlist.append(item)\n    newlist.sort()\n    return newlist\n    \ndef reverse_list(list):\n    '''\n    Write a function to reverse a list.\n    '''\n    for i in range(len(list)//2):\n        list[i], list[-i-1] = list[-i-1], list[i]\n    return list\n    \ndef find_missing(list):\n    '''\n    Write a function to find the missing element of a list.\n    '''\n    newlist = []\n    for i in range(len(list)):\n        if list[i] > i:\n            newlist.append(i)\n        else:\n            newlist.append(list[i])\n    for i in range(len(newlist)):\n        if newlist[i]!= i:\n            return i\n    return len(newlist)\n    \ndef find_common_items(list1,list2):\n    '''\n    Write a function to find the number of common items between two lists.\n    '''\n    newlist = []\n    for item in list1:\n        if item in list2:\n            newlist.append(item)\n    return len(newlist)\n    \ndef remove_duplicates(list):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    newlist = []\n    for item in list:\n        if item not in newlist:\n            newlist.append(item)\n    return newlist\n    \ndef list_of_lists(list):\n    '''\n    Write a function to create a list of lists from a list of strings.\n    '''\n    newlist = []\n    for item in list:\n        newlist.append(item.split(','))\n    return newlist\n    \ndef remove_list_duplicates(list):\n    '''\n    Write a function to remove duplicates from a list of lists.\n    '''\n    newlist = []\n    for item in list:\n        newlist.append(list(set(item)))\n    return newlist\n    \ndef union_list(list1,list2):\n    '''\n    Write a function to create a list of all items from two lists, but without duplicates.\n    '''\n    newlist = []\n    for item in list1:\n        newlist.append(item)\n    for item in list2:\n        newlist.append(item)\n    return newlist\n    \ndef difference_list(list1,list2):\n    '''\n    Write a function to create a list of all items in the first list that are not in the second list.\n    '''\n    newlist = []\n    for item in list1:\n        if item not in list2:\n            newlist.append(item)\n    return newlist\n    \ndef remove_list_element(list,item):\n    '''\n    Write a function to remove an element from a list and return the list without the element.\n    '''\n    newlist = list[:]\n    newlist.remove(item)\n    return newlist\n    \ndef remove_list_index(list,index):\n    '''\n    Write a function to remove an element from a list at a specified index and return the list without the element.\n    '''\n    newlist = list[:]\n    del newlist[index]\n    return newlist\n    \ndef sort_list(list):\n    '''\n    Write a function to sort a list of strings using the built-in sorted() function.\n    '''\n    newlist = []\n    for item in list:\n        newlist.append(item)\n    newlist.sort()\n    return newlist\n    \ndef sorted_dictionary(dict):\n    '''\n    Write a function to sort a dictionary of strings using the built-in sorted() function.\n    '''\n    newlist = []\n    for item in dict:\n        newlist.append(item)\n    newlist.sort()\n    return newlist\n    \ndef remove_dict_key(dict,key):\n    '''\n    Write a function to remove a key from a dictionary and return the dictionary without the key.\n    '''\n    newdict = {}\n    for item in dict:\n        if item!= key:\n            newdict[item] = dict[item]\n    return newdict\n    \ndef remove_dict_index(dict,index):\n    '''\n    Write a function to remove an index from a dictionary and return the dictionary without the index.\n    '''\n    newdict = {}\n    for item in dict:\n        if item == index:\n            continue\n        else:\n            newdict[item] = dict[item]\n    return newdict\n    \ndef intersection_list(list1,list2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    newlist = []\n    for item in list1:\n        if item in list2:\n            newlist.append(item)\n    return newlist\n    \ndef remove_set_element(set,element):\n    '''\n    Write a function to remove an element from a set and return the set without the element.\n    '''\n    newlist = []\n    for item in set:\n        if item!= element:\n            newlist.append(item)\n    return newlist\n    \ndef remove_set_index(set,index):\n    '''\n    Write a function to remove an index from a set and return the set without the index.\n    '''\n    newlist = []\n    for item in set:\n        if item!= index:\n            newlist.append(item)\n    return newlist\n    \ndef remove_dict_value(dict,value):\n    '''\n    Write a function to remove a value from a dictionary and return the dictionary without the value.\n    '''\n    newdict = {}\n    for item in dict:\n        if dict[item]!= value:\n            newdict[item] = dict[item]\n    return newdict\n    \ndef remove_dict_index(dict,index):\n    '''\n    Write a function to remove an index from a dictionary and return the dictionary without the index.\n    '''\n    newdict = {}\n    for item in dict:\n        if item!= index:\n            newdict[item] = dict[item]\n    return newdict\n    \ndef list_difference(list1,list2):\n    '''\n    Write a function to find the difference between two lists.\n    '''\n    newlist = []\n    for item in list1:\n        if item not in list2:\n            newlist.append(item)\n    for item in list2:\n        if item not in list1:\n            newlist.append(item)\n    return newlist\n    \ndef list_intersection(list1,list2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    newlist = []\n    for item in list1:\n        if item in list2:\n            newlist.append(item)\n    return newlist\n    \ndef list_append(list,element):\n    '''\n    Write a function to append an element to a list and return the list.\n    '''\n    newlist = list[:]\n    newlist.append(element)\n    return newlist\n    \ndef list_extend(list,element):\n    ''"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    combined = [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\n    return combined\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0] and test_tup1[1] == test_tup2[1]:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.add(test_tup1[i])\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for item1 in test_tup1:\n        for item2 in test_tup2:\n            if item1!= item2:\n                result.append(item1)\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    list1.sort()\n    list2.sort()\n    \n    return (list1, list2)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_elems.append(elem1)\n    return dissimilar_elems\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Sorry, different length'\n    elif len(test_tup1) == 0:\n        return 'Dissimilar'\n    else:\n        for i in test_tup1:\n            if i not in test_tup2:\n                return i\n        return 'Dissimilar'\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        return 'Both the tuples must be in the form of tuples.'\n    if len(test_tup1)!= len(test_tup2):\n        return 'Length of the tuples must be same.'\n    if len(test_tup1) == 0:\n        return 'First tuple cannot be empty.'\n    elif len(test_tup1) == 1:\n        return 'Second tuple cannot be empty'\n    else:\n        common_elements = set(test_tup1).intersection(set(test_tup2))\n        return list(set(test_tup1).difference(common_elements)) + list(set(test_tup2).difference(common_elements))\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for key1 in test_tup1:\n        for key2 in test_tup2:\n            if key1 == key2:\n                return False\n    return True\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    test_tup1 = str(test_tup1)\n    test_tup2 = str(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    return s1.symmetric_difference(s2)\n    \ndef find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # use return on non iterable object\n    if not isinstance(test_tuple, tuple):\n        return even_fnc(test_tuple)\n    else:\n        return tuple([even_fnc(item) for item in test_tuple if isinstance(item, tuple)])\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(even_fnc(test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return (test_tuple[0], even_fnc(test_tuple[1]), even_fnc(test_tuple[2]))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    res = []\n    for ele in test_tuple:\n        if even_fnc(ele):\n            res.append(ele)\n    return tuple(res)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = tuple(filter(even_fnc, test_tuple))\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if not even_fnc(item):\n            result.append(item)\n    return tuple(result)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return type(test_tuple)(*[even_fnc(x) for x in test_tuple if x%2==0])\n    \n    \n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        return tuple(filter(even_fnc, test_tuple))\n    else:\n        return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        return tuple([*filter(even_fnc, test_tuple)])\n    elif isinstance(test_tuple, str):\n        return test_tuple\n    elif isinstance(test_tuple, int):\n        return test_tuple\n    else:\n        raise TypeError\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*b + (b/2)*(s - b)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*4\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=b*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = (b * s)/2\n    print a\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*2)+(s*2)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    print('The Surface Area is '+str(a)+' sq. units')\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(2*b*s)\n    print(b*s**2)\n    print(b*s**2/4)\n    return b*s**2\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=(b*s)/2\n    return area\n    \nprint surface_Area(10,20)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # return len(dict1) == 0\n    return len(dict1) == 0\n    \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    return len(set1) == 0\n    \ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    return len(tuple1) == 0\n    \ndef my_str(string1):\n    '''\n    Write a function to check if a string is empty\n    '''\n    return len(string1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return 'Empty'\n    else:\n        return 'Not Empty'\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        print \"empty\"\n    else:\n        print \"not empty\"\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n    \ndef unique_elements(a_list):\n    '''\n    Given a list of elements, return a list of unique elements\n    '''\n    uniq_list = []\n    for item in a_list:\n        if item not in uniq_list:\n            uniq_list.append(item)\n    return uniq_list\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num <= 0:\n        return 1\n    \n    return sum([\n        (-1)**num * (2*num + 1)**(n + 1)\n        for n in range(num)\n    ])\n    "
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        return sum([catalan_number(num-i)*catalan_number(i) for i in range(1,num)])\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return 0\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num-i-1)\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return (1/2)**num * (1/(2*num))**(2*(num-1))\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    \n    catalan = [1, 1]\n    n = 2\n    while n < num:\n        tmp = catalan[n] = (n - 1) * catalan[n - 1]\n        n += 1\n    \n    return catalan[num - 1]\n    "
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        num -= 1\n        return num * catalan_number(num) + catalan_number(num-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        raise ValueError('Catalan number should be positive integer.')\n    catalan = [1]\n    for i in range(num):\n        catalan.append(0)\n        for j in range(i + 1):\n            catalan[i+1] += catalan[j] * catalan[i - j]\n    return catalan[-1]\n    \n    \nif __name__ == '__main__':\n    # catalan_number(4)\n    # catalan_number(0)\n    # catalan_number(3)\n    # catalan_number(7)\n    # catalan_number(10)\n    # catalan_number(1)\n    # catalan_number(8)\n    # catalan_number(15)\n    # catalan_number(20)\n    # catalan_number(25)\n    # catalan_number(30)\n    # catalan_number(40)\n    # catalan_number(45)\n    # catalan_number(50)\n    # catalan_number(100)\n    # catalan_number(1000)\n    # catalan_number(2000)\n    # catalan_number(5000)\n    # catalan_number(100000)\n    # catalan_number(1000000)\n    # catalan_number(2000000)\n    # catalan_number(5000000)\n    # catalan_number(1000000000)\n    # catalan_number(2000000000)\n    # catalan_number(50000000000)\n    # catalan_number(100000000000)\n    # catalan_number(20000000000000)\n    # catalan_number(500000000000000)\n    print catalan_number(100)"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_list = [1]\n    for i in range(1, num):\n        catalan_list.append(sum(catalan_list[:i]))\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r\"\\w*ly\",text)\n    print(\"The first adverb ending with ly is:\",adverbs[0])\n    print(\"The position of the first adverb ending with ly in the string is:\",text.index(adverbs[0]))\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    for m in re.finditer(\"ly$\", text):\n        return m.span()\n    return [-1,-1]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #return [m.start() for m in re.finditer(r'(ly)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s\\b)', text)]\n    return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s\\b)', text)]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return [(m.start(0),m.end(0)) for m in re.finditer('ly$',text)]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'adverb[\\-]+ly',text)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    search_pattern = r'(?<=ly )[a-zA-z]+'\n    #print(re.findall(search_pattern,text))\n    print(re.search(search_pattern,text))\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    text = text.lower()\n    ind_adverb = [i for i, x in enumerate(text) if x == 'v' and (text[i-1] == 'n' or text[i-1] == 'r')]\n    #print ind_adverb\n    if ind_adverb:\n        return ind_adverb[0]\n    else:\n        return -1\ndef is_en_adj(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English adverb.\n    '''\n    if find_adverbs(text) > -1:\n        return True\n    else:\n        return False\ndef is_verb(text):\n    '''\n    Write a function to check if the word 'automate' is a valid English verb.\n    '''\n    if re.search(r'^(?:.*(?:[ai]n?t)|(?:[ai]r)|(?:[ai]n))$', text):\n        return True\n    else:\n        return False\ndef is_noun(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English noun.\n    '''\n    if re.search(r'^(?:.*(?:[a-z]n?|[a-z]n))$', text):\n        return True\n    else:\n        return False\ndef is_adjective(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English adjective.\n    '''\n    if re.search(r'^(?:.*(?:[a-z]adj))$', text):\n        return True\n    else:\n        return False\ndef is_wh_word(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English wh word.\n    '''\n    if re.search(r'^(?:.*(?:wh?))$', text):\n        return True\n    else:\n        return False\ndef is_determiner(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English determiner.\n    '''\n    if re.search(r'^(?:.*(?:[di]m))$', text):\n        return True\n    else:\n        return False\ndef is_interjection(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English interjection.\n    '''\n    if re.search(r'^(?:.*(?:[i]j?tion))$', text):\n        return True\n    else:\n        return False\ndef is_punctuation(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English punctuation.\n    '''\n    if re.search(r'^(?:.*(?:[,.?!;:])$)', text):\n        return True\n    else:\n        return False\ndef is_conjunction(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English conjunction.\n    '''\n    if re.search(r'^(?:.*(?:[;,&])$)', text):\n        return True\n    else:\n        return False\ndef is_subordinating(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English subordinating conjunction.\n    '''\n    if re.search(r'^(?:.*(?:[;,&]))$', text):\n        return True\n    else:\n        return False\ndef is_preposition(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English preposition.\n    '''\n    if re.search(r'^(?:.*(?:[po]r[sp]|[bpm]in))$', text):\n        return True\n    else:\n        return False\ndef is_numeral(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English numeral.\n    '''\n    if re.search(r'^(?:.*(?:[0-9]))$', text):\n        return True\n    else:\n        return False\ndef is_proper_noun(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English proper noun.\n    '''\n    if re.search(r'^(?:.*(?:[a-z]n?))$', text):\n        return True\n    else:\n        return False\ndef is_verb_ending(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English verb ending in -ing.\n    '''\n    if re.search(r'^(?:.*(?:[ai]n?g))$', text):\n        return True\n    else:\n        return False\ndef is_verb_ending_iv(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English verb ending in -ing.\n    '''\n    if re.search(r'^(?:.*(?:[ai]n?s))$', text):\n        return True\n    else:\n        return False\ndef is_verb_ending_ing(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English verb ending in -ing.\n    '''\n    if re.search(r'^(?:.*(?:[ai]n?g))$', text):\n        return True\n    else:\n        return False\ndef is_verb_ending_ly(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English verb ending in -ing.\n    '''\n    if re.search(r'^(?:.*(?:[ai]n?ly))$', text):\n        return True\n    else:\n        return False\ndef is_verb_ending_ed(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English verb ending in -ing.\n    '''\n    if re.search(r'^(?:.*(?:[ai]n?d))$', text):\n        return True\n    else:\n        return False\ndef is_verb_ending_e(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English verb ending in -ing.\n    '''\n    if re.search(r'^(?:.*(?:[ai]n?e))$', text):\n        return True\n    else:\n        return False\ndef is_verb_ending_s(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English verb ending in -ing.\n    '''\n    if re.search(r'^(?:.*(?:[ai]n?s))$', text):\n        return True\n    else:\n        return False\ndef is_verb_ending_y(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English verb ending in -ing.\n    '''\n    if re.search(r'^(?:.*(?:[ai]n?y))$', text):\n        return True\n    else:\n        return False\ndef is_verb_ending_h(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English verb ending in -ing.\n    '''\n    if re.search(r'^(?:.*(?:[ai]n?h))$', text):\n        return True\n    else:\n        return False\ndef is_verb_ending_es(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English verb ending in -ing.\n    '''\n    if re.search(r'^(?:.*(?:[ai]n?es))$', text):\n        return True\n    else:\n        return False\ndef is_verb_ending_i(text):\n    '''\n    Write a function to check if the word 'automation' is a valid English verb ending in -ing.\n    '''\n    if re.search(r'^(?:.*(?:[ai]n?i))"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if re.search(r'ly$', text):\n        return re.search(r'ly$', text).start()\n    elif re.search(r'ly.', text):\n        return re.search(r'ly.', text).start()\n    else:\n        return -1\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_pos = []\n    for i in range(len(text)):\n        if re.search('ly$', text[i]):\n            ly_pos.append(i)\n    return ly_pos\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_re = re.compile(r'^\\s*ly\\s*$',re.IGNORECASE)\n    return ly_re.search(text)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    ans = []\n    while len(ans) < n:\n        ans.append(-heapq.heappop(heap))\n    return ans\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items)<n:\n        return None\n    items.sort(key = lambda x:x[1],reverse=True)\n    return [x[0] for x in items[:n]]\ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    if len(items)<n:\n        return None\n    items.sort(key = lambda x:x[1])\n    return [x[0] for x in items[:n]]\ndef find_shortest_path(graph, start, end):\n    '''\n    Write a function to find the shortest path in a graph from start to end.\n    '''\n    if start==end:\n        return [start]\n    shortest_path=[]\n    visited=[]\n    heapq.heapify(shortest_path)\n    if start not in visited:\n        visited.append(start)\n        for neighbours in graph[start]:\n            if neighbours[0]==end:\n                shortest_path.append(neighbours[0])\n                return shortest_path\n            elif neighbours[0] not in visited:\n                heapq.heappush(shortest_path,neighbours)\n    return None\ndef find_all_paths(graph, start, end, path=[]):\n    '''\n    Write a function to find all paths in a graph from start to end.\n    '''\n    path=path+[start]\n    if start==end:\n        return [path]\n    if start not in graph:\n        return []\n    paths=[]\n    for neighbour in graph[start]:\n        if neighbour[0]==end:\n            paths.append(path+[neighbour[0]])\n        else:\n            for new_path in find_all_paths(graph,neighbour[0],end,path):\n                paths.append(new_path)\n    return paths\ndef find_largest_sum(graph,nodes):\n    '''\n    Write a function to find the largest sum of path from node to node.\n    '''\n    if len(nodes)<=1:\n        return 0\n    largest_sum=0\n    visited=[]\n    for node in nodes:\n        if node not in visited:\n            visited.append(node)\n            heapq.heappush(visited,(-graph[node][0],node))\n    while len(visited)>0:\n        node=heapq.heappop(visited)[1]\n        node_value=graph[node][0]\n        largest_sum+=node_value\n        if graph[node][1]!=None:\n            heapq.heappush(visited,(-graph[node][1],node))\n    return largest_sum\ndef print_path(graph,start,end):\n    '''\n    Write a function to print the path from start to end.\n    '''\n    paths=find_all_paths(graph,start,end)\n    print 'Paths: '\n    print paths\ndef find_minimum_cost(graph,nodes):\n    '''\n    Write a function to find the minimum cost of any path from node to node.\n    '''\n    if len(nodes)<=1:\n        return 0\n    visited=[]\n    for node in nodes:\n        if node not in visited:\n            visited.append(node)\n            heapq.heappush(visited,(-graph[node][0],node))\n    while len(visited)>0:\n        node=heapq.heappop(visited)[1]\n        node_value=graph[node][0]\n        if graph[node][1]!=None:\n            heapq.heappush(visited,(-graph[node][1],node))\n    return -graph[node][0]\ndef find_shortest_path_as_list(graph, start, end):\n    '''\n    Write a function to find the shortest path in a graph from start to end as a list of nodes.\n    '''\n    if start==end:\n        return [start]\n    shortest_path=[]\n    visited=[]\n    heapq.heapify(shortest_path)\n    if start not in visited:\n        visited.append(start)\n        for neighbours in graph[start]:\n            if neighbours[0]==end:\n                shortest_path.append(neighbours[0])\n                return shortest_path\n            elif neighbours[0] not in visited:\n                heapq.heappush(shortest_path,neighbours)\n    return None\ndef find_all_paths_as_list(graph, start, end, path=[]):\n    '''\n    Write a function to find all paths in a graph from start to end as a list of nodes.\n    '''\n    path=path+[start]\n    if start==end:\n        return [path]\n    if start not in graph:\n        return []\n    paths=[]\n    for neighbour in graph[start]:\n        if neighbour[0]==end:\n            paths.append(path+[neighbour[0]])\n        else:\n            for new_path in find_all_paths_as_list(graph,neighbour[0],end,path):\n                paths.append(new_path)\n    return paths\ndef find_maximum_path(graph,nodes):\n    '''\n    Write a function to find the maximum path from node to node.\n    '''\n    if len(nodes)<=1:\n        return 0\n    visited=[]\n    for node in nodes:\n        if node not in visited:\n            visited.append(node)\n            heapq.heappush(visited,(-graph[node][0],node))\n    while len(visited)>0:\n        node=heapq.heappop(visited)[1]\n        node_value=graph[node][0]\n        if graph[node][1]!=None:\n            heapq.heappush(visited,(-graph[node][1],node))\n    return -graph[node][0]\ndef find_maximum_path_as_list(graph,nodes):\n    '''\n    Write a function to find the maximum path in a graph from node to node as a list of nodes.\n    '''\n    if len(nodes)<=1:\n        return 0\n    visited=[]\n    for node in nodes:\n        if node not in visited:\n            visited.append(node)\n            heapq.heappush(visited,(-graph[node][0],node))\n    while len(visited)>0:\n        node=heapq.heappop(visited)[1]\n        node_value=graph[node][0]\n        if graph[node][1]!=None:\n            heapq.heappush(visited,(-graph[node][1],node))\n    return [-graph[node][0] for node in visited]\ndef find_maximum_path_with_weight(graph,nodes):\n    '''\n    Write a function to find the maximum path in a graph from node to node with weight.\n    '''\n    if len(nodes)<=1:\n        return 0\n    visited=[]\n    for node in nodes:\n        if node not in visited:\n            visited.append(node)\n            heapq.heappush(visited,(-graph[node][0],node))\n    while len(visited)>0:\n        node=heapq.heappop(visited)[1]\n        node_value=graph[node][0]\n        if graph[node][1]!=None:\n            heapq.heappush(visited,(-graph[node][1],node))\n    return -graph[node][0]\ndef find_all_paths_with_weight(graph, start, end, path=[]):\n    '''\n    Write a function to find all paths in a graph from start to end with weight.\n    '''\n    path=path+[start]\n    if start==end:\n        return [path]\n    if start not in graph:\n        return []\n    paths=[]\n    for neighbour in graph[start]:\n        if neighbour[0]==end:\n            paths.append(path+[neighbour"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-item,item))\n    n = min(len(heap),n)\n    print n\n    for i in range(n):\n        print heapq.heappop(heap)\nexpensive_items([1,4,2,5,3,3,9],4)\nexpensive_items([2,7,4,6,8,4,9,9,5],5)\nexpensive_items([1,2,3,4,5,6,7,8,9,10],10)\nexpensive_items([1,2,3,4,5,6,7,8,9,10],7)\nexpensive_items([4,2,4,6,8,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10],7)\nexpensive_items([],7)\nexpensive_items([],7)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # the most expensive item is the smallest item, so we start by popping it off\n    # and placing it in the result list.\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(items))\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda x:x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #create a heap\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(item[1],item[0]))\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-item[1],item[0]))\n    \n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return result\n    \n    \n    \n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n == 0:\n        return []\n    if n > len(items):\n        n = len(items)\n    max_heap = []\n    for i in items:\n        heapq.heappush(max_heap,(items[i],i))\n    \n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\ndef find_all_groups(users,data):\n    '''\n    Write a function to find all the groups that can hold the most number of people.\n    '''\n    def dfs(visited,users,users_of_groups,groups,group_count):\n        visited[users] = 1\n        if len(users) == 0:\n            if group_count > max_groups:\n                max_groups = group_count\n                return\n        for i in users_of_groups[users[0]]:\n            if visited[i] == 0:\n                dfs(visited,users[1:],users_of_groups,groups,group_count+1)\n    max_groups = 0\n    for i in users:\n        groups = []\n        visited = [0 for i in range(len(users))]\n        dfs(visited,i,users_of_groups,groups,1)\n    return max_groups\ndef find_all_groups_helper(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helper_2(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper_2(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helper_3(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper_3(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helper_4(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper_4(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helper_5(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper_5(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helper_6(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper_6(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helper_7(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper_7(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helper_8(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper_8(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helper_9(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper_9(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helper_10(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper_10(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helper_11(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper_11(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helper_12(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper_12(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helper_13(users,visited,users_of_groups,groups,group_count):\n    visited[users] = 1\n    if len(users) == 0:\n        if group_count > max_groups:\n            max_groups = group_count\n            return\n    for i in users_of_groups[users[0]]:\n        if visited[i] == 0:\n            find_all_groups_helper_13(users[1:],visited,users_of_groups,groups,group_count+1)\ndef find_all_groups_helpe"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pq = []\n    for i in items:\n        heapq.heappush(pq,(i[1],i[0]))\n    while len(pq) > n:\n        heapq.heappop(pq)\n    return [heapq.heappop(pq) for i in range(len(pq))]\ndef test_expensive_items():\n    assert expensive_items([(1,3),(4,4),(5,4)],2) == [(5,4),(4,4)]\n    assert expensive_items([(1,3),(4,4),(5,4)],1) == [(1,3)]\n    assert expensive_items([(1,3),(4,4),(5,4)],3) == [(1,3),(4,4),(5,4)]\n    assert expensive_items([(1,3),(4,4),(5,4)],4) == [(1,3),(4,4),(5,4)]\n    assert expensive_items([(1,3),(4,4),(5,4)],5) == [(1,3),(4,4),(5,4)]\n    assert expensive_items([(1,3),(4,4),(5,4)],6) == [(1,3),(4,4),(5,4)]\n    assert expensive_items([(1,3),(4,4),(5,4)],7) == [(1,3),(4,4),(5,4)]\n    assert expensive_items([(1,3),(4,4),(5,4)],8) == [(1,3),(4,4),(5,4)]\ndef top_n(items,n):\n    '''\n    Write a function that takes a list of numbers and a target number, and returns the list of numbers from the list that are closest to the target number.\n    '''\n    pq = []\n    for i in items:\n        heapq.heappush(pq,(abs(i-n),i))\n    while len(pq) > n:\n        heapq.heappop(pq)\n    return [heapq.heappop(pq) for i in range(len(pq))]\ndef test_top_n():\n    assert top_n([1,2,3,4,5],3) == [4,5,3]\n    assert top_n([1,2,3,4,5],6) == [4,5,3]\n    assert top_n([1,2,3,4,5],7) == [4,5,3]\n    assert top_n([1,2,3,4,5],8) == [4,5,3]\n    assert top_n([1,2,3,4,5],0) == [1,2,3,4,5]\n    assert top_n([1,2,3,4,5],1) == [1]\n    assert top_n([1,2,3,4,5],2) == [1,2]\n    assert top_n([1,2,3,4,5],3) == [1,2,3]\n    assert top_n([1,2,3,4,5],4) == [1,2,3,4]\n    assert top_n([1,2,3,4,5],5) == [1,2,3,4,5]\n    assert top_n([1,2,3,4,5],6) == [1,2,3,4,5]\n    assert top_n([1,2,3,4,5],7) == [1,2,3,4,5]\n    assert top_n([1,2,3,4,5],8) == [1,2,3,4,5]\n    assert top_n([1,2,3,4,5],9) == [1,2,3,4,5]\n    assert top_n([1,2,3,4,5],10) == [1,2,3,4,5]\ndef rotate_items(items,n):\n    '''\n    Write a function to rotate an array of numbers by n positions to the right\n    '''\n    return items[n:] + items[:n]\ndef test_rotate_items():\n    assert rotate_items([1,2,3,4,5,6,7],3) == [5,6,7,1,2,3,4]\n    assert rotate_items([1,2,3,4,5,6,7],1) == [7,1,2,3,4,5,6]\n    assert rotate_items([1,2,3,4,5,6,7],2) == [4,5,6,7,1,2,3]\n    assert rotate_items([1,2,3,4,5,6,7],7) == [3,4,5,6,7,1,2]\n    assert rotate_items([1,2,3,4,5,6,7],8) == [2,3,4,5,6,7,1]\n    assert rotate_items([1,2,3,4,5,6,7],9) == [1,2,3,4,5,6,7]\n    assert rotate_items([1,2,3,4,5,6,7],10) == [7,1,2,3,4,5,6]\n    assert rotate_items([1,2,3,4,5,6,7],11) == [6,7,1,2,3,4,5]\n    assert rotate_items([1,2,3,4,5,6,7],12) == [5,6,7,1,2,3,4]\n    assert rotate_items([1,2,3,4,5,6,7],13) == [4,5,6,7,1,2,3]\n    assert rotate_items([1,2,3,4,5,6,7],14) == [3,4,5,6,7,1,2]\n    assert rotate_items([1,2,3,4,5,6,7],15) == [2,3,4,5,6,7,1]\n    assert rotate_items([1,2,3,4,5,6,7],16) == [1,2,3,4,5,6,7]\n    assert rotate_items([1,2,3,4,5,6,7],17) == [7,1,2,3,4,5,6]\n    assert rotate_items([1,2,3,4,5,6,7],18) == [6,7,1,2,3,4,5]\n    assert rotate_items([1,2,3,4,5,6,7],19) == [5,6,7,1,2,3,4]\n    assert rotate_items([1,2,3,4,5,6,7],20) == [4,5,6,7,1,2,3]\n    assert rotate_items([1,2,3,4,5,6,7],21) == [3,4,5,6,7,1,2]\n    assert rotate_items([1,2,3,4,5,6,7],22) == [2,3,4,5,6,7,1]\n    assert rotate_items([1,2,3,4,5,6,7],23) == [1,2,3,4,5,6,7]\n    assert rotate_items([1,2,3,4,5,6,7],24) == [7,1,2,3,4,5,6]\n    assert rotate_items([1,2,3,4,5,6,7],25) == [6,7,1,2,3,4,5]\n    assert rotate_items([1,2,3,4,5,6,7],26) == [5,6,7,1,2,3,4]\n    assert rotate_items([1,2,3,4,5,6,7],27) == [4,5,6,7,1,2,3]\n    assert rotate_items([1,2,3,4,5,6,7],28) == [3,4,5,6,7,1"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if l is None:\n        return None\n    return l[:n] + l[n:len(l)]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:len(l)]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:][::-1]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(0, len(l), n):\n        arr.append(l[i:i + n])\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = l[:]\n    return arr[:n] + arr[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    list1 = l[:n]\n    list2 = l[n:]\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    nl = l[n:]\n    return l[:n] + nl\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx = tuple(listx)\n    return listx\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not len(nums):\n        return 0\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    n = len(nums)\n    minimum = min(nums)\n    maximum = max(nums)\n    return maximum - minimum\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    num_list = nums\n    num_list.sort()\n    return (num_list[-1] - num_list[0])\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) > 2:\n        a, b = max(nums), min(nums)\n        return a - b\n    elif len(nums) == 2:\n        return abs(nums[0] - nums[1])\n    else:\n        return 0\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n    \ndef smallest_largest(nums):\n    '''\n    Write a python function to find the smallest and largest value in a given list\n    '''\n    pass\n    \ndef big_diff_fast(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n    \ndef smallest_largest_fast(nums):\n    '''\n    Write a python function to find the smallest and largest value in a given list\n    '''\n    pass\n    \ndef big_diff_fast_1(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n    \ndef smallest_largest_fast_1(nums):\n    '''\n    Write a python function to find the smallest and largest value in a given list\n    '''\n    pass\n    \ndef big_diff_fast_2(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n    \ndef smallest_largest_fast_2(nums):\n    '''\n    Write a python function to find the smallest and largest value in a given list\n    '''\n    pass\n    \ndef bigger_diff_fast(nums):\n    '''\n    Write a python function to find the difference between biggest and smallest value in a given list.\n    '''\n    pass\n    \ndef biggest_diff_fast(nums):\n    '''\n    Write a python function to find the biggest value in a given list.\n    '''\n    pass\n    \ndef smallest_diff_fast(nums):\n    '''\n    Write a python function to find the smallest value in a given list\n    '''\n    pass\n    \ndef biggest_diff_fast(nums):\n    '''\n    Write a python function to find the biggest value in a given list\n    '''\n    pass\n    \ndef diff_fast(nums):\n    '''\n    Write a python function to find the difference between the biggest and smallest value in a given list.\n    '''\n    pass\n    \ndef list_diff_fast(nums):\n    '''\n    Write a python function to find the difference between the biggest and smallest value in a given list.\n    '''\n    pass\n    \ndef biggest_diff_fast_2(nums):\n    '''\n    Write a python function to find the biggest value in a given list.\n    '''\n    pass\n    \ndef smallest_diff_fast_2(nums):\n    '''\n    Write a python function to find the smallest value in a given list\n    '''\n    pass\n    \ndef biggest_diff_fast_3(nums):\n    '''\n    Write a python function to find the biggest value in a given list\n    '''\n    pass\n    \ndef smallest_diff_fast_3(nums):\n    '''\n    Write a python function to find the smallest value in a given list\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff(nums):\n    '''\n    Write a python function to sort a given list by smallest difference between two biggest values\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff_fast(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff_fast(nums):\n    '''\n    Write a python function to sort a given list by smallest difference between two biggest values\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff_fast_2(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff_fast_2(nums):\n    '''\n    Write a python function to sort a given list by smallest difference between two biggest values\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff_fast_3(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff_fast_3(nums):\n    '''\n    Write a python function to sort a given list by smallest difference between two biggest values\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff_fast_4(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff_fast_4(nums):\n    '''\n    Write a python function to sort a given list by smallest difference between two biggest values\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff_fast_5(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff_fast_5(nums):\n    '''\n    Write a python function to sort a given list by smallest difference between two biggest values\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff_fast_6(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff_fast_6(nums):\n    '''\n    Write a python function to sort a given list by smallest difference between two biggest values\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff_fast_7(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff_fast_7(nums):\n    '''\n    Write a python function to sort a given list by smallest difference between two biggest values\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff_fast_8(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff_fast_8(nums):\n    '''\n    Write a python function to sort a given list by smallest difference between two biggest values\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff_fast_9(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff_fast_9(nums):\n    '''\n    Write a python function to sort a given list by smallest difference between two biggest values\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff_fast_10(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff_fast_10(nums):\n    '''\n    Write a python function to sort a given list by smallest difference between two biggest values\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff_fast_11(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff_fast_11(nums):\n    '''\n    Write a python function to sort a given list by smallest difference between two biggest values\n    '''\n    pass\n    \ndef sort_list_by_biggest_diff_fast_12(nums):\n    '''\n    Write a python function to sort a given list by biggest difference between two smallest values\n    '''\n    pass\n    \ndef sort_list_by_smallest_diff_fast_12(nums):\n    '''\n    Writ"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        if a**0.5 == int(a**0.5):\n            return (a**0.5, a**0.5)\n        else:\n            return None\n    else:\n        if b**0.5 == int(b**0.5):\n            return (b**0.5, b**0.5)\n        else:\n            return None\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    count = 1\n    while count * count <= b - a:\n        count += 1\n    return count * count == b - a\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # while a <= b:\n    #     if a**.5 == int(a**.5):\n    #         yield a**2\n    #     a += 1\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        return []\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sq_nums = []\n    for n in range(a, b):\n        if n ** 0.5 == int(n ** 0.5):\n            sq_nums.append(n)\n    return sq_nums\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    i = 0\n    if a < b:\n        i = a\n    else:\n        i = b\n    sq = 1\n    while sq**2 <= i:\n        if sq**2 == i:\n            return i\n        sq += 1\n    return -1\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if (i**0.5) % 1 == 0:\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    res = []\n    if a < b:\n        for i in range(a, b + 1):\n            if i * i == a:\n                res.append(i)\n            elif i * i < a:\n                if i * i - a in res:\n                    res.append(i * i)\n                else:\n                    res.append(i)\n            else:\n                res.append(i)\n        return res\n    else:\n        return []\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # a = int(input())\n    # b = int(input())\n    res = []\n    sqr = lambda x: x**2\n    for i in range(a, b+1):\n        if sqr(i) > b:\n            break\n        elif sqr(i) == i:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return [a]\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y),x*math.sin(y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    xr = x * cmath.cos(y)\n    yr = y * cmath.sin(y)\n    return xr, yr\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import numpy as np\n    \n    r=np.sqrt(x**2+y**2)\n    phi=np.arctan2(y,x)\n    return r, phi\ndef rect_polar(r,phi):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x,y\ndef cartesian_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import numpy as np\n    \n    r=np.sqrt(x**2+y**2)\n    phi=np.arctan2(y,x)\n    return r, phi\ndef cartesian_rect_2(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x, y\ndef polar_cart(r,phi):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x, y\ndef polar_rect_2(r,phi):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x, y\ndef rect_cart(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x, y\ndef rectangular_cartesian(r, phi):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x, y\ndef rectangular_polar(r, phi):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x, y\ndef create_generator(func, *args, **kwargs):\n    '''\n    Creates a generator function that will execute func with *args and **kwargs.\n    '''\n    def generator():\n        while True:\n            yield func(*args, **kwargs)\n    return generator\ndef get_complex_roots(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_2(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_3(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_4(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_5(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_6(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_7(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_8(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_9(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_10(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_11(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_12(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b*"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    c = []\n    x = list(x)\n    y = list(y)\n    for i in range(0,len(x)):\n        a = cmath.polar(complex(x[i],y[i]))\n        c.append(a)\n    return c\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x,y)\ndef polar_to_rect(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r,t)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x,y)\ndef polar_to_rect(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r,t)\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return Tru"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cos(y)-y*sin(x)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # a = cmath.sqrt(x*x + y*y)\n    # b = cmath.atan2(y,x)\n    # return a*math.cos(b), a*math.sin(b)\n    # print a,b\n    a = complex(x,y)\n    r = abs(a)\n    theta = cmath.phase(a)\n    return r*math.cos(theta), r*math.sin(theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return complex(x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rectangle = [x,y]\n    return rectangle\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_out = x*cmath.sqrt(1-y**2)\n    y_out = y*cmath.sqrt(1-y**2)\n    return x_out,y_out\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.acos(y/r)\n    return r,theta\ndef rect_to_polar_test():\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    print(\"Testing polar_rect\")\n    #Test 1\n    assert(polar_rect(1,2) == (1,2))\n    #Test 2\n    assert(polar_rect(-1,1) == (-1,1))\n    #Test 3\n    assert(polar_rect(1,-1) == (1,-1))\n    #Test 4\n    assert(polar_rect(1,1) == (1,1))\n    #Test 5\n    assert(polar_rect(0,1) == (0,cmath.pi/2))\n    #Test 6\n    assert(polar_rect(1,0) == (1,0))\n    #Test 7\n    assert(polar_rect(0,0) == (0,0))\n    #Test 8\n    assert(polar_rect(-1,0) == (0,-cmath.pi))\n    #Test 9\n    assert(polar_rect(0,-1) == (0,cmath.pi))\n    #Test 10\n    assert(polar_rect(-1,0) == (0,-cmath.pi))\n    #Test 11\n    assert(polar_rect(-1,1) == (0,cmath.pi))\n    #Test 12\n    assert(polar_rect(-1,-1) == (0,-cmath.pi))\n    #Test 13\n    assert(polar_rect(-1,-1) == (0,-cmath.pi))\n    #Test 14\n    assert(polar_rect(-1,0) == (0,cmath.pi))\n    #Test 15\n    assert(polar_rect(0,-1) == (0,-cmath.pi))\n    #Test 16\n    assert(polar_rect(0,0) == (0,0))\n    #Test 17\n    assert(polar_rect(0,1) == (0,cmath.pi))\n    #Test 18\n    assert(polar_rect(1,0) == (0,cmath.pi))\n    #Test 19\n    assert(polar_rect(1,1) == (0,cmath.pi))\n    #Test 20\n    assert(polar_rect(1,-1) == (0,cmath.pi))\n    #Test 21\n    assert(polar_rect(0,2) == (0,cmath.pi))\n    #Test 22\n    assert(polar_rect(1,2) == (0,cmath.pi))\n    #Test 23\n    assert(polar_rect(-1,-2) == (0,cmath.pi))\n    #Test 24\n    assert(polar_rect(-1,2) == (0,cmath.pi))\n    #Test 25\n    assert(polar_rect(-1,-2) == (0,cmath.pi))\n    #Test 26\n    assert(polar_rect(-1,2) == (0,cmath.pi))\n    #Test 27\n    assert(polar_rect(2,2) == (0,cmath.pi))\n    #Test 28\n    assert(polar_rect(-2,2) == (0,cmath.pi))\n    #Test 29\n    assert(polar_rect(-2,-2) == (0,cmath.pi))\n    #Test 30\n    assert(polar_rect(-2,-2) == (0,cmath.pi))\n    #Test 31\n    assert(polar_rect(2,-2) == (0,-cmath.pi))\n    #Test 32\n    assert(polar_rect(-2,2) == (0,cmath.pi))\n    #Test 33\n    assert(polar_rect(0,0) == (0,0))\n    #Test 34\n    assert(polar_rect(0,1) == (0,cmath.pi))\n    #Test 35\n    assert(polar_rect(1,0) == (0,cmath.pi))\n    #Test 36\n    assert(polar_rect(1,1) == (0,cmath.pi))\n    #Test 37\n    assert(polar_rect(1,-1) == (0,cmath.pi))\n    #Test 38\n    assert(polar_rect(-1,0) == (0,cmath.pi))\n    #Test 39\n    assert(polar_rect(-1,1) == (0,cmath.pi))\n    #Test 40\n    assert(polar_rect(-1,-1) == (0,cmath.pi))\n    #Test 41\n    assert(polar_rect(1,0) == (0,cmath.pi))\n    #Test 42\n    assert(polar_rect(0,0) == (0,0))\n    #Test 43\n    assert(polar_rect(0,1) == (0,cmath.pi))\n    #Test 44\n    assert(polar_rect(0,-1) == (0,-cmath.pi))\n    #Test 45\n    assert(polar_rect(0,2) == (0,cmath.pi))\n    #Test 46\n    assert(polar_rect(0,-2) == (0,-cmath.pi))\n    #Test 47\n    assert(polar_rect(0,3) == (0,cmath.pi))\n    #Test 48\n    assert(polar_rect(1,3) == (0,cmath.pi))\n    #Test 49\n    assert(polar_rect(-1,-3) == (0,-cmath.pi))\n    #Test 50\n    assert(polar_rect(-1,3) == (0,cmath.pi))\n    #Test 51\n    assert(polar_rect(2,3) == (0,cmath.pi))\n    #Test 52\n    assert(polar_rect(-2,-3) == (0,-cmath.pi))\n    #Test 53\n    assert(polar_rect(-2,3) == (0,cmath.pi))\n    #Test 54\n    assert(polar_rect(2,-3) == (0,-cmath.pi))\n    #Test 55\n    assert(polar_rect(-2,-3) == (0,-cmath.pi))\n    #Test 56\n    assert(polar_rect(3,3) == (0,cmath.pi))\n    #Test 57\n    assert(polar_rect(-3,3) == (0,cmath.pi))\n    #Test 58\n    assert(polar_rect(3,-3) == (0,-cmath.pi))\n    #Test 59\n    assert(polar_rect(-3,-3) == (0,-cmath.pi))\n    #Test 60\n    assert(polar_rect(3,3) == (0,cmath.pi))\n    #Test 61\n    assert(polar_rect(-3,3) == (0,cmath.pi))\n    #Test 62\n    assert(polar_rect(3,-3) == (0,-cmath.pi))\n    #Test 63\n    assert(polar_rect(-3,-3) == (0,-cmath.pi))\n    #Test 64\n    assert(polar_rect(4,4) == (0,cmath.pi))\n    #Test 65\n    assert(polar_rect(-4,4) == (0,cmath.pi))\n    #Test 66\n    assert(polar_rect(4,-4) == (0,-cmath.pi))\n    #Test 67\n    assert(polar_rect(-4,-4) == (0,-cmath.pi))\n    #Test 68\n    assert(polar_rect(4,4) == (0,cmath.pi))\n    #Test 69\n    assert(polar_rect(-4,4) == (0,cmath.pi))\n    #Test 70\n    assert(pola"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n < 2:\n        return newList\n    temp = newList[0]\n    newList[0] = newList[n - 1]\n    newList[n - 1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    l = len(newList)\n    newList[0], newList[l-1] = newList[l-1], newList[0]\n    return newList\n    \nprint swap_List([1,2,3])\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList[0]\n    b = newList[-1]\n    newList[0] = b\n    newList[-1] = a\n    return newList\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    newList[0],newList[length-1] = newList[length-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \ndef start_up(x):\n    '''\n    Write a python function to print all the elements of a list starting from the\n    first one in descending order and then print the list in ascending order\n    '''\n    for i in range(x):\n        print(x-i)\n    for i in range(x):\n        print(x-i-1)\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n    "
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    # Make a copy\n    newListCopy = newList[:]\n    \n    # Swap first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the new list\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [0]*k\n    C[0] = 1\n    for i in xrange(1,n+1):\n        for j in xrange(min(i,k)):\n            C[j] += C[j]\n            if i < k:\n                C[i] += C[i-1]\n    return C[k-1]\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binom_coeff = 1\n    for i in range(1,k+1):\n        binom_coeff = binom_coeff*int(n-i+1)//int(i)\n    return binom_coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return reduce(lambda x,y: x*y, [int(comb(n,i)) for i in range(k)])\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    C = [[0 for x in xrange(k+1)] for x in xrange(n+1)] \n    for i in range(0,n+1): \n        for j in range(0,min(i,k)+1): \n            if j == 0 or j == i: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k]\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomialCoeff = [[0 for i in range(k+1)] for j in range(n+1)] \n    binomialCoeff[0][0] = 1\n    for i in range(1,n+1): \n        binomialCoeff[i][0] = 1\n        for j in range(1,k+1):\n            if j <= i:\n                binomialCoeff[i][j] = binomialCoeff[i-1][j-1] + binomialCoeff[i-1][j]\n            else:\n                binomialCoeff[i][j] = binomialCoeff[i-1][j]\n    return binomialCoeff[n][k]\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return reduce(lambda x,y: x+y,  [int(math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) for k in range(0,n)])\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k == 0 or k == n): \n        return 1\n    if(k == 1): \n        return n\n    return (n*binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)) \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int(factorial(n) / (factorial(k) * factorial(n-k))) \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0 or k==n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n==0 or n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef cFact(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*cFact(n-1)\n    \ndef valueOfBinomial(x,n,p):\n    '''\n    Write a python function to find the value of a binomial distribution with a given n and p.\n    '''\n    return cFact(n)/(factorial(n-x)*factorial(x))*p**x*(1-p)**(n-x)\n    \ndef valueOfPoisson(x,l):\n    '''\n    Write a python function to find the value of a poisson distribution with a given l.\n    '''\n    return cFact(l)/(l**x*exp(-l))\n    \ndef powerSum(n):\n    '''\n    Write a python function to find the sum of the powers of the numbers from 1 to n.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n+powerSum(n-1)\n    \ndef powerSumEfficient(n):\n    '''\n    Write a python function to find the sum of the powers of the numbers from 1 to n.\n    '''\n    total = 1\n    i = 1\n    while i<=n:\n        total+=i\n        i+=1\n    return total\n    \ndef sumOfDigits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%10 + sumOfDigits(n//10)\n    \ndef sumOfDigitsEfficient(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    if n==0:\n        return 0\n    if n%10==0:\n        return sumOfDigits(n//10)\n    else:\n        return n%10 + sumOfDigitsEfficient(n//10)\n    \ndef sumOfDigitsEfficient2(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    return n%9 if n%9>0 else 9\n    \ndef sumOfDigitsEfficient3(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%10 + sumOfDigitsEfficient3(n//10)\n    \ndef sumOfDigitsEfficient4(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    return sumOfDigitsEfficient3(n//10) if n%10==0 else n%10 + sumOfDigitsEfficient4(n//10)\n    \ndef isPalindrome(n):\n    '''\n    Write a python function to find if a given number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    elif n==0:\n        return True\n    else:\n        return n%10 == n//10%10 and isPalindrome(n//10)\n    \ndef isPalindromeEfficient(n):\n    '''\n    Write a python function to find if a given number is palindrome or not.\n    '''\n    return n//10 == 0 or n%10 == n//10%10\n    \ndef isPalindromeEfficient2(n):\n    '''\n    Write a python function to find if a given number is palindrome or not.\n    '''\n    if n==0:\n        return True\n    elif n%10 == n//10%10:\n        return isPalindromeEfficient2(n//10)\n    else:\n        return False\n    \ndef reverse(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while n!=0:\n        rev = rev*10 + n%10\n        n = n//10\n    return rev\n    \ndef reverseEfficient(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    return 0 if n==0 else reverseEfficient(n//10) * 10 + n%10\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n==0 or n==1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef fibonacciEfficient(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return fibonacciEfficient(n-1) + fibonacciEfficient(n-2)\n    \ndef fibonacciEfficient2(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    fib = [0,1]\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        for i in range(2,n+1):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib[n]\n    \ndef fibonacciEfficient3(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n]\n    \ndef fibonacciEfficient4(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacciEfficient4(n-1) + fibonacciEfficient4(n-2)\n    \ndef fibonacciEfficient5(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    a,b = 0,1\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        for i in range(2,n+1):\n            a,b = b,a+b\n        return b\n    \ndef isPrime(n):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if n==1:\n        return False\n    elif n==2 or n==3:\n        return True\n    else:\n        return n%2==0 and isPrime(n//2)\n        \ndef isPrimeEfficient(n):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    return n>1 and n%2!=0 and isPrimeEfficient(n//2)\n    \ndef findMaxSum(a):\n    '''\n    Write a python function to find the maximum sum of consecutive numbers in a list.\n    '''\n    if a==[]:\n        return 0\n    else:\n        return a[0] + findMaxSum(a[1:])\n    \ndef findMaxSumEfficient(a):\n    '''\n    Write a python function to find the maximum sum of consecutive numbers in a list.\n    '''\n    if a==[]:\n        return 0\n    if len(a)==1:\n        return a[0]\n    else:\n        return a[0] + findMaxSumEfficient(a[1:]"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0 or k < 0 or n < k:\n        return 0\n    if k == 0:\n        return 1\n    if k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_split = ip.split('.')\n    for i in range(len(ip_split)):\n        if ip_split[i] == '0':\n            ip_split[i] = '2'\n    new_ip = '.'.join(ip_split)\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    a = ip.split(\".\")\n    del a[0]\n    return \".\".join(a)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.startswith('0'):\n        ip = ip[1:]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    '''\n    ip = '0.0.0.0'\n    \n    ip = \"123.456.789.0\"\n    print(ip.strip('0'))\n    '''\n    ip = re.sub(r'\\.(\\d)\\0+', r'\\1', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\.0*', r'', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\.0+)\\1*',r'\\1',ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    #print ip_list\n    for i in range(4):\n        ip_list[i] = ip_list[i].lstrip('0')\n    return '.'.join(ip_list)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(?<![\\.])0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) > 1:\n        ip = re.sub(r'^0+', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip[1:]\n    return ip\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in list1:\n        if i % 2 == 0:\n            return i - list1[list1.index(i) + 1]\n        elif i % 2!= 0:\n            return list1[list1.index(i) + 1] - i\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i = 1\n    while i < len(list1):\n        if list1[i]%2 == 0 and list1[i-1]%2 == 1:\n            return list1[i] - list1[i-1]\n        i += 2\n    return \"The number is not odd or even\"\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return abs(list1[0] - list1[1])\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in list1:\n        if i%2 == 0:\n            return i-list1[list1.index(i)-1]\n    else:\n        return None\n    \n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    return list1[1] - list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list[0] - odd_list[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[1]-list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[1] - list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff_odd = [list1[i] for i in xrange(len(list1)) if i % 2]\n    diff_even = [list1[i] for i in xrange(len(list1)) if not i % 2]\n    return diff_odd[0] - diff_even[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(even) < len(odd):\n        return abs(even[0] - odd[0])\n    else:\n        return abs(odd[0] - even[0])\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    # We need to convert both the strings to integer values to calculate minimum number of swaps\n    str1 = [int(x) for x in str1]\n    str2 = [int(x) for x in str2]\n    count = 0\n    # Traverse through both the strings\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            index = str2.index(str1[i])\n            # if not the same, then it is equivalent to doing a swap\n            # update the strings in index\n            str2[index] = str1[i]\n            str2[i] = str1[i]\n            # increment the count\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if not str1 or not str2 : \n        return -1\n    \n    swap = 0\n    len1 = len(str1)\n    len2 = len(str2)\n    if len1!= len2 :\n        return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1 == str2:\n        return 0\n    if str1 is None or str2 is None:\n        return -1\n    if len(str1)!= len(str2):\n        return -1\n    # initialize dictionary for the count of each number as zero\n    count = {'0' : 0, '1' : 0}\n    for i in str1:\n        count[i] += 1\n    for i in str2:\n        count[i] -= 1\n    \n    swap = 0\n    for i in count:\n        if count[i]!= 0:\n            swap += count[i]\n    return swap\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1=int(str1,2)\n    str2=int(str2,2)\n    num =0\n    count = 0\n    while(str1!=str2):\n        temp=str1^str2\n        if(temp&1==0):\n            str1=(temp>>1)\n        else:\n            str1=(temp>>1)^1\n        num+=1\n        count+=1\n    return num\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i] :\n            count+=1\n            a=i\n            b=i+1\n            while b<len(str2):\n                if str1[a]==str2[b]:\n                    break\n                a+=1\n                b+=1\n            str1=str1[:a]+str1[a+1:]+str1[a]+str1[:a]\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n            str2 = str2[:i] + str(str2[i]) + str2[i+1:]\n    return count \n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            count += 1\n            str2 = str2[:i] + str2[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i] + str2[i+1:]\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    length = len(str1)\n    #print (str1,str2)\n    if length!= len(str2) :\n        return -1\n    swap = 0\n    for i in range(length) :\n        if str1[i]!= str2[i] :\n            temp = str1[i]\n            str1 = str1.replace(str1[i],'',1)\n            str1 = str1 + temp\n            swap += 1\n    return swap\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Your Code Here\n    if len(str1)!=len(str2):\n        return -1\n    x=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            x+=1\n    return x\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    \nprint(tuple_size((1,2,3,4,5)))\nprint(tuple_size(tuple_size((1,2,3,4,5))))\nprint(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12)))\nprint(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12))))\nprint(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))\nprint(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))))\nprint(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size=0\n    for i in tuple_list:\n        size = sys.getsizeof(i)\n        tuple_size+=size\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef convert_to_tuple(list_of_tuples):\n    '''\n    Write a function to convert the given list of tuples into a tuple.\n    '''\n    return tuple(list_of_tuples)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size=0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #return sys.getsizeof(tuple_list)\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\ndef tuple_time(tuple_list):\n    '''\n    Write a function to find the running time of the tuple.\n    '''\n    import time\n    start = time.time()\n    tuple_size(tuple_list)\n    end = time.time()\n    return end - start\ndef tuple_concatenate(tuple_list):\n    '''\n    Write a function to find the time it takes to concatenate two tuples.\n    '''\n    tuple_concat = tuple_list + tuple_list\n    return tuple_time(tuple_concat)\ndef tuple_set(tuple_list):\n    '''\n    Write a function to find the time it takes to set the elements of a tuple.\n    '''\n    tuple_concat = tuple(set(tuple_list))\n    return tuple_time(tuple_concat)\ndef tuple_slice(tuple_list):\n    '''\n    Write a function to find the time it takes to slice a tuple.\n    '''\n    sliced_tuple = tuple_list[0:5]\n    return tuple_time(sliced_tuple)\ndef tuple_access(tuple_list):\n    '''\n    Write a function to find the time it takes to access a tuple element.\n    '''\n    sliced_tuple = tuple_list[0:5]\n    tuple_access = sliced_tuple[0]\n    return tuple_time(tuple_access)\ndef tuple_pop(tuple_list):\n    '''\n    Write a function to find the time it takes to pop an element from a tuple.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_pop = tuple_list.pop(0)\n    return tuple_time(tuple_pop)\ndef tuple_count(tuple_list):\n    '''\n    Write a function to find the time it takes to count the number of occurrances of an element in a tuple.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_count = tuple_list.count(1)\n    return tuple_time(tuple_count)\ndef tuple_index(tuple_list):\n    '''\n    Write a function to find the time it takes to find the index of an element in a tuple.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_index = tuple_list.index(1)\n    return tuple_time(tuple_index)\ndef tuple_sum(tuple_list):\n    '''\n    Write a function to find the time it takes to sum all the elements in a tuple.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_sum = sum(tuple_list)\n    return tuple_time(tuple_sum)\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to find the time it takes to reverse a tuple.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_reverse = tuple_list[::-1]\n    return tuple_time(tuple_reverse)\ndef tuple_sort(tuple_list):\n    '''\n    Write a function to find the time it takes to sort a tuple.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_sort = sorted(tuple_list)\n    return tuple_time(tuple_sort)\ndef tuple_sort_dict(tuple_list):\n    '''\n    Write a function to find the time it takes to sort a dictionary.\n    '''\n    import operator\n    tuple_list = tuple_list[0:5]\n    tuple_list_dict = sorted(tuple_list.items(), key=operator.itemgetter(1))\n    return tuple_time(tuple_list_dict)\ndef tuple_sort_list(tuple_list):\n    '''\n    Write a function to find the time it takes to sort a list.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_list_list = sorted(tuple_list)\n    return tuple_time(tuple_list_list)\ndef tuple_sort_str(tuple_list):\n    '''\n    Write a function to find the time it takes to sort a string.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_list_str = sorted(tuple_list)\n    return tuple_time(tuple_list_str)\ndef tuple_convert(tuple_list):\n    '''\n    Write a function to find the time it takes to convert a tuple to a list.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_list_convert = list(tuple_list)\n    return tuple_time(tuple_list_convert)\ndef tuple_tuple(tuple_list):\n    '''\n    Write a function to find the time it takes to convert a list to a tuple.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_list_tuple = tuple(tuple_list)\n    return tuple_time(tuple_list_tuple)\ndef tuple_add(tuple_list):\n    '''\n    Write a function to find the time it takes to add two tuples.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_list_add = tuple_list + tuple_list\n    return tuple_time(tuple_list_add)\ndef tuple_add_str(tuple_list):\n    '''\n    Write a function to find the time it takes to add two tuples.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_list_add = tuple_list + tuple_list\n    tuple_list_add_str = tuple_list_add + tuple_list_add\n    return tuple_time(tuple_list_add_str)\ndef tuple_mul(tuple_list):\n    '''\n    Write a function to find the time it takes to multiply two tuples.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_list_mul = tuple_list * tuple_list\n    return tuple_time(tuple_list_mul)\ndef tuple_mul_str(tuple_list):\n    '''\n    Write a function to find the time it takes to multiply two tuples.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_list_mul = tuple_list * tuple_list\n    tuple_list_mul_str = tuple_list_mul * tuple_list_mul\n    return tuple_time(tuple_list_mul_str)\ndef tuple_in(tuple_list):\n    '''\n    Write a function to find the time it takes to check if an element is in a tuple.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_list_in = tuple_list in tuple_list\n    return tuple_time(tuple_list_in)\ndef tuple_in_str(tuple_list):\n    '''\n    Write a function to find the time it takes to check if an element is in a tuple.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_list_in_str = tuple_list in tuple_list\n    return tuple_time(tuple_list_in_str)\ndef tuple_index_in(tuple_list):\n    '''\n    Write a function to find the time it takes to find the index of an element in a tuple.\n    '''\n    tuple_list = tuple_list[0:5]\n    tuple_list_in_index = tuple_list.index(1)\n    return tuple_time(tuple_list_in_index)\ndef tuple_add_set(tuple_list):\n    '''\n    Write a function to find the time it takes to add an element to a set.\n    '''"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef tuple_sum(tuple_list):\n    '''\n    Write a function to find the sum of the elements of the given tuple.\n    '''\n    return sum(tuple_list)\ndef tuple_max(tuple_list):\n    '''\n    Write a function to find the maximum element of the given tuple.\n    '''\n    return max(tuple_list)\ndef tuple_min(tuple_list):\n    '''\n    Write a function to find the minimum element of the given tuple.\n    '''\n    return min(tuple_list)\ndef tuple_join(tuple_list):\n    '''\n    Write a function to join the given tuple with commas.\n    '''\n    return tuple_list.join(',')\ndef tuple_last(tuple_list):\n    '''\n    Write a function to find the last element of the given tuple.\n    '''\n    return tuple_list[-1]\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse the tuple.\n    '''\n    return tuple_list[::-1]\ndef tuple_sort(tuple_list):\n    '''\n    Write a function to sort the given tuple in ascending order.\n    '''\n    return tuple_list.sort()\ndef tuple_random(tuple_list):\n    '''\n    Write a function to find a random element of the given tuple.\n    '''\n    import random\n    return random.choice(tuple_list)\ndef tuple_check(tuple_list):\n    '''\n    Write a function to check whether all the elements of the given tuple are unique or not.\n    '''\n    return len(set(tuple_list)) == len(tuple_list)\ndef tuple_pop(tuple_list):\n    '''\n    Write a function to remove the last element of the given tuple and return a new tuple with the same elements except the last element.\n    '''\n    return tuple_list[:-1]\ndef tuple_index(tuple_list, index):\n    '''\n    Write a function to find the index of the given element of the given tuple.\n    '''\n    return tuple_list.index(index)\ndef tuple_remove(tuple_list, index):\n    '''\n    Write a function to remove the given index of the given tuple and return a new tuple with the same elements except the element at the given index.\n    '''\n    return tuple_list[:index] + tuple_list[index+1:]\ndef tuple_extend(tuple_list, tuple_list2):\n    '''\n    Write a function to extend the tuple with the given tuple.\n    '''\n    return tuple_list.extend(tuple_list2)\ndef tuple_concat(tuple_list, tuple_list2):\n    '''\n    Write a function to concatenate the given tuples.\n    '''\n    return tuple_list + tuple_list2\ndef tuple_insert(tuple_list, index, value):\n    '''\n    Write a function to insert the given value in the given index of the given tuple and return a new tuple.\n    '''\n    return tuple_list[:index] + (value, ) + tuple_list[index:]\ndef tuple_count(tuple_list, value):\n    '''\n    Write a function to find the number of times the given value occurs in the given tuple.\n    '''\n    return tuple_list.count(value)\ndef tuple_delete(tuple_list, index):\n    '''\n    Write a function to delete the given index of the given tuple and return a new tuple with the same elements except the element at the given index.\n    '''\n    return tuple_list[:index] + tuple_list[index+1:]\ndef tuple_replace(tuple_list, index, value):\n    '''\n    Write a function to replace the value at the given index of the given tuple with the given value and return a new tuple with the same elements except the element at the given index.\n    '''\n    return tuple_list[:index] + (value, ) + tuple_list[index+1:]\ndef tuple_swap(tuple_list, index1, index2):\n    '''\n    Write a function to swap the values of the given indices of the given tuple and return a new tuple with the same elements.\n    '''\n    return tuple_list[:index1] + tuple_list[index2], tuple_list[index2] + tuple_list[index1]\ndef tuple_slice(tuple_list, start, end):\n    '''\n    Write a function to find a slice of the given tuple (starting from the given index to the given index).\n    '''\n    return tuple_list[start:end]\ndef tuple_add(tuple_list, tuple_list2):\n    '''\n    Write a function to find the sum of the two tuples and return a new tuple which contains the sum of each element of both the given tuples.\n    '''\n    return tuple(tuple_list[i] + tuple_list2[i] for i in range(len(tuple_list)))\ndef tuple_subtract(tuple_list, tuple_list2):\n    '''\n    Write a function to find the difference between the two tuples and return a new tuple which contains the difference between each element of both the given tuples.\n    '''\n    return tuple(tuple_list[i] - tuple_list2[i] for i in range(len(tuple_list)))\ndef tuple_multiply(tuple_list, tuple_list2):\n    '''\n    Write a function to multiply the two tuples and return a new tuple which contains the product of each element of both the given tuples.\n    '''\n    return tuple(tuple_list[i] * tuple_list2[i] for i in range(len(tuple_list)))\ndef tuple_divide(tuple_list, tuple_list2):\n    '''\n    Write a function to divide the two tuples and return a new tuple which contains the division of each element of both the given tuples.\n    '''\n    return tuple(tuple_list[i] / tuple_list2[i] for i in range(len(tuple_list)))\ndef tuple_modulus(tuple_list, tuple_list2):\n    '''\n    Write a function to find the modulus of the two tuples and return a new tuple which contains the modulus of each element of both the given tuples.\n    '''\n    return tuple(tuple_list[i] % tuple_list2[i] for i in range(len(tuple_list)))\ndef tuple_power(tuple_list, tuple_list2):\n    '''\n    Write a function to find the power of the two tuples and return a new tuple which contains the power of each element of both the given tuples.\n    '''\n    return tuple(tuple_list[i] ** tuple_list2[i] for i in range(len(tuple_list)))\ndef tuple_length(tuple_list):\n    '''\n    Write a function to find the length of the given tuple.\n    '''\n    return len(tuple_list)\ndef tuple_min_element(tuple_list):\n    '''\n    Write a function to find the minimum element of the given tuple.\n    '''\n    return min(tuple_list)\ndef tuple_max_element(tuple_list):\n    '''\n    Write a function to find the maximum element of the given tuple.\n    '''\n    return max(tuple_list)\ndef tuple_sum_elements(tuple_list):\n    '''\n    Write a function to find the sum of all the elements of the given tuple.\n    '''\n    return sum(tuple_list)\ndef tuple_difference_elements(tuple_list):\n    '''\n    Write a function to find the difference between the largest and the smallest element of the given tuple.\n    '''\n    return max(tuple_list) - min(tuple_list)\ndef tuple_product(tuple_list):\n    '''\n    Write a function to find the product of all the elements of the given tuple.\n    '''\n    return reduce(lambda x,y:x*y, tuple_list)\ndef tuple_quotient(tuple_list):\n    '''\n    Write a function to find the quotient of the largest and the smallest element of the given tuple."
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1 = 0\n    p2 = 0\n    c = 0\n    while(c < k):\n        if arr1[p1] < arr2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n        c += 1\n    if p1 < len(arr1):\n        return arr1[p1]\n    if p2 < len(arr2):\n        return arr2[p2]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    mid1 = len(arr1)/2\n    mid2 = len(arr2)/2\n    if k > mid1 + mid2:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n        else:\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    elif k < mid1 + mid2:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[:mid1+1], arr2, k)\n    else:\n        return arr1[mid1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # merge the two arrays into one large array and return the kth element\n    def merge_arrays(arr1, arr2):\n        sorted_arr = []\n        i, j = 0, 0\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                sorted_arr.append(arr1[i])\n                i += 1\n            else:\n                sorted_arr.append(arr2[j])\n                j += 1\n        sorted_arr.extend(arr1[i:])\n        sorted_arr.extend(arr2[j:])\n        return sorted_arr\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # Check if k is valid\n    if (k < 1 or k > len(arr1) + len(arr2)):\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    a1, a2 = arr1, arr2\n    if len(arr1) < len(arr2):\n        a1, a2 = a2, a1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # In case of tie, if k is even then search for\n    # first k/2 elements and if k is odd then search\n    # for last (k-k/2-1) elements\n    if k > len(arr1):\n        return arr2[k-1]\n    if k > len(arr2):\n        return arr1[k-1]\n    \n    # Binary search on both arrays\n    if arr1[k/2] > arr2[k/2]:\n        if k%2==0:\n            return find_kth(arr1[:k/2], arr2[k/2:], k/2)\n        else:\n            return find_kth(arr1[k/2+1:], arr2[:k/2+1], k-k/2-1)\n    elif arr1[k/2] < arr2[k/2]:\n        if k%2==0:\n            return find_kth(arr1[k/2:], arr2[:k/2], k-k/2)\n        else:\n            return find_kth(arr1[:k/2], arr2[k/2+1:], k/2)\n    else:\n        return arr1[k/2]\n    \n    \n    \n    \n    \narr1 = [2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 15, 16, 17, 19]\narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == i + j:\n                return arr1[i]\n            elif k < i + j:\n                return arr1[i]\n            else:\n                return arr2[j]\n    return arr1[i] if i + j == k else arr2[j]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2:\n        return None\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits = 0\n    temp = number\n    while temp!= 0:\n        digits += 1\n        temp = temp // 10\n    return number == sum(int(digit) ** digits for digit in str(number))\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    summation = 0\n    digits = 0\n    x = number\n    while (number > 0):\n        digits += 1\n        number = number // 10\n    number = x\n    while (x > 0):\n        summation = summation + pow(x % 10, digits)\n        x = x // 10\n    if (summation == number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    temp = 0\n    for digit in str(number):\n        temp += int(digit)**length\n    return temp == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number == 0:\n        return True\n    arr = [int(x) for x in str(number)]\n    sum = 0\n    for x in arr:\n        sum += x ** 3\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_list = [int(i) for i in str(number)]\n    if len(number_list) == 1:\n        return True\n    else:\n        count = 0\n        for i in number_list:\n            count += pow(i, len(number_list))\n        if count == number:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    str_num = str(number)\n    len_str_num = len(str_num)\n    \n    sum = 0\n    for i in range(len_str_num):\n        sum += int(str_num[i]) ** len_str_num\n    \n    return sum == number\n    \nassert armstrong_number(153)\nassert not armstrong_number(111)\nassert armstrong_number(91897)\nassert not armstrong_number(9988)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    armstrong_sum = 0\n    digits = list(str(number))\n    n = len(digits)\n    for i in range(n):\n        armstrong_sum += int(digits[i])**n\n    return armstrong_sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    length = len(number)\n    # Sum of square of digits\n    square_sum = 0\n    for i in range(length):\n        square_sum = square_sum + (int(number[i]) ** length)\n    if(square_sum == int(number)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    copy_number = number\n    \n    while(copy_number > 0):\n        digit = copy_number % 10\n        sum += digit ** 3\n        copy_number //= 10\n    \n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # To handle negative numbers\n    if number < 0:\n        return False\n    \n    # The sum of the squares of the digits is equal to the number itself\n    # Ex: 153 = 1^2 + 5^2 + 3^2 = 153\n    temp = number\n    sum = 0\n    \n    # To extract the digits\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    \n    # The number must be equal to the sum\n    return sum == number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    for i in range(number+1):\n        result += i\n    return result/number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for x in range(1,number+1):\n        sum += x\n    return sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    total = 0\n    total += number\n    return (total/number)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    i = 1\n    numbers = []\n    sum = 0\n    while i <= number:\n        numbers.append(i)\n        sum += i\n        i += 1\n    average = sum / number\n    print('Average = %.2f' % average)\n    print('Sum = %d' % sum)\n    return numbers\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 0:\n        return 'The number should be positive'\n    else:\n        sum = 0\n        for x in range(number):\n            sum += x\n        average = sum / number\n        return average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,number+1):\n        s += i\n    avg = s/number\n    return s, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    total_sum = 0\n    total_avg = 0\n    \n    for i in range(1,n+1):\n        total_sum += i\n        \n    total_avg = total_sum / n\n    return total_sum, total_avg\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 0:\n        return\n    else:\n        total = 0\n        for i in range(1, number+1):\n            total += i\n        return total/number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(1,number+1)), sum(range(1,number+1))/number\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2) == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2 == 0) \n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n%2 == 0)\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return True if n%2 == 0 else False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    return True if n%2!= 0 else False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict_={}\n    for i in str1:\n        if i not in dict_.keys():\n            dict_[i]=1\n        else:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d={}\n    for i in str1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n            break\n    return d\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char_dict = {}\n    for char in str1:\n        if char in repeated_char_dict:\n            return char\n        repeated_char_dict[char] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = sorted(str1)\n    for i,c in enumerate(s):\n        if c!= s[i-1]:\n            return c\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i)>1:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for char in str1:\n        if char in dict1:\n            return char\n        else:\n            dict1[char] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str2 = ''\n    for i in str1:\n        if str2.find(i) > -1:\n            return i\n        else:\n            str2 += i\n    return 'No repeated character'\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    ludic = []\n    for num in range(1, n):\n        if is_ludic(num):\n            ludic.append(num)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    if n <= 0:\n        return ludic\n    elif n == 1:\n        ludic.append(1)\n    else:\n        ludic.append(1)\n        for i in range(2, n):\n            if i**2 <= n:\n                ludic.append(i**2)\n            elif i**2 > n:\n                break\n        ludic.append(n)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = [1,2]\n    if n<=2:\n        return ludic_numbers\n    else:\n        while ludic_numbers[-1]<n:\n            ludic_numbers.append(ludic_numbers[-1]+ludic_numbers[-2])\n        return ludic_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    if n <= 0:\n        return lucids\n    elif n == 1:\n        lucids.append(1)\n    elif n == 2:\n        lucids.append(1)\n        lucids.append(2)\n    elif n > 2:\n        lucids.append(1)\n        lucids.append(2)\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                if i % 3 == 0:\n                    lucids.append(i)\n            else:\n                lucids.append(i)\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0,1]\n    if n == 2:\n        return [0,1,2]\n    if n == 3:\n        return [0,1,2,3]\n    if n == 4:\n        return [0,1,2,3,4]\n    if n == 5:\n        return [0,1,2,3,4,5]\n    if n == 6:\n        return [0,1,2,3,4,5,6]\n    if n == 7:\n        return [0,1,2,3,4,5,6,7]\n    if n == 8:\n        return [0,1,2,3,4,5,6,7,8]\n    if n == 9:\n        return [0,1,2,3,4,5,6,7,8,9]\n    if n == 10:\n        return [0,1,2,3,4,5,6,7,8,9,10]\n    if n == 11:\n        return [0,1,2,3,4,5,6,7,8,9,10,11]\n    if n == 12:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12]\n    if n == 13:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13]\n    if n == 14:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n    if n == 15:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    if n == 16:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    if n == 17:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n    if n == 18:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n    if n == 19:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    if n == 20:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    if n == 21:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    if n == 22:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n    if n == 23:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\n    if n == 24:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\n    if n == 25:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n    if n == 26:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]\n    if n == 27:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]\n    if n == 28:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]\n    if n == 29:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\n    if n == 30:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    if n == 31:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\n    if n == 32:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]\n    if n == 33:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]\n    if n == 34:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]\n    if n == 35:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]\n    if n == 36:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]\n    if n == 37:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]\n    if n == 38:\n        return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]\n    if n == 39:\n        return [0,1,2,"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    elif n == 3:\n        return [1,2]\n    ludic = [1,2,3]\n    while ludic[-1] < n:\n        ludic.append(ludic[-1] + ludic[-2] + ludic[-3])\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = set()\n    for i in range(1, n+1):\n        ludic.add(int(str(i) + str(i)[::-1]))\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # convert to string to avoid duplication\n    # if n = '0', it will be included\n    string_n = str(n)\n    lucid_set = set()\n    for i in range(len(string_n)):\n        string_n = string_n[:i] + '0' + string_n[i+1:]\n        if string_n == string_n[::-1]:\n            lucid_set.add(int(string_n))\n    return sorted(lucid_set)\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 1:\n        return []\n    \n    return [i for i in range(1, n+1) if is_lucid(i)]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [1]\n    for i in range(2, n):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    output = []\n    length = len(s)\n    for i in range(0, length):\n        if s[i] =='':\n            output.insert(0, s[i+1:])\n            output.insert(0, s[:i])\n    return ''.join(output)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split()\n    l.reverse()\n    return''.join(l)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split(\" \")))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split(' ')[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    start = len(s) - 1\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] =='':\n            start = i\n            break\n    reverse(s, 0, start)\n    reverse(s, start + 1, len(s) - 1)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    for i in xrange(len(words)/2):\n        words[i], words[-i-1] = words[-i-1], words[i]\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return''.join(reversed(words))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return \"\"\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 0:\n        num = num * -1\n    if num < 2:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num % 2 == 0 and num!= 2:\n        return False\n    for i in range(3, num, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num > 2 and num % 2 == 0:\n        return False\n    else:\n        for i in range(3, num, 2):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in xrange(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3,int(num**0.5)+1,2):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num <= 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5,int(num**0.5)+1,6):\n            if num % i == 0 or num % (i+2) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Base Case\n    if num < 2:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon."
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree>=0:\n        return degree*math.pi/180\n    elif degree<0:\n        return -degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degree_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radians_to_degree(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef degree_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radians_to_degree(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef degree_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radians_to_degree(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef get_azimuth(lat1, long1, lat2, long2):\n    '''\n    Write a function to get the azimuth between two points given their latitudes and longitudes. \n    The following are the arguments to the function:\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef radian_degree_list(degree_list):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return map(radian_degree, degree_list)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\ndef get_coor(x, y):\n    '''\n    Write a function to convert feet to meters, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [[feet*0.3048, inches*0.0254], [feet*0.3048*0.01, inches*0.0254*0.01]]\ndef get_coor2(x):\n    '''\n    Write a function to convert feet to meters, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [[feet*0.3048, inches*0.0254], [feet*0.3048*0.01, inches*0.0254*0.01]]\ndef get_coor3(x):\n    '''\n    Write a function to convert feet to meters, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet, inches]\ndef convert_coor(x):\n    '''\n    Write a function to convert feet to meters, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [[feet*0.3048, inches*0.0254], [feet*0.3048*0.01, inches*0.0254*0.01]]\ndef convert_coor2(x):\n    '''\n    Write a function to convert feet to meters, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet*0.3048, inches*0.0254]\ndef convert_coor3(x):\n    '''\n    Write a function to convert feet to meters, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet, inches]\ndef get_feet_in_meter(x):\n    '''\n    Write a function to convert meters to feet, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [[feet*0.3048, inches*0.0254], [feet*0.3048*0.01, inches*0.0254*0.01]]\ndef get_feet_in_meter2(x):\n    '''\n    Write a function to convert meters to feet, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet*0.3048, inches*0.0254]\ndef get_feet_in_meter3(x):\n    '''\n    Write a function to convert meters to feet, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet, inches]\ndef convert_meter_to_feet(x):\n    '''\n    Write a function to convert meters to feet, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [[feet*0.3048, inches*0.0254], [feet*0.3048*0.01, inches*0.0254*0.01]]\ndef convert_meter_to_feet2(x):\n    '''\n    Write a function to convert meters to feet, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet*0.3048, inches*0.0254]\ndef convert_meter_to_feet3(x):\n    '''\n    Write a function to convert meters to feet, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet, inches]\ndef convert_feet_to_meter(x):\n    '''\n    Write a function to convert feet to meters, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [[feet*0.3048, inches*0.0254], [feet*0.3048*0.01, inches*0.0254*0.01]]\ndef convert_feet_to_meter2(x):\n    '''\n    Write a function to convert feet to meters, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet*0.3048, inches*0.0254]\ndef convert_feet_to_meter3(x):\n    '''\n    Write a function to convert feet to meters, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet, inches]\ndef get_meters_in_feet(x):\n    '''\n    Write a function to convert meters to feet, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [[feet*0.3048, inches*0.0254], [feet*0.3048*0.01, inches*0.0254*0.01]]\ndef get_meters_in_feet2(x):\n    '''\n    Write a function to convert meters to feet, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet*0.3048, inches*0.0254]\ndef get_meters_in_feet3(x):\n    '''\n    Write a function to convert meters to feet, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet, inches]\ndef convert_feet_to_meter(x):\n    '''\n    Write a function to convert feet to meters, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [[feet*0.3048, inches*0.0254], [feet*0.3048*0.01, inches*0.0254*0.01]]\ndef convert_feet_to_meter2(x):\n    '''\n    Write a function to convert feet to meters, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet*0.3048, inches*0.0254]\ndef convert_feet_to_meter3(x):\n    '''\n    Write a function to convert feet to meters, given the input of a coordinate,\n    where the coordinate is a list of [feet, inches].\n    '''\n    feet = x[0]\n    inches = x[1]\n    return [feet, inches]\ndef get_degrees(x):\n    '''\n    Write a function to convert degrees to radians, given the input of a coordinate,\n    where the coordinate is a list of [degrees, minutes].\n    '''\n    degrees = x[0]\n    minutes = x[1]\n    return [degrees+minutes/60.0, minute"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef radian_degree2(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree * (math.pi / 180))\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\ndef fisrt_solution(l,w):\n    '''\n    You are painting a wall. The instructions on the paint can says\n    \"paint a certain quantity of paint in each of the n rooms\".\n    Given the total area and the furniture you have,\n    find the number of different possible ways you can paint the wall.\n    '''\n    paint_given_area = (l*w) / 4.0\n    paint_per_room = paint_given_area / len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len(range(1,len"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Add the named group\n    #groups = pattern.groups\n    \n    # Find the first match\n    match = pattern.search(text)\n    \n    if match:\n        #print match.group()\n        #return match.group()\n        #return groups\n        return match\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = 0\n    substr = ''\n    while True:\n        m = pattern.search(text, start)\n        if m is None:\n            break\n        if m.start() > start:\n            substr += text[start:m.start()]\n        start = m.end()\n        substr += m.group()\n        end = m.end()\n    if start < len(text):\n        substr += text[start:]\n    return substr, start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(text)\n    while True:\n        m = pattern.search(text, start, end)\n        if m:\n            yield m\n            start = m.start() + 1\n            end = m.end()\n        else:\n            break\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    pattern_match = pattern.search(text)\n    if pattern_match:\n        return pattern_match.group(), pattern_match.start(), pattern_match.end()\n    return None, 0, 0\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_re = re.compile(pattern)\n    match = pattern_re.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_start_pos = text.find(pattern)\n    pattern_end_pos = pattern_start_pos + len(pattern)\n    return text[pattern_start_pos:pattern_end_pos], pattern_start_pos, pattern_end_pos\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    return match\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = 0\n    while True:\n        start = pattern.search(text, start)\n        if start == -1:\n            break\n        end = start + len(pattern)\n        print('string found at index:'+ str(start) + ','+ str(end))\n        print('string:'+ str(text[start:end]))\n        start = end\n    return (start, end)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    s = re.search(pattern,text)\n    return s.start(), s.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if not text:\n        return None\n    matcher = re.search(pattern, text)\n    if not matcher:\n        return None\n    else:\n        return matcher.group(), matcher.start(), matcher.end()\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 1\n    j = 1\n    while i <= n:\n        j = j * (i + 1) / i\n        i += 1\n    return j\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    #your code here\n    k=0\n    for i in range(n):\n        k=k+1\n        if(n%(i+1)==0):\n            print k\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int(factorial(n)/(factorial(n-1)*factorial(n+1)))\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return (bell_Number(n-1)*(n+1))/2\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return ((1/2)**n) * (factorial(n)**2)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell * i\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # n = int(input('Enter the value of n: '))\n    # if n < 0:\n    #     print('n must be non-negative.')\n    # elif n == 0:\n    #     return 1\n    # else:\n    #     return bell_Number(n-1) + n \n    # return 0\n    return factorial(n) // (factorial(n - 1) * factorial(1))\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    return bell_Number(n-1) + n\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # start with the set of bell numbers for 1,2,3,4,....\n    bell = [1, 1, 2, 5, 15, 52, 203, 927, 2391, 4140, 7720, 13426,\n    25552, 45892, 65913, 89144, 13304, 17576, 25769, 30552, 37791,\n    46137, 54870, 66415, 78480, 93252, 128497, 147419, 172310,\n    204576, 241077, 287957, 359131, 425305, 504583, 566683,\n    686958, 793011, 922360, 1156293, 1382643, 1585905, 1774610,\n    2096385, 2406043, 2822364, 3237843, 3777034, 4515012, 5386499,\n    6445313, 7878134, 9324629, 11553602, 14756293, 17973874,\n    22089160, 25789297, 30394574, 37883714, 46145416, 54726357,\n    66698810, 78467154, 93253605, 11562411, 138267736, 158593872,\n    17746118, 20457944, 24107849, 28795562, 35913048, 4253049,\n    50458424, 5666845, 68695850, 79301042, 92236060, 11562397,\n    138267666, 158590843, 17746147, 209638936, 240604745, 28223648,\n    323784399, 37770345, 45150140, 53864997, 644531269, 787813436,\n    932463364, 115536080, 147562935, 1797386810, 220891534, 257892626,\n    30394578, 37883707, 46145415, 54726357, 666988102, 78467145,\n    93253607, 115624104, 138267666, 158590836, 17746118, 204579441,\n    241078471, 287955659, 35913044, 42530473, 50458424, 566684521,\n    68695849, 79301042, 92236061, 11562397, 138267666, 158590845,\n    17746147, 209638946, 240604741, 28223648, 323784399, 377703459,\n    45150140, 54726357, 66698810, 78467154, 93253605, 115624106,\n    138267736, 158593872, 17746118, 204579446, 24107847, 287955665,\n    35913048, 42530473, 50458424, 566684521, 68695849, 79301042,\n    92236061, 11562397, 138267666, 158590845, 17746147, 209638946,\n    240604741, 28223648, 323784399, 377703459, 45150140, 54726357,\n    66698810, 78467146, 93253607, 115624104, 138267666, 158590843,\n    17746118, 204579441, 241078471, 287955659, 35913044, 42530473,\n    50458424, 566684521, 68695849, 79301042, 92236060, 11562397,\n    138267666, 158590842, 17746147, 209638946, 240604741, 28223648,\n    323784399, 377703462, 45150140, 54726357, 666988102, 78467145,\n    93253607, 115624106, 138267666, 158590843, 17746118, 204579442,\n    241078472, 287955665, 35913048, 42530473, 50458424, 566684521,\n    68695849, 79301042, 92236060, 11562397, 138267666, 158590842,\n    17746118, 204579442, 241078472, 287955665, 35913048, 42530473,\n    50458424, 566684521, 68695849, 79301042, 92236060, 11562397,\n    138267666, 158590842, 17746118, 204579442, 241078472, 287955665,\n    35913048, 42530473, 50458424, 566684521, 68695849, 79301042,\n    92236060, 11562397, 138267666, 158590842, 17746118, 204579442,\n    241078472, 287955665, 35913048, 42530473, 50458424, 566684521,\n    68695849, 79301042, 92236060, 11562397, 138267666, 158590841,\n    17746118, 204579442, 241078472, 287955665, 35913048, 42530473,\n    50458424, 566684521, 68695849, 79301042, 92236060, 11562397,\n    138267666, 158590841, 17746118, 204579442, 241078472, 287955665,\n    35913048, 42530473, 50458424, 566684521, 68695849, 79301042,\n    92236060, 11562397, 138267666, 158590841, 17746118, 204579442,\n    241078472, 287955665, 35913048, 42530473, 50458424, 566684521,\n    68695849, 79301042, 92236060, 11562397, 138267666, 158590841,\n    17746118, 204579442, 241078472, 287955665, 35913048, 42530473,\n    50458424, 566684521, 68695849, 79301042, 92236060, 11562397,\n    138267666, 158590841, 17746118, 204579442, 241078472, 287955665,\n    35913048, 42530473, 50458424, 566684521, 68695849, 79301042,\n    92236060, 11562397, 138267666, 158590841, 17746118, 204579442,\n    241078472, 287955665, 35913048, 42530473, 50458424, 566684521,\n    68695849, 79301042, 92236060, 11562397, 138267666, 158590841,\n    17746118, 204579442, 241078472, 287955665, 35913048, 42530473,\n    50458424, 566684521, 68695849, 79301042, 92236060, 11562397,\n    138267666, 158590841, 17746118, 204579442, 241078472, 287955665,\n    35913048, 42530473, 50458424, 566684521, 68695849, 79301042,\n    92236060, 11562397, 138267666, 158590841, 17746118, 204579442,\n    241078472, 287955665, 35913048, 42530473, 50458424, 566684521,\n    68695849, 79301042, 92236060, 11562397, 138267666, 158590841,\n    17746118, 204579442, 241078472, 287955665, 35913048, 42530473,\n    50458424, 566684521, 68695849, 79301042, 92236060, 11562397,\n    138267666, 158590841, 17746118, 204579442, 241078472, 287955665,\n    35913048, 42530473, 50458424, 566684521, 68695849, 79301042,\n    92236060, 11562397, 138267666, 158590841, 17746118, 204579442,\n    241"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [element for index, element in enumerate(list1) if index!= L]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[0:L] + list1[L+1:len(list1)]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    remove_kth_element_function(list1, L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L>len(list1):\n        return list1\n    elif L<0:\n        return list1\n    else:\n        return list1[:L]+list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == len(list1):\n        return list1[1:]\n    else:\n        return list1[:L]+list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    l = []\n    for i in list1:\n        l.append(i)\n    l.pop(L)\n    return l\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    l = list1[:]\n    l.pop(L)\n    return l\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[0:L] + list1[L+1:]\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([float(row[N]) for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if test_list == None:\n        return None\n    if len(test_list) == 0:\n        return None\n    return max([row[N-1] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    return max([max(row[N]) for row in test_list])\n    \ndef matrix_mult(A, B):\n    '''\n    Write a function which given two matrices of equal dimension returns the product of the two.\n    '''\n    \n    return [[sum(a*b for a,b in zip(A_row,B_col)) for B_col in zip(*B)] for A_row in A]\n    \ndef matrix_transpose(A):\n    '''\n    Write a function which given a matrix A returns the transpose of A.\n    '''\n    \n    return [list(row) for row in zip(*A)]\n    \ndef matrix_mult_by_scalar(A, scalar):\n    '''\n    Write a function which given a matrix A and a scalar returns the scalar times the matrix.\n    '''\n    \n    return [[scalar*element for element in row] for row in A]\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    count = 0\n    max_val = 0\n    for row in test_list:\n        if count < N:\n            max_val = max(row[N-1], max_val)\n            count += 1\n        else:\n            max_val = max(row[N-1], max_val)\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n_list = [ [row[i] for row in test_list] for i in range(N)]\n    return max(n_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(lambda x: x[N-1], test_list))\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    column = []\n    for row in test_list:\n        column.append(row[N-1])\n    return max(column)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([x[N-1] for x in test_list])\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[i] for i in range(0, len(lst), 2)]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Your code here\n    def mergeList(lst):\n        return [lst[0][0],lst[0][1]]+mergeList(lst[1:]) if len(lst)>1 else [lst[0][0],lst[0][1]]\n    return mergeList(lst)\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = [lst[i:i+2] for i in range(0, len(lst), 2)]\n    print(lst)\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Initializing the final list\n    final_list = []\n    for lst1 in lst:\n        new_list = []\n        new_list.append(lst1[0])\n        new_list.append(lst1[1])\n        final_list.append(new_list)\n    return final_list\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    lst = lst[:]\n    for i in range(len(lst)):\n        lst1.append(lst[i][0])\n        lst2.append(lst[i][1])\n    return [lst1,lst2]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    mergeList = []\n    mergeList = lst[::2] + lst[1::2]\n    return mergeList\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    lst2 = [[],[]]\n    for x in lst:\n        lst2[0].append(x[0])\n        lst2[1].append(x[1])\n    return lst2\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # for i in range(len(test_list)):\n    #     for j in range(len(test_list[i])):\n    #         test_list[i][j] = test_list[i][j] + (test_list[i-1][j] if i > 0 else 0)\n    #     print test_list[i]\n    # return test_list\n    cum_sum = []\n    if len(test_list) == 0:\n        return cum_sum\n    cum_sum.append(test_list[0])\n    for i in range(1, len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] > test_list[i-1][j]:\n                test_list[i][j] += test_list[i-1][j]\n            cum_sum.append(test_list[i][j])\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:x+1]) for x in range(len(test_list))]\n    \n    \ndef test_cummulative_sum():\n    print(cummulative_sum([1,2,3]))\n    print(cummulative_sum((1,2,3,4)))\n    print(cummulative_sum((1,2,3,4,5)))\n    print(cummulative_sum([]))\n    \n    \ntest_cummulative_sum()"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + cummulative_sum(test_list[1:])\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    new_list.append(test_list[0])\n    for i in range(1, len(test_list)):\n        new_list.append(test_list[i] + new_list[i - 1])\n    return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum_list = [0]\n    for i in range(1, len(test_list)):\n        cum_sum_list.append(test_list[i] + cum_sum_list[i-1])\n    return cum_sum_list\n    \ndef find_max_occurence(test_list):\n    '''\n    Write a function to find the maximum occurring number in the given list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    max_count = max(count_dict.values())\n    return max_count\n    \ndef find_min_max(test_list):\n    '''\n    Write a function to find the minimum and maximum number in the given list.\n    '''\n    return min(test_list), max(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return list(map(lambda x, y: x + y, test_list, itertools.accumulate(test_list)))\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_of_all_values = 0\n    for i in test_list:\n        sum_of_all_values += i\n    return sum_of_all_values\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_list = []\n    cumulative_sum_list.append(test_list[0])\n    for i in xrange(1, len(test_list)):\n        cumulative_sum_list.append(cumulative_sum_list[-1] + test_list[i])\n    return cumulative_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return []\n    else:\n        return [(test_list[0] + cummulative_sum(test_list[1:]))] + cummulative_sum(test_list[1:])\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(x)/len(x)) for x in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        average_list.append(total/len(nums[i]))\n    return average_list\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i) / len(i) for i in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        average = sum(nums[i])/len(nums[i])\n        averages.append(average)\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    ans = []\n    for item in nums:\n        ans.append(sum(item) / len(item))\n    return ans\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(num) / len(num)) for num in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for item in nums:\n        averages.append(sum(item) / len(item))\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for nums_tuple in nums:\n        average = sum(nums_tuple) / len(nums_tuple)\n        averages.append(average)\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in zip(*nums)]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([i%j for i, j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] % test_tup2[i])\n        return tuple(result)\n    else:\n        return \"Tuples must be same size\"\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Input tuples are not the same length')\n    \n    return tuple([i % j for i, j in zip(test_tup1, test_tup2)])\n    \n    "
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a%b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return [(tup1[i] % tup2[i]) for i in range(len(tup1))]\n    \n    \ndef triple_twice(tup):\n    '''\n    Write a function which takes a tuple and returns a new tuple whose values are the original tuple's values\n    multiplied by 2.\n    '''\n    return tup[0] * 2, tup[1] * 2, tup[2] * 2\n    \ndef swap(tup):\n    '''\n    Write a function which takes a tuple and returns a new tuple with the first and last values swapped.\n    '''\n    return tup[-1], tup[0]\n    \ndef count_items(test_list, item):\n    '''\n    Write a function which takes a list and a value and returns the number of items in the list that are equal to the value.\n    '''\n    return test_list.count(item)\n    \n    \ndef unique_elements(test_list):\n    '''\n    Write a function which takes a list of values and returns a new list with only the unique values.\n    '''\n    return list(set(test_list))\n    \n    \ndef loop_test():\n    '''\n    Write a function which takes a list of values and returns a new list with only the values that are even.\n    '''\n    for i in range(10):\n        if i % 2 == 0:\n            print(i)\n    \n    \ndef find_all_of_type(test_list, element_type):\n    '''\n    Write a function which takes a list of values and returns a new list with only the values that are even.\n    '''\n    new_list = []\n    for i in test_list:\n        if type(i) == element_type:\n            new_list.append(i)\n    return new_list\n    \n    \ndef return_all_odd_values(test_list):\n    '''\n    Write a function which takes a list of values and returns a new list with only the values that are odd.\n    '''\n    new_list = []\n    for i in test_list:\n        if i % 2 == 1:\n            new_list.append(i)\n    return new_list\n    \n    \ndef make_a_list(n):\n    '''\n    Write a function which takes a number and returns a list of n randomly chosen integers between -1000 and 1000.\n    '''\n    import random\n    return [random.randint(-1000,1000) for i in range(n)]\n    \n    \ndef show_all_elements_of_type(test_list, element_type):\n    '''\n    Write a function which takes a list and a value and returns a list with all elements of the original list that are of the\n    value type.\n    '''\n    new_list = []\n    for i in test_list:\n        if type(i) == element_type:\n            new_list.append(i)\n    return new_list\n    \n    \ndef find_length_of_list(test_list):\n    '''\n    Write a function which takes a list and returns the length of the list.\n    '''\n    return len(test_list)\n    \n    \ndef remove_all_duplicates(test_list):\n    '''\n    Write a function which takes a list and returns a new list with all of the duplicates removed.\n    '''\n    return list(set(test_list))\n    \n    \ndef remove_item(test_list, item):\n    '''\n    Write a function which takes a list and a value and returns a new list with the value removed.\n    '''\n    return test_list.remove(item)\n    \n    \ndef reverse_list(test_list):\n    '''\n    Write a function which takes a list and returns a new list with the values in the reverse order.\n    '''\n    return test_list[::-1]\n    \n    \ndef sum_of_list(test_list):\n    '''\n    Write a function which takes a list of numbers and returns the sum of the values.\n    '''\n    return sum(test_list)\n    \n    \ndef find_sum_of_list(test_list):\n    '''\n    Write a function which takes a list of numbers and returns the sum of the values.\n    '''\n    return sum(test_list)\n    \n    \ndef find_average(test_list):\n    '''\n    Write a function which takes a list of numbers and returns the average.\n    '''\n    return sum(test_list)/len(test_list)\n    \n    \ndef find_min_value(test_list):\n    '''\n    Write a function which takes a list of numbers and returns the minimum value.\n    '''\n    return min(test_list)\n    \n    \ndef find_max_value(test_list):\n    '''\n    Write a function which takes a list of numbers and returns the maximum value.\n    '''\n    return max(test_list)\n    \n    \ndef get_middle_value(test_list):\n    '''\n    Write a function which takes a list of numbers and returns the value in the middle.\n    '''\n    return test_list[int(len(test_list)/2)]\n    \n    \ndef remove_duplicates(test_list):\n    '''\n    Write a function which takes a list of values and returns a new list with all of the duplicates removed.\n    '''\n    return list(set(test_list))\n    \n    \ndef is_list_odd(test_list):\n    '''\n    Write a function which takes a list of values and returns True if the list contains an odd number of values and False if\n    it does not.\n    '''\n    return len(test_list) % 2!= 0\n    \n    \ndef remove_all_odd_values(test_list):\n    '''\n    Write a function which takes a list of values and returns a new list with all of the odd values removed.\n    '''\n    return [i for i in test_list if i % 2 == 0]\n    \n    \ndef check_pandigital(test_list):\n    '''\n    Write a function which takes a list and returns True if all the values in the list are unique and False if they are not.\n    '''\n    for i in range(1, len(test_list)):\n        if len(test_list) % i == 0:\n            if sorted(test_list[:i]) == list(range(1,i+1)):\n                return True\n    return False\n    \n    \ndef check_pandigital_str(test_str):\n    '''\n    Write a function which takes a string and returns True if all the values in the string are unique and False if they are not.\n    '''\n    for i in range(1, len(test_str)):\n        if len(test_str) % i == 0:\n            if sorted(test_str[:i]) == list(range(1,i+1)):\n                return True\n    return False\n    \n    \ndef replace_spaces(test_str):\n    '''\n    Write a function which takes a string and returns a new string with spaces replaced by underscores.\n    '''\n    return test_str.replace(' ','_')\n    \n    \ndef multi_string(test_str1, test_str2):\n    '''\n    Write a function which takes two strings and returns a new string with the characters from the first string followed by\n    the characters from the second string.\n    '''\n    return test_str1 + test_str2\n    \n    \ndef number_words(test_num):\n    '''\n    Write a function which takes a number and returns the number of words it contains in the form of a string.\n    '''\n    return len(str(test_num).split(' '))\n    \n    \ndef number_letters(test_num):\n    '''\n    Write a function which takes a number and returns the number of letters in the number.\n    '''\n    return len(str(test_num))\n    \n    \ndef reverse_numbers(test_num):\n    '''\n    Write a function which takes a number and returns a new number with the digits in the number in reverse order.\n    '''\n    return int(''.join(str(test_num)[::-1]))\n    \n    \ndef sort_letters_in_strin"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"lengths are not equal\"\n    else:\n        return tuple([i % j for i, j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # pass\n    return (test_tup1[0]%test_tup2[0], test_tup1[1]%test_tup2[1])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Example:\n    # tuple_modulo((1, 2), (3, 4)) => (0, 1)\n    # tuple_modulo((-1, 2), (-3, -4)) => (3, -1)\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d==0:\n        return steps\n    if steps == 0:\n        return -1\n    jumps = min_Jumps(steps-1, d-1)\n    if jumps == -1:\n        return -1\n    jumps += 1\n    if d%2==0:\n        return jumps\n    else:\n        return min(jumps, 1+min_Jumps(steps-d, d//2))\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    if d == 1:\n        return float('inf')\n    if steps == 0 or steps == 1:\n        return float('inf')\n    max_dist = min(steps, d)\n    if max_dist % 2 == 0:\n        return float('inf')\n    return min_Jumps(steps - max_dist, d - 1) + min_Jumps(max_dist, d - 1)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    arr = [False]*(steps+1)\n    arr[0] = True\n    if d == 0:\n        return 0\n    if arr[d]:\n        return 1\n    min = float('inf')\n    for i in range(1, d+1):\n        if arr[i]:\n            continue\n        arr[i] = True\n        for j in range(i+1, min(i+steps, d+1)):\n            arr[j] = True\n            min = min(min, 1 + min_Jumps(steps-j, d-j))\n        arr[i] = False\n    return min\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # If there are no steps, there are no jumps\n    if (steps == 0):\n        return 0\n    \n    # This array stores the minimum number of jumps required to reach a point with coordinates (d, 0)\n    # We initialize this array with -1 since we can't reach a point from origin with length 0\n    min_jumps = [-1 for i in range(steps)]\n    \n    # Recursive function to calculate the minimum number of jumps required to reach the point (d, 0)\n    min_jumps[0] = 0\n    return min_jumps_helper(steps, d, 0, min_jumps)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    a = 2 * d - 1\n    b = d * (d + 1)\n    return max(0, ((steps + b - 1) // a - 1) )\n    \ndef min_Jumps_Recursive(steps, d, visited, N): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps, d) in visited: \n        return visited[(steps, d)]\n    if d == 0: \n        return 0\n    \n    a = 2 * d - 1\n    b = d * (d + 1)\n    \n    visited[(steps, d)] = 1 + min(min_Jumps_Recursive(steps - a, d - 1, visited, N), min_Jumps_Recursive(steps - b, d - 1, visited, N))\n    return visited[(steps, d)]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # We can use a dictionary to store the intermediate steps as well as to keep track of the number of jumps required to reach a point\n    # We will use this dictionary to store the steps as keys and the number of jumps required to reach a point as values\n    num_jumps = {}\n    # We will start at the first point and compute the number of jumps required to reach it from the origin\n    num_jumps[0] = 0\n    for step in steps:\n        # We update the number of jumps required to reach each step in our dictionary\n        if step in num_jumps:\n            num_jumps[step] += 1\n        else:\n            num_jumps[step] = 1\n        # We also check the steps on the coordinates to the left and to the right to see if they are reachable\n        for coord in [(step - 1, step + 1), (step, step - 1), (step, step + 1)]:\n            # If the coordinates are reachable and we haven't seen them before, we update the number of jumps required to reach them\n            if coord in num_jumps:\n                num_jumps[coord] += 1\n            # We also check the steps on the coordinates to the top and to the bottom to see if they are reachable\n            elif (coord[1], coord[0]) in num_jumps:\n                num_jumps[coord] = num_jumps[(coord[1], coord[0])] + 1\n            else:\n                num_jumps[coord] = 1\n    return num_jumps[(d, 0)]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d<=0 or d>=steps:\n        return 0\n    elif d==steps-1:\n        return 1\n    elif d==steps:\n        return 2\n    else:\n        return min_Jumps(steps, d+1)+min_Jumps(steps, d+2)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return steps\n    if d == 1: return max(steps, 1)\n    if d == 2: return max(steps, 2)\n    if d == 3: return max(steps, 3)\n    if d == 4: return max(steps, 4)\n    if d == 5: return max(steps, 5)\n    if d == 6: return max(steps, 6)\n    \n    if (d > 6 and d % 2 == 1) or (d % 2 == 0 and steps < 6):\n        return -1\n    \n    for i in xrange(7, d + 1, 2):\n        if (d - i) >= 6:\n            if min_Jumps(steps + 1, d - i)!= -1:\n                return min_Jumps(steps + 1, d - i)\n        if (d - i) >= 4 and (d - i) < 6:\n            if min_Jumps(steps + 2, d - i)!= -1:\n                return min_Jumps(steps + 2, d - i)\n        if (d - i) >= 2 and (d - i) < 4:\n            if min_Jumps(steps + 3, d - i)!= -1:\n                return min_Jumps(steps + 3, d - i)\n        if (d - i) >= 1 and (d - i) < 2:\n            if min_Jumps(steps + 4, d - i)!= -1:\n                return min_Jumps(steps + 4, d - i)\n        if (d - i) >= 0 and (d - i) < 1:\n            if min_Jumps(steps + 5, d - i)!= -1:\n                return min_Jumps(steps + 5, d - i)\n    return -1\n    \ndef min_Jumps_dp(steps, d):\n    if steps == 0: return 0\n    if steps < 0: return -1\n    if d == 0: return steps\n    if d == 1: return max(steps, 1)\n    if d == 2: return max(steps, 2)\n    if d == 3: return max(steps, 3)\n    if d == 4: return max(steps, 4)\n    if d == 5: return max(steps, 5)\n    if d == 6: return max(steps, 6)\n    \n    if (d > 6 and d % 2 == 1) or (d % 2 == 0 and steps < 6):\n        return -1\n    \n    min_Jumps_table = [-1] * (steps + 1)\n    min_Jumps_table[0] = 0\n    min_Jumps_table[1] = 1\n    min_Jumps_table[2] = 2\n    min_Jumps_table[3] = 3\n    min_Jumps_table[4] = 4\n    min_Jumps_table[5] = 5\n    min_Jumps_table[6] = 6\n    \n    for i in xrange(7, d + 1, 2):\n        min_Jumps_table[i] = min_Jumps_table[i - 2] + 1\n        for j in xrange(i - 4, -1, -2):\n            if min_Jumps_table[j]!= -1:\n                if min_Jumps_table[i] == -1:\n                    min_Jumps_table[i] = min_Jumps_table[j] + 1\n                else:\n                    min_Jumps_table[i] = min(min_Jumps_table[i], min_Jumps_table[j] + 1)\n    return min_Jumps_table[d]\n    \nimport random\ndef min_Jumps_dp_optimized(steps, d):\n    if steps == 0: return 0\n    if steps < 0: return -1\n    if d == 0: return steps\n    if d == 1: return max(steps, 1)\n    if d == 2: return max(steps, 2)\n    if d == 3: return max(steps, 3)\n    if d == 4: return max(steps, 4)\n    if d == 5: return max(steps, 5)\n    if d == 6: return max(steps, 6)\n    \n    if (d > 6 and d % 2 == 1) or (d % 2 == 0 and steps < 6):\n        return -1\n    \n    min_Jumps_table = [0] * (steps + 1)\n    min_Jumps_table[0] = 0\n    min_Jumps_table[1] = 1\n    min_Jumps_table[2] = 2\n    min_Jumps_table[3] = 3\n    min_Jumps_table[4] = 4\n    min_Jumps_table[5] = 5\n    min_Jumps_table[6] = 6\n    \n    for i in xrange(7, d + 1, 2):\n        min_Jumps_table[i] = min_Jumps_table[i - 2] + 1\n        for j in xrange(i - 4, -1, -2):\n            if j - 2 >= 0 and j - 2 < i:\n                if min_Jumps_table[j]!= -1:\n                    if min_Jumps_table[i] == -1:\n                        min_Jumps_table[i] = min_Jumps_table[j] + 1\n                    else:\n                        min_Jumps_table[i] = min(min_Jumps_table[i], min_Jumps_table[j] + 1)\n    return min_Jumps_table[d]\n    \nimport unittest\nclass Test(unittest.TestCase):\n    def test_min_Jumps(self):\n        self.assertEqual(min_Jumps(0, 3), -1)\n        self.assertEqual(min_Jumps(1, 3), -1)\n        self.assertEqual(min_Jumps(2, 3), -1)\n        self.assertEqual(min_Jumps(3, 3), 1)\n        self.assertEqual(min_Jumps(4, 3), 1)\n        self.assertEqual(min_Jumps(5, 3), 1)\n        self.assertEqual(min_Jumps(6, 3), 1)\n        self.assertEqual(min_Jumps(7, 3), 2)\n        self.assertEqual(min_Jumps(8, 3), 2)\n        self.assertEqual(min_Jumps(9, 3), 2)\n        self.assertEqual(min_Jumps(10, 3), 3)\n        self.assertEqual(min_Jumps(11, 3), 3)\n        self.assertEqual(min_Jumps(12, 3), 3)\n        self.assertEqual(min_Jumps(13, 3), 4)\n        self.assertEqual(min_Jumps(14, 3), 4)\n        self.assertEqual(min_Jumps(15, 3), 4)\n        self.assertEqual(min_Jumps(16, 3), 4)\n        self.assertEqual(min_Jumps(17, 3), 5)\n        self.assertEqual(min_Jumps(18, 3), 5)\n        self.assertEqual(min_Jumps(19, 3), 5)\n        self.assertEqual(min_Jumps(20, 3), 5)\n        self.assertEqual(min_Jumps(21, 3), 6)\n        self.assertEqual(min_Jumps(22, 3), 6)\n        self.assertEqual(min_Jumps(23, 3), 6)\n        self.assertEqual(min_Jumps(24, 3), 6)\n        self.assertEqual(min_Jumps(25, 3), 6)\n        self.assertEqual(min_Jumps(26, 3), 7)\n        self.assertEqual(min_Jumps(27, 3), 7)\n        self.assertEqual(min_Jumps(28, 3), 7)\n        self.assertEqual(min_Jumps(29, 3), 7)\n        self.assertEqual(min_Jumps(30, 3), 7)\n        self.assertEqual(min_Jumps(31, 3), 8)\n        self.assertEqual(min_Jumps(32, 3), 8)\n        self.assertEqual(min_Jumps(33, 3), 8)\n    "
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps[0] = 0\n    steps[1] = 0\n    for i in range(2, len(steps)): \n        if i < d: \n            steps[i] = steps[i-1] + 1\n        else:\n            steps[i] = steps[i-1] + 1 + min(steps[i-d:i])\n    return steps[-1]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # If the array is only 1 element\n    if len(steps) == 1:\n        return 0\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    def div(a,b):\n        if b == 0:\n            return float('Inf')\n        return a/b\n    return [div(a,b) for a,b in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div = []\n    for i in range(len(nums1)):\n        div.append(nums1[i] / nums2[i])\n    return div\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l = len(nums1)\n    result = []\n    for i in range(0,l):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    ret = []\n    for num1,num2 in zip(nums1,nums2):\n        ret.append(num1/num2)\n    return ret\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    num = []\n    for i in range(len(nums1)):\n        num.append(nums1[i]/nums2[i])\n    return num\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if not len(nums1)==len(nums2):\n        return\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]/nums2[i]\n    return nums1\ndef div_list2(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if not len(nums1)==len(nums2):\n        return\n    return map(lambda x,y: x/y, nums1, nums2)\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2)\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i] / nums2[i])\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) > len(nums2):\n        nums1,nums2 = nums2,nums1\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    number_dict = {'1':'one','2':'two','3':'three','4':'four','5':'five','6':'six','7':'seven','8':'eight','9':'nine'}\n    number_dict_out = {'one':'1','two':'2','three':'3','four':'4','five':'5','six':'6','seven':'7','eight':'8','nine':'9'}\n    move_dict = {}\n    for key in number_dict_out:\n        if number_dict_out[key] in test_str:\n            move_dict[key] = number_dict_out[key]\n    for key in number_dict:\n        if number_dict[key] in test_str:\n            move_dict[key] = number_dict[key]\n    for key in move_dict:\n        test_str = test_str.replace(key,move_dict[key])\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    move_nums = []\n    for i in test_str:\n        if i.isdigit():\n            move_nums.append(i)\n    return ''.join(move_nums)+''.join(sorted(set(test_str).difference(set(move_nums))))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    res_str = ''\n    for each_char in test_str:\n        if each_char.isdigit():\n            res_str += each_char\n    return res_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return re.sub(r'[0-9]+', '', test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    t = list(test_str)\n    for i in t:\n        if i.isdigit():\n            t.remove(i)\n            t.append(i)\n    return \"\".join(t)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = [int(x) for x in test_str if x.isdigit()]\n    letters = [x for x in test_str if not x.isdigit()]\n    return ''.join(letters)+''.join(map(str, numbers))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n    if re.match(r'^[\\d]+$', test_str):\n        test_str = ''.join(reversed(test_str))\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    l = len(test_str)\n    num_str = ''\n    for i in range(l):\n        if test_str[i].isdigit():\n            num_str += test_str[i]\n    num_str += test_str[l-len(num_str):l]\n    return num_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    for c in test_str:\n        if c.isdigit():\n            test_str = test_str[:i]+test_str[i+1:]+test_str[i]\n            i+=1\n        i+=1\n    return test_str\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    b = [[0 for i in range(n)] for j in range(n)]\n    if n <= 1:\n        return 1\n    else:\n        for i in range(1, n):\n            for j in range(0, i):\n                if a[i] % a[j] == 0 and b[i][j] == 0:\n                    b[i][j] = 1\n                elif a[i] % a[j] == 0 and b[i][j] > 0:\n                    b[i][j] = b[i][j] + b[i][j-1] + 1\n    return max(max(row) for row in b)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    d = {}\n    for num in a:\n        d[num] = 0\n    \n    for num in a:\n        for i in range(num,0,-1):\n            if num%i == 0:\n                d[i] += 1\n    \n    res = 1\n    for key in d:\n        res *= d[key] + 1\n    \n    return res\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    a.sort()\n    n = len(a)\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2 if a[1] % a[0] == 0 else 1\n    else:\n        a.insert(0,0)\n        i = 1\n        j = n\n        max_div = 0\n        while i < j:\n            if a[i] % a[j] == 0:\n                max_div = max(max_div,i)\n                j -= 1\n            else:\n                i += 1\n        return max_div\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    #dp = [[0 for i in range(n)] for j in range(n)]\n    \n    best_so_far = 0\n    best_pair = []\n    for i in range(n):\n        #dp[i][i] = 1\n        #print dp[i]\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0:\n                #dp[i][j] = 1\n                #print dp\n                best_pair.append([i, j])\n                best_so_far = max(best_so_far, 1)\n                \n    if len(best_pair) == 0:\n        return -1\n    \n    return best_so_far\n        "
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    d = {}\n    for item in a:\n        d[item] = True\n    largest_sz = 1\n    for i in range(1, len(a) + 1):\n        for j in range(i + 1, len(a) + 1):\n            if (a[i - 1] % a[j - 1] == 0 and d[a[i - 1] / a[j - 1]]):\n                largest_sz = max(largest_sz, j - i + 1)\n    return largest_sz\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subset = [None] * len(a)\n    dp = [0] * len(a)\n    dp[0] = 1\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a: return 0\n    a.sort()\n    n = len(a)\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = 1\n        j = i + 1\n        while j < n and a[i] % a[j] == 0:\n            ans[i] += 1\n            j += 1\n    return max(ans)\n    \n    \ndef test_largest_subset():\n    assert largest_subset([1,2,3,4,5,6,7,8]) == 4\n    assert largest_subset([9,1,2,3,4,5,6,7,8,0]) == 4\n    assert largest_subset([1,2,3,4,5,6,7,8,9,0]) == 4\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,0]) == 3\n    assert largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,3"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    rem = []\n    for i in a:\n        if i%2 == 0:\n            rem.append(i)\n    if len(rem) == 0:\n        return 0\n    else:\n        return max(rem) + max(rem)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    memo = {}\n    \n    def helper(a):\n        if a in memo:\n            return memo[a]\n        \n        if a in a:\n            memo[a] = 1\n            return 1\n        \n        r = 0\n        \n        for i in xrange(len(a)):\n            if a[i] % a[0] == 0:\n                r = max(r, helper(a[:i]) + helper(a[i:]))\n        \n        memo[a] = r\n        return r\n    \n    return helper(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr1[0]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return 0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2.0\n    \n    l1 = n // 2\n    l2 = n - l1\n    \n    if arr1[l1] > arr2[0]:\n        return get_median(arr1[:l1], arr2, l2)\n    else:\n        return get_median(arr1, arr2[:l2], l1)\n    \narr1 = [1, 5, 7, 9, 11, 13]\narr2 = [2, 3, 8, 10]\nn = len(arr1)\nprint(get_median(arr1, arr2, n))"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # No duplicates\n    if n % 2 == 0:\n        median = (arr1[n / 2] + arr1[n / 2 - 1]) / 2.0\n    else:\n        median = arr1[n / 2]\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    mid = n // 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    if n%2==0:\n        return (arr1[int(n/2)] + arr2[int(n/2)])/2\n    else:\n        return arr1[int(n/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        return find_kth_element(arr1, arr2, n // 2)\n    else:\n        return (find_kth_element(arr1, arr2, n // 2 - 1) + find_kth_element(arr1, arr2, n // 2)) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # The median is the value in between the two middle values\n    # Let median be the value at the middle of the array\n    # First, we find the indices of the middle values\n    #     arr1: [1, 3, 4, 5, 6, 8]\n    #     arr2: [2, 4, 6, 7, 9, 10]\n    #     mid1 = 5\n    #     mid2 = 4\n    #     median = (6 + 9) / 2 = 8\n    # We will use arr1[mid1] and arr1[mid2] to find the median\n    # Now, compare the values at those indices:\n    #     If arr1[mid1] > arr2[mid2] then, median is arr1[mid1]\n    #     If arr1[mid1] < arr2[mid2] then, median is arr2[mid2]\n    #     If arr1[mid1] == arr2[mid2] then, median is the middle value\n    # Time complexity: O(log(n))\n    # Space complexity: O(1)\n    # Approach: Use two pointers to find the median\n    # Initialize pointers to beginning of arr1 and arr2\n    p1 = 0\n    p2 = n - 1\n    # Now, compare the values at p1 and p2\n    # If the values are equal, then median is the middle value\n    # If the values at p1 are equal, then it is the median of arr1\n    # If the values at p2 are equal, then it is the median of arr2\n    # If the values at p1 are less than arr2[p2], then the median is arr1[p1]\n    # If the values at p1 are greater than arr2[p2], then the median is arr2[p2]\n    # Note: arr1[mid1] > arr2[mid2] => arr1[mid1] > median\n    # Note: arr1[mid1] < arr2[mid2] => arr1[mid1] < median\n    # Note: arr1[mid1] == arr2[mid2] => median is the middle value\n    while p1 <= p2:\n        # Make sure that p1 is not equal to p2\n        # If p1 and p2 are the same, then median is the middle value\n        if p1 == p2:\n            break\n        # Find the index of the middle value of the array\n        # First, initialize the index to the beginning of the array\n        mid1 = p1 + (p2 - p1) // 2\n        mid2 = p1 + (p2 - p1) // 2\n        # If arr1[mid1] > arr2[mid2] then, median is arr1[mid1]\n        # If arr1[mid1] < arr2[mid2] then, median is arr2[mid2]\n        # If arr1[mid1] == arr2[mid2] then, median is the middle value\n        if arr1[mid1] > arr2[mid2]:\n            p1 = mid1 + 1\n        elif arr1[mid1] < arr2[mid2]:\n            p2 = mid2 - 1\n        else:\n            p1 = mid1 + 1\n            p2 = mid2 - 1\n    return (arr1[p1] + arr2[p2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2 == 0:\n        med = (arr1[n/2] + arr2[n/2]) / 2.0\n    else:\n        med = arr1[n/2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    a = arr1[n/2]\n    b = arr2[n/2]\n    if a > b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    p = len(nums) - n\n    return [nums[i] ** nums[i+p] for i in range(0,len(nums)-p,p)]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n    \ndef odd_even(nums):\n    '''\n    Write a function to check if a list contains a particular number.\n    '''\n    return nums[-1] in nums\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    return set(nums)\n    \ndef compute_average(nums):\n    '''\n    Write a function to compute the average of a list of numbers.\n    '''\n    return sum(nums)/len(nums)\n    \ndef is_palindrome(nums):\n    '''\n    Write a function that checks whether a list is a palindrome.\n    '''\n    return nums[::-1] == nums\n    \ndef remove_stop_words(sentence, stop_words):\n    '''\n    Write a function to remove all the stop words from a sentence.\n    '''\n    return''.join([word for word in sentence.split() if word not in stop_words])\n    \ndef compute_number_to_letters(number):\n    '''\n    Write a function to convert a number to letters.\n    '''\n    letters = []\n    number_string = str(number)\n    if number_string[0] == '0':\n        return ''\n    for char in number_string:\n        letters.append(str(int(char) + 96))\n    return ''.join(letters)\n    \ndef get_integer(string):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    return int(string)\n    \ndef get_letters(number):\n    '''\n    Write a function to convert a number to letters.\n    '''\n    return chr(number - 96)\n    \ndef palindrome_permutation(str):\n    '''\n    Write a function that checks whether a string is a permutation of a palindrome.\n    '''\n    str = str.lower()\n    str_dict = {}\n    for letter in str:\n        if letter in str_dict:\n            str_dict[letter] += 1\n        else:\n            str_dict[letter] = 1\n    count = 0\n    for key in str_dict.keys():\n        if str_dict[key] % 2!= 0:\n            count += 1\n    if count > 1:\n        return False\n    else:\n        return True\n    \ndef get_largest_palindrome(max_num):\n    '''\n    Write a function to find the largest palindrome which is less than a given number.\n    '''\n    for num in range(max_num,0,-1):\n        if palindrome_permutation(str(num)):\n            return num\n    \ndef is_prime(num):\n    '''\n    Write a function that returns True if a number is prime, False otherwise.\n    '''\n    if num == 2:\n        return True\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef fibonacci(num):\n    '''\n    Write a function that returns the nth number in the fibonacci series.\n    '''\n    if num == 0 or num == 1:\n        return num\n    a,b = 0,1\n    for i in range(num - 1):\n        a,b = b,a+b\n    return b\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    return list(set(nums))\n    \ndef reverse(nums):\n    '''\n    Write a function that reverses a list.\n    '''\n    nums.reverse()\n    return nums\n    \ndef find_duplicates(nums):\n    '''\n    Write a function that returns a list of the indices of all the numbers that appear more than once in the list.\n    '''\n    num_dict = {}\n    for i in range(len(nums)):\n        if nums[i] in num_dict:\n            num_dict[nums[i]] += 1\n        else:\n            num_dict[nums[i]] = 1\n    result = []\n    for key in num_dict:\n        if num_dict[key] > 1:\n            result.append(key)\n    return result\n    \ndef get_fib_seq(n):\n    '''\n    Write a function that returns a list of all fibonacci numbers less than n.\n    '''\n    fib_list = [0,1]\n    while True:\n        if fib_list[-1] > n:\n            break\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list\n    \ndef check_permutation(str1,str2):\n    '''\n    Write a function that returns True if two strings are permutations of each other, False otherwise.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    for char in str1:\n        if str1.count(char)!= str2.count(char):\n            return False\n    return True\n    \ndef get_duplicates(nums):\n    '''\n    Write a function that returns a list of all duplicates in the list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:]:\n            result.append(nums[i])\n    return result\n    \ndef is_valid(s):\n    '''\n    Write a function that returns True if a string is a valid variable name, False otherwise.\n    '''\n    if s == 'a' or s == 'e' or s == 'i' or s == 'o' or s == 'u':\n        return False\n    for char in s:\n        if char not in 'abcdefghijklmnopqrstuvwxyz_0123456789':\n            return False\n    return True\n    \ndef is_valid_tld(tld):\n    '''\n    Write a function that returns True if a string is a valid TLD, False otherwise.\n    '''\n    if tld in ['com','net','org','edu','gov','biz','info','mil','name','aero','asia','biz','cat','com','coop','edu','gov','info','int','jobs','mil','mobi','museum','name','net','org','pro','tel','travel']:\n        return True\n    else:\n        return False\n    \ndef get_longest_word(words):\n    '''\n    Write a function that returns the longest word in a list.\n    '''\n    return max(words,key=len)\n    \ndef get_longest_num(nums):\n    '''\n    Write a function that returns the longest number in a list.\n    '''\n    return max(nums,key=len)\n    \ndef is_vowel(char):\n    '''\n    Write a function that returns True if a character is a vowel, False otherwise.\n    '''\n    if char in ['a','e','i','o','u']:\n        return True\n    else:\n        return False\n    \ndef pig_latin(text):\n    '''\n    Write a function that returns the pig latin translation of a string.\n    '''\n    text = text.lower()\n    result = ''\n    if text[0] not in ['a','e','i','o','u']:\n        result = text[1:] + text[0] + 'ay'\n    else:\n        result = text + 'way'\n    return result\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a function that returns True if two strings are anagrams of each other, False otherwise.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    for char in str1:\n        if str1.count(char)!= str2.count(char):\n            return False\n    return True\n    "
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert(n>=0)\n    for i in nums:\n        yield i**n\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(0,len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for letter in string:\n        if letter.islower():\n            return False\n    return True\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \ndef swap(string1, string2):\n    '''\n    Write a python function to swap a pair of characters in a string.\n    '''\n    return string1[:2] + string2[2:] + string1[2:] + string2[:2]\n    \ndef compress(string):\n    '''\n    Write a python function to compress a given string.\n    '''\n    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return string + \"1\"\n    string2 = string\n    count = 1\n    while count < len(string2):\n        if string2[count-1] == string2[count]:\n            count += 1\n        else:\n            string2 = string2[:count] + str(count) + string2[count:]\n            count = 1\n    if count == len(string2):\n        string2 = string2[:count] + str(count)\n    return string2\n    \ndef reverse(string):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    if len(string) == 0:\n        return string\n    return string[-1] + reverse(string[:-1])\n    \ndef palindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    if string[0]!= string[-1]:\n        return False\n    return palindrome(string[1:-1])\n    \ndef rotate_left(string, shift):\n    '''\n    Write a python function to rotate a string to the left.\n    '''\n    shift = shift % len(string)\n    return string[shift:] + string[:shift]\n    \ndef rotate_right(string, shift):\n    '''\n    Write a python function to rotate a string to the right.\n    '''\n    shift = shift % len(string)\n    return string[-shift:] + string[:-shift]\n    \ndef move(string, count):\n    '''\n    Write a python function to move a given string by a given number of characters.\n    '''\n    return string[count:] + string[:count]\n    \ndef every_other(string):\n    '''\n    Write a python function to return a string of every other character.\n    '''\n    return string[::2]\n    \ndef is_vowel(string):\n    '''\n    Write a python function to check whether a given string is a vowel or not.\n    '''\n    return string[0] in \"aeiouAEIOU\"\n    \ndef make_readable(seconds):\n    '''\n    Write a python function to convert seconds to human readable format.\n    '''\n    if seconds <= 0:\n        return \"now\"\n    mins, secs = divmod(seconds, 60)\n    if mins == 0 and secs == 0:\n        return \"now\"\n    if mins == 0:\n        return \"%d second%s\" % (secs, \"s\" if secs!= 1 else \"\")\n    if mins > 0:\n        return \"%d minute%s and %d second%s\" % (mins, \"s\" if mins!= 1 else \"\", secs, \"s\" if secs!= 1 else \"\")\n    \ndef is_numeric(string):\n    '''\n    Write a python function to check whether a given string is numeric or not.\n    '''\n    return all(ord(c) < 128 for c in string)\n    \ndef is_alphanumeric(string):\n    '''\n    Write a python function to check whether a given string is alphanumeric or not.\n    '''\n    return all(ord(c) > 31 and ord(c) < 128 for c in string)\n    \ndef longest_word(string):\n    '''\n    Write a python function to return the length of the longest word in a given string.\n    '''\n    words = string.split()\n    return max([len(word) for word in words])\n    \ndef longest_unique_prefix(string):\n    '''\n    Write a python function to return the length of the longest prefix that does not appear in the suffix.\n    '''\n    if len(string) == 0:\n        return 0\n    for i in range(len(string)):\n        if all(string[:i+1].endswith(string[-j:]) for j in range(1, i+1)):\n            return i\n    return -1\n    \ndef shift_string_left(string, count):\n    '''\n    Write a python function to shift a string to the left.\n    '''\n    count = count % len(string)\n    return string[count:] + string[:count]\n    \ndef shift_string_right(string, count):\n    '''\n    Write a python function to shift a string to the right.\n    '''\n    count = count % len(string)\n    return string[-count:] + string[:-count]\n    \ndef cipher(string):\n    '''\n    Write a python function to encrypt a given string with the shift cipher.\n    '''\n    return shift_string_left(string, 3)\n    \ndef decipher(string):\n    '''\n    Write a python function to decrypt a given string with the shift cipher.\n    '''\n    return shift_string_right(string, 3)\n    \ndef is_pangram(string):\n    '''\n    Write a python function to check whether a given string is a pangram or not.\n    '''\n    if len(string) < 7:\n        return False\n    return len(set(string.lower())) == 26\n    \ndef is_anagram(string1, string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(string1) == sorted(string2)\n    \ndef uncommon_words(string1, string2):\n    '''\n    Write a python function to check whether two strings have uncommon words or not.\n    '''\n    words1 = string1.split()\n    words2 = string2.split()\n    return set(words1) ^ set(words2)\n    \ndef count_vowels(string):\n    '''\n    Write a python function to count the vowels in a string.\n    '''\n    vowels = 0\n    for c in string:\n        if is_vowel(c):\n            vowels += 1\n    return vowels\n    \ndef has_acronym(string):\n    '''\n    Write a python function to check whether a given string has an acronym or not.\n    '''\n    return any(c[0] in string[i:i+2].lower() for i in range(len(string)-1))\n    \ndef is_special_string(string):\n    '''\n    Write a python function to check whether a given string is a special string or not.\n    '''\n    return len(set(string)) == 1\n    \ndef remove_spaces(string):\n    '''\n    Write a python function to remove spaces from a given string.\n    '''\n    return string.replace(\" \", \"\")\n    \ndef has_space(string):\n    '''\n    Write a python function to check whether a given string has spaces or not.\n    '''\n    return \" \" in string\n    \ndef remove_spaces_from_end(string):\n    '''\n    Write a python function to remove spaces from the end of a given string.\n    '''\n    return string[:len(string)-string[::-1].index(\" \")]\n    \ndef count_spaces(string):\n    '''\n    Write a python function to count the number of spaces in a given string.\n    '''\n    return string.count(\" \")\n    \ndef trim(string):\n    '''\n    Write a python function to trim a given string.\n    '''\n    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return string\n    return string[:-1] + string[-1].lower()\n    \ndef make_sentence(string):\n    '''\n    Write a python function to create a sentence from a given string.\n    '''\n    if len(string) == 0:\n        return \"\"\n    return string[0].capitalize() + string[1:]\n    \ndef i"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) == 0:\n        return True\n    return string[0].isupper() and is_upper(string[1:])\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0] = newList[-1] \n    newList[-1] = newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)==0:\n        return []\n    else:\n        lastElement = newList.pop()\n        newList.insert(0,lastElement)\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 1:\n        return\n    elif len(newList) == 2:\n        newList[0], newList[1] = newList[1], newList[0]\n        return\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        newList = swap_List(newList[1:-1])\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)!= 0:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n    return newList\n    \n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return [newList[-1]] + newList[1:-1] + [newList[0]]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    newList[0] = newList[length-1]\n    newList[length-1] = newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #print newList\n    size = len(newList)\n    if size > 0:\n        temp = newList[0]\n        newList[0] = newList[size-1]\n        newList[size-1] = temp\n    #print newList\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi=3.14\n    a=(r**2)*pi/4\n    print a\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #r = float(input(\"Please enter the radius of the semicircle:\"))\n    import math\n    return (r*r*math.pi)/4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    #Area of Triangle\n    A = 3 * math.pi * pow(r,2) / 4\n    #Area of Semicircle\n    A2 = math.pi * pow(r,2) / 4\n    #Area of the Semicircle\n    return A2 - A\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    return (2*pi*r**2)/3\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.pi * r * r / 4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (2 * math.pi * r * math.sqrt(3 / 4)) / 2\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2)/2\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Your code goes here\n    return 0.25 * r * r\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r*r)*math.pi/4\n    \ndef circle_area(r) :\n    '''\n    Write a python function to find the area of a circle with a given radius.\n    '''\n    return r*r*math.pi\n    \ndef rectangle_area(b,h) :\n    '''\n    Write a python function to find the area of a rectangle with a given base and height.\n    '''\n    return b*h\n    \ndef triangle_area(b,h) :\n    '''\n    Write a python function to find the area of a triangle with a given base and height.\n    '''\n    return b*h/2\n    \ndef square_area(a) :\n    '''\n    Write a python function to find the area of a square with a given side.\n    '''\n    return a*a\n    \ndef rectangle_perimeter(b,h) :\n    '''\n    Write a python function to find the perimeter of a rectangle with a given base and height.\n    '''\n    return 2*(b+h)\n    \ndef triangle_perimeter(b,h) :\n    '''\n    Write a python function to find the perimeter of a triangle with a given base and height.\n    '''\n    return b+h+b\n    \ndef square_perimeter(a) :\n    '''\n    Write a python function to find the perimeter of a square with a given side.\n    '''\n    return 4*a\n    \ndef circle_circumference(r) :\n    '''\n    Write a python function to find the circumference of a circle with a given radius.\n    '''\n    return 2*r*math.pi\n    \ndef rectangle_circumference(b,h) :\n    '''\n    Write a python function to find the circumference of a rectangle with a given base and height.\n    '''\n    return 2*(b+h)\n    \ndef triangle_circumference(b,h) :\n    '''\n    Write a python function to find the circumference of a triangle with a given base and height.\n    '''\n    return b+h+b\n    \ndef circle_diameter(r) :\n    '''\n    Write a python function to find the diameter of a circle with a given radius.\n    '''\n    return 2*r\n    \ndef rectangle_diameter(b,h) :\n    '''\n    Write a python function to find the diameter of a rectangle with a given base and height.\n    '''\n    return 2*(b+h)\n    \ndef triangle_diameter(b,h) :\n    '''\n    Write a python function to find the diameter of a triangle with a given base and height.\n    '''\n    return 2*(b+h)\n    \ndef circle_radius(r) :\n    '''\n    Write a python function to find the radius of a circle with a given radius.\n    '''\n    return r\n    \ndef rectangle_width(b,h) :\n    '''\n    Write a python function to find the width of a rectangle with a given base and height.\n    '''\n    return b\n    \ndef triangle_width(b,h) :\n    '''\n    Write a python function to find the width of a triangle with a given base and height.\n    '''\n    return b\n    \ndef rectangle_height(b,h) :\n    '''\n    Write a python function to find the height of a rectangle with a given base and height.\n    '''\n    return h\n    \ndef triangle_height(b,h) :\n    '''\n    Write a python function to find the height of a triangle with a given base and height.\n    '''\n    return h\n    \ndef rectangle_diagonal(b,h) :\n    '''\n    Write a python function to find the diagonal of a rectangle with a given base and height.\n    '''\n    return math.sqrt(b*b+h*h)\n    \ndef triangle_diagonal(b,h) :\n    '''\n    Write a python function to find the diagonal of a triangle with a given base and height.\n    '''\n    return math.sqrt(b*b+h*h)\n    \ndef triangle_area(b,h) :\n    '''\n    Write a python function to find the area of a triangle with a given base and height.\n    '''\n    return 0.5*b*h\n    \ndef circle_area(r) :\n    '''\n    Write a python function to find the area of a circle with a given radius.\n    '''\n    return r*r*math.pi\n    \ndef circle_circumference(r) :\n    '''\n    Write a python function to find the circumference of a circle with a given radius.\n    '''\n    return 2*r*math.pi\n    \ndef rectangle_area(b,h) :\n    '''\n    Write a python function to find the area of a rectangle with a given base and height.\n    '''\n    return b*h\n    \ndef rectangle_perimeter(b,h) :\n    '''\n    Write a python function to find the perimeter of a rectangle with a given base and height.\n    '''\n    return 2*(b+h)\n    \ndef triangle_area(b,h) :\n    '''\n    Write a python function to find the area of a triangle with a given base and height.\n    '''\n    return 0.5*b*h\n    \ndef triangle_perimeter(b,h) :\n    '''\n    Write a python function to find the perimeter of a triangle with a given base and height.\n    '''\n    return b+h+b\n    \ndef square_area(a) :\n    '''\n    Write a python function to find the area of a square with a given side.\n    '''\n    return a*a\n    \ndef square_perimeter(a) :\n    '''\n    Write a python function to find the perimeter of a square with a given side.\n    '''\n    return 4*a\n    \ndef rectangle_diagonal(b,h) :\n    '''\n    Write a python function to find the diagonal of a rectangle with a given base and height.\n    '''\n    return math.sqrt(b*b+h*h)\n    \ndef triangle_diagonal(b,h) :\n    '''\n    Write a python function to find the diagonal of a triangle with a given base and height.\n    '''\n    return math.sqrt(b*b+h*h)\n    \ndef rectangle_width(b,h) :\n    '''\n    Write a python function to find the width of a rectangle with a given base and height.\n    '''\n    return b\n    \ndef triangle_width(b,h) :\n    '''\n    Write a python function to find the width of a triangle with a given base and height.\n    '''\n    return b\n    \ndef rectangle_height(b,h) :\n    '''\n    Write a python function to find the height of a rectangle with a given base and height.\n    '''\n    return h\n    \ndef triangle_height(b,h) :\n    '''\n    Write a python function to find the height of a triangle with a given base and height.\n    '''\n    return h\n    \ndef square_diagonal(a) :\n    '''\n    Write a python function to find the diagonal of a square with a given side.\n    '''\n    return a\n    \ndef circle_diameter(r) :\n    '''\n    Write a python function to find the diameter of a circle with a given radius.\n    '''\n    return 2*r\n    \ndef rectangle_diameter(b,h) :\n    '''\n    Write a python function to find the diameter of a rectangle with a given base and height.\n    '''\n    return 2*(b+h)\n    \ndef triangle_diameter(b,h) :\n    '''\n    Write a python function to find the diameter of a triangle with a given base and height.\n    '''\n    return 2*(b+h)\n    \ndef rectangle_circumference(b,h) :\n    '''\n    Write a python function to find the circumference of a rectangle with a given base and height.\n    '''\n    return 2*(b+h)\n    \ndef triangle_circumference(b,h) :\n    '''\n    Write a python function to find the circumference of a triangle with a given base and height.\n    '''\n    return "
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3*pi*r*r/4\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start > end:\n        return None\n    elif start == end:\n        if array[start]==start:\n            return start\n        else:\n            return end\n    mid=int((start+end)/2)\n    if array[mid]==mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if array == None or len(array) == 0:\n        return None\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = len(array) if end==None else end\n    if start>=end:\n        return 1\n    if array[start]<array[end]:\n        return array[start]+1 if array[start+1]-array[start]==1 else find_First_Missing(array,start+1,end)\n    return find_First_Missing(array,start+1,end)\n    \ndef find_First_Missing(array,start=0,end=None):\n    end = len(array) if end==None else end\n    if start>=end:\n        return 1\n    mid = start+end/2\n    if array[start]==array[mid]:\n        return find_First_Missing(array,start+1,end)\n    if array[start]<array[mid]:\n        if array[mid]==array[end-1]:\n            return find_First_Missing(array,mid+1,end-1)\n        else:\n            return find_First_Missing(array,mid+1,end)\n    else:\n        if array[end-1]==array[mid]:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if start == end:\n        return start\n    elif start == end-1:\n        if array[start]!= start:\n            return start\n        else:\n            return start+1\n    else:\n        mid = (start + end)//2\n        if array[mid] == mid:\n            return find_First_Missing(array,start,mid)\n        else:\n            if array[mid] < mid:\n                return find_First_Missing(array,mid,end)\n            else:\n                return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return None\n    elif start==end:\n        return start+1\n    elif array[end]==end:\n        return find_First_Missing(array,start,end-1)\n    else:\n        return find_First_Missing(array,start+1,end-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start > end:\n        return None\n    mid = (start + end)/2\n    if array[mid] < mid:\n        return mid + 1\n    elif array[mid] > mid:\n        if array[mid] == mid:\n            return find_First_Missing(array,start,mid-1)\n        return find_First_Missing(array,mid+1,end)\n    return None\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return None\n    if array[start]<=start:\n        return array[start]\n    if array[end]>=end:\n        return array[end]\n    mid=(start+end)/2\n    if array[mid]<=mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)\n    if start>end:\n        return None\n    if start == end:\n        return start+1\n    middle = (start+end)/2\n    if array[middle]!= middle:\n        return find_First_Missing(array,start,middle-1)\n    else:\n        return find_First_Missing(array,middle+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i:\n            return i\n    return end+1\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if not string:\n        return string\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = [number for number in list if number % 2 == 0]\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # Write your code here\n    #print(len(list))\n    #return\n    new_list = []\n    for n in list:\n        if n%2 == 0:\n            new_list.append(n)\n    return new_list\n    \nlist = [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [i for i in list if i%2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    def is_even(x):\n        return x % 2 == 0\n    \n    even_numbers = filter(is_even, list)\n    print even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_evens = []\n    list_odds = []\n    for x in list:\n        if x%2 == 0:\n            list_evens.append(x)\n        else:\n            list_odds.append(x)\n    return list_evens, list_odds\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    numbers = []\n    for number in list:\n        if number % 2 == 0:\n            numbers.append(number)\n    return numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens=[]\n    for n in list:\n        if n%2==0:\n            evens.append(n)\n    print evens\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [x for x in list if x%2 == 0]\n    return even_numbers\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global result\n    for x in range(0, 2):\n        if ele[x] < 0 or ele[x] >= board_size[x]:\n            return False\n    sub.append(ele)\n    if len(sub) == n:\n        result.append(sub)\n        return True\n    if adjac(ele, sub) == False:\n        result.append(sub)\n        return True\n    return False\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] - 1 >= 0:\n        sub.append((ele[0] - 1, ele[1]))\n    if ele[1] - 1 >= 0:\n        sub.append((ele[0], ele[1] - 1))\n    if ele[0] + 1 <= 11:\n        sub.append((ele[0] + 1, ele[1]))\n    if ele[1] + 1 <= 11:\n        sub.append((ele[0], ele[1] + 1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    (x,y) = ele\n    new_list = [(x+1,y),(x-1,y),(x,y+1),(x,y-1)]\n    return [(i,j) for i,j in new_list if i > -1 and j > -1 and i < 101 and j < 101]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    x = ele[0]\n    y = ele[1]\n    if x+1 < len(matrix):\n        adj.append((x+1, y))\n    if y+1 < len(matrix[0]):\n        adj.append((x, y+1))\n    if x-1 >= 0:\n        adj.append((x-1, y))\n    if y-1 >= 0:\n        adj.append((x, y-1))\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row = ele[0]\n    col = ele[1]\n    \n    adjacent = []\n    \n    if row > 0:\n        adjacent.append((row - 1, col))\n    if row < 3:\n        adjacent.append((row + 1, col))\n    if col > 0:\n        adjacent.append((row, col - 1))\n    if col < 3:\n        adjacent.append((row, col + 1))\n        \n    return adjacent\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+i, ele[1]+j) for i in (-1,0,1) for j in (-1,0,1) if i!=0 or j!=0]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if type(ele) == tuple:\n        res = [ele]\n        for i in range(len(ele)):\n            res.append(ele[:i] + ele[i+1:])\n        return res\n    else:\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] > 0 and ele[0] < 9 and ele[1] > 0 and ele[1] < 9:\n        sub.append((ele[0]-1, ele[1]))\n        sub.append((ele[0], ele[1]-1))\n        sub.append((ele[0]+1, ele[1]))\n        sub.append((ele[0], ele[1]+1))\n        return sub\n    else:\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    neighbors = []\n    for idx in range(0, 4):\n        neighbor = list(ele)\n        neighbor[idx] += 1\n        if neighbor[idx] <= 4:\n            neighbors.append(tuple(neighbor))\n        neighbor[idx] -= 1\n        if neighbor[idx] >= 1:\n            neighbors.append(tuple(neighbor))\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+x, ele[1]+y) for x in [-1,0,1] for y in [-1,0,1] if not (x,y) == (0,0) and (x,y)!= ele]\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i]==' ':\n            text[i]='_'\n        elif text[i]=='_':\n            text[i]=' '\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not text:\n        return ''\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.translate(str.maketrans(' ','_'))\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not text:\n        return text\n    if len(text) <= 1:\n        return text\n    r, l = text[0], text[1]\n    if (r.isupper() and l.islower()) or (l.isupper() and r.islower()):\n        return r+'_'+l\n    return l+'_'+r\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    new_text = ''\n    \n    for c in text:\n        if c =='':\n            c = '_'\n        else:\n            c = c.upper()\n        new_text += c\n    \n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if type(text)!= str:\n        raise TypeError(\"Input has to be a string\")\n    return text.replace(' ', '_').replace('_','').lower()\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.translate(str.maketrans(' ', '_',''))\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if type(text) is not str:\n        raise ValueError('Input must be a string')\n    else:\n        return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in num_list:\n        if i!= 0:\n            count += 1\n    \n    for i in range(count):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [i for i in num_list if i!= 0] + [0] * num_list.count(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_pos = []\n    zero_pos = [i for i, j in enumerate(num_list) if j == 0]\n    for i in zero_pos:\n        num_list.append(0)\n        num_list.pop(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [x for x in num_list if x!= 0] + [0 for x in num_list if x == 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, elem in enumerate(num_list):\n        if elem == 0:\n            num_list.pop(index)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            count += 1\n    for i in range(count):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.reverse()\n    num_list = [i for i in num_list if i!= 0]\n    num_list.reverse()\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    # a list of zeroes in the beginning of the list\n    num_list_with_zeroes = [0]\n    \n    # iterate through the list and append non zero elements to the list\n    for i in num_list:\n        if i!= 0:\n            num_list_with_zeroes.append(i)\n    \n    # sort the list with all non zero elements\n    num_list_with_zeroes.sort()\n    \n    # remove all non zero elements from the list\n    for i in num_list_with_zeroes:\n        num_list.remove(i)\n    \n    # now add the zeroes at the end of the list\n    for i in range(len(num_list)):\n        num_list.append(0)\n    \n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for num in num_list:\n        if num!= 0:\n            num_list[count] = num\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            s = s ^ (arr[i] ^ arr[j])\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if not arr :\n        return 0\n    else :\n        return (n*(n+1))/2 - sum(arr)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 1: \n        return arr[0]\n    else : \n        return arr[0] ^ pair_xor_Sum(arr[1:],n-1)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr = sorted(arr)\n    sum = 0\n    for i in range(0,n-1) :\n        for j in range(i+1,n) :\n            sum = sum ^ (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum( [arr[i]^arr[j] for i in range(n-1) for j in range(i+1,n)] )\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    assert isinstance(arr,list), \"input arr must be a list\"\n    assert all(isinstance(elem,int) for elem in arr), \"elements of arr must be integers\"\n    assert n>=0, \"n must be nonnegative\"\n    assert all(n>=elem for elem in arr), \"all elements of arr must be non-negative\"\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) <= 1 : \n        return 0\n    xor = 0\n    for i in range(0,len(arr)) : \n        for j in range(i+1,len(arr)) : \n            xor = xor ^ (arr[i] ^ arr[j])\n    return xor\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr = sorted(arr)\n    total = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            total += arr[i] ^ arr[j]\n    return total\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) :\n            sum = sum + arr[i]^arr[j]\n    return sum \n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            result = result ^ (arr[i] ^ arr[j])\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in xrange(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable)\n    # import heapq as hq\n    # result = []\n    # h = []\n    # for item in iterable:\n    #     hq.heappush(h, item)\n    # while h:\n    #     result.append(hq.heappop(h))\n    # return result\n    \n    "
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Basically, we have to put the elements in the heap\n    # and we pop them out of the heap and at the end we have the sorted list\n    # This is the heapify part\n    # The order of the heap is such that the smallest element has the smallest index\n    # The heap is the largest index/value, (number)\n    heap = []\n    for element in iterable:\n        hq.heappush(heap, element)\n    output = []\n    for i in range(len(heap)):\n        output.append(hq.heappop(heap))\n    return output\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heap_sort_1(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap=[]\n    for i in iterable:\n        hq.heappush(heap,i)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef merge_sort(iterable,key=None):\n    '''\n    Write a function that takes a list and returns a list which has been merged\n    (i.e. the new list is ordered and the items with the same value are merged).\n    '''\n    if len(iterable)==1:\n        return iterable\n    if key==None:\n        left=merge_sort(iterable[:len(iterable)//2])\n        right=merge_sort(iterable[len(iterable)//2:])\n    else:\n        left=merge_sort([x for x in iterable if key(x)<key(iterable[0])])\n        right=merge_sort([x for x in iterable if key(x)>=key(iterable[0])])\n    return left+right\ndef quick_sort(iterable,key=None):\n    '''\n    Write a function that takes a list and returns a list which has been\n    quick-sorted (i.e. the new list is ordered and the items with the same value are\n    merged).\n    '''\n    if len(iterable)==1:\n        return iterable\n    if key==None:\n        left=quick_sort([x for x in iterable[:len(iterable)//2]])\n        right=quick_sort([x for x in iterable[len(iterable)//2:]])\n    else:\n        left=quick_sort([x for x in iterable if key(x)<key(iterable[0])])\n        right=quick_sort([x for x in iterable if key(x)>=key(iterable[0])])\n    return left+right\ndef quick_sort_1(iterable,key=None):\n    '''\n    Write a function that takes a list and returns a list which has been\n    quick-sorted (i.e. the new list is ordered and the items with the same value are\n    merged).\n    '''\n    if len(iterable)==1:\n        return iterable\n    if key==None:\n        left=quick_sort_1([x for x in iterable[:len(iterable)//2]])\n        right=quick_sort_1([x for x in iterable[len(iterable)//2:]])\n    else:\n        left=quick_sort_1([x for x in iterable if key(x)<key(iterable[0])])\n        right=quick_sort_1([x for x in iterable if key(x)>=key(iterable[0])])\n    return left+right\ndef heapsort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap=[]\n    for i in iterable:\n        hq.heappush(heap,i)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef heapsort_1(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap=[]\n    for i in iterable:\n        hq.heappush(heap,i)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef merge_sort_2(iterable,key=None):\n    '''\n    Write a function that takes a list and returns a list which has been\n    quick-sorted (i.e. the new list is ordered and the items with the same value are\n    merged).\n    '''\n    if len(iterable)==1:\n        return iterable\n    if key==None:\n        left=merge_sort_2([x for x in iterable[:len(iterable)//2]])\n        right=merge_sort_2([x for x in iterable[len(iterable)//2:]])\n    else:\n        left=merge_sort_2([x for x in iterable if key(x)<key(iterable[0])])\n        right=merge_sort_2([x for x in iterable if key(x)>=key(iterable[0])])\n    return left+right\ndef quick_sort_2(iterable,key=None):\n    '''\n    Write a function that takes a list and returns a list which has been\n    quick-sorted (i.e. the new list is ordered and the items with the same value are\n    merged).\n    '''\n    if len(iterable)==1:\n        return iterable\n    if key==None:\n        left=quick_sort_2([x for x in iterable[:len(iterable)//2]])\n        right=quick_sort_2([x for x in iterable[len(iterable)//2:]])\n    else:\n        left=quick_sort_2([x for x in iterable if key(x)<key(iterable[0])])\n        right=quick_sort_2([x for x in iterable if key(x)>=key(iterable[0])])\n    return left+right\ndef heapsort_2(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap=[]\n    for i in iterable:\n        hq.heappush(heap,i)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef heapsort_1_2(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap=[]\n    for i in iterable:\n        hq.heappush(heap,i)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef merge_sort_3(iterable,key=None):\n    '''\n    Write a function that takes a list and returns a list which has been\n    quick-sorted (i.e. the new list is ordered and the items with the same value are\n    merged).\n    '''\n    if len(iterable)==1:\n        return iterable\n    if key==None:\n        left=merge_sort_3([x for x in iterable[:len(iterable)//2]])\n        right=merge_sort_3([x for x in iterable[len(iterable)//2:]])\n    else:\n        left=merge_sort_3([x for x in iterable if key(x)<key(iterable[0])])\n        right=merge_sort_3([x for x in iterable if key(x)>=key(iterable[0])])\n    return left+right\ndef quick_sort_3(iterable,key=None):\n    '''\n    Write a function that takes a list and returns a list which has been\n    quick-sorted (i.e. the new list is ordered and the items with the same value are\n    merged).\n    '''\n    if len(iterable)==1:\n        return iterable\n    if key==None:\n        left=quick_sort_3([x for x in iterable[:len(iterable)//2]])\n        right=quick_sort_3([x for x in iterable[len(iterable)//2:]])\n    else:\n        left=quick_sort_3([x for x in iterable if key(x)<key(iterable[0])])\n        right=quick_sort_3([x for x in iterable if key(x)>=key(iterable[0])])\n    return left+right\ndef heapsort_3(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap=[]\n    for i in iterable:\n        hq.heappush(heap,i"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        temp = hq.heappop(iterable)\n        hq.heappush(iterable,temp)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in xrange(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    minh = list()\n    for i in range(n):\n        hq.heappush(minh, iterable[i])\n    for i in range(n):\n        minh[0] = hq.heappop(minh)\n    return minh\ndef bubble_sort(list):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(list)-1):\n        for j in range(len(list)-1):\n            if list[j] > list[j+1]:\n                list[j],list[j+1] = list[j+1],list[j]\n    return list\ndef insertion_sort(list):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(1,len(list)):\n        insert_at = i\n        while insert_at > 0 and list[insert_at-1] > list[insert_at]:\n            list[insert_at],list[insert_at-1] = list[insert_at-1],list[insert_at]\n            insert_at -= 1\n    return list\ndef selection_sort(list):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(list)-1):\n        min_index = i\n        for j in range(i+1, len(list)):\n            if list[j] < list[min_index]:\n                min_index = j\n        if min_index!= i:\n            list[i],list[min_index] = list[min_index],list[i]\n    return list\ndef merge_sort(list):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(list) == 1:\n        return list\n    mid = len(list)//2\n    left = merge_sort(list[:mid])\n    right = merge_sort(list[mid:])\n    return merge(left,right)\ndef merge(left,right):\n    '''\n    Merge two sorted lists.\n    '''\n    result = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] < right[0]:\n            result.append(left[0])\n            left = left[1:]\n        else:\n            result.append(right[0])\n            right = right[1:]\n    if len(left) > 0:\n        result = result + left\n    if len(right) > 0:\n        result = result + right\n    return result\ndef partition(list,start,end):\n    '''\n    Write a function to sort the given list.\n    '''\n    pivot_index = start\n    for i in range(start+1,end):\n        if list[i] < list[start]:\n            pivot_index += 1\n            list[i],list[pivot_index] = list[pivot_index],list[i]\n    list[start],list[pivot_index] = list[pivot_index],list[start]\n    return pivot_index\ndef quick_sort(list,start,end):\n    '''\n    Write a function to sort the given list.\n    '''\n    if start >= end:\n        return\n    pivot_index = partition(list,start,end)\n    quick_sort(list,start,pivot_index-1)\n    quick_sort(list,pivot_index+1,end)\ndef quick_sort_2(list,start,end):\n    '''\n    Write a function to sort the given list.\n    '''\n    if start >= end:\n        return\n    pivot_index = partition_2(list,start,end)\n    quick_sort_2(list,start,pivot_index-1)\n    quick_sort_2(list,pivot_index+1,end)\ndef partition_2(list,start,end):\n    pivot_index = start\n    for i in range(start+1,end):\n        if list[i] < list[start]:\n            pivot_index += 1\n            list[i],list[pivot_index] = list[pivot_index],list[i]\n    list[start],list[pivot_index] = list[pivot_index],list[start]\n    return pivot_index\ndef get_median(list,start,end):\n    '''\n    Write a function to sort the given list.\n    '''\n    if start >= end:\n        return list[start]\n    if start+1 == end:\n        return min(list[start],list[end])\n    mid = start + (end-start)//2\n    left = get_median(list,start,mid)\n    right = get_median(list,mid,end)\n    return left if left < right else right\ndef get_median_index(list,start,end,mid):\n    if start >= end:\n        return end\n    if start+1 == end:\n        return start if list[start] < list[end] else end\n    if list[mid] < list[start]:\n        return get_median_index(list,start,mid-1,mid)\n    if list[mid] < list[end]:\n        return get_median_index(list,mid,end,mid)\n    return start if list[start] < list[end] else end\ndef get_median_2(list,start,end):\n    if start >= end:\n        return list[start]\n    mid = start + (end-start)//2\n    left = get_median_2(list,start,mid-1)\n    right = get_median_2(list,mid,end)\n    return left if left < right else right\ndef get_median_2_index(list,start,end):\n    if start >= end:\n        return end\n    mid = start + (end-start)//2\n    left = get_median_2_index(list,start,mid-1)\n    right = get_median_2_index(list,mid,end)\n    return left if left < right else right\ndef get_median_3(list,start,end):\n    if start >= end:\n        return list[start]\n    mid = start + (end-start)//2\n    left = get_median_3(list,start,mid-1)\n    right = get_median_3(list,mid,end)\n    if left < right:\n        return left\n    else:\n        return right\ndef get_median_3_index(list,start,end):\n    if start >= end:\n        return end\n    mid = start + (end-start)//2\n    left = get_median_3_index(list,start,mid-1)\n    right = get_median_3_index(list,mid,end)\n    if left < right:\n        return left\n    else:\n        return right\ndef get_median_4(list,start,end):\n    if start >= end:\n        return list[start]\n    mid = start + (end-start)//2\n    left = get_median_4(list,start,mid-1)\n    right = get_median_4(list,mid,end)\n    if left < right:\n        return left\n    else:\n        return right\ndef get_median_4_index(list,start,end):\n    if start >= end:\n        return end\n    mid = start + (end-start)//2\n    left = get_median_4_index(list,start,mid-1)\n    right = get_median_4_index(list,mid,end)\n    if left < right:\n        return left\n    else:\n        return right\ndef get_median_5(list,start,end):\n    if start >= end:\n        return list[start]\n    mid = start + (end-start)//2\n    left = get_median_5(list,start,mid-1)\n    right = get_median_5(list,mid,end)\n    if left < right:\n        return left\n    else:\n        return right\ndef get_median_5_index(list,start,end):\n    if start >= end:\n        return end\n    mid = start + (end-start)//2\n    left "
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in xrange(len(iterable))]\n    \ndef merge(left, right):\n    '''\n    Merges two lists while preserving order.\n    '''\n    r = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] < right[0]:\n            r.append(left[0])\n            left.pop(0)\n        else:\n            r.append(right[0])\n            right.pop(0)\n    if len(left) == 0:\n        r = r + right\n    else:\n        r = r + left\n    return r\n    \ndef merge_sort(arr):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(arr) < 2:\n        return arr\n    else:\n        mid = len(arr) / 2\n        return merge(merge_sort(arr[:mid]), merge_sort(arr[mid:]))\n    \ndef merge_sort_recursive(arr):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(arr) < 2:\n        return arr\n    mid = len(arr) / 2\n    left = merge_sort_recursive(arr[:mid])\n    right = merge_sort_recursive(arr[mid:])\n    return merge(left, right)\n    \ndef heap_sort_recursive(arr):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(arr) < 2:\n        return arr\n    else:\n        mid = len(arr) / 2\n        left = heap_sort_recursive(arr[:mid])\n        right = heap_sort_recursive(arr[mid:])\n        return merge(left, right)\n        \ndef counting_sort(arr):\n    '''\n    Write a function to sort the given list.\n    '''\n    k = max(arr)\n    count = [0] * (k + 1)\n    for i in arr:\n        count[i] += 1\n    \n    count = [count[i] for i in xrange(k + 1)]\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    \n    r = [0] * len(arr)\n    for i in xrange(len(arr) - 1, -1, -1):\n        r[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n    return r\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    elif actual_cost>sale_amount:\n        return False\n    else:\n        return noprofit_noloss(actual_cost*0.99,sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        for j in range(actual_cost,sale_amount+1):\n            if j - actual_cost < sale_amount - j:\n                return False\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # if sale_amount > actual_cost:\n    #     return False\n    # else:\n    #     return True\n    return actual_cost-sale_amount == 0\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    \n    "
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    elif actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount \n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif sale_amount < actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 13.12\n    b = 35.74\n    c = 0.6215\n    d = -11.37\n    e = -0.0367\n    v = v*0.6\n    t = t/10\n    v = v*(v>=5)*5\n    t = t*(t>=40)*40\n    if (v<5):\n        return -70\n    elif(v<10):\n        return (a + b*v + c*t)\n    else:\n        return (a + b*v + c*t - d*v**2 - e*t**2)\ndef wind_chill_shm(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 13.12\n    b = 35.74\n    c = 0.6215\n    d = -11.37\n    e = -0.0367\n    v = v*0.6\n    t = t/10\n    v = v*(v>=5)*5\n    t = t*(t>=40)*40\n    if (v<5):\n        return -70\n    elif(v<10):\n        return (a + b*v + c*t)\n    else:\n        return (a + b*v + c*t - d*v**2 - e*t**2)\ndef wind_chill_lu(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 13.12\n    b = 35.74\n    c = 0.6215\n    d = -11.37\n    e = -0.0367\n    v = v*0.6\n    t = t/10\n    v = v*(v>=5)*5\n    t = t*(t>=40)*40\n    if (v<5):\n        return -70\n    elif(v<10):\n        return (a + b*v + c*t)\n    else:\n        return (a + b*v + c*t - d*v**2 - e*t**2)\ndef wind_chill_pl(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 13.12\n    b = 35.74\n    c = 0.6215\n    d = -11.37\n    e = -0.0367\n    v = v*0.6\n    t = t/10\n    v = v*(v>=5)*5\n    t = t*(t>=40)*40\n    if (v<5):\n        return -70\n    elif(v<10):\n        return (a + b*v + c*t)\n    else:\n        return (a + b*v + c*t - d*v**2 - e*t**2)\ndef wind_chill_pl_2(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 13.12\n    b = 35.74\n    c = 0.6215\n    d = -11.37\n    e = -0.0367\n    v = v*0.6\n    t = t/10\n    v = v*(v>=5)*5\n    t = t*(t>=40)*40\n    if (v<5):\n        return -70\n    elif(v<10):\n        return (a + b*v + c*t)\n    else:\n        return (a + b*v + c*t - d*v**2 - e*t**2)\ndef wind_chill_pm(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 13.12\n    b = 35.74\n    c = 0.6215\n    d = -11.37\n    e = -0.0367\n    v = v*0.6\n    t = t/10\n    v = v*(v>=5)*5\n    t = t*(t>=40)*40\n    if (v<5):\n        return -70\n    elif(v<10):\n        return (a + b*v + c*t)\n    else:\n        return (a + b*v + c*t - d*v**2 - e*t**2)\ndef wind_chill_pm_2(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 13.12\n    b = 35.74\n    c = 0.6215\n    d = -11.37\n    e = -0.0367\n    v = v*0.6\n    t = t/10\n    v = v*(v>=5)*5\n    t = t*(t>=40)*40\n    if (v<5):\n        return -70\n    elif(v<10):\n        return (a + b*v + c*t)\n    else:\n        return (a + b*v + c*t - d*v**2 - e*t**2)\ndef wind_chill_sm(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 13.12\n    b = 35.74\n    c = 0.6215\n    d = -11.37\n    e = -0.0367\n    v = v*0.6\n    t = t/10\n    v = v*(v>=5)*5\n    t = t*(t>=40)*40\n    if (v<5):\n        return -70\n    elif(v<10):\n        return (a + b*v + c*t)\n    else:\n        return (a + b*v + c*t - d*v**2 - e*t**2)\ndef wind_chill_sm_2(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 13.12\n    b = 35.74\n    c = 0.6215\n    d = -11.37\n    e = -0.0367\n    v = v*0.6\n    t = t/10\n    v = v*(v>=5)*5\n    t = t*(t>=40)*40\n    if (v<5):\n        return -70\n    elif(v<10):\n        return (a + b*v + c*t)\n    else:\n        return (a + b*v + c*t - d*v**2 - e*t**2)\ndef wind_chill_lw(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 13.12\n    b = 35.74\n    c = 0.6215\n    d = -11.37\n    e = -0.0367\n    v = v*0.6\n    t = t/10\n    v = v*(v>=5)*5\n    t = t*(t>=40)*40\n    if (v<5):\n        return -70\n    elif(v<10):\n        return (a + b*v + c*t)\n    else:\n        return (a + b*v + c*t - d*v**2 - e*t**2)\ndef wind_chill_lw_2(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsiu"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = t*9/5 + 32\n    if v < 2:\n        return t\n    elif v < 9:\n        return t + 35/9*(v -2)\n    elif v < 19:\n        return t + 35*(v-9)\n    elif v < 28:\n        return t + 4*(v-19)\n    elif v < 38:\n        return t + 4*(v-28)\n    elif v < 48:\n        return t + 5*(v-38)\n    elif v < 58:\n        return t + 6*(v-48)\n    elif v < 68:\n        return t + 7*(v-58)\n    elif v < 79:\n        return t + 8*(v-68)\n    elif v < 89:\n        return t + 8*(v-79) + 35.5*(v-89)\n    elif v < 102:\n        return t + 9*(v-89) + 14.5*(v-102)\n    elif v < 112:\n        return t + 10*(v-102) + 22.5*(v-112)\n    elif v < 120:\n        return t + 11*(v-112) + 32*(v-120)\n    elif v < 130:\n        return t + 12*(v-120) + 35*(v-130)\n    else:\n        return t + 13*(v-130) + 35.5*(v-138)\ndef temperature_min_max(t):\n    '''\n    Write a function to calculate the minimum and maximum temperature for a given temperature.\n    '''\n    if t < -58:\n        return t\n    elif t < -54:\n        return t + 10\n    elif t < -50:\n        return t + 15\n    elif t < -46:\n        return t + 20\n    elif t < -42:\n        return t + 25\n    elif t < -38:\n        return t + 30\n    elif t < -34:\n        return t + 35\n    elif t < -30:\n        return t + 40\n    elif t < -26:\n        return t + 45\n    elif t < -22:\n        return t + 50\n    elif t < -18:\n        return t + 55\n    elif t < -14:\n        return t + 60\n    elif t < -10:\n        return t + 65\n    elif t < -6:\n        return t + 70\n    elif t < 0:\n        return t + 75\n    elif t < 6:\n        return t + 80\n    elif t < 10:\n        return t + 85\n    elif t < 14:\n        return t + 90\n    elif t < 18:\n        return t + 95\n    elif t < 22:\n        return t + 100\n    elif t < 26:\n        return t + 105\n    elif t < 30:\n        return t + 110\n    elif t < 34:\n        return t + 115\n    elif t < 38:\n        return t + 120\n    elif t < 42:\n        return t + 125\n    elif t < 46:\n        return t + 130\n    elif t < 50:\n        return t + 135\n    elif t < 54:\n        return t + 140\n    elif t < 58:\n        return t + 145\n    elif t < 62:\n        return t + 150\n    elif t < 66:\n        return t + 155\n    elif t < 70:\n        return t + 160\n    elif t < 74:\n        return t + 165\n    elif t < 78:\n        return t + 170\n    elif t < 82:\n        return t + 175\n    elif t < 86:\n        return t + 180\n    elif t < 90:\n        return t + 185\n    elif t < 94:\n        return t + 190\n    elif t < 98:\n        return t + 195\n    elif t < 102:\n        return t + 200\n    elif t < 106:\n        return t + 205\n    elif t < 110:\n        return t + 210\n    elif t < 114:\n        return t + 215\n    elif t < 118:\n        return t + 220\n    elif t < 122:\n        return t + 225\n    elif t < 126:\n        return t + 230\n    elif t < 130:\n        return t + 235\n    elif t < 134:\n        return t + 240\n    elif t < 138:\n        return t + 245\n    elif t < 142:\n        return t + 250\n    elif t < 146:\n        return t + 255\n    elif t < 150:\n        return t + 260\n    elif t < 154:\n        return t + 265\n    elif t < 158:\n        return t + 270\n    elif t < 162:\n        return t + 275\n    elif t < 166:\n        return t + 280\n    elif t < 170:\n        return t + 285\n    elif t < 174:\n        return t + 290\n    elif t < 178:\n        return t + 295\n    elif t < 182:\n        return t + 300\n    elif t < 186:\n        return t + 305\n    elif t < 190:\n        return t + 310\n    elif t < 194:\n        return t + 315\n    elif t < 198:\n        return t + 320\n    elif t < 202:\n        return t + 325\n    elif t < 206:\n        return t + 330\n    elif t < 210:\n        return t + 335\n    elif t < 214:\n        return t + 340\n    elif t < 218:\n        return t + 345\n    elif t < 222:\n        return t + 350\n    elif t < 226:\n        return t + 355\n    elif t < 230:\n        return t + 360\n    elif t < 234:\n        return t + 365\n    elif t < 238:\n        return t + 370\n    elif t < 242:\n        return t + 375\n    elif t < 246:\n        return t + 380\n    elif t < 250:\n        return t + 385\n    elif t < 254:\n        return t + 390\n    elif t < 258:\n        return t + 395\n    elif t < 262:\n        return t + 400\n    elif t < 266:\n        return t + 405\n    elif t < 270:\n        return t + 410\n    elif t < 274:\n        return t + 415\n    elif t < 278:\n        return t + 420\n    elif t < 282:\n        return t + 425\n    elif t < 286:\n        return t + 430\n    elif t < 290:\n        return t + 435\n    elif t < 294:\n        return t + 440\n    elif t < 298:\n        return t + 445\n    elif t < 302:\n        return t + 450\n    elif t < 306:\n        return t + 455\n    elif t < 310:\n        return t + 460\n    elif t < 314:\n        return t + 465\n    elif t < 318:\n        return t + 470\n    elif t < 322:\n        return t + 475\n    elif t < 326:\n        return t + 480\n    elif t < 330:\n        return t + 485\n    elif t < 334:\n        return t + 490\n    elif t < 338:\n        return t + 495\n    elif t < 342:\n        return t + 500\n    elif t < 346:\n        return t + 505\n    elif t < 350:\n        return t + 510\n    elif t < 354:\n        return t + 515\n    elif t < 358:\n        return t + 520\n    elif t < 362:\n        return t + 525\n    elif t < 366:\n        return t + 530\n    elif t < 370:\n        return t + 535\n    elif t < 374:\n        return t + 540\n    elif t < 378:\n        return t + 545\n    elif t < 382:\n        return t + 550\n    elif t < 386:\n        return t + 555\n    elif t < 390:\n        return t + 560\n    elif t < 394:\n        return t + 565\n    e"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 0:\n        return 35.74 + 0.6215 * t + (35.75 * math.pow(v, 0.16)) - (0.4275 * t * math.pow(v, 0.16)) + 0.5525 * math.pow(t, 2) - 35.75 * math.pow(t, 3) + 0.4275 * math.pow(t, 4) - 0.2255 * math.pow(v, 2) + 0.1466 * math.pow(v, 3) + 0.2183 * math.pow(v, 4)\n    else:\n        return None\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + 0.6215 * t + (35.75 * v)**0.16 + (0.4275 * t - 35.75) * (v**0.16)\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #c = 35.74 + 0.6215*t + (35.75*v**0.16) - (0.4275*t*v**0.16)\n    return round((35.74 + 0.6215*t + (35.75*v**0.16) - (0.4275*t*v**0.16))*10)\n    \ndef wind_chill_index(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return round(c)\n    \ndef wind_chill_index_round(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.ceil(c)\n    \ndef wind_chill_index_rounded(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.floor(c)\n    \ndef wind_chill_rounded(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return round(c)\n    \ndef wind_chill_round(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return round(c)\n    \ndef wind_chill_round_up(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.ceil(c)\n    \ndef wind_chill_round_down(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.floor(c)\n    \ndef wind_chill_round_up_int(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return int(math.ceil(c))\n    \ndef wind_chill_round_down_int(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return int(math.floor(c))\n    \ndef wind_chill_round_up_float(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.ceil(c)\n    \ndef wind_chill_round_down_float(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.floor(c)\n    \ndef wind_chill_round_float(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return round(c)\n    \ndef wind_chill_up(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.ceil(c)\n    \ndef wind_chill_down(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.floor(c)\n    \ndef wind_chill_down_int(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return int(math.floor(c))\n    \ndef wind_chill_down_float(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.floor(c)\n    \ndef wind_chill_down_float_rounded(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.floor(c)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + 0.6215 * t + (0.4275 * t) - 35.75 * (v ** 0.16) + 0.4275 * (v ** 0.16)\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round((35.74 + 0.6215 * t) * (v ** 0.16) * ((v ** 0.16) + 35.75) ** -1)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v>=80:\n        return ((35.74 + 0.6215 * t) - (35.75 * math.pow(v,0.16)))\n    else:\n        return ((35.74 + 0.6215 * t) - (35.75 * math.pow(v,0.16)))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Wind Chill Formula:\n    #wci = 13.12 + (0.6215 * t) - (11.37 * v**0.16) + 0.3965 * t * v**0.16\n    wci = (13.12 + (0.6215 * t) - (11.37 * v**0.16) + 0.3965 * t * v**0.16)\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = int(v)\n    t = int(t)\n    if v < 0:\n        raise ValueError\n    elif v > 208:\n        return 35.74 + 0.6215 * t + (((v**0.16) - 35.74) / 0.4275) + 0.4275 * t * (v**0.16)\n    else:\n        return 35.74 + 0.6215 * t + ((v**0.16) - 35.74) / 0.4275\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    '''\n    This solution is a bit tricky. The easiest way to do this is to use a set.\n    '''\n    lowercase = set(sample_names)\n    for name in lowercase:\n        if name[0].islower():\n            lowercase.remove(name)\n    return sum([len(name) for name in lowercase])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names\n    return sum(len(name) for name in sample_names if name[0].islower())\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_with_length = []\n    for sample in sample_names:\n        sample_length = len(sample)\n        if sample_length > 0 and sample[0].islower():\n            sample_names_with_length.append(sample_length)\n    return sum(sample_names_with_length)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n_sample = sample_names\n    return sum([len(name) for name in n_sample if name[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam_list = []\n    for name in sample_names:\n        if name[0].isupper():\n            nam_list.append(name)\n    return sum(len(n) for n in nam_list)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Test code\n    # print(sample_nam([\"Jay\", \"Lauren\", \"Ash\", \"Heather\", \"Kim\", \"Ainsley\"]))\n    # Expected output:\n    # 8\n    #\n    # for name in sample_nam([\"Jay\", \"Lauren\", \"Ash\", \"Heather\", \"Kim\", \"Ainsley\"]):\n    #     if name[0] == \"a\":\n    #         sample_nam([\"Jay\", \"Lauren\", \"Ash\", \"Heather\", \"Kim\", \"Ainsley\"])\n    #\n    # return sum(len(name) for name in sample_nam([\"Jay\", \"Lauren\", \"Ash\", \"Heather\", \"Kim\", \"Ainsley\"]))\n    return sum(len(name) for name in sample_names if name[0]!= \"a\")\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(\"\\([^)]*\\)\", \"\", items)\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if not items:\n        return items\n    res=[]\n    for i in items:\n        if i=='(':\n            res.append(i)\n        elif i==')':\n            res.pop()\n        else:\n            res.append(i)\n    return res\ndef add_parenthesis(items):\n    '''\n    Write a function to add the parenthesis and what is inbetween them to a string.\n    '''\n    if not items:\n        return items\n    res=[]\n    for i in items:\n        if i=='(':\n            res.append(')')\n        elif i==')':\n            res.append('(')\n        else:\n            res.append(i)\n    return res\ndef bracket_pairs(items):\n    '''\n    Given a list of strings, find the pairs of parenthesis that are not properly matched\n    '''\n    pairs=[]\n    for i in range(0,len(items)):\n        if items[i]=='(':\n            pairs.append(items[i])\n        elif items[i]==')':\n            if len(pairs)==0:\n                pairs.append(items[i])\n            elif pairs[-1]!='(':\n                pairs.append(items[i])\n            else:\n                pairs.pop()\n    return pairs\ndef is_valid_parenthesis(items):\n    '''\n    Given a list of strings, find if the parenthesis are properly matched\n    '''\n    for i in range(0,len(items)):\n        if items[i]=='(':\n            if i+1<len(items):\n                if items[i+1]==')':\n                    return True\n    return False\ndef add_bracket(items):\n    '''\n    Write a function to add brackets around the strings.\n    '''\n    if not items:\n        return items\n    res=[]\n    for i in items:\n        res.append('[')\n        res.append(i)\n        res.append(']')\n    return res\ndef remove_bracket(items):\n    '''\n    Write a function to remove the brackets from a string.\n    '''\n    if not items:\n        return items\n    res=[]\n    for i in items:\n        if i=='[':\n            res.append(i)\n        elif i==']':\n            res.pop()\n        else:\n            res.append(i)\n    return res\ndef is_balanced(items):\n    '''\n    Write a function to check if a string has a balanced number of parenthesis or brackets.\n    '''\n    if not items:\n        return True\n    stack=[]\n    for i in items:\n        if i=='(' or i=='[' or i=='{':\n            stack.append(i)\n        elif i==')' or i==']' or i=='}':\n            if len(stack)==0:\n                return False\n            if i==')':\n                if stack[-1]=='(':\n                    stack.pop()\n                else:\n                    return False\n            elif i==']':\n                if stack[-1]=='[':\n                    stack.pop()\n                else:\n                    return False\n            elif i=='}':\n                if stack[-1]=='{':\n                    stack.pop()\n                else:\n                    return False\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef reverse(items):\n    '''\n    Write a function to reverse a string.\n    '''\n    if not items:\n        return items\n    return items[::-1]\ndef is_palindrome(items):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if not items:\n        return True\n    return items==items[::-1]\ndef word_to_array(items):\n    '''\n    Write a function to convert a string to an array of characters.\n    '''\n    if not items:\n        return items\n    res=[]\n    for i in items:\n        if i not in ',.;!?':\n            res.append(i)\n    return res\ndef increment_string(items):\n    '''\n    Write a function to increment a string.\n    '''\n    if not items:\n        return items\n    res=[]\n    for i in items:\n        if i=='9':\n            res.append(i)\n        elif i=='8':\n            res.append('0')\n        elif i=='7':\n            res.append('1')\n        elif i=='6':\n            res.append('2')\n        elif i=='5':\n            res.append('3')\n        elif i=='4':\n            res.append('4')\n        elif i=='3':\n            res.append('5')\n        elif i=='2':\n            res.append('6')\n        elif i=='1':\n            res.append('7')\n        elif i=='0':\n            res.append('8')\n        else:\n            res.append(str(int(i)+1))\n    return ''.join(res)\ndef is_palindrome_permutation(items):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    if not items:\n        return True\n    if len(items)%2:\n        return False\n    d={}\n    for i in items:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]%2!=0:\n            return False\n    return True\ndef is_anagram(items):\n    '''\n    Write a function to check if a string is an anagram of another string.\n    '''\n    if not items:\n        return True\n    d={}\n    for i in items:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]%2!=0:\n            return False\n    return True\ndef longest_common_prefix(items):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings.\n    '''\n    if not items:\n        return items\n    res=items[0]\n    for i in items:\n        for j in range(len(res)):\n            if res[j]!=i[j] and res[j]!=' ':\n                res=res[:j]\n                break\n    return res\ndef longest_common_suffix(items):\n    '''\n    Write a function to find the longest common suffix string amongst an array of strings.\n    '''\n    if not items:\n        return items\n    res=items[0]\n    for i in items:\n        for j in range(len(res)):\n            if res[-j-1]!=i[-j-1] and res[-j-1]!=' ':\n                res=res[:-j]\n                break\n    return res\ndef is_rotated(items):\n    '''\n    Write a function to check if a string is a rotated string.\n    '''\n    if not items:\n        return True\n    for i in range(len(items)-1):\n        if items[i+1]==items[i]:\n            return True\n    return False\ndef is_anagram_permutation(items):\n    '''\n    Write a function to check if a string is an anagram permutation of another string.\n    '''\n    if not items:\n        return True\n    d={}\n    for i in items:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]%2!=0:\n            return False\n    return True\ndef longest_common_substring(items):\n    '''\n    Write a function to find the longest common substring in an array of strings.\n    '''\n    if not items:\n        return items\n    res=[]\n    for i in range(len(items[0])):\n        tmp=items[0][i]\n        for j in range(1,len"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('[()]','',items)\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        if '(' in item:\n            result.append(item[item.index('(') + 1 : item.index(')')])\n        else:\n            result.append(item)\n    return result\ndef is_valid_ip(s):\n    '''\n    Write a function that returns True if the given string is a valid IPv4 address.\n    '''\n    if not s:\n        return False\n    if s == '0.0.0.0':\n        return True\n    if s == '255.255.255.255':\n        return True\n    if len(s) == 0 or len(s) > 3:\n        return False\n    if s.startswith('0.'):\n        return False\n    if '0' == s[0] and len(s) > 1:\n        return False\n    if s[0] == '0':\n        return False\n    for x in s[1:]:\n        if x > '9' or x < '0':\n            return False\n    return True\ndef valid_ip(s):\n    return is_valid_ip(s)\ndef is_valid_url(s):\n    '''\n    Write a function that returns True if the given string is a valid URL.\n    '''\n    if not s:\n        return False\n    regex = re.compile(\n        r'^(?:http)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' #...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    if regex.match(s) is None:\n        return False\n    return True\ndef valid_url(s):\n    return is_valid_url(s)\ndef longest_match(s, t):\n    '''\n    Write a function that takes two strings and returns the length of the longest match of s in t.\n    '''\n    if not s or not t:\n        return 0\n    m = re.search(s, t)\n    if m is None:\n        return 0\n    return len(m.group())\ndef longest_match_2(s, t):\n    if not s or not t:\n        return 0\n    lens = [longest_match(s, t[:i]) for i in range(1, len(t) + 1)]\n    return max(lens)\ndef longest_match_3(s, t):\n    if not s or not t:\n        return 0\n    return max(len(i) for i in re.findall(s, t))\ndef longest_match_4(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_5(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_6(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_7(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_8(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_9(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_10(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_11(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_12(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_13(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_14(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_15(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_16(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_17(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_18(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_19(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_20(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_21(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_22(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_23(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_24(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_25(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_26(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_27(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_28(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_29(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_30(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_31(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_32(s, t):\n    if not s or not t:\n        return 0\n    return max(re.findall(s, t), key=len)\ndef longest_match_33(s, t):\n    if not s or not "
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i, element in enumerate(items):\n        if (re.search('[(].*?[)]', element)):\n            items[i] = re.search('[(].*?[)]', element).group()\n    return items\ndef remove_quotes(items):\n    '''\n    Write a function to remove the quotes from a string.\n    '''\n    for i, element in enumerate(items):\n        if element == '\"':\n            items[i] = ''\n        elif element == \"'\":\n            items[i] = ''\n    return items\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i, element in enumerate(items):\n        if (re.search('[(].*?[)]', element)):\n            items[i] = re.search('[(].*?[)]', element).group()\n    return items\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks to see if a string is in a given range.\n    '''\n    if lower_bound <= upper_bound:\n        if lower_bound < string < upper_bound:\n            return True\n    return False\ndef is_in_range(string, lower_bound, upper_bound):\n    '''\n    Write a function that checks t"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\(([^\\(^\\)]+)\\)')\n    items = pattern.sub('\\g<1>', items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^\\)]*\\)')\n    new_items = re.findall(pattern,items)\n    new_items = ''.join(new_items)\n    return new_items\n    #print(new_items)\ndef is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\ndef is_hex(s):\n    if s.lower() in ('0x', '0X'):\n        return True\n    else:\n        return False\ndef is_hex_or_number(s):\n    if is_number(s):\n        return True\n    elif is_hex(s):\n        return True\n    else:\n        return False\ndef get_digits(s):\n    digits = []\n    for c in s:\n        if is_number(c):\n            digits.append(c)\n    return digits\ndef get_hex(s):\n    hexs = []\n    for c in s:\n        if is_hex(c):\n            hexs.append(c)\n    return hexs\ndef get_number(s):\n    numbers = []\n    for c in s:\n        if is_number(c):\n            numbers.append(c)\n    return numbers\ndef get_whole_number(s):\n    numbers = get_digits(s)\n    whole_numbers = []\n    for n in numbers:\n        whole_numbers.append(int(n))\n    return whole_numbers\ndef is_keyword(s):\n    keywords = ['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise','return', 'try', 'while', 'with', 'yield']\n    if s.lower() in keywords:\n        return True\n    else:\n        return False\ndef is_name(s):\n    if s.lower() =='self':\n        return False\n    else:\n        return True\ndef get_name(s):\n    if is_name(s):\n        return s\n    else:\n        return None\ndef get_id_keywords(s):\n    keywords = ['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise','return', 'try', 'while', 'with', 'yield']\n    name = None\n    if s.lower() in keywords:\n        return s.lower()\n    else:\n        return None\ndef is_id_keyword(s):\n    keywords = ['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise','return', 'try', 'while', 'with', 'yield']\n    if s.lower() in keywords:\n        return True\n    else:\n        return False\ndef get_identifiers(s):\n    identifiers = []\n    for c in s:\n        if is_hex_or_number(c):\n            identifiers.append(c)\n    return identifiers\ndef is_identifier(s):\n    identifiers = []\n    for c in s:\n        if is_hex_or_number(c):\n            identifiers.append(c)\n    if len(identifiers) == 1:\n        return True\n    else:\n        return False\ndef is_assign(s):\n    if s[0] == '=' and s[-1] == '=':\n        return True\n    else:\n        return False\ndef is_operator(s):\n    operators = ['+', '-', '*', '/', '%', '**', '&', '|', '^', '<<', '>>', '=', '==', '!=', '>', '<', '>=', '<=', 'is', 'in', 'not', 'and', 'or']\n    if s.lower() in operators:\n        return True\n    else:\n        return False\ndef is_del_assign(s):\n    if s[0] == '-' and s[-1] == '=':\n        return True\n    else:\n        return False\ndef is_new_assign(s):\n    if s[0] == '(' and s[-1] == '=':\n        return True\n    else:\n        return False\ndef is_equals(s):\n    if s[0] == '=' and s[-1] == '=':\n        return True\n    else:\n        return False\ndef is_add(s):\n    if s[0] == '+' and s[-1] == '+':\n        return True\n    else:\n        return False\ndef is_sub(s):\n    if s[0] == '-' and s[-1] == '-':\n        return True\n    else:\n        return False\ndef is_mult(s):\n    if s[0] == '*' and s[-1] == '*':\n        return True\n    else:\n        return False\ndef is_div(s):\n    if s[0] == '/' and s[-1] == '/':\n        return True\n    else:\n        return False\ndef is_mod(s):\n    if s[0] == '%' and s[-1] == '%':\n        return True\n    else:\n        return False\ndef is_power(s):\n    if s[0] == '**' and s[-1] == '**':\n        return True\n    else:\n        return False\ndef is_bitwise(s):\n    if s[0] == '&' and s[-1] == '&':\n        return True\n    else:\n        return False\ndef is_bitwise_or(s):\n    if s[0] == '|' and s[-1] == '|':\n        return True\n    else:\n        return False\ndef is_bitwise_xor(s):\n    if s[0] == '^' and s[-1] == '^':\n        return True\n    else:\n        return False\ndef is_logical_and(s):\n    if s[0] == '&' and s[-1] == '&':\n        return True\n    else:\n        return False\ndef is_logical_or(s):\n    if s[0] == '|' and s[-1] == '|':\n        return True\n    else:\n        return False\ndef is_logical_xor(s):\n    if s[0] == '^' and s[-1] == '^':\n        return True\n    else:\n        return False\ndef is_bitwise_shift_left(s):\n    if s[0] == '<<' and s[-1] == '<<':\n        return True\n    else:\n        return False\ndef is_bitwise_shift_right(s):\n    if s[0] == '>>' and s[-1] == '>>':\n        return True\n    else:\n        return False\ndef is_assign_or_func(s):\n    if is_operator(s) or is_del_assign(s) or is_new_assign(s) or is_operator(s) or is_equals(s) or is_add(s) or is_sub(s) or is_mult(s) or is_div(s) or is_mod(s) or is_power(s) or is_bitwise(s) or is_bitwise_or(s) or is_bitwise_xor(s) or is_logical_and(s) or is_logical_or(s) or is_logical_xor(s):\n        return True\n    else:\n        return False\ndef get_operators(s):\n    ope"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    ret = []\n    for i in items:\n        # print(i)\n        # print(i.group(0))\n        # print(i.group(1))\n        ret.append(i.group(1))\n    # print(ret)\n    return ret\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_string = ''\n    for i in items:\n        if i == '(' or i == ')':\n            continue\n        else:\n            new_string = new_string + i\n    return new_string\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #convert to list and remove what is inbetween\n    return re.sub('\\([^()]+\\)','',items)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 3\n    else:\n        return (n-1) * (n-2) + 2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * n - 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    numbers = [1,2,4,7,11]\n    while count < n:\n        next_number = numbers[-1] + 2*numbers[-2] + 2*numbers[-3]\n        numbers.append(next_number)\n        count += 1\n    return numbers[-1]\n    \n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return (n*(n+1))/2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    N = 0\n    for i in xrange(1,n+1):\n        N += i\n        N *= (i+1)\n    return N\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    else:\n        return (n-1)*(n-2)/2 + 2"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    for i in range(1, n):\n        a += 4*i - 3\n    return a\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return False\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    \n    nums = [1, 2]\n    for i in range(2, n):\n        nums.append(nums[i-2] + nums[i-1])\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\n    # return re.match('z.*?z', text) is not None\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'z{1}.*z{1}',text)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]=='z' or text[-1]=='z':\n        return False\n    for i in range(1,len(text)-1):\n        if text[i]=='z':\n            return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.match(r'z*z',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    \n    return bool(re.search(r'(.+z.+z.+)', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z_in_middle = bool(re.search(r'(z+[^z]*z)',text))\n    return z_in_middle\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search('z.*z', text))\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start or end of the word.\n    '''\n    return bool(re.search('^z*z|z*$', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0].isalpha() and text[len(text)-1].isalpha():\n        if 'z' not in text[1:len(text)-1]:\n            return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.match(r'(^.*z)(.*z)(.*$)', text)\n    return bool(result)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #using regex\n    if re.match(r'^z|z$', text):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0 \n    list1 = []\n    while i < k:\n        list1.append(input[i])\n        i += 1\n    while i < len(input):\n        list1.append(input[i])\n        i += 1\n    return list1\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if input == None or len(input) == 0:\n        return None\n    if k < 0 or k > len(input):\n        return None\n    result = []\n    for i in range(len(input)-1,k-1,-1):\n        result.append(input[i])\n    result += input[k:len(input)]\n    return result\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\n    "
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # the array is given as input\n    arr = input[:] # make a copy of input\n    #print(arr)\n    start = 0\n    end = len(arr) - 1\n    # traverse the array\n    while start <= end:\n        # swap the elements\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    # print the result\n    print(arr)\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = input[::-1]\n    return input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    k = int(k)\n    if (k > len(input)) or (k < 1) : \n        print 'Invalid input'\n    else :\n        print''.join(input[:k])\n    \n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    if(k > 0 and k < len(input)):\n        \n        output = []\n        while k > 0:\n            output.append(input[len(input)-1-k])\n            k = k - 1\n        return output\n    else:\n        return False\n        \n    "
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = []\n    for i in range(k-1, -1, -1):\n        result.append(input[i])\n    return result\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 1:\n        print \"k must be a positive integer\"\n        return\n    if k > len(input):\n        print \"k cannot be more than the length of the input array\"\n        return\n    output = input[len(input)-k:]\n    output.extend(input[:len(input)-k])\n    return output\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    d = test_dict\n    new_tup = (test_tup, d)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_dict[index] for index in test_tup)\n    \ndef test_add_dict_to_tuple():\n    assert(add_dict_to_tuple((1,2,3), {'a': 'A', 'b': 'B', 'c': 'C'}) == (1, 2, 3, 'A', 'B', 'C'))\n    assert(add_dict_to_tuple((0,0), {'a': 'A', 'b': 'B', 'c': 'C'}) == (0, 0, 'A', 'B', 'C'))\n    \ntest_add_dict_to_tuple()\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for elem in test_tup:\n        new_tup = new_tup + (elem,)\n    for key in test_dict:\n        new_tup = new_tup + (test_dict[key],)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict.values())\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict.keys():\n        test_tup = test_tup + (test_dict[key],)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if len(test_tup) == 0:\n        return test_tup\n    return (test_tup, test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict.values())\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup[0] + 1, test_tup[1] + test_dict['a'], test_tup[2] + test_dict['b'])\n    return new_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    max_avg = 0\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                max_avg = max(max_avg,cost[0][0])\n            elif i == 0:\n                max_avg = max(max_avg,cost[i][j-1]+cost[i][j])\n            elif j == 0:\n                max_avg = max(max_avg,cost[i-1][j]+cost[i][j])\n            else:\n                max_avg = max(max_avg,cost[i][j-1]+cost[i-1][j],cost[i][j]+cost[i-1][j-1])\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row = len(cost)\n    col = len(cost[0])\n    \n    max_average = 0.0\n    max_path = None\n    \n    for r in range(row):\n        for c in range(col):\n            if r == 0 and c == 0:\n                average = cost[r][c]\n            elif r == 0 and c > 0:\n                average = cost[r][c] + average\n            elif r > 0 and c == 0:\n                average = cost[r][c] + average\n            elif r > 0 and c > 0:\n                average = cost[r][c] + average\n            else:\n                average = average\n            \n            if average > max_average:\n                max_average = average\n                max_path = [r, c]\n                \n    return max_path\n    \nif __name__ == \"__main__\":\n    cost = [[1,2,3],[4,5,6],[7,8,9]]\n    print(maxAverageOfPath(cost))\n    "
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    from collections import deque\n    \n    # convert cost into a dictionary\n    cost = {(i, j): cost[i][j] for i in range(len(cost)) for j in range(len(cost[0]))}\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    \n    max_avg = 0\n    for i in range(rows):\n        for j in range(cols):\n            max_avg = max(max_avg, max_avg_path(cost, i, j))\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    m = len(cost)\n    n = len(cost[0])\n    dp = [[0 for i in range(n)] for j in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[m-1][n-1] / (m+n)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    dp = [[0 for col in range(cols)] for row in range(rows)]\n    dp[0][0] = cost[0][0]\n    for row in range(1, rows):\n        dp[row][0] = cost[row][0] + dp[row-1][0]\n    for col in range(1, cols):\n        dp[0][col] = cost[0][col] + dp[0][col-1]\n    for row in range(1, rows):\n        for col in range(1, cols):\n            dp[row][col] = cost[row][col] + max(dp[row-1][col], dp[row][col-1])\n    max_avg = dp[rows-1][cols-1]\n    for row in range(rows):\n        for col in range(cols):\n            avg = dp[row][col] / (rows*cols)\n            if max_avg < avg:\n                max_avg = avg\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #assume that we start from cell[0][0] and the final destination is cell[N-1][N-1]\n    #we have to compute the average of each path from cell[0][0] to cell[N-1][N-1]\n    #and then compute the maximum average\n    row, col = len(cost), len(cost[0])\n    directions = [[0, 1], [1, 0]] #right, down\n    visited = [[0 for j in range(col)] for i in range(row)]\n    avg = 0.0\n    for i in range(row):\n        for j in range(col):\n            if i == 0 and j == 0:\n                visited[i][j] = 1\n                avg += cost[i][j]\n            else:\n                for d in directions:\n                    x, y = i + d[0], j + d[1]\n                    if x < row and y < col:\n                        if visited[x][y] == 0:\n                            visited[i][j] = 1\n                            avg += cost[i][j]\n                            break\n    return avg / (row * col - visited.count(0))\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    if rows == 0 or cols == 0:\n        return 0\n    if rows == 1 and cols == 1:\n        return cost[0][0]\n    temp = [[0 for _ in xrange(cols)] for _ in xrange(rows)]\n    for row in xrange(rows):\n        temp[row][0] = cost[row][0]\n    for col in xrange(1, cols):\n        temp[0][col] = temp[0][col-1] + cost[0][col]\n    for row in xrange(1, rows):\n        temp[row][0] = temp[row-1][0] + cost[row][0]\n    for row in xrange(1, rows):\n        for col in xrange(1, cols):\n            temp[row][col] = max(temp[row-1][col], temp[row][col-1]) + cost[row][col]\n    max_avg = temp[-1][-1]\n    return max_avg/float(cols*rows)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    best_path = max_average = 0.0\n    for i in xrange(rows):\n        for j in xrange(cols):\n            if i == 0 and j == 0:\n                max_average = max(max_average, cost[i][j])\n                best_path = cost[i][j]\n            elif i == 0:\n                max_average = max(max_average, best_path + cost[i][j])\n                best_path = max(best_path, cost[i][j])\n            elif j == 0:\n                max_average = max(max_average, best_path + cost[i][j])\n                best_path = max(best_path, cost[i][j])\n            else:\n                max_average = max(max_average, best_path + cost[i][j] + min(cost[i-1][j], cost[i][j-1]))\n                best_path = max(best_path, best_path + cost[i][j])\n    return max_average\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    dp = [[0 for i in xrange(cols)] for j in xrange(rows)]\n    \n    for i in xrange(rows):\n        dp[i][0] = cost[i][0]\n    for j in xrange(cols):\n        dp[0][j] = cost[0][j]\n    \n    for i in xrange(1, rows):\n        for j in xrange(1, cols):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[rows - 1][cols - 1] / (rows * cols)\n    \ncost = [[1,3,5,8],\n        [4,2,1,7],\n        [6,4,3,2],\n        [5,6,1,3]]\nprint maxAverageOfPath(cost"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students.keys():\n        if students[student][0] > h and students[student][1] > w:\n            filtered_students[student] = students[student]\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            new_students[key] = value\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key,value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[key] = value\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    list_of_students_with_height_and_weight_above_minimum = []\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            list_of_students_with_height_and_weight_above_minimum.append(student)\n    return list_of_students_with_height_and_weight_above_minimum\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    print \"Filtering data...\"\n    students_new = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            students_new[student] = students[student]\n        else:\n            print \"Filtering data failed! Invalid data.\"\n            return None\n    return students_new\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_filtered = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            students_filtered[student] = data\n    return students_filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        student_height = students[student][0]\n        student_weight = students[student][1]\n        if student_height >= h and student_weight >= w:\n            filtered_students[student] = students[student]\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = {student: height,weight}\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            filtered_students[student] = students[student]\n    return filtered_students\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n = len(nums1)\n    res = 0\n    for i in range(n):\n        if nums1[i] == nums2[i]:\n            res += 1\n    return res\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if nums1 is None or nums2 is None:\n        return 0\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # we can use two dict to save the index\n    dict1 = {}\n    dict2 = {}\n    result = 0\n    for i in xrange(len(nums1)):\n        dict1[nums1[i]] = i\n        dict2[nums2[i]] = i\n    for i in xrange(len(nums1)):\n        if dict1[nums1[i]]!= dict2[nums2[i]]:\n            result += 1\n    return result\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1_nums2 = nums1 * 2\n    output = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums1)):\n            if eq(nums1_nums2[i], nums1_nums2[j]) and i!= j:\n                output += 1\n    return output\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2)\n    return sum([int(nums1[i] == nums2[i]) for i in range(len(nums1))])\ndef can_delete(s1, s2):\n    '''\n    The input is two strings. Determine if we can delete one of the strings to make the other a substring.\n    '''\n    return len(s1) >= len(s2) and s1.startswith(s2)\ndef huffman(strs):\n    '''\n    The input is a list of strings. The list represents a set of words (that are all the same length). We want to use the Huffman Coding method to encode this set of words.\n    '''\n    # To do this, we'll need to sort the strings by length, so that the smallest string is at the front\n    strs = sorted(strs, key=len)\n    # Initialize the root node of the Huffman tree with the first string\n    root = TreeNode(strs[0])\n    # This is the list of strings that we are going to traverse the Huffman tree in order to encode the set of strings\n    traversal = []\n    # For each string, insert it into the traversal list\n    for s in strs:\n        traversal.append(s)\n    # While there are still strings in the traversal list\n    while traversal:\n        # This is the list of nodes that we will traverse in the following loop.\n        traversed = []\n        # For each node in the traversal list, append the left and right nodes to traversed\n        for i in range(0, len(traversal), 2):\n            traversed.append(TreeNode(traversal[i], traversal[i + 1]))\n        # The new node will be the child of the two nodes at the front of traversed\n        node = traversed[0]\n        # For each node in traversed\n        for i in range(1, len(traversed)):\n            # If the nodes are not the same length\n            if not (node.val == traversed[i].val):\n                # If the string is longer than the other, make the longer one the parent\n                if len(traversed[i].val) > len(node.val):\n                    node = traversed[i]\n                # Otherwise, make the shorter one the parent\n                else:\n                    node = TreeNode(node.val + traversed[i].val)\n                    # Add the left and right nodes to traversed\n                    for j in range(0, len(traversed), 2):\n                        if j < i:\n                            node.left = traversed[j]\n                        else:\n                            node.right = traversed[j]\n        # This is the list of nodes that we have traversed. If the parent node has a left child, add it to the traversed list\n        if node.left:\n            traversed.append(node.left)\n        # Otherwise, we have no left child\n        else:\n            # This is the list of nodes that we have traversed. If the parent node has a right child, add it to the traversed list\n            if node.right:\n                traversed.append(node.right)\n            # Otherwise, we have no right child\n            else:\n                traversal.pop(0)\n        # The current node becomes the parent of the new nodes\n        node = traversed[0]\n        # For each node in traversed\n        for i in range(1, len(traversed)):\n            # If the nodes are not the same length\n            if not (node.val == traversed[i].val):\n                # If the string is longer than the other, make the longer one the parent\n                if len(traversed[i].val) > len(node.val):\n                    node = traversed[i]\n                # Otherwise, make the shorter one the parent\n                else:\n                    node = TreeNode(node.val + traversed[i].val)\n                    # Add the left and right nodes to traversed\n                    for j in range(0, len(traversed), 2):\n                        if j < i:\n                            node.left = traversed[j]\n                        else:\n                            node.right = traversed[j]\n    # Return the root node\n    return node\ndef is_anagram(s1, s2):\n    '''\n    The input is two strings. Determine if the strings are anagrams of each other.\n    '''\n    return sorted(s1) == sorted(s2)\ndef count_letters(word):\n    '''\n    The input is a string. Determine how many times each letter occurs in the string.\n    '''\n    return dict(zip(list('abcdefghijklmnopqrstuvwxyz'), [0] * 26))\ndef count_anagrams(strs):\n    '''\n    The input is a list of strings. Determine how many strings from the list are anagrams of each other.\n    '''\n    # This is a helper function that counts how many times each letter occurs in a word\n    def count(word):\n        return count_letters(word)\n    # This is the list of lists of anagrams\n    anagrams = []\n    # For each string\n    for s in strs:\n        # Sort the string\n        s = sorted(s)\n        # Insert the sorted string into the list of lists of anagrams\n        anagrams.append(s)\n    # For each anagram\n    for i in range(0, len(anagrams)):\n        # For each letter\n        for j in range(0, 26):\n            # If the letter occurs in the anagram\n            if count(anagrams[i][0])[j] > 0:\n                # Count the number of times the letter occurs in the anagram\n                count(anagrams[i][0])[j] -= 1\n                # The anagram is not an anagram of itself\n                if i!= 0:\n                    # Check to see if the anagram is an anagram of the previous anagram\n                    if sorted(anagrams[i - 1][0]) == sorted(anagrams[i][0]):\n                        # If so, add one to the number of anagrams\n                        anagrams[i][1] += 1\n    # Return the list of lists of anagrams\n    return anagrams\ndef number_characters(strs):\n    '''\n    The input is a list of strings. Determine how many characters each string contains.\n    '''\n    # This is a helper function that counts how many times each letter occurs in a word\n    def count(word):\n        return count_letters(word)\n    # This is the list of lists of a character\n    characters = []\n    # For each string\n    for s in strs:\n        # Sort the string\n        s = sorted(s)\n        # Insert the sorted string into the list of lists of characters\n        characters.append(s)\n    # For each character\n    for i in range(0, 26):\n        # For each string\n        for j in range(0, len(characters)):\n            # If the character occurs in the string\n            if count(characters[j][0])[i] > 0:\n                # Count the number of times the letter occurs in the string\n                count(characters[j][0])[i] -= 1\n                # The character is not a character of itself\n                if j!= 0:\n                    # Check to see if the character is a character of the previous string\n                    if sorted(characters[j - 1][0]) == sorted(characters[j][0]):\n                        # If so, add one to the number of characters\n                        characters[j][1] += 1\n    # Return the list of lists of characters\n    return characters\ndef contains_pair(strs, pair):\n    '''\n    The input is a list of strings. Determine if the list contains a pair of strings that are anagrams of each other.\n    '''\n    # This is a helper function that counts how many times each letter occurs in a word\n    def count(word):\n        return count_letters(word)\n    # This is the list of lists of anagrams\n    anagrams = []\n    # For each string\n    for s in strs:\n        # Sort the string\n        s = sorted(s)\n        # Insert the sorted string into the list of lists of anagrams\n        anagrams.append(s)\n    # Thi"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef two_sum(nums1, target):\n    '''\n    The input is defined as two lists of the same length. Write a function to find indices where the lists have the same values.\n    '''\n    if len(nums1) < 2:\n        return []\n    else:\n        count = 0\n        for i in range(len(nums1)-1):\n            for j in range(i+1, len(nums1)):\n                if nums1[i] + nums1[j] == target:\n                    return [i, j]\ndef is_all_same(nums):\n    '''\n    Given an array of integers, check if all the elements are the same.\n    '''\n    if len(nums) == 1:\n        return True\n    elif len(nums) == 0:\n        return False\n    else:\n        for i in range(1, len(nums)):\n            if nums[0]!= nums[i]:\n                return False\n        return True\ndef check_permutation(str1, str2):\n    '''\n    Given two strings, write a method to decide if one is a permutation of the other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                return False\n        return True\ndef find_missing_numbers(nums1, nums2):\n    '''\n    Given two arrays, find the missing numbers from both arrays.\n    '''\n    #TODO\ndef find_double_numbers(nums1, nums2):\n    '''\n    Given two arrays, find the numbers that occur twice in both arrays.\n    '''\n    #TODO\ndef find_duplicate_numbers(nums):\n    '''\n    Given an array of integers, find all the elements that appear more than once.\n    '''\n    #TODO\ndef get_first_unique_number(nums):\n    '''\n    Given an array of integers, find the first unique integer.\n    '''\n    #TODO\ndef sort_array(nums):\n    '''\n    Given an array of integers, sort the array in ascending order.\n    '''\n    #TODO\ndef remove_duplicate_numbers(nums):\n    '''\n    Given an array of integers, remove duplicate numbers and return the new length.\n    '''\n    #TODO\ndef get_valid_parentheses(s):\n    '''\n    Given a string, find the longest valid parentheses substring.\n    '''\n    #TODO\ndef is_valid_parentheses(s):\n    '''\n    Given a string, find if the string is valid parentheses.\n    '''\n    #TODO\ndef reverse_words(s):\n    '''\n    Given a string, reverse all the words within the string.\n    '''\n    #TODO\ndef reverse_words_ii(s):\n    '''\n    Given a string, reverse all words within the string.\n    '''\n    #TODO\ndef remove_duplicate_letters(s):\n    '''\n    Given a string, remove duplicate letters.\n    '''\n    #TODO\ndef get_reverse_complement(s):\n    '''\n    Given a DNA string, return the reverse complement.\n    '''\n    #TODO\ndef get_hamming_distance(str1, str2):\n    '''\n    Given two strings, find the Hamming distance between them.\n    '''\n    #TODO\ndef find_first_k_biggest(nums, k):\n    '''\n    Given a list of positive integers, find the first k integers that sum up to a positive integer.\n    '''\n    #TODO\ndef sort_scores(scores, k):\n    '''\n    Given a list of numbers, sort the list in descending order.\n    '''\n    #TODO\ndef get_max_consecutive_ones(nums):\n    '''\n    Given a list of numbers, find the maximum number of consecutive 1s in the list.\n    '''\n    #TODO\ndef get_uncommon_characters(str1, str2):\n    '''\n    Given two strings, find the uncommon characters between them.\n    '''\n    #TODO\ndef sum_of_divisors(n):\n    '''\n    Given a positive integer, find the sum of its divisors.\n    '''\n    #TODO\ndef get_island_perimeter(grid):\n    '''\n    Given a grid with values, calculate the perimeter of the island in the grid.\n    '''\n    #TODO\ndef check_paranthesis(s):\n    '''\n    Given a string, find if the string contains balanced parantheses.\n    '''\n    #TODO\ndef find_paths(m, n, grid):\n    '''\n    Given a grid with values, find all the paths from the top-left to the bottom-right.\n    '''\n    #TODO\ndef find_fruits_partition(nums):\n    '''\n    Given an integer array, find two integers in the array such that the product of their elements is equal to the target number.\n    '''\n    #TODO\ndef find_smallest_range(nums, k):\n    '''\n    Given an array of integers, find the smallest range between two numbers in the array which will contain the maximum number of integers.\n    '''\n    #TODO\ndef find_smallest_range_ii(nums, k):\n    '''\n    Given an array of integers, find the smallest range between two numbers in the array which will contain the maximum number of integers.\n    '''\n    #TODO\ndef find_smallest_range_iii(nums, k):\n    '''\n    Given an array of integers, find the smallest range between two numbers in the array which will contain the maximum number of integers.\n    '''\n    #TODO\ndef find_shortest_path(graph, start, end, path=[]):\n    '''\n    Given an undirected graph and two nodes, find the shortest path between the given nodes.\n    '''\n    #TODO\ndef find_shortest_path_ii(graph, start, end, path=[]):\n    '''\n    Given an undirected graph and two nodes, find the shortest path between the given nodes.\n    '''\n    #TODO\ndef find_shortest_path_iii(graph, start, end, path=[]):\n    '''\n    Given an undirected graph and two nodes, find the shortest path between the given nodes.\n    '''\n    #TODO\ndef bfs(graph, start, end):\n    '''\n    Given a directed graph, find the shortest path between the given nodes.\n    '''\n    #TODO\ndef bfs_ii(graph, start, end, path=[]):\n    '''\n    Given a directed graph, find the shortest path between the given nodes.\n    '''\n    #TODO\ndef bfs_iii(graph, start, end, path=[]):\n    '''\n    Given a directed graph, find the shortest path between the given nodes.\n    '''\n    #TODO\ndef is_valid_path(graph, path):\n    '''\n    Given a directed graph, and a path, check if the path is valid or not.\n    '''\n    #TODO\ndef find_valid_paths(graph, start, end, path=[]):\n    '''\n    Given a directed graph, find all the paths from start to end.\n    '''\n    #TODO\ndef count_triplets_that_can_form_triangle(nums):\n    '''\n    Given an array of integers, find the number of triplets that can be formed using these integers.\n    '''\n    #TODO\ndef first_triplet_with_sum(nums, target):\n    '''\n    Given an array of integers, find the first triplet of indices (i, j, k) such tha"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    return sum(map(eq, nums1, nums2))\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums1)):\n            if eq(nums1[i], nums2[j]):\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert isinstance(base, int)\n    assert isinstance(power, int)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    if power == 0:\n        return 1\n    elif power < 0:\n        return 0\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    import math\n    if power < 0:\n        return 0\n    if power == 0:\n        return 1\n    if power == 1:\n        return base\n    digits = math.floor(math.log10(power) + 1)\n    result = 0\n    for digit in range(digits):\n        result += base ** (power-digit-1)\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    else:\n        return base * power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    power_copy = power\n    while power_copy > 0:\n        total += (base ** power_copy % 10)\n        power_copy -= 1\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    res = 0\n    for i in range(0, power+1):\n        res += base**i\n    return res\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Write your code here\n    # O(n) time, O(n) space\n    if power == 0:\n        return 0\n    if power == 1:\n        return base\n    else:\n        return base * power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    while power > 0:\n        digit = base ** power\n        power_sum += digit % 10\n        power = digit // 10\n    return power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # base_power_sum = 0\n    # while power >= 0:\n    #     # print(base**power)\n    #     base_power_sum += (base**power) % 10\n    #     power -= 1\n    # return base_power_sum\n    return sum(int(digit)**power for digit in str(base))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    start = -1\n    for match in re.finditer('\\\".*?\\\"', text1):\n        start = match.start()\n        if start >= 0:\n            print(\"Start=%d, End=%d, %s\" % (start, match.end(), text1[start:match.end()]))\n    return text1[start:match.end()]\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    x = re.findall(r'\\\"(.*?)\\\"', text1)\n    print(\"Output: \",x)\ndef replace_quotation(text2):\n    '''\n    Write a function to replace quotation marks \" \" with the \"''\" double quotation marks\n    '''\n    z = re.sub(r'\\\"(.*?)\\\"', '\\'\\'', text2)\n    print(\"Output: \",z)\ndef replace_single_quotation(text3):\n    '''\n    Write a function to replace single quotation marks \" \" with the \"''\" double quotation marks\n    '''\n    y = re.sub(r'\\'(.*?)\\'', '\"', text3)\n    print(\"Output: \",y)\ndef find_alpha(text4):\n    '''\n    Write a function to extract alphabets and numbers from the given string and print them in separate lines.\n    '''\n    a = re.findall(r'([a-zA-Z0-9]+)', text4)\n    print(\"Output: \",a)\ndef find_digit(text5):\n    '''\n    Write a function to extract digits from the given string and print them in separate lines.\n    '''\n    d = re.findall(r'([0-9]+)', text5)\n    print(\"Output: \",d)\ndef find_alpha_numerics(text6):\n    '''\n    Write a function to extract alphabets, digits and numerics from the given string and print them in separate lines.\n    '''\n    b = re.findall(r'([a-zA-Z0-9]+)', text6)\n    print(\"Output: \",b)\ndef find_digit_numerics(text7):\n    '''\n    Write a function to extract digits, numerics and alphabets from the given string and print them in separate lines.\n    '''\n    e = re.findall(r'([0-9]+)', text7)\n    print(\"Output: \",e)\ndef extract_string(text8):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    c = re.findall(r'[a-zA-Z0-9_]+(?=\")', text8)\n    print(\"Output: \",c)\ndef extract_string_quotation(text9):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    j = re.findall(r'\\\"(.*?)\\\"', text9)\n    print(\"Output: \",j)\ndef extract_string_single_quotation(text10):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    h = re.findall(r'\\'(.*?)\\'', text10)\n    print(\"Output: \",h)\ndef extract_string_digit(text11):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    i = re.findall(r'\\d+(?=\\s)', text11)\n    print(\"Output: \",i)\ndef extract_string_alpha_numerics(text12):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    k = re.findall(r'[a-zA-Z0-9]+(?=\\s)', text12)\n    print(\"Output: \",k)\ndef extract_string_alpha_numerics_quotation(text13):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    l = re.findall(r'\\\"(.*?)\\\"', text13)\n    print(\"Output: \",l)\ndef extract_string_alpha_numerics_single_quotation(text14):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    m = re.findall(r'\\'(.*?)\\'', text14)\n    print(\"Output: \",m)\ndef extract_string_alpha_numerics_digit(text15):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    n = re.findall(r'\\d+(?=\\s)', text15)\n    print(\"Output: \",n)\ndef extract_string_alpha_numerics_digit_quotation(text16):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    o = re.findall(r'\\\"(.*?)\\\"', text16)\n    print(\"Output: \",o)\ndef extract_string_alpha_numerics_digit_single_quotation(text17):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    p = re.findall(r'\\'(.*?)\\'', text17)\n    print(\"Output: \",p)\ndef extract_string_alpha_numerics_digit_alpha_numerics(text18):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    q = re.findall(r'[a-zA-Z0-9]+(?=\\s)', text18)\n    print(\"Output: \",q)\ndef extract_string_alpha_numerics_digit_alpha_numerics_quotation(text19):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    r = re.findall(r'\\\"(.*?)\\\"', text19)\n    print(\"Output: \",r)\ndef extract_string_alpha_numerics_digit_alpha_numerics_single_quotation(text20):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    s = re.findall(r'\\'(.*?)\\'', text20)\n    print(\"Output: \",s)\ndef extract_string_alpha_numerics_digit_alpha_numerics_digit(text21):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    t = re.findall(r'\\d+(?=\\s)', text21)\n    print(\"Output: \",t)\ndef extract_string_alpha_numerics_digit_alpha_numerics_digit_quotation(text22):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    u = re.findall(r'\\\"(.*?)\\\"', text22)\n    print(\"Output: \",u)\ndef extract_string_alpha_numerics_digit_alpha_numerics_digit_single_quotation(text23):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    v = re.findall(r'\\'(.*?)\\'', text23)\n    print(\"Output: \",v)\ndef extract_string_alpha_numerics_digit_alpha_numerics_digit_alpha_numerics(text24):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    w = re.findall(r'[a-zA-Z0-9]+(?=\\s)', text24)\n    print(\"Output: \",w)\ndef extract_string_alpha_numerics_digit_alpha_numerics_digit_alpha_numerics_quotation(text25):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    x = re.findall(r'\\\"(.*?)\\\"', text25)\n    print(\"Output: \",x)\ndef extract_string_alpha_numerics_digit_alpha_numerics_digit_alpha_numerics_single_quotation(text26):\n    '''\n    Write a function to extract string from the given string and print them in separate lines.\n    '''\n    y = re.findall(r'\\'(.*?)\\'', text26)\n    print(\"Output"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2=text1.strip()\n    regex = re.compile(r'\"[^\"]*\"|\\'.\\'|\\\"[^\\\"]*\\\"')\n    test_str=regex.findall(text2)\n    print(test_str)\n    return test_str\ndef combine_str(str1, str2, str3):\n    '''\n    Write a function to combine two strings and return the combined string.\n    '''\n    result=str1+str2+str3\n    return result\ndef solution(string):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = re.compile(r'\"[^\"]*\"|\\'.\\'|\\\"[^\\\"]*\\\"')\n    test_str=regex.findall(string)\n    print(test_str)\n    return test_str\ndef print_c(c):\n    print(\"\\n\")\n    print(c)\ndef return_c(c):\n    return print_c(c)\ndef is_null(c):\n    '''\n    Write a function to check if a string is null or not.\n    '''\n    if c == 'NULL':\n        return True\n    else:\n        return False\ndef is_null(c):\n    '''\n    Write a function to check if a string is null or not.\n    '''\n    if c == 'NULL':\n        return True\n    else:\n        return False\ndef is_blank(c):\n    '''\n    Write a function to check if a string is blank or not.\n    '''\n    if c == \"\":\n        return True\n    else:\n        return False\ndef is_blank(c):\n    '''\n    Write a function to check if a string is blank or not.\n    '''\n    if c == \"\":\n        return True\n    else:\n        return False\ndef is_white(c):\n    '''\n    Write a function to check if a string is white space or not.\n    '''\n    if c == \" \":\n        return True\n    else:\n        return False\ndef is_white(c):\n    '''\n    Write a function to check if a string is white space or not.\n    '''\n    if c == \" \":\n        return True\n    else:\n        return False\ndef is_digit(c):\n    '''\n    Write a function to check if a string is digit or not.\n    '''\n    if c.isdigit():\n        return True\n    else:\n        return False\ndef is_digit(c):\n    '''\n    Write a function to check if a string is digit or not.\n    '''\n    if c.isdigit():\n        return True\n    else:\n        return False\ndef is_alphabet(c):\n    '''\n    Write a function to check if a string is alphabet or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_alphabet(c):\n    '''\n    Write a function to check if a string is alphabet or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_lowercase(c):\n    '''\n    Write a function to check if a string is lowercase or not.\n    '''\n    if c.islower():\n        return True\n    else:\n        return False\ndef is_lowercase(c):\n    '''\n    Write a function to check if a string is lowercase or not.\n    '''\n    if c.islower():\n        return True\n    else:\n        return False\ndef is_uppercase(c):\n    '''\n    Write a function to check if a string is uppercase or not.\n    '''\n    if c.isupper():\n        return True\n    else:\n        return False\ndef is_uppercase(c):\n    '''\n    Write a function to check if a string is uppercase or not.\n    '''\n    if c.isupper():\n        return True\n    else:\n        return False\ndef is_alpha(c):\n    '''\n    Write a function to check if a string is alpha or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_alpha(c):\n    '''\n    Write a function to check if a string is alpha or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_alnum(c):\n    '''\n    Write a function to check if a string is alnum or not.\n    '''\n    if c.isalnum():\n        return True\n    else:\n        return False\ndef is_alnum(c):\n    '''\n    Write a function to check if a string is alnum or not.\n    '''\n    if c.isalnum():\n        return True\n    else:\n        return False\ndef is_letter(c):\n    '''\n    Write a function to check if a string is letter or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_letter(c):\n    '''\n    Write a function to check if a string is letter or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_space(c):\n    '''\n    Write a function to check if a string is space or not.\n    '''\n    if c == \" \":\n        return True\n    else:\n        return False\ndef is_space(c):\n    '''\n    Write a function to check if a string is space or not.\n    '''\n    if c == \" \":\n        return True\n    else:\n        return False\ndef is_digit(c):\n    '''\n    Write a function to check if a string is digit or not.\n    '''\n    if c.isdigit():\n        return True\n    else:\n        return False\ndef is_digit(c):\n    '''\n    Write a function to check if a string is digit or not.\n    '''\n    if c.isdigit():\n        return True\n    else:\n        return False\ndef is_alnum(c):\n    '''\n    Write a function to check if a string is alnum or not.\n    '''\n    if c.isalnum():\n        return True\n    else:\n        return False\ndef is_alnum(c):\n    '''\n    Write a function to check if a string is alnum or not.\n    '''\n    if c.isalnum():\n        return True\n    else:\n        return False\ndef is_alphabet(c):\n    '''\n    Write a function to check if a string is alphabet or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_alphabet(c):\n    '''\n    Write a function to check if a string is alphabet or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_lowercase(c):\n    '''\n    Write a function to check if a string is lowercase or not.\n    '''\n    if c.islower():\n        return True\n    else:\n        return False\ndef is_lowercase(c):\n    '''\n    Write a function to check if a string is lowercase or not.\n    '''\n    if c.islower():\n        return True\n    else:\n        return False\ndef is_uppercase(c):\n    '''\n    Write a function to check if a string is uppercase or not.\n    '''\n    if c.isupper():\n        return True\n    else:\n        return False\ndef is_uppercase(c):\n    '''\n    Write a function to check if a string is uppercase or not.\n    '''\n    if c.isupper():\n        return True\n    else:\n        return False\ndef is_letter(c):\n    '''\n    Write a function to check if a string is letter or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_letter(c):\n    '''\n    Write a function to check if a string is letter or not.\n    '''\n    if c"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex=r'\"(.*?)\"'\n    result=re.findall(regex,text1)\n    print result\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    reg = re.compile(r'\\\"(.*?)\\\"')\n    return re.findall(reg, text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation = re.findall(r'\\\"(.+?)\\\"', text1)\n    return quotation\ndef extract_years(text2):\n    '''\n    Write a function to extract years (four digits) in the string.\n    '''\n    year = re.findall(r'\\d{4}',text2)\n    return year\ndef extract_emails(text3):\n    '''\n    Write a function to extract email addresses in the string.\n    '''\n    email = re.findall(r'[a-zA-Z0-9._%-]+@[a-zA-Z0-9._%-]+.[a-zA-Z]{2,4}',text3)\n    return email\ndef extract_phone_number(text4):\n    '''\n    Write a function to extract phone number in the string.\n    '''\n    phone = re.findall(r'(?<!\\d)1?\\d{10}(?!\\d)',text4)\n    return phone\ndef extract_all_numbers(text5):\n    '''\n    Write a function to extract all numbers in the string.\n    '''\n    numbers = re.findall(r'[0-9]+',text5)\n    return numbers\ndef extract_words(text6):\n    '''\n    Write a function to extract words from the string.\n    '''\n    words = re.findall(r'[a-zA-Z]+',text6)\n    return words\ndef extract_percentage(text7):\n    '''\n    Write a function to extract percentage values from the string.\n    '''\n    percents = re.findall(r'[1-9][0-9]*[0-9][0-9]?%',text7)\n    return percents\ndef extract_months(text8):\n    '''\n    Write a function to extract month names from the string.\n    '''\n    months = re.findall(r'[a-zA-Z]+',text8)\n    return months\ndef extract_dates(text9):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    dates = re.findall(r'[0-9][0-9]?/[0-9][0-9]?/[0-9][0-9][0-9][0-9]',text9)\n    return dates\ndef extract_space(text10):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    space = re.findall(r'[\\s]+',text10)\n    return space\ndef extract_single_quotes(text11):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    single_quotes = re.findall(r'\\'[a-zA-Z0-9_]+',text11)\n    return single_quotes\ndef extract_double_quotes(text12):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    double_quotes = re.findall(r'\\\"[a-zA-Z0-9_]+',text12)\n    return double_quotes\ndef extract_dollars(text13):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    dollars = re.findall(r'\\$[1-9][0-9]*',text13)\n    return dollars\ndef extract_l_sign(text14):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    l_sign = re.findall(r'[lL]',text14)\n    return l_sign\ndef extract_r_sign(text15):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    r_sign = re.findall(r'[rR]',text15)\n    return r_sign\ndef extract_star_sign(text16):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    star_sign = re.findall(r'[*]',text16)\n    return star_sign\ndef extract_slash_sign(text17):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    slash_sign = re.findall(r'[/]',text17)\n    return slash_sign\ndef extract_s_sign(text18):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    s_sign = re.findall(r'[sS]',text18)\n    return s_sign\ndef extract_t_sign(text19):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    t_sign = re.findall(r'[tT]',text19)\n    return t_sign\ndef extract_w_sign(text20):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    w_sign = re.findall(r'[wW]',text20)\n    return w_sign\ndef extract_d_sign(text21):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    d_sign = re.findall(r'[dD]',text21)\n    return d_sign\ndef extract_f_sign(text22):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    f_sign = re.findall(r'[fF]',text22)\n    return f_sign\ndef extract_g_sign(text23):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    g_sign = re.findall(r'[gG]',text23)\n    return g_sign\ndef extract_h_sign(text24):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    h_sign = re.findall(r'[hH]',text24)\n    return h_sign\ndef extract_j_sign(text25):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    j_sign = re.findall(r'[jJ]',text25)\n    return j_sign\ndef extract_k_sign(text26):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    k_sign = re.findall(r'[kK]',text26)\n    return k_sign\ndef extract_m_sign(text27):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    m_sign = re.findall(r'[mM]',text27)\n    return m_sign\ndef extract_n_sign(text28):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    n_sign = re.findall(r'[nN]',text28)\n    return n_sign\ndef extract_o_sign(text29):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    o_sign = re.findall(r'[oO]',text29)\n    return o_sign\ndef extract_p_sign(text30):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    p_sign = re.findall(r'[pP]',text30)\n    return p_sign\ndef extract_q_sign(text31):\n    '''\n    Write a function to extract dates (month and year) from the string.\n    '''\n    q_sign = re.findall(r'[qQ]',text31)\n    return q_sign\ndef extract_r_sign(text32):\n    '''\n    Write "
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = re.compile('\"(.*?)\"')\n    return regex.findall(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = r\"\\\"(.*?)\\\"\"\n    return re.findall(regex, text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1=text1.replace(\"\\\"\",\"\").replace(\"'\",\"\")\n    regex = re.compile(r'\\\"(.*?)\\\"')\n    matches = regex.findall(text1)\n    return matches\ndef extract_paragraph(text2):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2=text2.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'\\s(.*?)\\s')\n    matches = regex.findall(text2)\n    return matches\ndef extract_words(text3):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text3=text3.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'\\s(.*?)\\s')\n    matches = regex.findall(text3)\n    return matches\ndef extract_sentence(text4):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text4=text4.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'\\s(.*?)\\s')\n    matches = regex.findall(text4)\n    return matches\ndef extract_number(text5):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text5=text5.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'\\s(.*?)\\s')\n    matches = regex.findall(text5)\n    return matches\ndef extract_digit(text6):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text6=text6.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'\\s(.*?)\\s')\n    matches = regex.findall(text6)\n    return matches\ndef extract_title(text7):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text7=text7.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'(.*?)\\\"')\n    matches = regex.findall(text7)\n    return matches\ndef extract_time(text8):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text8=text8.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'(.*?)\\s')\n    matches = regex.findall(text8)\n    return matches\ndef extract_characters(text9):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text9=text9.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'(.*?)\\s')\n    matches = regex.findall(text9)\n    return matches\ndef extract_time2(text10):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text10=text10.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'(.*?)\\s')\n    matches = regex.findall(text10)\n    return matches\ndef extract_date(text11):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text11=text11.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'(.*?)\\s')\n    matches = regex.findall(text11)\n    return matches\ndef extract_month(text12):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text12=text12.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'(.*?)\\s')\n    matches = regex.findall(text12)\n    return matches\ndef extract_year(text13):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text13=text13.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'(.*?)\\s')\n    matches = regex.findall(text13)\n    return matches\ndef extract_zipcode(text14):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text14=text14.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'(.*?)\\s')\n    matches = regex.findall(text14)\n    return matches\ndef extract_phone_number(text15):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text15=text15.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'\\s(.*?)\\s')\n    matches = regex.findall(text15)\n    return matches\ndef extract_email(text16):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text16=text16.replace(\"\\n\",\" \").replace(\"\\r\",\" \").replace(\"\\t\",\" \").replace(\"\\f\",\" \").replace(\"\\v\",\" \").replace(\"\\b\",\" \").replace(\"\\\"\",\" \")\n    regex = re.compile(r'\\s(.*?)\\s')\n    matches = regex.findall(text16)\n    return matches\ndef extract_url(text17):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text17=text17.replace(\"\\n\","
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\".+?\"',text1)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = len(test_tup)\n    return tuple(test_tup[i]*test_tup[i+1] for i in range(l-1))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    length = len(test_tup)\n    out = tuple(test_tup[i] * test_tup[i+1] for i in xrange(length-1))\n    return out\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) <= 1:\n        return test_tup\n    else:\n        return tuple([test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1)])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    for i in range(len(test_tup)-1):\n        test_tup[i] *= test_tup[i+1]\n    return test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for index, item in enumerate(test_tup):\n        new_tup = new_tup + (item * test_tup[index + 1], )\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n):\n        if i == 0:\n            result.append(test_tup[i])\n        else:\n            result.append(test_tup[i] * result[i-1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(a * b for a, b in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    list_of_list = list(test_tup)\n    list_of_list.sort()\n    for i in range(len(list_of_list)-1):\n        list_of_list[i] = list_of_list[i] * list_of_list[i+1]\n    return tuple(list_of_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result = result + (test_tup[i],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([a * b for a, b in zip(test_tup[:-1], test_tup[1:])])\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i + j for i, j in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)<len(lst2):\n        return lst1+lst2\n    else:\n        return lst2+lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) < len(lst2):\n        lst1,lst2 = lst2,lst1\n    lst1 += [0] * (len(lst2) - len(lst1))\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a_i + b_i for a_i, b_i in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_sum = []\n    if len(lst1)!= len(lst2):\n        raise ValueError('Lists are not of the same length')\n    for i in range(0,len(lst1)):\n        lst_sum.append(lst1[i] + lst2[i])\n    return lst_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [lst1[i] + lst2[i] for i in range(len(lst1))]\n    else:\n        return []\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    length = max(len(lst1),len(lst2))\n    lst1,lst2 = lst1[:length] if len(lst1) > length else lst1*(length//len(lst1)) + lst1[:length%len(lst1)],lst2[:length] if len(lst2) > length else lst2*(length//len(lst2)) + lst2[:length%len(lst2)]\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    else:\n        return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(k for k, _ in groupby(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        yield list(g)\n        \ndef key_based_sort(s, f):\n    '''\n    Write a function key_based_sort(s, f) that accepts a string s and a function f that returns a number,\n    and returns a new string in which the order of the letters is determined by the numerical value that f(x) returns for each letter x in s.\n    Ascending order should be used.\n    '''\n    return ''.join(sorted(s, key=lambda x:f(x)))\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Check if the list is empty or if it only contains one element.\n    if not nums or len(nums) == 1:\n        return nums\n    # Remove the first element from the list.\n    nums.pop(0)\n    # Initialize a new list to store the consecutive duplicates.\n    new_nums = []\n    # Initialize a counter to count the consecutive duplicates.\n    count = 0\n    # Iterate over the elements of the list and store them in new_nums if\n    # they are not consecutive duplicates.\n    for i, elem in enumerate(nums):\n        # If this is not the first element and if the last element is also\n        # not consecutive, add the count to the counter and append it to the\n        # new_nums list.\n        if i > 0 and i < len(nums) - 1 and nums[i-1]!= nums[i]:\n            count += 1\n            new_nums.append(count)\n        # If this is the first element, add it to the new_nums list.\n        elif i == 0:\n            new_nums.append(elem)\n        # If this is the last element, add a consecutive duplicate of this\n        # element to the new_nums list.\n        elif i == len(nums) - 1:\n            new_nums.append(elem)\n        # If this is the middle element, add the consecutive duplicate of\n        # this element to the new_nums list.\n        else:\n            new_nums.append(elem)\n    # Return the new_nums list.\n    return new_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # groupby_obj = groupby(nums)\n    # for key, group in groupby_obj:\n    #     print(key, list(group))\n    print(list(groupby(nums)))\n    # for key, group in groupby(nums):\n    #     print(key, list(group))\n    \n    # print(list(groupby(nums)))\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if nums is None:\n        return 0\n    if len(nums) < 2:\n        return len(nums)\n    for i in range(len(nums)-1):\n        if nums[i]!= nums[i+1]:\n            nums[i+1] = nums[i]\n    return len(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(enumerate(nums), lambda i_x: i_x[0] - i_x[1]):\n        yield list(map(itemgetter(1), g))\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    previous_number = None\n    result = []\n    for number in nums:\n        if number!= previous_number:\n            result.append(number)\n        previous_number = number\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_list = []\n    for k, g in groupby(nums):\n        new_list.append(len(list(g)))\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] == nums[i+1]:\n            del nums[i]\n        else:\n            i += 1\n    return nums\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def area_conical_section(r,h):\n        return math.pi * (r**2) * (h/3.0)\n    def lateral_surface_area_cylinder(r,h):\n        return (2*math.pi)*r*(r+h)\n    def lateral_surface_area_conical_section(r,h):\n        return (2*math.pi)*r*(r+h)\n    def lateral_surface_area_sphere(r,h):\n        return (4*math.pi) * r * r\n    def lateral_surface_area_disk(r,h):\n        return (2*math.pi) * r * r * math.pi\n    def lateral_surface_area_spheroid(r,h):\n        return (4*math.pi) * r * r * r * (r/3)\n    def lateral_surface_area_cone(r,h):\n        return area_conical_section(r,h) + lateral_surface_area_sphere(r,h) + lateral_surface_area_cylinder(r,h)\n    print lateral_surface_area_cylinder(r,h)\n    print lateral_surface_area_conical_section(r,h)\n    print lateral_surface_area_sphere(r,h)\n    print lateral_surface_area_disk(r,h)\n    print lateral_surface_area_spheroid(r,h)\n    print lateral_surface_area_cone(r,h)\n    print area_conical_section(r,h)\n    print lateral_surface_area_cone(r,h)\n    print lateral_surface_area_cylinder(r,h)\n    print lateral_surface_area_sphere(r,h)\n    print lateral_surface_area_disk(r,h)\n    print lateral_surface_area_spheroid(r,h)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if(h<0):\n        return -1\n    else:\n        return math.pi * (r**2) * (1 + math.sqrt(1 + (h/r)**2))\ndef lateralsurface_circular(r,h):\n    '''\n    Write a function to find the lateral surface area of a circular shell given radius r and the height h.\n    '''\n    if(h<0):\n        return -1\n    else:\n        return math.pi * (r**2) * math.sqrt(1 + (h/r)**2)\ndef lateralsurface_ellipsoidal(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a ellipsoidal shell given the lengths of the semi-axes a, b and the height h.\n    '''\n    if(a<0 or b<0):\n        return -1\n    else:\n        return math.pi * (a**2) * math.sqrt(1 + (b/a)**2) + math.pi * (b**2) * math.sqrt(1 + (h/b)**2)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    if(h<0):\n        return -1\n    else:\n        return math.pi * (r**2) * (1 + math.sqrt(1 + (h/r)**2))\ndef volume_circular(r,h):\n    '''\n    Write a function to find the volume of a circular shell given radius r and the height h.\n    '''\n    if(h<0):\n        return -1\n    else:\n        return math.pi * (r**2) * math.sqrt(1 + (h/r)**2)\ndef volume_ellipsoidal(a,b,h):\n    '''\n    Write a function to find the volume of a ellipsoidal shell given the lengths of the semi-axes a, b and the height h.\n    '''\n    if(a<0 or b<0):\n        return -1\n    else:\n        return math.pi * (a**2) * math.sqrt(1 + (b/a)**2) + math.pi * (b**2) * math.sqrt(1 + (h/b)**2)\ndef volume_trapezoidal(a,b,h):\n    '''\n    Write a function to find the volume of a trapezoidal shell given the lengths of the semi-axes a, b and the height h.\n    '''\n    if(a<0 or b<0):\n        return -1\n    else:\n        return 0.5 * (a + b) * (1 + math.sqrt(1 + ((b - h)/(a - b))**2))\ndef volume_rectangular(a,b,h):\n    '''\n    Write a function to find the volume of a rectangular shell given the lengths of the semi-axes a, b and the height h.\n    '''\n    if(a<0 or b<0):\n        return -1\n    else:\n        return a * b * h\ndef apothem(r):\n    '''\n    Write a function to find the apothem of a cone given radius r.\n    '''\n    if(r<0):\n        return -1\n    else:\n        return r * math.sqrt(1 + (r/r)**2)\ndef apothem_circular(r):\n    '''\n    Write a function to find the apothem of a circular shell given radius r.\n    '''\n    if(r<0):\n        return -1\n    else:\n        return r * math.sqrt(1 + (r/r)**2)\ndef apothem_ellipsoidal(a,b):\n    '''\n    Write a function to find the apothem of a ellipsoidal shell given the lengths of the semi-axes a, b.\n    '''\n    if(a<0 or b<0):\n        return -1\n    else:\n        return a * math.sqrt(1 + (b/a)**2)\ndef apothem_trapezoidal(a,b,h):\n    '''\n    Write a function to find the apothem of a trapezoidal shell given the lengths of the semi-axes a, b and the height h.\n    '''\n    if(a<0 or b<0):\n        return -1\n    else:\n        return a * math.sqrt(1 + (b/a)**2) + b * math.sqrt(1 + ((b - h)/(a - b))**2)\ndef apothem_rectangular(a,b,h):\n    '''\n    Write a function to find the apothem of a rectangular shell given the lengths of the semi-axes a, b and the height h.\n    '''\n    if(a<0 or b<0):\n        return -1\n    else:\n        return 0.5 * (a + b) * (1 + math.sqrt(1 + ((b - h)/(a - b))**2))\ndef perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle given radius r.\n    '''\n    if(r<0):\n        return -1\n    else:\n        return 2 * math.pi * r\ndef perimeter_circular(r):\n    '''\n    Write a function to find the perimeter of a circular shell given radius r.\n    '''\n    if(r<0):\n        return -1\n    else:\n        return 2 * math.pi * r\ndef perimeter_ellipsoidal(a,b):\n    '''\n    Write a function to find the perimeter of an ellipsoidal shell given the lengths of the semi-axes a, b.\n    '''\n    if(a<0 or b<0):\n        return -1\n    else:\n        return 2 * math.pi * a + 2 * math.pi * b\ndef perimeter_trapezoidal(a,b,h):\n    '''\n    Write a function to find the perimeter of a trapezoidal shell given the lengths of the semi-axes a, b and the height h.\n    '''\n    if(a<0 or b<0):\n        return -1\n    else:\n        return 2 * math.pi * (a + b) + 2 * math.pi * (b - h)\ndef perimeter_rectangular(a,b,h):\n    '''\n    Write a function to find the perimeter of a rectangular shell given the lengths of the semi-axes a, b and the height h.\n    '''\n    if(a<0 or b<0):\n        return -1\n    else:\n        return 4 * (a + b) + 2 * (a - b) + 2 * (b - h)\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    if(h<0):\n        return -1\n    else:\n        return math.pi * r**2 * math.sqrt(1 + (h/r)**2)\ndef area_circular(r,h):\n    '''\n    Write a function to find the area of a circular shell given radius r and the height h.\n    '''\n    if(h<0):\n        return -1\n    else:\n        return math.pi * r**2 * math.sqrt(1 + (h/r)**2)\ndef area_ellipsoidal(a,b,h):\n    '''\n    Write a function to find the area of a ellipsoidal shell given the lengths of the semi-axes a, b and the height h.\n    '''\n    if(a<0 or b<0):\n        return -1\n    else:\n        return math.pi * (a**2) * math.sqrt(1 + (b/a)**2) + math.pi * (b**2) * math.sqrt(1 + (h/b)**2)\ndef area_trapezoidal(a,b,h):\n    '''\n    Write a function to find the area of a trapezoidal shell given the lengths of the semi-axes a, b and the height h.\n    '''\n    if(a"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*(r+h)\n    \n    # or\n    # return math.pi*(r**2+(h**2))\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # radius = float(raw_input('Enter radius: '))\n    # height = float(raw_input('Enter height: '))\n    #print(r,h)\n    area_cone = math.pi * r**2 * h/3\n    return area_cone\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * r + math.pi * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*(3*r**2-r**4)/3\n    t=(r**2)*math.asin(h/r)\n    return s-t\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #assert 0<r<=h\n    #assert math.pi/3<=angle<=math.pi/2\n    pi=math.pi\n    x=math.pow(r,2)*math.pow(pi,2)/4\n    y=math.pow(r,2)*math.pow(pi,2)/4\n    z=math.pow(r,2)*pi*h/2\n    surface=x+y+z\n    return surface\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    #assert 0<r<=h\n    #assert math.pi/3<=angle<=math.pi/2\n    pi=math.pi\n    v=pi*r**2*h\n    return v\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle given radius r.\n    '''\n    #assert 0<r<=math.pi/2\n    area=math.pi*r**2\n    return area\ndef surfacearea_of_circle(r):\n    '''\n    Write a function to find the surface area of a circle given radius r.\n    '''\n    #assert 0<r<=math.pi/2\n    area=area_of_circle(r)\n    return area\ndef area_of_square(a):\n    '''\n    Write a function to find the area of a square given length a.\n    '''\n    #assert 0<a<=math.pi/2\n    area=math.pi*a**2/4\n    return area\ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    #assert 0<r<=math.pi/2\n    pi=math.pi\n    v=4/3*pi*r**3\n    return v\ndef surfacearea_of_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given radius r.\n    '''\n    #assert 0<r<=math.pi/2\n    pi=math.pi\n    area=4*pi*r**2\n    return area\ndef area_of_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder given radius r and the height h.\n    '''\n    #assert 0<r<=h\n    pi=math.pi\n    area=pi*r*(r+h)\n    return area\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    #assert 0<r<=h\n    pi=math.pi\n    v=pi*r*r*h/3\n    return v\ndef average(x):\n    '''\n    Write a function to find the average of a list x.\n    '''\n    #assert len(x)>0\n    #assert type(x)==list\n    total=0\n    for i in x:\n        total+=i\n    average=total/len(x)\n    return average\ndef median(x):\n    '''\n    Write a function to find the median of a list x.\n    '''\n    #assert len(x)>0\n    #assert type(x)==list\n    sort=sorted(x)\n    n=len(x)\n    if n%2==0:\n        n1=n/2\n        median=(sort[n1]+sort[n1-1])/2\n    else:\n        median=sort[n/2]\n    return median\ndef standard_deviation(x):\n    '''\n    Write a function to find the standard deviation of a list x.\n    '''\n    #assert len(x)>0\n    #assert type(x)==list\n    average=average(x)\n    total=0\n    for i in x:\n        total+=(i-average)**2\n    total/=len(x)\n    total=math.sqrt(total)\n    return total\ndef frequency_of_x(x,x0):\n    '''\n    Write a function to find the frequency of x0 in a list x.\n    '''\n    #assert type(x)==list\n    #assert len(x)>0\n    total=0\n    for i in x:\n        if i==x0:\n            total+=1\n    return total\ndef data_range(x):\n    '''\n    Write a function to find the range of a list x.\n    '''\n    #assert type(x)==list\n    #assert len(x)>0\n    maximum=x[0]\n    minimum=x[0]\n    for i in x:\n        if i>maximum:\n            maximum=i\n        if i<minimum:\n            minimum=i\n    range=maximum-minimum\n    return range\ndef mode(x):\n    '''\n    Write a function to find the mode of a list x.\n    '''\n    #assert type(x)==list\n    #assert len(x)>0\n    mode_list=[]\n    frequency_list=[]\n    for i in x:\n        if i not in mode_list:\n            mode_list.append(i)\n            frequency_list.append(1)\n        else:\n            index=mode_list.index(i)\n            frequency_list[index]+=1\n    mode_list=[]\n    frequency_list=[]\n    for i in range(len(mode_list)):\n        if frequency_list[i]==max(frequency_list):\n            mode_list.append(mode_list[i])\n            frequency_list.append(frequency_list[i])\n    return mode_list\ndef data_skew(x):\n    '''\n    Write a function to find the skew of a list x.\n    '''\n    #assert type(x)==list\n    #assert len(x)>0\n    average=average(x)\n    total=0\n    for i in x:\n        total+=(i-average)**3\n    total/=len(x)\n    total=total**(1/3)\n    return total\ndef data_kurtosis(x):\n    '''\n    Write a function to find the kurtosis of a list x.\n    '''\n    #assert type(x)==list\n    #assert len(x)>0\n    average=average(x)\n    total=0\n    for i in x:\n        total+=(i-average)**4\n    total/=len(x)\n    total=total**(1/4)\n    return total\ndef data_moment(n,x):\n    '''\n    Write a function to find the n-th moment of a list x.\n    '''\n    #assert type(x)==list\n    #assert len(x)>0\n    average=average(x)\n    total=0\n    for i in x:\n        total+=(i-average)**n\n    total/=len(x)\n    return total\ndef data_covariance(x,y):\n    '''\n    Write a function to find the covariance of a list of x and a list of y.\n    '''\n    #assert type(x)==list\n    #assert type(y)==list\n    #assert len(x)==len(y)\n    average_x=average(x)\n    average_y=average(y)\n    total=0\n    for i in range(len(x)):\n        total+=(x[i]-average_x)*(y[i]-average_y)\n    total/=len(x)\n    return total\ndef data_correlation(x,y):\n    '''\n    Write a function to find the correlation of a list of x and a list of y.\n    '''\n    #assert type(x)==list\n    #assert type(y)==list\n    #assert len(x)==len(y)\n    covariance=data_covariance(x,y)\n    standard_deviation_x=standard_deviation(x)\n    standard_deviation_y=standard_deviation(y)\n    if covariance==0:\n        return 0\n    else:\n        return covariance/"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 + math.pi * r * math.sqrt(((r**2) + (h**2)))\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (3.14159*r**2)/2*h\n    return area\ndef lateral_surface_sphere(r,n):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and the number n of sides on each side.\n    '''\n    area = (2*3.14159*r**2)/(n*4)\n    return area\ndef lateral_surface_dodecahedron(r,n):\n    '''\n    Write a function to find the lateral surface area of a dodecahedron given radius r and the number n of sides on each side.\n    '''\n    area = (10*3.14159*r**2)/(n*12)\n    return area\ndef lateral_surface_cube(a,n):\n    '''\n    Write a function to find the lateral surface area of a cube given length a and the number of sides on each side.\n    '''\n    area = (6*a**2)/(n*6)\n    return area\ndef lateral_surface_octahedron(a,n):\n    '''\n    Write a function to find the lateral surface area of a octahedron given length a and the number of sides on each side.\n    '''\n    area = (8*a**2)/(n*8)\n    return area\ndef lateral_surface_tetrahedron(a,n):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given length a and the number of sides on each side.\n    '''\n    area = (4*a**2)/(n*4)\n    return area\ndef lateral_surface_pentahedron(a,n):\n    '''\n    Write a function to find the lateral surface area of a pentahedron given length a and the number of sides on each side.\n    '''\n    area = (5*a**2)/(n*5)\n    return area\ndef lateral_surface_hexagon(a,n):\n    '''\n    Write a function to find the lateral surface area of a hexagon given length a and the number of sides on each side.\n    '''\n    area = (3*a**2)/(n*3)\n    return area\ndef lateral_surface_hexahedron(a,n):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given length a and the number of sides on each side.\n    '''\n    area = (12*a**2)/(n*12)\n    return area\ndef lateral_surface_nonagon(a,n):\n    '''\n    Write a function to find the lateral surface area of a nonagon given length a and the number of sides on each side.\n    '''\n    area = (3*a**2)/(n*3)\n    return area\ndef lateral_surface_decagon(a,n):\n    '''\n    Write a function to find the lateral surface area of a nonagon given length a and the number of sides on each side.\n    '''\n    area = (n*a**2)/(n*4)\n    return area\ndef lateral_surface_ellipse(a,b,n):\n    '''\n    Write a function to find the lateral surface area of an ellipse given length a and length b, and the number of sides on each side.\n    '''\n    area = ((b**2*3.14159)/4)*(a**2/b**2)\n    return area\ndef lateral_surface_parallelogram(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a)/2\n    return area\ndef lateral_surface_trianle(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a)/2\n    return area\ndef lateral_surface_triangle(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a)/2\n    return area\ndef lateral_surface_trapezoid(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a)/2\n    return area\ndef lateral_surface_quadrangle(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a)/2\n    return area\ndef lateral_surface_quadrangle(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a)/2\n    return area\ndef lateral_surface_trapeze(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a)/2\n    return area\ndef lateral_surface_pyramid(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a)/2\n    return area\ndef lateral_surface_quadratic(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a quadratic curve given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a*math.sqrt(3)/2)\n    return area\ndef lateral_surface_cubic(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a quadratic curve given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a*math.sqrt(3)/2)\n    return area\ndef lateral_surface_quartic(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a quadratic curve given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a*math.sqrt(3)/2)\n    return area\ndef lateral_surface_quintic(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a quadratic curve given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a*math.sqrt(5)/2)\n    return area\ndef lateral_surface_sextic(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a quadratic curve given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a*math.sqrt(5)/2)\n    return area\ndef lateral_surface_septic(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a quadratic curve given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a*math.sqrt(7)/2)\n    return area\ndef lateral_surface_octic(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a quadratic curve given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a*math.sqrt(7)/2)\n    return area\ndef lateral_surface_nonateic(a,b,n):\n    '''\n    Write a function to find the lateral surface area of a quadratic curve given length a and length b, and the number of sides on each side.\n    '''\n    area = (b*a*math.sqrt(7)/2)\n    return area\ndef lateral_surface_decateic(a,b"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = 3.141592654\n    ans = a * r * r + math.pi * r * r * h / 3\n    return ans\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^0-9a-zA-Z\\s\\w\\d]+', '', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\"\\n\",\" \")\n    text = text.replace(\"\\t\",\" \")\n    text = text.replace(\",\",\" \")\n    text = text.replace(\".\",\" \")\n    text = text.replace(\" \",\"\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\s,\\.]', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if len(text) == 0:\n        return text\n    if len(text) == 1:\n        if text == ',':\n            return ':'\n        if text == '.':\n            return ':'\n        else:\n            return text\n    else:\n        return text[0] + ':' + replace_specialchar(text[1:])\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',','::')\n    text = text.replace('.','::')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(\" \",\":\")\n    text=text.replace(\",\",\":\")\n    text=text.replace(\".\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\".\",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\" \",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace('\\t', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x not in A:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A) - 1\n    while lo < hi:\n        mid = lo + (hi - lo) / 2\n        if A[mid] == x:\n            hi = mid\n        elif A[mid] > x:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return lo\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        m = (l + r) // 2\n        if A[m] == x:\n            return m\n        if A[m] > x:\n            r = m - 1\n        else:\n            l = m + 1\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    length = len(A)\n    if length == 0:\n        return None\n    if A[0] == x:\n        return 0\n    if A[length-1] == x:\n        return length-1\n    left = 0\n    right = length-1\n    while left <= right:\n        mid = (left+right)//2\n        if A[mid] < x:\n            left = mid+1\n        elif A[mid] > x:\n            right = mid-1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid-1\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    '''\n    Return the index of the first occurrence of x in the array A.\n    If x is not present, return -1\n    '''\n    if len(A) == 0:\n        return -1\n    low, high = 0, len(A)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n        elif A[mid] < x:\n            l = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x not in A:\n        return -1\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    assert(A is not None)\n    assert(len(A) > 0)\n    n = len(A)\n    if n == 1:\n        return 0 if A[0] == x else -1\n    if A[n//2] == x:\n        return n//2\n    if A[0] == x:\n        return 0\n    if A[n-1] == x:\n        return n-1\n    if A[0] > x:\n        return find_first_occurrence(A[:n//2], x)\n    else:\n        return find_first_occurrence(A[n//2:], x) + n//2\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    temp = []\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            temp.append(arr[i:j])\n    temp = set(temp)\n    return sum(list(map(lambda x: prod(x), temp)))\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    t = len(arr)\n    if t < 4:\n        return 0\n    else:\n        res = arr[0]*arr[1]*arr[2]*arr[3]\n        return res\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # arr = [1,4,5,3,2]\n    n = len(arr)\n    return sum(arr[i]*arr[j] for i in range(n) for j in range(i+1,n))\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = [1]\n    for i in range(len(arr)):\n        res = [r*arr[i] for r in res]\n    return sum(res)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #Solution 1\n    #All subarray products - Recursion\n    def find_sum_of_product(arr, n):\n        if n == 1:\n            return 0\n        else:\n            return arr[n-1] * find_sum_of_product(arr, n-1)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum(arr)\n    \ndef sum_Of_Subarray_TwoPointer(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    left_pointer = 0\n    right_pointer = len(arr)-1\n    \n    ans = 0\n    while left_pointer<=right_pointer:\n        if left_pointer == right_pointer:\n            return arr[left_pointer]\n        if arr[left_pointer] == 0:\n            return 0\n        if arr[right_pointer] == 0:\n            return 0\n            \n        ans += arr[left_pointer] * arr[right_pointer]\n        \n        left_pointer +=1\n        right_pointer -=1\n        \n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    output = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            output += (arr[j] * arr[i:j+1])\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    if len(arr) < 2:\n        return 0\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            res += prod * arr[j]\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    temp = 1\n    total = 0\n    for i in range(len(arr)):\n        temp = 1\n        for j in range(i, len(arr)):\n            temp = temp * arr[j]\n            total = total + temp\n    return total\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n ^ (n >> 1)\n    m = (m & ~0x55555555) | ((m & 0x55555555) << 1)\n    return m\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n ^ (n << 1)) ^ (n >> 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n ^ (n & 1)) + (n & 1) * (1 - 2 * (n & 1))\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit = 1 << (n.bit_length() - 2)\n    return (n ^ bit)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # assign n to variable\n    n = int(n)\n    # set the middle bit to zero\n    n = n & ~(1<<1) \n    # set the last bit to one\n    n = n | (1<<1)\n    # return n\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = 1\n    while n > 0:\n        m = (m << 1) | n%2\n        n = n >> 1\n    return m\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n & (n << 1) ) \n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert to binary and reverse the binary number\n    rev_num = bin(n)[::-1]\n    # first and last bit\n    first_bit = rev_num[0]\n    last_bit = rev_num[-1]\n    # change the first and last bits\n    rev_num = rev_num[1:-1] + last_bit + first_bit\n    # convert to integer and return it\n    return int(rev_num, 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n % 2 == 0:\n        return n | 1\n    else:\n        return n ^ 0b111\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)\n    n = n ^ ((n & 1) << 1)\n    n = n ^ ((n & 2) << 2)\n    n = n ^ ((n & 8) << 3)\n    n = n ^ ((n & 16) << 4)\n    n = n ^ ((n & 32) << 5)\n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while i < len(a) and a[i] <= x:\n        i += 1\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    a.insert(i, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    lo, hi = 0, len(a)-1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0 or a[i - 1]!= x:\n        return i\n    else:\n        return i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a,x)\n    return idx\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0 or a[0] > x:\n        a.insert(0, x)\n    else:\n        i = bisect.bisect_left(a, x)\n        a.insert(i, x)\n    return a\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    a.insert(i, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n    \ndef binary_search(a, x):\n    '''\n    Write a function to find the index of the specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n    \ndef get_min_max(a):\n    '''\n    Write a function to find the minimum and maximum values in the list. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    x = max(a)\n    y = min(a)\n    return x, y\n    \ndef longest_common_prefix(strs):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    result = \"\"\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix)!= 0:\n                prefix = prefix[0: len(prefix)-1]\n                if prefix == \"\":\n                    return \"\"\n        return prefix\n        \ndef longest_common_prefix_rec(strs):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix)!= 0:\n                prefix = prefix[0: len(prefix)-1]\n                if prefix == \"\":\n                    return \"\"\n        return prefix\n        \ndef longest_common_prefix_iter(strs):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        l = min(len(i) for i in strs)\n        for i in range(l):\n            if len(set([str[i] for str in strs])) > 1:\n                return strs[0][:i]\n        return strs[0][:l]\n        \ndef contains_duplicates(a):\n    '''\n    Write a function to check if any permutation of an input string is a palindrome. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return False\n    else:\n        if len(a) == 1:\n            return False\n        else:\n            seen = set()\n            for i in range(len(a)):\n                if a[i] in seen:\n                    return True\n                else:\n                    seen.add(a[i])\n            return False\n            \ndef contains_duplicates_set(a):\n    '''\n    Write a function to check if any permutation of an input string is a palindrome. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return False\n    else:\n        seen = set()\n        for i in range(len(a)):\n            if a[i] in seen:\n                return True\n            else:\n                seen.add(a[i])\n        return False\n        \ndef contains_duplicates_sort(a):\n    '''\n    Write a function to check if any permutation of an input string is a palindrome. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return False\n    else:\n        a.sort()\n        for i in range(len(a) - 1):\n            if a[i] == a[i+1]:\n                return True\n        return False\n        \ndef contains_duplicates_sort_2(a):\n    '''\n    Write a function to check if any permutation of an input string is a palindrome. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return False\n    else:\n        for i in range(len(a) - 1):\n            if a[i] == a[i+1]:\n                return True\n        return False\n        \ndef contains_duplicates_hash(a):\n    '''\n    Write a function to check if any permutation of an input string is a palindrome. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return False\n    else:\n        seen = set()\n        for i in range(len(a)):\n            if a[i] in seen:\n                return True\n            else:\n                seen.add(a[i])\n        return False\n        \ndef contains_duplicates_hash_2(a):\n    '''\n    Write a function to check if any permutation of an input string is a palindrome. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return False\n    else:\n        seen = set()\n        for i in range(len(a)):\n            if a[i] in seen:\n                return True\n            else:\n                seen.add(a[i])\n        return False\n        \ndef contains_duplicates_sort_3(a):\n    '''\n    Write a function to check if any permutation of an input string is a palindrome. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return False\n    else:\n        a.sort()\n        for i in range(len(a) - 1):\n            if a[i] == a[i+1]:\n                return True\n        return False\n        \ndef contains_duplicates_set_2(a):\n    '''\n    Write a function to check if any permutation of an input string i"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = re.findall(regex,string)\n    return bool(string)\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string)\n    return result \n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string)\n    if result:\n        return 'true'\n    else:\n        return 'false'\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string) \n    if result:\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        print(\"String starts with vowel\")\n    else:\n        print(\"String does not start with vowel\")\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        print 'True'\n    else:\n        print 'False'\ncheck_str('ACL3')\ncheck_str('def_class')\ncheck_str('Class_ACL')\ncheck_str('__c')\ncheck_str('A-cl3')\ncheck_str('def_class_ACL')\ncheck_str('def_ACL3')\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.search(regex,string)\n    if result:\n        print(\"The given string starts with a vowel\")\n    else:\n        print(\"The given string starts with a consonant\")\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    try: \n        if re.match(regex, string): \n            print 'The string starts with vowel'\n        else: \n            print 'The string doesn\\'t start with vowel'\n    except: \n        print 'Enter a string'\ncheck_str(raw_input())\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string)\nprint(check_str(\"amy\"))\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (1.0*n/(n-1))*geometric_sum(n-1)\n    \ndef almost_there(n):\n    '''\n    Write a function that takes a positive whole number as its parameter. If the number is within 10 of 100 or 200, return True. Otherwise, return False.\n    '''\n    return ((n>=100 and n<=110) or (n>=200 and n<=210))\n    \ndef has_33(n):\n    '''\n    Given a list of ints, return True if the array contains a 3 next to a 3 somewhere.\n    '''\n    for i in range(0, len(n)-1):\n        if (n[i] == n[i+1] and n[i] == 3):\n            return True\n    return False\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 / n + geometric_sum(n - 1) if n > 1 else 1\n    \n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1/0\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return (1*n)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1.0 * n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return geometric_sum(n-1) * n\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1/(1-n)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return pow(2,n)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    geo_sum = 1\n    for i in range(2, n+1):\n        geo_sum *= i\n    return geo_sum\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n -= 1\n    return int(math.pow(10, n) * (n + 1) / 2) \ndef is_triangular(n): \n    '''\n    Write a python function to check if the given number is triangular or not\n    '''\n    x = int((math.sqrt(8 * n + 1) - 1) / 2) \n    return x * (x + 1) == 8 * n + 1 \ndef triangle(n): \n    '''\n    Write a python function to return the smallest triangular number with n digits. https://www.geeksforgeeks.org/smallest-triangular-number-with-n-digits/\n    '''\n    n -= 1\n    return int(math.pow(10, n) * (n + 1) / 2) \ndef find_smallest_triangular(n): \n    '''\n    Write a python function to return the smallest triangular number with n digits. https://www.geeksforgeeks.org/smallest-triangular-number-with-n-digits/\n    '''\n    n -= 1\n    return int(math.pow(10, n) * (n + 1) / 2) \ndef find_largest_triangular(n): \n    '''\n    Write a python function to return the largest triangular number with n digits. https://www.geeksforgeeks.org/largest-triangular-number-with-n-digits/\n    '''\n    return int(math.pow(10, n) * (n + 1) / 2) - 1 \ndef find_smallest_triangular_Number(n): \n    '''\n    Write a python function to return the smallest triangular number with n digits. https://www.geeksforgeeks.org/smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.pow(10, n) * (n + 1) / 2) - 1 \ndef find_largest_triangular_Number(n): \n    '''\n    Write a python function to return the largest triangular number with n digits. https://www.geeksforgeeks.org/largest-triangular-number-with-n-digits/\n    '''\n    return int(math.pow(10, n) * (n + 1) / 2) - 1 \ndef find_smallest_triangular_Number(n): \n    '''\n    Write a python function to return the smallest triangular number with n digits. https://www.geeksforgeeks.org/smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.pow(10, n) * (n + 1) / 2) - 1 \ndef is_pentagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 24 * n)) / 6 \n    return x == int(x) \ndef is_hexagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_pentagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 24 * n)) / 6 \n    return x == int(x) \ndef is_hexagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 40 * n)) / 10 \n    return x == int(x) \ndef is_octagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 40 * n)) / 10 \n    return x == int(x) \ndef is_octagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_pentagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 24 * n)) / 6 \n    return x == int(x) \ndef is_hexagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 40 * n)) / 10 \n    return x == int(x) \ndef is_octagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 40 * n)) / 10 \n    return x == int(x) \ndef is_octagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_pentagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 24 * n)) / 6 \n    return x == int(x) \ndef is_hexagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 40 * n)) / 10 \n    return x == int(x) \ndef is_octagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 40 * n)) / 10 \n    return x == int(x) \ndef is_octagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return "
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while True:\n        triangular = i * (i + 1) / 2\n        if len(str(triangular)) == n:\n            return i\n        i += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n<0: \n        return -1\n    arr = [0 for i in range(0, 10)] \n    arr[0] = 1\n    for i in range(1, n): \n        for j in range(10): \n            if j-1 >= 0: \n                arr[j] += arr[j-1] \n    return arr[9]\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    m = int(math.ceil(math.log(n,2)))\n    count =0\n    for i in range(1,m+1):\n        count += n**(i+1)//(i+1)\n    if count>n:\n        print(n)\n        return True\n    return False\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    i = 1\n    while i < n:\n        i += 1\n    return i\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    start = int(math.ceil((math.log(n)/math.log(2)) + 1))\n    triangle = int(math.pow(n,0.5))\n    return triangle * (triangle + 1) / 2\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(round(n * (n + 1) / 2))\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initialize answer and counter\n    ans = 0\n    count = 0\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #Function find the index of smallest triangular number with n digits.\n    #This function return the index of smallest triangular number with n digits\n    #index returned range from 1 to (n*(n+1))/2. \n    #The index returned is different from the mathematical definition of triangular number.\n    #For ex. if n = 4\n    #The index returned will be from 1 to 15\n    #So, if we calculate the triangular number of 4 digits, we get 1+2+3+4 = 10 and index returned will be from 1 to 10\n    #Now, if we calculate the triangular number of 5 digits, we get 1+2+3+4+5 = 15 and index returned will be from 1 to 15\n    #So, we can see, the index returned will be different from the mathematical definition of triangular number.\n    #For ex. if n = 4, The triangular number will be 1+2+3+4 = 10. The index returned will be from 1 to 10.\n    #The mathematical definition of triangular number is 1+2+3+4 = 6. So, we cannot determine the index of triangular number with n digits.\n    #We can determine the index of triangular number with 2 digits as below.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3 = 6. So, we cannot determine the index of triangular number with n digits.\n    #To determine the index of smallest triangular number with 2 digits, we can find the index of triangular number with 1 digit.\n    #Then, we can find the index of triangular number with 3 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3 = 6. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 3 digits, we can find the index of triangular number with 2 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3 = 6. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 4 digits, we can find the index of triangular number with 3 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3 = 6. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 5 digits, we can find the index of triangular number with 4 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3+4 = 10. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 6 digits, we can find the index of triangular number with 5 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3+4+5 = 15. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 7 digits, we can find the index of triangular number with 6 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3+4+5+6 = 21. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 8 digits, we can find the index of triangular number with 7 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3+4+5+6+7 = 28. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 9 digits, we can find the index of triangular number with 8 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3+4+5+6+7+8 = 36. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 10 digits, we can find the index of triangular number with 9 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3+4+5+6+7+8+9 = 45. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 11 digits, we can find the index of triangular number with 10 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3+4+5+6+7+8+9+10 = 55. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 12 digits, we can find the index of triangular number with 11 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3+4+5+6+7+8+9+10+11 = 56. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 13 digits, we can find the index of triangular number with 12 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3+4+5+6+7+8+9+10+11+12 = 57. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 14 digits, we can find the index of triangular number with 13 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3+4+5+6+7+8+9+10+11+12+13 = 58. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 15 digits, we can find the index of triangular number with 14 digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #The mathematical definition of triangular number is 1+2+3+4+5+6+7+8+9+10+11+12+13+14 = 59. So, we cannot determine the index of triangular number with n digits.\n    #Hence, we can see the index returned will be different from the mathematical definition of triangular number.\n    #To determine the index of smallest triangular number with 16 digits, we can find the index of triangular number with 15 digits.\n    #Hence, we ca"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    i = 1\n    j = 1\n    while(i < j):\n        m = math.ceil(i*j / i)\n        if(m < n):\n            j = m\n        else:\n            i = m + 1\n    return j - 1\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i,j in enumerate(test_tup):\n        d[i] = j\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {x:y for x,y in zip(test_tup, test_tup[1:])}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) == 0:\n        return {}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i, x in enumerate(test_tup):\n        new_dict[x] = test_tup[i+1]\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    try:\n        key_value_dict = {}\n        for i in range(len(test_tup)):\n            key_value_dict[i] = test_tup[i]\n    except Exception as e:\n        print(\"An exception occurred: \", e)\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[x]: test_tup[x+1] for x in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c = s[0]\n    for i in range(len(s)-1) :\n        if s[i+1]!= c :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l=[]\n    for i in s :\n        l.append(i)\n    if len(set(l))<=1 :\n        return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # pass\n    return len(set(s)) <= 1\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    return all(x == s[0] for x in s)\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    i = 0\n    while i < len(s) :\n        if s[i]!= s[i+1] :\n            return False\n        i = i+1\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==1\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s.count(s[0]) == len(s) :\n        return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s[0] == s[1] == s[2] == s[3] :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * math.pow(side,2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side <= 0:\n        raise ValueError(\"side cannot be 0 or negative\")\n    elif side >= 1:\n        raise ValueError(\"side cannot be 1 or greater\")\n    else:\n        return (math.sqrt(3)*(side**2))/4\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (4*math.sqrt(3))/2*(3*side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2/6\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area=0.3333333333333333333333333333\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area_tetrahedron=0.5*(3**0.5)*side**2\n    return area_tetrahedron\ndef perimeter_tetrahedron(side):\n    '''\n    Write a function to caluclate the perimeter of a tetrahedron.\n    '''\n    perimeter_tetrahedron=4*side\n    return perimeter_tetrahedron\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    volume_tetrahedron=1/3*(3**0.5)*side**3\n    return volume_tetrahedron\ndef cuboid_volume(length,width,height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    cuboid_volume=length*width*height\n    return cuboid_volume\ndef cuboid_surface_area(length,width,height):\n    '''\n    Write a function to caluclate the surface area of a cuboid.\n    '''\n    cuboid_surface_area=2*(length*width+width*height+height*length)\n    return cuboid_surface_area\ndef cuboid_prism_volume(length,width,height):\n    '''\n    Write a function to caluclate the prism volume of a cuboid.\n    '''\n    cuboid_prism_volume=length*width*height\n    return cuboid_prism_volume\ndef cuboid_prism_surface_area(length,width,height):\n    '''\n    Write a function to caluclate the surface area of a cuboid.\n    '''\n    cuboid_prism_surface_area=2*(length*width+width*height+height*length)\n    return cuboid_prism_surface_area\ndef cone_volume(length,radius):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    cone_volume=math.pi*radius**2*length\n    return cone_volume\ndef cone_surface_area(length,radius):\n    '''\n    Write a function to caluclate the surface area of a cone.\n    '''\n    cone_surface_area=math.pi*(radius**2+length**2)\n    return cone_surface_area\ndef cuboid_volume_old(length,width,height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    cuboid_volume=length*width*height\n    return cuboid_volume\ndef cuboid_surface_area_old(length,width,height):\n    '''\n    Write a function to caluclate the surface area of a cuboid.\n    '''\n    cuboid_surface_area=2*(length*width+width*height+height*length)\n    return cuboid_surface_area\ndef cuboid_prism_volume_old(length,width,height):\n    '''\n    Write a function to caluclate the prism volume of a cuboid.\n    '''\n    cuboid_prism_volume=length*width*height\n    return cuboid_prism_volume\ndef cuboid_prism_surface_area_old(length,width,height):\n    '''\n    Write a function to caluclate the surface area of a cuboid.\n    '''\n    cuboid_prism_surface_area=2*(length*width+width*height+height*length)\n    return cuboid_prism_surface_area\ndef cube_volume(length):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    cube_volume=length**3\n    return cube_volume\ndef cube_surface_area(length):\n    '''\n    Write a function to caluclate the surface area of a cube.\n    '''\n    cube_surface_area=6*length**2\n    return cube_surface_area\ndef cylinder_volume(length,radius):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    cylinder_volume=math.pi*radius**2*length\n    return cylinder_volume\ndef cylinder_surface_area(length,radius):\n    '''\n    Write a function to caluclate the surface area of a cylinder.\n    '''\n    cylinder_surface_area=2*math.pi*radius**2+2*math.pi*radius*length\n    return cylinder_surface_area\ndef cone_volume(length,radius):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    cone_volume=math.pi*radius**2*length\n    return cone_volume\ndef cone_surface_area(length,radius):\n    '''\n    Write a function to caluclate the surface area of a cone.\n    '''\n    cone_surface_area=math.pi*radius**2+math.pi*radius*length+math.pi*(radius**2+length**2)\n    return cone_surface_area\ndef cuboid_volume_old(length,width,height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    cuboid_volume=length*width*height\n    return cuboid_volume\ndef cuboid_surface_area_old(length,width,height):\n    '''\n    Write a function to caluclate the surface area of a cuboid.\n    '''\n    cuboid_surface_area=2*(length*width+width*height+height*length)\n    return cuboid_surface_area\ndef cuboid_prism_volume_old(length,width,height):\n    '''\n    Write a function to caluclate the prism volume of a cuboid.\n    '''\n    cuboid_prism_volume=length*width*height\n    return cuboid_prism_volume\ndef cuboid_prism_surface_area_old(length,width,height):\n    '''\n    Write a function to caluclate the surface area of a cuboid.\n    '''\n    cuboid_prism_surface_area=2*(length*width+width*height+height*length)\n    return cuboid_prism_surface_area\ndef cube_volume_old(length):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    cube_volume=length**3\n    return cube_volume\ndef cube_surface_area_old(length):\n    '''\n    Write a function to caluclate the surface area of a cube.\n    '''\n    cube_surface_area=6*length**2\n    return cube_surface_area\ndef cylinder_volume_old(length,radius):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    cylinder_volume=math.pi*radius**2*length\n    return cylinder_volume\ndef cylinder_surface_area_old(length,radius):\n    '''\n    Write a function to caluclate the surface area of a cylinder.\n    '''\n    cylinder_surface_area=2*math.pi*radius**2+2*math.pi*radius*length\n    return cylinder_surface_area\ndef cone_volume_old(length,radius):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    cone_volume=math.pi*radius**2*length\n    return cone_volume\ndef cone_surface_area_old(length,radius):\n    '''\n    Write a function to caluclate the surface area of a cone.\n    '''\n    cone_surface_area=math.pi*radius**2+math.pi*radius*length+math.pi*(radius**2+length**2)\n    return cone_surface_area\ndef cuboid_volume(length,width,height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    cuboid_volume=length*width*height\n    return cuboid_volume\ndef cuboid_surface_area(length,width,height):\n    '''\n    Write a function to caluclate the surface area of a cuboid.\n    '''\n    cuboid_surface_area=2*(length*width+width*height+height*length)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((3/4) * side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    return (math.sqrt(3)/4) * (3*side**2)\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return (math.sqrt(3)/4) * (3*side**3)\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a icosahedron.\n    '''\n    return (5/12) * (side**2)\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of a icosahedron.\n    '''\n    return (5/12) * (side**3)\ndef area_cuboid(side_a, side_b, side_c):\n    '''\n    Write a function to caluclate the area of a cuboid.\n    '''\n    return 2*(side_a*side_b+side_b*side_c+side_a*side_c)\ndef volume_cuboid(side_a, side_b, side_c):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return side_a*side_b*side_c\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    return 4 * math.pi * radius**2\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4/3) * math.pi * radius**3\ndef area_hemisphere(radius):\n    '''\n    Write a function to caluclate the area of a hemisphere.\n    '''\n    return math.pi * radius**2\ndef volume_hemisphere(radius):\n    '''\n    Write a function to caluclate the volume of a hemisphere.\n    '''\n    return math.pi * radius**3/3\ndef area_cone(radius, height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return math.pi * radius**2 * height/3\ndef volume_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return math.pi * radius**2 * height/3\ndef area_torus(radius, minor_radius):\n    '''\n    Write a function to caluclate the area of a torus.\n    '''\n    return math.pi * (2*radius**2 + math.pi * minor_radius**2)\ndef volume_torus(radius, minor_radius):\n    '''\n    Write a function to caluclate the volume of a torus.\n    '''\n    return 2 * math.pi * math.pi * radius**2 * minor_radius**2 / math.pi\ndef area_parabola(c, h):\n    '''\n    Write a function to caluclate the area of a parabola.\n    '''\n    return math.pi * c**2/4 * h\ndef volume_parabola(c, h):\n    '''\n    Write a function to caluclate the volume of a parabola.\n    '''\n    return math.pi * c**2 * h / 4\ndef area_ellipsoid(radius_a, radius_b, radius_c):\n    '''\n    Write a function to caluclate the area of a ellipsoid.\n    '''\n    return 4 * math.pi * radius_a * radius_b * radius_c\ndef volume_ellipsoid(radius_a, radius_b, radius_c):\n    '''\n    Write a function to caluclate the volume of a ellipsoid.\n    '''\n    return (4/3) * math.pi * radius_a**3 * radius_b * radius_c\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return 12 * (3**(2/5)) * (side**2)\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return (1/3) * (3**(2/5)) * (side**3)\ndef area_prism(side_a, side_b, side_c):\n    '''\n    Write a function to caluclate the area of a prism.\n    '''\n    return (side_a*side_b + side_b*side_c + side_a*side_c)/2\ndef volume_prism(side_a, side_b, side_c):\n    '''\n    Write a function to caluclate the volume of a prism.\n    '''\n    return side_a*side_b*side_c/2\ndef area_pyramid(side_a, side_b, side_c):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    return (side_a*side_b + side_b*side_c + side_a*side_c)/2\ndef volume_pyramid(side_a, side_b, side_c):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return side_a*side_b*side_c/2\ndef area_hexahedron(side):\n    '''\n    Write a function to caluclate the area of a hexahedron.\n    '''\n    return 6 * (2**(1/2)) * (3**(1/2)) * (side**2)\ndef volume_hexahedron(side):\n    '''\n    Write a function to caluclate the volume of a hexahedron.\n    '''\n    return (1/3) * (3**(1/2)) * (3**(1/2)) * (side**3)\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a icosahedron.\n    '''\n    return (5/12) * (side**2)\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of a icosahedron.\n    '''\n    return (5/12) * (side**3)\ndef area_truncated_octahedron(side):\n    '''\n    Write a function to caluclate the area of a truncated octahedron.\n    '''\n    return (3**(1/3)) * (2*(side**2))\ndef volume_truncated_octahedron(side):\n    '''\n    Write a function to caluclate the volume of a truncated octahedron.\n    '''\n    return (3**(1/3)) * (4*(side**3))/3\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of a octahedron.\n    '''\n    return 6 * (3**(1/2)) * (side**2)\ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    return (3**(1/2)) * (side**3)\ndef area_dodecahedron_old(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return 12 * (side**2)\ndef volume_dodecahedron_old(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return (3**(1/2)) * (3**(1/2)) * (side**3)\ndef area_icosahedron_old(side):\n    '''\n    Write a function to caluclate the area of a icosahedron.\n    '''\n    return (5/12) * (side**2)\ndef volume_icosahedron_old(side):\n    '''\n    Write a function to caluclate the volume of a icosahedron"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3)*side**2)/4\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)*(1/4)*(3**(1/2)))*(side**2)\n    return area\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Rotating to the right by n items\n    n = m % len(list)\n    return list[n:] + list[:n]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    x = m % len(list)\n    return list[x:] + list[:x]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m <= n:\n        if m == n:\n            return list\n        else:\n            return rotate_right(list[m:n], n - m) + list[0:m]\n    else:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    for i in range(m):\n        temp = list[-1]\n        for j in range(l - 1, 0, -1):\n            list[j] = list[j-1]\n        list[0] = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        temp = list[-1]\n        for j in range(len(list)-1, 0, -1):\n            list[j] = list[j-1]\n        list[0] = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m >= len(list):\n        return []\n    else:\n        return list[len(list)-m:] + list[:len(list)-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n    \ndef main():\n    test_tuple = (1,2,3,None)\n    print(check_none(test_tuple))\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None not in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(None == x for x in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for t in test_tup:\n        if t is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val == None:\n            return True\n    return False\n    \ndef is_pair(test_tup):\n    '''\n    Write a function to check if the given tuple is a pair or not.\n    '''\n    if len(test_tup) % 2 == 0:\n        return True\n    return False\n    \ndef is_palindrome(test_str):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    if len(test_str) == 0 or len(test_str) == 1:\n        return True\n    if test_str[0] == test_str[-1]:\n        return is_palindrome(test_str[1:-1])\n    else:\n        return False\n        \ndef is_anagram(test_str1, test_str2):\n    '''\n    Write a function to check if the given strings are anagrams or not.\n    '''\n    if len(test_str1)!= len(test_str2):\n        return False\n    if not is_palindrome(test_str1) or not is_palindrome(test_str2):\n        return False\n    else:\n        chars1 = list(test_str1)\n        chars2 = list(test_str2)\n        chars1.sort()\n        chars2.sort()\n        if chars1 == chars2:\n            return True\n        else:\n            return False\n            \ndef rotate_string(test_str, num_rot):\n    '''\n    Write a function to rotate a string by the given amount.\n    '''\n    if num_rot == 0:\n        return test_str\n    if not is_palindrome(test_str):\n        return ''\n    if num_rot > 0:\n        return test_str[num_rot:] + test_str[:num_rot]\n    else:\n        return test_str[-num_rot:] + test_str[:-num_rot]\n    \ndef split_and_join(test_str):\n    '''\n    Write a function to split a string into characters and put them back together.\n    '''\n    split_str = test_str.split(' ')\n    joined_str = '-'.join(split_str)\n    return joined_str\n    \ndef count_frequency(test_str):\n    '''\n    Write a function to count the frequency of each character in the given string.\n    '''\n    if len(test_str) == 0:\n        return {}\n    frequency = {}\n    for char in test_str:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n    \ndef get_count_dict(test_str):\n    '''\n    Write a function to return a dictionary with the count of each character.\n    '''\n    count = {}\n    for char in test_str:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n    \ndef get_char_dict(test_str):\n    '''\n    Write a function to return a dictionary with the count of each character.\n    '''\n    count = {}\n    for char in test_str:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n    \ndef is_fibonacci(test_int):\n    '''\n    Write a function to check if the given integer is a Fibonacci number or not.\n    '''\n    if test_int <= 1:\n        return False\n    if test_int == 2:\n        return True\n    num1, num2 = 1, 2\n    while num2 < test_int:\n        num1, num2 = num2, num1 + num2\n    if num2 == test_int:\n        return True\n    return False\n    \ndef is_pandigital(test_str, min_digits=0):\n    '''\n    Write a function to check if the given string is a pandigital number or not.\n    '''\n    if len(test_str) == min_digits:\n        for i in range(1, min_digits):\n            if str(i) not in test_str:\n                return False\n        return True\n    return False\n    \ndef is_triangle(test_int):\n    '''\n    Write a function to check if the given integer is a triangle number or not.\n    '''\n    if test_int <= 0:\n        return False\n    if test_int == 1:\n        return True\n    num, divisor = 1, 1\n    while num < test_int:\n        num, divisor = num + divisor, divisor + 1\n    if num == test_int:\n        return True\n    return False\n    \ndef are_triangle_numbers_similar(test_int):\n    '''\n    Write a function to check if the given numbers are similar or not.\n    '''\n    if test_int <= 0:\n        return False\n    if test_int == 1:\n        return True\n    num, divisor = 1, 1\n    while num < test_int:\n        num, divisor = num + divisor, divisor + 1\n    if num - divisor == test_int:\n        return True\n    return False\n    \ndef is_equilateral_triangle(test_int):\n    '''\n    Write a function to check if the given integer is an equilateral triangle number or not.\n    '''\n    if is_triangle(test_int):\n        if is_triangle(test_int - 1):\n            if is_triangle(test_int - 2):\n                if is_triangle(test_int - 3):\n                    return True\n    return False\n    \ndef is_rhombus(test_int):\n    '''\n    Write a function to check if the given integer is a rhombus number or not.\n    '''\n    if is_triangle(test_int):\n        return is_pandigital(str(test_int), 4)\n    return False\n    \ndef is_right_angle(test_int):\n    '''\n    Write a function to check if the given integer is a right angle number or not.\n    '''\n    if is_triangle(test_int):\n        if is_triangle(test_int - 1):\n            if is_triangle(test_int - 2):\n                if is_triangle(test_int - 3):\n                    return True\n    return False\n    \ndef is_right_angled_triangle(test_int):\n    '''\n    Write a function to check if the given integer is a right angled triangle number or not.\n    '''\n    if is_triangle(test_int):\n        if is_triangle(test_int - 1):\n            if is_triangle(test_int - 2):\n                if is_triangle(test_int - 3):\n                    return is_right_angle(test_int)\n    return False\n    \ndef is_sos(test_str):\n    '''\n    Write a function to check if the given string is a sum of squares number or not.\n    '''\n    if not is_pair(test_str):\n        return False\n    sum_of_squares = sum([int(num) ** 2 for num in test_str])\n    return sum_of_squares == int(test_str)\n    \ndef is_perfect_square(test_int):\n    '''\n    Write a function to check if the given integer is a perfect square number or not.\n    '''\n    if test_int <= 0:\n        return False\n    if test_int == 1:\n        return True\n    num, divisor = 1, 1\n    while num < test_int:\n        num, divisor = num + divisor, divisor + 1\n    if num == test_int:\n        return True\n    return False\n    \ndef is_square(test_int):\n    '''\n    Write a function to check if the given integer is a perfect square number or not.\n    '''\n    if test_int <= 0:\n        return False\n    if test_int == 1:\n        return True\n    num, divisor = 1, 1\n    while num < test_int:\n        num"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    else:\n        for item in test_tup:\n            if item == None:\n                return True\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    for elem in test_tup:\n        if elem == None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum,endnum+1):\n        for j in range(len(str(i))):\n            if i % int(str(i)[j])!= 0:\n                break\n        else:\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum,endnum+1):\n        divisors = []\n        for i in num:\n            divisors.append(i)\n        if num % sum(divisors) == 0:\n            print(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum):\n        if num % (num % 10)!= 0:\n            print(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    num_to_check = startnum\n    while num_to_check <= endnum:\n        check_number = num_to_check\n        is_divisible = True\n        for n in range(10):\n            if check_number % n!= 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            print num_to_check\n        num_to_check += 1\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: (x%int(str(x)[0])==0) and (x%int(str(x)[-1])==0), range(startnum, endnum)))\n    \ndef is_prime(num):\n    '''\n    Write a function that checks if a number is prime or not. https://www.w3resource.com/python-exercises/number-range/python-number-range-exercise-10.php\n    '''\n    if num > 1:\n        if num > 2:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    return False\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    l = []\n    for i in range(startnum, endnum+1):\n        for digit in str(i):\n            if i % int(digit)!= 0:\n                break\n        else:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum) if all([num % int(d) == 0 for d in str(num)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum+1) if i % sum(map(int, str(i))) == 0]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    div_by_digits = list(range(startnum, endnum + 1))\n    div_by_digits_len = len(div_by_digits)\n    for i in range(div_by_digits_len):\n        div_by_digits[i] = list(str(div_by_digits[i]))\n        div_by_digits[i] = set(div_by_digits[i])\n        div_by_digits[i] = list(div_by_digits[i])\n        div_by_digits[i] = len(div_by_digits[i])\n    div_by_digits = sorted(div_by_digits)\n    div_by_digits = set(div_by_digits)\n    div_by_digits = list(div_by_digits)\n    div_by_digits_len = len(div_by_digits)\n    return div_by_digits\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum,endnum+1) if num % int(str(num)[0]) == 0 and num % int(str(num)[1]) == 0 and num % int(str(num)[2]) == 0 and num % int(str(num)[3]) == 0]\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r*r*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a < 0:\n        return None\n    else:\n        return 3.14 * r * r * (a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    r=float(r)\n    a=float(a)\n    if(a>360):\n        return None\n    else:\n        area = math.pi * r**2*(math.sin(math.radians(a)))\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #fix the error in this function\n    if a>360:\n        return None\n    elif a<0:\n        a+=360\n    return math.pi*r**2*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a<0):\n        return None\n    if(a>360):\n        return None\n    else:\n        return r*r*math.pi/180*a/360\ndef radians_to_degrees(radians):\n    '''\n    Write a function to convert radians to degrees. The function takes the radians as input.\n    '''\n    if radians>math.pi:\n        return (radians-2*math.pi)*180/math.pi\n    else:\n        return radians*180/math.pi\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points. The function takes the two points as inputs.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi*r**2*math.sin(math.radians(a)))/4\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return 3.14*r*r*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    r=float(r)\n    a=float(a)\n    if a>360:\n        return None\n    else:\n        return (a/360)*(r**2)*math.pi\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return None\n    else:\n        return (math.pi*(r**2))/4*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return a*r**2*math.sin(math.radians(a))\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # Create a table to store results of subproblems\n    lookup = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    # Fill out first column\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if X[i-1] == Y[j-1]:\n                lookup[i][j][0] = lookup[i-1][j-1][0] + 1\n            else:\n                lookup[i][j][0] = max(lookup[i-1][j][0], lookup[i][j-1][0])\n    # Fill out first row\n    for j in range(1,n+1):\n        lookup[0][j][0] = 1\n    # Fill out first column\n    for k in range(1,o+1):\n        lookup[0][0][k] = 1\n    # Fill the table for rest of the values\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            for k in range(1,o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lookup[i][j][k] = lookup[i-1][j-1][k-1] + 1\n                else:\n                    lookup[i][j][k] = max(lookup[i-1][j][k], lookup[i][j-1][k], lookup[i][j][k-1])\n    return lookup[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #return the length of the longest common subsequence of the three given strings\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    #function to find the LCS of a string and a substring of same length\n    def lcs(X, Y):\n        return len(X) if len(X) > len(Y) else len(Y)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X_len = len(X)\n    Y_len = len(Y)\n    Z_len = len(Z)\n    LCS = [[[0 for i in range(Z_len+1)] for j in range(Y_len+1)] for k in range(X_len+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1 = len(X)\n    n2 = len(Y)\n    n3 = len(Z)\n    LCS = [[[0 for i in range(n3 + 1)] for j in range(n2 + 1)] for k in range(n1 + 1)]\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            for k in range(1, n3 + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i][j][k - 1])\n    return LCS[n1][n2][n3]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    L = [[[0 for i in range(p + 1)] for j in range(n + 1)] for k in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(p + 1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]): \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n    index = L[m][n][p] \n    i, j, k = m, n, p \n    lcs = [\"\"] * (index + 1) \n    lcs[index] = \"\"\n    while i > 0 and j > 0 and k > 0: \n        if (X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]): \n            lcs[index - 1] = X[i - 1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        elif (L[i - 1][j][k] == L[i][j][k]): \n            i -= 1\n        elif (L[i][j][k - 1] == L[i][j][k]): \n            j -= 1\n        else: \n            k -= 1\n    return lcs \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X.insert(0, 'X')\n    Y.insert(0, 'Y')\n    Z.insert(0, 'Z')\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n, m, l = len(X), len(Y), len(Z)\n    if n > m: \n        m, n, l = n, m, l \n        X, Y, Z = Y, X, Z \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    LCS = [[[0 for i in range(len(Z)+1)] for j in range(len(Y)+1)] for k in range(len(X)+1)]\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z)):\n                if X[i] == Y[j] and Y[j] == Z[k]:\n                    LCS[i+1][j+1][k+1] = LCS[i][j][k] + 1\n                else:\n                    LCS[i+1][j+1][k+1] = max(LCS[i+1][j][k+1], LCS[i+1][j+1][k], LCS[i][j+1][k+1])\n    return LCS\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    LCS = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    result = 0\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                    result = max(result, LCS[i][j][k])\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k],LCS[i][j-1][k],LCS[i][j][k-1])\n    return result\n    \nX = 'AGGTAGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCGGGCGGAAAGGGGCGCGTGAGCCACAGGTGAAGGCG"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<=[a-z]{1})([A-Z]{1})(?=[a-z])')\n    return pattern.sub(r'\\1 \\2', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if len(str1) == 0:\n        return ''\n    elif len(str1) == 1:\n        return str1\n    elif len(str1) == 2:\n        return str1[0].upper() + str1[1]\n    else:\n        str1 = str1.split()\n        temp = []\n        for i in str1:\n            if i[0].isupper():\n                temp.append(i.capitalize())\n            else:\n                temp.append(i)\n        return''.join(temp)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall('[A-Z][a-z]+', str1)\n    result = ''\n    for word in words:\n        result += word +''\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    #text = str1\n    #str1 = text.split()\n    #str1 = [i.strip(\".\") for i in str1]\n    #str1 = \" \".join(str1)\n    #str1 = re.sub('\\s+','', str1)\n    #print(str1)\n    str1 = re.sub(r'\\s+','', str1)\n    str1 = str1.strip()\n    str1 = re.sub('\\s+','', str1)\n    print(str1)\n    \n    \ncapital_words_spaces(\"A general emergency has occurred in town. It is a very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    try:\n        string = str1\n        \n        #Letters are divided by space\n        new_string = re.split('[a-zA-Z]',string)\n        \n        #Letters and spaces are put in dictionary\n        dic = {}\n        for i in new_string:\n            if i.isalpha() == True:\n                if i.isupper() == True:\n                    dic[i] =''\n                else:\n                    dic[i] = i\n            else:\n                dic[i] =''\n                \n        #Values are put in a list\n        values = list(dic.values())\n        \n        #Join the list to one string and print\n        final_string = \"\".join(values)\n        print(final_string)\n        \n    except ValueError:\n        print(\"Please enter a valid string\")\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s = re.sub(\"[A-Z][a-z]*\", \" \" + \" \", str1)\n    return s\n    \nprint(capital_words_spaces(\"Hello World\"))\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    string=''\n    string+=str1.split()\n    for i in range(len(string)):\n        if string[i][0]==string[i][0].upper():\n            string[i]=string[i][0].upper()+' '+string[i][1:]\n        else:\n            string[i]=string[i][0].lower()+' '+string[i][1:]\n    string=''.join(string)\n    return string\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.title()\n    str1=str1.split()\n    for i in range(len(str1)):\n        if str1[i][0]==str1[i][0].upper():\n            str1[i]=''.join((str1[i][0],str1[i][1:],''))\n    str2=''.join(str1)\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if str1 == \"\":\n        return \"\"\n    result = \"\"\n    i = 0\n    while i < len(str1):\n        if str1[i] == \" \":\n            result += str1[i]\n            i += 1\n        else:\n            result += str1[i].upper() + \" \"\n            i += 1\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<![A-Z])(?<![a-z]\\w)[A-Z][a-z\\w]+')\n    result = pattern.findall(str1)\n    return''.join(result)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(n) for n in x.split('.')])\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def compare(a, b):\n        return cmp(float(a), float(b))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    #convert to int\n    nums = [int(num) for num in nums_str]\n    #sort\n    nums.sort()\n    #convert back to string\n    sorted_nums = [str(num) for num in nums]\n    return sorted_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for n in nums_str:\n        nums.append(int(n))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #Make a copy of the list\n    temp = list(test_list)\n    #Append the tuple to the list\n    temp.append(test_tup)\n    return temp\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if isinstance(test_list, list):\n        test_list.append(test_tup)\n    else:\n        raise TypeError(\"List expected.\")\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Your Code Here\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if isinstance(test_list, list) and isinstance(test_tup, tuple):\n        test_list.append(test_tup)\n    else:\n        raise TypeError(\"Arguments must be of type list.\")\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if test_list == []:\n        test_list = [test_tup]\n    else:\n        test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = int(i/2)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) - 1:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # corner case for empty array\n    if i >= len(arr):\n        return\n    # check if arr[i] is less than arr[2i+1] or arr[i] is less than arr[2*i+2]\n    if i < len(arr)-1 and arr[i] > arr[i+1] or arr[i] > arr[2*i+2]:\n        return False\n    # recursively check the rest of the nodes\n    return check_min_heap_helper(arr, 2*i+2) and check_min_heap_helper(arr, 2*i+1)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    max_node_index = i\n    if left < len(arr) and arr[left] < arr[max_node_index]:\n        max_node_index = left\n    if right < len(arr) and arr[right] < arr[max_node_index]:\n        max_node_index = right\n    if max_node_index!= i:\n        arr[i], arr[max_node_index] = arr[max_node_index], arr[i]\n        check_min_heap_helper(arr, max_node_index)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr is None or i < 0 or i >= len(arr):\n        return False\n    if arr[i] < arr[2*i + 1] and arr[i] < arr[2*i + 2]:\n        return True\n    if arr[i] > arr[2*i + 1] and arr[i] > arr[2*i + 2]:\n        return False\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if i == 1:\n        return arr[0] < arr[1]\n    if i == 2:\n        return arr[0] < arr[1] and arr[1] < arr[2]\n    if i == 3:\n        return arr[1] < arr[2]\n    return check_min_heap_helper(arr, i/2) and check_min_heap_helper(arr, i/2 + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr)-1:\n        return\n    if arr[i] < arr[(i-1)/2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = [0, 1, 1]\n    for i in range(n):\n        a.append(a[i] + a[i-1])\n    return a[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    def fib(n): \n        if n <= 1: return 1\n        return fib(n-1) + fib(n-2)\n    \n    def lucas(n):\n        if n <= 1: return 2\n        return lucas(n-1) + lucas(n-2)\n    \n    if n == 0: return 1\n    if n == 1: return 2\n    if n == 2: return 3\n    \n    fib = fib(n-2) + fib(n-1)\n    lucas = lucas(n-2) + lucas(n-1)\n    \n    return fib + 2 * lucas\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 0\n    y = 1\n    z = 1\n    i = 2\n    while i <= n:\n        z = x + y\n        x = y\n        y = z\n        i = i + 1\n    return z\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2) + jacobsthal_num(n-3)\n        \ndef jacobsthal_lucas(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    else:\n        return jacobsthal_lucas(n-1) + 2 * jacobsthal_lucas(n-2) + jacobsthal_lucas(n-3)\n        \n        \ndef reverse_num(n): \n    '''\n    Write a function to find the nth reverse number. https://www.geeksforgeeks.org/reverse-number-python-code/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return reverse_num(n-1) + 2 * reverse_num(n-2) + reverse_num(n-3)\n        \ndef reverse_lucas(n):\n    '''\n    Write a function to find the nth reverse number. https://www.geeksforgeeks.org/reverse-number-python-code/\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return reverse_lucas(n-1) + 2 * reverse_lucas(n-2) + reverse_lucas(n-3)\n    \n        \ndef is_palindrome(n):\n    '''\n    Write a function to find if a number is a palindrome. \n    https://www.geeksforgeeks.org/check-if-a-number-is-palindrome-or-not/\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        if n%10 == n/10%10:\n            return is_palindrome(n/10)\n        else:\n            return False\n        \ndef is_palindrome_lucas(n):\n    '''\n    Write a function to find if a number is a palindrome. https://www.geeksforgeeks.org/check-if-a-number-is-palindrome-or-not/\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        if n%10 == n/10%10:\n            return is_palindrome_lucas(n/10)\n        else:\n            return False\n        \ndef is_strong(n):\n    '''\n    Write a function to find if a number is a strong number or not. https://www.geeksforgeeks.org/check-if-a-number-is-strong-number-or-not/\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_strong(n/10) and n%10 > 1\n        \ndef is_strong_lucas(n):\n    '''\n    Write a function to find if a number is a strong number or not. https://www.geeksforgeeks.org/check-if-a-number-is-strong-number-or-not/\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_strong_lucas(n/10) and n%10 > 1\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 8\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return (2*n**2 - 1)//(n**2 + n)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    '''\n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, 3))\n    # ['a', 'b', 'c']\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, 6))\n    # ['a', 'b', 'c', 'd', 'e', 'f']\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, 3))\n    # ['a', 'b', 'c']\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, 4))\n    # ['a', 'b', 'c', 'd']\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, 2))\n    # ['a', 'b', 'c', 'd', 'e', 'f']\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, 1))\n    # ['a', 'b', 'c', 'd', 'e', 'f']\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, 0))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -1))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -2))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -3))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -4))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -5))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -6))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -7))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -8))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -9))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -10))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -11))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -12))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -13))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -14))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -15))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -16))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    print(min_k(test_list, -17))\n    # []\n    \n    test_list = [('a', 1), ('b', 2), ('c', 3), ('d'"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #sort the tuple list in ascending order of key\n    test_list = sorted(test_list, key = lambda x: x[1])\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        print(\"K is greater than the length of tuple list\")\n        return\n    return min(test_list, key=lambda x: x[1])\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == 0:\n        return []\n    if len(test_list) == 0:\n        return []\n    elif len(test_list) <= K:\n        return test_list\n    return get_min_k(test_list, K)\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    d = {}\n    for i in test_list:\n        if i[0] in d:\n            d[i[0]].append(i[1])\n        else:\n            d[i[0]] = [i[1]]\n    \n    min_list = []\n    \n    for j in d:\n        min_list.append(d[j])\n        min_list.sort(key = lambda x: x)\n        if len(min_list) == K:\n            break\n    \n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = len(test_list)\n    if k < K:\n        return -1\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return None\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp = sorted(test_list, key = lambda x:x[1])\n    return temp[:K]\n    \n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    new_list = sorted(test_list, key=lambda x: x[1])\n    return new_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # K is an integer\n    # A list of tuples\n    if K < 1:\n        return -1\n    if len(test_list) < K:\n        return -1\n    return sorted(test_list)[:K]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    \n    i1 = 0\n    i2 = 0\n    i3 = 0\n    \n    common = []\n    while i1 < len(l1) and i2 < len(l2) and i3 < len(l3):\n        if l1[i1] == l2[i2] == l3[i3]:\n            common.append(l1[i1])\n            i1 += 1\n            i2 += 1\n            i3 += 1\n        elif l1[i1] < l2[i2]:\n            i1 += 1\n        elif l1[i1] > l2[i2]:\n            i2 += 1\n        elif l1[i1] < l3[i3]:\n            i1 += 1\n        elif l1[i1] > l3[i3]:\n            i3 += 1\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    n = len(l1)\n    m = len(l2)\n    l = []\n    \n    for i in xrange(n):\n        for j in xrange(m):\n            if l1[i] == l2[j]:\n                l.append(l1[i])\n    \n    for i in xrange(n):\n        for j in xrange(m):\n            if l1[i] == l3[j]:\n                l.append(l1[i])\n    \n    return l\n    \n    \ndef count_intersection(l1, l2):\n    '''\n    Write a function that returns the number of elements common to two lists.\n    '''\n    \n    count = 0\n    \n    for i in l1:\n        if i in l2:\n            count += 1\n    \n    return count\n    \n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            res.append(l1[i])\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if l1 == l2 == l3:\n        return l1\n    if l1 == l2:\n        return [item for item in l1 if item in l3]\n    if l1 == l3:\n        return [item for item in l1 if item in l2]\n    if l2 == l3:\n        return [item for item in l2 if item in l1]\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    l1_ = []\n    l2_ = []\n    l3_ = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(l1) and j < len(l2) and k < len(l3):\n        if l1[i] == l2[j] == l3[k]:\n            l1_.append(l1[i])\n            l2_.append(l2[j])\n            l3_.append(l3[k])\n        if l1[i] < l2[j]:\n            i += 1\n        elif l2[j] < l3[k]:\n            j += 1\n        else:\n            k += 1\n    return l1_ + l2_ + l3_\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #Create a list of lists\n    l1_l2_l3 = [l1, l2, l3]\n    #Create a list of lists\n    l1_l2_l3_l1 = [l1, l2, l3, l1]\n    #Create a list of lists\n    l1_l2_l3_l1_l2 = [l1, l2, l3, l1, l2]\n    #Create a list of lists\n    l1_l2_l3_l1_l2_l3 = [l1, l2, l3, l1, l2, l3]\n    #Create a list of lists\n    l1_l2_l3_l1_l2_l3_l1_l3 = [l1, l2, l3, l1, l2, l3, l1, l3]\n    \n    #return the common elements\n    return l1_l2_l3_l1_l2_l3_l1_l3_l1_l3\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1, l2, l3 = list(l1), list(l2), list(l3)\n    # return list(set(l1) & set(l2) & set(l3))\n    return [l1[i] for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #first solution\n    #return list(set(l1).intersection(set(l2), set(l3)))\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    def extract_index_list_helper(l1, l2, l3):\n        if l1 is None or l2 is None or l3 is None:\n            return []\n        if l1 == l2 == l3 == []:\n            return []\n        elif l1 == l2 == []:\n            return extract_index_list_helper(None, l3, None)\n        elif l1 == l3 == []:\n            return extract_index_list_helper(l2, None, None)\n        elif l2 == l3 == []:\n            return extract_index_list_helper(l1, None, None)\n        else:\n            return extract_index_list_helper(l1, l2, l3)[0] + extract_index_list_helper(l1, l2, l3)[1] + extract_index_list_helper(l1, l2, l3)[2]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers)<2:\n        return None\n    else:\n        numbers = sorted(numbers)\n        return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n    if len(numbers) == 2:\n        return None\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n    if len(numbers) == 2:\n        return min(numbers)\n    p = sorted(numbers)\n    return p[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Your Code Here\n    # Note: You don't have to specify the smallest number, so your function can return anything.\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers)<2:\n        return None\n    else:\n        second_smallest = None\n        min = numbers[0]\n        for i in range(len(numbers)):\n            if numbers[i] > min and numbers[i]!= min:\n                second_smallest = min\n                min = numbers[i]\n            elif numbers[i] < min and numbers[i]!= min:\n                second_smallest = min\n        return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first = second = float('inf')\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif number < second and number!= first:\n            second = number\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least 2 numbers to find the second smallest\")\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    a = []\n    for i in numbers:\n        a.append(i)\n    a.sort()\n    return a[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    pattern = r'ab+'\n    if re.search(pattern, text):\n        print(\"Pattern found\")\n    else:\n        print(\"Pattern not found\")\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if re.match(pattern, text):\n        print('Match found')\n    else:\n        print('No match found')\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if(re.search(r'ab+', text)):\n        print('Match found!')\n    else:\n        print('Match not found!')\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.match('.*a.+b', text)\n    return m.group()\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    m = re.search(r'a(.*?)b',text)\n    if m:\n        return m.group(1)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r\".*?[ab]\", text)\ndef text_match_zero_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    return re.match(r\".*?[ab]+\", text)\ndef text_match_one_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    return re.match(r\".*?[ab]+\", text)\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    return re.match(r\".*?[ab]+\", text)\ndef text_match_any(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    return re.match(r\".*?[ab]*\", text)\ndef text_match_ending_with(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    return re.match(r\".*?[ab]*\", text)\ndef text_match_not_at_beginning(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    return re.match(r\".*?[^ab]\", text)\ndef text_match_not_ending_with(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    return re.match(r\".*?[^ab]\", text)\ndef text_match_negative(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    return re.match(r\".*?[^ab]\", text)\ndef text_match_positive(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    return re.match(r\".*?[^ab]\", text)\ndef text_match_negative_lookahead(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    return re.match(r\".*?(?!ab)\", text)\ndef text_match_negative_lookbehind(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    return re.match(r\".*?(?<!ab)\", text)\ndef text_match_negative_lookbehind_positive(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    return re.match(r\".*?(?<!ab)(?!ab)\", text)\ndef text_match_negative_lookbehind_negative(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    return re.match(r\".*?(?<!ab)(?!ab)\", text)\ndef text_match_repetition(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    return re.match(r\".*?(ab)*\", text)\ndef text_match_at_least_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    return re.match(r\".*?(ab)+\", text)\ndef text_match_at_most_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    return re.match(r\".*?(ab{1})\", text)\ndef text_match_exactly_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-20.php\n    '''\n    return re.match(r\".*?(ab{2})\", text)\ndef text_match_exactly_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-21.php\n    '''\n    return re.match(r\".*?(ab{3})\", text)\ndef text_match_with_brace(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-22.php\n    '''\n    return re.match(r\".*?(ab)*\", text)\ndef text_match_with_star(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-23.php\n    '''\n    return re.match(r\".*?(ab)*\", text)\ndef text_match_with_question_mark(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-24.php\n    '''\n    return re.match(r\".*?(ab)+\", text)\ndef text_match_with_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    r = re.compile(r'ab+')\n    if r.match(text):\n        return True\n    return False\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    r = re.compile(r'ab*')\n    if r.match(text):\n        return True\n    return False\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    r = re.compile(r'ab+')\n    if r.match(text):\n        return True\n    return False\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    r = re.compile(r'ab?$')\n    if r.match(text):\n        return True\n    return False\ndef text_match_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    r = re.compile(r'a.*b')\n    if r.match(text):\n        return True\n    return False\ndef text_match_dot_dot_dot(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    r = re.compile(r'a.*b')\n    if r.match(text):\n        return True\n    return False\ndef text_match_capture(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with parenthesis and a digit capture group. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    r = re.compile(r'a.*(?P<digit>\\d)b')\n    m = r.match(text)\n    if m:\n        return True\n    return False\ndef text_match_non_capture(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with parenthesis and a non-digit capture group. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    r = re.compile(r'a.*(?P<digit>\\D)b')\n    m = r.match(text)\n    if m:\n        return True\n    return False\ndef text_match_lookahead(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with parenthesis and a digit lookahead. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    r = re.compile(r'a(?=.*?b)')\n    m = r.match(text)\n    if m:\n        return True\n    return False\ndef text_match_lookbehind(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with parenthesis and a lookbehind. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    r = re.compile(r'a(?<=.*?b)')\n    m = r.match(text)\n    if m:\n        return True\n    return False\ndef text_match_lookbehind_pos(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with parenthesis and a lookbehind. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    r = re.compile(r'a(?<=.*?b)')\n    m = r.match(text)\n    if m:\n        return True\n    return False\ndef text_match_lookbehind_pos_or_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with parenthesis and a lookbehind. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    r = re.compile(r'a(?<=.*?b)')\n    m = r.match(text)\n    if m:\n        return True\n    return False\ndef text_match_not_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with parenthesis and a lookbehind. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    r = re.compile(r'a(?<=.*?b)')\n    m = r.match(text)\n    if m:\n        return True\n    return False\ndef text_match_none_not_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with parenthesis and a lookbehind. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    r = re.compile(r'a(?<=.*?b)')\n    m = r.match(text)\n    if m:\n        return True\n    return False\ndef text_match_not_none_not_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with parenthesis and a lookbehind. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    r = re.compile(r'a(?<=.*?b)')\n    m = r.match(text)\n    if m:\n        return True\n    return False\ndef text_match_group_parenthesis_after(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with parenthesis and a digit capture group. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    r = re.compile(r'a(?P<digit>\\d)b')\n    m = r.match(text)\n    if m:\n        return True\n    return False\ndef text_match_group_parenthesis_before(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with parenthesis and a digit capture group. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    r = re.compile(r'a(?P<digit>\\d)b')\n    m = r.match(text)\n    if m:\n        return True\n    return False\ndef text_match_group_parenthesis_before_or_none(text):\n    '''"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_zero_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_one_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_one_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_zero_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_one_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b_list(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b_or_a(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b_or_a_list(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b_or_a_or_b(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b_or_a_or_b_list(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b_or_a_or_b_or_a(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b_or_a_or_b_or_a_list(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b_or_a_or_b_or_a_or_b(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b_or_a_or_b_or_a_or_b_or_b(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b_or_a_or_b_or_a_or_b_or_b_or_a(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b_or_a_or_b_or_a_or_b_or_b_or_a_or_b(text):\n    '''\n    Write a function that matches a string that has no 'a' or 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a+b',text)\n    return m\ndef text_match_no_ab_or_b_or_a_or_b_or_a_or_b_or_b_or_a_or_b"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return sum([test_list[i] == test_list[i + 1][::-1] for i in range(len(test_list) - 1)])\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (test_list[i] == test_list[j][::-1]) and (i!= j):\n                result += 1\n    return result\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    length = len(test_list)\n    #creating a count variable\n    count = 0\n    #looping over each string in the list\n    for i in range(length):\n        #creating a reverse copy of each string\n        #the slice operator will reverse the string and return it\n        reverse_string = test_list[i][::-1]\n        #checking if the reverse copy is also present in the list\n        if reverse_string in test_list:\n            #incrementing the count\n            count += 1\n    #returning the count\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for x in test_list:\n        if (x[::-1] in test_list):\n            test_list.remove(x)\n    return len(test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rpair_dict = {}\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                rpair_dict[test_list[i]] = rpair_dict.get(test_list[i], 0) + 1\n    print(rpair_dict)\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i == j[::-1]:\n                count += 1\n    print count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return len([test_list[x] for x in range(len(test_list)) if test_list[x]==test_list[len(test_list)-1-x]])\n    \n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n    for i in test_list:\n        for j in test_list:\n            if i[::-1] == j and i!= j:\n                result += 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = {}\n    for each_list in list1:\n        if each_list in list_dict:\n            list_dict[each_list] += 1\n        else:\n            list_dict[each_list] = 1\n    for each_list in list1:\n        if each_list not in list_dict:\n            list_dict[each_list] = 0\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1={}\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n            dict1[tuple(i)]=list1.count(i)\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(l) : l.count(l) for l in list1}\n    \nassert unique_sublists([1,2,3,1,2,3]) == {(1,):3, (2,):2, (3,):1}\nassert unique_sublists([1,2,3,1,2,3,1,2,3]) == {(1,):3, (2,):2, (3,):1}\nassert unique_sublists([1,2,3]) == {(1,):1, (2,):1, (3,):1}\nassert unique_sublists([]) == {}\nassert unique_sublists([1]) == {(1,):1}\nassert unique_sublists([1,2,3,4,5,1,2,3]) == {(1,):3, (2,):2, (3,):1, (4,):1, (5,):1}\nassert unique_sublists([1,1,2,3,1,1,1,2,3,1,1,1]) == {(1,):3, (2,):2, (3,):1, (1,):4}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    #Check input\n    if not isinstance(list1, list):\n        raise ValueError('list1 must be a list')\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    mydict = {}\n    for item in list1:\n        if item not in mydict:\n            mydict[item] = 1\n        else:\n            mydict[item] += 1\n    return mydict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #sort the list\n    list1.sort()\n    #identify the length of the list\n    list_length = len(list1)\n    #initialise the dictionary\n    count_dict = {}\n    #create a list to store the tuples\n    list_tuple = []\n    #loop through the length of the list\n    for index in range(0,list_length):\n        #initialise the list\n        count_list = []\n        #create a tuple\n        tup = (list1[index],)\n        #loop through the list\n        for index2 in range(index,list_length):\n            #if the tuple is the same as the current tuple\n            if tup == (list1[index2],):\n                #append the tuple to the list\n                count_list.append(tup)\n        #check if the list is not empty\n        if len(count_list)!= 0:\n            #loop through the list\n            for index3 in range(0,len(count_list)):\n                #add the list to the dictionary\n                count_dict[count_list[index3]] = 0\n    #loop through the list\n    for index4 in range(0,list_length):\n        #append the tuple to the list\n        list_tuple.append((list1[index4],))\n    #loop through the list\n    for index5 in range(0,len(list_tuple)):\n        #loop through the dictionary\n        for index6 in range(0,len(count_dict)):\n            #if the tuple is the same as the current tuple\n            if list_tuple[index5] == count_dict[count_dict.keys()[index6]]:\n                #increment the count\n                count_dict[count_dict.keys()[index6]] += 1\n    #return the dictionary\n    return count_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_count = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist not in list_count:\n            list_count[sublist] = 1\n        else:\n            list_count[sublist] += 1\n    return list_count\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    map_count = {}\n    for i in list1:\n        map_count[tuple(i)] = list1.count(i)\n    return map_count\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    list3 = []\n    for i in list1:\n        if not i in list2:\n            list2.append(i)\n    for i in list2:\n        list3.append((i, list1.count(i)))\n    return list3\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    output_dict = {}\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            if tuple(list1[i]) not in output_dict.keys():\n                output_dict[tuple(list1[i])] = 1\n            else:\n                output_dict[tuple(list1[i])] += 1\n        else:\n            continue\n    return output_dict\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return re.match(r'^[+-]?(0|[1-9][0-9]*)(\\.\\d{1,2})?$', num) is not None\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return re.match('^-?\\d+\\.\\d{1,2}$', num) is not None\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_s = str(num)\n    if num_s[-2:]!= '.0':\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if (len(num) > 2):\n        if num[0] == '-' and num[1] == '0':\n            return False\n        elif num[0] == '-' or num[1] == '.':\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return isinstance(num, int) or isinstance(num, float) and num == int(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] == '.':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str) == False:\n        return False\n    elif num.isdigit() == False:\n        return False\n    else:\n        if len(num) > 4:\n            return False\n        elif num[-1] == '.':\n            return False\n        elif num[-1] == 'e':\n            return False\n        else:\n            if num.count('e') > 1:\n                return False\n            elif num.count('e') == 1:\n                e_index = num.index('e')\n                if num[e_index+1]!= '-':\n                    return False\n                elif num[e_index+2]!= '0':\n                    return False\n                else:\n                    return True\n            else:\n                return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    n = str(num)\n    if len(n) <= 1:\n        return False\n    if n[0] == '-':\n        return False\n    for i in n:\n        if not i.isdigit():\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num,str):\n        if len(num) <= 2:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) > len(set(arr)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # if len(arr)==0:\n    #     return True\n    # if len(arr)==1:\n    #     return True\n    # if len(arr)>1:\n    #     dic = {}\n    #     for i in arr:\n    #         dic[i] = True\n    #     for i in dic:\n    #         if dic[i]==True:\n    #             return True\n    #     return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i]!= num:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    setarr = set(arr)\n    print(setarr)\n    if len(setarr) == len(arr):\n        print(\"All elements are unique\")\n    else:\n        print(\"All elements are not unique\")\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #Solution 1\n    l = len(arr)\n    for i in range(l):\n        for j in range(i+1,l):\n            if arr[i] == arr[j]:\n                return False\n    return True\n    #Solution 2\n    # if len(arr) == len(set(arr)):\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # taking the first element as the unique element and traversing through the array\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_list = []\n    for i in arr:\n        if i not in unique_list:\n            unique_list.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    pass\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 0 and monthnum3 <= 12:\n        if monthnum3 == 2:\n            if year_number % 4 == 0:\n                if year_number % 100 == 0:\n                    if year_number % 400 == 0:\n                        print '29'\n                    else:\n                        print '28'\n                else:\n                    print '29'\n            else:\n                print '28'\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            print '30'\n        else:\n            print '31'\n    else:\n        return False\n        \nyear_number = int(input('Enter a year: '))\nif year_number > 0:\n    if year_number < 100:\n        print 'Invalid year'\n    else:\n        monthnumber = int(input('Enter a month number: '))\n        if monthnumber > 0 and monthnumber <= 12:\n            check_monthnumber_number(monthnumber)\n        else:\n            print 'Invalid month"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5:\n        return True\n    else:\n        return False\ndef check_monthnumber_number2(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\ndef check_leap_year(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 100!= 0:\n        return True\n    else:\n        return False\ndef check_leap_year2(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year3(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 100 == 0:\n        return False\n    elif yearnum3 % 4 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year4(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year5(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 100 == 0:\n        return False\n    elif yearnum3 % 4 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year6(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year7(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 100 == 0:\n        return False\n    elif yearnum3 % 4 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year8(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year9(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 400 == 0:\n        return True\n    elif yearnum3 % 4 == 0 and yearnum3 % 100 == 0:\n        return False\n    else:\n        return False\ndef check_leap_year10(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 400 == 0:\n        return True\n    elif yearnum3 % 4 == 0 and yearnum3 % 100!= 0:\n        return True\n    else:\n        return False\ndef check_leap_year11(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 400!= 0:\n        return True\n    elif yearnum3 % 4 == 0 and yearnum3 % 100 == 0:\n        return False\n    else:\n        return False\ndef check_leap_year12(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 400!= 0:\n        return True\n    else:\n        return False\ndef check_leap_year13(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year14(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 100!= 0:\n        return True\n    else:\n        return False\ndef check_leap_year15(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 100 == 0:\n        return False\n    else:\n        return False\ndef check_leap_year16(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 100 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year17(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year18(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    A year is a leap year if its number is exactly divisible by 4 and is not exactly divisible by 100.\n    '''\n    if yearnum3 % 4 == 0 and yearnum3 % 400!= 0:\n        return True\n    else:\n        return False\ndef check_leap_year19(yearnum3):\n    '''\n    Write a function to check whether the given year number is a leap year o"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"30 days\")\n    else:\n        print(\"29 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if(monthnum3 > 12):\n        return False\n    elif(monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12):\n        return True\n    elif(monthnum3 == 2):\n        if(isleap(year)):\n            return True\n        else:\n            return False\n    elif(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n        return True\n    else:\n        return False\ndef check_leapyear(year):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if(isleap(year)):\n        return True\n    else:\n        return False\ndef check_daynumber_number(daynum3):\n    '''\n    Write a function to check whether the given day number contains 31 days or not. Days are given as number from 1 to 31.\n    '''\n    daynum3 = int(daynum3)\n    if(daynum3 > 31):\n        return False\n    elif(daynum3 == 1 or daynum3 == 3 or daynum3 == 5 or daynum3 == 7 or daynum3 == 8 or daynum3 == 10 or daynum3 == 12):\n        return True\n    elif(daynum3 == 4 or daynum3 == 6 or daynum3 == 9 or daynum3 == 11):\n        return True\n    elif(daynum3 == 2):\n        if(isleap(year)):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef date_to_daynumber(date3):\n    '''\n    Write a function to convert a date into day number. The date is given as three numbers in the format dd mm yyyy. dd is the number of days, mm is the number of months, and yyyy is the number of years.\n    '''\n    year3 = int(date3[6:])\n    month3 = int(date3[3:5])\n    day3 = int(date3[:2])\n    month31 = [1,3,5,7,8,10,12]\n    day31 = [1,3,5,7,8,10,12,4,6,9,11]\n    if(check_daynumber_number(day3)):\n        return day3\n    elif(month3 in month31):\n        return 31 + day3\n    elif(month3 in [4,6,9,11]):\n        if(isleap(year3)):\n            return 30 + day3\n        else:\n            return 29 + day3\n    else:\n        return 28 + day3\ndef time_to_second(time3):\n    '''\n    Write a function to convert a time into second. The time is given as two numbers in the format hh mm ss, hh and mm are hours and minutes, and ss is the number of seconds.\n    '''\n    time3 = int(time3)\n    hour3 = time3 // 3600\n    time3 = time3 % 3600\n    minute3 = time3 // 60\n    time3 = time3 % 60\n    second3 = time3\n    return hour3 * 3600 + minute3 * 60 + second3\ndef second_to_time(time3):\n    '''\n    Write a function to convert a second into hh mm ss format.\n    '''\n    time3 = int(time3)\n    hour3 = time3 // 3600\n    time3 = time3 % 3600\n    minute3 = time3 // 60\n    time3 = time3 % 60\n    second3 = time3\n    return str(hour3) +'' + str(minute3) +'' + str(second3)\ndef second_to_date(second3):\n    '''\n    Write a function to convert a second into date format.\n    '''\n    second3 = int(second3)\n    minute3 = second3 // 60\n    second3 = second3 % 60\n    hour3 = minute3 // 60\n    minute3 = minute3 % 60\n    day3 = hour3 // 24\n    hour3 = hour3 % 24\n    month3 = minute3 // 1440\n    minute3 = minute3 % 1440\n    if(month3 == 0):\n        month3 = month3 + 1\n    year3 = hour3 // 365\n    hour3 = hour3 % 365\n    day3 = hour3 // 24\n    day3 = day3 + 1\n    if(day3 == 0):\n        day3 = day3 + 1\n    return str(day3) +'' + str(month3) +'' + str(year3)\ndef daynumber_to_date(daynum3):\n    '''\n    Write a function to convert a day number into date format.\n    '''\n    daynum3 = int(daynum3)\n    if(daynum3 > 31):\n        return False\n    elif(daynum3 == 1):\n        return '1st'\n    elif(daynum3 == 2):\n        return '2nd'\n    elif(daynum3 == 3):\n        return '3rd'\n    elif(daynum3 == 4):\n        return '4th'\n    elif(daynum3 == 5):\n        return '5th'\n    elif(daynum3 == 6):\n        return '6th'\n    elif(daynum3 == 7):\n        return '7th'\n    elif(daynum3 == 8):\n        return '8th'\n    elif(daynum3 == 9):\n        return '9th'\n    elif(daynum3 == 10):\n        return '10th'\n    elif(daynum3 == 11):\n        return '11th'\n    elif(daynum3 == 12):\n        return '12th'\n    elif(daynum3 == 13):\n        return '13th'\n    elif(daynum3 == 14):\n        return '14th'\n    elif(daynum3 == 15):\n        return '15th'\n    elif(daynum3 == 16):\n        return '16th'\n    elif(daynum3 == 17):\n        return '17th'\n    elif(daynum3 == 18):\n        return '18th'\n    elif(daynum3 == 19):\n        return '19th'\n    elif(daynum3 == 20):\n        return '20th'\n    elif(daynum3 == 21):\n        return '21st'\n    elif(daynum3 == 22):\n        return '22nd'\n    elif(daynum3 == 23):\n        return '23rd'\n    elif(daynum3 == 24):\n        return '24th'\n    elif(daynum3 == 25):\n        return '25th'\n    elif(daynum3 == 26):\n        return '26th'\n    elif(daynum3 == 27):\n        return '27th'\n    elif(daynum3 == 28):\n        return '28th'\n    elif(daynum3 == 29):\n        return '29th'\n    elif(daynum3 == 30):\n        return '30th'\n    elif(daynum3 == 31):\n        return '31st'\ndef monthnumber_to_monthname(monthnum3):\n    '''\n    Write a function to convert a month number into month name. The month number is given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if(monthnum3 > 12):\n        return False\n    elif(monthnum3 == 1):\n        return 'Jan'\n    elif(monthnum3 == 2):\n        return 'Feb'\n    elif(monthnum3 == 3):\n        return 'Mar'\n    elif(monthnum3 == 4):\n        return 'Apr'\n    elif(monthnum3 == 5):\n        return 'May'\n    elif(monthnum3 == 6):\n        return 'Jun'\n    elif(monthnum3 == 7):\n        return 'Jul'\n    elif(monthnum3 == 8):\n        return 'Aug'\n    elif(monthnum3 == 9):\n        return 'Sep'\n    elif(monthnum3 == 10):\n        return 'Oct'\n    elif(monthnum3 == 1"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==0:\n        return None\n    if n==1:\n        return 0\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in xrange(2,n):\n        min_diff = min(arr[i]-arr[i-1], min_diff)\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    diff = arr[-1] - arr[0]\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    # a list of minimum difference values to keep track of all combinations\n    min_diff = []\n    \n    # iteration over the array\n    for i in range(n): \n        # iterating over all the elements in the array\n        for j in range(i+1,n): \n            # minimum difference is calculated by subtracting two numbers from each other\n            min_diff.append(arr[i] - arr[j]) \n    \n    # returning the minimum difference\n    return min(min_diff)\n    \ndef find_max_sum(arr,n): \n    '''\n    Write a python function to find the maximum contiguous subarray (of size k) that has sum less than or equal to a given value. https://www.geeksforgeeks.org/find-max-sum-subarray-size-k-contiguous/\n    '''\n    # to store the maximum sum possible at a given array\n    max_sum = 0\n    \n    # to store the current sum\n    current_sum = 0\n    \n    # iterating over the array\n    for i in range(n): \n        \n        # adding the element to the current sum\n        current_sum = current_sum + arr[i] \n        \n        # if the current sum is less than or equal to the given sum, the max sum is updated\n        if current_sum <= sum: \n            max_sum = current_sum \n        \n        # if the current sum is less than or equal to the given sum, the max sum is updated\n        elif current_sum > sum: \n            # if the current sum is greater than the previous sum, it is reset to 0\n            if current_sum > max_sum: \n                max_sum = current_sum \n            # since the current sum is lesser than or equal to the given sum, we update the current sum to the previous sum\n            current_sum = current_sum - arr[i-1] \n    \n    # returning the max sum\n    return max_sum\n    \ndef find_kth_element(arr,low,high,k): \n    '''\n    Write a python function to find the kth smallest element in an array. https://www.geeksforgeeks.org/kth-smallest-element-unsorted-array/\n    '''\n    \n    # condition to check the validity of the indices\n    if (high >= low): \n        # partitioning the array around the element and calculating the index of the given kth smallest element\n        pivot = partition(arr,low,high) \n        \n        # if the index is same as the kth element, return the element at the index\n        if (pivot == k-1): \n            return arr[pivot]\n        \n        # if the index is less than the kth element, recur for the right subarray\n        elif (pivot < k-1): \n            return find_kth_element(arr,pivot+1,high,k) \n        \n        # if the index is greater than the kth element, recur for the left subarray\n        else: \n            return find_kth_element(arr,low,pivot-1,k) \n            \n    return -1\n    \ndef partition(arr,low,high): \n    '''\n    Write a python function to partition the array around the element and calculate the index of the given kth smallest element. https://www.geeksforgeeks.org/kth-smallest-element-unsorted-array/\n    '''\n    \n    # the pivot is set to the last element of the array\n    pivot = arr[high] \n    \n    # index of the first element is set to -1\n    i = low-1\n    \n    # iterating over the array\n    for j in range(low,high): \n        # comparing the current element with the pivot\n        if arr[j] < pivot: \n            # swapping the current element with the index of the pivot\n            i = i+1\n            arr[i],arr[j] = arr[j],arr[i] \n            \n    # swapping the pivot element with the last element of the array\n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    \n    # returning the index of the pivot element\n    return i+1\n    \ndef find_max_num(arr,n): \n    '''\n    Write a python function to find the maximum number of consecutive 1's in the array. https://www.geeksforgeeks.org/maximum-consecutive-1s-in-an-array/\n    '''\n    \n    # the max consecutive 1's in the array\n    max_num = 0\n    \n    # initializing the counter to 0\n    count = 0\n    \n    # iterating over the array\n    for i in range(n): \n        # incrementing the counter if the current element is 1\n        if arr[i] == 1: \n            count = count + 1\n        \n        # if the current element is 0, we increment the max consecutive 1's by 1 and reset the counter to 0\n        elif arr[i] == 0: \n            max_num = max(max_num,count) \n            count = 0 \n    \n    # returning the max consecutive 1's in the array\n    return max_num\n    \ndef find_missing_num(arr,n): \n    '''\n    Write a python function to find the missing number in an array. https://www.geeksforgeeks.org/find-missing-number-in-an-array/\n    '''\n    \n    # finding the first element that is missing\n    for i in range(n): \n        # checking if the element is not present in the array\n        if arr[i]!= i+1: \n            # returning the missing number\n            return i+1 \n    \n    # if the array is not complete, it returns the last element\n    return n+1\n    \ndef is_cyclic(arr,n): \n    '''\n    Write a python function to check if the array is cyclic or not. https://www.geeksforgeeks.org/check-if-array-is-cyclic-or-not/\n    '''\n    \n    # initializing the slow and fast pointers\n    slow = 0\n    fast = 0\n    \n    # iterating over the array\n    for i in range(n): \n        \n        # fast pointer moves two steps\n        fast = fast + 2\n        \n        # if the array is not cyclic, we break the loop\n        if fast >= n: \n            break\n        \n        # comparing the current element with the next element\n        if arr[slow]!= arr[fast]: \n            return False \n        \n        # incrementing the slow pointer\n        slow = slow + 1\n    \n    # returning the result\n    return True\n    \ndef is_palindrome(arr,n): \n    '''\n    Write a python function to check if the array is palindrome or not. https://www.geeksforgeeks.org/check-if-array-is-palindrome-or-not/\n    '''\n    \n    # iterating over the array\n    for i in range(n/2): \n        \n        # if the first element is not the same as the last element, we return false\n        if arr[i]!= arr[n-i-1]: \n            return False\n        \n    # returning the result\n    return True\n    \ndef rotate(arr,n): \n    '''\n    Write a python function to rotate the array by k elements. https://www.geeksforgeeks.org/rotate-array-by-n-elements/\n    '''\n    \n    # initializing the slow and fast pointers\n    slow = 0\n    fast = n-1\n    \n    # iterating over the array\n    while fast > slow: \n        \n        # swapping the two elements\n        arr[slow],arr[fast] = arr[fast],arr[slow] \n        \n        # incrementing the slow pointer\n        slow = slow + 1\n        \n        # decrementing the fast pointer\n        fast = fast - 1\n        \n    # returning the result\n    return arr\n    \ndef is_rotation(arr1,arr2,n): \n    '''\n    Write a python function to check if the two arrays are rotations of each other or not. https://www.geeksforgeeks.org/check-if-two-arrays-are-rotations-of-each-othe"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    return arr[n-1] - arr[0]\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return min([abs(arr[i] - arr[j]) for i in range(n-1) for j in range(i+1,n)])\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    #print (arr)\n    i = 0\n    j = n-1\n    min_diff = arr[j] - arr[i]\n    while i < j:\n        if min_diff > arr[i] + arr[j]:\n            min_diff = arr[i] + arr[j]\n        if abs(arr[i] - arr[j]) < min_diff:\n            min_diff = abs(arr[i] - arr[j])\n        if arr[i] < arr[j]:\n            i += 1\n        else:\n            j -= 1\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        if (arr[i+1] - arr[i]) < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit_count = 0\n    for i in str:\n        if i.isdigit():\n            digit_count += 1\n    return digit_count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if str[i] in '0123456789':\n            count += 1\n    return count\n    \ndef string_ctr(str):\n    '''\n    Write a python function to count number of characters in a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if str[i] not in '0123456789':\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # print('str=',str)\n    return len(str)\n    # pass\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - len(str.lstrip('0'))\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n=n-1\n    a=[]\n    a.append(0)\n    while True:\n        # print(a)\n        a.append(2*a[-1])\n        if a[-1]>=n:\n            break\n    # print(a)\n    return a[n]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 4\n    else:\n        return geeksforgeeks(n-1) + geeksforgeeks(n-2)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n//2 in [0,1,2,3,4,6,8,9,12,13,14,16,18,19,20,22,23,24,25,26,27,28,29,30,32,33,34,36,37,38,39,40,42,43,44,45,46,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n*factorial(n-1)\n    p = 1\n    p_list = [p]\n    n = 1\n    i = 1\n    while len(p_list) < n:\n        p = factorial(i)\n        i += 1\n        if p not in p_list:\n            p_list.append(p)\n    return p_list[n-1]\ndef is_polite_2(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n*factorial(n-1)\n    p = 1\n    p_list = [p]\n    n = 1\n    i = 1\n    while len(p_list) < n:\n        p = factorial(i)\n        i += 1\n        if p not in p_list:\n            p_list.append(p)\n    return p_list[n-1]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    total = 0\n    polite_list = []\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            total+=i\n            polite_list.append(total)\n        elif i % 3 == 0:\n            total+=i\n            polite_list.append(total)\n        elif i % 5 == 0:\n            total+=i\n            polite_list.append(total)\n        else:\n            continue\n    return polite_list[-1]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 7\n    if n == 4:\n        return 15\n    if n == 5:\n        return 31\n    if n == 6:\n        return 62\n    if n == 7:\n        return 93\n    if n == 8:\n        return 158\n    if n == 9:\n        return 205\n    if n == 10:\n        return 261\n    if n == 11:\n        return 322\n    if n == 12:\n        return 363\n    if n == 13:\n        return 425\n    if n == 14:\n        return 496\n    if n == 15:\n        return 561\n    if n == 16:\n        return 652\n    if n == 17:\n        return 754\n    if n == 18:\n        return 865\n    if n == 19:\n        return 966\n    if n == 20:\n        return 1077\n    if n == 21:\n        return 1148\n    if n == 22:\n        return 1209\n    if n == 23:\n        return 1282\n    if n == 24:\n        return 1364\n    if n == 25:\n        return 1437\n    if n == 26:\n        return 1518\n    if n == 27:\n        return 1593\n    if n == 28:\n        return 1672\n    if n == 29:\n        return 1744\n    if n == 30:\n        return 1827\n    if n == 31:\n        return 1898\n    if n == 32:\n        return 1973\n    if n == 33:\n        return 2054\n    if n == 34:\n        return 2127\n    if n == 35:\n        return 2200\n    if n == 36:\n        return 2275\n    if n == 37:\n        return 2337\n    if n == 38:\n        return 2399\n    if n == 39:\n        return 2472\n    if n == 40:\n        return 2545\n    if n == 41:\n        return 2626\n    if n == 42:\n        return 2697\n    if n == 43:\n        return 2769\n    if n == 44:\n        return 2842\n    if n == 45:\n        return 2924\n    if n == 46:\n        return 2996\n    if n == 47:\n        return 3068\n    if n == 48:\n        return 3139\n    if n == 49:\n        return 3222\n    if n == 50:\n        return 3295\n    if n == 51:\n        return 3364\n    if n == 52:\n        return 3446\n    if n == 53:\n        return 3527\n    if n == 54:\n        return 3598\n    if n == 55:\n        return 3671\n    if n == 56:\n        return 3743\n    if n == 57:\n        return 3826\n    if n == 58:\n        return 3897\n    if n == 59:\n        return 3970\n    if n == 60:\n        return 4041\n    if n == 61:\n        return 4124\n    if n == 62:\n        return 4196\n    if n == 63:\n        return 4260\n    if n == 64:\n        return 4331\n    if n == 65:\n        return 4405\n    if n == 66:\n        return 4469\n    if n == 67:\n        return 4542\n    if n == 68:\n        return 4625\n    if n == 69:\n        return 4698\n    if n == 70:\n        return 4771\n    if n == 71:\n        return 4844\n    if n == 72:\n        return 4927\n    if n == 73:\n        return 5008\n    if n == 74:\n        return 5079\n    if n == 75:\n        return 5152\n    if n == 76:\n        return 5223\n    if n == 77:\n        return 5304\n    if n == 78:\n        return 5377\n    if n == 79:\n        return 5449\n    if n == 80:\n        return 5522\n    if n == 81:\n        return 5603\n    if n == 82:\n        return 5675\n    if n == 83:\n        return 5748\n    if n == 84:\n        return 5831\n    if n == 85:\n        return 5895\n    if n == 86:\n        return 5968\n    if n == 87:\n        return 6041\n    if n == 88:\n        return 6122\n    if n == 89:\n        return 6195\n    if n == 90:\n        return 6266\n    if n == 91:\n        return 6347\n    if n == 92:\n        return 6320\n    if n == 93:\n        return 6399\n    if n == 94:\n        return 6472\n    if n == 95:\n        return 6545\n    if n == 96:\n        return 6628\n    if n == 97:\n        return 6699\n    if n == 98:\n        return 6772\n    if n == 99:\n        return 6845\n    if n == 100:\n        return 6930\n    if n == 101:\n        return 7000\n    if n == 102:\n        return 7073\n    if n == 103:\n        return 7146\n    if n == 104:\n        return 7227\n    if n == 105:\n        return 7308\n    if n == 106:\n        return 7381\n    if n == 107:\n        return 7454\n    if n == 108:\n        return 7527\n    if n == 109:\n        return 7600\n    if n == 110:\n        return 7675\n    if n == 111:\n        return 7748\n    if n == 112:\n        return 7831\n    if n == 113:\n        return 7912\n    if n == 114:\n        return 7985\n    if n == 115:\n        return 8066\n    if n == 116:\n        return 8147\n    if n == 117:\n        return 8228\n    if n == 118:\n        return 8299\n    if n == 119:\n        return 8372\n    if n == 120:\n        return 8445\n    if n == 121:\n        return 8526\n    if n == 122:\n        return 8603\n    if n == 123:\n        return 8674\n    if n == 124:\n        return 8757\n    if n == 125:\n        return 8804\n    if n == 126:\n        return 8861\n    if n == 127:\n        return 8834\n    if n == 128:\n        return 8917\n    if n == 129:\n        return 8988\n    if n == 130:\n        return 9060\n    if n == 131:\n        return 9133\n    if n == 132:\n        return 9206\n    if n == 133:\n        return 9280\n    if n == 134:\n        return 9350\n    if n == 135:\n        return 9423\n    if n == 136:\n        return 9404\n    if n == 137:\n        return 9477\n    if n == 138:\n        return 9548\n    if n == 139:\n        return 9621\n    if n == 140:\n        return 9702\n    if n == 141:\n        return 9775\n    if n == 142:\n        return 9846\n    if n == 143:\n        return 9929\n    if n == 144:\n        return 10011\n    if n == 145:\n        return 10084\n    if n == 146:\n        return 10157\n    if n == 147:\n        return 10238\n    if n == 148:\n        return 10301\n    if n == 149:\n        return 10372\n    if n == 150:\n        return 10445\n    if n == 151:\n        return 10527\n    if n == 152:\n        return 10600\n    if n == 153:\n        return 10670\n    if n == 154:\n        return 10743\n    if n == 155:\n        return 10826\n    if n == 156:\n        return 10897\n    if n == 157:\n        return 10968\n    if n == 158:\n        return 11041\n    if n == 159:\n        return 11124\n    if n == 160:\n        return 11187\n    if n == 161:\n        return 11260\n    if n == 162:\n        return 11333\n    if n == 163:\n        return 11415\n    if n == 164:\n        return 11496\n    if n == 165:\n        return 11567\n    if n == 166:\n        return 11640\n    if n == 167:\n        return 11723\n    if n == 168"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return (((1 + math.sqrt(5))/2)**n - (1/(1 + math.sqrt(5)))**n) % 1 == 0\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    nth_polite_number = [0] * 100000\n    #nth_polite_number[0] = 0\n    nth_polite_number[1] = 1\n    nth_polite_number[2] = 2\n    for i in range(3,n+1):\n        nth_polite_number[i] = nth_polite_number[i-1] + nth_polite_number[i-2]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n < 2*math.pi\ndef is_polite_1(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n < 2*math.pi\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return (1 + n + n**2 + n**3 + n**4 + n**5 + n**6)%n == 0\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1, l1[1:])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 2:\n        return [[l1[0], l1[1]]]\n    elif l1[0] == l1[1]:\n        return [[l1[0], l1[1]]] + pair_wise(l1[2:])\n    elif l1[0]!= l1[1]:\n        return [[l1[0], l1[1]]] + pair_wise(l1[2:])\n    else:\n        raise Exception('something went wrong')\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    out = []\n    for i in range(n):\n        if i + 1 < n:\n            out.append([l1[i], l1[i+1]])\n    return out\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = sorted(l1)\n    for i in range(len(l1)-1):\n        yield (l1[i],l1[i+1])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    pairs = []\n    for i in xrange(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1[:-1], l1[1:])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(0,len(l1)-1):\n        result.append([l1[i],l1[i+1]])\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(0, len(l1) - 1):\n        result.append([l1[i], l1[i + 1]])\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if arr == []:\n        return 0\n    if len(arr) == 1:\n        return 0 if arr[0]!= sum else 1\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    if n == 1:\n        return (1 if sum == arr[0] else 0)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    table = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n        if arr[i] == sum:\n            table[i][i] = 2\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            table[i][i+1] = 2\n    for i in range(2, n):\n        for j in range(n-i):\n            table[j][j+i] = (table[j+1][j+i-1] + table[j][j+i-1])\n    return table[0][n-1]\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Initialize all the count as 0\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    else:\n        dp = [[0 for j in range(sum+1)] for i in range(n)]\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return sum*(sum+1)/2 - sum\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j]==sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    map = {}\n    for i in arr:\n        if sum-i in map:\n            return map[sum-i]+1\n        map[i] = 1\n    return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    count = 0\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(x**4 for x in range(1,n,2) if x%2!=0)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1) : \n        if i % 2!= 0 : \n            total += i**4\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    result = n*(n+1)*(2*n+1)*(3*n+1)\n    return result\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            sum = sum + i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    numbers = [i for i in range(1,n+1) if i%2==1]\n    total = sum(numbers[i]**4 for i in range(len(numbers)))\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_odd_nums = 0\n    for i in range(1, n+1, 2) : \n        sum_odd_nums = sum_odd_nums + i**4\n    return sum_odd_nums\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1) :\n        if i%2!= 0 :\n            total += i**4\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if (n < 0) : \n        print(\"Invalid Input: positive value is required\")\n    elif (n == 0) : \n        return 0\n    else : \n        return n * (n + 1) * (n + 2) * (n + 3) / 6\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total_sum = 0\n    for i in range(n) :\n        total_sum += (i * (3 * i + 1) * (2 * i + 1)) / 6\n    return total_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(x**4 for x in range(n) if x%2)\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Takes a string and returns a stack\n    # LIFO\n    stack = []\n    \n    # Traversing the Expression\n    for item in exp:\n        if item == \"(\":\n            stack.append(item)\n        elif item == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    \n    # If stack is empty, expression is balanced\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if not exp:\n        return True\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    brackets_stack = []\n    for bracket in exp:\n        if bracket in ('(', ')'):\n            brackets_stack.append(bracket)\n        else:\n            if not brackets_stack:\n                return False\n            current_bracket = brackets_stack.pop()\n            if bracket == ')' and current_bracket!= '(':\n                return False\n            if bracket == ')' and current_bracket!= '(':\n                return False\n            if bracket == '(' and current_bracket!= ')':\n                return False\n    if not brackets_stack:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef is_balanced_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef is_balanced_expression_recursive(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    elif len(exp) == 1:\n        return False\n    else:\n        p1 = exp[0]\n        p2 = exp[1]\n        if p1 == '(':\n            if p2 == ')':\n                return is_balanced_expression_recursive(exp[2:])\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for ch in exp:\n        if ch in '({[':\n            stack.append(ch)\n        elif ch in ')}]':\n            if not stack:\n                return False\n            popped = stack.pop()\n            if ch == ')' and popped!= '(':\n                return False\n            elif ch == ']' and popped!= '[':\n                return False\n            elif ch == '}' and popped!= '{':\n                return False\n    if stack:\n        return False\n    return True\n    \ndef check_expression_2(exp):\n    '''\n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 1:\n        return False\n    stack = deque()\n    mapping = {')':'(', '}':'{', ']':'['}\n    for ch in exp:\n        if ch in '({[':\n            stack.append(ch)\n        elif ch in ')}]':\n            if not stack:\n                return False\n            else:\n                popped = stack.pop()\n                if mapping[ch]!= popped:\n                    return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #dictonary\n    char_stack = deque()\n    #dictionary\n    opening = {')':'(', '}':'{', ']':'['}\n    #b[a]\n    for c in exp:\n        if c in opening.values():\n            char_stack.append(c)\n        elif c in opening.keys():\n            if char_stack and char_stack[-1] == opening[c]:\n                char_stack.pop()\n            else:\n                return False\n    return char_stack == deque()\ndef letter_combinations(digits):\n    '''\n    https://www.codewars.com/kata/5844ad46dacdd5bc7b00001b\n    Given a string representing a digital (0-9) number, return all possible letter combinations that the number could represent. Return the answer in any order.\n    '''\n    if not digits:\n        return []\n    if digits == '0':\n        return ['']\n    chars = {'1':['1','2','3'],\n              '2':['1','2','3','4'],\n              '3':['1','2','3','4','5'],\n              '4':['1','2','3','4','5','6'],\n              '5':['1','2','3','4','5','6','7'],\n              '6':['1','2','3','4','5','6','7','8'],\n              '7':['1','2','3','4','5','6','7','8','9'],\n              '8':['1','2','3','4','5','6','7','8','9','0'],\n              '9':['1','2','3','4','5','6','7','8','9','0']}\n    current = []\n    for c in chars[digits[0]]:\n        for cc in letter_combinations(digits[1:]):\n            current.append(c+cc)\n    return current\ndef get_next_lexicographical_permutations(string):\n    '''\n    https://www.codewars.com/kata/5844ad46dacdd5bc7b00001b\n    Given a string, create all permutations of the string that are lexicographically sorted.\n    '''\n    if not string:\n        return []\n    chars = [string[0]]\n    for c in string[1:]:\n        #get all perms of chars[0]\n        #get all perms of chars[1]\n        #get all perms of chars[2]\n        #...\n        chars.extend([c]+[c]+[c])\n    result = []\n    for perm in chars:\n        result.append(''.join(sorted(perm)))\n    return result\ndef merge_strings(strings):\n    '''\n    https://www.codewars.com/kata/5787fb3d4e7b8b30d0001ad\n    Given a list of strings, merge them into one string, if they have the same length, or the first string if it is longer.\n    https://www.codewars.com/kata/59a0d4ee6e9a40283400005c\n    '''\n    def merge(first, second):\n        if not first:\n            return second\n        if not second:\n            return first\n        if len(first) > len(second):\n            return first + second\n        else:\n            return second + first\n    return reduce(merge, strings)\ndef partition(string, sep):\n    '''\n    https://www.codewars.com/kata/58bcaae9c1d10d6c500006f1\n    https://www.codewars.com/kata/5f8086e35b98e7912400000c\n    Given a string, return a list of the ways that the string can be partitioned into two or more substrings. The list of substrings must be sorted lexicographically.\n    '''\n    def helper(string, index, result):\n        if index == len(string):\n            result.append('')\n            return\n        for i in range(index+1, len(string)+1):\n            if string[index:i] in string[index:i+1]:\n                helper(string, i, result)\n    result = []\n    helper(string, 0, result)\n    return sorted(result)\ndef overlap(A, B):\n    '''\n    https://www.codewars.com/kata/5e5ee9b9a34ebc4920000164\n    Given two strings, return a list that contains the index positions of the overlapping characters between the two strings. If there is no overlap, return an empty list.\n    '''\n    if not A and not B:\n        return []\n    if not A or not B:\n        return []\n    A = '_' + A\n    B = '_' + B\n    result = []\n    for i in range(1, len(A)):\n        for j in range(1, len(B)):\n            if A[i] == B[j]:\n                result.append(i)\n    return result\ndef overlap_spans(A, B):\n    '''\n    https://www.codewars.com/kata/58bc3c4f79c7a66e9c000639\n    Given two strings, return a list that contains the indexes of the start and end positions of the overlapping characters between the two strings. If there is no overlap, return an empty list.\n    '''\n    if not A and not B:\n        return []\n    if not A or not B:\n        return []\n    A = '_' + A\n    B = '_' + B\n    result = []\n    for i in range(1, len(A)):\n        for j in range(1, len(B)):\n            if A[i] == B[j]:\n                result.append([i, j])\n    return result\ndef is_valid_parenthesis(s):\n    '''\n    https://www.codewars.com/kata/58bcaae9c1d10d6c500006f1\n    https://www.codewars.com/kata/5f8086e35b98e7912400000c\n    Write a function that takes a string and returns true if the string is a valid parenthesis string, false otherwise.\n    A valid parenthesis string is any string that is empty, or is closed and unclosed within parentheses only.\n    Valid parenthesis strings are considered to be closed if they are closed in the following way:\n    that is, if a parenthesis is opened and not closed, or if a parenthesis is closed and not opened, then that is not a valid parenthesis string.\n    A valid parenthesis string is considered to be unclosed if it is closed but not opened, e.g. (() is a valid parenthesis string, but )() is not.\n    '''\n    opening = 0\n    if not s:\n        return True\n    for c in s:\n        if c == '(':\n            opening += 1\n        elif c == ')':\n            if opening:\n                opening -= 1\n            else:\n                return False\n    return opening == 0\ndef is_balanced(exp):\n    '''\n    https://www.codewars.com/kata/58bcaae9c1d10d6c500006f1\n    Write a function that takes a string and returns true if the string is a balanced parenthesis string, false otherwise.\n    A valid parenthesis string is any string that is empty, or is closed and unclosed within parentheses only.\n    Valid parenthesis strings are considered to be balanced if they are closed and unclosed within parentheses only, and not nested (e.g. )() or ()()).\n    '''\n    opening = 0\n    if not exp:\n        return True\n    for c in exp:\n        if c == '(':\n            opening += 1\n        elif c == ')':\n            if opening:\n                opening -= 1\n            else:\n                return False\n    return opening == 0\ndef is_palindrome(s):\n    '''\n    https://www.codewars.com/kata/54d8e1225f26859eb40003b8\n    https://www.codewars.com/kata/5e"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = Stack()\n    open_list = [\"(\",\"[\",\"{\"]\n    close_list = [\")\",\"]\",\"}\"]\n    for c in exp:\n        if c in open_list:\n            s.push(c)\n        if c in close_list:\n            pos = close_list.index(c)\n            if s.isEmpty():\n                return False\n            else:\n                op = s.pop()\n                if (op == \"(\" and c!= \")\") or (op == \"[\" and c!= \"]\") or (op == \"{\" and c!= \"}\"):\n                    return False\n    return s.isEmpty()\ndef build_expression_tree(exp):\n    '''\n    Write a function to build expression tree. https://www.geeksforgeeks.org/expression-tree-from-infix-expression/\n    '''\n    s = Stack()\n    open_list = [\"(\",\"[\",\"{\"]\n    close_list = [\")\",\"]\",\"}\"]\n    tree = TreeNode(None)\n    stack_ele = []\n    for c in exp:\n        if c in open_list:\n            s.push(c)\n        if c in close_list:\n            pos = close_list.index(c)\n            if s.isEmpty():\n                return None\n            else:\n                op = s.pop()\n                if (op == \"(\" and c!= \")\") or (op == \"[\" and c!= \"]\") or (op == \"{\" and c!= \"}\"):\n                    return None\n                if (op == \"(\" and c == \")\") or (op == \"[\" and c == \"]\") or (op == \"{\" and c == \"}\"):\n                    return None\n                if op == \")\":\n                    if len(stack_ele) == 0:\n                        return None\n                    else:\n                        op_ele = stack_ele.pop()\n                        if op_ele == \"(\":\n                            tree.right = build_expression_tree(s.pop())\n                        else:\n                            tree.right = TreeNode(op_ele)\n                            stack_ele.append(op_ele)\n                elif op == \"[\":\n                    if len(stack_ele) == 0:\n                        return None\n                    else:\n                        op_ele = stack_ele.pop()\n                        if op_ele == \"(\":\n                            tree.left = build_expression_tree(s.pop())\n                        else:\n                            tree.left = TreeNode(op_ele)\n                            stack_ele.append(op_ele)\n                elif op == \"{\":\n                    if len(stack_ele) == 0:\n                        return None\n                    else:\n                        op_ele = stack_ele.pop()\n                        if op_ele == \"(\":\n                            tree.left = build_expression_tree(s.pop())\n                        else:\n                            tree.left = TreeNode(op_ele)\n                            stack_ele.append(op_ele)\n    return tree\ndef print_expression_tree(root):\n    '''\n    Write a function to print the Expression Tree. https://www.geeksforgeeks.org/expression-tree-from-infix-expression/\n    '''\n    if root is None:\n        return\n    else:\n        print(root.value)\n        if root.left:\n            print_expression_tree(root.left)\n        if root.right:\n            print_expression_tree(root.right)\ndef create_expression_tree():\n    '''\n    Write a function to build expression tree. https://www.geeksforgeeks.org/expression-tree-from-infix-expression/\n    '''\n    exp = \"(((a+b)*(c-d))/e)\"\n    tree = build_expression_tree(exp)\n    print_expression_tree(tree)\ndef evaluate_expression(root):\n    '''\n    Write a function to evaluate the Expression tree. https://www.geeksforgeeks.org/expression-tree-from-infix-expression/\n    '''\n    if root is None:\n        return\n    if root.left is None and root.right is None:\n        return root.value\n    val1 = evaluate_expression(root.left)\n    val2 = evaluate_expression(root.right)\n    if root.value == \"+\":\n        return val1 + val2\n    elif root.value == \"-\":\n        return val1 - val2\n    elif root.value == \"*\":\n        return val1 * val2\n    elif root.value == \"/\":\n        return val1 / val2\n    elif root.value == \"^\":\n        return val1 ** val2\n    else:\n        return val1\ndef evaluate_expression_tree():\n    '''\n    Write a function to evaluate the Expression tree. https://www.geeksforgeeks.org/expression-tree-from-infix-expression/\n    '''\n    exp = \"(((a+b)*(c-d))/e)\"\n    tree = build_expression_tree(exp)\n    val = evaluate_expression(tree)\n    print(val)\ndef parenthesize(exp):\n    '''\n    Write a function to convert expression to parenthesized expression. https://www.geeksforgeeks.org/expression-tree-from-infix-expression/\n    '''\n    s = Stack()\n    op_list = [\"+\",\"-\",\"*\",\"/\",\"^\"]\n    for c in exp:\n        if c in op_list:\n            s.push(c)\n        else:\n            if c == \"(\":\n                s.push(c)\n            elif c == \")\":\n                while (not s.isEmpty()) and s.peek()!= \"(\":\n                    ele = s.pop()\n                    if ele in op_list:\n                        op = s.pop()\n                        s.push(ele + op)\n                    else:\n                        s.push(ele)\n                s.pop()\n    while (not s.isEmpty()):\n        ele = s.pop()\n        if ele in op_list:\n            op = s.pop()\n            s.push(ele + op)\n        else:\n            s.push(ele)\n    return s.peek()\ndef check_parentheses(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = Stack()\n    open_list = [\"(\",\"[\",\"{\"]\n    close_list = [\")\",\"]\",\"}\"]\n    for c in exp:\n        if c in open_list:\n            s.push(c)\n        if c in close_list:\n            pos = close_list.index(c)\n            if s.isEmpty():\n                return False\n            else:\n                op = s.pop()\n                if (op == \"(\" and c!= \")\") or (op == \"[\" and c!= \"]\") or (op == \"{\" and c!= \"}\"):\n                    return False\n    return s.isEmpty()\ndef parenthesize(exp):\n    '''\n    Write a function to convert expression to parenthesized expression. https://www.geeksforgeeks.org/expression-tree-from-infix-expression/\n    '''\n    s = Stack()\n    op_list = [\"+\",\"-\",\"*\",\"/\",\"^\"]\n    for c in exp:\n        if c in op_list:\n            s.push(c)\n        else:\n            if c == \"(\":\n                s.push(c)\n            elif c == \")\":\n                while (not s.isEmpty()) and s.peek()!= \"(\":\n                    ele = s.pop()\n                    if ele in op_list:\n                        op = s.pop()\n                        s.push(ele + op)\n                    else:\n                        s.push(ele)\n                s.pop()\n    while (not s.isEmpty()):\n        ele = s.pop()\n        if ele in op_list:\n            op = s.pop()\n            s.push(ele + op)\n        else:\n            s.push(ele)\n    return s.peek()\ndef convert_infix_to_postfix(exp):\n    '''\n    Write a function to convert expression to postfix expression. https://www.geeksforgeeks.org/expression-tree-from-infix-expression/\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == \"\":\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == '()' or exp == '{}' or exp == '[]':\n        return True\n    else:\n        stack = deque()\n        for x in exp:\n            if x == '(':\n                stack.append(x)\n            elif x == '{':\n                stack.append(x)\n            elif x == '[':\n                stack.append(x)\n            elif x == ')':\n                if len(stack) == 0 or stack.pop()!= '(':\n                    return False\n            elif x == '}':\n                if len(stack) == 0 or stack.pop()!= '{':\n                    return False\n            elif x == ']':\n                if len(stack) == 0 or stack.pop()!= '[':\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append('(')\n        elif exp[i] == '{':\n            stack.append('{')\n        elif exp[i] == '[':\n            stack.append('[')\n        elif exp[i] == ')':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '(':\n                return False\n        elif exp[i] == '}':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '{':\n                return False\n        elif exp[i] == ']':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '[':\n                return False\n    return True\ndef is_balanced(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append('(')\n        elif exp[i] == '{':\n            stack.append('{')\n        elif exp[i] == '[':\n            stack.append('[')\n        elif exp[i] == ')':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '(':\n                return False\n        elif exp[i] == '}':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '{':\n                return False\n        elif exp[i] == ']':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '[':\n                return False\n    return True\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append('(')\n        elif exp[i] == '{':\n            stack.append('{')\n        elif exp[i] == '[':\n            stack.append('[')\n        elif exp[i] == ')':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '(':\n                return False\n        elif exp[i] == '}':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '{':\n                return False\n        elif exp[i] == ']':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '[':\n                return False\n    return True\ndef is_balanced(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append('(')\n        elif exp[i] == '{':\n            stack.append('{')\n        elif exp[i] == '[':\n            stack.append('[')\n        elif exp[i] == ')':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '(':\n                return False\n        elif exp[i] == '}':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '{':\n                return False\n        elif exp[i] == ']':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '[':\n                return False\n    return True\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append('(')\n        elif exp[i] == '{':\n            stack.append('{')\n        elif exp[i] == '[':\n            stack.append('[')\n        elif exp[i] == ')':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '(':\n                return False\n        elif exp[i] == '}':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '{':\n                return False\n        elif exp[i] == ']':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '[':\n                return False\n    return True\ndef is_balanced(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append('(')\n        elif exp[i] == '{':\n            stack.append('{')\n        elif exp[i] == '[':\n            stack.append('[')\n        elif exp[i] == ')':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '(':\n                return False\n        elif exp[i] == '}':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '{':\n                return False\n        elif exp[i] == ']':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '[':\n                return False\n    return True\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append('(')\n        elif exp[i] == '{':\n            stack.append('{')\n        elif exp[i] == '[':\n            stack.append('[')\n        elif exp[i] == ')':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '(':\n                return False\n        elif exp[i] == '}':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '{':\n                return False\n        elif exp[i] == ']':\n            if len(stack)==0:\n                return False\n            x = stack.pop()\n            if x!= '[':\n                return False\n    return True\ndef is_balanced(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append('(')\n        elif exp[i] == '{':\n            stack.append('{')\n        elif exp[i] == '[':\n            stack.append('[')\n        elif exp["
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    splitted_str = test_str.split(' ')\n    \n    return''.join([word for word in splitted_str if len(word)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K == 0:\n        return test_str\n    if K == 1:\n        return ''.join(test_str.split())\n    else:\n        return''.join([x for x in test_str.split() if len(x)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == '':\n        return ''\n    return ''.join([char for char in test_str if len(char)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K == 0:\n        return test_str\n    else:\n        test_list = test_str.split(' ')\n        for idx, word in enumerate(test_list):\n            if len(word) == K:\n                del test_list[idx]\n        return''.join(test_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    return ''.join(test_str.split(' '))[:-K]\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    l = len(test_str)\n    begin = 0\n    while begin < l:\n        for i in range(l-begin):\n            if len(test_str[begin:begin+i+1]) == K:\n                test_str = test_str[:begin] + test_str[begin+i+1:]\n                begin = begin - 1\n                break\n        begin += 1\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    split_list = test_str.split()\n    for word in split_list:\n        if len(word) == K:\n            split_list.remove(word)\n    return''.join(split_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # edge case check\n    if K > len(test_str):\n        return test_str\n    else:\n        test_str = test_str.split(' ')\n        print test_str\n        print len(test_str)\n        return_str = \"\"\n        for i in range(len(test_str)):\n            if len(test_str[i])!= K:\n                return_str = return_str + test_str[i] +''\n        return return_str.rstrip()\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    ret = []\n    for word in test_str.split(' '):\n        if len(word) == K:\n            continue\n        else:\n            ret.append(word)\n    return''.join(ret)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(test_str.split(' ')[K:])\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=re.findall(pattern,text)\n    if(len(occurance)!=0):\n        print(\"\\nPattern %s has occured %s times in %s\"%(pattern,len(occurance),text))\n        for i in occurance:\n            print(\"\\tPattern found at index %s\"%(text.index(i)))\n    else:\n        print(\"\\nPattern %s not found in %s\"%(pattern,text))\n    \ndef occurance_string(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=re.findall(pattern,text)\n    if(len(occurance)!=0):\n        print(\"\\nPattern %s has occured %s times in %s\"%(pattern,len(occurance),text))\n    else:\n        print(\"\\nPattern %s not found in %s\"%(pattern,text))\n    \n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #patt=input(\"Enter the pattern: \")\n    patt=pattern\n    #text=input(\"Enter the text: \")\n    text=text\n    #print(patt)\n    #print(text)\n    occurance=0\n    index=0\n    flag=0\n    patt_len=len(patt)\n    text_len=len(text)\n    while index+patt_len-1<=text_len-1:\n        if text[index:index+patt_len]==patt:\n            occurance+=1\n            flag=1\n            index+=patt_len-1\n        else:\n            index+=1\n    if flag==1:\n        return occurance\n    else:\n        return None\ndef find_all_occurances_pos(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #patt=input(\"Enter the pattern: \")\n    patt=pattern\n    #text=input(\"Enter the text: \")\n    text=text\n    #print(patt)\n    #print(text)\n    occurance=0\n    index=0\n    flag=0\n    patt_len=len(patt)\n    text_len=len(text)\n    while index+patt_len-1<=text_len-1:\n        if text[index:index+patt_len]==patt:\n            occurance+=1\n            index+=patt_len-1\n        else:\n            index+=1\n    if occurance>0:\n        return occurance\n    else:\n        return None\ndef find_all_occurances_pos_2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #patt=input(\"Enter the pattern: \")\n    patt=pattern\n    #text=input(\"Enter the text: \")\n    text=text\n    #print(patt)\n    #print(text)\n    occurance=0\n    index=0\n    flag=0\n    patt_len=len(patt)\n    text_len=len(text)\n    while index+patt_len-1<=text_len-1:\n        if text[index:index+patt_len]==patt:\n            occurance+=1\n            index+=patt_len-1\n        else:\n            index+=1\n    if occurance>0:\n        return occurance\n    else:\n        return None\ndef word_splitter_pattern(pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern=pattern.lower()\n    #pattern='\\\\b[\\\\w]+\\\\b'\n    #print(pattern)\n    #pattern='[A-Za-z]+'\n    #pattern='[a-zA-Z]+'\n    #pattern='[a-z]+'\n    pattern='[a-zA-Z0-9]+'\n    text='Hello World, I am a Python programmer and I want to learn Python'\n    #print(text)\n    #text='Hello, I am a python programmer'\n    #text='Hello World'\n    #text='Hello World, I am a Python programmer and I want to learn Python'\n    #text='Hello World, I am a Python programmer and I want to learn Python'\n    #text='Hello World, I am a Python programmer and I want to learn Python'\n    occurances=re.findall(pattern,text)\n    if len(occurances)>0:\n        return occurances\n    else:\n        return None\ndef word_splitter_pattern_2(pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern=pattern.lower()\n    #pattern='\\\\b[\\\\w]+\\\\b'\n    #print(pattern)\n    #pattern='[A-Za-z]+'\n    #pattern='[a-zA-Z]+'\n    #pattern='[a-z]+'\n    pattern='[a-zA-Z0-9]+'\n    text='Hello World, I am a Python programmer and I want to learn Python'\n    #print(text)\n    #text='Hello, I am a python programmer'\n    #text='Hello World'\n    #text='Hello World, I am a Python programmer and I want to learn Python'\n    #text='Hello World, I am a Python programmer and I want to learn Python'\n    occurances=re.findall(pattern,text)\n    if len(occurances)>0:\n        return occurances\n    else:\n        return None\ndef word_splitter_pattern_3(pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern=pattern.lower()\n    #pattern='\\\\b[\\\\w]+\\\\b'\n    #print(pattern)\n    #pattern='[A-Za-z]+'\n    #pattern='[a-zA-Z]+'\n    #pattern='[a-z]+'\n    pattern='[a-zA-Z0-9]+'\n    text='Hello World, I am a Python programmer and I want to learn Python'\n    #print(text)\n    #text='Hello, I am a python programmer'\n    #text='Hello World'\n    #text='Hello World, I am a Python programmer and I want to learn Python'\n    #text='Hello World, I am a Python programmer and I want to learn Python'\n    occurances=re.findall(pattern,text)\n    if len(occurances)>0:\n        return occurances\n    else:\n        return None\ndef word_splitter_pattern_4(pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern=pattern.lower()\n    #pattern='\\\\b[\\\\w]+\\\\b'\n    #print(pattern)\n    #pattern='[A-Za-z]+'\n    #pattern='[a-zA-Z]+'\n    #pattern='[a-z]+'\n    pattern='[a-zA-Z0-9]+'\n    text='Hello World, I am a Python programmer and I want to learn Python'\n    #print(text)\n    #text='Hello, I am a python programmer'\n    #text='Hello World'\n    #text='Hello World, I am a Python programmer and I want to learn Python'\n    #text='Hello World, I am a Python programmer and I want to learn Python'\n    occurances=re.findall(pattern,text)\n    if len(occurances)>0:\n        return occurances\n    else:\n        return None\ndef word_splitter_pattern_5(pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern=pattern.lower()\n    #pattern='\\\\b[\\\\w]+\\\\b'\n    #print(pattern)\n    #pattern='[A-Za-z]+'\n    #pattern='[a-zA-Z]+'\n    #pattern='[a-z]+'\n    pattern='[a-zA-Z0-9]+'\n    text='Hello World, I am a Python programmer and I want to learn Python'\n    #print(text)\n    #text='Hello, I am a python programmer'\n    #text='Hello World'\n    #text='Hello World, I am a Python programmer and I want to learn Python'\n    #text='Hello World, I am a Python programmer and I want to learn Python'\n    occurances=re.findall(pattern,text)\n    if len(occurances)>0:\n        return occurances\n    else:\n        return None\ndef word_splitter_pattern_6(pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern=pattern.lower()\n    #pattern='\\\\b[\\\\w]+\\"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    p_count=0\n    count=0\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)]==pattern:\n            p_count+=1\n            count+=1\n    return None if p_count==0 else (count,i)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #text = input(\"Enter the string: \")\n    #pattern = input(\"Enter the pattern: \")\n    \n    text = text.lower()\n    pattern = pattern.lower()\n    patt_len = len(pattern)\n    occurance = []\n    i = 0\n    j = 0\n    while(i<=len(text)):\n        j = i+patt_len\n        if(text[i:j] == pattern):\n            occurance.append(i)\n            i = j\n        else:\n            i+=1\n    print(occurance)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        return [i.start() for i in re.finditer(pattern,text)]\n    except TypeError:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos=0\n    occurance=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            occurance+=1\n            pos=index+1\n    return occurance\ndef find_all_occurance(text,pattern):\n    '''\n    Write a function to find all the substring within a string and print them out.\n    '''\n    pos=0\n    result=[]\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result.append(index)\n            pos=index+1\n    return result\ndef count_substring(text,pattern):\n    '''\n    Write a function to count the occurances of the substrings within a string and print them out.\n    '''\n    result=[]\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            pos=index+1\n            result.append(index)\n    return len(result)\ndef count_substring_with_index(text,pattern):\n    '''\n    Write a function to count the occurances of the substrings within a string and print them out.\n    '''\n    result=[]\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result.append((index,index+len(pattern)))\n            pos=index+1\n    return result\ndef replace_string(text,pattern,replacement):\n    '''\n    Write a function to replace substrings of a string.\n    '''\n    result=text\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result=result[:index] + replacement + result[index+len(pattern):]\n            pos=index+1\n    return result\ndef replace_string_with_index(text,pattern,replacement):\n    '''\n    Write a function to replace substrings of a string.\n    '''\n    result=text\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result=result[:index] + replacement + result[index+len(pattern):]\n            pos=index+1\n    return result\ndef count_substring_with_index(text,pattern):\n    '''\n    Write a function to count the occurances of the substrings within a string and print them out.\n    '''\n    result=[]\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result.append((index,index+len(pattern)))\n            pos=index+1\n    return result\ndef remove_string(text,pattern):\n    '''\n    Write a function to remove substrings of a string.\n    '''\n    result=text\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result=result[:index] + result[index+len(pattern):]\n            pos=index+1\n    return result\ndef remove_string_with_index(text,pattern):\n    '''\n    Write a function to remove substrings of a string.\n    '''\n    result=text\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result=result[:index] + result[index+len(pattern):]\n            pos=index+1\n    return result\ndef find_all_occurance_in_string(text,pattern):\n    '''\n    Write a function to find all the substring within a string and print them out.\n    '''\n    result=[]\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result.append(index)\n            pos=index+1\n    return result\ndef find_all_occurance_in_string_with_index(text,pattern):\n    '''\n    Write a function to find all the substring within a string and print them out.\n    '''\n    result=[]\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result.append((index,index+len(pattern)))\n            pos=index+1\n    return result\ndef find_all_occurance_in_string_with_index_by_iter(text,pattern):\n    '''\n    Write a function to find all the substring within a string and print them out.\n    '''\n    result=[]\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result.append((index,index+len(pattern)))\n            pos=index+1\n    return result\ndef remove_string_by_index(text,pattern):\n    '''\n    Write a function to remove substrings of a string.\n    '''\n    result=text\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result=result[:index] + result[index+len(pattern):]\n            pos=index+1\n    return result\ndef remove_string_by_index_by_iter(text,pattern):\n    '''\n    Write a function to remove substrings of a string.\n    '''\n    result=text\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result=result[:index] + result[index+len(pattern):]\n            pos=index+1\n    return result\ndef remove_string_by_index_by_iter_and_replace(text,pattern,replacement):\n    '''\n    Write a function to remove substrings of a string.\n    '''\n    result=text\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result=result[:index] + replacement + result[index+len(pattern):]\n            pos=index+1\n    return result\ndef count_substring_with_index_by_iter(text,pattern):\n    '''\n    Write a function to count the occurances of the substrings within a string and print them out.\n    '''\n    result=[]\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result.append((index,index+len(pattern)))\n            pos=index+1\n    return len(result)\ndef count_substring_with_index_by_iter_and_replace(text,pattern,replacement):\n    '''\n    Write a function to count the occurances of the substrings within a string and print them out.\n    '''\n    result=[]\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result.append((index,index+len(pattern)))\n            pos=index+1\n    return len(result)\ndef replace_string_by_index_by_iter(text,pattern,replacement):\n    '''\n    Write a function to replace substrings of a string.\n    '''\n    result=text\n    pos=0\n    while True:\n        index=text.find(pattern,pos)\n        if index == -1:\n            break\n        else:\n            result=result[:index] + replacement + result[index+len(pattern):]\n            pos=index+1\n    return result\ndef replace_string_by_index_by_iter_and_replace(text,pattern,replacement):\n    '''\n    Write a function to replace substrings of "
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    c=0\n    while index<len(text):\n        if text[index:len(pattern)+index]==pattern:\n            c+=1\n            index+=len(pattern)\n        else:\n            index+=1\n    if c>0:\n        return c\n    else:\n        return None\n    \nprint occurance_substring('abcdefghijklmnopqrstuvwxyz','ef')\nprint occurance_substring('abcdgabcd','abcd')\nprint occurance_substring('a','a')\nprint occurance_substring('','')\nprint occurance_substring('abc','a')\nprint occurance_substring('abc','abcd')\nprint occurance_substring('abcabc','abcd')\nprint occurance_substring('abcabc','abc')\nprint occurance_substring('abcabc','a')\nprint occurance_substring('abcabcabc','abc')\nprint occurance_substring('abcabc','abcabc')\nprint occurance_substring('abcabc','abcd')\nprint occurance_substring('abcabc','abcdg')\nprint occurance_substring('abcabc','abcdgabc')\nprint occurance_substring('abcabc','abcdgabcabc')\nprint occurance_substring('abcabc','abcdgabcabcab')\nprint occurance_substring('abcabc','abcdgabcabcabab')\nprint occurance_substring('abcabc','abcdgabcabcababab')\nprint occurance_substring('abcabc','abcdgabcabcabababab')\nprint occurance_substring('abcabc','abcdgabcabcababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababab')\nprint occurance_substring('abcabc','abcdgabcabcababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occurance_substring('abcabc','abcdgabcabcabababababababab')\nprint occuranc"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position = []\n    x = re.search(pattern,text)\n    if x:\n        position.append(x.start())\n        position.append(x.end())\n        return position\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.subn(pattern,r'\\1',text)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    len1=len(text)\n    len2=len(pattern)\n    i=0\n    while i<len1-len2+1:\n        index=0\n        j=0\n        while j<len2:\n            if text[i+j]!=pattern[j]:\n                break\n            index=index+1\n            j=j+1\n        if index==len2:\n            print(i)\n        i=i+1\n    else:\n        print(None)\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if (nums[i] % 2)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 0:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    assert type(nums) is list\n    if nums == []:\n        return True\n    if type(nums[0]) is list:\n        return odd_position(nums[0])\n    if type(nums[0]) is int:\n        return nums[0]%2 == 1\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all([nums[i]%2!= 0 for i in range(1, len(nums), 2)])\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    for i in range(0, len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for idx, char in enumerate(test_str):\n        if char in vowels and (idx == 0 or not test_str[idx-1] in vowels):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in xrange(len(test_str)-1):\n        if test_str[i] in ['a','e','i','o','u','A','E','I','O','U']:\n            if test_str[i] == test_str[i+1]:\n                vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    total_vowels = 0\n    for i in range(0, len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            total_vowels += 1\n    return total_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(0, len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return len([char for char in test_str if char in ['a', 'e', 'i', 'o', 'u']])\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            if test_str[i-1] not in ['a', 'e', 'i', 'o', 'u']:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_dict = {'a':0, 'e':0, 'i':0, 'o':0, 'u':0}\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou':\n            if test_str[i+1] in 'aeiou':\n                vowel_dict[test_str[i]] += 1\n    return vowel_dict\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if not isinstance(test_str, str):\n        raise TypeError(\"Passed argument must be string type\")\n    else:\n        count = 0\n        for i in range(1, len(test_str)):\n            if test_str[i] in ('a', 'e', 'i', 'o', 'u'):\n                if test_str[i-1] in ('a', 'e', 'i', 'o', 'u'):\n                    count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if len(test_str) < 1:\n        return 0\n    else:\n        if test_str[0] in 'aeiou':\n            return 1 + count_vowels(test_str[1:])\n        else:\n            return 0 + count_vowels(test_str[1:])\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr_sum = 0\n    for i in arr:\n        arr_sum += i\n    return arr_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if arr == []:\n        return 0\n    total = 0\n    for i in range(0,len(arr)):\n        if arr[i] not in arr[:i]:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_of_numbers = 0\n    for i in arr:\n        sum_of_numbers += i\n    return sum_of_numbers\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x=[]\n    x = [x.append(e) for e in arr if e not in x]\n    print \"The sum of elements in the list that do not repeat is %s\" %(sum(x))\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    temp=[]\n    sum=0\n    for i in arr:\n        if i not in temp:\n            temp.append(i)\n            sum=sum+i\n    return sum\n    \nprint find_sum([1,2,3,4,4,4,5,5,5]"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n    \nprint find_sum([1,2,3,4,5,6,7,1,1,2,3,3,4,4,5,6,7,7,8,1,2,3,3,4,4,5,6,7,8,8])\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sorted_list=sorted(list1)\n    return [list(g) for k, g in groupby(sorted_list)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = [[list1[0]]]\n    for k,g in groupby(list1[1:]):\n        result[-1].append(list(g))\n    return result\ndef find_sum_of_two_numbers(list1, list2):\n    '''\n    Write a function to find if there are any two numbers from the first list which sum to a given number in the second list.\n    '''\n    for i in list1:\n        for j in list2:\n            if i+j == number:\n                return True\n    return False\ndef find_anagrams(list1, list2):\n    '''\n    Write a function to check whether two words are anagrams or not.\n    '''\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\ndef get_permutations(list1):\n    '''\n    Write a function to get all permutations of a list.\n    '''\n    from itertools import permutations\n    result = permutations(list1)\n    return list(result)\ndef build_dictionary(string1):\n    '''\n    Write a function to create a dictionary from two strings. The first string contains key and value separated by a colon,\n    and the second string contains the keys and the values separately. The format for key:value in the second string is the same as\n    in the dictionary returned by your function.\n    '''\n    string2 = string1.split(',')\n    return dict(zip(string2[0::2],string2[1::2]))\ndef get_permutations(string1):\n    '''\n    Write a function to get all permutations of a string.\n    '''\n    from itertools import permutations\n    result = permutations(string1)\n    return list(result)\ndef get_permutations(string1):\n    '''\n    Write a function to get all permutations of a string.\n    '''\n    from itertools import permutations\n    result = permutations(string1)\n    return list(result)\ndef get_permutations(string1):\n    '''\n    Write a function to get all permutations of a string.\n    '''\n    from itertools import permutations\n    result = permutations(string1)\n    return list(result)\ndef get_permutations(string1):\n    '''\n    Write a function to get all permutations of a string.\n    '''\n    from itertools import permutations\n    result = permutations(string1)\n    return list(result)\ndef count_vowels(string1):\n    '''\n    Write a function to count the vowels in a string.\n    '''\n    return len(string1.split('a'))+len(string1.split('e'))+len(string1.split('i'))+len(string1.split('o'))+len(string1.split('u'))\ndef find_largest_index(list1):\n    '''\n    Write a function to find the index of the largest number in a list.\n    '''\n    return list1.index(max(list1))\ndef find_smallest_index(list1):\n    '''\n    Write a function to find the index of the smallest number in a list.\n    '''\n    return list1.index(min(list1))\ndef find_largest_index(list1):\n    '''\n    Write a function to find the index of the largest number in a list.\n    '''\n    return list1.index(max(list1))\ndef find_smallest_index(list1):\n    '''\n    Write a function to find the index of the smallest number in a list.\n    '''\n    return list1.index(min(list1))\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove the first and last characters of a string.\n    '''\n    return list1[1:-1]\ndef get_string_without_first_and_last(list1):\n    '''\n    Write a function to remove th"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    duplicates = []\n    i = 0\n    while i < len(list1) - 1:\n        if list1[i] == list1[i + 1]:\n            duplicates.append(list1[i])\n            i += 2\n        else:\n            duplicates.append(list1[i])\n            i += 1\n    if i == len(list1) - 1:\n        duplicates.append(list1[i])\n    return duplicates\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #list1 = [1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]\n    new_list = []\n    for k, g in groupby(list1):\n        new_list.append(list(g))\n    print new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    consecutive_duplicates_of_list1 = []\n    grouped_by_consecutive_duplicates = []\n    list1 = list(list1)\n    for i in list1:\n        grouped_by_consecutive_duplicates.append(list(groupby(list1, lambda x: x == i)))\n    for i in grouped_by_consecutive_duplicates:\n        for j in i[1]:\n            consecutive_duplicates_of_list1.append(i[0]+[j])\n    return consecutive_duplicates_of_list1\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result\ndef flatten_list(list1):\n    '''\n    Write a function to flatten a list of lists\n    '''\n    result = []\n    for sublist in list1:\n        for item in sublist:\n            result.append(item)\n    return result\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate an image (in-place).\n    You have to rotate an image by 90 degrees in a counter-clockwise direction.\n    There are two solutions: 1) Transpose the matrix, 2) Reverse each row.\n    '''\n    result = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            result[i][j] = matrix[len(matrix)-j-1][i]\n    return result\ndef check_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    A palindrome is a word that reads the same backward as forward, such as \"racecar\" or \"abccba\".\n    '''\n    reversed_string = ''.join(reversed(string))\n    return string == reversed_string\ndef find_max_average(list1):\n    '''\n    Write a function to find the maximum average of a list of numbers.\n    '''\n    summation = 0\n    for num in list1:\n        summation += num\n    result = summation / len(list1)\n    return result\ndef sort_list(list1):\n    '''\n    Write a function to sort a list of strings based on their length in descending order.\n    '''\n    return sorted(list1, key=lambda x: len(x), reverse=True)\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate an image (in-place).\n    You have to rotate an image by 90 degrees in a counter-clockwise direction.\n    There are two solutions: 1) Transpose the matrix, 2) Reverse each row.\n    '''\n    result = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            result[i][j] = matrix[len(matrix)-j-1][i]\n    return result\ndef find_max_average(list1):\n    '''\n    Write a function to find the maximum average of a list of numbers.\n    '''\n    summation = 0\n    for num in list1:\n        summation += num\n    result = summation / len(list1)\n    return result\ndef check_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    A palindrome is a word that reads the same backward as forward, such as \"racecar\" or \"abccba\".\n    '''\n    reversed_string = ''.join(reversed(string))\n    return string == reversed_string\ndef sort_list(list1):\n    '''\n    Write a function to sort a list of strings based on their length in descending order.\n    '''\n    return sorted(list1, key=lambda x: len(x), reverse=True)\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate an image (in-place).\n    You have to rotate an image by 90 degrees in a counter-clockwise direction.\n    There are two solutions: 1) Transpose the matrix, 2) Reverse each row.\n    '''\n    result = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            result[i][j] = matrix[len(matrix)-j-1][i]\n    return result\ndef check_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    A palindrome is a word that reads the same backward as forward, such as \"racecar\" or \"abccba\".\n    '''\n    reversed_string = ''.join(reversed(string))\n    return string == reversed_string\ndef sort_list(list1):\n    '''\n    Write a function to sort a list of strings based on their length in descending order.\n    '''\n    return sorted(list1, key=lambda x: len(x), reverse=True)\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate an image (in-place).\n    You have to rotate an image by 90 degrees in a counter-clockwise direction.\n    There are two solutions: 1) Transpose the matrix, 2) Reverse each row.\n    '''\n    result = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            result[i][j] = matrix[len(matrix)-j-1][i]\n    return result\ndef find_max_average(list1):\n    '''\n    Write a function to find the maximum average of a list of numbers.\n    '''\n    summation = 0\n    for num in list1:\n        summation += num\n    result = summation / len(list1)\n    return result\ndef check_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    A palindrome is a word that reads the same backward as forward, such as \"racecar\" or \"abccba\".\n    '''\n    reversed_string = ''.join(reversed(string))\n    return string == reversed_string\ndef sort_list(list1):\n    '''\n    Write a function to sort a list of strings based on their length in descending order.\n    '''\n    return sorted(list1, key=lambda x: len(x), reverse=True)\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate an image (in-place).\n    You have to rotate an image by 90 degrees in a counter-clockwise direction.\n    There are two solutions: 1) Transpose the matrix, 2) Reverse each row.\n    '''\n    result = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            result[i][j] = matrix[len(matrix)-j-1][i]\n    return result\ndef check_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    A palindrome is a word that reads the same backward as forward, such as \"racecar\" or \"abccba\".\n    '''\n    reversed_string = ''.join(reversed(string))\n    return string == reversed_string\ndef sort_list(list1):\n    '''\n    Write a function to sort a list of strings based on their length in descending order.\n    '''\n    return sorted(list1, key=lambda x: len(x), reverse=True)\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate an image (in-place).\n    You have to rotate an image by 90 degrees in a counter-clockwise direction.\n    There are two solutions: 1) Transpose the matrix, 2) Reverse each row.\n    '''\n    result = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            result[i][j] = matrix[len(matrix)-j-1][i]\n    return result\ndef check_palindrome(string):\n    '''\n    Write "
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return []\n    res = []\n    for k, g in groupby(list1):\n        res += [list(j) for i, j in enumerate(g) if i == 0 or j!= list1[i - 1]]\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = []\n    for k, g in groupby(list1):\n        output.append([list(g)])\n    return output\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    grped = groupby(list1)\n    res = []\n    for key, group in grped:\n        res.append([key] * len(list(group)))\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for k, g in groupby(list1):\n        new_list.append([list(g)])\n    return new_list\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create empty dictionary\n    dictionary = {}\n    # Iterate through list and create tuples of list and number of occurrences\n    for item in list1:\n        if item not in dictionary:\n            dictionary[item] = 1\n        else:\n            dictionary[item] += 1\n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in list1:\n        if tuple(i) not in dict.keys():\n            dict[tuple(i)] = 1\n        else:\n            dict[tuple(i)] += 1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for index in range(len(list1)):\n        for sublist in list1[index+1:]:\n            if tuple(sublist) in sublist_count:\n                sublist_count[tuple(sublist)] += 1\n            else:\n                sublist_count[tuple(sublist)] = 1\n    return sublist_count\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        a = tuple(list1[i])\n        if a in dict1:\n            dict1[a] += 1\n        else:\n            dict1[a] = 1\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    #This is a very interesting problem!\n    #Lets first get the unique elements within a list.\n    #I will return a dictionary with the unique elements as the keys, and the values as the number of times they appeared in the list\n    #example: {1:1, 2:1, 3:1} would represent 1,2,3 as unique elements within a list\n    #we can then proceed to return the number of lists within a list\n    #first lets find the unique elements within a list\n    #this is going to be a very slow operation, so we will create a helper function to return the unique elements within a list\n    #we will use the python set class, which is a hash table data structure\n    def helper(list1):\n        list1 = list(set(list1))\n        return list1\n    #now lets begin the counting of elements within a list\n    #we will use the count method to count the number of times an element appears in a list\n    #we will then use the helper function to create a dictionary with unique elements as the keys, and the number of times they appear as the values\n    dict1 = {}\n    for element in list1:\n        if element not in dict1:\n            dict1[element] = list1.count(element)\n    #we will now create a dictionary for the number of lists within a list\n    #we will create a helper function to do this\n    #We will use a simple loop to create a dictionary of lists\n    #The keys will be the number of lists, and the values will be a list of lists\n    dict2 = {}\n    for element in list1:\n        if list1.count(element) not in dict2:\n            dict2[list1.count(element)] = [element]\n        else:\n            dict2[list1.count(element)].append(element)\n    return dict2\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    new_list = [tuple(i) for i in list1]\n    list_dict = {}\n    for i in new_list:\n        list_dict[i] = new_list.count(i)\n    return list_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for i in list1:\n        if type(i) == list:\n            counts[tuple(i)] = counts.get(tuple(i), 0) + 1\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for index in range(len(list1)):\n        if list1[index] not in count:\n            count[list1[index]] = [index]\n        else:\n            count[list1[index]].append(index)\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for x in list1:\n        if tuple(x) in d.keys():\n            d[tuple(x)] += 1\n        else:\n            d[tuple(x)] = 1\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    def unique_sublists_helper(list1, my_dict):\n        if not list1:\n            return my_dict\n        \n        if list1[0] not in my_dict:\n            my_dict[list1[0]] = 1\n        else:\n            my_dict[list1[0]] += 1\n            \n        return unique_sublists_helper(list1[1:], my_dict)\n    \n    return unique_sublists_helper(list1, {})\n    \n    \n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for tup in test_list:\n        for k in range(2,len(tup)):\n            print(tup,k,tup[:k],tup[k:])\n            for x in combinations(tup,k):\n                print(x)\n                print(sum(x))\n                \n                \n                \n                \n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # print(list(combinations(test_list, 2)))\n    # print([sum(t) for t in combinations(test_list, 2)])\n    return [sum(t) for t in combinations(test_list, 2)]\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # your code here\n    #print test_list\n    final_list = []\n    for i in range(1,len(test_list)):\n        for j in combinations(test_list,i):\n            final_list.append(sum(j))\n    #print final_list\n    return final_list\ndef is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i == 0:\n                return False\n    return True\ndef prime_sums(n):\n    final_list = []\n    for i in range(1,n+1):\n        if is_prime(i) and is_prime(n-i):\n            final_list.append((i,n-i))\n    return final_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in combinations(test_list,2):\n        yield (i[0]+i[1])\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort()\n    combs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] + test_list[j] not in combs:\n                combs.append(test_list[i] + test_list[j])\n    return combs\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    list_tuple = [(a,b,c) for a in test_list for b in test_list for c in test_list]\n    print(list_tuple)\n    return list_tuple\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    count = 0\n    test_list = sorted(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if(test_list[i][0] + test_list[j][0] == test_list[i][1]+test_list[j][1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuple_list = []\n    for i in range(1,len(test_list)+1):\n        tuple_list.extend(list(combinations(test_list,i)))\n    return tuple_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #print(list(combinations(test_list, 2)))\n    #print(len(list(combinations(test_list, 2))))\n    comb_list = []\n    for c in combinations(test_list, 2):\n        comb_list.append(sum(c))\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    for x in test_list:\n        for i in range(1,len(x)):\n            combs += combinations(x,i)\n    return combs\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div = 1\n    for i in range(1, n+1) :\n        if(n%i == 0) :\n            div = div + 1\n    if div%2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            count = count + 1\n    if count % 2 == 0 :\n        return True\n    else :\n        return False\n    \ndef is_square(n) :\n    '''\n    Write a python function to check whether the number is a perfect square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    h = int(math.sqrt(n))\n    if h*h == n :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    sqr_root = math.sqrt(n)\n    if sqr_root.is_integer():\n        sqr_root = int(sqr_root)\n        divisors = divisors + sqr_root\n    else:\n        divisors = divisors + sqr_root\n    \n    divisors = divisors + n / 2\n    divisors = divisors + 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    if n % 2 == 0 :\n        for i in range(1,int(math.sqrt(n))+1) :\n            if n % i == 0 :\n                count = count + 2\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            cnt += 2\n    return cnt\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    for i in range(1, n) : \n        if (n % i == 0) : \n            count += 1\n    if (count % 2 == 0) : \n        return True \n    else : \n        return False \ndef prime_num(n) : \n    '''\n    Write a python function to check whether the given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if (n == 1) : \n        return False \n    elif (n == 2) : \n        return True \n    elif (n == 3) : \n        return True \n    elif (n > 3) : \n        if (n % 2 == 0) : \n            return False \n        else : \n            for i in range(3, math.floor(math.sqrt(n)), 2) : \n                if (n % i == 0) : \n                    return False \n            return True \n    else : \n        return False \ndef is_prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if (n == 1) : \n        return False \n    elif (n == 2) : \n        return True \n    elif (n > 2) : \n        if (n % 2 == 0) : \n            return False \n        else : \n            for i in range(3, math.floor(math.sqrt(n)), 2) : \n                if (n % i == 0) : \n                    return False \n            return True \n    else : \n        return False \ndef nth_prime(n) : \n    '''\n    Write a python function to find the nth prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    count = 0 \n    number = 1 \n    while (count < n) : \n        number += 1\n        if (prime_num(number)) : \n            count += 1 \n    return number \ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if (n == 1) : \n        return 1 \n    else : \n        return (n * factorial(n - 1)) \ndef fibonacci(n) : \n    '''\n    Write a python function to find the nth Fibonacci number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if (n == 1) : \n        return 1 \n    elif (n == 2) : \n        return 1 \n    else : \n        return (fibonacci(n - 1) + fibonacci(n - 2)) \ndef sum_series(n, a=0, b=1) : \n    '''\n    Write a python function to find the nth sum series number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if (n == 1) : \n        return a \n    elif (n == 2) : \n        return b \n    else : \n        return sum_series(n - 1, a, b) + sum_series(n - 2, a, b) \ndef sum_series_recursive(n, a=0, b=1) : \n    '''\n    Write a python function to find the nth sum series number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if (n == 1) : \n        return a \n    elif (n == 2) : \n        return b \n    else : \n        return sum_series_recursive(n - 1, a, b) + sum_series_recursive(n - 2, a, b) \ndef list_fibonacci(n) : \n    '''\n    Write a python function to find the nth fibonacci number in a list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    fibonacci_list = [] \n    for i in range(1, n) : \n        fibonacci_list.append(fibonacci(i))\n    return fibonacci_list \ndef list_fibonacci_recursive(n) : \n    '''\n    Write a python function to find the nth fibonacci number in a list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    fibonacci_list = [] \n    for i in range(1, n) : \n        fibonacci_list.append(fibonacci_recursive(i))\n    return fibonacci_list \ndef list_factorial(n) : \n    '''\n    Write a python function to find the nth factorial number in a list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    factorial_list = [] \n    for i in range(1, n) : \n        factorial_list.append(factorial(i))\n    return factorial_list \ndef list_factorial_recursive(n) : \n    '''\n    Write a python function to find the nth factorial number in a list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    factorial_list = [] \n    for i in range(1, n) : \n        factorial_list.append(factorial_recursive(i))\n    return factorial_list \ndef print_list(l) : \n    '''\n    Write a python function to print a list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    for i in l : \n        print(i) \ndef print_list_recursive(l) : \n    '''\n    Write a python function to print a list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if (len(l) == 1) : \n        print(l[0]) \n    else : \n        print(l[0])\n        print_list_recursive(l[1:]) \ndef insert_list(l) : \n    '''\n    Write a python function to insert a new node in a list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if (l == None) : \n        return l \n    elif (l[0] < l[1]) : \n        temp = l[0] \n        l[0] = l[1] \n        l[1] = temp \n        insert_list(l[2:]) \n    elif (l[0] > l[1]) : \n        temp = l[1] \n        l[1] = l[0] \n        l[0] = temp \n        insert_list(l[2:]) \n    elif (l[0] == l[1]) : \n        l.pop(0) \n        insert_list(l) \n    return l \ndef insert_list_recursive(l) : \n    '''\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return sum(1 for i in range(1,n) if n%i == 0)%2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    num = 1\n    if n == 1 : \n        return num\n    if n == 2 : \n        return 2\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            num+=1\n    return num\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    if divisors%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            divisors = divisors + 1\n    return divisors % 2 == 0 \n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    if arr == []:\n        return 0\n    else:\n        return sum(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr)\n    \ndef count_subarray_with_given_sum(arr, s):\n    '''\n    Write a python function to count the number of subarrays with a given sum. https://www.geeksforgeeks.org/count-subarrays-with-given-sum/\n    '''\n    # table[i] will be storing the count of subarrays from\n    # arr[0]... arr[i] having sum equal to s\n    table = [0]*(s+1)\n    \n    # initialize the table\n    table[0] = 1\n    \n    # store the count of subarrays with sum 0\n    count = 1\n    \n    # table[i] stores count of subarrays with sum\n    # arr[0]... arr[i-1]\n    for i in range(1, len(arr)+1):\n        # if arr[i-1] is greater than sum, increment the count\n        # of subarrays by sum-arr[i-1]\n        if arr[i-1] > s:\n            table[i] = table[i-1]\n            \n        else:\n            # if arr[i-1] is less than or equal to sum, then\n            # increment the count of subarrays with sum by\n            # incrementing the count of subarrays with sum - arr[i-1]\n            table[i] += table[i-1]\n            \n            # if arr[i-1] and arr[i-1] + arr[i] is less than or\n            # equal to sum, then increment the count of subarrays\n            # with sum by table[arr[i-1] + arr[i]]\n            if arr[i-1] <= s and s-arr[i-1] <= arr[i]:\n                table[i] += table[arr[i-1]+arr[i]]\n                \n        # increment count of subarrays with sum by table[arr[i]]\n        count += table[arr[i-1]]\n        \n    return count\n    \ndef count_subarray_with_given_sum_using_pointers(arr, s):\n    '''\n    Write a python function to count the number of subarrays with a given sum. https://www.geeksforgeeks.org/count-subarrays-with-given-sum/\n    '''\n    # table[i] will be storing the count of subarrays from\n    # arr[0]... arr[i] having sum equal to s\n    table = [0]*(s+1)\n    \n    # initialize the table\n    table[0] = 1\n    \n    # store the count of subarrays with sum 0\n    count = 1\n    \n    # table[i] stores count of subarrays with sum\n    # arr[0]... arr[i-1]\n    for i in range(1, len(arr)+1):\n        # if arr[i-1] is greater than sum, increment the count\n        # of subarrays by sum-arr[i-1]\n        if arr[i-1] > s:\n            table[i] = table[i-1]\n            \n        else:\n            # if arr[i-1] is less than or equal to sum, then\n            # increment the count of subarrays with sum by\n            # incrementing the count of subarrays with sum - arr[i-1]\n            table[i] += table[i-1]\n            \n            # if arr[i-1] and arr[i-1] + arr[i] is less than or\n            # equal to sum, then increment the count of subarrays\n            # with sum by table[arr[i-1] + arr[i]]\n            if arr[i-1] <= s and s-arr[i-1] <= arr[i]:\n                table[i] += table[arr[i-1]+arr[i]]\n                \n        # increment count of subarrays with sum by table[arr[i]]\n        count += table[arr[i-1]]\n        \n    return count\n    \ndef count_subarray_with_given_sum_using_prefix_sum(arr, s):\n    '''\n    Write a python function to count the number of subarrays with a given sum. https://www.geeksforgeeks.org/count-subarrays-with-given-sum/\n    '''\n    # table[i] will be storing the count of subarrays from\n    # arr[0]... arr[i] having sum equal to s\n    table = [0]*(s+1)\n    \n    # initialize the table\n    table[0] = 1\n    \n    # store the count of subarrays with sum 0\n    count = 1\n    \n    # table[i] stores count of subarrays with sum\n    # arr[0]... arr[i-1]\n    for i in range(1, len(arr)+1):\n        # if arr[i-1] is greater than sum, increment the count\n        # of subarrays by sum-arr[i-1]\n        if arr[i-1] > s:\n            table[i] = table[i-1]\n            \n        else:\n            # if arr[i-1] is less than or equal to sum, then\n            # increment the count of subarrays with sum by\n            # incrementing the count of subarrays with sum - arr[i-1]\n            table[i] += table[i-1]\n            \n            # if arr[i-1] and arr[i-1] + arr[i] is less than or\n            # equal to sum, then increment the count of subarrays\n            # with sum by table[arr[i-1] + arr[i]]\n            if arr[i-1] <= s and s-arr[i-1] <= arr[i]:\n                table[i] += table[arr[i-1]+arr[i]]\n                \n        # increment count of subarrays with sum by table[arr[i]]\n        count += table[arr[i-1]]\n        \n    return count\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(0,len(arr)):\n        if len(arr[i:])%2!=0:\n            for j in range(i,len(arr)):\n                s += arr[j]\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in xrange(0, len(arr), 2):\n        sum += sum_subarray(arr, i, len(arr))\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    # if array is empty or of length 1\n    if len(arr)==0 or len(arr)==1:\n        return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        total_sum += sum(arr[i:i+1])\n    return total_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    for index in range(len(arr)):\n        if index % 2 == 0:\n            odd_length_sum += sum(arr[index:len(arr)])\n    return odd_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    def _odd_length_sum(arr):\n        arr_sum = 0\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                arr_sum += sum(arr[i:j+1])\n        return arr_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if (j-i)%2 == 1:\n                total += sum(arr[i:j])\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        # odd indices start from the 1st element\n        total += sum(arr[i::2])\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert the rgb values to their respective ranges.\n    rgb_range = 255.0\n    red = r / rgb_range\n    green = g / rgb_range\n    blue = b / rgb_range\n    max_of_rgb = max(red, green, blue)\n    min_of_rgb = min(red, green, blue)\n    # Determine the value of hue, saturation and brightness\n    if max_of_rgb == min_of_rgb:\n        hue = 0\n    elif max_of_rgb == red:\n        hue = 60 * (((green - blue) / (max_of_rgb - min_of_rgb)) % 6)\n    elif max_of_rgb == green:\n        hue = 60 * (((blue - red) / (max_of_rgb - min_of_rgb)) + 2)\n    elif max_of_rgb == blue:\n        hue = 60 * (((red - green) / (max_of_rgb - min_of_rgb)) + 4)\n    # Now determine the saturation and brightness\n    if max_of_rgb == 0:\n        sat = 0\n    else:\n        sat = 1 - min_of_rgb / max_of_rgb\n    if sat == 0:\n        val = max_of_rgb\n    else:\n        val = max_of_rgb * (1 - min_of_rgb / 255)\n    return hue, sat, val\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    maximum = max(r, g, b)\n    minimum = min(r, g, b)\n    delta = maximum - minimum\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    min_val = min(r,g,b)\n    max_val = max(r,g,b)\n    delta = max_val - min_val\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb_to_hsv_table = np.array([[ -1,  1, -1],\n                                [-1, -1, 0],\n                                [ -1,  0, 1],\n                                [  0,  1, 1]])\n    hsv_color = np.array([r, g, b])\n    return np.dot(rgb_to_hsv_table, hsv_color)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta_rgb = max_rgb - min_rgb\n    v = max_rgb\n    if delta_rgb == 0:\n        h = 0\n    elif max_rgb == r:\n        h = 60 * (((g - b) / delta_rgb) % 6)\n    elif max_rgb == g:\n        h = 60 * (((b - r) / delta_rgb) + 2)\n    else:\n        h = 60 * (((r - g) / delta_rgb) + 4)\n    if max_rgb == 0:\n        s = 0\n    else:\n        s = delta_rgb / max_rgb\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    R, G, B = r/255.0, g/255.0, b/255.0\n    Cmax = max(R, G, B)\n    Cmin = min(R, G, B)\n    delta = Cmax - Cmin\n    if delta == 0:\n        H = 0\n    elif Cmax == R:\n        H = (60 * ((G - B) / delta) + 360) % 360\n    elif Cmax == G:\n        H = (60 * ((B - R) / delta) + 120) % 360\n    elif Cmax == B:\n        H = (60 * ((R - G) / delta) + 240) % 360\n    if Cmax == 0:\n        S = 0\n    else:\n        S = delta / Cmax\n    V = Cmax\n    return H, S, V\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    diff_c = max_c - min_c\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = 60.0 * (((g - b) / delta) % 6)\n    elif cmax == g:\n        h = 60.0 * (((b - r) / delta) + 2)\n    elif cmax == b:\n        h = 60.0 * (((r - g) / delta) + 4)\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    v = cmax\n    return (h, s, v)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i%2==0:\n            even = even * i\n        else:\n            odd = odd * i\n    return even,odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if list1==[]:\n        return\n    if len(list1)==1:\n        return list1[0]\n    else:\n        return list1[0]*mul_even_odd(list1[2:])\n    \n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return reduce(lambda x, y: x*y, [x for x in list1 if x % 2 == 0]) * reduce(lambda x, y: x*y, [x for x in list1 if x % 2!= 0])\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for number in list1:\n        if number % 2 == 0:\n            even_product = even_product * number\n        else:\n            odd_product = odd_product * number\n    return (even_product, odd_product)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    num1=1\n    num2=1\n    for item in list1:\n        if item%2==0:\n            num1=num1*item\n        else:\n            num2=num2*item\n    return num1,num2\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i%2==0:\n            even = even * i\n        else:\n            odd = odd * i\n    print even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return even * odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum1 = 1\n    for i in list1:\n        if i%2 == 0:\n            sum1 *= i\n    return sum1\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_numbers=0\n    odd_numbers=0\n    product=0\n    for i in list1:\n        if i%2==0:\n            even_numbers+=1\n            product+=i\n        else:\n            odd_numbers+=1\n    product=product/product\n    print even_numbers,odd_numbers\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for item in list1:\n        if item % 2 == 0:\n            even += item\n        else:\n            odd += item\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str == '':\n        return []\n    else:\n        return list(map(int, test_str[1:-1].split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    import re\n    parsed_tuple = re.findall(r'\\d+', test_str)\n    return tuple(map(int, parsed_tuple))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Using eval() to convert string to tuple.\n    return eval(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str[1:-1].split(',')[0]), int(test_str[1:-1].split(',')[1])\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    num = 0\n    res = [int(x) for x in test_str.split()]\n    return res\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.replace(',', '').split()))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    i = len(a)-1\n    j = i -1\n    while(i>0 and a[i-1]>x):\n        a[i], a[j] = a[j], a[i]\n        i=i-1\n        j=j-1\n    return i\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    i = len(a)-1\n    j = i -1\n    while(i>0 and a[i-1]>x):\n        a[i], a[j] = a[j], a[i]\n        i=i-1\n        j=j-1\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect(a, x)\n    if pos == len(a):\n        a.append(x)\n    else:\n        a.insert(pos, x)\n    return a\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1\n    \na = [0,2,4,6,8,9,11,15,20,25,30,40]\nprint right_insertion(a, 8)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = lo + (hi - lo) / 2\n        if a[mid] == x:\n            return mid\n        elif x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == len(a):\n        a.append(x)\n    elif a[i] < x:\n        a.insert(i + 1, x)\n    else:\n        a.insert(i, x)\n    return a\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a)==0:\n        return 0\n    elif a[len(a)-1]<x:\n        return len(a)\n    elif a[0]>x:\n        return 0\n    else:\n        mid = int(len(a)/2)\n        if a[mid]>x:\n            return right_insertion(a[:mid],x)\n        else:\n            return mid+right_insertion(a[mid:],x)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    bisect.insort(a, x)\n    return a.index(x)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    pos = bisect.bisect_right(a, x)\n    if pos == l:\n        a.append(x)\n    else:\n        a[pos] = x\n    return pos\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"(?<!^)(a)([b]{3})(?!$)\"\n    result = re.match(pattern, text)\n    if result:\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*)(b){3}')\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\nprint(text_match_three(\"abbb\"))\nprint(text_match_three(\"ababbb\"))\nprint(text_match_three(\"ababbbb\"))\nprint(text_match_three(\"bbbbbbb\"))\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'ab{3}',text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('ab{3}',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text) is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text_match = re.search(r'a.{3}b', text)\n    if text_match:\n        return text_match.group()\n    else:\n        return 'Nothing found'\n    \nprint text_match_three(\"ababbb\")\nprint text_match_three(\"abbabbbbb\")\nprint text_match_three(\"a\")\nprint text_match_three(\"abbb\")\nprint text_match_three(\"ababbbbbba\")\nprint text_match_three(\"abc\")\nprint text_match_three(\"bba\")\nprint text_match_three(\"bb\")\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'ab{3}', text)\n    return match\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(\"a+b\", text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    if result:\n        print result.group()\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'a(.*)b(.*)b(.*)b(.*)b(.*)b',text)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    l = len(test_list)\n    l1 = len(test_str)\n    return tuple(test_list+test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Python 3\n    #new_tuple = tuple(test_list)\n    #return new_tuple\n    # Python 2\n    return tuple(test_list) + (test_str,)\n    \ndef merge(test_tuple, test_string):\n    '''\n    Write a function to merge a tuple and a string into a new tuple.\n    '''\n    # Python 3\n    #new_tuple = tuple(test_tuple) + (test_string,)\n    #return new_tuple\n    # Python 2\n    return test_tuple + (test_string,)\n    \ndef filter_words(test_string):\n    '''\n    Write a function to filter the empty strings in the list of strings.\n    '''\n    # Python 3\n    #new_list = [string for string in test_string if string!= \"\"]\n    #return new_list\n    # Python 2\n    return filter(lambda word: word!= \"\", test_string)\n    \ndef odd_even(test_int):\n    '''\n    Write a function to convert an integer into an odd or even number.\n    '''\n    # Python 3\n    #if test_int % 2 == 0:\n    #    return \"even\"\n    #return \"odd\"\n    # Python 2\n    return \"even\" if test_int % 2 == 0 else \"odd\"\n    \ndef is_consonant(test_char):\n    '''\n    Write a function that returns True if the given character is a consonant and False if it is a vowel.\n    '''\n    # Python 3\n    #return test_char.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # Python 2\n    return test_char.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \ndef rev_word(test_string):\n    '''\n    Write a function to reverse a word.\n    '''\n    # Python 3\n    #return \"\".join(reversed(test_string))\n    # Python 2\n    return \"\".join(reversed(test_string))\n    \ndef left_join(test_tuple):\n    '''\n    Write a function to join a tuple together.\n    '''\n    # Python 3\n    #return \"\".join(test_tuple)\n    # Python 2\n    return \"\".join(test_tuple)\n    \ndef create_deck(test_num):\n    '''\n    Write a function to create a deck of cards.\n    '''\n    # Python 3\n    #return [test_num + \"-\" + suit for suit in suits]\n    # Python 2\n    return [test_num + \"-\" + suit for suit in suits]\n    \ndef compare(test_tuple1, test_tuple2):\n    '''\n    Write a function to compare two tuples.\n    '''\n    # Python 3\n    #return \"\".join(test_tuple1) == \"\".join(test_tuple2)\n    # Python 2\n    return test_tuple1 == test_tuple2\n    \ndef check_tuple(test_tuple):\n    '''\n    Write a function to check if a tuple is a triangle or not.\n    '''\n    # Python 3\n    #return len(test_tuple) == 3 and all(isinstance(number, int) for number in test_tuple)\n    # Python 2\n    return len(test_tuple) == 3 and all(isinstance(number, (int, long)) for number in test_tuple)\n    \ndef check_dict(test_dict):\n    '''\n    Write a function to check if a dictionary is a triangle or not.\n    '''\n    # Python 3\n    #return len(test_dict) == 3 and all(isinstance(key, str) and isinstance(value, int) for (key, value) in test_dict.items())\n    # Python 2\n    return len(test_dict) == 3 and all(isinstance(key, (str, unicode)) and isinstance(value, (int, long)) for (key, value) in test_dict.items())\n    \ndef check_list(test_list):\n    '''\n    Write a function to check if a list is a triangle or not.\n    '''\n    # Python 3\n    #return len(test_list) == 3 and all(isinstance(value, int) for value in test_list)\n    # Python 2\n    return len(test_list) == 3 and all(isinstance(value, (int, long)) for value in test_list)\n    \ndef f_string(test_str):\n    '''\n    Write a function to print out a string in format: '{name},{lastname}'.\n    '''\n    # Python 3\n    #return f\"{test_str} {test_str[-2::-1]}\"\n    # Python 2\n    return \"Hello %s %s\" % (test_str, test_str[-2::-1])\n    \ndef distance(test_tuple1, test_tuple2):\n    '''\n    Write a function to calculate the distance between two tuples.\n    '''\n    # Python 3\n    #return sum([abs(test_tuple1[i] - test_tuple2[i]) for i in range(len(test_tuple1))])\n    # Python 2\n    return sum(abs(test_tuple1[i] - test_tuple2[i]) for i in range(len(test_tuple1)))\n    \ndef insert(test_list, test_dict, test_str):\n    '''\n    Write a function to insert a new key:value pair into a dictionary.\n    '''\n    # Python 3\n    #test_dict[test_str] = test_list\n    #return test_dict\n    # Python 2\n    return test_dict.update({test_str: test_list})\n    \ndef loop_thru_list(test_list):\n    '''\n    Write a function to loop through a list and print out each element.\n    '''\n    # Python 3\n    for i in test_list:\n        print(i)\n    # Python 2\n    for i in test_list:\n        print i\n    \ndef loop_thru_dict(test_dict):\n    '''\n    Write a function to loop through a dictionary and print out each key and value pair.\n    '''\n    # Python 3\n    for i in test_dict:\n        print(i, test_dict[i])\n    # Python 2\n    for i in test_dict:\n        print i, test_dict[i]\n    \ndef duplicate_list(test_list):\n    '''\n    Write a function to check if a list contains duplicate values.\n    '''\n    # Python 3\n    #return len(test_list)!= len(set(test_list))\n    # Python 2\n    return len(test_list)!= len(set(test_list))\n    \ndef get_kth_element(test_list, test_int):\n    '''\n    Write a function to find the Kth element of a list.\n    '''\n    # Python 3\n    #return test_list[test_int]\n    # Python 2\n    return test_list[test_int]\n    \ndef get_count(test_list, test_value):\n    '''\n    Write a function to get the number of occurrences of a given value in a list.\n    '''\n    # Python 3\n    #return test_list.count(test_value)\n    # Python 2\n    return test_list.count(test_value)\n    \ndef get_count_list(test_list, test_value):\n    '''\n    Write a function to get the count of each element of a list.\n    '''\n    # Python 3\n    #return [test_list.count(element) for element in test_list]\n    # Python 2\n    return [test_list.count(element) for element in test_list]\n    \ndef find_k_largest(test_list, test_int):\n    '''\n    Write a function to find the kth largest element of a list.\n    '''\n    # Python 3\n    #return sorted(test_list, reverse=True)[test_int - 1]\n    # Python 2\n    return sorted(test_list, reverse=True)[test_int - 1]\n    \ndef find_k_smallest(test_list, test_int)"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple += tuple(test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split(', '))\n    for i in range(len(test_list)):\n        if (test_list[i]!= test_str.split(', ')[i]):\n            return False\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = []\n    for i in range(len(test_list)):\n        if test_list[i] in test_str:\n            test_tuple.append(test_list[i])\n    return tuple(test_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = list()\n    for s in test_str:\n        tuple_list.append(s)\n    for s in test_list:\n        tuple_list.append(s)\n    return tuple(tuple_list)\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0 and i % 2 == 0:\n            count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for num in nums:\n        if num % 2 == 0 and nums.index(num) % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(num%2==0 for num in nums[::2])\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in xrange(len(nums)):\n        if index%2 == 0 and nums[index]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = True\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    def even_position(nums):\n        for i in range(len(nums)):\n            if i % 2 == 0 and nums[i] % 2!= 0:\n                return False\n        return True\n    return even_position(nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if (i + 1) % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return len([x for x in nums[::2] if x%2==0]) == len(nums[::2])\n    \ndef permutations(nums):\n    '''\n    Write a python function to check whether every permutation of a given list is a palindrome.\n    '''\n    permutations_list = [list(i) for i in permutations(nums)]\n    return [''.join(i) for i in permutations_list if is_palindrome(i)]\n    \ndef is_palindrome(nums):\n    '''\n    Write a python function to check whether a given list is a palindrome.\n    '''\n    return ''.join(nums) == ''.join(nums[::-1])\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check whether two given strings are anagrams of each other.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef is_permutation(s1, s2):\n    '''\n    Write a python function to check whether two given strings are permutations of each other.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef replace_vowels(string):\n    '''\n    Write a python function to replace all vowels in a string with '*'\n    '''\n    vowels = set('aeiouAEIOU')\n    return ''.join(['*' if i in vowels else i for i in string])\n    \ndef is_anagram_by_length(s1, s2):\n    '''\n    Write a python function to check whether two strings are anagrams of each other by length.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef get_anagrams(word, words):\n    '''\n    Write a python function to get the anagrams of a given word from a list of words.\n    '''\n    return [w for w in words if is_anagram(word, w)]\n    \ndef pattern(n):\n    '''\n    Write a python function to get the pattern of an integer N.\n    '''\n    return '\\n'.join([str(i) * i for i in range(1, n+1)])\n    \ndef index_of_coincidence(nums):\n    '''\n    Write a python function to get the index of coincidence (IC) of a given list of numbers.\n    '''\n    n = len(nums)\n    s = sum(nums)\n    return float(s*(s-n))/(n*(n-1))\n    \ndef max_product(nums):\n    '''\n    Write a python function to get the maximum product of three numbers from a list.\n    '''\n    nums.sort()\n    return nums[-1] * nums[-2] * nums[-3]\n    \ndef is_largest_product_in_grid(grid):\n    '''\n    Write a python function to get the product of the largest product in a grid, given the grid is a list of lists of numbers.\n    '''\n    def largest_product(grid):\n        n = len(grid)\n        m = len(grid[0])\n        max_product = 0\n        for i in range(n):\n            for j in range(m):\n                #print i, j, grid[i][j]\n                if i == 0 and j == 0:\n                    max_product = max(max_product, grid[i][j])\n                elif i == 0:\n                    max_product = max(max_product, grid[i][j] * grid[i][j-1] * grid[i][j-2])\n                elif j == 0:\n                    max_product = max(max_product, grid[i][j] * grid[i-1][j] * grid[i-2][j])\n                else:\n                    max_product = max(max_product, grid[i][j] * grid[i-1][j] * grid[i-2][j])\n        return max_product\n    \n    n = len(grid)\n    m = len(grid[0])\n    \n    max_product = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                max_product = max(max_product, grid[i][j])\n            elif i == 0:\n                max_product = max(max_product, grid[i][j] * grid[i][j-1] * grid[i][j-2])\n            elif j == 0:\n                max_product = max(max_product, grid[i][j] * grid[i-1][j] * grid[i-2][j])\n            else:\n                max_product = max(max_product, grid[i][j] * grid[i-1][j] * grid[i-2][j])\n    return max_product\n    \ndef is_pallindrome(nums):\n    '''\n    Write a python function to check whether a given number is a palindrome.\n    '''\n    n = len(nums)\n    return ''.join(str(nums[i]) for i in range(n//2)) == ''.join(str(nums[i]) for i in range(n-n//2, n//2))\n    \ndef is_pallindrome_by_length(nums):\n    '''\n    Write a python function to check whether a given list is a palindrome by length.\n    '''\n    n = len(nums)\n    return ''.join(str(nums[i]) for i in range(n//2)) == ''.join(str(nums[i]) for i in range(n-n//2, n//2))\n    \ndef is_abundant(n):\n    '''\n    Write a python function to check whether a given number is a abundant number.\n    '''\n    return sum(i for i in range(1, n) if n%i == 0) > n\n    \ndef is_abundant_by_length(nums):\n    '''\n    Write a python function to check whether a given list is a abundant by length.\n    '''\n    n = len(nums)\n    return [True if sum(nums[i] for i in range(j, n) if nums[i] < nums[j]) > nums[j] else False for j in range(n)]\n    \ndef is_perfect(n):\n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return sum(i for i in range(1, n) if n%i == 0) == n\n    \ndef is_perfect_by_length(nums):\n    '''\n    Write a python function to check whether a given list is a perfect by length.\n    '''\n    n = len(nums)\n    return [True if sum(nums[i] for i in range(j, n) if nums[i] < nums[j]) == nums[j] else False for j in range(n)]\n    \ndef is_perfect_or_abundant(nums):\n    '''\n    Write a python function to check whether a given number is perfect or abundant.\n    '''\n    return any(is_perfect_by_length(nums)) or any(is_abundant_by_length(nums))\n    \ndef find_missing(nums):\n    '''\n    Write a python function to find the missing number from a given list.\n    '''\n    n = len(nums)\n    return (n*(n+1))//2 - sum(nums)\n    \ndef find_missing_by_length(nums):\n    '''\n    Write a python function to find the missing number from a given list by length.\n    '''\n    n = len(nums)\n    return (n*(n+1))//2 - sum(nums)\n    \ndef is_pandigital(n):\n    '''\n    Write a python function to check whether a given number is pandigital.\n    '''\n    s = str(n)\n    return len(set(s)) == 10 and '0' not in s\n    \ndef is_pandigital_by_length(nums):\n    '''\n    Write a pytho"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #first, get rid of the nested tuples, if any\n    #a list comprehension would do this, but this looks more \n    #readable and is actually faster than using a list and a \n    #for loop\n    return (tup for tup in test_tup if type(tup)!= tuple)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    l=[]\n    for each in test_tup:\n        if type(each)==tuple:\n            l.append(each)\n    return tuple(l)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while True:\n        try:\n            test_tup = tuple(filter(lambda x: not isinstance(x, tuple), test_tup))\n        except ValueError:\n            return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    l = []\n    for i in test_tup:\n        if type(i) is not tuple:\n            l.append(i)\n        else:\n            l.extend(remove_nested(i))\n    return tuple(l)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for x in test_tup:\n        if isinstance(x, tuple):\n            remove_nested(x)\n        else:\n            pass\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        if len(test_tup) == 1:\n            return remove_nested(test_tup[0])\n        else:\n            return tuple(map(lambda x: remove_nested(x), test_tup[1:]))\n    else:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(x for x in test_tup if x not in test_tup[0])\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = [x for x in test_tup]\n    for i in range(0,len(test_list)):\n        if isinstance(test_list[i], tuple):\n            test_list[i] = remove_nested(test_list[i])\n    return tuple(test_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(sub_tuple for sub_tuple in test_tup if not any(sub_tuple[0] == s for s in sub_tup[1:]))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) is list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Define a count variable to count the number of elements in the list\n    count = 0\n    # Loop through the elements in the list\n    for element in input_list:\n        # Count the number of elements\n        count += 1\n    # Return the number of elements\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    while(input_list!= []): \n        count = count + 1\n        input_list = input_list[1:]\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == None:\n        return 0\n    if type(input_list) == list:\n        return 1 + count_list(input_list[1:])\n    else:\n        return 0 + count_list(input_list[1:])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    for i in range(length-1,0,-1):\n        if arr[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = int((low+high)/2)\n        if arr[mid]==x:\n            high = mid-1\n        elif arr[mid]>x:\n            high = mid-1\n        else:\n            low = mid+1\n    return low\ndef first(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = int((low+high)/2)\n        if arr[mid]==x:\n            low = mid+1\n        elif arr[mid]>x:\n            high = mid-1\n        else:\n            low = mid+1\n    return low\ndef linearSearch(arr,x):\n    '''\n    Write a python function to implement linear search.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    for i in range(len(arr)):\n        if arr[i]==x:\n            return i\n    return -1\ndef binarySearch(arr,x):\n    '''\n    Write a python function to implement binary search.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = int((low+high)/2)\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\ndef exponentialSearch(arr,x):\n    '''\n    Write a python function to implement exponential search.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = int((low+high)/2)\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\ndef _update_heap(arr,heap,k):\n    '''\n    Write a python function to implement a priority queue.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    heap[k] = arr[0]\n    i = 1\n    while i<len(arr):\n        if arr[i]<heap[0]:\n            heap[0] = arr[i]\n        else:\n            temp = heap[i]\n            parent = int((i-1)/2)\n            while parent>=0 and arr[parent]<temp:\n                heap[parent] = temp\n                temp = heap[parent]\n                parent = int((parent-1)/2)\n            heap[parent+1] = temp\n        i = i+1\n    return heap\ndef insert(arr,x):\n    '''\n    Write a python function to implement a priority queue.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    heap = [0]\n    arr.append(x)\n    _update_heap(arr,heap,len(arr)-1)\n    return heap\ndef delete(arr,k):\n    '''\n    Write a python function to implement a priority queue.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    if k>len(arr)-1:\n        return -1\n    arr[0] = arr[len(arr)-1]\n    arr = arr[:len(arr)-1]\n    heap = [0]\n    _update_heap(arr,heap,0)\n    return heap\ndef heap_sort(arr):\n    '''\n    Write a python function to implement heap sort.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    for i in range(len(arr)-1,0,-1):\n        arr[0],arr[i] = arr[i],arr[0]\n        heap = [0]\n        _update_heap(arr,heap,0)\n    return arr\ndef _min_heapify(arr,k):\n    '''\n    Write a python function to implement a min heap.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    if k>len(arr)-1:\n        return -1\n    left = 2*k+1\n    right = 2*k+2\n    min_index = k\n    if left<=len(arr)-1 and arr[left]<arr[min_index]:\n        min_index = left\n    if right<=len(arr)-1 and arr[right]<arr[min_index]:\n        min_index = right\n    if min_index!=k:\n        arr[k],arr[min_index] = arr[min_index],arr[k]\n        _min_heapify(arr,min_index)\ndef min_heap_sort(arr):\n    '''\n    Write a python function to implement a min heap.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    heap = [0]\n    _min_heapify(arr,0)\n    return arr\ndef _max_heapify(arr,k):\n    '''\n    Write a python function to implement a max heap.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    if k>len(arr)-1:\n        return -1\n    left = 2*k+1\n    right = 2*k+2\n    max_index = k\n    if left<=len(arr)-1 and arr[left]>arr[max_index]:\n        max_index = left\n    if right<=len(arr)-1 and arr[right]>arr[max_index]:\n        max_index = right\n    if max_index!=k:\n        arr[k],arr[max_index] = arr[max_index],arr[k]\n        _max_heapify(arr,max_index)\ndef max_heap_sort(arr):\n    '''\n    Write a python function to implement a max heap.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    heap = [0]\n    _max_heapify(arr,0)\n    return arr\ndef count(arr,x):\n    '''\n    Write a python function to implement count.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]==x:\n            count = count+1\n    return count\ndef _first(arr,k):\n    '''\n    Write a python function to implement first.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    if k>len(arr)-1:\n        return -1\n    return arr[k]\ndef first(arr,x):\n    '''\n    Write a python function to implement first.\n    '''\n    if arr is None:\n        return -1\n    if len(arr)<=0:\n        return -1\n    k = 0\n    while arr[k]!=x:\n        k = k+1\n    return k\ndef _last(arr,k)"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #return arr.index(x) if x in arr else -1\n    return arr[-1:].index(x)+1 if x in arr else -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    if arr[l-1] == x:\n        return l-1\n    if arr[l-1] > x:\n        return last(arr[:l-1],x)\n    if arr[0] > x:\n        return last(arr[1:],x)\n    return last(arr[1:],x)+1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return (len(arr)-1)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        if arr[0] == x:\n            return 0\n        else:\n            return -1\n    else:\n        mid = len(arr)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return last(arr[:mid],x)\n        else:\n            return last(arr[mid+1:],x) + mid + 1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    n = len(arr)\n    i = 0\n    while i < n-1:\n        if arr[i] == x:\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr or arr[-1]!=x:\n        return -1\n    else:\n        return len(arr)-1\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'^[a-z]+[a-z]+b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\ba[^\\ba]*b')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = 'a.*b$'\n    pat = re.compile(pat)\n    return(pat.search(text))\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(^a.+b$)')\n    match = pattern.search(text)\n    return match\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search(r'\\ba+?b', text)\n    return result.group() if result else None\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(a.*b)')\n    result = pattern.search(text)\n    return result.group()\nprint text_starta_endb('ab')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    p = re.compile(r'a.*b$')\n    if p.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #r'(?=.*?a.*?b)': Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    #'(?=.*?a.*?b)'\n    pattern = re.compile(r'(?=.*?a.*?b)')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    expression = 'a.*b$'\n    if re.search(expression, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # s = \"ab\"\n    # match = re.match(\"ab\",s)\n    # print match.group()\n    # s = \"aba\"\n    # match = re.match(\"ab\",s)\n    # print match.group()\n    # s = \"aaba\"\n    # match = re.match(\"ab\",s)\n    # print match.group()\n    # s = \"aaab\"\n    # match = re.match(\"ab\",s)\n    # print match.group()\n    # s = \"aabaab\"\n    # match = re.match(\"ab\",s)\n    # print match.group()\n    s = \"ab\"\n    match = re.match(\"ab\",s)\n    print match.group()\n    # match = re.match(\"aabaab\",s)\n    # print match.group()\n    # s = \"aba\"\n    # match = re.match(\"ab\",s)\n    # print match.group()\n    # s = \"aba\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"abaa\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"abab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"aaaaa\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababb\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbb\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbb\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbb\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbb\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbb\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbb\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbaa\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbaab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n    # s = \"ababbbbbbbbbaaaaaaababababbbbbbbbbaaaaaaabab\"\n    # match = re.match(\"aba\",s)\n    # print match.group()\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if not dict:\n        return 0\n    else:\n        return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum = sum + dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict:\n        sum += dict[x]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s = 0\n    for i in dict.values():\n        s += i\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(l, r+1): \n        if i % 2!= 0: \n            s += i \n    return s \n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(l,r) if i%2!=0])\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if not isinstance(n,int) or n<1:\n        return None\n    if n<2:\n        return 1\n    return n+sum_odd(n-2)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(n+1)[1::2])\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n % 2 + sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Code here\n    if n<0:\n        return 0\n    else:\n        return n+sum_odd(n-2)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(l,r+1):\n        if(i%2!= 0):\n            s += i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    i = n + 1\n    sum_odd = 0\n    while i > n:\n        if i % 2!= 0:\n            sum_odd += i\n        i -= 1\n    return sum_odd\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0 \n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return reduce(lambda x,y:x+y, arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for e in arr:\n        total += e\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \ndef _mult(arr):  \n    '''\n    Write a python function to find the multiplication of an array.\n    '''\n    return reduce(operator.mul,arr)\n    \ndef _mean(arr):  \n    '''\n    Write a python function to find the mean of an array.\n    '''\n    return float(_sum(arr))/len(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp=n<<d\n    temp=temp^(2<<d-1)\n    return temp\ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp=n>>d\n    temp=temp^(2<<d-1)\n    return temp\n    \ndef left_shift(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if not isinstance(n,int) or not isinstance(d,int):\n        return None\n    if n<0 or d<0:\n        return None\n    n=bin(n)[2:]\n    n=n[-32:]\n    if d>len(n):\n        return None\n    else:\n        n=n[-d:]+n[:-d]\n        return int(n,2)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l = 32-d\n    n = (n & ((1<<l)-1)) + (n >> d)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #(1<<d)-1\n    return ((n << d) | ((n & (1<<(32-d))) >> (32-d)))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #The 32 bits will be rotated by 2**d which is the number of times to shift bits to the left\n    return ((n << d) | (n >> (32-d))) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d|n>>(32-d)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    s=bin(n)[2:]\n    s='0'*(32-len(s))+s\n    s=s[-d:]+s[:-d]\n    return int(s,2)\ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    s=bin(n)[2:]\n    s='0'*(32-len(s))+s\n    s=s[:32-d]+s[32-d:]\n    return int(s,2)\ndef in_hex(s):\n    '''\n    convert a string to hex, ignore all invalid charcters\n    '''\n    return ''.join([hex(ord(c))[2:].rjust(2,'0') for c in s])\ndef S_box(x):\n    '''\n    The S-Box converts 32 bit to 48 bit\n    '''\n    s=bin(x)[2:]\n    s='0'*(48-len(s))+s\n    return int(s[6:],2)^int(s[0:6],2)\ndef P_box(x):\n    '''\n    The P-Box is used to convert 48 bit to 32 bit\n    '''\n    s=bin(x)[2:]\n    s='0'*(32-len(s))+s\n    return int(s,2)\ndef XOR(x,y):\n    '''\n    This is a helper function to xor 2 numbers, will be used in encrypt and decrypt\n    '''\n    s=bin(x)[2:]\n    s='0'*(32-len(s))+s\n    s2=bin(y)[2:]\n    s2='0'*(32-len(s2))+s2\n    return int(s,2)^int(s2,2)\ndef encrypt(x,k):\n    '''\n    Encrypting the plaintext x by the key k using AES algorithm\n    '''\n    x=in_hex(x)\n    k=in_hex(k)\n    x=XOR(x,k)\n    x=S_box(x)\n    x=P_box(x)\n    x=P_box(x)\n    x=right_rotate(x,1)\n    x=P_box(x)\n    return hex(x)[2:].rjust(8,'0')\ndef decrypt(x,k):\n    '''\n    Decrypting the ciphertext x by the key k using AES algorithm\n    '''\n    x=in_hex(x)\n    k=in_hex(k)\n    x=P_box(x)\n    x=P_box(x)\n    x=S_box(x)\n    x=right_rotate(x,1)\n    x=XOR(x,k)\n    x=S_box(x)\n    x=P_box(x)\n    x=P_box(x)\n    x=in_hex(x)\n    return x\ndef pad(m):\n    '''\n    The function will pad the plaintext m to a 32 bit block by appending 0's to the end\n    '''\n    if len(m)%32==0:\n        return m\n    m+=('0'*(32-len(m)%32))\n    return m\ndef unpad(m):\n    '''\n    The function will remove the padding of the plaintext m to a 32 bit block by removing the last 32 bits\n    '''\n    return m[:-ord(m[len(m)-1:])]\ndef encrypt_and_pad(m,k):\n    '''\n    The function will encrypt the plaintext m and then pad the ciphertext to a 32 bit block by appending 0's to the end\n    '''\n    m=in_hex(m)\n    k=in_hex(k)\n    m=XOR(m,k)\n    m=P_box(m)\n    m=P_box(m)\n    m=P_box(m)\n    m=S_box(m)\n    m=right_rotate(m,1)\n    m=P_box(m)\n    m=P_box(m)\n    return hex(m)[2:].rjust(8,'0')\ndef decrypt_and_unpad(m,k):\n    '''\n    The function will decrypt the ciphertext m and then remove the padding to a 32 bit block by removing the last 32 bits\n    '''\n    m=in_hex(m)\n    k=in_hex(k)\n    m=P_box(m)\n    m=P_box(m)\n    m=S_box(m)\n    m=right_rotate(m,1)\n    m=XOR(m,k)\n    m=S_box(m)\n    m=P_box(m)\n    m=P_box(m)\n    m=in_hex(m)\n    return unpad(m)\ndef key_schedule(k):\n    '''\n    This function will generate a 64bit key schedule, one schedule for each round\n    '''\n    s=[]\n    s.append(in_hex(k))\n    s[0]=in_hex(s[0])\n    for i in range(0,10):\n        x=left_rotate(s[i],1)\n        x=in_hex(x)\n        x=left_rotate(x,1)\n        s.append(in_hex(x))\n    return s\ndef AES_encrypt(m,k,rounds):\n    '''\n    The function will encrypt the plaintext m with the key k and rounds rounds using AES algorithm\n    '''\n    m=pad(m)\n    k=key_schedule(k)\n    ciphertext=''\n    for i in range(0,rounds):\n        m=in_hex(m)\n        m=XOR(m,k[i])\n        m=S_box(m)\n        m=P_box(m)\n        m=P_box(m)\n        ciphertext+=hex(m)[2:].rjust(8,'0')\n        m=in_hex(m)\n    return ciphertext\ndef AES_decrypt(c,k,rounds):\n    '''\n    The function will decrypt the ciphertext c with the key k and rounds rounds using AES algorithm\n    '''\n    m=c\n    k=key_schedule(k)\n    plaintext=''\n    for i in range(0,rounds):\n        m=in_hex(m)\n        m=S_box(m)\n        m=P_box(m)\n        m=P_box(m)\n        m=XOR(m,k[10-i])\n        m=in_hex(m)\n        plaintext+=m\n    return unpad(plaintext)\ndef main():\n    m='a'*16\n    k='a'*16\n    m=pad(m)\n    k=pad(k)\n    print(encrypt(m,k))\n    print(decrypt(encrypt(m,k),k))\n    m='a'*16\n    k='a'*16\n    print(encrypt_and_pad(m,k))\n    print(decrypt_and_unpad(encrypt_and_pad(m,k),k))\n    k='a'*16\n    c=AES_encrypt(m,k,10)\n    print(c)\n    print(AES_decrypt(c,k,10))\nif __name__=='__main__':\n    main()"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 2**(32-d)\n    return (n << d) & mask | (n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    return n | (n << 8) & 0x00ffffff\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    new_text = re.sub(r'\\s+', '', text)\n    return new_text\n    \ndef split_words(text):\n    '''\n    Write a function to split a string into words.\n    '''\n    words = re.split(r'\\s+', text)\n    return words\n    \ndef is_abecedarian(word):\n    '''\n    Write a function to check if a word is abecedarian.\n    '''\n    # if re.search('^(\\s*[a-zA-Z]*\\s*)+$', word):\n    #     return True\n    # else:\n    #     return False\n    \n    if re.match('^(\\s*[a-zA-Z]*\\s*)+$', word):\n        return True\n    else:\n        return False\n    \ndef is_abecedarian_with_index(word):\n    '''\n    Write a function to check if a word is abecedarian.\n    '''\n    # if re.search('^(\\s*[a-zA-Z]*\\s*)+$', word):\n    #     return True\n    # else:\n    #     return False\n    \n    if re.match('^(\\s*[a-zA-Z]*\\s*)+$', word):\n        return True, word\n    else:\n        return False, word\n    \ndef is_abecedarian_with_index_and_word(word):\n    '''\n    Write a function to check if a word is abecedarian.\n    '''\n    # if re.search('^(\\s*[a-zA-Z]*\\s*)+$', word):\n    #     return True\n    # else:\n    #     return False\n    \n    if re.match('^(\\s*[a-zA-Z]*\\s*)+$', word):\n        return True, word\n    else:\n        return False, word\n    \ndef remove_punctuations(word):\n    '''\n    Write a function to remove punctuations from a string.\n    '''\n    \n    word = re.sub(r'[,;.!?]', '', word)\n    return word\n    \ndef convert_word_to_int(word):\n    '''\n    Write a function to convert a word to an integer.\n    '''\n    if word.isdigit():\n        return int(word)\n    else:\n        return -1\n    \ndef sort_words_by_length(words):\n    '''\n    Write a function to sort a list of words by length.\n    '''\n    # return sorted(words, key=len)\n    return sorted(words, key=lambda x:len(x))\n    \ndef sort_words_by_frequency(words):\n    '''\n    Write a function to sort a list of words by frequency.\n    '''\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    \n    return sorted(freq, key=lambda x:freq[x], reverse=True)\n    \ndef sort_words_by_alphabetical_order(words):\n    '''\n    Write a function to sort a list of words by alphabetical order.\n    '''\n    return sorted(words)\n    \ndef sort_words_by_reversed_alphabetical_order(words):\n    '''\n    Write a function to sort a list of words by reversed alphabetical order.\n    '''\n    return sorted(words, reverse=True)\n    \ndef sort_words_by_alphabetical_order_by_index(words):\n    '''\n    Write a function to sort a list of words by alphabetical order by index.\n    '''\n    return sorted(words, key=lambda x:x[0])\n    \ndef sort_words_by_reversed_alphabetical_order_by_index(words):\n    '''\n    Write a function to sort a list of words by reversed alphabetical order by index.\n    '''\n    return sorted(words, key=lambda x:x[0], reverse=True)\n    \ndef find_longest_word(words):\n    '''\n    Write a function to find the longest word in a list of words.\n    '''\n    longest_word = words[0]\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n    \ndef find_longest_word_by_index(words):\n    '''\n    Write a function to find the longest word in a list of words.\n    '''\n    longest_word = words[0]\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word, words.index(longest_word)\n    \ndef find_longest_word_by_index_and_word(words):\n    '''\n    Write a function to find the longest word in a list of words.\n    '''\n    longest_word = words[0]\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word, words.index(longest_word)\n    \ndef find_longest_words(words):\n    '''\n    Write a function to find all the longest words in a list of words.\n    '''\n    longest_words = []\n    for word in words:\n        if len(word) > len(longest_words):\n            longest_words = [word]\n        elif len(word) == len(longest_words):\n            longest_words.append(word)\n    return longest_words\n    \ndef find_longest_words_by_index(words):\n    '''\n    Write a function to find all the longest words in a list of words.\n    '''\n    longest_words = []\n    for word in words:\n        if len(word) > len(longest_words):\n            longest_words = [word]\n        elif len(word) == len(longest_words):\n            longest_words.append(word)\n    return longest_words, [words.index(word) for word in longest_words]\n    \ndef find_longest_words_by_index_and_word(words):\n    '''\n    Write a function to find all the longest words in a list of words.\n    '''\n    longest_words = []\n    for word in words:\n        if len(word) > len(longest_words):\n            longest_words = [word]\n        elif len(word) == len(longest_words):\n            longest_words.append(word)\n    return longest_words, [words.index(word) for word in longest_words]\n    \ndef find_longest_n_words(words, n):\n    '''\n    Write a function to find all the longest n words in a list of words.\n    '''\n    longest_words = []\n    for word in words:\n        if len(word) > len(longest_words):\n            longest_words = [word]\n        elif len(word) == len(longest_words):\n            longest_words.append(word)\n    return longest_words[:n]\n    \ndef find_longest_n_words_by_index(words, n):\n    '''\n    Write a function to find all the longest n words in a list of words.\n    '''\n    longest_words = []\n    for word in words:\n        if len(word) > len(longest_words):\n            longest_words = [word]\n        elif len(word) == len(longest_words):\n            longest_words.append(word)\n    return longest_words[:n]\n    \ndef find_longest_n_words_by_index_and_word(words, n):\n    '''\n    Write a function to find all the longest n words in a list of words.\n    '''\n    longest_words = []\n    for word in words:\n        if len(word) > len(longest_words):\n            longest_words = [word]\n        elif len(word) == len"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" \", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # print 'before',text\n    while''in text:\n        text = text.replace('  ','')\n    # print 'after',text\n    return text\ndef remove_spaces_between_characters(text):\n    '''\n    Write a function to remove all spaces between characters from a string.\n    '''\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('',text)\n    return text\ndef lower_string(text):\n    '''\n    Write a function to convert a string to lowercase.\n    '''\n    text = text.lower()\n    return text\ndef remove_numbers(text):\n    '''\n    Write a function to remove all the numbers from a string.\n    '''\n    text = re.sub('[0-9]','',text)\n    return text\ndef count_vowels(text):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    #text = text.lower()\n    vowels_count = 0\n    for vowel in vowels:\n        vowels_count += text.count(vowel)\n    return vowels_count\ndef count_consonants(text):\n    '''\n    Write a function to count the number of consonants in a string.\n    '''\n    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    consonants_count = 0\n    for consonant in consonants:\n        consonants_count += text.count(consonant)\n    return consonants_count\ndef count_whitespaces(text):\n    '''\n    Write a function to count the number of whitespaces in a string.\n    '''\n    #text = text.lower()\n    return text.count(' ')\ndef count_letters(text):\n    '''\n    Write a function to count the number of letters in a string.\n    '''\n    pattern = re.compile('[a-zA-Z]')\n    letters_count = len(pattern.findall(text))\n    return letters_count\ndef count_uppercase_letters(text):\n    '''\n    Write a function to count the number of uppercase letters in a string.\n    '''\n    pattern = re.compile('[A-Z]')\n    letters_count = len(pattern.findall(text))\n    return letters_count\ndef count_lowercase_letters(text):\n    '''\n    Write a function to count the number of lowercase letters in a string.\n    '''\n    pattern = re.compile('[a-z]')\n    letters_count = len(pattern.findall(text))\n    return letters_count\ndef count_digits(text):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    digits = [1,2,3,4,5,6,7,8,9,0]\n    digits_count = 0\n    for digit in digits:\n        digits_count += text.count(str(digit))\n    return digits_count\ndef count_spaces(text):\n    '''\n    Write a function to count the number of spaces in a string.\n    '''\n    #text = text.lower()\n    return text.count(' ')\ndef count_words(text):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    pattern = re.compile('[\\s]+')\n    words_count = len(pattern.split(text))\n    return words_count\ndef count_sentences(text):\n    '''\n    Write a function to count the number of sentences in a string.\n    '''\n    pattern = re.compile('[.!?]+')\n    sentences_count = len(pattern.split(text))\n    return sentences_count\ndef count_lines(text):\n    '''\n    Write a function to count the number of lines in a string.\n    '''\n    lines_count = len(text.split('\\n'))\n    return lines_count\ndef count_chars(text):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    chars_count = len(text)\n    return chars_count\ndef count_punctuation(text):\n    '''\n    Write a function to count the number of punctuation symbols in a string.\n    '''\n    punctuations = ['?','!','.',';']\n    punctuations_count = 0\n    for punctuation in punctuations:\n        punctuations_count += text.count(punctuation)\n    return punctuations_count\ndef count_unique_words(text):\n    '''\n    Write a function to count the number of unique words in a string.\n    '''\n    words = text.split()\n    unique_words = set(words)\n    unique_words_count = len(unique_words)\n    return unique_words_count\ndef count_mean_word_length(text):\n    '''\n    Write a function to calculate the mean word length of a string.\n    '''\n    #text = text.lower()\n    words = text.split()\n    mean_word_length = 0\n    if len(words) > 0:\n        mean_word_length = float(sum(len(word) for word in words)) / float(len(words))\n    return mean_word_length\ndef count_mean_sentence_length(text):\n    '''\n    Write a function to calculate the mean sentence length of a string.\n    '''\n    sentences = text.split('\\n')\n    mean_sentence_length = 0\n    if len(sentences) > 0:\n        mean_sentence_length = float(sum(len(sentence) for sentence in sentences)) / float(len(sentences))\n    return mean_sentence_length\ndef count_syllables(text):\n    '''\n    Write a function to count the number of syllables in a string.\n    '''\n    #text = text.lower()\n    words = text.split()\n    syllables = 0\n    for word in words:\n        syllables += count_syllables_in_word(word)\n    return syllables\ndef count_syllables_in_word(word):\n    '''\n    Write a function to count the number of syllables in a word.\n    '''\n    # If the word is 'I' or 'I' then return 1.\n    if word == 'I':\n        return 1\n    # Otherwise return the number of syllables in the word.\n    syllables = 0\n    vowels = 'aeiouy'\n    prev_char_was_vowel = False\n    for char in word:\n        curr_char_is_vowel = char in vowels\n        if curr_char_is_vowel and not prev_char_was_vowel:\n            syllables += 1\n        prev_char_was_vowel = curr_char_is_vowel\n    if word.endswith('e'):\n        syllables -= 1\n    if word.endswith('le'):\n        syllables += 1\n    if syllables == 0:\n        syllables = 1\n    return syllables\ndef get_text_features(text):\n    '''\n    Write a function to create a dictionary of text features for a string.\n    '''\n    feature_dictionary = {}\n    feature_dictionary['num_chars'] = count_chars(text)\n    feature_dictionary['num_letters'] = count_letters(text)\n    feature_dictionary['num_words'] = count_words(text)\n    feature_dictionary['num_lines'] = count_lines(text)\n    feature_dictionary['num_sentences'] = count_sentences(text)\n    feature_dictionary['num_digits'] = count_digits(text)\n    feature_dictionary['num_spaces'] = count_spaces(text)\n    feature_dictionary['num_punctuation'] = count_punctuation(text)\n    feature_dictionary['num_vowels'] = count_vowels(text)\n    featur"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ', '')\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"[\\s]+\", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove the leading and trailing space from the string\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'[\\s]+','', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if (x == y and y == z):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or x==z or y==z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y and y==z:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n    \ndef test_four_equal(x,y,z,t):\n    '''\n    Write a python function to count the number of equal numbers from four given integers.\n    '''\n    if x == y == z == t:\n        return 4\n    elif x == y == z or x == y or x == z or y == z:\n        return 3\n    else:\n        return 0\n    \ndef test_five_equal(x,y,z,t,u):\n    '''\n    Write a python function to count the number of equal numbers from five given integers.\n    '''\n    if x == y == z == t == u:\n        return 5\n    elif x == y == z or x == y or x == z or y == z or x == u:\n        return 4\n    else:\n        return 0\n    \ndef test_six_equal(x,y,z,t,u,v):\n    '''\n    Write a python function to count the number of equal numbers from six given integers.\n    '''\n    if x == y == z == t == u == v:\n        return 6\n    elif x == y == z or x == y or x == z or y == z or x == u or y == u or z == u:\n        return 5\n    else:\n        return 0\n    \ndef test_seven_equal(x,y,z,t,u,v,w):\n    '''\n    Write a python function to count the number of equal numbers from seven given integers.\n    '''\n    if x == y == z == t == u == v == w:\n        return 7\n    elif x == y == z or x == y or x == z or y == z or x == u or y == u or z == u:\n        return 6\n    else:\n        return 0\n    \ndef test_eight_equal(x,y,z,t,u,v,w,a):\n    '''\n    Write a python function to count the number of equal numbers from eight given integers.\n    '''\n    if x == y == z == t == u == v == w == a:\n        return 8\n    elif x == y == z or x == y or x == z or y == z or x == u or y == u or z == u or x == a:\n        return 7\n    else:\n        return 0\n    \ndef test_nine_equal(x,y,z,t,u,v,w,a,b):\n    '''\n    Write a python function to count the number of equal numbers from nine given integers.\n    '''\n    if x == y == z == t == u == v == w == a == b:\n        return 9\n    elif x == y == z or x == y or x == z or y == z or x == u or y == u or z == u or x == a or y == a or z == a:\n        return 8\n    else:\n        return 0\n    \ndef test_ten_equal(x,y,z,t,u,v,w,a,b,c):\n    '''\n    Write a python function to count the number of equal numbers from ten given integers.\n    '''\n    if x == y == z == t == u == v == w == a == b == c:\n        return 10\n    elif x == y == z or x == y or x == z or y == z or x == u or y == u or z == u or x == a or y == a or z == a:\n        return 9\n    else:\n        return 0\n    \ndef test_eleven_equal(x,y,z,t,u,v,w,a,b,c,d):\n    '''\n    Write a python function to count the number of equal numbers from eleven given integers.\n    '''\n    if x == y == z == t == u == v == w == a == b == c == d:\n        return 11\n    elif x == y == z or x == y or x == z or y == z or x == u or y == u or z == u or x == a or y == a or z == a:\n        return 10\n    else:\n        return 0\n    \ndef test_twelve_equal(x,y,z,t,u,v,w,a,b,c,d,e):\n    '''\n    Write a python function to count the number of equal numbers from twelve given integers.\n    '''\n    if x == y == z == t == u == v == w == a == b == c == d == e:\n        return 12\n    elif x == y == z or x == y or x == z or y == z or x == u or y == u or z == u or x == a or y == a or z == a:\n        return 11\n    else:\n        return 0\n    \ndef test_thirteen_equal(x,y,z,t,u,v,w,a,b,c,d,e,f):\n    '''\n    Write a python function to count the number of equal numbers from thirteen given integers.\n    '''\n    if x == y == z == t == u == v == w == a == b == c == d == e == f:\n        return 13\n    elif x == y == z or x == y or x == z or y == z or x == u or y == u or z == u or x == a or y == a or z == a:\n        return 12\n    else:\n        return 0\n    \ndef test_fourteen_equal(x,y,z,t,u,v,w,a,b,c,d,e,f,g):\n    '''\n    Write a python function to count the number of equal numbers from fourteen given integers.\n    '''\n    if x == y == z == t == u == v == w == a == b == c == d == e == f == g:\n        return 14\n    elif x == y == z or x == y or x == z or y == z or x == u or y == u or z == u or x == a or y == a or z == a:\n        return 13\n    else:\n        return 0\n    \ndef test_fifteen_equal(x,y,z,t,u,v,w,a,b,c,d,e,f,g,h):\n    '''\n    Write a python function to count the number of equal numbers from fifteen given integers.\n    '''\n    if x == y == z == t == u == v == w == a == b == c == d == e == f == g == h:\n        return 15\n    elif x == y == z or x == y or x == z or y == z or x == u or y == u or z == u or x == a or y == a or z == a:\n        return 14\n    else:\n        return 0\n    \ndef test_sixteen_equal(x,y,z,t,u,v,w,a,b,c,d,e,f,g,h,i):\n    '''\n    Write a python function to count the number of equal numbers from sixteen given integers.\n    '''\n    if x == y == z == t == u == v == w == a == b == c == d == e == f == g == h == i:\n        return 16\n    elif x == y == z or x == y or x == z or y == z or x == u or y == u or z == u or x == a or y == a or z == a:\n        return 15\n    else:\n        return 0\n    \ndef test_seventeen_equal(x,y,z,t,u,v,w,a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a python function to count the number of equal numbers from seventeen given integers.\n    '''\n    if x == y == z == t == u == v == w == a == b == c == d == e == f == g == h == i == j:\n        return 17\n    elif x == y == z or x == y or x == z or y == z or x == u or y == u or z == u or x == a or y == a or z == a:\n        return 16\n    else:\n        return 0\n    \ndef test_eighteen_equal(x,y,z,t,u,v,w,a,b,c,d,"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x == y == z)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z and z==x\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    return sum((x,y,z) == (x,y,z))\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(0,3):\n        if x == y == z:\n            count = count + 1\n        else:\n            pass\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n==1:\n        return 0\n    for i in range(0,n-1):\n        if arr[i] < arr[i+1]:\n            break\n    else:\n        return 0\n    \n    prev = arr[i]\n    count = 0\n    for j in range(i,n):\n        if prev > arr[j]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if arr is None:\n        return 0\n    else:\n        rotations = 0\n        for i in range(0,len(arr)):\n            if arr[i] < arr[i+1]:\n                rotations += 1\n        return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    length = len(arr)\n    # print(length)\n    start = 0\n    end = length - 1\n    rotate = 0\n    while start <= end:\n        if arr[start] > arr[end]:\n            rotate += 1\n            end -= 1\n        else:\n            start += 1\n    return rotate\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    length = len(arr)\n    for i in range(length):\n        if arr[i]!= i+1:\n            return i\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #code\n    if len(arr) == 0 or len(arr) == 1:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n==0: return 0\n    if n==1: return 0\n    if arr[0]<arr[1]: return 0\n    if arr[n-1]<arr[n-2]: return 0\n    for i in xrange(0,n-1):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return n\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 1:\n        return 0\n    low = 0\n    mid = len(arr) // 2\n    high = len(arr) - 1\n    while mid <= high:\n        if arr[low] < arr[mid]:\n            return mid - low\n        if arr[mid] < arr[high]:\n            return high - mid\n        mid = (mid + high) // 2\n        low = low + 1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) / 2\n        \n        if arr[mid] >= arr[low] and arr[mid] >= arr[high]:\n            #     arr is already sorted\n            return 0\n        \n        elif arr[mid] < arr[low]:\n            #     rotate right on left side\n            high = mid - 1\n        else:\n            #     rotate left on right side\n            low = mid + 1\n    \n    #     if at this point arr[low] > arr[high], meaning arr is rotated. \n    return low - high\n    \narr = [2, 3, 4, 5, 1]\narr2 = [4, 5, 1, 2, 3]\narr3 = [1, 3, 2]\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n    \n    while low < high:\n        if arr[high] > arr[low]:\n            break\n        low = low + 1\n        high = high - 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 1:\n        return 0\n    if arr[0] > arr[1]:\n        return 1\n    if arr[len(arr)-1] > arr[len(arr)-2]:\n        return 1\n    for i in range(len(arr)):\n        if arr[i] < arr[i+1]:\n            return i+1\n        if arr[i] > arr[i+1]:\n            return i+2\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    x = int(math.sqrt(n))\n    if (x*x == n) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if n is less than 0, then it is not a perfect square\n    if n < 0 :\n        return False\n    if n == 0 or n == 1 :\n        return True\n    return is_perfect_square(n / 2)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Base Cases\n    if (n == 0 or n == 1) :\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    sqrt = n\n    while sqrt * sqrt > n:\n        sqrt = (sqrt + n / sqrt) / 2\n    return sqrt * sqrt == n\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return ((n & (n - 1)) == 0) and n > 0\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    \n    x = n\n    y = (x + 1) / 2\n    while y * y <= x :\n        if y * y == x :\n            return True\n        y = y + 1\n    return False\n    \ndef main() :\n    print(is_perfect_square(12))\n    print(is_perfect_square(13))\n    print(is_perfect_square(100))\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # If the input number is greater than 1, then check if it is a perfect\n    # square by computing square root of the number\n    if n > 1 :\n        # check if the input number is a perfect square\n        if (n**(1/2))%1 == 0 :\n            return True\n        else :\n            return False\n    # If the input number is less than or equal to 1, then check if the number is a perfect square or not\n    elif n <= 1 :\n        return False\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return int(math.sqrt(n) + 0.5) ** 2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(n)\n    if x == 0:\n        return True\n    else:\n        return n / x == x\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n == int(math.sqrt(n))\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr = list(arr)\n    arr = [1 if x == 0 else x for x in arr]\n    return reduce(lambda a, b: a*b, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product*i\n    if product%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # logic\n    product = 1\n    for elem in arr:\n        product *= elem\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # return reduce(lambda x,y: x*y, arr) % 2 == 0\n    return reduce(lambda x,y: x*y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    \n    for i in arr:\n        product = product * i\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \n    "
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x * y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return (arr[0] % 2 == 0) * is_product_even(arr[1:])\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr = [i for i in arr if i!=0]\n    return (1 if sum(arr)%2==0 else 0)\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return not (sum(arr) % 2)\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr.sort()\n    product = 1\n    for i in arr:\n        product = product * i\n    return product % 2 == 0\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sums = []\n    for l in lists:\n        sums.append(sum(l))\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # sums = [sum(x) for x in lists]\n    # highest_sum = max(sums)\n    # highest_sum_index = sums.index(highest_sum)\n    # return lists[highest_sum_index]\n    def max_sum(lists):\n        sums = [sum(x) for x in lists]\n        max_sum = max(sums)\n        return [x for (i, x) in enumerate(lists) if sums[i] == max_sum][0]\n    return max_sum(lists)\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for l in lists:\n        sum_l = sum(l)\n        if sum_l > max_sum:\n            max_sum = sum_l\n    for l in lists:\n        if sum(l) == max_sum:\n            return l\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for i in range(len(lists)):\n        sum_list = sum(lists[i])\n        if sum_list > max_sum:\n            max_sum = sum_list\n            best_list = i\n    return lists[best_list]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # check if the list is empty\n    if not lists:\n        return []\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for l in lists:\n        total = sum(l)\n        if max_sum < total:\n            max_sum = total\n            result = l\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def find_sum_list(lists):\n        sum_list = []\n        for i in lists:\n            for j in i:\n                sum_list.append(sum(j))\n        return sum_list\n    \n    def max_sum_list(lists):\n        sum_list = find_sum_list(lists)\n        max_sum = sum_list[0]\n        for i in range(1,len(sum_list)):\n            if sum_list[i] > max_sum:\n                max_sum = sum_list[i]\n        return max_sum\n    return max_sum_list(lists)\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists)==1:\n        return lists[0]\n    else:\n        #print lists\n        m1=max_sum_list(lists[1:])\n        #print'm1',m1\n        m2=max_sum_list(lists[1:])\n        #print'm2',m2\n        if sum(lists[0])>sum(m1):\n            return lists[0]\n        elif sum(lists[0])>sum(m2):\n            return m2\n        else:\n            return m1\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # max_sum = 0\n    # max_sum_list = []\n    # for l in lists:\n    #     curr_sum = sum(l)\n    #     if curr_sum > max_sum:\n    #         max_sum = curr_sum\n    #         max_sum_list = l\n    # return max_sum_list\n    return max(lists, key = sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    total = 0\n    for i in lists:\n        total += sum(i)\n    return total\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = test_str.lower()\n    max_count = 0\n    count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    if len(test_str) == 1:\n        return 0\n    if test_str[0] == test_str[1].upper():\n        return 1 + max_run_uppercase(test_str[1:])\n    else:\n        return max_run_uppercase(test_str[1:])\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and test_str[i].isupper():\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and test_str[i].islower():\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_alphabet(test_str):\n    '''\n    Write a function to find maximum run of alphabet characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and ord(test_str[i]) >= 97 and ord(test_str[i]) <= 122:\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_digit(test_str):\n    '''\n    Write a function to find maximum run of digits in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and ord(test_str[i]) >= 48 and ord(test_str[i]) <= 57:\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_special(test_str):\n    '''\n    Write a function to find maximum run of special characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and not (ord(test_str[i]) >= 48 and ord(test_str[i]) <= 57):\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_nonalpha(test_str):\n    '''\n    Write a function to find maximum run of non-alphabet characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and not (ord(test_str[i]) >= 97 and ord(test_str[i]) <= 122):\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_white(test_str):\n    '''\n    Write a function to find maximum run of white space characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and test_str[i].isspace():\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_nonwhite(test_str):\n    '''\n    Write a function to find maximum run of non-white space characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and not test_str[i].isspace():\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_multiline(test_str):\n    '''\n    Write a function to find maximum run of multi-line strings in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and test_str[i:i+3] == '\"\"\"' or test_str[i:i+3] == \"'''\" or test_str[i:i+2] == '\"\"\"':\n            count += 1\n            i += 3\n        if max < count:\n            max = count\n    return max\n    \ndef longest_palindrome(test_str):\n    '''\n    Write a function to find the longest palindrome in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 1\n        while i < len(test_str) - 1 and test_str[i] == test_str[i+1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n        count = 1\n        while i < len(test_str) - 1 and test_str[i] == test_str[i-1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n    return max\n    \ndef longest_palindrome_non_alphanumeric(test_str):\n    '''\n    Write a function to find the longest palindrome in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 1\n        while i < len(test_str) - 1 and test_str[i] == test_str[i+1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n        count = 1\n        while i < len(test_str) - 1 and test_str[i] == test_str[i-1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n    return max\n    \ndef longest_palindrome_with_odd_length(test_str):\n    '''\n    Write a function to find the longest palindrome in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 1\n        while i < len(test_str) - 1 and test_str[i] == test_str[i+1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n        count = 1\n        while i < len(test_str) - 1 and test_str[i] == test_str[i-1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n    return max\n    \ndef longest_palindrome_with_even_length(test_str):\n    '''\n    Write a function to find the longest palindrome in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        if len(test_str) % 2 == 0:\n            while i < len(test_str) and test_str[i] == test_str[i+count]:\n                count += 1\n                i += 1\n            if count > max:\n                max = count\n        else:\n            while i < len(test_str) and test_str[i] == test_str[i+count]:\n                count += 1\n                i += 1\n            if count > max:\n                max = count\n    return max\n    \ndef longest_palindrome_without_spaces(test_str):\n    '''\n    Write a function to find the longest palindrome in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) - 1 and test_str[i] == test_str[i+1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n        count = 0\n        while i < len(test_str) - 1 and test_str[i] == test_str[i-1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n    return max\n    \ndef longest_palindrome_with_spaces(test_str):"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run=0\n    run=0\n    for i in range(len(test_str)):\n        if test_str[i]==test_str[i].upper():\n            run+=1\n        else:\n            if run>max_run:\n                max_run=run\n            run=0\n    if run>max_run:\n        max_run=run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    l = len(test_str)\n    max_len = 0\n    curr_len = 0\n    for i in range(l):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 0\n    if curr_len > max_len:\n        max_len = curr_len\n    return max_len\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    max_run = 1\n    cur_run = 1\n    prev_char = test_str[0]\n    for char in test_str[1:]:\n        if char.isupper():\n            cur_run += 1\n        else:\n            if prev_char.isupper():\n                max_run = max(max_run, cur_run)\n            else:\n                cur_run = 1\n            prev_char = char\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in test_str:\n        if i.isupper():\n            max_run += 1\n        else:\n            break\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    i = 0\n    max_length = 0\n    while i < len(test_str):\n        current_length = 1\n        while i + current_length < len(test_str) and test_str[i+current_length].isupper():\n            current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n        i += current_length\n    return max_length\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    counter = 1\n    max_counter = 1\n    for i in xrange(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            counter += 1\n        else:\n            if counter > max_counter:\n                max_counter = counter\n            counter = 1\n    return max_counter\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # your code goes here\n    for i in nums:\n        if i%2 == 1:\n            return i\n    return -1\n    \nassert first_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\nassert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1\nassert first_odd([]) == -1\nassert first_odd([-1, -2, -3, -4, -5]) == -1\nassert first_odd([0]) == 0\nassert first_odd([1, 2, 3]) == -1\nassert first_odd([1, 3, 5, 7, 9, 11]) == -1\nassert first_odd([-2, -3, -4, -5, -6]) == -1\nassert first_odd([-2, -3, -4, -5, 0]) == -1\nassert first_odd([-2, -3, -4, -5, -1]) == -1\nassert first_odd([-2, -3, -4, -5, -1, 0]) == 0\nassert first_odd([1, -2, -3, -4, -5, -6]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 10]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145, 152]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145, 152, 159]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145, 152, 159, 168]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145, 152, 159, 168, 175]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145, 152, 159, 168, 175, 182]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145, 152, 159, 168, 175, 182, 189]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145, 152, 159, 168, 175, 182, 189, 196]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145, 152, 159, 168, 175, 182, 189, 196, 203]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145, 152, 159, 168, 175, 182, 189, 196, 203, 210]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145, 152, 159, 168, 175, 182, 189, 196, 203, 210, 217]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145, 152, 159, 168, 175, 182, 189, 196, 203, 210, 217, 224]) == -1\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30, 40, 50, 60, 69, 78, 85, 92, 99, 108, 115, 122, 129, 138, 145, 152, 159, 168, 175, 182, 189, 196, 203, 210, 217, 224, 231]) == 0\nassert first_odd([1, -2, -3, -4, -5, 0, 1, 10, 19, 30"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n%2!= 0:\n            return n\n    return False\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums[0] % 2 == 1:\n        return nums[0]\n    else:\n        for i in range(1, len(nums)):\n            if nums[i] % 2 == 1:\n                return nums[i]\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return 'There are no odd numbers in this list.'\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2==1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[1] == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    A, B, C = test_tup\n    if A + B >= K and B + C >= K and A + C >= K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[-1] == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    (N, K, M) = test_tup\n    if (N/K)%M == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup) >= K\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i[K] == \"k\":\n            count = count + 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[K]!= test_tup[K]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return (test_tup[0] == test_tup[1]) and (test_tup[0] == K)\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    a,b,c = test_tup\n    if a == b or a == c or b == c:\n        return False\n    elif a == b or a == c or b == c:\n        return False\n    elif (a,b,c) in K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple(map(lambda x, y: x < y, test_tup2, test_tup1))\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0,len(test_tup1)):\n        if test_tup2[i]<test_tup1[i]:\n            return True\n        else:\n            return False\ndef check_smaller_2(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0,len(test_tup1)):\n        if test_tup2[i]<test_tup1[i]:\n            return True\n        else:\n            continue\n    return False\ndef equal_in_list(test_tup,l):\n    '''\n    Write a function to check if the first tuple is equal to any element of a given list.\n    '''\n    for i in l:\n        if test_tup==i:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(a <= b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    new_list = [test_tup1[i] < test_tup2[i] for i in range(len(test_tup1))]\n    return new_list\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    result = []\n    for i in range(len(tup2)):\n        if tup2[i] < tup1[i]:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            print \"False\"\n            return\n    print \"True\"\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    if test_tup1 <= test_tup2:\n        return True\n    else:\n        return False\n"
    }
]