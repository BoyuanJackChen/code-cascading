[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # write your code here\n    # a = set(test_tup1)\n    # b = set(test_tup2)\n    # return list(a & b)\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return sorted(list(set(test_tup1).intersection(set(test_tup2))))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    counter = 0\n    if len(test_tup1) > len(test_tup2):\n        new_list = test_tup1\n        big_list = test_tup2\n    else:\n        new_list = test_tup2\n        big_list = test_tup1\n    for element in new_list:\n        if element in big_list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    if len(test_tup1) == len(test_tup2):\n        return (set(test_tup1).intersection(set(test_tup2)))\n    else:\n        return False\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return len(set(test_tup1).intersection(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elems.append(test_tup1[i])\n    return shared_elems\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    dict1, dict2 = {}, {}\n    for item in test_tup1:\n        dict1[item] = 1\n    for item in test_tup2:\n        dict2[item] = 1\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1, test_tup2 = (set(test_tup1), set(test_tup2))\n    shared_elements = test_tup1 & test_tup2\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        return len([x for x in test_tup1 if x in test_tup2]) > 0\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 2:\n        return False\n    else:\n        if n%2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n))+1):\n                if n%i == 0:\n                    return False\n    return True\ndef prime_factorization(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    i = 2\n    factors = []\n    while n!= 1:\n        if is_not_prime(i):\n            while n%i == 0:\n                factors.append(i)\n                n /= i\n        else:\n            i += 1\n    return factors\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    n = int(n)\n    if n <= 1:\n        return False\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    limit = int(math.sqrt(n)) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    n = int(n)\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    limit = int(math.sqrt(n)) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return False\n    return True\ndef get_prime_factors(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    n = int(n)\n    if n <= 1:\n        return []\n    if n == 2:\n        return [2]\n    limit = int(math.sqrt(n)) + 1\n    prime_factors = []\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors\ndef get_prime_factors_dict(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    n = int(n)\n    if n <= 1:\n        return {}\n    if n == 2:\n        return {2:1}\n    limit = int(math.sqrt(n)) + 1\n    prime_factors = {}\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            prime_factors[i] = 1\n    return prime_factors\ndef get_divisors(n):\n    '''\n    Write a python function to find divisors of a given number.\n    '''\n    n = int(n)\n    if n <= 1:\n        return []\n    if n == 2:\n        return [1]\n    limit = int(math.sqrt(n)) + 1\n    divisors = []\n    for i in range(1, limit):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\ndef is_perfect_square(n):\n    '''\n    Write a python function to find if a number is perfect square or not.\n    '''\n    n = int(n)\n    if n < 0:\n        return False\n    limit = int(math.sqrt(n)) + 1\n    for i in range(0, limit):\n        if (i + 1) ** 2 == n:\n            return True\n    return False\ndef is_perfect_square_dict(n):\n    '''\n    Write a python function to find if a number is perfect square or not.\n    '''\n    n = int(n)\n    if n < 0:\n        return False\n    limit = int(math.sqrt(n)) + 1\n    for i in range(0, limit):\n        if (i + 1) ** 2 == n:\n            return True\n    return False\ndef are_perfect_squares(n):\n    '''\n    Write a python function to find if a list of numbers are perfect squares or not.\n    '''\n    n = list(n)\n    if len(n) < 0:\n        return False\n    for i in n:\n        if not is_perfect_square_dict(i):\n            return False\n    return True\ndef are_perfect_squares_dict(n):\n    '''\n    Write a python function to find if a list of numbers are perfect squares or not.\n    '''\n    n = list(n)\n    if len(n) < 0:\n        return False\n    for i in n:\n        if not is_perfect_square_dict(i):\n            return False\n    return True\ndef get_perfect_squares(n):\n    '''\n    Write a python function to find all perfect squares upto a given number.\n    '''\n    n = int(n)\n    if n < 0:\n        return []\n    perfect_squares = []\n    limit = int(math.sqrt(n)) + 1\n    for i in range(1, limit):\n        if is_perfect_square(i):\n            perfect_squares.append(i ** 2)\n    return perfect_squares\ndef get_perfect_squares_dict(n):\n    '''\n    Write a python function to find all perfect squares upto a given number.\n    '''\n    n = int(n)\n    if n < 0:\n        return {}\n    perfect_squares = {}\n    limit = int(math.sqrt(n)) + 1\n    for i in range(1, limit):\n        if is_perfect_square(i):\n            perfect_squares[i] = 1\n    return perfect_squares\ndef is_perfect_cube(n):\n    '''\n    Write a python function to find if a number is perfect cube or not.\n    '''\n    n = int(n)\n    if n < 0:\n        return False\n    limit = int(math.sqrt(n)) + 1\n    for i in range(0, limit):\n        if i ** 3 == n:\n            return True\n    return False\ndef is_perfect_cube_dict(n):\n    '''\n    Write a python function to find if a number is perfect cube or not.\n    '''\n    n = int(n)\n    if n < 0:\n        return False\n    limit = int(math.sqrt(n)) + 1\n    for i in range(0, limit):\n        if i ** 3 == n:\n            return True\n    return False\ndef get_perfect_cubes(n):\n    '''\n    Write a python function to find all perfect cubes upto a given number.\n    '''\n    n = int(n)\n    if n < 0:\n        return []\n    perfect_cubes = []\n    limit = int(math.sqrt(n)) + 1\n    for i in range(1, limit):\n        if is_perfect_cube(i):\n            perfect_cubes.append(i ** 3)\n    return perfect_cubes\ndef get_perfect_cubes_dict(n):\n    '''\n    Write a python function to find all perfect cubes upto a given number.\n    '''\n    n = int(n)\n    if n < 0:\n        return {}\n    perfect_cubes = {}\n    limit = int(math.sqrt(n)) + 1\n    for i in range(1, limit):\n        if is_perfect_cube(i):\n            perfect_cubes[i] = 1\n    return perfect_cubes\ndef is_perfect_pandigital(n, start=9, end=9):\n    '''\n    Write a python function to find if a number is a perfect pandigital number or not.\n    '''\n    n = str(n)\n    if len(n)!= 9:\n        return False\n    if len(set(n))!= 9:\n        return False\n    perfect_pandigitals = []\n    for i in range(start, end + 1):\n        perfect_pandigitals.append(str(i))\n    return sorted(n) == sorted(perfect_pandigitals)\ndef is_perfect_pandigital_dict(n, start=9, end=9):\n    '''\n    Write a python function to find if a number is a perfect pandigital number or not.\n    '''\n    n = str(n)\n    if len(n)!= 9:\n        return False\n    if len(set(n))!= 9:\n        return False\n    perfect_pandigitals = {}\n    for i in range(start, end + 1):\n        perfect_pandigitals[i] = 1\n    return perfect_pandigitals == get_perfect_pandigitals_dict(n)\ndef get_perfect_pandigitals(n, start=9, end=9):\n    '''\n    Write a python function to find all perfect pandigitals upto a given number.\n    '''\n    n = int(n)\n    if n < 0:\n        return []\n    perfect_pandi"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return True\n    return False\ndef prime_number_generator(n):\n    '''\n    Write a python function to generate all prime numbers.\n    '''\n    if n < 2:\n        return\n    else:\n        for i in range(2,n + 1):\n            if is_not_prime(i):\n                yield i\ndef create_number_list(n):\n    '''\n    Write a python function to generate all the unique numbers in the range of n.\n    '''\n    if n == 1:\n        return [1]\n    else:\n        return [1] + [i for i in create_number_list(n-1) if i!= 1]\ndef add_sum(n):\n    '''\n    Write a python function to add numbers in the range of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + add_sum(n-1)\ndef count_number(n):\n    '''\n    Write a python function to count the number of numbers in the range of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + count_number(n - 1)\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef product(n):\n    '''\n    Write a python function to find the product of a number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * product(n-1)\ndef series(n):\n    '''\n    Write a python function to find the sum of first n numbers of the series 1,1,2,3,5,8,13,21...\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + series(n-1)\ndef prime_factors(n):\n    '''\n    Write a python function to find all prime factors of a number.\n    '''\n    if n == 1:\n        return []\n    elif n % 2 == 0:\n        return [2] + prime_factors(n/2)\n    else:\n        return [2] + prime_factors((n-1)/2)\ndef perfect_square_generator(n):\n    '''\n    Write a python function to find the perfect square of a number.\n    '''\n    if n == 1:\n        return [1]\n    else:\n        return [n] + perfect_square_generator(n-1)\ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of the divisors of a number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 1 + sum_of_divisors(n-1) + sum_of_divisors(n-2)\ndef sum_of_sqrt_of_divisors(n):\n    '''\n    Write a python function to find the sum of the square root of the divisors of a number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 1 + sum_of_sqrt_of_divisors(n-1) + sum_of_sqrt_of_divisors(n-2)\ndef gcd_of_two_numbers(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd_of_two_numbers(b,a%b)\ndef lcm_of_two_numbers(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return lcm_of_two_numbers(b,a%b) * (a/gcd_of_two_numbers(a,b))\ndef prime_factorization(n):\n    '''\n    Write a python function to find the prime factorization of a number.\n    '''\n    if n == 1:\n        return {}\n    elif n == 2:\n        return {2:1}\n    else:\n        prime_factor_list = {}\n        for i in range(2,n+1):\n            if n % i == 0:\n                prime_factor_list[i] = 1 + prime_factorization(n/i)\n        return prime_factor_list\ndef digits(n):\n    '''\n    Write a python function to find the number of digits in a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + digits(n/10)\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if len(str(n)) == 1:\n        return True\n    elif str(n)[0] == str(n)[-1]:\n        return is_palindrome(int(str(n)[1:-1]))\n    else:\n        return False\ndef is_armstrong_number(n):\n    '''\n    Write a python function to check if a number is armstrong number or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        sum_of_power_of_digits = 0\n        for i in str(n):\n            sum_of_power_of_digits += pow(int(i),len(str(n)))\n        return sum_of_power_of_digits == n\ndef is_prime_number(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return not any([n % i == 0 for i in range(2,int(math.sqrt(n)) + 1)])\ndef is_amicable_number(n):\n    '''\n    Write a python function to check if a number is amicable number or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        if is_prime_number(n):\n            sum_of_power_of_digits = 0\n            for i in str(n):\n                sum_of_power_of_digits += pow(int(i),len(str(n)))\n            return sum_of_power_of_digits == n and sum_of_power_of_digits == sum(map(int,str(sum_of_power_of_digits))))\n        else:\n            return False\ndef is_super_amicable_number(n):\n    '''\n    Write a python function to check if a number is super amicable number or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        if is_prime_number(n):\n            sum_of_power_of_digits = 0\n            for i in str(n):\n                sum_of_power_of_digits += pow(int(i),len(str(n)))\n            sum_of_power_of_digits = sum_of_power_of_digits + sum_of_power_of_digits\n            return sum_of_power_of_digits == n and sum_of_power_of_digits == sum(map(int,str(sum_of_power_of_digits))"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        sqr = int(math.sqrt(n))+1\n        for i in range(2,sqr):\n            if n%i==0:\n                return False\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        sqr = int(math.sqrt(n))+1\n        for i in range(2,sqr):\n            if n%i==0:\n                return False\n        return True\ndef test_is_not_prime():\n    '''\n    Write a python function to test is_not_prime function.\n    '''\n    for i in range(100):\n        if is_not_prime(i)==False:\n            assert True\n        else:\n            assert False\n    print \"Success!\"\ndef test_is_prime():\n    '''\n    Write a python function to test is_prime function.\n    '''\n    for i in range(100):\n        if is_prime(i)==True:\n            assert True\n        else:\n            assert False\n    print \"Success!\"\ndef test_is_not_prime():\n    test_is_not_prime()\n    test_is_prime()\n    print \"Success!\"\ndef fib(n):\n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n    return a\ndef test_fib():\n    '''\n    Write a python function to test fib function.\n    '''\n    assert fib(0)==0\n    assert fib(1)==1\n    assert fib(2)==1\n    assert fib(3)==2\n    assert fib(4)==3\n    assert fib(5)==5\n    assert fib(6)==8\n    assert fib(7)==13\n    assert fib(8)==21\n    assert fib(9)==34\n    assert fib(10)==55\n    assert fib(11)==89\n    assert fib(12)==144\n    assert fib(13)==233\n    assert fib(14)==377\n    assert fib(15)==610\n    assert fib(16)==987\n    assert fib(17)==1597\n    assert fib(18)==2584\n    assert fib(19)==4181\n    assert fib(20)==6765\n    assert fib(21)==10946\n    assert fib(22)==17711\n    assert fib(23)==28657\n    assert fib(24)==46368\n    assert fib(25)==75025\n    assert fib(26)==121393\n    assert fib(27)==196418\n    assert fib(28)==317811\n    assert fib(29)==514229\n    assert fib(30)==832040\n    assert fib(31)==1346269\n    assert fib(32)==2178309\n    assert fib(33)==3524578\n    assert fib(34)==5702887\n    assert fib(35)==9227465\n    assert fib(36)==14930352\n    assert fib(37)==24157817\n    assert fib(38)==39088169\n    assert fib(39)==63245986\n    assert fib(40)==121645100\n    assert fib(41)==2432902008\n    assert fib(42)==5472535024\n    assert fib(43)==1061020985\n    assert fib(44)==1716768017\n    assert fib(45)==2777789002\n    assert fib(46)==3399910024\n    assert fib(47)==5795254750\n    assert fib(48)==89795918367\n    assert fib(49)==1597158924\n    assert fib(50)==25846748229\n    assert fib(51)==4513513127\n    assert fib(52)==6317643869\n    assert fib(53)==12586269025\n    assert fib(54)==19326391605\n    assert fib(55)==3207810024\n    assert fib(56)==57299259399\n    assert fib(57)==105656142871\n    assert fib(58)==1716768017\n    assert fib(59)==2777789002\n    assert fib(60)==4513513127\n    assert fib(61)==6317643869\n    assert fib(62)==12586269025\n    assert fib(63)==19326391605\n    assert fib(64)==3207810024\n    assert fib(65)==57299259399\n    assert fib(66)==105656142871\n    assert fib(67)==1716768017\n    assert fib(68)==2777789002\n    assert fib(69)==4513513127\n    assert fib(70)==6317643869\n    assert fib(71)==12586269025\n    assert fib(72)==19326391605\n    assert fib(73)==3207810024\n    assert fib(74)==57299259399\n    assert fib(75)==105656142871\n    assert fib(76)==1716768017\n    assert fib(77)==2777789002\n    assert fib(78)==4513513127\n    assert fib(79)==6317643869\n    assert fib(80)==12586269025\n    assert fib(81)==19326391605\n    assert fib(82)==3207810024\n    assert fib(83)==57299259399\n    assert fib(84)==105656142871\n    assert fib(85)==1716768017\n    assert fib(86)==2777789002\n    assert fib(87)==4513513127\n    assert fib(88)==6317643869\n    assert fib(89)==12586269025\n    assert fib(90)==19326391605\n    assert fib(91)==3207810024\n    assert fib(92)==57299259399\n    assert fib(93)==105656142871\n    assert fib(94)==1716768017\n    assert fib(95)==2777789002\n    assert fib(96)==4513513127\n    assert fib(97)==6317643869\n    assert fib(98)==12586269025\n    assert fib(99)==19326391605\n    assert fib(100)==3207810024\n    assert fib(101)==57299259399\n    assert fib(102)==105656142871\n    assert fib(103)==1716768017\n    assert fib(104)==2777789002\n    assert fib(105)==4513513127\n    assert fib(106)==6317643869\n    assert fib(107)==12586269025\n    assert fib(108)==19326391605\n    assert fib(109)==3207810024\n    assert fib(110)==57299259399\n    assert fib(111)==105656142871\n    assert fib(112)==1716768017\n    assert fib(113)==2777789002\n    assert fib(114)==4513513127\n    assert fib(115)==6317643869\n    assert fib(116)==12586269025\n    assert fib(117)==19326391605\n    assert fib(118)==3207810024\n    assert fib(119)==57299259399\n    assert fib(120)==105656142871\n    assert fib(121)==1716768017\n    assert fib(122)==2777789002\n    assert fib(123)==4513513127\n    assert fib(124)==6317643869\n    assert fib(125)==12586269025\n    assert fib(126)==19326391605\n    assert fib(127)==3207810024\n    assert fib(128)==57299259399\n    assert fib(129)==105656142871\n    assert fib(130)==1716768017\n    assert fib(131)==2777789002\n    assert fib(132)==4513513127\n    assert fib(13"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    sqrt_n = int(math.ceil(math.sqrt(n)))\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    else:\n        for i in range(3, math.floor(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        else:\n            return False\n    \ndef prime_number(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, math.floor(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        else:\n            return True\ndef count_digit(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n))\ndef count_lower_case(n):\n    '''\n    Write a python function to count the number of lower case characters in a string.\n    '''\n    return len(n)-len(n.upper())\ndef count_upper_case(n):\n    '''\n    Write a python function to count the number of upper case characters in a string.\n    '''\n    return len(n)-len(n.lower())\ndef count_space(n):\n    '''\n    Write a python function to count the number of space characters in a string.\n    '''\n    return len(n)-len(n.replace(' ', ''))\ndef count_vowels(n):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    v = 0\n    for i in n:\n        if i in vowels:\n            v += 1\n    return v\ndef count_consonants(n):\n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n    c = 0\n    for i in n:\n        if i in consonants:\n            c += 1\n    return c\ndef count_digits(n):\n    '''\n    Write a python function to count the number of digits in a string.\n    '''\n    return len(str(n))\ndef count_chars(n):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    return len(n)\ndef count_special_characters(n):\n    '''\n    Write a python function to count the number of special characters in a string.\n    '''\n    special_characters = ['@', '#', '$', '%', '&', '*', '^']\n    c = 0\n    for i in n:\n        if i in special_characters:\n            c += 1\n    return c\ndef count_words(n):\n    '''\n    Write a python function to count the number of words in a string.\n    '''\n    return len(n.split())\ndef count_lines(n):\n    '''\n    Write a python function to count the number of lines in a string.\n    '''\n    return len(n.split('\\n'))\ndef count_non_whitespaces(n):\n    '''\n    Write a python function to count the number of non-whitespaces in a string.\n    '''\n    return len(n.replace(' ', ''))\ndef count_whitespaces(n):\n    '''\n    Write a python function to count the number of whitespaces in a string.\n    '''\n    return len(n) - count_non_whitespaces(n)\ndef count_links(n):\n    '''\n    Write a python function to count the number of links in a string.\n    '''\n    links = ['http', 'https', 'www']\n    c = 0\n    for i in n:\n        if i in links:\n            c += 1\n    return c\ndef count_numbers(n):\n    '''\n    Write a python function to count the number of numbers in a string.\n    '''\n    return len(n) - count_digits(n)\ndef sum_of_digits(n):\n    '''\n    Write a python function to sum of digits in a number.\n    '''\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\ndef average_of_digits(n):\n    '''\n    Write a python function to compute the average of digits in a number.\n    '''\n    return sum_of_digits(n) / count_digits(n)\ndef is_palindrome(n):\n    '''\n    Write a python function to determine if a string is a palindrome.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\ndef is_anagram(n):\n    '''\n    Write a python function to determine if two strings are anagrams.\n    '''\n    if sorted(n) == sorted(n)[::-1]:\n        return True\n    else:\n        return False\ndef find_max(n):\n    '''\n    Write a python function to find the maximum value in a list.\n    '''\n    m = n[0]\n    for i in n:\n        if i > m:\n            m = i\n    return m\ndef find_min(n):\n    '''\n    Write a python function to find the minimum value in a list.\n    '''\n    m = n[0]\n    for i in n:\n        if i < m:\n            m = i\n    return m\ndef find_greatest_common_factor(n):\n    '''\n    Write a python function to find the greatest common factor in a number.\n    '''\n    m = n[0]\n    for i in n:\n        if i % m!= 0:\n            m = i\n    return m\ndef is_prime(n):\n    '''\n    Write a python function to determine if a number is a prime number.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3,math.floor(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        else:\n            return True\ndef find_fibonacci(n):\n    '''\n    Write a python function to find the nth number in the Fibonacci sequence.\n    '''\n    if n < 1:\n        return False\n    if n == 1 or n == 2:\n        return n\n    else:\n        return find_fibonacci(n-1) + find_fibonacci(n-2)\ndef is_perfect(n):\n    '''\n    Write a python function to determine if a number is a perfect number.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\ndef is_perfect_square(n):\n    '''\n    Write a python function to determine if a number is a perfect square.\n    '''\n    if n < 0:\n        return False\n    else:\n        return int(math.sqrt(n))**2 == n\ndef sum_of_primes(n):\n    '''\n    Write a python function to find the sum of the first n prime numbers.\n    '''\n    sum = 0\n    if n < 1:\n        return False\n    for i in range(2, n+1):\n        if is_prime(i):\n            sum += i\n    return sum\ndef sum_of_squares(n):\n    '''\n    Write a python function to find the sum of the first "
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n%2 == 0:\n        return False\n    else:\n        sqrt = int(math.sqrt(n)) + 1\n        for i in range(3,sqrt,2):\n            if n%i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    max_div = math.floor(math.sqrt(n))\n    for i in range(3,1+max_div, 2):\n        if n % i == 0:\n            return False\n    return True\ndef find_least_prime(n):\n    '''\n    Write a python function to find the smallest prime number that is greater than a given number n.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    for i in range(n, 0, -1):\n        if is_not_prime(i):\n            return i\ndef find_greatest_prime(n):\n    '''\n    Write a python function to find the smallest prime number that is smaller than a given number n.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    for i in range(n, n*100):\n        if is_not_prime(i):\n            return i\ndef get_least_prime(n):\n    '''\n    Write a python function to find the least prime number that is greater than a given number n.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    if is_not_prime(n):\n        return n\n    smallest = n\n    largest = n*100\n    while smallest <= largest:\n        mid = (smallest + largest)//2\n        if is_not_prime(mid):\n            largest = mid - 1\n        else:\n            smallest = mid + 1\n    return smallest\ndef get_greatest_prime(n):\n    '''\n    Write a python function to find the least prime number that is smaller than a given number n.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    if is_not_prime(n):\n        return n\n    smallest = n\n    largest = n*100\n    while smallest <= largest:\n        mid = (smallest + largest)//2\n        if is_not_prime(mid):\n            smallest = mid + 1\n        else:\n            largest = mid - 1\n    return smallest\ndef find_nth_prime(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    count = 0\n    number = 0\n    while count < n:\n        number += 1\n        if is_not_prime(number):\n            continue\n        else:\n            count += 1\n    return number\ndef find_first_prime(n):\n    '''\n    Write a python function to find the first prime number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    if is_not_prime(n):\n        return n\n    smallest = n\n    largest = n*100\n    while smallest <= largest:\n        mid = (smallest + largest)//2\n        if is_not_prime(mid):\n            largest = mid - 1\n        else:\n            smallest = mid + 1\n    return smallest\ndef find_last_prime(n):\n    '''\n    Write a python function to find the last prime number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    if is_not_prime(n):\n        return n\n    smallest = n\n    largest = n*100\n    while smallest <= largest:\n        mid = (smallest + largest)//2\n        if is_not_prime(mid):\n            smallest = mid + 1\n        else:\n            largest = mid - 1\n    return largest\ndef is_perfect(n):\n    '''\n    Write a python function to determine if a number is perfect.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    sum = 1\n    i = 2\n    while i < n:\n        if n % i == 0:\n            sum += i\n        i += 1\n    return sum == n\ndef get_perfect(n):\n    '''\n    Write a python function to find the next perfect number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    perfect = 0\n    i = n\n    while perfect!= n:\n        i += 1\n        if is_perfect(i):\n            perfect = i\n    return perfect\ndef get_perfects(n):\n    '''\n    Write a python function to find all the perfect numbers below a given number n.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    perfect = 0\n    i = n\n    while perfect!= n:\n        i += 1\n        if is_perfect(i):\n            perfect = i\n    return perfect\ndef is_abundant(n):\n    '''\n    Write a python function to determine if a number is abundant.\n    '''\n    if n <= 0:\n        return False\n    sum = 1\n    i = 2\n    while i < n:\n        if n % i == 0:\n            sum += i\n        i += 1\n    return sum > n\ndef get_abundant(n):\n    '''\n    Write a python function to find the next abundant number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    abundant = 0\n    i = n\n    while abundant!= n:\n        i += 1\n        if is_abundant(i):\n            abundant = i\n    return abundant\ndef get_abundants(n):\n    '''\n    Write a python function to find all the abundant numbers below a given number n.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    abundant = 0\n    i = n\n    while abundant!= n:\n        i += 1\n        if is_abundant(i):\n            abundant = i\n    return abundant\ndef get_abundant_sums(n):\n    '''\n    Write a python function to find all the abundant numbers below a given number n and their sum.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    abundant_sums = []\n    i = n\n    while abundant_sums!= n:\n        i += 1\n        if is_abundant(i):\n            abundant_sums.append(i)\n    return abundant_sums\ndef is_deficient(n):\n    '''\n    Write a python function to determine if a number is deficient.\n    '''\n    if n <= 0:\n        return False\n    sum = 0\n    i = 2\n    while i < n:\n        if n % i == 0:\n            sum += i\n        i += 1\n    return sum < n\ndef get_deficient(n):\n    '''\n    Write a python function to find the next deficient number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    deficient = 0\n    i = n\n    while deficient!= n:\n        i += 1\n        if is_deficient(i):\n            deficient = i\n    return deficient\ndef get_deficient_sums(n):\n    '''\n    Write a python function to find all the deficient numbers below a given number n and their sum.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    deficient_sums = []\n    i = n\n    while deficient_sums!= n:\n        i += 1\n        if is_deficient(i):\n            deficient_sums.append(i)\n    return deficient_sums\ndef get_deficient_sums_with_prime_factors(n):\n    '''\n    Write a python function to find all the deficient numbers below a given number n and their sum.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    deficient_sums = []\n    i = n\n    while deficient_sums!= n:\n        i += 1\n        if is_deficient(i):\n            deficient_sums.append(i)\n    prime_factors = []\n    for sum in deficient_sums:\n        for i in range(2, math.floor(sum/2) + 1):\n            if sum % i == 0:\n                prime_factors.append(i)\n    return prime_factors\ndef get_deficient_sums_with_prime_factors_with_product(n):\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return True\n    return False\ndef count_prime(n):\n    '''\n    Write a python function to find the count of prime numbers from 0 to n (inclusive).\n    '''\n    count = 0\n    for i in range(0, n+1):\n        if is_not_prime(i):\n            count = count + 1\n    return count\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits of an integer.\n    '''\n    total = 0\n    while (n!= 0):\n        last_digit = n % 10\n        total = total + last_digit\n        n = n // 10\n    return total\ndef is_perfect_square(n):\n    '''\n    Write a python function to find the square root of a perfect square.\n    '''\n    if (n == 1):\n        return True\n    if (n < 1):\n        return False\n    ans = 1\n    n1 = int(n)\n    while(n1 > 0):\n        ans = ans + n1 % 10\n        n1 = n1 / 10\n    ans = ans/2\n    if (ans * ans == n):\n        return True\n    else:\n        return False\ndef is_square(n):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    ans = 1\n    n1 = int(n)\n    while(n1 > 0):\n        ans = ans + n1 % 10\n        n1 = n1 / 10\n    ans = ans/2\n    if (ans * ans == n):\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    if (n % 2 == 0):\n        return False\n    for i in range(3, n, 2):\n        if (n % i == 0):\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    digits = int(math.log10(n)) + 1\n    for i in range(0, digits/2):\n        if (n % 10!= n // (10 ** (i + 1)) % 10):\n            return False\n    return True\ndef is_armstrong(n):\n    '''\n    Write a python function to check if an integer is an armstrong number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    sum = 0\n    temp = n\n    while (temp > 0):\n        sum = sum + (temp % 10) ** 3\n        temp = temp // 10\n    if (sum == n):\n        return True\n    else:\n        return False\ndef is_super_prime(n):\n    '''\n    Write a python function to check if a number is a super-prime number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return False\n    if (is_prime(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_prime(i) == True):\n                return False\n        return True\ndef is_super_square(n):\n    '''\n    Write a python function to check if a number is a super-square number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_square(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_square(i) == True):\n                return False\n        return True\ndef is_super_palindrome(n):\n    '''\n    Write a python function to check if a number is a super-palindrome number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_palindrome(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_palindrome(i) == True):\n                return False\n        return True\ndef is_super_armstrong(n):\n    '''\n    Write a python function to check if a number is a super-armstrong number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return False\n    if (is_armstrong(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_armstrong(i) == True):\n                return False\n        return True\ndef is_fibonacci(n):\n    '''\n    Write a python function to check if a number is a fibonacci number or not.\n    '''\n    if (n < 1):\n        return False\n    a, b = 0, 1\n    while(b < n):\n        a = b\n        b = a + b\n    return True if (a == 1 or a == n) else False\ndef is_super_fibonacci(n):\n    '''\n    Write a python function to check if a number is a super-fibonacci number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_fibonacci(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_fibonacci(i) == True):\n                return False\n        return True\ndef is_super_perfect_square(n):\n    '''\n    Write a python function to check if a number is a super-perfect square number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_perfect_square(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_perfect_square(i) == True):\n                return False\n        return True\ndef is_super_perfect_square(n):\n    '''\n    Write a python function to check if a number is a super-perfect square number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_perfect_square(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_perfect_square(i) == True):\n                return False\n        return True\ndef is_super_fibonacci(n):\n    '''\n    Write a python function to check if a number is a super-fibonacci number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_fibonacci(n) == False):\n        return False\n    else:\n        for i in range(2, n-1):\n            if (n % i == 0 and is_fibonacci(i) == True):\n                return False\n        return True\ndef is_super_perfect_square(n):\n    '''\n    Write a python function to check if a number is a super-perfect square number or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (is_perfect_square(n) == False):\n        return Fals"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n,nums)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    return heapq.nsmallest(n,nums)\ndef sorted_list(nums):\n    '''\n    Write a function to find the kth largest element in an unsorted list.\n    '''\n    return heapq.nlargest(1,nums)[0]\ndef find_kth_largest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(1,nums)[0]\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nsmallest(n,nums)[-1]\ndef find_nth_smallest(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nsmallest(n,nums)[-1]\ndef heap_delete(heap,index):\n    '''\n    Write a function to remove the ith smallest element in a given heap, which is a list of tuples.\n    '''\n    return heapq.heapify(heap)[index]\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef remove_element(arr,n):\n    '''\n    Write a function to remove the first element in a list.\n    '''\n    return arr[n]\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef delete_element(arr,n):\n    '''\n    Write a function to remove the first element in a list.\n    '''\n    return arr[n]\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef insert_element(arr,n):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    return arr.insert(n,0)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef insert_element(arr,n):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    return arr.insert(n,0)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef delete_element(arr,n):\n    '''\n    Write a function to remove the first element in a list.\n    '''\n    return arr.remove(n)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef insert_element(arr,n):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    return arr.insert(n,0)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef insert_element(arr,n):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    return arr.insert(n,0)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef delete_element(arr,n):\n    '''\n    Write a function to remove the first element in a list.\n    '''\n    return arr.remove(n)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef insert_element(arr,n):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    return arr.insert(n,0)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef insert_element(arr,n):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    return arr.insert(n,0)\ndef s_sorted_list(nums,n):\n    '''\n    Write a function to find the nth smallest element in a list.\n    '''\n    return heapq.nlargest(n,nums)[-1]\ndef find_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    return heapq.nlargest(k,nums)[-1]\ndef delete_element(arr,n):\n    ''"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    hq.heapify(h)\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>h[0]:\n            hq.heappop(h)\n            hq.heappush(h,nums[i])\n    return h\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h = []\n    hq.heapify(h)\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<h[0]:\n            hq.heappop(h)\n            hq.heappush(h,nums[i])\n    return h\ndef max_heap(nums):\n    '''\n    Write a function that returns the max value in a max heap.\n    '''\n    if len(nums)==0:\n        return None\n    h = []\n    for i in range(len(nums)):\n        hq.heappush(h,nums[i])\n    return hq.heappop(h)\ndef min_heap(nums):\n    '''\n    Write a function that returns the min value in a min heap.\n    '''\n    if len(nums)==0:\n        return None\n    h = []\n    for i in range(len(nums)):\n        hq.heappush(h,nums[i])\n    return hq.heappop(h)\ndef max_heap_sort(nums):\n    '''\n    Write a function that returns a list of the n largest values in a max heap.\n    '''\n    if len(nums)==0:\n        return []\n    h = []\n    for i in range(len(nums)):\n        hq.heappush(h,nums[i])\n    res = []\n    while len(res)<len(nums):\n        res.append(hq.heappop(h))\n    return res\ndef min_heap_sort(nums):\n    '''\n    Write a function that returns a list of the n smallest values in a min heap.\n    '''\n    if len(nums)==0:\n        return []\n    h = []\n    for i in range(len(nums)):\n        hq.heappush(h,nums[i])\n    res = []\n    while len(res)<len(nums):\n        res.append(hq.heappop(h))\n    return res\ndef tree_min_node(node):\n    '''\n    Write a function that returns the min value in a min heap.\n    '''\n    if node.left==None and node.right==None:\n        return node.data\n    if node.left==None:\n        return min_heap_sort(node.data)\n    if node.right==None:\n        return min_heap_sort(node.data)\n    if node.left and node.right:\n        return min_heap_sort(node.data)\ndef tree_max_node(node):\n    '''\n    Write a function that returns the max value in a max heap.\n    '''\n    if node.left==None and node.right==None:\n        return node.data\n    if node.left==None:\n        return max_heap_sort(node.data)\n    if node.right==None:\n        return max_heap_sort(node.data)\n    if node.left and node.right:\n        return max_heap_sort(node.data)\ndef delete_node(node,data):\n    if node==None:\n        return None\n    if node.data==data:\n        if node.left and node.right:\n            successor = tree_min_node(node.right)\n            node.data = successor\n            return delete_node(node.right,successor)\n        else:\n            if node.left:\n                return node.left\n            else:\n                return node.right\n    else:\n        if node.data>data:\n            node.data,data = data,node.data\n            delete_node(node.left,data)\n        else:\n            delete_node(node.right,data)\ndef insert_node(node,data):\n    if node==None:\n        return Node(data)\n    if node.data>data:\n        node.left = insert_node(node.left,data)\n    else:\n        node.right = insert_node(node.right,data)\n    return node\ndef inorder(node):\n    if node==None:\n        return\n    inorder(node.left)\n    print node.data,\n    inorder(node.right)\ndef preorder(node):\n    if node==None:\n        return\n    print node.data,\n    preorder(node.left)\n    preorder(node.right)\ndef postorder(node):\n    if node==None:\n        return\n    postorder(node.left)\n    postorder(node.right)\n    print node.data,\ndef level_order_traversal(node):\n    if node==None:\n        return\n    queue = []\n    queue.append(node)\n    while queue:\n        node = queue.pop(0)\n        print node.data,\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\ndef create_bst(node,data):\n    if node==None:\n        return Node(data)\n    if node.data>data:\n        node.left = create_bst(node.left,data)\n    else:\n        node.right = create_bst(node.right,data)\n    return node\ndef max_sum_bst(node):\n    if node==None:\n        return 0\n    if node.left and node.right:\n        return node.data+max_sum_bst(node.left)+max_sum_bst(node.right)\n    elif node.left:\n        return node.data+max_sum_bst(node.left)\n    elif node.right:\n        return node.data+max_sum_bst(node.right)\ndef create_bst_from_array(nums,start,end):\n    if end<=start:\n        return None\n    mid = (end+start)/2\n    node = Node(nums[mid])\n    node.left = create_bst_from_array(nums,start,mid-1)\n    node.right = create_bst_from_array(nums,mid+1,end)\n    return node\ndef preorder_tree_traversal(node):\n    if node==None:\n        return\n    print node.data,\n    preorder_tree_traversal(node.left)\n    preorder_tree_traversal(node.right)\ndef inorder_tree_traversal(node):\n    if node==None:\n        return\n    inorder_tree_traversal(node.left)\n    print node.data,\n    inorder_tree_traversal(node.right)\ndef postorder_tree_traversal(node):\n    if node==None:\n        return\n    postorder_tree_traversal(node.left)\n    postorder_tree_traversal(node.right)\n    print node.data,\ndef level_order_tree_traversal(node):\n    if node==None:\n        return\n    queue = []\n    queue.append(node)\n    while queue:\n        node = queue.pop(0)\n        print node.data,\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\ndef level_order_tree_traversal_using_stack(node):\n    if node==None:\n        return\n    stack = []\n    stack.append(node)\n    while stack:\n        node = stac"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0:\n        return []\n    if nums==[]:\n        return []\n    if n > len(nums):\n        return nums\n    max_heap=[]\n    for num in nums:\n        hq.heappush(max_heap,-num)\n    while len(max_heap)!=n:\n        hq.heappop(max_heap)\n    return [-hq.heappop(max_heap) for i in range(len(max_heap))]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    hq=[]\n    for i in nums:\n        hq.append([-i,i])\n    hq = sorted(hq)\n    ans = []\n    for i in range(n):\n        ans.append(hq[i][1])\n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums_len = len(nums)\n    if nums_len < n:\n        return nums\n    else:\n        for i in range(n):\n            max_num = hq.heappop(nums)\n            hq.heappush(nums,max_num)\n        return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for i in range(n):\n        hq.heappush(h,-nums[i])\n    return [hq.heappop(h) for i in range(n)]\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h=[]\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    return [hq.heappop(h) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums=list(set(nums))\n    nums=sorted(nums,reverse=True)\n    if len(nums)<n:\n        return nums\n    return nums[n-1::-1]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    nums=list(set(nums))\n    nums=sorted(nums)\n    if len(nums)<n:\n        return nums\n    return nums[:n]\ndef min_max_heap(nums):\n    '''\n    Write a function that returns a tuple of the minimum and maximum integers in the list of integers.\n    '''\n    return (min(nums),max(nums))\ndef heap_queue_intersection(nums1,nums2):\n    '''\n    Write a function to return the intersection of two arrays.\n    '''\n    return list(set(nums1) & set(nums2))\ndef heap_queue_union(nums1,nums2):\n    '''\n    Write a function to return the union of two arrays.\n    '''\n    return list(set(nums1)|set(nums2))\ndef min_max_heap_largest(nums,n):\n    '''\n    Write a function that returns the n largest integers from a given list of integers, returned in descending order.\n    '''\n    nums=sorted(nums,reverse=True)\n    return nums[:n]\ndef min_max_heap_smallest(nums,n):\n    '''\n    Write a function that returns the n smallest integers from a given list of integers, returned in ascending order.\n    '''\n    nums=sorted(nums)\n    return nums[:n]\ndef remove_item_from_heap(heap,n):\n    '''\n    Write a function that removes the top of the heap.\n    '''\n    return hq.heappop(heap)\ndef print_heap(heap):\n    '''\n    Write a function that prints the contents of a heap in a clean manner.\n    '''\n    hq.heapify(heap)\n    for i in heap:\n        print(i,end=\" \")\n    print()\ndef heap_sort(nums):\n    '''\n    Write a function that sorts a list of integers using a heap.\n    '''\n    nums=list(set(nums))\n    nums=sorted(nums)\n    return nums\ndef k_smallest(nums,k):\n    '''\n    Write a function that returns the k smallest integers from a given list of integers, returned in ascending order.\n    '''\n    nums=sorted(nums)\n    return nums[:k]\ndef remove_item_from_heap(heap,n):\n    '''\n    Write a function that removes the top of the heap.\n    '''\n    hq.heappop(heap)\n    return heap\ndef print_heap(heap):\n    '''\n    Write a function that prints the contents of a heap in a clean manner.\n    '''\n    hq.heapify(heap)\n    for i in heap:\n        print(i,end=\" \")\n    print()\ndef heap_sort(nums):\n    '''\n    Write a function that sorts a list of integers using a heap.\n    '''\n    nums=list(set(nums))\n    nums=sorted(nums)\n    return nums\ndef k_largest(nums,k):\n    '''\n    Write a function that returns the k largest integers from a given list of integers, returned in descending order.\n    '''\n    nums=sorted(nums,reverse=True)\n    return nums[:k]\ndef remove_item_from_heap(heap,n):\n    '''\n    Write a function that removes the top of the heap.\n    '''\n    hq.heappop(heap)\n    return heap\ndef print_heap(heap):\n    '''\n    Write a function that prints the contents of a heap in a clean manner.\n    '''\n    hq.heapify(heap)\n    for i in heap:\n        print(i,end=\" \")\n    print()\ndef k_largest_largest(nums,k):\n    '''\n    Write a function that returns the k largest integers from a given list of integers, returned in descending order.\n    '''\n    nums=sorted(nums,reverse=True)\n    return nums[:k]\ndef k_smallest_largest(nums,k):\n    '''\n    Write a function that returns the k smallest integers from a given list of integers, returned in descending order.\n    '''\n    nums=sorted(nums)\n    return nums[:k]\ndef heap_sort(nums):\n    '''\n    Write a function that sorts a list of integers using a heap.\n    '''\n    nums=list(set(nums))\n    nums=sorted(nums)\n    return nums\ndef k_largest_smallest(nums,k):\n    '''\n    Write a function that returns the k largest integers from a given list of integers, returned in ascending order.\n    '''\n    nums=sorted(nums)\n    return nums[:k]\ndef k_smallest_smallest(nums,k):\n    '''\n    Write a function that returns the k smallest integers from a given list of integers, returned in ascending order.\n    '''\n    nums=sorted(nums)\n    return nums[:k]\ndef print_heap(heap):\n    '''\n    Write a function that prints the contents of a heap in a clean manner.\n    '''\n    hq.heapify(heap)\n    for i in heap:\n        print(i,end=\" \")\n    print()\ndef heapsort(nums):\n    '''\n    Write a function that sorts a list of integers using a heap.\n    '''\n    nums=list(set(nums))\n    nums=sorted(nums)\n    return nums\ndef find_duplicates_of(nums):\n    '''\n    Write a function that returns a list of all elements that appear more than once in a list of integers.\n    '''\n    return list(set(nums))\ndef main():\n    nums1=[1,2,3,4,5,6,7,8,9,10]\n    nums2=[1,2,3,4,5,6,7,8,9,10]\n    nums3=[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]\n    print(heap_queue_largest(nums1,3))\n    print(heap_queue_smallest(nums1,3))\n    print(min_max_heap(nums1))\n    print(min_max_heap_largest(nums1,3))\n    print(min_max_heap_smallest(nums1,3))\n    nums=[1,2,3,4,5,6,7,8,9,10]\n    print(remove_item_from_heap(nums,3))\n    print(print_heap(nums))\n    print(heap_sort(nums))\n    print(k_largest(nums,3))\n    print(k_smallest(nums,3))\n    print(k_largest_largest(nums,3))\n    print(k_smallest_largest(nums,3))\n    nums=[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]\n    print(remove_item_from_heap(nums,3))\n    print(print_heap(nums))\n    print(heap_sort(nums))\n    print(k_largest_largest(nums,3))\n    print(k_smallest_largest(nums,3)"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\ndef merge_k_sorted_arrays(arr):\n    '''\n    Merge k sorted arrays into one sorted array.\n    '''\n    pass\ndef max_heap_k_smallest(arr,k):\n    '''\n    Given a k sorted array and an integer n, write a function to find the n smallest integers in the array.\n    '''\n    pass\ndef max_heap_k_largest(arr,k):\n    '''\n    Given a k sorted array and an integer n, write a function to find the n largest integers in the array.\n    '''\n    pass\ndef max_heapify(arr,i,n):\n    '''\n    Given an array of integers, write a function that transforms the given array into a max heap.\n    '''\n    pass\ndef max_heap_sort(arr):\n    '''\n    Given a max heap, write a function that restores the heap to a sorted array.\n    '''\n    pass\ndef min_heap_k_smallest(arr,k):\n    '''\n    Given a k sorted array and an integer n, write a function to find the n smallest integers in the array.\n    '''\n    pass\ndef min_heap_k_largest(arr,k):\n    '''\n    Given a k sorted array and an integer n, write a function to find the n largest integers in the array.\n    '''\n    pass\ndef min_heap_sort(arr):\n    '''\n    Given a min heap, write a function that restores the heap to a sorted array.\n    '''\n    pass\ndef is_heap_balanced(arr):\n    '''\n    Given a binary tree, write a function that returns true if the given tree is a balanced tree, \n    and false otherwise.\n    '''\n    pass\ndef vertical_order_traversal(root):\n    '''\n    Given a binary tree, write a function that returns an array of size vertical order traversal of the binary tree.\n    A vertical order traversal is a traversal of a binary tree that is similar to level order traversal, \n    but the nodes are visited in the traversal order from left to right and top to bottom.\n    '''\n    pass\ndef iterative_binary_search(arr,target):\n    '''\n    Given a sorted array, write a function to search a target value in the array.\n    If the target value is found, then return its index, otherwise, return -1.\n    '''\n    pass\ndef recursive_binary_search(arr,target,start,end):\n    '''\n    Given a sorted array, write a function to search a target value in the array.\n    If the target value is found, then return its index, otherwise, return -1.\n    '''\n    pass\ndef search_in_rotated_sorted_array(arr,target):\n    '''\n    Given a sorted array, write a function to search a target value in the array.\n    If the target value is found, then return its index, otherwise, return -1.\n    '''\n    pass\ndef interval_intersection(a,b):\n    '''\n    Given two intervals, find the intersection of the two intervals.\n    '''\n    pass\ndef is_subset(arr1,arr2):\n    '''\n    Given two arrays, write a function that checks whether the first array is a subset of the second array.\n    '''\n    pass\ndef is_match(s,p):\n    '''\n    Given an input string and a pattern, write a function to determine if the pattern is a match for the string.\n    Inp: abcdef, \"ab*def\"\n    Out: True\n    '''\n    pass\ndef topological_sort(nodes,edges):\n    '''\n    Given a graph with edges and nodes, write a function to do topological sort.\n    '''\n    pass\ndef path_in_tree(nodes,edges):\n    '''\n    Given a graph with edges and nodes, write a function to check if a path exists between two nodes.\n    '''\n    pass\ndef graph_has_cycle(nodes,edges):\n    '''\n    Given a graph with edges and nodes, write a function to check if the graph has a cycle.\n    '''\n    pass\ndef compare_strings(s1,s2):\n    '''\n    Given two strings, write a function that determines if one string is a permutation of the other.\n    '''\n    pass\ndef longest_common_subsequence(s1,s2):\n    '''\n    Given two strings, write a function to find the longest common substring.\n    '''\n    pass\ndef longest_common_subsequence_dp(s1,s2):\n    '''\n    Given two strings, write a function to find the longest common substring.\n    '''\n    pass\ndef longest_common_subsequence_recursive(s1,s2,start_i,start_j):\n    '''\n    Given two strings, write a function to find the longest common substring.\n    '''\n    pass\ndef longest_common_subsequence_iterative(s1,s2):\n    '''\n    Given two strings, write a function to find the longest common substring.\n    '''\n    pass\ndef permute_string(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef get_permutation(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef permute_string_recursive(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef permute_string_iterative(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef permute_string_recursive_backtracking(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef permute_string_iterative_backtracking(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef permute_string_recursive_no_dup(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef permute_string_iterative_no_dup(string):\n    '''\n    Given a string, write a function to generate all permutations of the string in an array.\n    '''\n    pass\ndef binary_search(arr,target,start,end):\n    '''\n    Given a sorted array, write a function to search a target value in the array.\n    If the target value is found, then return its index, otherwise, return -1.\n    '''\n    pass\ndef interleave(a,b):\n    '''\n    Given two arrays, write a function to find the interleaving of the two arrays.\n    '''\n    pass\ndef max_heap_sort(arr):\n    '''\n    Given a max heap, write a function to restore the heap to a sorted array.\n    '''\n    pass\ndef min_heap_sort(arr):\n    '''\n    Given a min heap, write a function to restore the heap to a sorted array.\n    '''\n    pass\ndef interleave_using_heap(a,b):\n    '''\n    Given two arrays, write a function to find the interleaving of the two arrays.\n    '''\n    pass\ndef longest_common_subsequence_dp(s1,s2):\n    '''\n    Given two strings, write a function to find the longest common substring.\n    '''\n    pass\ndef longest_common_subsequence_recursive(s1,s2,start_i,start_j):\n    '''\n    Given two strings, write a function to find the longest common substring.\n    '''\n    pass\ndef longest_common_subsequence_iterative(s1,s2):\n    '''"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums or n<1:\n        return []\n    heap = nums[:n]\n    hq.heapify(heap)\n    for i in xrange(n,len(nums)):\n        if nums[i] > heap[0]:\n            hq.heapreplace(heap,nums[i])\n    return heap[::-1]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums or n<1:\n        return []\n    heap = nums[:n]\n    hq.heapify(heap)\n    for i in xrange(n,len(nums)):\n        if nums[i] < heap[0]:\n            hq.heapreplace(heap,nums[i])\n    return heap\ndef count_inversion(nums):\n    '''\n    Count inversions in an array\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    count = 0\n    for i in xrange(n):\n        for j in xrange(i+1,n):\n            if nums[i] > nums[j]:\n                count += 1\n    return count\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from an unsorted array\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    i = 0\n    j = 0\n    for i in xrange(n):\n        if nums[i]!= nums[j]:\n            j += 1\n            nums[j] = nums[i]\n    return j+1\ndef rotate(nums,k):\n    '''\n    Rearrange array so that array is rotated k times\n    '''\n    if not nums or len(nums) == 1:\n        return nums\n    n = len(nums)\n    k = k%n\n    nums.reverse()\n    nums[:k] = nums[:k][::-1]\n    nums[k:] = nums[k:][::-1]\n    return nums\ndef find_rotate_point(nums):\n    '''\n    Find point in rotated sorted array such that all elements before it are less than it and all elements after it are greater than it\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    low = 0\n    high = n-1\n    while low < high:\n        mid = (low+high)/2\n        if nums[mid] > nums[high]:\n            low = mid+1\n        elif nums[mid] < nums[low]:\n            high = mid\n        else:\n            high -= 1\n    return low\ndef search_in_rotated_sorted(nums,target):\n    '''\n    Search an item in an array of numbers which is rotated in sorted manner\n    '''\n    if not nums:\n        return False\n    n = len(nums)\n    if target >= nums[0] and target <= nums[n-1]:\n        low = 0\n        high = n-1\n        while low<=high:\n            mid = (low+high)/2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] > target:\n                high = mid-1\n            else:\n                low = mid+1\n    return False\ndef search_in_rotated_sorted_logarithmic(nums,target):\n    '''\n    Search an item in an array of numbers which is rotated in sorted manner\n    '''\n    if not nums:\n        return False\n    n = len(nums)\n    if target >= nums[0] and target <= nums[n-1]:\n        low = 0\n        high = n-1\n        while low<=high:\n            mid = (low+high)/2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] > target:\n                if nums[low] == target or nums[low+1] == target:\n                    return True\n                else:\n                    high = mid-1\n            else:\n                if nums[high] == target or nums[high-1] == target:\n                    return True\n                else:\n                    low = mid+1\n    return False\ndef find_rotation_point(nums):\n    '''\n    Find rotation point in array\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    low = 0\n    high = n-1\n    while low<high:\n        mid = (low+high)/2\n        if nums[mid] < nums[mid+1]:\n            low = mid+1\n        else:\n            high = mid\n    return low\ndef merge(nums1,nums2):\n    '''\n    Merge two sorted arrays and return the new merged array\n    '''\n    if not nums1 or not nums2:\n        return nums1+nums2\n    n = len(nums1)\n    m = len(nums2)\n    i = 0\n    j = 0\n    result = []\n    while i<n and j<m:\n        if nums1[i] <= nums2[j]:\n            result.append(nums1[i])\n            i += 1\n        else:\n            result.append(nums2[j])\n            j += 1\n    while i<n:\n        result.append(nums1[i])\n        i += 1\n    while j<m:\n        result.append(nums2[j])\n        j += 1\n    return result\ndef find_pivot(nums,low,high):\n    '''\n    Find a pivot in array\n    '''\n    if low == high:\n        return low\n    mid = (low+high)/2\n    if mid > 0 and nums[mid] > nums[mid-1]:\n        return mid\n    elif mid < len(nums)-1 and nums[mid] < nums[mid+1]:\n        return mid\n    elif nums[mid] < nums[low]:\n        return find_pivot(nums,mid+1,high)\n    else:\n        return find_pivot(nums,low,mid-1)\ndef find_pivot_2(nums,low,high):\n    '''\n    Find a pivot in array\n    '''\n    if low == high:\n        return low\n    mid = (low+high)/2\n    if nums[mid] > nums[high]:\n        return find_pivot_2(nums,mid+1,high)\n    elif nums[mid] < nums[low]:\n        return find_pivot_2(nums,low,mid-1)\n    else:\n        return mid\ndef find_rotation_point_2(nums):\n    '''\n    Find a rotation point in array\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    low = 0\n    high = n-1\n    while low<high:\n        mid = (low+high)/2\n        if nums[mid] > nums[high]:\n            low = mid+1\n        elif nums[mid] < nums[low]:\n            high = mid\n        else:\n            high -= 1\n    return low\ndef find_rotation_point_3(nums):\n    '''\n    Find a rotation point in array\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    low = 0\n    high = n-1\n    while low<high:\n        mid = (low+high)/2\n        if nums[mid] > nums[high]:\n            low = mid+1\n        elif nums[mid] < nums[low]:\n            high = mid\n        else:\n            high -= 1\n    return low\ndef find_rotation_point_4(nums):\n    '''\n    Find a rotation point in array\n    '''\n    if not nums:\n        return 0\n    n "
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 0\n    elif x == 2:\n        return 0\n    elif x == 3:\n        return 0\n    elif x == 4:\n        return 0\n    elif x == 5:\n        return 0\n    elif x == 6:\n        return 1\n    elif x == 7:\n        return 1\n    elif x == 8:\n        return 0\n    elif x == 9:\n        return 0\n    elif x == 10:\n        return 0\n    elif x == 11:\n        return 0\n    elif x == 12:\n        return 0\n    elif x == 13:\n        return 0\n    elif x == 14:\n        return 0\n    elif x == 15:\n        return 0\n    elif x == 16:\n        return 0\n    elif x == 17:\n        return 0\n    elif x == 18:\n        return 0\n    elif x == 19:\n        return 0\n    elif x == 20:\n        return 0\n    elif x == 21:\n        return 0\n    elif x == 22:\n        return 0\n    elif x == 23:\n        return 0\n    elif x == 24:\n        return 0\n    elif x == 25:\n        return 0\n    elif x == 26:\n        return 0\n    elif x == 27:\n        return 0\n    elif x == 28:\n        return 0\n    elif x == 29:\n        return 0\n    elif x == 30:\n        return 0\n    elif x == 31:\n        return 0\n    elif x == 32:\n        return 0\n    elif x == 33:\n        return 0\n    elif x == 34:\n        return 0\n    elif x == 35:\n        return 0\n    elif x == 36:\n        return 0\n    elif x == 37:\n        return 0\n    elif x == 38:\n        return 0\n    elif x == 39:\n        return 0\n    elif x == 40:\n        return 0\n    elif x == 41:\n        return 0\n    elif x == 42:\n        return 0\n    elif x == 43:\n        return 0\n    elif x == 44:\n        return 0\n    elif x == 45:\n        return 0\n    elif x == 46:\n        return 0\n    elif x == 47:\n        return 0\n    elif x == 48:\n        return 0\n    elif x == 49:\n        return 0\n    elif x == 50:\n        return 0\n    elif x == 51:\n        return 0\n    elif x == 52:\n        return 0\n    elif x == 53:\n        return 0\n    elif x == 54:\n        return 0\n    elif x == 55:\n        return 0\n    elif x == 56:\n        return 0\n    elif x == 57:\n        return 0\n    elif x == 58:\n        return 0\n    elif x == 59:\n        return 0\n    elif x == 60:\n        return 0\n    elif x == 61:\n        return 0\n    elif x == 62:\n        return 0\n    elif x == 63:\n        return 0\n    elif x == 64:\n        return 0\n    elif x == 65:\n        return 0\n    elif x == 66:\n        return 0\n    elif x == 67:\n        return 0\n    elif x == 68:\n        return 0\n    elif x == 69:\n        return 0\n    elif x == 70:\n        return 0\n    elif x == 71:\n        return 0\n    elif x == 72:\n        return 0\n    elif x == 73:\n        return 0\n    elif x == 74:\n        return 0\n    elif x == 75:\n        return 0\n    elif x == 76:\n        return 0\n    elif x == 77:\n        return 0\n    elif x == 78:\n        return 0\n    elif x == 79:\n        return 0\n    elif x == 80:\n        return 0\n    elif x == 81:\n        return 0\n    elif x == 82:\n        return 0\n    elif x == 83:\n        return 0\n    elif x == 84:\n        return 0\n    elif x == 85:\n        return 0\n    elif x == 86:\n        return 0\n    elif x == 87:\n        return 0\n    elif x == 88:\n        return 0\n    elif x == 89:\n        return 0\n    elif x == 90:\n        return 0\n    elif x == 91:\n        return 0\n    elif x == 92:\n        return 0\n    elif x == 93:\n        return 0\n    elif x == 94:\n        return 0\n    elif x == 95:\n        return 0\n    elif x == 96:\n        return 0\n    elif x == 97:\n        return 0\n    elif x == 98:\n        return 0\n    elif x == 99:\n        return 0\n    elif x == 100:\n        return 0\n    elif x == 101:\n        return 0\n    elif x == 102:\n        return 0\n    elif x == 103:\n        return 0\n    elif x == 104:\n        return 0\n    elif x == 105:\n        return 0\n    elif x == 106:\n        return 0\n    elif x == 107:\n        return 0\n    elif x == 108:\n        return 0\n    elif x == 109:\n        return 0\n    elif x == 110:\n        return 0\n    elif x == 111:\n        return 0\n    elif x == 112:\n        return 0\n    elif x == 113:\n        return 0\n    elif x == 114:\n        return 0\n    elif x == 115:\n        return 0\n    elif x == 116:\n        return 0\n    elif x == 117:\n        return 0\n    elif x == 118:\n        return 0\n    elif x == 119:\n        return 0\n    elif x == 120:\n        return 0\n    elif x == 121:\n        return 0\n    elif x == 122:\n        return 0\n    elif x == 123:\n        return 0\n    elif x == 124:\n        return 0\n    elif x == 125:\n        return 0\n    elif x == 126:\n        return 0\n    elif x == 127:\n        return 0\n    elif x == 128:\n        return 0\n    elif x == 129:\n        return 0\n    elif x == 130:\n        return 0\n    elif x == 131:\n        return 0\n    elif x == 132:\n        return 0\n    elif x == 133:\n        return 0\n    elif x == 134:\n        return 0\n    elif x == 135:\n        return 0\n    elif x == 136:\n        return 0\n    elif x == 137:\n        return 0\n    elif x == 138:\n        return 0\n    elif x == 139:\n        return 0\n    elif x == 140:\n        return 0\n    elif x == 141:\n        return 0\n    elif x == 142:\n        return 0\n    elif x == 143:\n        return 0\n    elif x == 144:\n        return 0\n    elif x == 145:\n        return 0\n    elif x == 146:\n        return 0\n    elif x == 147:\n        return 0\n    elif x == 148:\n        return 0\n    elif x == 149:\n        return 0\n    elif x == 150:\n        return 0\n    elif x == 151:\n        return 0\n    elif x == 152:\n        return 0\n    elif x == 153:\n        return 0\n    elif x == 154:\n        return 0\n    elif x == 155:\n        return 0\n    elif x == 156:\n        return 0\n    elif x == 157:\n        return 0\n    elif x == 158:\n        return 0\n    elif x == 159:\n        return 0\n    elif x == 160:\n        return 0\n    elif x == 161:\n        return 0\n    elif x == 162:\n        return 0\n    elif x == 163:\n        return 0\n    elif x == 164:\n        return 0\n    elif x == 165:\n        return 0\n    elif x == 166:\n        return 0\n    eli"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # return (x & (x - 1)) == 0\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x!= 2 ** (x - 1): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x and (not (x & (x - 1))) \n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num = x\n    count = 0\n    while num > 0:\n        num = num / 2\n        count += 1\n    if (x % 2) == 0:\n        return (x,count)\n    else:\n        return (x,count-1)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2:\n        return True\n    while x > 2:\n        if x % 2 == 1:\n            return False\n        x = x / 2\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # using bitwise operator \n    # if x!= 0 : \n    #     x = x & (x - 1)\n    #     print(x)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n    #return not bool(x & (x - 1))\n    \ndef is_Palindrome(x): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    return x[:] == x[::-1]\n    \ndef factorial(x):\n    '''\n    Write a python function to find the factorial of the number.\n    '''\n    if x < 0:\n        return False\n    if x == 0 or x == 1:\n        return 1\n    return x * factorial(x - 1)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    matches = re.findall(r'\\w{4,}', text)\n    print(matches)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    re_chars = re.compile(r'[^\\w]')\n    re_word = re.compile(r'\\w{4,}')\n    result = re_word.findall(text)\n    print result\ndef find_words_in_line(text):\n    '''\n    Write a function to find all words that start with a vowel in a string.\n    '''\n    re_vowel = re.compile(r'[aeiouAEIOU]')\n    re_word = re.compile(r'\\w+')\n    result = re_word.findall(text)\n    print result\ndef find_alphanumeric(text):\n    '''\n    Write a function to find all the alphanumeric characters in a string.\n    '''\n    re_alphanumeric = re.compile(r'\\w+')\n    result = re_alphanumeric.findall(text)\n    print result\ndef find_matches(text):\n    '''\n    Write a function to find all the matches in a string.\n    '''\n    re_matches = re.compile(r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})')\n    result = re_matches.findall(text)\n    print result\ndef find_emails(text):\n    '''\n    Write a function to find all the emails in a string.\n    '''\n    re_emails = re.compile(r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})')\n    result = re_emails.findall(text)\n    print result\ndef find_phone_numbers(text):\n    '''\n    Write a function to find all the phone numbers in a string.\n    '''\n    re_phone_number = re.compile(r'(0\\d{2,3}-\\d{3,4}-\\d{4})')\n    result = re_phone_number.findall(text)\n    print result\ndef find_acronyms(text):\n    '''\n    Write a function to find all the acronyms in a string.\n    '''\n    re_acronym = re.compile(r'\\b([A-Z]{1}[a-z]+[A-Z]{1})\\b')\n    result = re_acronym.findall(text)\n    print result\ndef find_links(text):\n    '''\n    Write a function to find all the hyperlinks in a string.\n    '''\n    re_links = re.compile(r'((?:https?|ftp)://[^\\s\\.]+\\.[^\\s]+)')\n    result = re_links.findall(text)\n    print result\ndef find_ip_addresses(text):\n    '''\n    Write a function to find all the ip addresses in a string.\n    '''\n    re_ip = re.compile(r'(?:[0-9]{1,3}\\.){3}[0-9]{1,3}')\n    result = re_ip.findall(text)\n    print result\ndef find_roman_numbers(text):\n    '''\n    Write a function to find all the roman numbers in a string.\n    '''\n    re_roman = re.compile(r'([M-Z]{1}[0-9]+|[0-9]{1,3}[XV]?{1}[0-9]+|[Vv][Xx]|[Xx][Vv]|[Mm]{1}[Xx][Vv]|[Mm]{1}[Vv]|[Vv]{1}[Vv]|[Vv]{1}[Ii]|[Ii][Vv])')\n    result = re_roman.findall(text)\n    print result\ndef find_dates(text):\n    '''\n    Write a function to find all the dates in a string.\n    '''\n    re_date = re.compile(r'([0-9]+/[0-9]+/[0-9]{4})')\n    result = re_date.findall(text)\n    print result\ndef find_phone_numbers_2(text):\n    '''\n    Write a function to find all the phone numbers in a string.\n    '''\n    re_phone_number = re.compile(r'(0\\d{2,3}-\\d{3,4}-\\d{4})')\n    result = re_phone_number.findall(text)\n    print result\ndef find_prepositions(text):\n    '''\n    Write a function to find all the prepositions in a string.\n    '''\n    re_preposition = re.compile(r'(to|in|by|with|from|for|about|on|off|in|on|for|at|to|of|on|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|from|about|on|off|in|on|to|for|at|to|with|fro"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return re.findall(r'\\w+', text)\ndef find_char_long_v2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v3(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return re.findall('\\w+', text)\ndef find_char_long_v4(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v5(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v6(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v7(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v8(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v9(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return re.findall(r'\\w+', text)\ndef find_char_long_v10(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v11(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v12(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v13(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v14(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v15(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v16(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v17(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v18(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v19(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v20(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v21(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v22(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v23(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if type(text)!= str:\n        return None\n    \n    words = re.findall('\\w{4,}', text)\n    if words:\n        return words\n    else:\n        return None\n    \ndef find_words_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if type(text)!= str:\n        return None\n    \n    words = re.findall('\\w{4,}', text)\n    if words:\n        return words\n    else:\n        return None\n    \ndef find_words_long2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if type(text)!= str:\n        return None\n    \n    words = re.findall('\\w{4,}', text)\n    if words:\n        return words\n    else:\n        return None\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return []\n    #words = re.findall(r'\\w+', text)\n    words = re.findall(r'\\w+', text)\n    result = []\n    for word in words:\n        if len(word)>=4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    list_of_words = pattern.findall(text)\n    return list_of_words\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Your Code Here\n    return re.findall(r\"[\\w]+\", text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    text_list = text.split()\n    for word in text_list:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    all_words = re.findall(r'\\w{4,}', text)\n    return all_words\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # using list\n    words = re.findall('\\w+', text)\n    return [word for word in words if len(word) >= 4]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # for i in range(len(nums)):\n    #     nums[i] = nums[i]**2\n    # return nums\n    # return [x**2 for x in nums]\n    return list(map(lambda x: x**2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i*i)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x ** 2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n    "
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    n = len(str)\n    # your code here\n    \n    def helper(s, result):\n        if s == \"\":\n            return result\n        else:\n            if s[0] == s[-1]:\n                result += helper(s[1:-1], result)\n            else:\n                result += helper(s[1:], result)\n            return result\n        \n    return helper(str, 0)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    str_len = len(str)\n    rot_count = 0\n    \n    if str_len == 0:\n        return 0\n    \n    for i in range(0, str_len):\n        temp = str[i:] + str[:i]\n        if temp == str:\n            rot_count = rot_count + 1\n    \n    return rot_count\n    \nprint find_Rotations(\"abcdef\")\nprint find_Rotations(\"abcd\")\nprint find_Rotations(\"abc\")\nprint find_Rotations(\"abcdef\")\nprint find_Rotations(\"a\")\nprint find_Rotations(\"\")\nprint find_Rotations(\"abcdefgh\")\nprint find_Rotations(\"abcdefghijklm\")\nprint find_Rotations(\"abcdefghijklmn\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyz\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=`~{}|\\:;\\\"'<,>.?/\")\nprint find_Ro"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations():\n    assert find_Rotations(\"ABCD\") == 0\n    assert find_Rotations(\"BBBB\") == -1\n    assert find_Rotations(\"\") == 0\ndef find_Rotations_two(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_two():\n    assert find_Rotations_two(\"ABCD\") == 0\n    assert find_Rotations_two(\"BBBB\") == -1\n    assert find_Rotations_two(\"\") == 0\ndef find_rotations_three(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_three():\n    assert find_rotations_three(\"ABCD\") == 0\n    assert find_rotations_three(\"BBBB\") == -1\n    assert find_rotations_three(\"\") == 0\ndef find_rotations_four(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_four():\n    assert find_rotations_four(\"ABCD\") == 0\n    assert find_rotations_four(\"BBBB\") == -1\n    assert find_rotations_four(\"\") == 0\ndef find_rotations_five(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_five():\n    assert find_rotations_five(\"ABCD\") == 0\n    assert find_rotations_five(\"BBBB\") == -1\n    assert find_rotations_five(\"\") == 0\ndef find_rotations_six(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_six():\n    assert find_rotations_six(\"ABCD\") == 0\n    assert find_rotations_six(\"BBBB\") == -1\n    assert find_rotations_six(\"\") == 0\ndef find_rotations_seven(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_seven():\n    assert find_rotations_seven(\"ABCD\") == 0\n    assert find_rotations_seven(\"BBBB\") == -1\n    assert find_rotations_seven(\"\") == 0\ndef find_rotations_eight(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_eight():\n    assert find_rotations_eight(\"ABCD\") == 0\n    assert find_rotations_eight(\"BBBB\") == -1\n    assert find_rotations_eight(\"\") == 0\ndef find_rotations_nine(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_nine():\n    assert find_rotations_nine(\"ABCD\") == 0\n    assert find_rotations_nine(\"BBBB\") == -1\n    assert find_rotations_nine(\"\") == 0\ndef find_rotations_ten(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_ten():\n    assert find_rotations_ten(\"ABCD\") == 0\n    assert find_rotations_ten(\"BBBB\") == -1\n    assert find_rotations_ten(\"\") == 0\ndef find_rotations_eleven(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_eleven():\n    assert find_rotations_eleven(\"ABCD\") == 0\n    assert find_rotations_eleven(\"BBBB\") == -1\n    assert find_rotations_eleven(\"\") == 0\ndef find_rotations_twelve(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n):\n        if str[i:]+str[0:i] == str:\n            return (n-i)\n    return -1\ndef test_find_rotations_twelve():\n    assert find_rotations_twelve(\"ABCD\") == 0\n    assert find_rotations_twelve(\"BBBB\") == -1\n    assert find_rotations_twelve(\"\") == 0\ndef find_rotations_thirteen(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    n = len(str)\n    for i in range(0,n)"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    temp= str[:]\n    n = len(str)\n    if n < 2:\n        return 0\n    for i in xrange(1,n):\n        temp = temp[-1] + temp[:-1]\n        if temp == str:\n            return i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    else:\n        return 1 + find_Rotations(str[1:])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    from collections import Counter\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str) \n    if l == 0:\n        return 0\n    if l == 1:\n        return 0\n    if l == 2:\n        return 0\n    i = 0\n    j = 1\n    while (j<l):\n        if str[i] == str[j]:\n            i+=1\n            j+=1\n        else:\n            break\n    if i == j:\n        return 0\n    else:\n        return (l-i)//2\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    temp = str + str\n    for i in range(n):\n        if (temp[i:] + temp[:i]) == str:\n            return (n - i)\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str) \n    for i in range(0, length):\n        print('comparing ', str[i:],'with ', str[length-i:])\n        if str[i:] == str[length-i:]:\n            return i\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 1\n    while(True):\n        if(str == str[::-1]):\n            return rotations\n        if(str[:len(str)] == str[len(str):]):\n            str = str[len(str):]\n            rotations += 1\n        else:\n            return -1\n        \nprint find_Rotations('abc')\nprint find_Rotations('abcda')\nprint find_Rotations('abcd')\nprint find_Rotations('abcdabcdabcd')\nprint find_Rotations('abcdbcdecdbcddd')\nprint find_Rotations('aacdbcdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbcdecdbc"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    newS=''\n    for i in s:\n        if i==ch:\n            pass\n        else:\n            newS+=i\n    return newS\n    \n    \ndef remove_Occ2(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.rstrip(ch).lstrip(ch)\n    \n    \n    \ndef last_occ(s,ch):\n    '''\n    Write a python function to return the last occurrence of a given character from the string.\n    '''\n    last_pos=0\n    for i in range(len(s)):\n        if s[i]==ch:\n            last_pos=i\n    return last_pos\n    \n    \ndef last_occ2(s,ch):\n    '''\n    Write a python function to return the last occurrence of a given character from the string.\n    '''\n    last_pos=0\n    for i in range(len(s)-1,0,-1):\n        if s[i]==ch:\n            last_pos=i\n    return last_pos\n    \n    \ndef count_ch(s,ch):\n    '''\n    Write a python function to count the number of occurrences of a given character from the string.\n    '''\n    count=0\n    for i in s:\n        if i==ch:\n            count+=1\n    return count\n    \n    \ndef count_ch2(s,ch):\n    '''\n    Write a python function to count the number of occurrences of a given character from the string.\n    '''\n    count=0\n    for i in s:\n        if i==ch:\n            count+=1\n    return count\n    \n    \ndef remove_all_ch(s,ch):\n    '''\n    Write a python function to remove all the occurrences of a given character from the string.\n    '''\n    newS=''\n    for i in s:\n        if i==ch:\n            pass\n        else:\n            newS+=i\n    return newS\n    \n    \ndef remove_all_ch2(s,ch):\n    '''\n    Write a python function to remove all the occurrences of a given character from the string.\n    '''\n    newS=''\n    for i in s:\n        if i==ch:\n            pass\n        else:\n            newS+=i\n    return newS\n    \n    \ndef first_n_ch(s,n,ch):\n    '''\n    Write a python function to return first n occurrences of a given character from the string.\n    '''\n    newS=''\n    for i in range(n):\n        if s[i]==ch:\n            newS+=ch\n    return newS\n    \n    \ndef first_n_ch2(s,n,ch):\n    '''\n    Write a python function to return first n occurrences of a given character from the string.\n    '''\n    newS=''\n    for i in range(n):\n        if s[i]==ch:\n            newS+=ch\n    return newS\n    \n    \ndef last_n_ch(s,n,ch):\n    '''\n    Write a python function to return last n occurrences of a given character from the string.\n    '''\n    newS=''\n    for i in range(len(s)-n,len(s)):\n        if s[i]==ch:\n            newS+=ch\n    return newS\n    \n    \ndef last_n_ch2(s,n,ch):\n    '''\n    Write a python function to return last n occurrences of a given character from the string.\n    '''\n    newS=''\n    for i in range(len(s)-n,len(s)):\n        if s[i]==ch:\n            newS+=ch\n    return newS\n    \n    \ndef nth_ch(s,n,ch):\n    '''\n    Write a python function to return nth occurrence of a given character from the string.\n    '''\n    newS=''\n    for i in range(len(s)):\n        if s[i]==ch:\n            if i==n:\n                newS+=ch\n            else:\n                pass\n        else:\n            newS+=s[i]\n    return newS\n    \n    \ndef nth_ch2(s,n,ch):\n    '''\n    Write a python function to return nth occurrence of a given character from the string.\n    '''\n    newS=''\n    for i in range(len(s)):\n        if s[i]==ch:\n            if i==n:\n                newS+=ch\n            else:\n                pass\n        else:\n            newS+=s[i]\n    return newS\n    \n    \ndef find_str(s,st):\n    '''\n    Write a python function to find a substring in a given string.\n    '''\n    pos=0\n    for i in range(len(s)):\n        if s[i:i+len(st)]==st:\n            pos=i\n            break\n    return pos\n    \n    \ndef find_str2(s,st):\n    '''\n    Write a python function to find a substring in a given string.\n    '''\n    pos=0\n    for i in range(len(s)):\n        if s[i:i+len(st)]==st:\n            pos=i\n            break\n    return pos\n    \n    \ndef find_str_all(s,st):\n    '''\n    Write a python function to find a substring in a given string.\n    '''\n    pos=[]\n    for i in range(len(s)):\n        if s[i:i+len(st)]==st:\n            pos.append(i)\n    return pos\n    \n    \ndef find_str_all2(s,st):\n    '''\n    Write a python function to find a substring in a given string.\n    '''\n    pos=[]\n    for i in range(len(s)):\n        if s[i:i+len(st)]==st:\n            pos.append(i)\n    return pos\n    \n    \ndef reverse_str(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    newS=''\n    for i in range(len(s)-1,-1,-1):\n        newS+=s[i]\n    return newS\n    \n    \ndef reverse_str2(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return s[::-1]\n    \n    \ndef reverse_str_split(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    newS=''\n    for i in s.split():\n        newS+=reverse_str(i)\n        newS+=' '\n    return newS\n    \n    \ndef reverse_str_split2(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return''.join(reverse_str2(i) for i in s.split())\n    \n    \ndef sort_str(s):\n    '''\n    Write a python function to sort a given string.\n    '''\n    newS=''\n    for i in sorted(s):\n        newS+=i\n    return newS\n    \n    \ndef sort_str2(s):\n    '''\n    Write a python function to sort a given string.\n    '''\n    return ''.join(sorted(s))\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    return s==s[::-1]\n    \n    \ndef is_palindrome2(s):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    for i in range(len(s)):\n        if s[i]!=s[len(s)-1-i]:\n            return False\n    return True\n    \n    \ndef is_palindrome3(s):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    i=0\n    j=len(s)-1\n    while "
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = s.split(ch)\n    return \"\".join(l[1:-1])\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    import re\n    return re.sub(ch+'+','',s)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    a=s.rfind(ch)\n    b=s.find(ch)\n    if(a==b):\n        return s\n    else:\n        return s[:a]+s[b+1:]\n    \n    \ndef remove_str_in_list(s,l):\n    '''\n    Write a python function to remove the string from a given list of strings.\n    '''\n    i=l.index(s)\n    return l[:i]+l[i+1:]\n    \ndef substring(s1,s2):\n    '''\n    Write a python function to check whether a substring is present in a string or not\n    '''\n    return s1 in s2\n    \ndef ispalindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not\n    '''\n    return s==s[::-1]\n    \ndef count_char(s):\n    '''\n    Write a python function to count the occurence of characters in a string\n    '''\n    return dict((i,s.count(i)) for i in set(s))\n    \ndef split(s,c):\n    '''\n    Write a python function to split a string into list of strings after a given character\n    '''\n    return s.split(c)\n    \ndef min_max(l):\n    '''\n    Write a python function to calculate the minimum and maximum of a list\n    '''\n    return min(l),max(l)\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse a string\n    '''\n    return s[::-1]\n    \ndef sort_str(s):\n    '''\n    Write a python function to sort a string based on ASCII value of the characters\n    '''\n    return \"\".join(sorted(s))\n    \ndef sort_str_in_list(s,l):\n    '''\n    Write a python function to sort a string based on ASCII value of the characters\n    '''\n    l=list(s)\n    l=sorted(l)\n    return \"\".join(l)\n    \ndef delete_duplicate_chars(s):\n    '''\n    Write a python function to delete all duplicate characters from a string\n    '''\n    return \"\".join(set(s))\n    \ndef map_str(s,m):\n    '''\n    Write a python function to replace the characters in a string with given mapping\n    '''\n    return \"\".join(m[i] for i in s)\n    \ndef swap(a,b):\n    '''\n    Write a python function to swap two integers\n    '''\n    return b,a\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to sum of the digits in a number\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef count_occurence(s,ch):\n    '''\n    Write a python function to count the number of occurrences of a given character in a string\n    '''\n    return s.count(ch)\n    \ndef replace(s,ch,s2):\n    '''\n    Write a python function to replace all occurrences of a character in a string with another string\n    '''\n    return s.replace(ch,s2)\n    \ndef print_list(l):\n    '''\n    Write a python function to print the list\n    '''\n    return [str(i) for i in l]\n    \ndef print_list_of_lists(l):\n    '''\n    Write a python function to print the list of lists\n    '''\n    return [print_list(i) for i in l]\n    \ndef print_dict(d):\n    '''\n    Write a python function to print the dictionary\n    '''\n    return dict((i,str(d[i])) for i in d)\n    \ndef print_dict_of_lists(d):\n    '''\n    Write a python function to print the dictionary of lists\n    '''\n    return dict((i,print_list(d[i])) for i in d)\n    \ndef print_dict_of_tuples(d):\n    '''\n    Write a python function to print the dictionary of tuples\n    '''\n    return dict((i,tuple(d[i])) for i in d)\n    \ndef print_dict_of_dict(d):\n    '''\n    Write a python function to print the dictionary of dict\n    '''\n    return dict((i,dict((j,str(d[i][j])) for j in d[i])) for i in d)\n    \ndef f(l):\n    '''\n    Write a python function to check whether a given list is consecutive or not\n    '''\n    return sorted(l)==list(range(min(l),max(l)+1))\n    \ndef has_all_unique_char(s):\n    '''\n    Write a python function to check whether a string has all unique characters or not\n    '''\n    return len(s)==len(set(s))\n    \ndef check_all_vowels(s):\n    '''\n    Write a python function to check whether a string is a permutation of a palindrome\n    '''\n    return s==s[::-1]\n    \ndef print_list_of_lists_of_list(l):\n    '''\n    Write a python function to print the list of lists of list\n    '''\n    return [[print_list(i) for i in j] for j in l]\n    \ndef print_list_of_lists_of_string(l):\n    '''\n    Write a python function to print the list of lists of string\n    '''\n    return [[print_list(i) for i in j] for j in l]\n    \ndef print_list_of_tuples_of_string(l):\n    '''\n    Write a python function to print the list of tuples of string\n    '''\n    return [[tuple(i) for i in j] for j in l]\n    \ndef print_list_of_tuples_of_list(l):\n    '''\n    Write a python function to print the list of tuples of list\n    '''\n    return [[tuple(i) for i in j] for j in l]\n    \ndef print_list_of_sets(l):\n    '''\n    Write a python function to print the list of sets\n    '''\n    return [set(i) for i in l]\n    \ndef print_list_of_tuples_of_set(l):\n    '''\n    Write a python function to print the list of tuples of set\n    '''\n    return [(tuple(i)) for i in l]\n    \ndef print_list_of_lists_of_set(l):\n    '''\n    Write a python function to print the list of lists of set\n    '''\n    return [[set(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_list(l):\n    '''\n    Write a python function to print the list of dictionary of list\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_tuple(l):\n    '''\n    Write a python function to print the list of dictionary of tuple\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_string(l):\n    '''\n    Write a python function to print the list of dictionary of string\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_dict(l):\n    '''\n    Write a python function to print the list of dictionary of dictionary\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_dict_of_list(l):\n    '''\n    Write a python function to print the list of dictionary of dictionary of list\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_list_of_dict(l):\n    '''\n    Write a python function to print the list of list of dictionary\n    '''"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1 = s.replace(ch, '')\n    s1 = s1.replace(ch, '')\n    return s1\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.strip(ch)\n    s=s.strip(ch)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip(ch)\n    s = s.strip(ch)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = 0\n    for i in s:\n        if i == ch:\n            count += 1\n    if count == 0:\n        return -1\n    s = s.replace(ch, '', 1)\n    s = s.replace(ch, '', 1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    str = list(s)\n    str.remove(ch)\n    str.remove(ch)\n    \n    return ''.join(str)\n    \n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    return sorted(M, key = lambda row: row_sums.index(sum(row)))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    new_matrix = sorted(M, key=sum)\n    return new_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in xrange(len(M)):\n        row_sum = sum(M[i])\n        if row_sum > 0:\n            return 'No'\n        else:\n            row_sum = -row_sum\n    return 'Yes'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    row_sum = [0]*n\n    for i in xrange(n):\n        for j in xrange(n):\n            row_sum[i] += M[i][j]\n        row_sum[i] += row_sum[i-1]\n        if i == 0:\n            row_sum[i] = row_sum[i] + M[i][i]\n        else:\n            row_sum[i] = row_sum[i] + row_sum[i-1]\n        M[i].append(row_sum[i])\n    M.append(row_sum)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if j == 0:\n                M[i][j] += M[i-1][j]\n            else:\n                M[i][j] += M[i][j-1]\n    for j in range(len(M[0])):\n        M[0][j] = 0\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n    for i in range(len(M) - 1):\n        for j in range(len(M[i])):\n            if M[i][j] > M[i + 1][j]:\n                temp = M[i][j]\n                M[i][j] = M[i + 1][j]\n                M[i + 1][j] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Get the length of each row\n    rows = [len(M[0])]\n    for i in range(len(M)):\n        rows.append(len(M[i]))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    r = len(M)\n    c = len(M[0])\n    d = {}\n    for i in range(r):\n        for j in range(c):\n            if i not in d:\n                d[i] = {}\n                d[i][j] = M[i][j]\n            else:\n                if j not in d[i]:\n                    d[i][j] = M[i][j]\n                else:\n                    d[i][j] += M[i][j]\n    # print d\n    res = []\n    for i in sorted(d.keys()):\n        # print i,d[i]\n        res.append(d[i])\n    return res\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    N = len(M)\n    S = len(M[0])\n    \n    M_sorted = []\n    \n    # print M\n    \n    for i in xrange(N):\n        M_i = sorted(M[i])\n        # print M_i\n        # print\n        M_i = [0] + M_i + [0]\n        # print M_i\n        # print\n        # print M_i\n        M_i = sum(M_i)\n        # print M_i\n        M_sorted.append(M_i)\n        # print M_sorted\n        # print\n        \n    M_sorted.sort()\n    \n    return M_sorted\n    \ndef print_matrix(M):\n    N = len(M)\n    S = len(M[0])\n    for i in xrange(N):\n        print M[i]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (h*(h+l))/2.0*b\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h)/3\n    \ndef find_area(a,b,c) :\n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    return (a * b)/2\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    return (b*h)/2.0\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return abs(l*b*h/6.0)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l <= 0 or b <= 0 or h <= 0 :\n        return \"Triangle can't be formed\"\n    else :\n        return l*b*h/(6)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # b * h / 2 =  1/2 (a + b + c) * h\n    return (b*h)/2 * (l + b + h)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #l is length of side 1\n    #b is length of side 2\n    #h is length of side 3\n    vol = l*b*h/6\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l=float(l)\n    b=float(b)\n    h=float(h)\n    return (l*b*h)/3.0\n    "
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.match('^[a-z]*_?[a-z]+$', text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    if re.search('[a-z]+_[a-z]+', text)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_+[a-z]*', text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'^[a-z]{1}_[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-z]{1}[a-"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= 'a' and text[i] <= 'z':\n            return False\n        if text[i] == '_':\n            if i < len(text) - 1 and text[i+1] >= 'a' and text[i+1] <= 'z':\n                return False\n    return True\ndef text_lowercase_double_underscore(text):\n    '''\n    Write a function that returns true if the input string contains sequences of two consecutive lowercase letters and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text) - 1):\n        if text[i] == '_' and text[i+1] == '_':\n            return False\n        if text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'a' and text[i+1] <= 'z':\n            return False\n    return True\ndef text_upper_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of upper case letters and lower case letters and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= 'A' and text[i] <= 'Z':\n            return False\n        if text[i] >= 'a' and text[i] <= 'z':\n            return False\n    return True\ndef text_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of digits and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= '0' and text[i] <= '9':\n            return False\n    return True\ndef text_letters(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= 'a' and text[i] <= 'z':\n            return False\n        if text[i] >= 'A' and text[i] <= 'Z':\n            return False\n    return True\ndef text_substrings(text):\n    '''\n    Write a function to that returns true if the input string contains all the characters of the alphabet in the same order and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= 'a' and text[i] <= 'z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z':\n            continue\n        if i < len(text) - 1 and text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'A' and text[i+1] <= 'Z':\n            return False\n    return True\ndef text_substrings_space(text):\n    '''\n    Write a function to that returns true if the input string contains all the characters of the alphabet in the same order and true if there is a space character in the input string and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= 'a' and text[i] <= 'z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z':\n            continue\n        if i < len(text) - 1 and text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'A' and text[i+1] <= 'Z' and text[i]!='' and text[i+1]!='':\n            return False\n    return True\ndef text_substrings_special(text):\n    '''\n    Write a function to that returns true if the input string contains all the characters of the alphabet in the same order and true if there is a space character in the input string and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= 'a' and text[i] <= 'z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z':\n            continue\n        if i < len(text) - 1 and text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'A' and text[i+1] <= 'Z' and text[i]!='' and text[i+1]!='':\n            return False\n    return True\ndef text_words(text):\n    '''\n    Write a function to that returns true if the input string contains words, numbers, letters, and underscores, and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= '0' and text[i] <= '9':\n            continue\n        if text[i] >= 'a' and text[i] <= 'z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z' and text[i]!='':\n            continue\n        if i < len(text) - 1 and text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'A' and text[i+1] <= 'Z' and text[i]!='' and text[i+1]!='':\n            continue\n    return True\ndef text_words_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains words, numbers, letters, and underscores, and true if there is a space character in the input string and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= '0' and text[i] <= '9':\n            continue\n        if text[i] >= 'a' and text[i] <= 'z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z' and text[i]!='':\n            continue\n        if i < len(text) - 1 and text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'A' and text[i+1] <= 'Z' and text[i]!='' and text[i+1]!='':\n            continue\n    return True\ndef text_words_special(text):\n    '''\n    Write a function to that returns true if the input string contains words, numbers, letters, and underscores, and true if there is a space character in the input string and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    for i in range(len(text)):\n        if text[i] >= '0' and text[i] <= '9':\n            continue\n        if text[i] >= 'a' and text[i] <= 'z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z':\n            continue\n        if text[i] >= 'A' and text[i] <= 'Z' and text[i]!='':\n            continue\n        if i < len(text) - 1 and text[i] >= 'a' and text[i] <= 'z' and text[i+1] >= 'A' and text[i+1] <= 'Z' and text[i]!='' and text[i+1]!='':\n            continue\n    return True\ndef text_words_period(text):\n    '''\n    Write a function to that returns true if the input string contains words, numbers, letters, and underscores, and true if there is a period character in the input string and false otherwise"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text is None:\n        return False\n    if not isinstance(text, str):\n        raise TypeError('Input is not a string')\n    if len(text) == 0:\n        return False\n    if len(text) == 1:\n        return text.isalpha()\n    if len(text) > 1:\n        count = 0\n        for ch in text:\n            if ch.isalpha():\n                count += 1\n        if count >= 2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lowercase = re.compile(r'[a-z]+_+[a-z]*')\n    return lowercase.match(text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    if re.search('[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False\n    # for i in range(len(text) - 1):\n    #     if text[i].lower() == text[i+1].lower():\n    #         continue\n    #     else:\n    #         return False\n    # return True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub('\\s+', '_', text)\n    return all(i.isalpha() or i == '_' for i in text)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    \n    return a * 4\n    \ndef set_a():\n    a = float(input(\"Enter a: \"))\n    return a\n    \ndef set_b():\n    b = float(input(\"Enter b: \"))\n    return b\n    \ndef triangle_area(a, b):\n    c = (a + b) / 2\n    return (c * (c - a) * (c - b)) ** 0.5\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = []\n    for i in range(len(string)):\n        li.append(string[i])\n    return li\ndef remove_characters(list1,list2):\n    li = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            li.append(list1[i])\n    return li\ndef str_to_str(string):\n    li = []\n    for i in range(len(string)):\n        li.append(string[i])\n    return li\ndef remove_characters_from_end(string,string2):\n    li = []\n    for i in range(len(string)):\n        if string[len(string)-i-1] not in string2:\n            li.append(string[len(string)-i-1])\n    return li\ndef get_list_of_words(string):\n    li = []\n    li = string.split(\" \")\n    return li\ndef count_no_of_words(list):\n    '''\n    Write a function to count the number of words in a sentence.\n    '''\n    no_of_words = len(list)\n    return no_of_words\ndef count_no_of_chars(string):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    no_of_chars = len(string)\n    return no_of_chars\ndef count_no_of_strings(list):\n    '''\n    Write a function to count the number of strings in a list.\n    '''\n    no_of_strings = len(list)\n    return no_of_strings\ndef count_no_of_sentences(string):\n    '''\n    Write a function to count the number of sentences in a string.\n    '''\n    no_of_sentences = string.count(\".\")\n    return no_of_sentences\ndef count_no_of_lines(string):\n    '''\n    Write a function to count the number of lines in a string.\n    '''\n    no_of_lines = string.count(\"\\n\")\n    return no_of_lines\ndef count_no_of_exclamation_marks(string):\n    '''\n    Write a function to count the number of exclamation marks in a string.\n    '''\n    no_of_exclamation_marks = string.count(\"!\")\n    return no_of_exclamation_marks\ndef count_no_of_question_marks(string):\n    '''\n    Write a function to count the number of question marks in a string.\n    '''\n    no_of_question_marks = string.count(\"?\")\n    return no_of_question_marks\ndef count_no_of_hash_marks(string):\n    '''\n    Write a function to count the number of hash marks in a string.\n    '''\n    no_of_hash_marks = string.count(\"#\")\n    return no_of_hash_marks\ndef count_no_of_dollar_signs(string):\n    '''\n    Write a function to count the number of dollar signs in a string.\n    '''\n    no_of_dollar_signs = string.count(\"$\")\n    return no_of_dollar_signs\ndef count_no_of_percentage_signs(string):\n    '''\n    Write a function to count the number of percentage signs in a string.\n    '''\n    no_of_percentage_signs = string.count(\"%\")\n    return no_of_percentage_signs\ndef count_no_of_tilde_signs(string):\n    '''\n    Write a function to count the number of tilde signs in a string.\n    '''\n    no_of_tilde_signs = string.count(\"~\")\n    return no_of_tilde_signs\ndef count_no_of_comma_signs(string):\n    '''\n    Write a function to count the number of comma signs in a string.\n    '''\n    no_of_comma_signs = string.count(\",\")\n    return no_of_comma_signs\ndef count_no_of_colon_signs(string):\n    '''\n    Write a function to count the number of colon signs in a string.\n    '''\n    no_of_colon_signs = string.count(\":\")\n    return no_of_colon_signs\ndef count_no_of_ampersand_signs(string):\n    '''\n    Write a function to count the number of ampersand signs in a string.\n    '''\n    no_of_ampersand_signs = string.count(\"&\")\n    return no_of_ampersand_signs\ndef count_no_of_apostrophe_signs(string):\n    '''\n    Write a function to count the number of apostrophe signs in a string.\n    '''\n    no_of_apostrophe_signs = string.count(\"'\")\n    return no_of_apostrophe_signs\ndef count_no_of_at_signs(string):\n    '''\n    Write a function to count the number of at signs in a string.\n    '''\n    no_of_at_signs = string.count(\"@\")\n    return no_of_at_signs\ndef count_no_of_tilde_signs(string):\n    '''\n    Write a function to count the number of tilde signs in a string.\n    '''\n    no_of_tilde_signs = string.count(\"_\")\n    return no_of_tilde_signs\ndef count_no_of_pipe_signs(string):\n    '''\n    Write a function to count the number of pipe signs in a string.\n    '''\n    no_of_pipe_signs = string.count(\"|\")\n    return no_of_pipe_signs\ndef count_no_of_space_signs(string):\n    '''\n    Write a function to count the number of space signs in a string.\n    '''\n    no_of_space_signs = string.count(\" \")\n    return no_of_space_signs\ndef count_no_of_exclamation_marks(string):\n    '''\n    Write a function to count the number of exclamation marks in a string.\n    '''\n    no_of_exclamation_marks = string.count(\"!\")\n    return no_of_exclamation_marks\ndef count_no_of_question_marks(string):\n    '''\n    Write a function to count the number of question marks in a string.\n    '''\n    no_of_question_marks = string.count(\"?\")\n    return no_of_question_marks\ndef count_no_of_hash_marks(string):\n    '''\n    Write a function to count the number of hash marks in a string.\n    '''\n    no_of_hash_marks = string.count(\"#\")\n    return no_of_hash_marks\ndef count_no_of_dollar_signs(string):\n    '''\n    Write a function to count the number of dollar signs in a string.\n    '''\n    no_of_dollar_signs = string.count(\"$\")\n    return no_of_dollar_signs\ndef count_no_of_percentage_signs(string):\n    '''\n    Write a function to count the number of percentage signs in a string.\n    '''\n    no_of_percentage_signs = string.count(\"%\")\n    return no_of_percentage_signs\ndef count_no_of_tilde_signs(string):\n    '''\n    Write a function to count the number of tilde signs in a string.\n    '''\n    no_of_tilde_signs = string.count(\"~\")\n    return no_of_tilde_signs\ndef count_no_of_comma_signs(string):\n    '''\n    Write a function to count the number of comma signs in a string.\n    '''\n    no_of_comma_signs = string.count(\",\")\n    return no_of_comma_signs\ndef count_no_of_colon_signs(string):\n    '''\n    Write a function to count the number of colon signs in a string.\n    '''\n    no"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.split(string) \n    \n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in range(len(string)):\n        if string[i] not in list1:\n            list1.append(string[i])\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [0] * NO_OF_CHARS\n    list2 = [0] * NO_OF_CHARS\n    for i in string:\n        list1[ord(i)] += 1\n    for i in string:\n        list2[ord(i)] += 1\n    \n    list3 = []\n    for i in range(len(string)):\n        if list1[ord(string[i])] == list2[ord(string[i])]:\n            list3.append(string[i])\n    return list3\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #list1 = list(string)\n    #list2 = list(string2)\n    #list2 = list2[:len(list1)]\n    #return \"\".join(list2)\n    string2 = ''.join(list(string))\n    string1 = list(string)\n    return \"\".join(string1[:len(string2)])\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = [ch for ch in string]\n    return li\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string[0:len(string)]\n    str2 = string[len(string):len(string)]\n    str1 = list(str1)\n    str2 = list(str2)\n    if len(str1)!= len(str2):\n        return \"Error\"\n    else:\n        for i in range(len(str1)):\n            if str1[i] in str2:\n                str1.remove(str1[i])\n        return str1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if (len(string) > len(string_2)):\n        return None\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for x in string:\n        list1.append(x)\n    for x in string:\n        list2.append(x)\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for i in string:\n        list1.append(i)\n    return list1\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef list_to_dict(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict = {}\n    for i in list:\n        dict[i] = 0\n    return dict\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef compare(string1, string2):\n    '''\n    Write a function to compare the lexicographical order between two strings.\n    '''\n    string1 = list_to_str(string1)\n    string2 = list_to_str(string2)\n    if string1 > string2:\n        return 1\n    elif string1 < string2:\n        return -1\n    else:\n        return 0\ndef find_first(str1, str2):\n    '''\n    Write a function to find the first index of the first occurrence of the second string in the first string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            return i\n        else:\n            continue\n    return -1\ndef find_last(str1, str2):\n    '''\n    Write a function to find the last index of the last occurrence of the second string in the first string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            return i\n        else:\n            continue\n    return -1\ndef replace_first(str1, str2):\n    '''\n    Write a function to replace the first occurrence of the second string in the first string with the third string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            str1 = str1[:i] + str2 + str1[i+length2:]\n            return str1\n        else:\n            continue\n    return str1\ndef replace_last(str1, str2):\n    '''\n    Write a function to replace the last occurrence of the second string in the first string with the third string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            str1 = str1[:i] + str2 + str1[i+length2:]\n            return str1\n        else:\n            continue\n    return str1\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for i in string:\n        list1.append(i)\n    return list1\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef list_to_dict(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict = {}\n    for i in list:\n        dict[i] = 0\n    return dict\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef compare(string1, string2):\n    '''\n    Write a function to compare the lexicographical order between two strings.\n    '''\n    string1 = list_to_str(string1)\n    string2 = list_to_str(string2)\n    if string1 > string2:\n        return 1\n    elif string1 < string2:\n        return -1\n    else:\n        return 0\ndef find_first(str1, str2):\n    '''\n    Write a function to find the first index of the first occurrence of the second string in the first string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            return i\n        else:\n            continue\n    return -1\ndef find_last(str1, str2):\n    '''\n    Write a function to find the last index of the last occurrence of the second string in the first string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            return i\n        else:\n            continue\n    return -1\ndef replace_first(str1, str2):\n    '''\n    Write a function to replace the first occurrence of the second string in the first string with the third string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            str1 = str1[:i] + str2 + str1[i+length2:]\n            return str1\n        else:\n            continue\n    return str1\ndef replace_last(str1, str2):\n    '''\n    Write a function to replace the last occurrence of the second string in the first string with the third string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            str1 = str1[:i] + str2 + str1[i+length2:]\n            return str1\n        else:\n            continue\n    return str1\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for i in string:\n        list1.append(i)\n    return list1\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef list_to_dict(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict = {}\n    for i in list:\n        dict[i] = 0\n    return dict\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef compare(string1, string2):\n    '''\n    Write a function to compare the lexicographical order between two strings.\n    '''\n    string1 = list_to_str(string1)\n    string2 = list_to_str(string2)\n    if string1 > string2:\n        return 1\n    elif string1 < string2:\n        return -1\n    else:\n        return 0\ndef find_first(str1, str2):\n    '''\n    Write a function to find the first index of the first occurrence of the second string in the first string.\n    '''\n    length1 = le"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 1:\n        return False\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def hasDuplicate(array):\n        array.sort()\n        for i in range(len(array)-1):\n            if array[i] == array[i+1]:\n                return True\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        if arraynums.count(arraynums[i])!= 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = False\n    dupSet = set()\n    for num in arraynums:\n        if num in dupSet:\n            duplicates = True\n            break\n        else:\n            dupSet.add(num)\n    return duplicates\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for n in arraynums:\n        if arraynums.count(n) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n    length = len(arraynums)\n    for i in range(length):\n        for j in range(i+1, length):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    visited = {}\n    for i in arraynums:\n        if i in visited:\n            return True\n        visited[i] = 1\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # You may assume woodball numbers are 6-digit numbers.\n    return len(str(x)) == 6\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(x) == 1: \n        return True\n    elif x[0] == '0': \n        return False\n    else:\n        return is_woodball(x[1:])\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x[0] == 'w' and x[1] == 'o' and x[2] == 'd' and x[3] == 'l' and x[4] == 'l'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # check the length of the number\n    if len(x)!= 6:\n        return False\n    \n    # check each digit\n    for i in x:\n        if i not in \"0123456789\":\n            return False\n    \n    # check if it is a palindrome\n    return x == x[::-1]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == \"t\" or x == \"r\" or x == \"y\" or x == \"a\" or x == \"u\" or x == \"p\" or x == \"l\" or x == \"s\" or x == \"h\" or x == \"e\" or x == \"w\" or x == \"v\" or x == \"i\" or x == \"o\" or x == \"f\" or x == \"m\" or x == \"d\" or x == \"g\" or x == \"j\" or x == \"k\" or x == \"x\" or x == \"b\" or x == \"z\" or x == \"c\" or x == \"v\" or x == \"j\" or x == \"h\" or x == \"n\" or x == \"q\" or x == \"g\" or x == \"f\" or x == \"e\" or x == \"p\" or x == \"z\" or x == \"c\" or x == \"a\" or x == \"s\" or x == \"d\" or x == \"t\" or x == \"y\" or x == \"w\" or x == \"r\" or x == \"m\":\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    num = int(x)\n    if num>=100000:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    string = str(x)\n    if string[0] == '1':\n        return True\n    elif string[1] == '1':\n        return True\n    elif string[2] == '1':\n        return True\n    elif string[3] == '1':\n        return True\n    elif string[4] == '1':\n        return True\n    elif string[5] == '1':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x%2 == 0 and x%3 == 0) or (x%2 == 1 and x%3 == 1) or (x%2 == 1 and x%3 == 2):\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # your code goes here\n    return None\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # import pdb; pdb.set_trace()\n    \n    # return True if the number is of length 2\n    # or if the number is 'wood' and the first and last characters are the same.\n    # else return false\n    \n    return True if len(x)==2 or x[0]==x[-1]=='w' else False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (2*(num%10))\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        print 'The number is negative'\n    else:\n        temp = 0\n        while (num!= 0):\n            temp = temp*10 + num%10\n            num = num/10\n        if temp == 2*temp:\n            print 'The number is a palindrome'\n        else:\n            print 'The number is not a palindrome'\n    \n    \ndef check_permutation():\n    '''\n    Write a python function to check if two strings are permutations of each other\n    '''\n    word1 = raw_input('Enter the first word')\n    word2 = raw_input('Enter the second word')\n    flag = True\n    for i in word1:\n        if i not in word2:\n            flag = False\n            break\n    if word2 == '':\n        flag = False\n    else:\n        for i in word2:\n            if i not in word1:\n                flag = False\n                break\n    if flag:\n        print 'The two strings are permutations'\n    else:\n        print 'The two strings are not permutations'\n        \n        \ndef anagram_check():\n    '''\n    Write a python function to check if two strings are anagrams of each other\n    '''\n    word1 = raw_input('Enter the first word')\n    word2 = raw_input('Enter the second word')\n    flag = True\n    if len(word1)!= len(word2):\n        flag = False\n    else:\n        for i in word1:\n            if i not in word2:\n                flag = False\n                break\n    if flag:\n        print 'The two strings are anagrams'\n    else:\n        print 'The two strings are not anagrams'\n        \n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revNum = 0\n    while num > 0:\n        remainder = num % 10\n        num = num // 10\n        revNum = revNum * 10 + remainder\n    return revNum == (2*revNum)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num%10\n        rev_num = rev_num*10 + rem\n        num = num/10\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(num)==int(num[::-1])-2\ndef fl(num):\n    '''\n    Write a python function to check if a given number is one more than half of its reverse.\n    '''\n    return int(num)==int(num[::-1])+2\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    else:\n        rev = 0\n        while num > 0:\n            dig = num%10\n            rev = rev*10 + dig\n            num = num//10\n        if rev == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==0:\n        return True\n    elif num<0:\n        return False\n    else:\n        rev_num=0\n        while(num!=0):\n            rem=num%10\n            rev_num=rev_num*10+rem\n            num=num//10\n        if(rev_num==num-1):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if(num == num[::-1]):\n        return True\n    else:\n        return False\n    \n    \n    "
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp = num\n    rev = 0\n    while temp>0:\n        rev = rev*10 + temp%10\n        temp = temp/10\n    if num == rev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=str(num)[::-1]\n    if int(num)-int(rev) == 2*int(rev):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in xrange(1,n):\n        for j in xrange(i+1,n):\n            s = ''\n            for k in xrange(i,j):\n                s += str(arr[k])\n            num = int(s)\n            if num > max_num:\n                max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l=len(arr)\n    if l==0 : \n        return 0\n    if l==1 : \n        if arr[0]==0 : \n            return 0\n        else : \n            return arr[0]\n    if l==2 : \n        if arr[0]==0 and arr[1]==1 : \n            return 1\n        else : \n            return max(arr[0],arr[1])\n    if l==3 : \n        if arr[0]==0 and arr[1]==1 : \n            return 1\n        elif arr[0]==1 and arr[1]==2 : \n            return 2\n        elif arr[0]==2 and arr[1]==3 : \n            return 3\n        else : \n            return max(arr[0],arr[1])\n    if l==4 : \n        if arr[0]==0 and arr[1]==1 : \n            return 1\n        elif arr[0]==1 and arr[1]==2 : \n            return 2\n        elif arr[0]==2 and arr[1]==3 : \n            return 3\n        elif arr[0]==3 and arr[1]==4 : \n            return 4\n        else : \n            return max(arr[0],arr[1])\n    return -1\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest_num = -1\n    for i in range(len(arr)) : \n        if arr[i] > largest_num : \n            largest_num = arr[i]\n    return largest_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maximum = max(arr)\n    if len(arr) == 1 : \n        return arr[0]\n    elif len(arr) == 2 : \n        return arr[0]*10 + arr[1]\n    elif len(arr) == 3 : \n        return arr[0]*100 + arr[1]*10 + arr[2]\n    elif len(arr) == 4 : \n        return arr[0]*1000 + arr[1]*100 + arr[2]*10 + arr[3]\n    else : \n        return arr[0]*1000000 + arr[1]*10000 + arr[2]*1000 + arr[3]*100 + arr[4]*10 + arr[5]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = 0\n    for i in range(len(arr)) : \n        temp = arr[i]*arr[i]\n        if temp > num :\n            num = temp \n    print num \n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        if num > max_num :\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    biggest_num = max(arr)\n    return biggest_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #Method 1\n    '''\n    largest = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n    return largest\n    '''\n    #Method 2\n    largest = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n    return largest\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for x in arr : \n        max_num = max_num * 10 + x\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x < 0 and y > 0:\n        return True\n    if x > 0 and y < 0:\n        return True\n    if x == 0 and y!= 0:\n        return True\n    if x == 0 and y == 0:\n        return True\n    if x > 0 and y < 0:\n        return False\n    if x < 0 and y > 0:\n        return False\n    if x == 0 and y == 0:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=int(x)\n    y=int(y)\n    return (x<0 and y>0) or (x>0 and y<0)\n    \ndef reverse_string(x): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    x=x.lower()\n    return x==x[::-1]\n    \ndef remove_whitespace(x): \n    '''\n    Write a python function to check whether the given string is a whitespace or not.\n    '''\n    return x.isspace()\n    \ndef is_lowercase(x): \n    '''\n    Write a python function to check whether the given string is lowercase or not.\n    '''\n    return x.islower()\n    \ndef is_uppercase(x): \n    '''\n    Write a python function to check whether the given string is uppercase or not.\n    '''\n    return x.isupper()\n    \ndef is_alpha(x): \n    '''\n    Write a python function to check whether the given string is alphanumeric or not.\n    '''\n    return x.isalnum()\n    \ndef is_digit(x): \n    '''\n    Write a python function to check whether the given string is a digit or not.\n    '''\n    return x.isdigit()\n    \ndef is_hex(x): \n    '''\n    Write a python function to check whether the given string is hexadecimal or not.\n    '''\n    return x.isdigit() and len(x)==2\n    \ndef is_oct(x): \n    '''\n    Write a python function to check whether the given string is octal or not.\n    '''\n    return x.isdigit() and len(x)==3\n    \ndef is_binary(x): \n    '''\n    Write a python function to check whether the given string is binary or not.\n    '''\n    return x.isdigit() and len(x)==2\n    \ndef remove_duplicates(x): \n    '''\n    Write a python function to remove duplicates from a given string.\n    '''\n    return ''.join(set(x))\n    \ndef count_vowels(x): \n    '''\n    Write a python function to count vowels in a given string.\n    '''\n    return sum(x.count(vowel) for vowel in 'aeiouAEIOU')\n    \ndef count_consonants(x): \n    '''\n    Write a python function to count consonants in a given string.\n    '''\n    return sum(x.count(consonant) for consonant in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \ndef count_double_letter(x): \n    '''\n    Write a python function to count number of times the given string contains a double letter.\n    '''\n    return sum(1 for i in range(len(x)-1) if x[i]==x[i+1])\n    \ndef is_hyphenated(x): \n    '''\n    Write a python function to check whether a given string has at least one hyphenated word.\n    '''\n    return any(x.find('-')!=-1 for x in x.split())\n    \ndef is_integer(x): \n    '''\n    Write a python function to check whether the given string is an integer or not.\n    '''\n    try:\n        int(x)\n        return True\n    except:\n        return False\n    \ndef is_float(x): \n    '''\n    Write a python function to check whether the given string is a float or not.\n    '''\n    try:\n        float(x)\n        return True\n    except:\n        return False\n    \ndef is_alphanumeric(x): \n    '''\n    Write a python function to check whether the given string is alphanumeric or not.\n    '''\n    return x.isalnum()\n    \ndef is_special(x): \n    '''\n    Write a python function to check whether the given string is a special character or not.\n    '''\n    return x in '~!@#$%^&*()_+{}:\"<>?|/.,;:'\n    \ndef is_numeric(x): \n    '''\n    Write a python function to check whether the given string is numeric or not.\n    '''\n    return x.isdigit()\n    \ndef is_white(x): \n    '''\n    Write a python function to check whether the given string is whitespace or not.\n    '''\n    return x.isspace()\n    \ndef is_title(x): \n    '''\n    Write a python function to check whether the given string is title-cased or not.\n    '''\n    return x.istitle()\n    \ndef is_lower(x): \n    '''\n    Write a python function to check whether the given string is lower-cased or not.\n    '''\n    return x.islower()\n    \ndef is_upper(x): \n    '''\n    Write a python function to check whether the given string is uppercase or not.\n    '''\n    return x.isupper()\n    \ndef remove_delimiters(x): \n    '''\n    Write a python function to remove all delimiters from a given string.\n    '''\n    return x.translate(None,'-.,')\n    \ndef reverse_word(x): \n    '''\n    Write a python function to reverse a word.\n    '''\n    return x[::-1]\n    \ndef reverse_words(x): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return''.join(x.split()[::-1])\n    \ndef is_pangram(x): \n    '''\n    Write a python function to check whether the given string is a pangram or not.\n    '''\n    return len(set(x))==26\n    \ndef reverse_numbers(x): \n    '''\n    Write a python function to reverse all the numbers in a given string.\n    '''\n    return ''.join(str(int(y[::-1])) for y in x.split())\n    \ndef find_middle_char(x): \n    '''\n    Write a python function to find the middle character of a given string.\n    '''\n    return x[(len(x)//2)-1]+x[len(x)//2]+x[len(x)//2]\n    \ndef remove_middle_char(x): \n    '''\n    Write a python function to remove the middle character from a given string.\n    '''\n    return x[:len(x)//2-1]+x[len(x)//2+1:]\n    \ndef rotate_left(x, y): \n    '''\n    Write a python function to rotate a string to the left by y characters.\n    '''\n    return x[y:]+x[:y]\n    \ndef rotate_right(x, y): \n    '''\n    Write a python function to rotate a string to the right by y characters.\n    '''\n    return x[-y:]+x[:-y]\n    \ndef find_first_occurrence(x, y): \n    '''\n    Write a python function to find the first occurrence of a string in a given string.\n    '''\n    return x.find(y)+1\n    \ndef count_occurrence(x, y): \n    '''\n    Write a python function to count the number of times a string occurs in a given string.\n    '''\n    return x.count(y)\n    \ndef is_valid(x): \n    '''\n    Write a python function to check whether a given string is valid or not.\n    '''\n    return all(len(x)>=i for i in range(0,len(x)+1))\n    \ndef is_palindrome(x): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return x==x[::-1]\n    \ndef has_number(x): \n    '''\n    Write a python function to check whether a given string contains a number or no"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y>0) or (x<0 and y<0):\n        return True\n    else:\n        return False\n    \ndef is_power_of_2(x):\n    '''\n    Write a python function to check whether the given number is power of 2 or not.\n    '''\n    if x>0:\n        while x%2==0:\n            x=x/2\n        if x==1:\n            return True\n        else:\n            return False\n    else:\n        while x%2==0:\n            x=x/2\n        if x==1:\n            return True\n        else:\n            return False\n    \ndef prime_number_factorization(n):\n    '''\n    Write a python function to calculate the prime factorization of the given number.\n    '''\n    factorization_list=[]\n    while n%2==0:\n        factorization_list.append(2)\n        n=n/2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n%i==0:\n            factorization_list.append(i)\n            n=n/i\n    if n>2:\n        factorization_list.append(n)\n    return factorization_list\n    \ndef is_perfect_square(n):\n    '''\n    Write a python function to check whether the given number is perfect square or not.\n    '''\n    if is_power_of_2(n):\n        return True\n    else:\n        return False\n    \ndef is_perfect_square_optimized(n):\n    '''\n    Write a python function to check whether the given number is perfect square or not.\n    '''\n    if (n%4==0 and n>=0) or (n%4==0 and n<0):\n        return True\n    return False\n    \ndef get_distance_from_origin(x,y):\n    '''\n    Write a python function to calculate the distance from the origin of the given coordinate.\n    '''\n    return math.sqrt(x*x+y*y)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0: \n        return True\n    elif x > 0 and y < 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return \"both positive\"\n    elif x<0 and y<0:\n        return \"both negative\"\n    elif x<0 and y>0:\n        return \"x is negative and y is positive\"\n    elif x>0 and y<0:\n        return \"x is positive and y is negative\"\n    else:\n        return \"both zero\"\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0) is (y<0) \ndef count_digits(x):\n    '''\n    Write a python function to find count of digits in the given integer.\n    '''\n    return len(str(x))\ndef is_leap_year(x):\n    '''\n    Write a python function to check whether the given year is leap or not.\n    '''\n    return ((x%4==0) and (x%100!=0)) or (x%400==0)\ndef is_prime(x):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    return x>1 and all(x%i for i in range(2,int(x**0.5)+1))\ndef is_perfect(x):\n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    return sum(i for i in range(1,x//2+1) if x%i==0)==x\ndef check_alphabet(x):\n    '''\n    Write a python function to check whether the given string is a valid alphabet or not.\n    '''\n    return x.isalpha()\ndef is_vowel(x):\n    '''\n    Write a python function to check whether the given string is a vowel or not.\n    '''\n    return x in ['a','e','i','o','u','A','E','I','O','U']\ndef is_digits(x):\n    '''\n    Write a python function to check whether the given string is a valid number or not.\n    '''\n    return x.isdigit()\ndef is_dict(x):\n    '''\n    Write a python function to check whether the given dict is a valid dictionary or not.\n    '''\n    return type(x)==dict\ndef is_json(x):\n    '''\n    Write a python function to check whether the given json string is a valid json or not.\n    '''\n    import json\n    try:\n        json.loads(x)\n        return True\n    except ValueError:\n        return False\ndef is_number(x):\n    '''\n    Write a python function to check whether the given string is a valid number or not.\n    '''\n    try:\n        return type(float(x))==float\n    except ValueError:\n        return False\ndef is_string(x):\n    '''\n    Write a python function to check whether the given string is a valid string or not.\n    '''\n    return type(x)==str\ndef is_binary(x):\n    '''\n    Write a python function to check whether the given string is a valid binary or not.\n    '''\n    return x.count(\"0\")+x.count(\"1\")==len(x)\ndef is_tuple(x):\n    '''\n    Write a python function to check whether the given tuple is a valid tuple or not.\n    '''\n    return type(x)==tuple\ndef is_list(x):\n    '''\n    Write a python function to check whether the given list is a valid list or not.\n    '''\n    return type(x)==list\ndef is_set(x):\n    '''\n    Write a python function to check whether the given set is a valid set or not.\n    '''\n    return type(x)==set\ndef is_frozenset(x):\n    '''\n    Write a python function to check whether the given set is a valid set or not.\n    '''\n    return type(x)==frozenset\ndef is_list_of_set(x):\n    '''\n    Write a python function to check whether the given list of set is a valid list of set or not.\n    '''\n    return all(type(i)==set for i in x)\ndef is_list_of_dict(x):\n    '''\n    Write a python function to check whether the given list of dictionary is a valid list of dictionary or not.\n    '''\n    return all(type(i)==dict for i in x)\ndef is_list_of_list(x):\n    '''\n    Write a python function to check whether the given list of list is a valid list of list or not.\n    '''\n    return all(type(i)==list for i in x)\ndef is_list_of_tuple(x):\n    '''\n    Write a python function to check whether the given list of tuple is a valid list of tuple or not.\n    '''\n    return all(type(i)==tuple for i in x)\ndef is_list_of_string(x):\n    '''\n    Write a python function to check whether the given list of string is a valid list of string or not.\n    '''\n    return all(type(i)==str for i in x)\ndef is_list_of_list_of_string(x):\n    '''\n    Write a python function to check whether the given list of list of string is a valid list of list of string or not.\n    '''\n    return all(all(type(i)==str for i in j) for j in x)\ndef is_list_of_list_of_list(x):\n    '''\n    Write a python function to check whether the given list of list of list is a valid list of list of list or not.\n    '''\n    return all(all(type(i)==list for i in j) for j in x)\ndef is_list_of_list_of_list_of_string(x):\n    '''\n    Write a python function to check whether the given list of list of list of string is a valid list of list of list of string or not.\n    '''\n    return all(all(all(type(i)==str for i in j) for j in k) for k in x)\ndef is_list_of_list_of_list_of_list(x):\n    '''\n    Write a python function to check whether the given list of list of list of list is a valid list of list of list of list or not.\n    '''\n    return all(all(all(type(i)==list for i in j) for j in k) for k in x)\ndef is_list_of_list_of_list_of_list_of_string(x):\n    '''\n    Write a python function to check whether the given list of list of list of list of list of string is a valid list of list of list of list of string or not.\n    '''\n    return all(all(all(all(type(i)==str for i in j) for j in k) for k in l) for l in x)\ndef is_list_of_list_of_list_of_list_of_list(x):\n    '''\n    Write a python function to check whether the given list of list of list of list of list is a valid list of list of list of list of list or not.\n    '''\n    return all(all(all(all(type(i)==list for i in j) for j in k) for k in l) for l in x)\ndef is_list_of_list_of_list_of_list_of_list_of_string(x):\n    '''\n    Write a python function to check whether the given list of list of list of list of list of list of string is a valid list of list of list of list of list of string or not.\n    '''\n    return all(all(all(all(all(type(i)==str for i in j) for j in k) for k in l) for l in m) for m in x)\ndef is_list_of_list_of_list_of_list_of_list_of_list_of_string(x):\n    '''\n    Write a python function to check whether the given list of list of list of list of list of list of list of string is a valid list of list of list of list of list of string or not.\n    '''\n    return all(all(all(all(all(all(type(i)==str for i in j) for j in k) for k in l) for l in m) for m in n) for n in x)\ndef is_list_of_list_of_list_of_list_of_list_of_list_of_list(x):\n    '''\n    Write a python function to check whether the given list of list of list of list of list of list of list of list is a valid list of list of list of list of lis"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y > 0 or x > 0 and y < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y>0 or x>0 and y<0\ndef dotproduct(v1,v2):\n    '''\n    Write a python function to return the dot product of two vectors.\n    '''\n    sum=0\n    for i in range(len(v1)):\n        sum=sum+(v1[i]*v2[i])\n    return sum\ndef crossproduct(v1,v2):\n    '''\n    Write a python function to return the cross product of two vectors.\n    '''\n    product=[]\n    for i in range(len(v1)):\n        product.append(v1[i]*v2[i])\n    return product\ndef norm(v):\n    '''\n    Write a python function to return the norm of a vector.\n    '''\n    return sqrt(dotproduct(v,v))\ndef scalar_multiply(v,s):\n    '''\n    Write a python function to return a scalar multiplied vector.\n    '''\n    return [v[i]*s for i in range(len(v))]\ndef vector_add(v1,v2):\n    '''\n    Write a python function to return the vector addition of two vectors.\n    '''\n    return [v1[i]+v2[i] for i in range(len(v1))]\ndef vector_subtract(v1,v2):\n    '''\n    Write a python function to return the vector subtraction of two vectors.\n    '''\n    return [v1[i]-v2[i] for i in range(len(v1))]\ndef vector_sum(vectors):\n    '''\n    Write a python function to return the vector sum of a list of vectors.\n    '''\n    return reduce(vector_add,vectors)\ndef vector_average(vectors):\n    '''\n    Write a python function to return the vector average of a list of vectors.\n    '''\n    n=len(vectors)\n    return scalar_multiply(vector_sum(vectors),1/float(n))\ndef distance(v1,v2):\n    '''\n    Write a python function to return the distance between two vectors.\n    '''\n    return norm(vector_subtract(v1,v2))\ndef angle_between(v1,v2):\n    '''\n    Write a python function to return the angle in radians between two vectors.\n    '''\n    return acos(dotproduct(v1,v2)/(norm(v1)*norm(v2)))\ndef unit_vector(v):\n    '''\n    Write a python function to return the unit vector of a vector.\n    '''\n    return scalar_multiply(1/norm(v),v)\ndef angle_between_vectors(v1,v2):\n    '''\n    Write a python function to return the angle in radians between two vectors.\n    '''\n    return acos(dotproduct(v1,v2)/(norm(v1)*norm(v2)))\ndef project(v,w):\n    '''\n    Write a python function to return the projection of a vector onto another vector.\n    '''\n    return scalar_multiply(dotproduct(v,w)/(norm(w)*norm(v)),w)\ndef ray_intersect(ro,rd):\n    '''\n    Write a python function to return the point at which a ray hits the plane or else returns None.\n    '''\n    t=(dotproduct(ro,rd) / (dotproduct(rd,rd)))\n    if t>=0:\n        return scalar_multiply(t,rd)\n    else:\n        return None\ndef reflect(v,n):\n    '''\n    Write a python function to return the reflection vector from a vector reflecting from an n-tuple.\n    '''\n    return scalar_multiply(2*dotproduct(v,n),n)-n\ndef rotate_vector(v,angle,axis):\n    '''\n    Write a python function to return the rotated vector by an angle about a specified axis.\n    '''\n    angle=angle*pi/180\n    x=v[0]\n    y=v[1]\n    z=v[2]\n    cosa=cos(angle)\n    sina=sin(angle)\n    x1=x*cosa+y*sina\n    y1=-x*sina+y*cosa\n    z1=z\n    return [x1,y1,z1]\ndef rotate_vector_around_point(v,angle,axis,center):\n    '''\n    Write a python function to return the rotated vector by an angle about a specified axis.\n    '''\n    angle=angle*pi/180\n    x=v[0]\n    y=v[1]\n    z=v[2]\n    x1=x-center[0]\n    y1=y-center[1]\n    z1=z-center[2]\n    cosa=cos(angle)\n    sina=sin(angle)\n    x2=x1*cosa+y1*sina\n    y2=-x1*sina+y1*cosa\n    z2=z1\n    return [x2+center[0],y2+center[1],z2+center[2]]\ndef rotate_vector_around_point_new(v,angle,axis,center):\n    '''\n    Write a python function to return the rotated vector by an angle about a specified axis.\n    '''\n    angle=angle*pi/180\n    x=v[0]\n    y=v[1]\n    z=v[2]\n    x1=x-center[0]\n    y1=y-center[1]\n    z1=z-center[2]\n    cosa=cos(angle)\n    sina=sin(angle)\n    x2=x1*cosa+y1*sina\n    y2=-x1*sina+y1*cosa\n    z2=z1\n    return [x2+center[0],y2+center[1],z2+center[2]]\ndef new_angle_between_vectors(v1,v2):\n    '''\n    Write a python function to return the angle in radians between two vectors.\n    '''\n    return angle_between_vectors(v1,v2)\ndef angle_between_vectors_new(v1,v2):\n    '''\n    Write a python function to return the angle in radians between two vectors.\n    '''\n    return angle_between_vectors(v1,v2)\ndef v_add(v1,v2):\n    '''\n    Write a python function to return the vector addition of two vectors.\n    '''\n    return vector_add(v1,v2)\ndef v_subtract(v1,v2):\n    '''\n    Write a python function to return the vector subtraction of two vectors.\n    '''\n    return vector_subtract(v1,v2)\ndef v_sum(vectors):\n    '''\n    Write a python function to return the vector sum of a list of vectors.\n    '''\n    return vector_sum(vectors)\ndef v_average(vectors):\n    '''\n    Write a python function to return the vector average of a list of vectors.\n    '''\n    return vector_average(vectors)\ndef v_product(v1,v2):\n    '''\n    Write a python function to return the vector product of two vectors.\n    '''\n    return dotproduct(v1,v2)\ndef v_crossproduct(v1,v2):\n    '''\n    Write a python function to return the cross product of two vectors.\n    '''\n    return crossproduct(v1,v2)\ndef v_norm(v):\n    '''\n    Write a python function to return the norm of a vector.\n    '''\n    return norm(v)\ndef v_norm_new(v):\n    '''\n    Write a python function to return the norm of a vector.\n    '''\n    return norm(v)\ndef v_normalize(v):\n    '''\n    Write a python function to return the normalized vector.\n    '''\n    return scalar_multiply(1/v_norm(v),v)\ndef v_normalize_new(v):\n    '''\n    Write a python function to return the normalized vecto"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = []\n    for i in range(n):\n        octagonal.append(int((i*(3*i - 1))/2))\n    return octagonal[n - 1]\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = (1 + 8*n**2)**0.5\n    return int(x)**2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = [1,8,36,64,100,144,196,256,384,512,600,768,1024,1536,2048,3072,4096,65536,858993459]\n    if n <= 0:\n        return False\n    elif n in octagonal:\n        return True\n    else:\n        return is_octagonal(n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = n - 1\n    return n**2 + n + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n - 1) == (1 + 8*n)*(8*n + 1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (((8 * n) ** 0.5) + 1) ** 2 == 8 * n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * ((3 * n) - 1) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_numbers = [1,8,36,125,512,1001,3000,7625,153350]\n    return oct_numbers[n-1] if n <= 8 else None\n    \ndef is_triangular(n): \n    '''\n    Write a function to find the nth triangular number.\n    '''\n    tri_numbers = [1,3,6,10,15,21,28,36,45,55,66,76,87,98,99,99,99,99]\n    return tri_numbers[n-1] if n <= 9 else None\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = [1,8,27,64,125,216,343,512,729,1000]\n    if n < len(a):\n        return a[n-1]\n    else:\n        return 'Out of range'\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = list(s)\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[i] = 0\n        for j in range(i,len(s)):\n            d[i] += (len(s[i:j+1])==j-i+1)\n    return d[len(s)-1]\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[i] = 0\n        for j in range(i+1, len(s)+1):\n            if sum(int(x) for x in s[i:j]) == j-i:\n                d[i] += 1\n    return d[0]\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # A dictionary to store count of substrings\n    d = {}\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def get_total(sub_string):\n        return sum([int(d) for d in sub_string])\n    def count_substrings(s):\n        count = 0\n        for i in range(len(s)):\n            if get_total(s[:i]) == len(s[:i]):\n                count += 1\n        return count\n    return count_substrings(s)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substrings[s[i:j+1]] += 1\n    return sum(v for k, v in substrings.items() if len(k) == len(str(sum(int(d) for d in k))))\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    start=0\n    temp=0\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            temp=sum(map(int,list(s[i:j])))\n            if temp==len(s[i:j]):\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]] += 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        l = len(s)\n        sub_str = s[i:l]\n        dig = defaultdict(int)\n        for ch in sub_str:\n            dig[ch] += 1\n        \n        ch = s[i]\n        count += dig[ch]\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if int(s[0]) == int(s[1]):\n            return 1\n        else:\n            return 0\n    d = defaultdict(int)\n    count = 0\n    for i in range(len(s)-2):\n        d[s[i]+s[i+1]] += 1\n        if int(s[i]+s[i+1]) == len(s[i:i+3]):\n            count += d[s[i]+s[i+1]]\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if int(s[i]) == int(s[i+1]):\n            dp[i][i+1] = 1\n    for gap in range(3,n+1):\n        for i in range(n-gap+1):\n            j = i+gap-1\n            if int(s[i]) == int(s[j]) and dp[i+1][j-1] == 1:\n                dp[i][j] = 1\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if dp[i][j] == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_val = xs[0]\n    for item in xs:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = min(xs)\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None or x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for a in xs[1:]:\n        if a < smallest:\n            smallest = a\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # TODO: Your code here\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for item in xs:\n        if item < smallest:\n            smallest = item\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return \"Empty list\"\n    else:\n        return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    differences = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            differences.append(abs(test_list[i] - test_list[j]))\n    return max(differences)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    res = 0\n    for i in xrange(len(test_list)-1):\n        res = max(res, test_list[i+1] - test_list[i])\n    return res\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    length = len(test_list)\n    if length < 2:\n        return -1\n    else:\n        test_list.sort()\n        min = test_list[0] + test_list[1]\n        for i in range(2, length):\n            min = test_list[i] - test_list[i - 1]\n        return min\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    list_length = len(test_list)\n    max_difference = 0\n    \n    if list_length <= 2:\n        return max_difference\n    \n    for first_i in range(list_length - 1):\n        for second_i in range(first_i + 1, list_length):\n            max_difference = max(max_difference, abs(test_list[first_i] - test_list[second_i]))\n            \n    return max_difference\n    "
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    differences = []\n    for i in range(0, len(test_list)):\n        for j in range(i, len(test_list)):\n            differences.append(abs(test_list[i] - test_list[j]))\n    return max(differences)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    sorted_list = sorted(test_list)\n    left_max = sorted_list[0]\n    right_min = sorted_list[-1]\n    max_diff = right_min - left_max\n    for i in xrange(1, len(sorted_list)):\n        left_max = max(left_max, sorted_list[i-1])\n        right_min = min(right_min, sorted_list[i])\n        max_diff = max(max_diff, right_min - left_max)\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    difference = 0\n    for i in range(0,len(test_list),2):\n        difference = max(difference,test_list[i+1]-test_list[i])\n    return difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    tuple_list = list(set(test_list))\n    max_difference = 0\n    for i in tuple_list:\n        for j in tuple_list:\n            if i > j:\n                difference = i - j\n                if difference > max_difference:\n                    max_difference = difference\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = None\n    if len(test_list) < 2:\n        return None\n    test_list = sorted(test_list)\n    for i in range(1, len(test_list)):\n        diff = test_list[i] - test_list[i-1]\n        if max_diff is None:\n            max_diff = diff\n        else:\n            max_diff = max(max_diff, diff)\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(i,len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    lst=[]\n    for i in subjectmarks:\n        lst.append(i[1])\n    lst.sort()\n    return lst\n    \ndef count_marks(subjectmarks):\n    '''\n    Write a function to count the number of times a particular mark occurs in a list of tuples.\n    '''\n    mark_count = {}\n    for mark in subjectmarks:\n        if mark[1] in mark_count:\n            mark_count[mark[1]] = mark_count[mark[1]] + 1\n        else:\n            mark_count[mark[1]] = 1\n    return mark_count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    import operator\n    return sorted(subjectmarks,key=operator.itemgetter(1))\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marklist = list(subjectmarks)\n    return sorted(marklist, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subject_marks = sorted(subjectmarks,key=lambda x:x[1])\n    return sorted_subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = sorted(subjectmarks, key=itemgetter(1), reverse=True)\n    return marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    data = sorted(subjectmarks, key=lambda x: x[1])\n    return data\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    temp = sorted(subjectmarks, key = lambda x: x[1])\n    return temp\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    '''\n    >>> l = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    >>> s = subject_marks(l)\n    >>> print(s)\n    [(1, 5), (3, 4), (7, 8), (2, 6)]\n    >>> l = [(2, 1), (4, 3), (6, 5), (8, 7)]\n    >>> s = subject_marks(l)\n    >>> print(s)\n    [(2, 1), (4, 3), (6, 5), (8, 7)]\n    >>> l = [(3, 1), (5, 3), (7, 5), (9, 7)]\n    >>> s = subject_marks(l)\n    >>> print(s)\n    [(3, 1), (5, 3), (7, 5), (9, 7)]\n    '''\n    # Sort list according to second element\n    list_sort = sorted(subjectmarks, key = lambda x: x[1])\n    return list_sort\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    x = sorted(subjectmarks, key = lambda x: x[1], reverse = True)\n    return x\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list)==1:\n        return data_list[0]\n    else:\n        return data_list[0]+recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) is list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    if isinstance(data_list[0], int):\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        print \"Error: Type not supported.\"\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for el in data_list:\n        if type(el) is list:\n            total += recursive_list_sum(el)\n        else:\n            total += el\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == int:\n        return data_list\n    return sum(data_list) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    if isinstance(data_list, list):\n        for d in data_list:\n            result += recursive_list_sum(d)\n        return result\n    else:\n        return [data_list]\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count('pos')\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for n in list:\n        if n > 0:\n            pos = pos + 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x > 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    num = 0\n    for i in list:\n        if i > 0:\n            num += 1\n    return num\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # Your code goes here\n    return len([x for x in list if x > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for element in list:\n        if element > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0 or n==1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=0:\n        return 1\n    else:\n        return bell_number(n-1)+bell_number(n-2)+bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    res = [0] * (n + 1)\n    res[0] = 1\n    res[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, i):\n            res[i] += res[j-1] * res[i - j - 1]\n    return res[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    lookup = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    lookup[0][0] = 1\n    for i in range(n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                lookup[i][j] = lookup[i - 1][j]\n            else:\n                lookup[i][j] = lookup[i - 1][j - 1] + lookup[i - 1][j]\n    return lookup[n][n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    numbers = [1]\n    for i in xrange(1, n):\n        numbers.append(numbers[-1] + i)\n    \n    count = 0\n    for i in xrange(n, 0, -1):\n        for j in xrange(i + 1, n + 1):\n            if numbers[j] - numbers[i] <= n:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    import math\n    n = int(n)\n    b = [0]*(n+1)\n    b[0] = 1\n    b[1] = 1\n    if n > 1:\n        for i in range(2, n+1):\n            b[i] = b[i-1] + b[i-2]\n    return b[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0,len(A)):\n        if A[i]>=A[i-1]:\n            continue\n        else:\n            return False\n    return True\ndef is_Monotonic(A):\n    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1))\ndef is_Monotonic(A):\n    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    if len(A) == 1:\n        return True\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] >= A[i+1] for i in xrange(len(A)-1)) or all(A[i] <= A[i+1] for i in xrange(len(A)-1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    mono_list = []\n    for i in range(len(A)-1):\n        mono_list.append(A[i]<=A[i+1])\n    return all(mono_list)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A) == 0):\n        return True\n    elif(len(A) == 1):\n        return True\n    else:\n        i = 0\n        while i < len(A) - 1:\n            if(A[i] <= A[i+1]):\n                i += 1\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    N=len(A)\n    i=0\n    while i<N-1:\n        if A[i]>=A[i+1]:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return all(A[i] <= A[i+1] for i in xrange(len(A)-1)) or all(A[i] >= A[i+1] for i in xrange(len(A)-1))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return 1\n    mon = True\n    for i in range(1, len(A)):\n        if A[i-1] >= A[i]:\n            mon = False\n            break\n    if mon:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    a = sorted(A)\n    if a == A:\n        print \"Array is monotonic\"\n    else:\n        print \"Array is not monotonic\"\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i+1] for i in xrange(len(A)-1)) or\n        all(A[i] >= A[i+1] for i in xrange(len(A)-1)))\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return False\n    else:\n        if l[0] == s:\n            return True\n        else:\n            return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # sublist: a list with one or more elements\n    # l: the list\n    # s: the sublist\n    s = s[:]\n    s.reverse()\n    for sublist in l:\n        if sublist == s:\n            return True\n        elif sublist[::-1] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s==[]: return True\n    if len(s) > len(l): return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)]==s: return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    def compare(l, s):\n        if s == []:\n            return True\n        elif len(l) == 0:\n            return False\n        return l[0] == s[0] and compare(l[1:], s[1:])\n    return compare(l, s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)<=len(s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    elif len(l) < len(s):\n        return False\n    else:\n        sublist = l[:len(s)]\n        return sublist == s\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(0, len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(x)==len(Input[0]) for x in Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = sorted(Input)\n    i = 0\n    while i < len(Input):\n        if Input[i][0]!= Input[i][1]:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set([len(tup) for tup in Input])) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    i=0\n    while i<len(Input):\n        if len(Input[i])!=len(Input[i+1]):\n            return False\n        i+=2\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    l = len(Input)\n    for i in range(l):\n        for j in range(l-1):\n            if len(Input[i])!= len(Input[j+1]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuples = []\n    for each in Input:\n        tuples.append(each[1:])\n    \n    print tuples\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    arr = Input\n    if not arr:\n        return False\n    else:\n        l = arr[0]\n        if l == None:\n            l = 0\n        for i in range(len(arr)):\n            if not arr[i]:\n                return False\n            if l!= arr[i]:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # write your code here\n    if len(Input) == 0:\n        return True\n    return len(Input[0]) == len(Input[1])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    d = {}\n    \n    for i in Input:\n        d[len(i)] = d.get(len(i), 0) + 1\n    \n    if d.values().count(d.values().count(d.values()[0])) == len(d.values()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_len = len(Input)\n    for i in range(tuple_len):\n        if len(Input[i])!=tuple_len:\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # empty list\n    if nums == []:\n        return []\n    \n    # this list will be used to store the sorted elements\n    new_list = []\n    \n    # get the length of the list\n    length = len(nums)\n    \n    # get the minimum value of the list\n    min_val = min(nums)\n    \n    # get the maximum value of the list\n    max_val = max(nums)\n    \n    # get the difference between the max and min values\n    diff = max_val - min_val\n    \n    # get the stepsize\n    stepsize = diff/length\n    \n    # get the starting point\n    start_point = min_val\n    \n    # get the ending point\n    end_point = start_point + stepsize\n    \n    # iterate from the start point to the end point, adding each value to the new_list\n    for i in range(length):\n        new_list.append(start_point)\n        start_point += stepsize\n    \n    # iterate through the list, comparing each number to the number in the new_list\n    for i in range(length):\n        for j in range(i, length):\n            if nums[i] > new_list[j]:\n                # swap values\n                temp = nums[i]\n                nums[i] = new_list[j]\n                new_list[j] = temp\n    \n    return new_list\n    \ndef my_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # empty list\n    if nums == []:\n        return []\n    \n    # this list will be used to store the sorted elements\n    new_list = []\n    \n    # get the length of the list\n    length = len(nums)\n    \n    # get the minimum value of the list\n    min_val = min(nums)\n    \n    # get the maximum value of the list\n    max_val = max(nums)\n    \n    # get the difference between the max and min values\n    diff = max_val - min_val\n    \n    # get the stepsize\n    stepsize = diff/length\n    \n    # get the starting point\n    start_point = min_val\n    \n    # get the ending point\n    end_point = start_point + stepsize\n    \n    # iterate through the list, comparing each number to the number in the new_list\n    for i in range(length):\n        new_list.append(start_point)\n        start_point += stepsize\n    \n    # iterate through the list, comparing each number to the number in the new_list\n    for i in range(length):\n        for j in range(i, length):\n            if nums[i] > new_list[j]:\n                # swap values\n                temp = nums[i]\n                nums[i] = new_list[j]\n                new_list[j] = temp\n    \n    return new_list\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    min_val = min(nums)\n    max_val = max(nums)\n    index_range = range(min_val, max_val+1)\n    sorted_index = 0\n    while sorted_index < len(nums):\n        index = index_range.index(nums[sorted_index])\n        nums[sorted_index], nums[index] = nums[index], nums[sorted_index]\n        sorted_index += 1\n        index_range.remove(nums[sorted_index])\n        index_range.insert(sorted_index, nums[sorted_index])\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    gap = int(nums_len / 2)\n    while gap > 0:\n        for i in range(gap, nums_len):\n            j = i\n            while j >= gap and nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n        gap = int(gap / 2)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    gap = 1\n    swapped = True\n    while gap < nums_len:\n        gap = max(gap,1)\n        gap = gap * 10\n        swapped = False\n        for i in range(nums_len-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i],nums[i+gap] = nums[i+gap],nums[i]\n                swapped = True\n        if not swapped:\n            break\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(array, i, j):\n        temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n    def min_value_index(array, start, end):\n        min_value = array[start]\n        min_index = start\n        for i in range(start+1, end+1):\n            if array[i] < min_value:\n                min_value = array[i]\n                min_index = i\n        return min_index\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return nums\n    if len(nums) == 1:\n        return nums\n    else:\n        key = nums[0]\n        new_arr = []\n        for i in range(len(nums)):\n            if nums[i] < key:\n                new_arr.append(nums[i])\n        new_arr.append(key)\n        return new_arr + comb_sort(nums[1:])\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    step = len(nums) // 2\n    while step > 0:\n        for i in range(step, len(nums)):\n            j = i\n            while j >= step and nums[j] < nums[j - step]:\n                nums[j], nums[j - step] = nums[j - step], nums[j]\n                j -= step\n        step //= 2\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sq = int(math.sqrt(n))\n    if n < 0 or sq**2!= n: \n        return False\n    for i in range(sq+1, n+1):\n        if i**2-n in [1, n]:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n**0.5 == int(n**0.5):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    num=n\n    sq1=1\n    sq2=1\n    while(num>=2):\n        if (num%2)==1:\n            sq1+=1\n        num/=2\n    while(num>=1):\n        if (num%2)==1:\n            sq2+=1\n        num/=2\n    if sq1**2-sq2**2==n:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if (i**2-j**2)==n:\n                print \"Given number \"+str(n)+\" is the difference of \"+str(i**2)+\" and \"+str(j**2)\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 2:\n        print \"Yes\"\n    else:\n        if (n-2)**2==n:\n            print \"Yes\"\n        elif (n-4)**2==n:\n            print \"Yes\"\n        else:\n            print \"No\"\n            \ndef is_square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the sum of four squares or not.\n    '''\n    if n == 2:\n        print \"Yes\"\n    else:\n        if (n-2)**2==n:\n            print \"Yes\"\n        elif (n-4)**2==n:\n            print \"Yes\"\n        else:\n            print \"No\"\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    num=int(n)\n    n1=num//2\n    n2=num%2\n    \n    if n1*n1-n2*n2>=0 and n1*n1-n2*n2<=n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = int(sqrt(n))\n    b = int(sqrt(n))\n    c = a**2 - b**2\n    if (c == n): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s = 1\n    r = n\n    while (r > 0):\n        s += 1\n        r -= s**2\n    if (s**2 - n < 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<0:\n        return False\n    a=int(sqrt(n))\n    b=int(sqrt(n+1))\n    return a*a==n+1 and b*b==n\n    \ndef dif_num(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two different numbers.\n    '''\n    a=int(sqrt(n))\n    b=int(sqrt(n+1))\n    if n>=0:\n        return a*a!=n+1 and b*b!=n+2\n    else:\n        return a*a!=n and b*b!=n+1\n    \ndef dif_num_1(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two different numbers.\n    '''\n    a=int(sqrt(n))\n    b=int(sqrt(n+1))\n    if n>=0:\n        return a*a!=n and b*b!=n+1\n    else:\n        return a*a!=n and b*b!=n+2\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for x in range(n):\n        for y in range(x):\n            if x*x+y*y==n:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if len(patterns[i]) == len(colors):\n            for j in range(len(patterns[i])):\n                if patterns[i][j]!= colors[j]:\n                    return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # your code here\n    if not patterns:\n        return True\n    pattern = patterns.pop(0)\n    if len(pattern) == 0:\n        return is_samepatterns(colors, patterns)\n    else:\n        return any(is_samepatterns(colors, patterns + [pattern[1:] + colors[0]]) for colors in combinations(colors, len(pattern) - 1))\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if colors[i]==colors[i+1] and colors[i] not in patterns:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if patterns[i] == 0:\n            patterns[i] = -1\n            if colors[i] == 1:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in xrange(len(patterns)):\n        for j in xrange(len(patterns[i])):\n            if patterns[i][j] == 'a' and not colors[j]:\n                return False\n            elif patterns[i][j] == 'b' and colors[j]:\n                return False\n            elif patterns[i][j] == 'c' and colors[j] and not colors[j+1]:\n                return False\n            elif patterns[i][j] == 'd' and not colors[j]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(colors)-1):\n        if not patterns[i] in colors[i:]:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if patterns[i] == 'color':\n            if i + 1 < len(colors) and colors[i+1]!= colors[i]:\n                return False\n        else:\n            if i + 2 < len(colors) and colors[i+2]!= colors[i]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # First, we check whether we have a value that is larger than 0\n    # Check if we have the length of the patterns array\n    if len(patterns) > len(colors):\n        return False\n    else:\n        for i in range(len(patterns)):\n            # If it is greater than 0, check if the current color in the colors array is the same as the pattern at that index\n            if patterns[i] > 0 and patterns[i]!= colors[i]:\n                return False\n            # If it is not greater than 0, return False\n            elif patterns[i] <= 0:\n                return False\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_index = 0\n    for pattern in patterns:\n        # Check that current pattern matches with the last pattern.\n        if colors[pattern_index] == pattern:\n            pattern_index += 1\n        # If current pattern doesn't match with the last pattern, then return False.\n        else:\n            return False\n    # If patterns_index reached the end of patterns array, then return True\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    result_list = []\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        for i in range(len(tup)):\n            if (tup[i] % K!= 0):\n                break\n        else:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    div_list = []\n    for tuple in test_list:\n        temp = [x for x in tuple]\n        for i in xrange(len(temp)):\n            if temp[i]%K!= 0:\n                temp[i] = None\n                break\n        if temp[i]!=None:\n            div_list.append(tuple)\n    return div_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in test_list:\n        if sum(i)%K==0:\n            divisible_tuples.append(i)\n    return divisible_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if t[0] % K == 0 and t[1] % K == 0:\n            result.append(t)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    import collections\n    result_list = []\n    for each_tuple in test_list:\n        if all(i % K == 0 for i in each_tuple):\n            result_list.append(each_tuple)\n    return result_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [x for x in test_list if not set(x) - set(k for k in x if k % K!= 0)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all([int(t[i]/K) for i in range(len(t))])]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for test_tuple in test_list:\n        if all(test_tuple[i]%K == 0 for i in range(len(test_tuple))):\n            divisible_tuples.append(test_tuple)\n    return divisible_tuples\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        print \"11 is a divisor of %s\" % n\n    else: \n        print \"11 is not a divisor of %s\" % n\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11) == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        print(\"Its a word with even lenght\")\n    else:\n        print(\"Its a word with odd lenght\")\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l%2 == 0:\n        return False\n    else:\n        return True\n    \ndef rev(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef isPalindrome(s):\n    '''\n    Write a python function to check whether the string is a palindrome.\n    '''\n    if len(s)==1:\n        return True\n    else:\n        if s[0]==s[-1]:\n            return isPalindrome(s[1:-1])\n        else:\n            return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\nprint(word_len('apple'))\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum([i*(4*i-1) for i in range(1,n+1)])\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = 0\n    for i in range(n):\n        tetrahedral += ((1+i)**4)\n    return tetrahedral\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # In the tetrahedral number, the value of a number is its sum of the proper divisors of it.\n    # To get the proper divisors, we need to find all divisors of the number n.\n    # For the proper divisors, we can find all the divisors of the square of n. \n    # We can then do a similar process on all the divisors of the square of n,\n    # and add them all together.\n    # It's a simple calculation, but it's easy to find all the divisors of n,\n    # and then find all the divisors of the square of n, and add them all together.\n    # We can do it this way for all the numbers, and we'll get a list of the\n    # proper divisors of each number.\n    # At each number, we can add the number itself to the list of proper divisors,\n    # and then we can add all the proper divisors of n squared to the list of proper divisors,\n    # and add them all together.\n    # This can be done recursively, and the base case is n=1.\n    # If we don't know how many times we have to add the proper divisors,\n    # we'll know we'll need to use the \"recursive\" approach.\n    # If we know how many times we have to add the proper divisors,\n    # we'll know we'll need the \"non-recursive\" approach.\n    # Either way, the recursive approach is faster than the non-recursive approach.\n    # In any case, we'll probably use the recursive approach.\n    \n    # Base cases:\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    else:\n        # Recursive case:\n        divisors = [1,n]\n        for i in xrange(2,int(n**.5)+1):\n            if n%i == 0:\n                divisors.append(i)\n                divisors.append(n/i)\n        return sum(divisors)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    \n    # If n is 1, return 1\n    if n == 1: \n        return 1\n    \n    \n    # If n is 2, return 3\n    if n == 2: \n        return 3\n    \n    \n    # If n is 3, return 4\n    if n == 3: \n        return 4\n    \n    \n    # If n is 4, return 10\n    if n == 4: \n        return 10\n    \n    \n    # If n is 5, return 8\n    if n == 5: \n        return 8\n    \n    \n    # If n is 6, return 12\n    if n == 6: \n        return 12\n    \n    \n    # If n is 7, return 24\n    if n == 7: \n        return 24\n    \n    \n    # If n is 8, return 40\n    if n == 8: \n        return 40\n    \n    \n    # If n is 9, return 72\n    if n == 9: \n        return 72\n    \n    \n    # If n is 10, return 100\n    if n == 10: \n        return 100\n    \n    \n    # If n is 11, return 220\n    if n == 11: \n        return 220\n    \n    \n    # If n is 12, return 240\n    if n == 12: \n        return 240\n    \n    \n    # If n is 13, return 272\n    if n == 13: \n        return 272\n    \n    \n    # If n is 14, return 280\n    if n == 14: \n        return 280\n    \n    \n    # If n is 15, return 300\n    if n == 15: \n        return 300\n    \n    \n    # If n is 16, return 320\n    if n == 16: \n        return 320\n    \n    \n    # If n is 17, return 340\n    if n == 17: \n        return 340\n    \n    \n    # If n is 18, return 360\n    if n == 18: \n        return 360\n    \n    \n    # If n is 19, return 380\n    if n == 19: \n        return 380\n    \n    \n    # If n is 20, return 400\n    if n == 20: \n        return 400\n    \n    \n    # If n is 21, return 420\n    if n == 21: \n        return 420\n    \n    \n    # If n is 22, return 440\n    if n == 22: \n        return 440\n    \n    \n    # If n is 23, return 460\n    if n == 23: \n        return 460\n    \n    \n    # If n is 24, return 480\n    if n == 24: \n        return 480\n    \n    \n    # If n is 25, return 500\n    if n == 25: \n        return 500\n    \n    \n    # If n is 26, return 520\n    if n == 26: \n        return 520\n    \n    \n    # If n is 27, return 540\n    if n == 27: \n        return 540\n    \n    \n    # If n is 28, return 560\n    if n == 28: \n        return 560\n    \n    \n    # If n is 29, return 580\n    if n == 29: \n        return 580\n    \n    \n    # If n is 30, return 600\n    if n == 30: \n        return 600\n    \n    \n    # If n is 31, return 620\n    if n == 31: \n        return 620\n    \n    \n    # If n is 32, return 640\n    if n == 32: \n        return 640\n    \n    \n    # If n is 33, return 660\n    if n == 33: \n        return 660\n    \n    \n    # If n is 34, return 680\n    if n == 34: \n        return 680\n    \n    \n    # If n is 35, return 700\n    if n == 35: \n        return 700\n    \n    \n    # If n is 36, return 720\n    if n == 36: \n        return 720\n    \n    \n    # If n is 37, return 740\n    if n == 37: \n        return 740\n    \n    \n    # If n is 38, return 760\n    if n == 38: \n        return 760\n    \n    \n    # If n is 39, return 780\n    if n == 39: \n        return 780\n    \n    \n    # If n is 40, return 800\n    if n == 40: \n        return 800\n    \n    \n    # If n is 41, return 820\n    if n == 41: \n        return 820\n    \n    \n    # If n is 42, return 840\n    if n == 42: \n        return 840\n    \n    \n    # If n is 43, return 860\n    if n == 43: \n        return 860\n    \n    \n    # If n is 44, return 880\n    if n == 44: \n        return 880\n    \n    \n    # If n is 45, return 900\n    if n == 45: \n        return 900\n    \n    \n    # If n is 46, return 920\n    if n == 46: \n        return 920\n    \n    \n    # If n is 47, return 940\n    if n == 47: \n        return 940\n    \n    \n    # If n is 48, return 960\n    if n == 48: \n        return 960\n    \n    \n    # If n is 49, return 980\n    if n == 49: \n        return 980\n    \n    \n    # If n is 50, return 1000\n    if n == 50: \n        return 1000\n    \n    \n    # If n is 51, return 1020\n    if n == 51: \n        return 1020\n    \n    \n    # If n is 52, return 1040\n    if n == 52: \n        return 1040\n    \n    \n    # If n is 53, return 1060\n    if n == 53: \n        return 1060\n    \n    \n    # If n is 54, return 1080\n    if n == 54: \n        return 1080\n    \n    \n    # If n is 55, return 1100\n    if n == 55: \n        return 1100\n    \n    \n    # If n is 56, return 1120\n    if n == 56: \n        return 1120\n    \n    \n    # If n is 57, return 1140\n    if n == 57: \n        return 1140\n    \n    \n    # If n is 58, return 1160\n    if n == 58: \n        return 1160\n    \n    \n    # If n is 59, return 1180\n    if n == 59: \n        return 1180\n    \n    \n    # If n is 60, return 1200\n    if n == 60: \n        return 1200\n    \n    \n    # If n is 61, return 1220\n    if n == 61: \n        return 1220\n    \n    \n    # If n is 62, return 1240\n    if n == 62: \n        return 1240\n    \n    \n    # If n is 63, return 1260\n    if n == 63: \n        return 1260\n    \n    \n    # If n is 64, return 1280\n    if n == 64: \n        return 1280\n    \n    \n    # If n is 65, return 1300\n    if n == 65: \n        return 1300\n    \n    \n    # If n is 66, return 1320\n    if n == 66: \n        return 1320\n    \n    \n    # If n is 67, return 1340\n    if n == 67: \n        return 1340\n    \n    \n    # If n is 68, return 1360\n    if n == 68: \n        return 1360\n    \n    \n    # If n is 69, return 1380\n    if n == 69: \n        return 1380\n    \n    \n    # If n is 70, return 1400\n    if n == 70: \n        return 1400\n    \n    \n    # If n is 71, return 1420\n    if n == 71: \n        return 1420\n    \n    \n    # If n is 72, return 1440\n    if n == 72: \n        return 1440\n    \n    \n    # If n is 73, return 1460\n    if n == 73: \n        return 1460\n    \n    \n    # If n is 74, return 1480\n    if n == 74: \n        return 1480\n    \n    \n    # If n is 75, return 1500\n    if n == 75: \n        return 1500\n    \n    \n    # If n is 76, return 1520\n    if n == 76:"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    # Create a list to store the values.\n    value_list = [1]\n    \n    # If n is 0, return the first value (1).\n    if n == 0:\n        return 1\n    \n    # Calculate the sum of the values in the list.\n    s = sum(value_list)\n    \n    # If n is less than or equal to the length of the list, return the sum.\n    if n <= len(value_list):\n        return s\n    \n    # Loop through the list to get values until the desired number is found.\n    for i in range(len(value_list), n):\n        value_list.append(i+1)\n        s += i+1\n        \n    # Return the sum.\n    return s\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: return 1\n    if n < 0: return None\n    return tetrahedral_number(n-1) + n**4\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((1 + n)/(n + 1)*n)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    else:\n        return n**3 + n**2 + n\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) // 4 \n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*(math.pi)*(r**3)\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*math.pi*(r**2)\n    return a\ndef sum_of_divisors(n):\n    '''\n    Write a function to find the sum of divisors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            s += i\n    return s\ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    f = 1\n    for i in range(1,n+1):\n        f *= i\n    return f\ndef is_perfect(n):\n    '''\n    Write a function to check if a number is a perfect number or not.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            s += i\n    if s == n:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    return n == b\ndef is_armstrong(n):\n    '''\n    Write a function to check if a number is an armstrong number or not.\n    '''\n    a = n\n    s = 0\n    while a!= 0:\n        s += math.pow(a%10,3)\n        a //= 10\n    if n == s:\n        return True\n    else:\n        return False\ndef is_abundant(n):\n    '''\n    Write a function to check if a number is an abundant number or not.\n    '''\n    a = 0\n    for i in range(1,n):\n        if n%i == 0:\n            a += i\n    if a > n:\n        return True\n    else:\n        return False\ndef is_deficient(n):\n    '''\n    Write a function to check if a number is deficient or not.\n    '''\n    a = 0\n    for i in range(1,n):\n        if n%i == 0:\n            a += i\n    if a < n:\n        return True\n    else:\n        return False\ndef is_superabundant(n):\n    '''\n    Write a function to check if a number is superabundant or not.\n    '''\n    a = 0\n    for i in range(1,n):\n        if n%i == 0:\n            a += i\n    if a > n:\n        return True\n    else:\n        return False\ndef is_perfect_square(n):\n    '''\n    Write a function to check if a number is a perfect square or not.\n    '''\n    a = n\n    i = 0\n    while a>0:\n        a //= 10\n        i += 1\n    if a == 1:\n        return True\n    elif i%2 == 0:\n        return False\n    else:\n        a = n\n        i = 0\n        while a>0:\n            i += 1\n            a //= 10\n        x = (i+1)//2\n        if x**2 == n:\n            return True\n        else:\n            return False\ndef is_superperfect_square(n):\n    '''\n    Write a function to check if a number is a superperfect square or not.\n    '''\n    a = n\n    i = 0\n    while a>0:\n        a //= 10\n        i += 1\n    if i%2 == 0:\n        x = (i+1)//2\n        if x**2 == n:\n            return True\n        else:\n            return False\n    else:\n        x = (i+1)//2\n        if x**2 == n:\n            return True\n        else:\n            return False\ndef is_antipalindrome(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if n == b:\n        return True\n    else:\n        return False\ndef is_antipalindrome_reverse(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        return False\ndef is_antipalindrome_reverse_mult(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        if a*b == n:\n            return True\n        else:\n            return False\ndef is_antipalindrome_reverse_squared(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        if a*b == n:\n            return True\n        else:\n            return False\ndef is_antipalindrome_reverse_cubed(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        if a*b == n:\n            return True\n        else:\n            return False\ndef is_antipalindrome_reverse_cubed_squared(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        if a*b == n:\n            return True\n        else:\n            if a*b == n:\n                return True\n            else:\n                return False\ndef is_antipalindrome_reverse_cubed_cubed(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        if a*b == n:\n            return True\n        else:\n            if a*b == n:\n                return True\n            else:\n                return False\ndef is_antipalindrome_reverse_cubed_cubed_squared(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    a = n\n    b = 0\n    while a!= 0:\n        b = b*10 + a%10\n        a = a//10\n    if b == n:\n        return True\n    else:\n        if a*b == n:\n            return True\n        else:\n            if a*b == n:\n                return True\n            else:\n                if a*b == n:\n                    return True\n                else:\n                    return False\ndef is_antipalin"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r < 0:\n        return 'Invalid input'\n    else:\n        return (4/3)*math.pi*math.pow(r,3)\n    \ndef sphere_surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r < 0:\n        return 'Invalid input'\n    else:\n        return 4*math.pi*math.pow(r,2)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_of_sphere = 4/3 * math.pi * (r ** 3)\n    return volume_of_sphere\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0 / 3.0 * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    V_sphere = 4/3*math.pi*r**3\n    return V_sphere\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    V_cone = 1/3*math.pi*r**2*h\n    return V_cone\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    V_cylinder = math.pi*r**2*h\n    return V_cylinder\ndef volume_prism(a,b,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    V_prism = (a*b)/3*h\n    return V_prism\ndef volume_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    V_pyramid = (a*b)/3*h\n    return V_pyramid\ndef volume_cone_shell(r,h):\n    '''\n    Write a function to find the volume of a cone shell.\n    '''\n    r = float(r)\n    h = float(h)\n    V_shell = math.pi*r**2*(3*h-r**2)\n    return V_shell\ndef volume_sphere_shell(r,h):\n    '''\n    Write a function to find the volume of a sphere shell.\n    '''\n    r = float(r)\n    h = float(h)\n    V_shell = 4/3*math.pi*r**3*(h-r**2)\n    return V_shell\ndef volume_cylinder_shell(r,h):\n    '''\n    Write a function to find the volume of a cylinder shell.\n    '''\n    r = float(r)\n    h = float(h)\n    V_shell = math.pi*r**2*h*(h-r**2)\n    return V_shell\ndef volume_prism_shell(a,b,h):\n    '''\n    Write a function to find the volume of a prism shell.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    V_shell = ((a-b)*h)/2*math.sqrt((a+b)**2+(a-b)**2)\n    return V_shell\ndef volume_pyramid_shell(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid shell.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    V_shell = (a-b)*h/2*math.sqrt((a+b)**2+(a-b)**2)\n    return V_shell\ndef volume_sphere_stellated(r,n):\n    '''\n    Write a function to find the volume of a sphere stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_stellated = 4/3*math.pi*r**3*n\n    return V_stellated\ndef volume_sphere_semi_stellated(r,n):\n    '''\n    Write a function to find the volume of a sphere stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_semi_stellated = 4/3*math.pi*r**3*(n-1)\n    return V_semi_stellated\ndef volume_cone_stellated(r,n):\n    '''\n    Write a function to find the volume of a cone stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_stellated = 1/3*math.pi*r**2*n\n    return V_stellated\ndef volume_cylinder_stellated(r,n):\n    '''\n    Write a function to find the volume of a cylinder stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_stellated = math.pi*r**2*n\n    return V_stellated\ndef volume_prism_stellated(a,n):\n    '''\n    Write a function to find the volume of a pyramid stellated with n subdivisions.\n    '''\n    a = float(a)\n    n = float(n)\n    V_stellated = (a*a*a/3)*n\n    return V_stellated\ndef volume_pyramid_stellated(a,n):\n    '''\n    Write a function to find the volume of a pyramid stellated with n subdivisions.\n    '''\n    a = float(a)\n    n = float(n)\n    V_stellated = (a*a*a/3)*n\n    return V_stellated\ndef volume_cone_semi_stellated(r,n):\n    '''\n    Write a function to find the volume of a cone semi-stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_semi_stellated = 1/3*math.pi*r**2*n\n    return V_semi_stellated\ndef volume_cylinder_semi_stellated(r,n):\n    '''\n    Write a function to find the volume of a cylinder semi-stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_semi_stellated = math.pi*r**2*n\n    return V_semi_stellated\ndef volume_prism_semi_stellated(a,n):\n    '''\n    Write a function to find the volume of a prism semi-stellated with n subdivisions.\n    '''\n    a = float(a)\n    n = float(n)\n    V_semi_stellated = (a*a*a/3)*n\n    return V_semi_stellated\ndef volume_pyramid_semi_stellated(a,n):\n    '''\n    Write a function to find the volume of a pyramid semi-stellated with n subdivisions.\n    '''\n    a = float(a)\n    n = float(n)\n    V_semi_stellated = (a*a*a/3)*n\n    return V_semi_stellated\ndef volume_cylinder_semi_stellated(r,n):\n    '''\n    Write a function to find the volume of a cylinder semi-stellated with n subdivisions.\n    '''\n    r = float(r)\n    n = float(n)\n    V_semi_stellated = math.pi*r**2*n\n    return V_semi_stellated\ndef volume_prism_semi_stellated(a,n):\n    '''\n    Write a function to find the volume of a prism semi-stellated with n subdivisions.\n    '''\n    a = float(a)\n    n = float(n)\n    V_semi_stellated = (a*a*a/3)*n\n    return V_semi_stellated\ndef volume_pyramid_semi_stellated(a,n):\n    '''\n    Write a function to find the volume of a pyramid semi-stellated with n subdivisions.\n    '''\n    a = float(a)\n    n = float(n)\n    V_semi_stellated = (a*a*a/3)*n\n    return V_semi_stellated\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r "
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4/3*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0) * math.pi * (r**3)\n    return v\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return (reduce(lambda x, y: x + y, map(lambda z: ord(z) % 26, strr)))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = 0\n    for i in strr:\n        s = s + ord(i)\n    return chr(s % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    print(chr( (sum( map(ord, strr)) % 26) + 97 ) )\n    return \n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for c in strr:\n        char = (char + ord(c)) % 26\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    arr = []\n    for i in range(len(strr)):\n        arr.append(ord(strr[i])%26)\n    return arr\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    result=''\n    for i in strr:\n        result=result+chr(ord(i)+1)\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum(ord(c) for c in strr) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst=[]\n    for i in strr:\n        lst.append(ord(i))\n    return reduce(lambda x,y: x+y,lst)%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum=sum+ord(i)\n    return chr(sum%26+ord('A'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result=0\n    for i in range(len(strr)):\n        result=result+(ord(strr[i])%26)\n    return result%26\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0,1,1,1]\n    if n > 4:\n        for i in range(4, n+1):\n            seq.append(seq[i-1] + seq[i-2])\n    return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    numbers = [1, 2]\n    for i in range(3, n+1):\n        numbers.append(sum(numbers[-2:]))\n    return numbers[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0]\n    for i in xrange(1, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    else: \n        return sequence(n-1) + sequence(n-2)\n        \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n        \n    \n    \ndef anagram(word, alphabet): \n    '''\n    Write a function to check if a word is a anagram of another word.\n    '''\n    if len(word)!= len(alphabet):\n        return False\n    alphabet = list(alphabet)\n    word = list(word)\n    for i in word:\n        if i not in alphabet:\n            return False\n        else:\n            alphabet.remove(i)\n    return True\n    \n    \ndef anagram2(word1, word2): \n    '''\n    Write a function that returns True if two words are anagrams, and False otherwise. \n    '''\n    if len(word1)!= len(word2):\n        return False\n    list1 = list(word1)\n    list2 = list(word2)\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n        else:\n            return False\n    return True\n    \n    \ndef anagram3(word1, word2): \n    '''\n    Write a function that returns True if two words are anagrams, and False otherwise. \n    '''\n    if len(word1)!= len(word2):\n        return False\n    list1 = list(word1)\n    list2 = list(word2)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\n    \n    \ndef anagram4(word1, word2): \n    '''\n    Write a function that returns True if two words are anagrams, and False otherwise. \n    '''\n    if len(word1)!= len(word2):\n        return False\n    list1 = list(word1)\n    list2 = list(word2)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\n    \n    \ndef anagram5(word1, word2): \n    '''\n    Write a function that returns True if two words are anagrams, and False otherwise. \n    '''\n    if len(word1)!= len(word2):\n        return False\n    list1 = list(word1)\n    list2 = list(word2)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\n    \n    \ndef anagram6(word1, word2): \n    '''\n    Write a function that returns True if two words are anagrams, and False otherwise. \n    '''\n    if len(word1)!= len(word2):\n        return False\n    list1 = list(word1)\n    list2 = list(word2)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome(s[1:-1])\n        else:\n            return False\n        \n    \n    \ndef is_palindrome2(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome2(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome3(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome3(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome4(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome4(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome5(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome5(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome6(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome6(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome7(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome7(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome8(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome8(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome9(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome9(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome10(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome10(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome11(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome11(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome12(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome12(s[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome13(s): \n    '''\n    Write a function that returns True if s is a palindrome, and False otherwise. \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    nth = 0\n    result = [0,1,1]\n    while len(result) <= n:\n        result.append(sum(result[-3:]))\n    return result[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    for i in range(n):\n        i = i + 1\n        print(i)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4 * math.pi * r**2\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*math.pow(r,2)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(r,3)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r**2\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_sa = 4 * math.pi * math.pow(r, 2)\n    return sphere_sa\n    \ndef surfacearea_sphere2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_sa = 4 * math.pi * math.pow(r, 2)\n    return sphere_sa\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return sa\ndef surfacearea_sphere2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere3(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere4(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere5(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere6(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere7(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere8(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere9(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere10(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere11(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere12(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere13(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere14(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere15(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere16(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere17(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere18(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere19(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere20(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere21(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere22(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere23(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere24(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere25(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere26(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere27(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere28(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere29(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere30(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere31(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere32(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere33(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere34(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere35(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return 4*math.pi*r**2\ndef surfacearea_sphere36(r):\n    '''\n    Write a function to find the surface are"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14\n    return 4*pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 + n) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n**2 - 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((3 * n)**(2/3) + 0.5) * (3 * n - 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2**(n-1) * (3 * n**2 - n) // 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num_hexagons = 1\n    curr_num = 1\n    for i in range(n):\n        curr_num = 2*num_hexagons + 1\n        num_hexagons += 2\n        \n    return curr_num\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    else:\n        return 9\n    \n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n**2 - n + 2) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2 * n * (2 * n + 1) / (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2*n*(3*n-1)/2\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if isinstance(dict1,dict) and isinstance(dict2,dict) and isinstance(dict3,dict):\n        dict_m = dict()\n        for k, v in dict1.items():\n            dict_m[k] = v\n        for k, v in dict2.items():\n            dict_m[k] = v\n        for k, v in dict3.items():\n            dict_m[k] = v\n        return dict_m\n    return {}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict2:\n        if key in dict1:\n            dict1[key].extend(dict2[key])\n        else:\n            dict1[key]=dict2[key]\n    for key in dict3:\n        if key in dict1:\n            dict1[key].extend(dict3[key])\n        else:\n            dict1[key]=dict3[key]\n    return dict1\ndef merge_dictionaries_four(dict1,dict2, dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    for key in dict2:\n        if key in dict1:\n            dict1[key].extend(dict2[key])\n        else:\n            dict1[key]=dict2[key]\n    for key in dict3:\n        if key in dict1:\n            dict1[key].extend(dict3[key])\n        else:\n            dict1[key]=dict3[key]\n    for key in dict4:\n        if key in dict1:\n            dict1[key].extend(dict4[key])\n        else:\n            dict1[key]=dict4[key]\n    return dict1\ndef merge_dictionaries_five(dict1,dict2, dict3,dict4,dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    for key in dict2:\n        if key in dict1:\n            dict1[key].extend(dict2[key])\n        else:\n            dict1[key]=dict2[key]\n    for key in dict3:\n        if key in dict1:\n            dict1[key].extend(dict3[key])\n        else:\n            dict1[key]=dict3[key]\n    for key in dict4:\n        if key in dict1:\n            dict1[key].extend(dict4[key])\n        else:\n            dict1[key]=dict4[key]\n    for key in dict5:\n        if key in dict1:\n            dict1[key].extend(dict5[key])\n        else:\n            dict1[key]=dict5[key]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        new_dict[key] = [dict1[key], dict2[key], dict3[key]]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dic = {}\n    if len(dict1) > len(dict2):\n        dic.update(dict1)\n        dic.update(dict2)\n    else:\n        dic.update(dict2)\n        dic.update(dict1)\n    dic.update(dict3)\n    return dic\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for k in dict1:\n        if k in dict2:\n            res[k] = [dict1[k],dict2[k],dict3[k]]\n        else:\n            res[k] = [dict1[k],dict3[k]]\n    for k in dict2:\n        if k not in res:\n            res[k] = [dict2[k]]\n    for k in dict3:\n        if k not in res:\n            res[k] = [dict3[k]]\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    ret= {}\n    for key in dict1.keys():\n        ret[key] = dict1[key]\n    for key in dict2.keys():\n        ret[key] = dict2[key]\n    for key in dict3.keys():\n        ret[key] = dict3[key]\n    return ret\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    combined_dict = {}\n    if isinstance(dict1, dict) and isinstance(dict2, dict) and isinstance(dict3, dict):\n        for k1,v1 in dict1.iteritems():\n            if isinstance(v1, dict):\n                for k2,v2 in v1.iteritems():\n                    combined_dict[k1+k2] = v2\n            else:\n                combined_dict[k1] = v1\n        for k2,v2 in dict2.iteritems():\n            if isinstance(v2, dict):\n                for k3,v3 in v2.iteritems():\n                    combined_dict[k2+k3] = v3\n            else:\n                combined_dict[k2] = v2\n        for k3,v3 in dict3.iteritems():\n            combined_dict[k3] = v3\n    else:\n        return 'Dictionaries are not of type dict'\n    return combined_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.Counter(list1)\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = collections.Counter(list1)\n    return dic\n    \ndef concatenate(list1):\n    '''\n    Write a function to combine elements of two lists into a single list,\n    and return the single list.\n    '''\n    return list1 + list1\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates in a list.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef remove_duplicates_2(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef change_list(list1):\n    '''\n    Write a function to change the order of the elements in a list.\n    '''\n    list1 = list(reversed(list1))\n    return list1\n    \ndef get_unique(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_2(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    list1 = list(reversed(list1))\n    return list1\n    \ndef find_max(list1):\n    '''\n    Write a function to find the maximum value of a list.\n    '''\n    max_value = max(list1)\n    return max_value\n    \ndef find_max_2(list1):\n    '''\n    Write a function to find the maximum value of a list.\n    '''\n    max_value = max(list1)\n    return max_value\n    \ndef find_min(list1):\n    '''\n    Write a function to find the minimum value of a list.\n    '''\n    min_value = min(list1)\n    return min_value\n    \ndef find_min_2(list1):\n    '''\n    Write a function to find the minimum value of a list.\n    '''\n    min_value = min(list1)\n    return min_value\n    \ndef sort_list(list1):\n    '''\n    Write a function to sort a list in increasing order.\n    '''\n    list1.sort()\n    return list1\n    \ndef sort_list_2(list1):\n    '''\n    Write a function to sort a list in increasing order.\n    '''\n    list1.sort(reverse=False)\n    return list1\n    \ndef get_unique_3(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    list1 = list(reversed(list1))\n    return list1\n    \ndef get_unique_4(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    list1 = list(reversed(list1))\n    return list1\n    \ndef convert_to_dict(list1):\n    '''\n    Write a function to convert a list into a dictionary.\n    '''\n    dict1 = {list1[i]:list1[i+1] for i in range(0, len(list1), 2)}\n    return dict1\n    \ndef convert_to_dict_2(list1):\n    '''\n    Write a function to convert a list into a dictionary.\n    '''\n    dict1 = {list1[i]:list1[i+1] for i in range(0, len(list1), 2)}\n    return dict1\n    \ndef list_to_dict(list1):\n    '''\n    Write a function to convert a list into a dictionary.\n    '''\n    dict1 = {list1[i]:list1[i+1] for i in range(0, len(list1), 2)}\n    return dict1\n    \ndef list_to_dict_2(list1):\n    '''\n    Write a function to convert a list into a dictionary.\n    '''\n    dict1 = {list1[i]:list1[i+1] for i in range(0, len(list1), 2)}\n    return dict1\n    \ndef get_unique_5(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    list1 = list(reversed(list1))\n    return list1\n    \ndef get_unique_6(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    list1 = list(reversed(list1))\n    return list1\n    \ndef get_unique_7(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    list1 = list(reversed(list1))\n    return list1\n    \ndef get_unique_8(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_9(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_10(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_11(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_12(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_13(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_14(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_15(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_16(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_17(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_18(list1):\n    '''\n    Write a function to remove duplicates in a list, but keeping the order of the first appearance.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef get_unique_19(list1):\n    '''\n    Write a function t"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n    \ndef make_dict(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return dict(freq_dict)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    sorted_list=sorted(list1)\n    count={}\n    for i in sorted_list:\n        count[i]=count.get(i,0) + 1\n    return count\ndef freq_count_1(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    sorted_list=sorted(list1)\n    count={}\n    for i in sorted_list:\n        count[i] = list1.count(i)\n    return count\ndef freq_count_2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict={}\n    for i in list1:\n        count_dict[i]=count_dict.get(i,0)+1\n    return count_dict\ndef freq_count_3(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict={}\n    for i in list1:\n        count_dict[i]=count_dict.get(i,0)+1\n    return count_dict\ndef freq_count_4(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict={}\n    for i in list1:\n        count_dict[i]=list1.count(i)\n    return count_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = {}\n    for i in list1:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    return my_dict\ndef sort_list_by_freq(dictionary):\n    '''\n    Write a function to sort a dictionary by value in descending order.\n    '''\n    return sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\ndef sum_of_list(list1):\n    '''\n    Write a function to get the sum of all the elements in a list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n    return total\ndef sum_of_list_double(list1):\n    '''\n    Write a function to get the sum of all the elements in a list.\n    '''\n    return sum(list1)\ndef check_if_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n    return True\ndef find_prime_factor(n):\n    '''\n    Write a function to find the prime factor of a number.\n    '''\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\ndef check_if_palindrome(string1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    string1 = string1.lower()\n    l = len(string1)\n    for i in range(0, l // 2):\n        if string1[i]!= string1[l - i - 1]:\n            return False\n    return True\ndef count_odds(list1):\n    '''\n    Write a function to count the number of odd numbers in a list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2!= 0:\n            count += 1\n    return count\ndef count_odds_list(list1):\n    '''\n    Write a function to count the number of odd numbers in a list.\n    '''\n    return sum(i % 2!= 0 for i in list1)\ndef find_max_dup_freq(list1):\n    '''\n    Write a function to find the max number of duplicates in a list.\n    '''\n    my_dict = {}\n    for i in list1:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    result = list(my_dict.values())\n    max_count = max(result)\n    return max_count\ndef find_max_dup_freq_list(list1):\n    '''\n    Write a function to find the max number of duplicates in a list.\n    '''\n    return max([list1.count(i) for i in set(list1)])\ndef count_triplets(list1, list2):\n    '''\n    Write a function to count the number of triplets with a sum of two numbers in a list of n numbers.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            for k in range(j + 1, len(list1)):\n                if list1[i] + list1[j] == list1[k]:\n                    count += 1\n    return count\ndef count_triplets_list(list1, list2):\n    '''\n    Write a function to count the number of triplets with a sum of two numbers in a list of n numbers.\n    '''\n    return sum([1 for i in range(0, len(list1)) for j in range(i + 1, len(list1)) for k in range(j + 1, len(list1)) if list1[i] + list1[j] == list1[k]])\ndef find_triplets(list1, list2):\n    '''\n    Write a function to find the triplets with a sum of two numbers in a list of n numbers.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i] + list1[j] in list2:\n                result.append([list1[i], list1[j], list1[i] + list1[j]])\n    return result\ndef find_triplets_list(list1, list2):\n    '''\n    Write a function to find the triplets with a sum of two numbers in a list of n numbers.\n    '''\n    return [[list1[i], list1[j], list1[i] + list1[j]] for i in range(0, len(list1)) for j in range(i + 1, len(list1)) if list1[i] + list1[j] in list2]\ndef find_triplets_list2(list1, list2):\n    '''\n    Write a function to find the triplets with a sum of two numbers in a list of n numbers.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i] + list1[j] in list2:\n                result.append([list1[i], list1[j], list1[i] + list1[j]])\n    return result\ndef count_triplets_with_sum(list1, list2):\n    '''\n    Write a function to count the number of triplets with a sum of two numbers in a list of n numbers.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i] + list1[j] in list2:\n                result.append([list1[i], list1[j], list1[i] + list1[j]])\n    return len(result)\ndef count_triplets_with_sum_list(list1, list2):\n    '''\n    Write a function to count the number of triplets with a sum of two numbers in a list of n numbers.\n    '''\n    return sum([1 for i in range(0, len(list1)) for j in range(i + 1, len(list1)) for k in range(j + 1, len(list1)) if list1[i] + list1[j] in list2])\ndef find_longest_substring(list1, list2):\n    '''\n    Write a function to find the longest substring in a list.\n    '''\n    my_dict = {}\n    for i in list2:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    result = 0\n    for i in list1:\n        if i in my_dict:\n            my_dict[i] -= 1\n            result = max(result, sum(my_dict.values()))\n        else:\n            result = max(result, sum(my_dict.values()))\n    return result\ndef find_longest_substring_list(list1, list2):\n    '''\n    Write a function to find the longest substring in a list.\n    '''\n    return max(len(i) for i in [max(list1, key=len) for i in list2])\ndef find_longest_substring_list2(list1, list2):\n    '''\n    Write a function to find the longest substring in a list.\n    '''\n    my_dict = {}\n    for i in list2:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    result = 0\n    for i in list1:\n        if i in my_dict:\n            my_dict[i] -= 1\n            resul"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    res = 0\n    for i in range(N-1, 0, -1):\n        if abs(i-N) < abs(res-N):\n            res = i\n    return res\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return sum(int(c) for c in str(N))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return int(ceil(sqrt(N)))\n    \ndef closest_num_b(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return int(ceil(n**(1/2)))\n    \ndef is_even(n):\n    '''\n    Write a function to find whether n is even or odd.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    arr = []\n    for i in range(1,N+1):\n        arr.append(i)\n    \n    while True:\n        arr.sort()\n        val = arr[0]\n        if val - 1 > arr[-1]:\n            return val\n        else:\n            arr.remove(val)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 2\n    else:\n        result = 1\n        i = 1\n        while i < N:\n            i += 1\n            result = i\n        return result\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    i = 0\n    if N > 0:\n        while N > 1:\n            if N % 2 == 0:\n                N /= 2\n            else:\n                N = (N + 1) // 2\n            i += 1\n    return i\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    res = n\n    for i in range(n):\n        if res - i > n - res:\n            res = i\n    return res\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    else:\n        return 1 + closest_num(N-1)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        return max(len(i) for i in list1)\ndef clean_lower(list1):\n    '''\n    Write a python function to convert the list of strings to a list of lower case strings.\n    '''\n    list1=[i.lower() for i in list1]\n    return list1\ndef split_in_half(list1):\n    '''\n    Write a python function to split the list of strings into two halves.\n    '''\n    if len(list1)%2==0:\n        half1=list1[:len(list1)/2]\n        half2=list1[len(list1)/2:]\n        return half1,half2\n    else:\n        half1=list1[:len(list1)/2]\n        half2=list1[len(list1)/2+1:]\n        return half1,half2\ndef average(list1):\n    '''\n    Write a python function to calculate the average of the list of numbers\n    '''\n    sum1=0\n    for i in list1:\n        sum1=sum1+i\n    avg=float(sum1)/len(list1)\n    return avg\ndef prime(num1):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    if num1==1:\n        return False\n    if num1==2:\n        return True\n    if num1%2==0:\n        return False\n    for i in range(3,int(num1**(1/2)+1)):\n        if num1%i==0:\n            return False\n    return True\ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicate strings from a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef delete_element(list1,element):\n    '''\n    Write a python function to delete the element from a list.\n    '''\n    list1.remove(element)\n    return list1\ndef remove_duplicates_dict(list1):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    dict1={}\n    for i in list1:\n        if i not in dict1.keys():\n            dict1[i]=1\n    return dict1.keys()\ndef remove_duplicates_set(list1):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    set1=set(list1)\n    return set1\ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the list.\n    '''\n    list1.reverse()\n    return list1\ndef all_equal(list1):\n    '''\n    Write a python function to check if all the elements in a list are equal.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        return list1[0]==list1[1]==list1[2]==list1[3]\ndef find_max_char(list1):\n    '''\n    Write a python function to find the max char in a list of strings.\n    '''\n    max_char=list1[0]\n    for i in list1:\n        if len(i)>len(max_char):\n            max_char=i\n    return max_char\ndef find_min_char(list1):\n    '''\n    Write a python function to find the min char in a list of strings.\n    '''\n    min_char=list1[0]\n    for i in list1:\n        if len(i)<len(min_char):\n            min_char=i\n    return min_char\ndef find_most_common(list1):\n    '''\n    Write a python function to find the most common char in a list of strings.\n    '''\n    dict1={}\n    for i in list1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    max_char=list1[0]\n    count=dict1[list1[0]]\n    for i in dict1:\n        if dict1[i]>count:\n            count=dict1[i]\n            max_char=i\n    return max_char\ndef most_common_in_three(list1):\n    '''\n    Write a python function to find the most common char in a list of strings.\n    '''\n    dict1={}\n    for i in list1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    max_char=list1[0]\n    count=dict1[list1[0]]\n    for i in dict1:\n        if dict1[i]>count and i not in list1[:2]:\n            count=dict1[i]\n            max_char=i\n    return max_char\ndef sort_list(list1):\n    '''\n    Write a python function to sort a list.\n    '''\n    list1.sort()\n    return list1\ndef filter_nums(list1):\n    '''\n    Write a python function to filter a list of integers\n    '''\n    list2=[i for i in list1 if i%2==0]\n    return list2\ndef group_by_first_letter(list1):\n    '''\n    Write a python function to group a list of strings by first letter.\n    '''\n    dict1={}\n    for i in list1:\n        if i[0] not in dict1:\n            dict1[i[0]]=[i]\n        else:\n            dict1[i[0]].append(i)\n    return dict1\ndef group_by_len(list1):\n    '''\n    Write a python function to group a list of strings by length.\n    '''\n    dict1={}\n    for i in list1:\n        if len(i) not in dict1:\n            dict1[len(i)]=[i]\n        else:\n            dict1[len(i)].append(i)\n    return dict1\ndef merge_dict(dict1,dict2):\n    '''\n    Write a python function to merge two dictionaries.\n    '''\n    dict3={}\n    for i in dict1:\n        if i in dict2:\n            dict3[i]=dict1[i]+dict2[i]\n    for i in dict2:\n        if i not in dict1:\n            dict3[i]=dict2[i]\n    return dict3\ndef remove_space_list(list1):\n    '''\n    Write a python function to remove the spaces from a list of strings.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i.replace(\" \",\"\"))\n    return list2\ndef insert_space(list1):\n    '''\n    Write a python function to insert a space between each two words from a list of strings.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        list2.append(list1[i])\n        if i!=len(list1)-1:\n            list2.append(\" \")\n    return list2\ndef string_per(list1):\n    '''\n    Write a python function to get the percentage of string in a list.\n    '''\n    sum1=0\n    for i in list1:\n        sum1+=len(i)\n    percentage=float(sum1)/len(list1)*100\n    return percentage\ndef delete_nth(list1,n):\n    '''\n    Write a python function to delete the nth element from a list.\n    '''\n    del list1[n]\n    return list1\ndef delete_nth_element(list1,n):\n    '''\n    Write a python function to delete the nth element from a list.\n    '''\n    list1.pop(n)\n    return list1\ndef sort_by_nth_element(list1,n):\n    '''\n    Write a python function to sort a list by nth element.\n    '''\n    list1.sort(key=lambda x:x[n]"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = len(list1[0])\n    for word in list1:\n        if length < len(word):\n            length = len(word)\n    return length\n    \ndef find_words(list1, words):\n    '''\n    Write a python function to find all the words which are \n    present in the list, but not in the dictionary.\n    '''\n    flag = 1\n    length = len_log(list1)\n    for word in list1:\n        if len(word) < length:\n            length = len(word)\n    new_list = []\n    for word in list1:\n        if len(word) == length:\n            flag = 1\n            for word2 in words:\n                if word == word2:\n                    flag = 0\n                    break\n            if flag == 1:\n                new_list.append(word)\n    return new_list\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #print len(max(list1))\n    return len(max(list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    long_word = ''\n    for word in list1:\n        if len(word) > len(long_word):\n            long_word = word\n    return len(long_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = [word for word in list1 if word.isalpha()]\n    print(max(len(word) for word in list1))\n    return max(len(word) for word in list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    result = 0\n    for x in list1:\n        if len(x) > result:\n            result = len(x)\n    return result\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = [len(x) for x in list1]\n    return list2\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for i in list1:\n        length = max(length,len(i))\n    return length\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in string for string in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list1 = str1.split()\n    for i in list1:\n        if i == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str = sub_str.lower()\n    str1 = str1.lower()\n    flag = 0\n    for i in str1:\n        if i in sub_str:\n            flag = 1\n            break\n    return flag\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = list(sub_str)\n    str_list = list(str1)\n    for idx in range(len(str_list)):\n        for idx2 in range(len(sub_str_list)):\n            if sub_str_list[idx2]!= str_list[idx]:\n                break\n            if idx2 == len(sub_str_list) - 1:\n                return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = []\n    for i in range(len(str1)):\n        index = i\n        while index < len(str1):\n            if str1[index:index + len(sub_str)] == sub_str:\n                result.append(index)\n            index += 1\n    return result\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 2: \n        return False\n    \n    for i in range(2,n): \n        if n % i == 0: \n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Expected Output:\n    # True\n    # False\n    \n    # Write your code here\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    return all(int(a) < int(b) for a,b in zip(s, s[1:]))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return all(int(i) % int(j) == 0 for i,j in zip(str(n), str(n)[1:]))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n_digits = len(str(n))\n    for i in range(n_digits):\n        if n % 10 == 0 and i == 0:\n            return False\n        elif n % 10 == 0 and i!= 0:\n            return False\n        elif n % (10 ** (i+1)) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    t = int(s+s)\n    return n == t\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    l = len(str(n))\n    str_n = str(n)\n    for i in range(1,l):\n        if int(str_n[i]) < int(str_n[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = list(str(n))\n    for i in range(len(n)-1):\n        if int(n[i]) > int(n[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    for i in range(n):\n        if i % 3 == 0 and i % 5 == 0:\n            count = count + 1\n    if count == n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    import math\n    return (int(math.sqrt(n))*10)**2 == n\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1/power(a,-b)\n    if b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return power(a*a,(b-1)/2)*a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    \ndef count_digits(n):\n    '''\n    Write a function that accepts a number and returns the number of digits in it.\n    '''\n    return len(str(n))\n    \ndef avg_digit(n):\n    '''\n    Write a function to calculate the average digit in a number.\n    '''\n    n = str(n)\n    digit_sum = 0\n    for i in n:\n        digit_sum += int(i)\n    avg_digit = digit_sum/len(n)\n    return avg_digit\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b < 0:\n        return 1/power(a,-b)\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    elif b>1:\n        return a*power(a,b-1)\n    else:\n        return 1/power(a,b+1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    elif b%2==0:\n        return power(a*a, b/2)\n    else:\n        return a*power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,b*-1)\n    else:\n        return power(a,b-1)*a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a * a, b // 2)\n    else:\n        return a * power(a * a, b // 2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a,b * -1)\n    else:\n        return power(a * a, b / 2)\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    pass\ndef find_day(date):\n    '''\n    Given a string in the format 'yyyy-mm-dd', write a function that returns the day of the week as an integer (0-6), \n    where Monday is 0 and Sunday is 6.\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code here\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = None\n    minimum_index = None\n    for i, tuples in enumerate(test_list):\n        if minimum is None or tuples[1] < minimum:\n            minimum = tuples[1]\n            minimum_index = i\n    return test_list[minimum_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #use the built-in min function\n    min_val = min(test_list, key=itemgetter(1))\n    #return the value of the first index of the tuple with the smallest second value\n    return min_val[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n    \ndef test_index_minimum():\n    assert index_minimum([(3, 5), (2, 3), (1, 1), (4, 4), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 4), (0, 1)]) == 1\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 4), (0, 1)]) == 2\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum([(3, 5), (2, 4), (1, 4), (4, 5), (0, 1)]) == 0\n    assert index_minimum("
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_len = len(test_list)\n    min_index = -1\n    min_val = float('inf')\n    for i in range(list_len):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_dict = {}\n    for index, value in enumerate(test_list):\n        if value[1] not in min_dict:\n            min_dict[value[1]] = [index]\n        else:\n            min_dict[value[1]].append(index)\n    min_list = [min(min_dict[x]) for x in min_dict]\n    return min_list\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    min = lst[0][1]\n    for i in lst:\n        if i[1] < min:\n            min = i[1]\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_length = len(lst[0])\n    \n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    \n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min=len(lst[0])\n    for i in lst:\n        if min>len(i):\n            min=len(i)\n    return min\n    \ndef Find_Maximum_Length(lst):\n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max=len(lst[0])\n    for i in lst:\n        if max<len(i):\n            max=len(i)\n    return max\n    \ndef Find_Difference(lst):\n    '''\n    Write a python function to find the difference between the minimum and maximum lengths of a list of lists.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    return max-min\n    \ndef Find_Median(lst):\n    '''\n    Write a python function to find the median of a list of lists.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    med=Find_Difference(lst)/2\n    if med%2==0:\n        return lst[int(med/2)][int(med/2)]\n    else:\n        return lst[int((med+1)/2)][int((med+1)/2)]\n        \ndef Find_Mean(lst):\n    '''\n    Write a python function to find the mean of a list of lists.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=0\n    for i in lst:\n        for j in i:\n            total+=j\n    return total/((max+min)*max)\n    \ndef Find_Standard_Deviation(lst):\n    '''\n    Write a python function to find the standard deviation of a list of lists.\n    '''\n    mean=Find_Mean(lst)\n    min=Find_Min_Length(lst)\n    dev=0\n    for i in lst:\n        for j in i:\n            dev+=pow(mean-j,2)\n    return math.sqrt(dev/(len(lst)*(min+Find_Difference(lst))))\n    \ndef Find_Variance(lst):\n    '''\n    Write a python function to find the variance of a list of lists.\n    '''\n    mean=Find_Mean(lst)\n    min=Find_Min_Length(lst)\n    var=0\n    for i in lst:\n        for j in i:\n            var+=pow(mean-j,2)\n    return var/(len(lst)*(min+Find_Difference(lst)))\n    \ndef Find_Sum(lst):\n    '''\n    Write a python function to find the sum of a list of lists.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=0\n    for i in lst:\n        for j in i:\n            total+=j\n    return total\n    \ndef Find_Sum_Squared(lst):\n    '''\n    Write a python function to find the sum of the squares of a list of lists.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=0\n    for i in lst:\n        for j in i:\n            total+=pow(j,2)\n    return total\n    \ndef Find_Sum_Squared_Mean(lst):\n    '''\n    Write a python function to find the sum of the squares of a list of lists, divided by the mean of the sum of the squares.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=Find_Sum(lst)\n    mean=total/(max*min)\n    return total/(max*min)\n    \ndef Find_Sum_Squared_Mean_Subtracted(lst):\n    '''\n    Write a python function to find the sum of the squares of a list of lists, divided by the mean of the sum of the squares minus the mean of the list.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=Find_Sum(lst)\n    mean=total/(max*min)\n    return total/(max*min)-mean\n    \ndef Find_Unbiased_Standard_Deviation(lst):\n    '''\n    Write a python function to find the unbiased standard deviation of a list of lists.\n    '''\n    mean=Find_Mean(lst)\n    min=Find_Min_Length(lst)\n    var=0\n    for i in lst:\n        for j in i:\n            var+=pow(mean-j,2)\n    return math.sqrt(var/(len(lst)*(min+Find_Difference(lst))))\n    \ndef Find_Unbiased_Variance(lst):\n    '''\n    Write a python function to find the unbiased variance of a list of lists.\n    '''\n    mean=Find_Mean(lst)\n    min=Find_Min_Length(lst)\n    var=0\n    for i in lst:\n        for j in i:\n            var+=pow(mean-j,2)\n    return var/(len(lst)*(min+Find_Difference(lst)))\n    \ndef Find_Unbiased_Sum_Squared(lst):\n    '''\n    Write a python function to find the unbiased sum of squares of a list of lists.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=0\n    for i in lst:\n        for j in i:\n            total+=j\n    return total*total\n    \ndef Find_Unbiased_Sum_Squared_Mean(lst):\n    '''\n    Write a python function to find the unbiased sum of squares of a list of lists, divided by the mean of the sum of squares.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=Find_Sum_Squared(lst)\n    mean=total/(max*min)\n    return total/(max*min)\n    \ndef Find_Unbiased_Sum_Squared_Mean_Subtracted(lst):\n    '''\n    Write a python function to find the unbiased sum of squares of a list of lists, divided by the mean of the sum of squares minus the mean of the list.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=Find_Sum_Squared(lst)\n    mean=total/(max*min)\n    return total/(max*min)-mean\n    \ndef Find_Stdev(lst):\n    '''\n    Write a python function to find the standard deviation of a list of lists.\n    '''\n    return math.sqrt(Find_Variance(lst))\n    \ndef Find_Z_Score(lst,value):\n    '''\n    Write a python function to find the Z score of a list of lists for a given value.\n    '''\n    mean=Find_Mean(lst)\n    stdev=Find_Stdev(lst)\n    return (value-mean)/stdev\n    \ndef Find_Percentile(lst,percentile):\n    '''\n    Write a python function to find the percentile of a list of lists for a given percentile.\n    '''\n    min=Find_Min_Length(lst)\n    max=Find_Maximum_Length(lst)\n    total=0\n    for i in lst:\n        for j in i:\n            total+=j\n    percentile=(max+min)*percentile/100\n    return total/((max+min)*max)\n    \ndef Find_Sum_of_Sorted_Squares(lst):\n    '''\n    Write a python function to find the sum of the squares of the sorted elements of a list of lists.\n    '''\n    lst.sort()\n    total=0\n    for i in lst:\n        for j in i:\n            total+"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min_Length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < Min_Length:\n            Min_Length = len(sublist)\n    return Min_Length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0][0]  \n    for j in range(1, len(lst)):  \n        if (len(lst[j]) > 0):  \n            if (len(lst[j]) < len(smallest)):  \n                smallest = lst[j]  \n    return len(smallest) \n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    global min\n    min = len(lst[0])\n    for i in lst:\n        if len(i) <= min:\n            min = len(i)\n    return\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst = sorted(lst, key = len)\n    return len(lst[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(lst_l) for lst_l in lst])\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == []:\n        return 0\n    else:\n        return 1 + min([Find_Min_Length(x) for x in lst[1:]])\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(x) for x in lst])\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    c = 0\n    while i<=n:\n        if n%i==0:\n            c+=1\n        i+=1\n    return c\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 0:\n        return False\n    else:\n        if n == 0:\n            return 0\n        else:\n            return 1 + divisor(n - 1)\n            \n    "
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initialize the number of divisors to 0\n    divisors = 0\n    # check to see if the number is divisible by either 1 or itself\n    if n%1 == 0:\n        divisors += 1\n    if n%2 == 0:\n        divisors += 1\n    # check to see if the number is divisible by three\n    if n%3 == 0:\n        divisors += 1\n    # check to see if the number is divisible by five\n    if n%5 == 0:\n        divisors += 1\n    # check to see if the number is divisible by both 3 and 5\n    if n%15 == 0:\n        divisors += 1\n    # iterate over the number and count the divisors\n    for i in range(1,int(n/2)+1):\n        if n%i == 0:\n            divisors += 2\n    # return the number of divisors\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(2,n):\n        if n%i == 0:\n            divisors+=1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 1:\n        return 1\n    count = 0\n    for i in range(2,n):\n        if n % i == 0:\n            count += 2\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(2,int(n/2)+1):\n        if n%i == 0:\n            div += 2\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    s = 1\n    for i in range(2,int(n**0.5)):\n        if n % i == 0:\n            s += 2\n    if s == 1:\n        return 1\n    else:\n        return s\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    return divisor(n // 2) + 1 if n % 2 == 0 else divisor(n - 1) + 1\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for x in list1:\n        if x in counts:\n            counts[x] += 1\n        else:\n            counts[x] = 1\n    return counts\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result_dict = {}\n    for item in list1:\n        if item not in result_dict.keys():\n            result_dict[item] = 1\n        else:\n            result_dict[item] += 1\n    return result_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1 = [item for sublist in list1 for item in sublist]\n    return Counter(list1)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freqs = {}\n    for item in list1:\n        if item in freqs:\n            freqs[item] += 1\n        else:\n            freqs[item] = 1\n    return freqs\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = []\n    for i in list1:\n        list2.extend(i)\n    dict = {}\n    for i in list2:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for l in list1:\n        if l not in freq:\n            freq[l] = 1\n        else:\n            freq[l] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flatten_list = [item for sublist in list1 for item in sublist]\n    dictionary = {}\n    for i in flatten_list:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    return dictionary\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = []\n    for j in list1:\n        list2.extend(j)\n    dict_list = {}\n    for k in set(list2):\n        dict_list[k] = list2.count(k)\n    return dict_list\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result = result * number\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x,y: x*y, numbers) / float(len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    number = 1\n    for i in numbers:\n        number = i * number\n    return number / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul_num = reduce(lambda x, y: x * y, numbers)\n    return mul_num / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product = product * num\n    return product/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if numbers == []:\n        return 0\n    else:\n        result = 1\n        for i in numbers:\n            result *= i\n        return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for n in numbers:\n        num = num * n\n    num = num / len(numbers)\n    return num\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_result = 1\n    for number in numbers:\n        numbers_result *= number\n    numbers_result = numbers_result / len(numbers)\n    return numbers_result\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    if n < 0:\n        return \"-\" + decimal_to_binary(-n)\n    if n >= 1:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return '-'+decimal_to_binary(-n)\n    else:\n        return str(n%2)+decimal_to_binary(n//2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n)[2:]) \n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        return decimal_to_binary(n/2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        return '-' + decimal_to_binary(-n)\n    elif n == 0:\n        return '0'\n    else:\n        return decimal_to_binary(n//2) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    elif n % 2 == 0:\n        return decimal_to_binary(n/2) + \"0\"\n    else:\n        return decimal_to_binary(n/2) + \"1\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = []\n    while n > 0:\n        result.append(n % 2)\n        n /= 2\n    result.reverse()\n    return ''.join(str(x) for x in result)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    string = ''\n    i = 0\n    while n>=1:\n        temp = n % 2\n        n = n // 2\n        string = str(temp) + string\n    return string\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return \"0\"\n    binary = \"\"\n    while n:\n        if n%2==0:\n            binary += \"0\"\n        else:\n            binary += \"1\"\n        n/=2\n    return binary[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    t = num\n    while t > 0:\n        if t & 1 == 0:\n            t >>= 1\n        else:\n            t += 1\n            t = t >> 1\n            t |= t << 32\n            t &= (1 << 32) - 1\n    return num + (t ^ num)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_length = len(num_str)\n    last_half = num_str[num_length // 2:]\n    first_half = num_str[:num_length // 2]\n    if last_half == first_half:\n        num_str = '1' + num_str\n    else:\n        num_str = int(last_half + first_half[1:])\n    return num_str\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        if int(num) == 9:\n            return 11\n        else:\n            return int(num) + 1\n    num_list = list(num)\n    last_num = int(num_list[-1])\n    mid_num = int(num_list[len(num_list) / 2])\n    num_list[-1] = str(last_num)\n    num_list[len(num_list) / 2] = str(mid_num)\n    num_str = ''.join(num_list)\n    num_str = num_str[:-1]\n    num_int = int(num_str)\n    if num_int > 9:\n        num_int = int(num_str[:-1])\n        if num_int > 9:\n            num_int = int(num_str[:-2])\n            if num_int > 9:\n                num_int = int(num_str[:-3])\n                if num_int > 9:\n                    num_int = int(num_str[:-4])\n                    if num_int > 9:\n                        num_int = int(num_str[:-5])\n    return num_int\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    #if num is already a palindrome, the smallest palindrome is itself\n    if num == num[::-1]:\n        return int(num)\n    #if num is even\n    if len(num) % 2 == 0:\n        num = num[:-1]\n        num = num[::-1]\n        num = int(num + num)\n        return num\n    #if num is odd\n    num = num[:-1]\n    num = num[::-1]\n    num = int(num + num)\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_s = str(num)\n    \n    if num_s == num_s[::-1]:\n        return int(num_s + '1')\n    \n    n = len(num_s)\n    s = num_s[::-1]\n    \n    for i in range(n-1, 0, -1):\n        if s[i] < s[i-1]:\n            s = s[:i-1] + s[i] + s[i-1] + s[i+1:]\n            break\n    \n    return int(s + '1')\n    \n    \ndef is_pandigital(n, i = 1):\n    '''\n    Return True if n is pandigital, and False otherwise.\n    '''\n    n = str(n)\n    \n    if len(n)!= i:\n        return False\n    \n    if not '0' in n:\n        return False\n    \n    return True\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return 0\n    elif len(num) == 2:\n        if int(num[1]) > int(num[0]):\n            return int(num[0]) * 10 + int(num[1])\n        else:\n            return int(num[0]) * 10 - int(num[1])\n    elif len(num) > 2:\n        p1 = 0\n        p2 = len(num) - 1\n        while p1 <= p2:\n            if int(num[p1]) > int(num[p2]):\n                break\n            p1 += 1\n            p2 -= 1\n        if p1 > p2:\n            return int(num[:p2]) - 1\n        else:\n            if int(num[p1]) > int(num[p2]):\n                return int(num[:p2]) * 10 + int(num[p1])\n            else:\n                return int(num[:p2]) * 10 - int(num[p1])\n    \ndef test_next_smallest_palindrome():\n    assert next_smallest_palindrome(2) == 1\n    assert next_smallest_palindrome(12321) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_palindrome(1234) == 1234\n    assert next_smallest_pa"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    if num == 11:\n        return 0\n    if num == 12:\n        return 11\n    if num == 13:\n        return 10\n    if num == 14:\n        return 11\n    if num == 15:\n        return 0\n    if num == 16:\n        return 11\n    if num == 17:\n        return 0\n    if num == 18:\n        return 11\n    if num == 19:\n        return 10\n    if num == 20:\n        return 11\n    if num == 21:\n        return 11\n    if num == 22:\n        return 10\n    if num == 23:\n        return 11\n    if num == 24:\n        return 10\n    if num == 25:\n        return 11\n    if num == 26:\n        return 10\n    if num == 27:\n        return 11\n    if num == 28:\n        return 10\n    if num == 29:\n        return 11\n    if num == 30:\n        return 10\n    if num == 31:\n        return 11\n    if num == 32:\n        return 10\n    if num == 33:\n        return 11\n    if num == 34:\n        return 10\n    if num == 35:\n        return 11\n    if num == 36:\n        return 10\n    if num == 37:\n        return 11\n    if num == 38:\n        return 10\n    if num == 39:\n        return 11\n    if num == 40:\n        return 10\n    if num == 41:\n        return 11\n    if num == 42:\n        return 10\n    if num == 43:\n        return 11\n    if num == 44:\n        return 10\n    if num == 45:\n        return 11\n    if num == 46:\n        return 10\n    if num == 47:\n        return 11\n    if num == 48:\n        return 10\n    if num == 49:\n        return 11\n    if num == 50:\n        return 10\n    if num == 51:\n        return 11\n    if num == 52:\n        return 10\n    if num == 53:\n        return 11\n    if num == 54:\n        return 10\n    if num == 55:\n        return 11\n    if num == 56:\n        return 10\n    if num == 57:\n        return 11\n    if num == 58:\n        return 10\n    if num == 59:\n        return 11\n    if num == 60:\n        return 10\n    if num == 61:\n        return 11\n    if num == 62:\n        return 10\n    if num == 63:\n        return 11\n    if num == 64:\n        return 10\n    if num == 65:\n        return 11\n    if num == 66:\n        return 10\n    if num == 67:\n        return 11\n    if num == 68:\n        return 10\n    if num == 69:\n        return 11\n    if num == 70:\n        return 10\n    if num == 71:\n        return 11\n    if num == 72:\n        return 10\n    if num == 73:\n        return 11\n    if num == 74:\n        return 10\n    if num == 75:\n        return 11\n    if num == 76:\n        return 10\n    if num == 77:\n        return 11\n    if num == 78:\n        return 10\n    if num == 79:\n        return 11\n    if num == 80:\n        return 10\n    if num == 81:\n        return 11\n    if num == 82:\n        return 10\n    if num == 83:\n        return 11\n    if num == 84:\n        return 10\n    if num == 85:\n        return 11\n    if num == 86:\n        return 10\n    if num == 87:\n        return 11\n    if num == 88:\n        return 10\n    if num == 89:\n        return 11\n    if num == 90:\n        return 10\n    if num == 91:\n        return 11\n    if num == 92:\n        return 10\n    if num == 93:\n        return 11\n    if num == 94:\n        return 10\n    if num == 95:\n        return 11\n    if num == 96:\n        return 10\n    if num == 97:\n        return 11\n    if num == 98:\n        return 10\n    if num == 99:\n        return 11\n    if num == 100:\n        return 10\n    if num == 101:\n        return 11\n    if num == 102:\n        return 10\n    if num == 103:\n        return 11\n    if num == 104:\n        return 10\n    if num == 105:\n        return 11\n    if num == 106:\n        return 10\n    if num == 107:\n        return 11\n    if num == 108:\n        return 10\n    if num == 109:\n        return 11\n    if num == 110:\n        return 10\n    if num == 111:\n        return 11\n    if num == 112:\n        return 10\n    if num == 113:\n        return 11\n    if num == 114:\n        return 10\n    if num == 115:\n        return 11\n    if num == 116:\n        return 10\n    if num == 117:\n        return 11\n    if num == 118:\n        return 10\n    if num == 119:\n        return 11\n    if num == 120:\n        return 10\n    if num == 121:\n        return 11\n    if num == 122:\n        return 10\n    if num == 123:\n        return 11\n    if num == 124:\n        return 10\n    if num == 125:\n        return 11\n    if num == 126:\n        return 10\n    if num == 127:\n        return 11\n    if num == 128:\n        return 10\n    if num == 129:\n        return 11\n    if num == 130:\n        return 10\n    if num == 131:\n        return 11\n    if num == 132:\n        return 10\n    if num == 133:\n        return 11\n    if num == 134:\n        return 10\n    if num == 135:\n        return 11\n    if num == 136:\n        return 10\n    if num == 137:\n        return 11\n    if num == 138:\n        return 10\n    if num == 139:\n        return 11\n    if num == 140:\n        return 10\n    if num == 141:\n        return 11\n    if num == 142:\n        return 10\n    if num == 143:\n        return 11\n    if num == 144:\n        return 10\n    if num == 145:\n        return 11\n    if num == 146:\n        return 10\n    if num == 147:\n        return 11\n    if num == 148:\n        return 10\n    if num == 149:\n        return 11\n    if num == 150:\n        return 10\n    if num == 151:\n        return 11\n    if num == 152:\n        return 10\n    if num == 153:\n        return 11\n    if num == 154:\n        return 10\n    if num == 155:\n        return 11\n    if num == 156:\n        return 10\n    if num == 157:\n        return 11\n    if num == 158:\n        return 10\n    if num == 159:\n        return 11\n    if num == 160:\n        return 10\n    if num == 161:\n        return 11\n    if num == 162:\n        return 10\n    if num == 163:\n        return 11\n    if num == 164:\n        return 10\n    if num == 165:\n        return 11\n    if num == 166:\n        return 10\n    if num == 167:\n        return 11\n    if num == 168:\n        return 10\n    if num == 169:\n        return 11\n    if num == 170:\n        return 10\n    if num == 171:\n        return 11\n    if num == 172:\n        return 10\n    if num == 173:\n        return 11\n    if num == 174:\n        return 10\n    if num == 175:\n        return 11\n    if num == 176:\n        return 10\n    if num == 177:\n        return 11\n    if num == 178:\n        return 10\n    if num == 179:\n        return 11\n    if num == 180:\n        return 10\n    if num == 181:\n        return 11\n    if num == 182:\n        return 10\n    if num == 183:\n        return 11\n    if num == 184:\n        return 10\n    if num == 185:\n        return 11\n    if num == 186:\n        return 10\n    if num == 187:\n        return 11\n    if num == 188:\n        return 10\n    if num == 189:\n        return 11\n    if num == 190:\n        return 10\n    if num == 191:\n        return 1"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    last_digit = num[-1]\n    for i in range(len(num)-1, 0, -1):\n        if num[i] < last_digit:\n            num = num[:i] + str(int(last_digit) + 1) + str(int(num[i]))[::-1]\n            return int(num)\n    return int(num[:1] + str(int(num[1]) - 1) + str(int(num[1]))[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    import math\n    num = str(num)[::-1]\n    for i in range(len(num)):\n        if not int(num[i]):\n            break\n    if i == len(num) - 1:\n        return int(num + '1' + '0' * (len(num) - 2))\n    else:\n        num = list(num)\n        num[i] = '9'\n        return int(''.join(num))\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return \"Invalid input\"\n    \n    # sort array\n    arr.sort()\n    # return kth element\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr = sorted(arr)\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1:\n        raise ValueError('k should be >= 1')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return -1\n    return arr[(len(arr) - 1) - k]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    elif k == len(arr):\n        return arr[-1]\n    else:\n        return kth_element(arr[:-1], k)\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr_size = len(arr)\n    for i in range(arr_size):\n        if i+k <= arr_size:\n            return arr[i+k-1]\n        \n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == None or len(arr) == 0 or k < 1:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = word.split('_')\n    for i in range(len(word_list)):\n        word_list[i] = word_list[i].capitalize()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return re.sub(r'(_\\w)', lambda m: m.group(1).upper(), word)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake_case_split = word.split('_')\n    return str.join('',map(str.capitalize,snake_case_split))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return ''\n    elif len(word) == 1:\n        return word[0].lower()\n    else:\n        return word[0].lower() + word[1:].title()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    split_words = word.split('_')\n    first_word = split_words[0]\n    split_words.pop(0)\n    split_words = ''.join(split_words)\n    return first_word + split_words.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if '_' not in word:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = ''\n    for idx, char in enumerate(word):\n        if idx == 0:\n            new_word += word[0].upper()\n        else:\n            new_word += word[idx].lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for i in range(0, len(word)):\n        if word[i] == '_':\n            new_word += word[i+1].upper()\n        else:\n            new_word += word[i]\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            res += word[i].lower()\n        else:\n            res += word[i]\n    return res\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * (n - 1) // 2 + m\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    counter = [0] * (m + 1)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            counter[j] = counter[j] + i\n    return sum(counter)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m==0:\n        return n+1\n    else:\n        return eulerian_num(m, n%m)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    if n == 0:\n        return 0\n    return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (factorial(n+m) // (factorial(n) * factorial(m)))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m == 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num = []\n    for i in range(1, n):\n        num.append([])\n        for j in range(1, m):\n            num[i-1].append(1)\n    \n    num[n-1][m-1] = 0\n    for i in range(n-2, -1, -1):\n        for j in range(m-2, -1, -1):\n            num[i][j] = num[i][j+1] + num[i+1][j]\n    return num[0][0]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m == 0:\n        return 0\n    else:\n        return (eulerian_num(n - 1, m) + eulerian_num(n, m - 1))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    elif n > 0 and m == 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + m\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    total_edges = 0\n    for i in range(n):\n        for j in range(m):\n            total_edges += get_edges(i, j)\n    return total_edges\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for i in input_list:\n        result.append(sorted(i))\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    sublist_list = [[]]\n    \n    for i in input_list:\n        for j in i:\n            sublist_list.append([j])\n    \n    sublist_list.sort()\n    \n    return sublist_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n        \ndef sort_strings(input_list):\n    '''\n    Write a function that sorts a list of strings by their first letter.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = input_list[i][0] + input_list[i][1:]\n        \ndef remove_strings(input_list):\n    '''\n    Write a function that removes all strings from a list of strings.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = input_list[i][1:-1]\n        \ndef remove_duplicates(input_list):\n    '''\n    Write a function that removes duplicates from a list of strings.\n    '''\n    i = 0\n    while i < len(input_list):\n        if input_list.count(input_list[i]) > 1:\n            input_list.remove(input_list[i])\n        else:\n            i += 1\n            \ndef remove_strings_and_duplicates(input_list):\n    '''\n    Write a function that removes duplicates from a list of strings.\n    '''\n    temp_list = []\n    for i in range(len(input_list)):\n        if input_list[i] not in temp_list:\n            temp_list.append(input_list[i])\n    return temp_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    output_list = []\n    for items in input_list:\n        output_list.append(sorted(items))\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(sublist) for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    '''\n    my_list = [['X', 'a', 'B'], ['a', 'b', 'c'], ['x', 'z', 'y']]\n    \n    [['x', 'z', 'y'], ['a', 'b', 'c'], ['X', 'a', 'B']]\n    '''\n    \n    for sublist in input_list:\n        sublist.sort()\n        \n    return input_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in input_list:\n        i.sort()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for each in lst:\n        if each:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(elem) for elem in lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(i) for i in lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    n = 0\n    for i in lst:\n        if type(i) == bool:\n            if i == True:\n                n += 1\n    return n\n    \ndef true_count(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    n = 0\n    for i in lst:\n        if i:\n            n += 1\n    return n\n    \ndef true_count_v2(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return sum([1 for i in lst if i])\n    \ndef true_count_v3(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True)\n    \ndef true_count_v4(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return sum([1 for i in lst if type(i) == bool and i == True])\n    \ndef true_count_v5(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v6(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v7(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return sum(1 for i in lst if type(i) == bool and i == True)\n    \ndef true_count_v8(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return sum(1 for i in lst if type(i) == bool and i)\n    \ndef true_count_v9(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v10(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v11(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v12(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v13(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v14(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v15(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v16(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v17(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v18(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v19(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v20(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v21(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v22(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v23(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v24(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v25(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v26(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v27(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v28(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v29(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return the count of booleans that are True.\n    '''\n    return lst.count(True) if lst else 0\n    \ndef true_count_v30(lst):\n    '''\n    Write a python function to count true booleans in the given list, and return th"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([1 for i in lst if i == True])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if (type(item) == bool) and (item == True):\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += 1\n    return count\n    \ndef intersection(lst1,lst2):\n    '''\n    Write a python function to find intersection of two lists.\n    '''\n    inter = []\n    for i in lst1:\n        if i in lst2:\n            inter.append(i)\n    return inter\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    #print type(lst)\n    #print lst\n    lst = [True, True, False, False, True, True, True, True, True, False, True]\n    #lst = [True, True, False, False, True, True, True, True, True, False, True]\n    lst_len = len(lst)\n    true_len = 0\n    for i in range(lst_len):\n        if lst[i] == True:\n            true_len += 1\n    return true_len\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_list == []:\n        test_list.append(test_tup)\n    else:\n        test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n    \n    \ndef print_list(test_list):\n    '''\n    Write a function that prints the list to the console.\n    '''\n    return print(test_list)\n    \n    \ndef main():\n    # Here is a list of tuples\n    test_list = [(0, 1, 2), (3, 4, 5), (6, 7, 8)]\n    \n    # Write a function to append the given list to the given tuples.\n    append_tuple = add_lists(test_list, (9, 10, 11))\n    print(append_tuple)\n    \n    # Write a function to print the list to the console.\n    print_list(append_tuple)\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # temp_list = []\n    # for item in test_tup:\n    #     temp_list.append(item)\n    # test_list.append(temp_list)\n    # return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_of_tuples = test_list + test_tup\n    return list_of_tuples\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_tup) is not list:\n        return \"Please enter a tuple\"\n    else:\n        test_tup.extend(test_list)\n        return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return (test_list + test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + test_tup\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #num1 = [1, 3, 5, 7, 8, 10]\n    #num2 = [2, 4, 6, 9, 11, 15]\n    #num3 = [0, 6, 12]\n    #print(num1)\n    #print(num2)\n    #print(num3)\n    #merge_sorted_list(num1,num2,num3)\n    #print(num1)\n    #print(num2)\n    #print(num3)\n    if(len(num1) == 0):\n        return num2 + num3\n    if(len(num2) == 0):\n        return num1 + num3\n    if(len(num3) == 0):\n        return num1 + num2\n    if(num1[0] < num2[0]):\n        return [num1[0]] + merge_sorted_list(num1[1:], num2, num3)\n    else:\n        return [num2[0]] + merge_sorted_list(num1, num2[1:], num3)\n    \n    \n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == []:\n        return num2\n    if num2 == []:\n        return num1\n    if num3 == []:\n        return num1 + num2\n    res = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] <= num2[j]:\n            res.append(num1[i])\n            i += 1\n        else:\n            res.append(num2[j])\n            j += 1\n    while i < len(num1):\n        res.append(num1[i])\n        i += 1\n    while j < len(num2):\n        res.append(num2[j])\n        j += 1\n    return res\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1[0] < num2[0] and num1[0] < num3[0]:\n        return num1\n    elif num2[0] < num1[0] and num2[0] < num3[0]:\n        return num2\n    elif num3[0] < num1[0] and num3[0] < num2[0]:\n        return num3\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    m=[]\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            if num1[i]<num3[k]:\n                m.append(num1[i])\n                i+=1\n            else:\n                m.append(num3[k])\n                k+=1\n        else:\n            if num2[j]<num3[k]:\n                m.append(num2[j])\n                j+=1\n            else:\n                m.append(num3[k])\n                k+=1\n    while i<len(num1):\n        m.append(num1[i])\n        i+=1\n    while j<len(num2):\n        m.append(num2[j])\n        j+=1\n    while k<len(num3):\n        m.append(num3[k])\n        k+=1\n    return m\ndef max_heap(num):\n    '''\n    Write a function to convert a list into a max heap\n    '''\n    heap=[]\n    for i in num:\n        heapq.heappush(heap,i)\n    return heap\ndef min_heap(num):\n    '''\n    Write a function to convert a list into a min heap\n    '''\n    heap=[]\n    for i in num:\n        heapq.heappush(heap,-i)\n    return heap\ndef merge_sorted_list(list1,list2,list3):\n    '''\n    Write a function to merge three lists into a single sorted list\n    '''\n    i=0\n    j=0\n    k=0\n    m=[]\n    while i<len(list1) and j<len(list2) and k<len(list3):\n        if list1[i]<list2[j]:\n            if list1[i]<list3[k]:\n                m.append(list1[i])\n                i+=1\n            else:\n                m.append(list3[k])\n                k+=1\n        else:\n            if list2[j]<list3[k]:\n                m.append(list2[j])\n                j+=1\n            else:\n                m.append(list3[k])\n                k+=1\n    while i<len(list1):\n        m.append(list1[i])\n        i+=1\n    while j<len(list2):\n        m.append(list2[j])\n        j+=1\n    while k<len(list3):\n        m.append(list3[k])\n        k+=1\n    return m\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list\n    '''\n    m=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            if num1[i]<num3[k]:\n                m.append(num1[i])\n                i+=1\n            else:\n                m.append(num3[k])\n                k+=1\n        else:\n            if num2[j]<num3[k]:\n                m.append(num2[j])\n                j+=1\n            else:\n                m.append(num3[k])\n                k+=1\n    while i<len(num1):\n        m.append(num1[i])\n        i+=1\n    while j<len(num2):\n        m.append(num2[j])\n        j+=1\n    while k<len(num3):\n        m.append(num3[k])\n        k+=1\n    return m\ndef merge_sorted_list(list1,list2,list3):\n    '''\n    Write a function to merge three lists into a single sorted list\n    '''\n    m=[]\n    i=0\n    j=0\n    k=0\n    while i<len(list1) and j<len(list2) and k<len(list3):\n        if list1[i]<list2[j]:\n            if list1[i]<list3[k]:\n                m.append(list1[i])\n                i+=1\n            else:\n                m.append(list3[k])\n                k+=1\n        else:\n            if list2[j]<list3[k]:\n                m.append(list2[j])\n                j+=1\n            else:\n                m.append(list3[k])\n                k+=1\n    while i<len(list1):\n        m.append(list1[i])\n        i+=1\n    while j<len(list2):\n        m.append(list2[j])\n        j+=1\n    while k<len(list3):\n        m.append(list3[k])\n        k+=1\n    return m\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list\n    '''\n    m=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            if num1[i]<num3[k]:\n                m.append(num1[i])\n                i+=1\n            else:\n                m.append(num3[k])\n                k+=1\n        else:\n            if num2[j]<num3[k]:\n                m.append(num2[j])\n                j+=1\n            else:\n                m.append(num3[k])\n                k+=1\n    while i<len(num1):\n        m.append(num1[i])\n        i+=1\n    while j<len(num2):\n        m.append(num2[j])\n        j+=1\n    while k<len(num3):\n        m.append(num3[k])\n        k+=1\n    return m\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list\n    '''\n    m=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            if num1[i]<num3[k]:\n                m.append(num1[i])\n                i+=1\n            else:\n                m.append(num3[k])\n                k+=1\n        else:\n            if num2[j]<num3[k]:\n                m.append(num2[j])\n                j+=1\n            else:\n                m.append(num3[k])\n                k+=1\n    while i<len(num1):\n        m.append(num1[i])\n        i+=1\n    while j<len(num2):\n        m.append(num2[j])\n        j+=1\n    while k<len(num3):\n        m.append(num3[k])\n        k+=1\n    return m\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list\n    '''\n    m=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            if num1[i]<num3[k]:\n                m.append(num1[i])\n                i+=1\n            else:\n                m.append(num3[k])\n                k+=1\n        else:\n            if num2[j]<num3[k]:\n                m.append(num2[j])\n                j+=1\n            else:\n                m.append(num3[k])\n                k+="
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    l=len(num1)\n    m=len(num2)\n    n=len(num3)\n    i=0\n    j=0\n    k=0\n    while i<l and j<m and k<n:\n        if num1[i]<num2[j]:\n            if num2[j]<num3[k]:\n                list1.append(num1[i])\n                i=i+1\n            else:\n                list2.append(num2[j])\n                j=j+1\n        else:\n            if num1[i]<num3[k]:\n                list1.append(num1[i])\n                i=i+1\n            else:\n                list3.append(num3[k])\n                k=k+1\n    while i<l:\n        list1.append(num1[i])\n        i=i+1\n    while j<m:\n        list2.append(num2[j])\n        j=j+1\n    while k<n:\n        list3.append(num3[k])\n        k=k+1\n    list4=list1+list2+list3\n    return list4\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1 = [2, 3, 4, 7, 10]\n    num2 = [1, 5, 7, 12, 14]\n    num3 = [6, 8, 9, 11, 13, 15,16]\n    merged_list = merge_sort(num1,num2,num3)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    lst = []\n    for i in range(len(num1)):\n        lst.append(num1[i])\n    for i in range(len(num2)):\n        lst.append(num2[i])\n    for i in range(len(num3)):\n        lst.append(num3[i])\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n    print(num1 + num2 + num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return heapq.nsmallest(3,num1+num2+num3)\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    print(num1+num2+num3)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s[::-1]\n    t = (int(s,2) + n) % 2\n    s = bin(t)[2:]\n    return s[::-1]\ndef Even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    s = s[::-1]\n    t = (int(s,2) + n) % 2\n    s = bin(t)[2:]\n    return s[::-1]\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if (len(s) == 0):\n        return 0\n    else:\n        if (s[0] == '0'):\n            return even_Equivalent(s[1:],n)\n        else:\n            return odd_Equivalent(s[1:],n) + odd_Equivalent(s[1:],n) + 1\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n < 0:\n        return odd_Equivalent(s[::-1],n*-1)\n    if n == 0:\n        return 1 if s.count('1')%2==0 else 0\n    rotated_string = s[n:] + s[:n]\n    return len([x for x in rotated_string if x == '1'])%2\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s=='':\n        return 0\n    else:\n        if n%2==1:\n            return 2**len(s) - odd_Equivalent(s[1:],n-1)\n        else:\n            return odd_Equivalent(s[1:],n) + 2**(len(s)-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if (len(s)%2 == 0):\n            count += 1\n        s = reverse(s)\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def decimal_to_binary(n): \n        '''\n        Write a python function to convert an integer to binary\n        '''\n        return bin(n).replace(\"0b\",\"\")\n    def check_Even(n): \n        '''\n        Write a python function to check if the given number is even\n        '''\n        return n%2==0\n    def num_of_rotations(num): \n        '''\n        Write a python function to find the number of rotations in the decimal equivalent of a binary string.\n        '''\n        return int(num,2)\n    def binary_to_decimal(num): \n        '''\n        Write a python function to convert a binary number to its equivalent decimal number\n        '''\n        return int(num,2)\n    def binary_to_decimal_of_s(s,n): \n        '''\n        Write a python function to convert a binary number to its equivalent decimal number of a given binary string.\n        '''\n        res=0\n        for i in range(len(s)): \n            res=res+int(s[i])*pow(2,(len(s)-1-i))\n        return res\n    if check_Even(n): \n        if n==0: \n            return 1\n        return 2\n    s=decimal_to_binary(num_of_rotations(binary_to_decimal(s)))\n    if n==0: \n        return 2**len(s)\n    return (2**len(s))*odd_Equivalent(s,n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if not isinstance(s,str):\n        return None\n    if len(s) == 1:\n        if int(s) %2 == 0:\n            return 1\n        else:\n            return 0\n    for i in range(n):\n        s = s[1:] + s[0]\n    return odd_Equivalent(s,n)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if not s or len(s)==1:\n        return 0\n    if len(s) == 2:\n        return 1 if int(s[0])%2==1 else 0\n    else:\n        return (odd_Equivalent(s[1:],n) + (n%2 if int(s[0])%2==1 else 0))\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if len(s) == 1:\n        return 1\n    \n    temp = s[1:len(s)]\n    temp = s[0] + temp\n    \n    if (n%2) == 1:\n        return (odd_Equivalent(temp,n-1) + 1)\n    else:\n        return odd_Equivalent(temp,n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Consider each bit as a list element.\n    # Compute the number of times the bit will appear in the rotated list.\n    # Bit frequency counts are accumulated in a list.\n    bit_frequency = []\n    for bit in s:\n        bit_frequency.append(bit)\n    frequency_count = []\n    for bit in bit_frequency:\n        frequency_count.append(bit_frequency.count(bit))\n    '''\n    # This algorithm assumes that the string is not rotated.\n    # Find the index of the first occurrence of bit.\n    # Loop through all bits.\n    # If the bit's frequency count is odd, return the count of the first occurrence of bit.\n    '''\n    for bit in s:\n        if bit_frequency.count(bit) %2:\n            return frequency_count[s.find(bit)]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    common = []\n    for i in nestedlist[0]:\n        if all(i in nestedlist[j] for j in range(1, len(nestedlist))):\n            common.append(i)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_in_list(list):\n        common_list = []\n        for el in list:\n            if el not in common_list:\n                common_list.append(el)\n        return common_list\n    \n    def common_in_nested_lists(nestedlist):\n        if len(nestedlist) == 0:\n            return []\n        common = common_in_list(nestedlist[0])\n        for sublist in nestedlist:\n            common = common_in_list(common) & common_in_list(sublist)\n        return common\n    \n    return common_in_nested_lists(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist == []:\n        return []\n    elif len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        return (common_in_nested_lists(nestedlist[1:]) + \n            common_in_nested_lists(nestedlist[:-1]))\n    "
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    else:\n        return common_in_nested_lists(nestedlist[0]) + common_in_nested_lists(nestedlist[1:]) + find_common(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set.intersection(*(set(item) for item in nestedlist)))\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set.intersection(*map(set, nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set(nestedlist[0]).intersection(*nestedlist[1:])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = set()\n    for l in nestedlist:\n        res.update(set(l))\n    return res\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # declare list\n    intersection = []\n    # iterate over each list\n    for list_obj in nestedlist:\n        # iterate over each element\n        for element in list_obj:\n            # check if element is present in other list\n            if element in intersection:\n                # if element is present, append it to the intersection list\n                intersection.append(element)\n            # else, append it to the intersection list\n            else:\n                intersection.append(element)\n    # return intersection list\n    return intersection\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return int(text)\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    number = int(text)\n    if number == int(text):\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = True\n    for d in list1:\n        if d:\n            result = False\n    return result\n    \ndef almost_equal(list1, list2):\n    '''\n    Write a function to compare two lists and return true if the lists are equal or close to it.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in xrange(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic == {}:\n            return True\n    return False\n    "
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for each_dict in list1:\n        if len(each_dict) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True\n    \ndef sort_list(l):\n    '''\n    Write a function that takes a list as a parameter and returns a sorted version of that list.\n    '''\n    l2 = []\n    for item in l:\n        l2.append(item)\n    l2.sort()\n    return l2\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty=False\n    for d in list1:\n        if not d.items():\n            empty=True\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    newlist=[]\n    for each in list1:\n        if each!={}:\n            newlist.append(each)\n    if newlist==[]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] == {}:\n            list1.remove(list1[i])\n        else:\n            i+=1\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x,y: x*10+y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x,y:x*y,nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for x in nums:\n        num = num * 10 + x\n    return num\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(x) for x in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(lambda a,b : (a<<1)|b, nums)\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res = res * 10 + num\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    n = 0\n    for x in nums:\n        n = n * 10 + x\n    return n\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i = 0\n    for num in nums:\n        i += num\n    return i\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = nums[1:]\n    return sum(nums)\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        try:\n            result.append(float(i))\n        except:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for x, element in enumerate(row):\n            if isinstance(element, float):\n                continue\n            else:\n                row[x] = float(element)\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        try:\n            i = float(i)\n        except:\n            i = 0.0\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], float) or isinstance(test_list[i][j], int):\n                continue\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            try:\n                new_list.append(float(test_list[i][j]))\n            except:\n                pass\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(i) for i in row] for row in test_list]\n    \ndef init_coefficients(dic):\n    '''\n    Write a function to return a list of dicts, each with one entry for each attribute.\n    '''\n    new_dic = {}\n    for key, values in dic.items():\n        new_dic[key] = [0.0] * len(values)\n    return new_dic\n    \ndef scale_features(data_set, weights):\n    '''\n    Write a function that takes in a data set with numeric features, \n    a list of weights for each feature, and a list of list of values \n    for each feature and scales the features so that they are all greater than zero.\n    '''\n    new_data = []\n    for row in data_set:\n        new_row = []\n        for i in range(len(row)):\n            if row[i]!= 0:\n                new_row.append(weights[i] * row[i])\n            else:\n                new_row.append(0.0)\n        new_data.append(new_row)\n    return new_data\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [list(map(float,x)) for x in test_list]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_string = string.split()\n    return new_string\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n    return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    hashmap = {}\n    for i in range(len(arr)):\n        if arr[i] not in hashmap:\n            hashmap[arr[i]] = 1\n        else:\n            hashmap[arr[i]] += 1\n    for i in range(len(arr)):\n        if hashmap[arr[i]] == 1:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return arr[next((i for i, val in enumerate(arr[1:], 1) if val!= arr[i-1]), len(arr))]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    \n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x < pivot]\n    mid = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    \n    left = search(left)\n    right = search(right)\n    \n    if left == right:\n        return left\n    else:\n        return right\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0]!= arr[1]:\n        return arr[0]\n    else:\n        return search(arr[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in count:\n        if count[i] == 1:\n            return i\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==0:\n        return None\n    if len(arr)==1:\n        return arr[0]\n    mid=len(arr)//2\n    if arr[mid]==arr[mid-1]:\n        return search(arr[:mid])\n    elif arr[mid]==arr[mid+1]:\n        return search(arr[mid+1:])\n    else:\n        return arr[mid]\n    return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n    else:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return search(arr[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return arr[0] if arr[0]!= arr[1] else arr[1]\n    else:\n        mid = int(n / 2)\n        if arr[mid] == arr[mid - 1]:\n            return search(arr[:mid])\n        elif arr[mid] == arr[mid + 1]:\n            return search(arr[mid:])\n        else:\n            return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l = len(arr)\n    for i in range(l):\n        if arr[i]!=arr[arr[i]-1]:\n            arr[i], arr[arr[i]-1] = arr[arr[i]-1], arr[i]\n    for i in range(l):\n        if arr[i]!=i+1:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    assert type(list1) == list\n    assert len(list1) > 0\n    assert all([type(item) == tuple for item in list1])\n    assert all([len(item) == 2 for item in list1])\n    max_product = tuple(abs(x) * abs(y) for x,y in list1[0])\n    for pair in list1:\n        product = abs(pair[0]) * abs(pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n    \ndef max_product_tuple_3(list1):\n    '''\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    assert type(list1) == list\n    assert len(list1) > 0\n    assert all([type(item) == tuple for item in list1])\n    assert all([len(item) == 2 for item in list1])\n    max_product = tuple(abs(x) * abs(y) for x,y in list1[0])\n    for pair in list1:\n        if abs(pair[0]) * abs(pair[1]) > max_product[0] * max_product[1]:\n            max_product = abs(pair[0]) * abs(pair[1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for x in list1:\n        for y in list1:\n            if abs(x*y) > max:\n                max = abs(x*y)\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = list1.sort()\n    return(list1[-1] * list1[-2])\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    t1 = sorted(list1, key = lambda x: abs(x[0]*x[1]), reverse=True)\n    return t1[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    from functools import reduce\n    m_abs_max = None\n    for tup1, tup2 in zip(list1, list1[1:]):\n        if m_abs_max is None:\n            m_abs_max = abs(reduce((lambda x, y: x * y), tup1) * reduce((lambda x, y: x * y), tup2))\n        else:\n            m_abs_max = max(abs(reduce((lambda x, y: x * y), tup1) * reduce((lambda x, y: x * y), tup2)), m_abs_max)\n    return m_abs_max\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #we will use a list of tuples\n    #we will sort the list based on the absolute value of the difference between the 2 elements of the tuple\n    #and store the max absolute product\n    #we will return the max absolute product\n    #for each pair of tuples we will get the product between the 2 elements\n    #we will sort the list based on the absolute value of the difference between the 2 elements of the tuple\n    #and store the max absolute product\n    #we will return the max absolute product\n    #we will return the max absolute product\n    max_product = []\n    for i in range(0,len(list1)):\n        for j in range(i,len(list1)):\n            abs_diff = abs(list1[i][0]-list1[j][0]) + abs(list1[i][1]-list1[j][1])\n            max_product.append(abs_diff)\n    return max(max_product)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_list = []\n    for i in list1:\n        for j in list1:\n            if i!= j:\n                temp = i[0]*i[1]*j[1]\n                max_product_list.append(temp)\n    print max(max_product_list)\n    return max(max_product_list)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    lst = []\n    for i in range(0, len(list1), 2):\n        lst.append(list1[i][0] * list1[i][1] * list1[i+1][0] * list1[i+1][1])\n    return max(lst)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    import sys\n    max_product = -sys.maxsize\n    for (a, b) in list1:\n        max_product = max(max_product, abs(a * b))\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = list1[:]\n    list2.sort(key = lambda x: x[1])\n    res = []\n    #print (list2)\n    for i in range(len(list2)-1):\n        res.append((list2[i+1][0]-list2[i][1],list2[i+1][0]))\n    return res\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Declare the set to hold the divisors\n    divisor_set = set()\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(range(1, limit, 1))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    nums = set()\n    for x in range(1, limit + 1):\n        y = sum(list(divisors(x)))\n        if y!= x and sum(list(divisors(y))) == x:\n            nums.add(x)\n            nums.add(y)\n    return sum(nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_ = 0\n    for n in range(1, limit):\n        if is_amicable_number(n):\n            sum_ += n\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for x in range(1, limit):\n        y = sum(int(i) for i in str(x))\n        if x!= y and sum(int(i) for i in str(y)) == x:\n            amicable_numbers_sum += x\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for number in range(2, limit + 1):\n        if is_amicable(number) and is_amicable(sum(get_factors(number))):\n            amicable_numbers.append(number)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    answer = 0\n    amicable_list = []\n    for x in range(1, limit):\n        if x not in amicable_list:\n            amicable_list.append(x)\n    for x in amicable_list:\n        sum_of_divisors = 0\n        y = 0\n        while y < x:\n            if x % y == 0:\n                sum_of_divisors += y\n            y += 1\n        if x!= sum_of_divisors and x == sum_of_divisors:\n            answer += x\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for x in range(1, limit):\n        y = sum(divisors(x))\n        if x!= y and sum(divisors(y)) == x:\n            amicable_numbers_sum += x + y\n    return amicable_numbers_sum\n"
    }
]