[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    def intersect_elements(tup1, tup2):\n        '''\n        Write a function to find the shared elements from the given two lists.\n        '''\n        shared_list = [x for x in tup1 if x in tup2]\n        return shared_list\n    test_tup1 = test_tup1 + (0,)\n    test_tup2 = test_tup2 + (0,)\n    intersect_tup = intersect_elements(test_tup1, test_tup2)\n    return intersect_tup\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return similar_elements(test_tup2, test_tup1)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    shared_items = []\n    # print (test_tup1)\n    # print (test_tup2)\n    for i in range(0, len(test_tup1)):\n        for j in range(0, len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                shared_items.append(test_tup1[i])\n    \n    # print (shared_items)\n    return shared_items\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    '''\n    # SOLUTION\n    # how many items do we have to search for?\n    shared_items = 0\n    # the item_search_list will be a list of the items we have to search for\n    item_search_list = []\n    for item_search in test_tup1:\n        if item_search in test_tup2:\n            shared_items += 1\n            item_search_list.append(item_search)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    shared_elements = []\n    \n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    \n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    a = set(test_tup1)\n    b = set(test_tup2)\n    c = a.intersection(b)\n    return c\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    print test_tup1\n    print test_tup2\n    return [x for x in test_tup1 if x in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [i for i in test_tup1 for j in test_tup2 if i == j]\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for x in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, math.ceil(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #Checks if n is a prime number\n    if n > 1:\n        #Checks if n is a prime number\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for x in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % x == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n < 2:\n        return True\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n    for x in range(5, int(math.ceil(math.sqrt(n))), 6):\n        if n % x == 0 or n % (x + 2) == 0:\n            return False\n    return True\ndef primes(n):\n    '''\n    Write a python function to list all primes in the range [0, n].\n    '''\n    non_primes = [0, 2]\n    for x in range(3, n):\n        if is_not_prime(x):\n            non_primes.append(x)\n    return non_primes\ndef is_generating_function(a, b, n, p):\n    '''\n    Write a python function to find if n is a generating function of a \n    finite field of order p.\n    '''\n    if (n ** (p - 1)) % p == 1:\n        return True\n    return False\ndef generating_functions(n, p):\n    '''\n    Write a python function to list all generating functions of a finite field \n    of order p.\n    '''\n    generating_functions = []\n    if is_generating_function(1, 1, n, p):\n        generating_functions.append(1)\n    if is_generating_function(0, 1, n, p):\n        generating_functions.append(0)\n    if is_generating_function(1, 0, n, p):\n        generating_functions.append(1)\n    if is_generating_function(p, 0, n, p):\n        generating_functions.append(p)\n    return generating_functions\ndef is_euclidean_algorithm(a, b):\n    '''\n    Write a python function to calculate the GCD of a and b using Euclid's \n    algorithm.\n    '''\n    if b == 0:\n        return a\n    return is_euclidean_algorithm(b, a % b)\ndef gcd(a, b):\n    '''\n    Write a python function to calculate the GCD of a and b using Euclid's \n    algorithm.\n    '''\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef euclid_algorithm(a, b):\n    '''\n    Write a python function to calculate the GCD of a and b using Euclid's \n    algorithm.\n    '''\n    if b == 0:\n        return a, 1, 0\n    x, y, r = euclid_algorithm(b, a % b)\n    return y, x - (a // b) * y, r\ndef euclid_algorithm_gcd(a, b):\n    '''\n    Write a python function to calculate the GCD of a and b using Euclid's \n    algorithm.\n    '''\n    if b == 0:\n        return a, 1, 0\n    x, y, r = euclid_algorithm_gcd(b, a % b)\n    return y, x - (a // b) * y, r\ndef extended_euclidean_algorithm(a, b):\n    '''\n    Write a python function to calculate the GCD of a and b using Extended \n    Euclid's algorithm.\n    '''\n    if b == 0:\n        return a, 1, 0\n    x, y, r = extended_euclidean_algorithm(b, a % b)\n    return y, x - (a // b) * y, r\ndef extended_euclid_algorithm_gcd(a, b):\n    '''\n    Write a python function to calculate the GCD of a and b using Extended \n    Euclid's algorithm.\n    '''\n    if b == 0:\n        return a, 1, 0\n    x, y, r = extended_euclid_algorithm_gcd(b, a % b)\n    return y, x - (a // b) * y, r\ndef euclid_algorithm_in_GF(a, b, p, n):\n    '''\n    Write a python function to calculate the GCD of a and b using Extended \n    Euclid's algorithm.\n    '''\n    if b == 0:\n        return a, 1, 0\n    x, y, r = euclid_algorithm_in_GF(b, a % b, p, n)\n    return y, x - (a // b) * y, r\ndef extended_euclid_algorithm_in_GF(a, b, p, n):\n    '''\n    Write a python function to calculate the GCD of a and b using Extended \n    Euclid's algorithm.\n    '''\n    if b == 0:\n        return a, 1, 0\n    x, y, r = extended_euclid_algorithm_in_GF(b, a % b, p, n)\n    return y, x - (a // b) * y, r\ndef is_perfect_square(n):\n    '''\n    Write a python function to find if n is a perfect square using math.sqrt.\n    '''\n    if n <= 0:\n        return False\n    return int(math.sqrt(n)) ** 2 == n\ndef is_factor(n, f):\n    '''\n    Write a python function to find if n is a factor of f using math.sqrt.\n    '''\n    if is_perfect_square(f):\n        if f ** 2 == n:\n            return True\n        if f ** 2 < n:\n            return True\n    if is_perfect_square(n / f):\n        return True\n    return False\ndef prime_factors(n):\n    '''\n    Write a python function to calculate all prime factors of n.\n    '''\n    factors = []\n    if is_perfect_square(n):\n        factors.append(n)\n    x = math.sqrt(n)\n    if is_perfect_square(x):\n        factors.append(x)\n    else:\n        x = n / x\n        while not is_perfect_square(x):\n            if is_factor(n, x):\n                factors.append(x)\n            x = n / x\n    return factors\ndef is_generating_function_in_GF(a, b, p, n):\n    '''\n    Write a python function to find if n is a generating function of a finite \n    field GF(p).\n    '''\n    if not is_generating_function(a, b, n, p):\n        return False\n    if is_perfect_square(n):\n        if is_factor(n, p):\n            return True\n        return False\n    if is_factor(n, p):\n        return False\n    return is_generating_function_in_GF(a, b, p, n / p)\ndef is_generating_function_in_GF_2(a, b, p, n):\n    '''\n    Write a python function to find if n is a generating function of a finite \n    field GF(p).\n    '''\n    if not is_generating_function(a, b, n, p):\n        return False\n    if is_perfect_square(n):\n        if is_factor(n, p):\n            return True\n        return False\n    if is_factor(n, p):\n        return False\n    return is_generating_function_in_GF_2(a, b, p, n / p)\ndef is_generating_function_in_GF_3(a, b, p, n):\n    '''\n    Write a python function to find if n is a generating function of a finite \n    field GF(p).\n    '''\n    if not is_generating_function(a, b, n, p):\n        return False\n    if is_perfect_square(n):\n        if is_factor(n, p):\n            return True\n        return False\n    if is_factor(n, p):\n        return False\n    return is_generating_function_in_GF_3(a, b, p, n / p)\nde"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    for x in range(5, math.ceil(math.sqrt(n))):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return True\n    return False\ndef sum_digit_counts(n):\n    '''\n    Write a python function to count the sum of digits in a number.\n    '''\n    if n<=0:\n        return 0\n    return n%10+sum_digit_counts(n/10)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n<=0:\n        return 1\n    return n*factorial(n-1)\ndef sum_digits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    if n<=0:\n        return 0\n    return n%10+sum_digits(n/10)\ndef is_equal(a,b):\n    '''\n    Write a python function to determine whether two numbers are equal or not.\n    '''\n    return a==b\ndef is_even(n):\n    '''\n    Write a python function to determine if a given number is even or not.\n    '''\n    return n%2==0\ndef is_odd(n):\n    '''\n    Write a python function to determine if a given number is odd or not.\n    '''\n    return n%2!=0\ndef power(a,n):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    return a**n\ndef is_prime(n):\n    '''\n    Write a python function to determine whether a given number is prime or not.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\ndef is_perfect(n):\n    '''\n    Write a python function to determine whether a given number is perfect or not.\n    '''\n    l=list()\n    for i in range(1,n):\n        if n%i==0:\n            l.append(i)\n    if sum(l)==n:\n        return True\n    return False\ndef is_armstrong(n):\n    '''\n    Write a python function to determine whether a given number is an armstrong number or not.\n    '''\n    s=0\n    while n:\n        s+=n%10*n%10\n        n/=10\n    return s==n\ndef is_abundant(n):\n    '''\n    Write a python function to determine whether a given number is abundant or not.\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s+=i\n    return s>n\ndef is_abundant_sum(n):\n    '''\n    Write a python function to determine whether a given number is a sum of two abundant numbers or not.\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s+=i\n    if is_abundant(s) and is_abundant(n-s):\n        return True\n    return False\ndef is_abundant_sum_non_sorted(n):\n    '''\n    Write a python function to determine whether a given number is a sum of two abundant numbers or not.\n    '''\n    s=set()\n    for i in range(1,n):\n        if n%i==0:\n            s.add(i)\n    for i in range(1,n):\n        if i in s:\n            continue\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\ndef is_abundant_sum_non_sorted_optimized(n):\n    '''\n    Write a python function to determine whether a given number is a sum of two abundant numbers or not.\n    '''\n    s=set()\n    for i in range(1,n):\n        if n%i==0:\n            s.add(i)\n    for i in range(1,n):\n        if i in s:\n            continue\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\ndef is_abundant_sum_non_sorted_optimized2(n):\n    '''\n    Write a python function to determine whether a given number is a sum of two abundant numbers or not.\n    '''\n    s=list()\n    for i in range(1,n):\n        if n%i==0:\n            s.append(i)\n    for i in s:\n        for j in s:\n            if i==j:\n                continue\n            if is_abundant(i) and is_abundant(n-i-j):\n                return True\n    return False\ndef is_abundant_sum_non_sorted_optimized3(n):\n    '''\n    Write a python function to determine whether a given number is a sum of two abundant numbers or not.\n    '''\n    s=list()\n    for i in range(1,n):\n        if n%i==0:\n            s.append(i)\n    for i in s:\n        for j in s:\n            if i==j:\n                continue\n            if is_abundant(i) and is_abundant(n-i-j):\n                return True\n    return False\ndef is_abundant_sum_non_sorted_optimized4(n):\n    '''\n    Write a python function to determine whether a given number is a sum of two abundant numbers or not.\n    '''\n    s=list()\n    for i in range(1,n):\n        if n%i==0:\n            s.append(i)\n    for i in s:\n        for j in s:\n            if i==j:\n                continue\n            if is_abundant(i) and is_abundant(n-i-j):\n                return True\n    return False\ndef is_abundant_sum_non_sorted_optimized5(n):\n    '''\n    Write a python function to determine whether a given number is a sum of two abundant numbers or not.\n    '''\n    s=list()\n    for i in range(1,n):\n        if n%i==0:\n            s.append(i)\n    for i in s:\n        for j in s:\n            if i==j:\n                continue\n            if is_abundant(i) and is_abundant(n-i-j):\n                return True\n    return False\ndef is_abundant_sum_non_sorted_optimized6(n):\n    '''\n    Write a python function to determine whether a given number is a sum of two abundant numbers or not.\n    '''\n    s=list()\n    for i in range(1,n):\n        if n%i==0:\n            s.append(i)\n    for i in s:\n        for j in s:\n            if i==j:\n                continue\n            if is_abundant(i) and is_abundant(n-i-j):\n                return True\n    return False\ndef is_abundant_sum_non_sorted_optimized7(n):\n    '''\n    Write a python function to determine whether a given number is a sum of two abundant numbers or not.\n    '''\n    s=list()\n    for i in range(1,n):\n        if n%i==0:\n            s.append(i)\n    for i in s:\n        for j in s:\n            if i==j:\n                continue\n            if is_abundant(i) and is_abundant(n-i-j):\n                return True\n    return False\ndef is_abundant_sum_non_sorted_optimized8(n):\n    '''\n    Write a python function to determine whether a given number is a sum of two abundant numbers or not.\n    '''\n    s=list()\n    for i in range(1,n):\n        if n%i==0:\n            s.append(i)\n    for i in s:\n        for j in s:\n        "
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    return h\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    return h\ndef heap_queue_smallest_n(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        print(hq.heappop(h))\n    return h\ndef heap_queue_largest_n(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        print(hq.heappop(h))\n    return h\ndef heap_queue_n(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        print(hq.heappop(h))\n    return h\ndef heap_queue_n_2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_3(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_4(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_5(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_6(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_7(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_8(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_9(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_10(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_11(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_12(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_13(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_14(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_15(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    while len(h) > 0:\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef heap_queue_n_16(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for i in nums:\n        hq.heappush(h,-1*i)\n    res=[]\n    for i in range(n):\n        res.append(-1*hq.heappop(h))\n    return res\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h=[]\n    for i in nums:\n        hq.heappush(h,i)\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(h))\n    return res\ndef heap_pop_max(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the max value.\n    '''\n    h=[]\n    for i in nums:\n        hq.heappush(h,-1*i)\n    return -1*hq.heappop(h)\ndef heap_pop_min(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the min value.\n    '''\n    h=[]\n    for i in nums:\n        hq.heappush(h,i)\n    return hq.heappop(h)\ndef heap_delete(h,val):\n    '''\n    Write a function that takes in a heap and a value, and returns a new heap with the value removed.\n    '''\n    l=[]\n    for i in h:\n        if i!=val:\n            l.append(i)\n    return l\ndef heap_push_max(h,val):\n    '''\n    Write a function that takes in a heap and a value, and inserts the value into the heap.\n    '''\n    hq.heappush(h,-1*val)\ndef heap_push_min(h,val):\n    '''\n    Write a function that takes in a heap and a value, and inserts the value into the heap.\n    '''\n    hq.heappush(h,val)\ndef heap_top_max(h):\n    '''\n    Write a function that takes in a heap and returns the max value.\n    '''\n    return -1*hq.heappop(h)\ndef heap_top_min(h):\n    '''\n    Write a function that takes in a heap and returns the min value.\n    '''\n    return hq.heappop(h)\ndef heap_del_max(h):\n    '''\n    Write a function that takes in a heap and removes the max value.\n    '''\n    hq.heappop(h)\n    hq.heapify(h)\ndef heap_del_min(h):\n    '''\n    Write a function that takes in a heap and removes the min value.\n    '''\n    hq.heappop(h)\n    hq.heapify(h)\ndef heap_build(h,l):\n    '''\n    Write a function that takes in a heap and a list of values, and inserts the values into the heap.\n    '''\n    for i in l:\n        hq.heappush(h,-1*i)\ndef heap_sort(l):\n    '''\n    Write a function that takes in a list of numbers and sorts them in ascending order.\n    '''\n    return sorted(l)\ndef heap_sort_reverse(l):\n    '''\n    Write a function that takes in a list of numbers and sorts them in descending order.\n    '''\n    return sorted(l,reverse=True)\ndef heap_get_max(h):\n    '''\n    Write a function that takes in a heap and returns the max value.\n    '''\n    return -1*hq.heappop(h)\ndef heap_get_min(h):\n    '''\n    Write a function that takes in a heap and returns the min value.\n    '''\n    return hq.heappop(h)\ndef heap_build_max(h,l):\n    '''\n    Write a function that takes in a heap and a list of values, and inserts the values into the heap.\n    '''\n    for i in l:\n        hq.heappush(h,i)\ndef heap_build_min(h,l):\n    '''\n    Write a function that takes in a heap and a list of values, and inserts the values into the heap.\n    '''\n    for i in l:\n        hq.heappush(h,-1*i)\ndef heap_build_max_min(h,l):\n    '''\n    Write a function that takes in a heap and a list of values, and inserts the values into the heap.\n    '''\n    for i in l:\n        hq.heappush(h,max(-1*i,i))\ndef heap_build_min_max(h,l):\n    '''\n    Write a function that takes in a heap and a list of values, and inserts the values into the heap.\n    '''\n    for i in l:\n        hq.heappush(h,-1*i)\ndef heap_remove(h,val):\n    '''\n    Write a function that takes in a heap and a value, and removes the value from the heap.\n    '''\n    hq.heappop(h)\n    hq.heapify(h)\ndef heap_extract_max(h):\n    '''\n    Write a function that takes in a heap and removes the max value.\n    '''\n    return -1*hq.heappop(h)\ndef heap_extract_min(h):\n    '''\n    Write a function that takes in a heap and removes the min value.\n    '''\n    return hq.heappop(h)\ndef heap_top(h):\n    '''\n    Write a function that takes in a heap and returns the max value.\n    '''\n    return -1*hq.heappop(h)\ndef heap_top_min(h):\n    '''\n    Write a function that takes in a heap and returns the min value.\n    '''\n    return hq.heappop(h)\ndef heap_pop(h):\n    '''\n    Write a function that takes in a heap and removes the min value.\n    '''\n    return hq.heappop(h)\ndef heap_pop_min(h):\n    '''\n    Write a function that takes in a heap and removes the max value.\n    '''\n    return hq.heappop(h)\ndef heap_extract(h,val):\n    '''\n    Write a function that takes in a heap and a value, and removes the value from the heap.\n    '''\n    hq.heappop(h)\n    hq.heapify(h)\ndef heapsort(l):\n    '''\n    Write a function that takes in a list of numbers and sorts them in ascending order.\n    '''\n    return sorted(l)\ndef heapsort_reverse(l):\n    '''\n    Write a function that takes in a list of numbers and sorts them in descending order.\n    '''\n    return sorted(l,reverse=True)\ndef heapsort_max(l):\n    '''\n    Write a function that takes in a list of numbers and sorts them in ascending order.\n    '''\n    h=[]\n    for i in l:\n        hq.heappush(h,-1*i)\n    return sorted(h,-1*h)\ndef heapsort_min(l):\n    '''\n    Write a function that takes in a list of numbers and sorts them in descending order.\n    '''\n    h=[]\n    for i in l:\n        hq.heappush(h,i)\n    return sorted(h)\ndef heapsort_max_min(l):\n    '''\n    Write a function that takes in a list of numbers and sorts them in descending order.\n    '''\n    h=[]\n    for i in l:\n        hq.heappush(h,max(-1*i,i))\n    return sorted(h,-1*h)\ndef heapsort_min_max(l):\n    '''\n    Write a function that takes in a list of numbers and sorts them in descending order.\n    '''\n    h=["
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return [hq.heappop(nums) for i in range(n)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    return [hq.heappop(nums) for i in range(n)]\ndef heapsort(nums):\n    '''\n    Write a function to sort a list of numbers in ascending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(len(nums))]\ndef max_heap_insert(nums,n):\n    '''\n    Write a function to insert a new node into the max-heap.\n    '''\n    if len(nums) < n:\n        nums.append(-1)\n    for i in range(len(nums)-1,-1,-1):\n        if nums[i] > nums[(i-1)//2]:\n            nums[i],nums[(i-1)//2] = nums[(i-1)//2],nums[i]\n            i = (i-1)//2\n        else:\n            break\ndef min_heap_insert(nums,n):\n    '''\n    Write a function to insert a new node into the min-heap.\n    '''\n    if len(nums) < n:\n        nums.append(-1)\n    for i in range(len(nums)-1,-1,-1):\n        if nums[i] < nums[(i-1)//2]:\n            nums[i],nums[(i-1)//2] = nums[(i-1)//2],nums[i]\n            i = (i-1)//2\n        else:\n            break\ndef max_heap_extract(nums):\n    '''\n    Write a function to remove the max node from the max-heap.\n    '''\n    if len(nums) > 0:\n        nums[0] = nums[len(nums)-1]\n        nums.pop()\n        max_heapify(nums)\ndef min_heap_extract(nums):\n    '''\n    Write a function to remove the min node from the min-heap.\n    '''\n    if len(nums) > 0:\n        nums[0] = nums[len(nums)-1]\n        nums.pop()\n        min_heapify(nums)\ndef max_heap_increase_key(nums,i,key):\n    '''\n    Write a function to increase the value of a given key in the max-heap.\n    '''\n    if nums[i] > key:\n        nums[i] = key\n        while i!= 0 and nums[(i-1)//2] < nums[i]:\n            nums[i],nums[(i-1)//2] = nums[(i-1)//2],nums[i]\n            i = (i-1)//2\ndef min_heap_increase_key(nums,i,key):\n    '''\n    Write a function to increase the value of a given key in the min-heap.\n    '''\n    if nums[i] < key:\n        nums[i] = key\n        while i!= 0 and nums[(i-1)//2] > nums[i]:\n            nums[i],nums[(i-1)//2] = nums[(i-1)//2],nums[i]\n            i = (i-1)//2\ndef max_heap_decrease_key(nums,i,key):\n    '''\n    Write a function to decrease the value of a given key in the max-heap.\n    '''\n    if nums[i] > key:\n        nums[i] = key\n        while i!= 0 and nums[(i-1)//2] > nums[i]:\n            nums[i],nums[(i-1)//2] = nums[(i-1)//2],nums[i]\n            i = (i-1)//2\ndef min_heap_decrease_key(nums,i,key):\n    '''\n    Write a function to decrease the value of a given key in the min-heap.\n    '''\n    if nums[i] < key:\n        nums[i] = key\n        while i!= 0 and nums[(i-1)//2] < nums[i]:\n            nums[i],nums[(i-1)//2] = nums[(i-1)//2],nums[i]\n            i = (i-1)//2\ndef max_heap_delete(nums,i):\n    '''\n    Write a function to delete a node from the max-heap.\n    '''\n    if len(nums) == 1:\n        return\n    nums[i] = nums[len(nums)-1]\n    nums.pop()\n    if i == len(nums):\n        return\n    nums[i] = -1\n    max_heapify(nums,i)\ndef min_heap_delete(nums,i):\n    '''\n    Write a function to delete a node from the min-heap.\n    '''\n    if len(nums) == 1:\n        return\n    nums[i] = nums[len(nums)-1]\n    nums.pop()\n    if i == len(nums):\n        return\n    nums[i] = -1\n    min_heapify(nums,i)\ndef max_heapify(nums,i):\n    '''\n    Write a function to turn a list into a max-heap.\n    '''\n    l = 2*i+1\n    r = 2*i+2\n    if l < len(nums) and nums[l] > nums[i]:\n        largest = l\n    else:\n        largest = i\n    if r < len(nums) and nums[r] > nums[largest]:\n        largest = r\n    if largest!= i:\n        nums[i],nums[largest] = nums[largest],nums[i]\n        max_heapify(nums,largest)\ndef min_heapify(nums,i):\n    '''\n    Write a function to turn a list into a min-heap.\n    '''\n    l = 2*i+1\n    r = 2*i+2\n    if l < len(nums) and nums[l] < nums[i]:\n        smallest = l\n    else:\n        smallest = i\n    if r < len(nums) and nums[r] < nums[smallest]:\n        smallest = r\n    if smallest!= i:\n        nums[i],nums[smallest] = nums[smallest],nums[i]\n        min_heapify(nums,smallest)\ndef max_heap_build(nums):\n    '''\n    Write a function to build a max-heap from a given list of numbers.\n    '''\n    for i in range(len(nums)//2-1,-1,-1):\n        max_heapify(nums,i)\ndef min_heap_build(nums):\n    '''\n    Write a function to build a min-heap from a given list of numbers.\n    '''\n    for i in range(len(nums)//2-1,-1,-1):\n        min_heapify(nums,i)\ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the max-heap.\n    '''\n    max_heap_build(nums)\n    return nums[0:len(nums)-1]\ndef heap_sort_reverse(nums):\n    '''\n    Write a function to sort a list of numbers using the min-heap.\n    '''\n    min_heap_build(nums)\n    return nums[0:len"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0:\n        return []\n    if n>=len(nums):\n        return nums\n    #hq.nlargest(n,nums)\n    #return hq.nlargest(n,nums)\n    l=[-1*(nums[i]) for i in range(n)]\n    hq.heapify(l)\n    for i in range(len(nums)):\n        l[0]-=nums[i]\n        hq.heapreplace(l,l[0])\n    res=[-1*i for i in l]\n    return res\ndef find_min_in_sorted_matrix(m,n,l):\n    '''\n    Given a matrix, mxn, where m and n are the size of the matrix and l is the list of coordinates of a matrix element,\n    write a function that returns the element of the matrix with given l as the coordinate\n    '''\n    for i in range(len(m)):\n        if m[i][n]==l:\n            return m[i]\ndef sorted_matrix_search(m,l):\n    '''\n    Given a matrix, mxn, where m and n are the size of the matrix and l is the list of coordinates of a matrix element,\n    write a function that returns the element of the matrix with given l as the coordinate\n    '''\n    for i in range(len(m)):\n        if m[i][l[1]]==l[0]:\n            return m[i][l[2]]\ndef get_maximum_difference_in_two_sorted_array(a,b):\n    '''\n    Given two sorted arrays, write a function to find the maximum difference between the elements\n    '''\n    i=0\n    j=0\n    maxdiff=0\n    while i<len(a) and j<len(b):\n        maxdiff=max(maxdiff,abs(a[i]-b[j]))\n        if a[i]<b[j]:\n            i+=1\n        else:\n            j+=1\n    return maxdiff\ndef get_maximum_difference_in_two_sorted_array_by_comparisons(a,b):\n    '''\n    Given two sorted arrays, write a function to find the maximum difference between the elements\n    '''\n    i=0\n    j=0\n    maxdiff=0\n    while i<len(a) and j<len(b):\n        maxdiff=max(maxdiff,abs(a[i]-b[j]))\n        if a[i]<b[j]:\n            i+=1\n        else:\n            j+=1\n    return maxdiff\ndef largest_contiguous_subarray_with_given_sum_using_divide_and_conquer(arr,s):\n    '''\n    Given an array of positive integers and a sum, find if there is a subarray in the array with sum equal to the given sum\n    '''\n    if len(arr)==0:\n        return False\n    if len(arr)==1:\n        return arr[0]==s\n    if s==0:\n        return True\n    if len(arr)==1:\n        return arr[0]==s\n    if len(arr)==2:\n        return arr[0]==s or arr[1]==s\n    i=0\n    while i<len(arr):\n        if arr[i]<=s:\n            if get_sum_of_subarray(arr,i,s)==s:\n                return True\n        i+=1\n    return False\ndef get_sum_of_subarray(arr,start,end):\n    '''\n    Write a function to find the sum of a subarray with the given start and end indices\n    '''\n    res=0\n    for i in range(start,end+1):\n        res+=arr[i]\n    return res\ndef find_max_subarray(arr,start,end):\n    '''\n    Write a function to find the maximum subarray sum and the subarray itself.\n    '''\n    if start>=end:\n        return arr[start],arr[start]\n    if start==end:\n        return arr[start],arr[start]\n    if start+1==end:\n        return arr[start],arr[end]\n    mid=(start+end)//2\n    a1,b1=find_max_subarray(arr,start,mid)\n    a2,b2=find_max_subarray(arr,mid+1,end)\n    c1=get_max_crossing_subarray_sum(arr,start,mid,end)\n    c2=get_max_crossing_subarray_sum(arr,mid+1,end+1,end)\n    c3=get_max_crossing_subarray_sum(arr,start,mid,end)\n    c4=get_max_crossing_subarray_sum(arr,mid+1,end+1,end)\n    if a1>=a2 and b1>=b2:\n        return a1,b1\n    elif a2>=a1 and b2>=b1:\n        return a2,b2\n    elif c1>=c2 and c3>=c4:\n        return c1,c3\n    elif c2>=c1 and c4>=c3:\n        return c2,c4\n    else:\n        return c3,c2\ndef get_max_crossing_subarray_sum(arr,start,mid,end):\n    '''\n    Write a function to find the maximum subarray sum and the subarray itself.\n    '''\n    s=mid\n    max1=arr[s]\n    res=arr[s]\n    for i in range(mid,start-1,-1):\n        res=max(res,arr[i]+res)\n        max1=max(max1,arr[i])\n    s=mid+1\n    max2=arr[s]\n    res=arr[s]\n    for i in range(mid+1,end+1):\n        res=max(res,arr[i]+res)\n        max2=max(max2,arr[i])\n    return max(max1,max2,res)\ndef k_largest_element_using_heap(arr,k):\n    '''\n    Write a function to find the k largest elements in an array\n    '''\n    h=[]\n    for i in range(k):\n        hq.heappush(h,arr[i])\n    for i in range(k,len(arr)):\n        if arr[i]>h[0]:\n            hq.heappop(h)\n            hq.heappush(h,arr[i])\n    return h\ndef k_largest_element_using_sort(arr,k):\n    '''\n    Write a function to find the k largest elements in an array\n    '''\n    arr.sort(reverse=True)\n    return arr[0:k]\ndef count_k_smallest_in_a_sorted_matrix(m,n,k):\n    '''\n    Given a matrix, mxn, where m and n are the size of the matrix and k is the number of smallest elements required,\n    write a function to return the indices of the k smallest elements in the matrix\n    '''\n    if k==0:\n        return []\n    i=0\n    while i<n:\n        j=0\n        while j<m:\n            if m[j][i]<k:\n                return [j,i]\n            j+=1\n        i+=1\ndef find_k_smallest_in_a_sorted_matrix(m,n,k):\n    '''\n    Given a matrix, mxn, where m and n are the size of the matrix and k is the number of smallest elements required,\n    write a function to return the indices of the k smallest elements in the matrix\n    '''\n    if k==0:\n        return []\n    i=0\n    while i<n:\n        j=0\n        while j<m:\n            if m[j][i]<k:\n                return [j,i]\n            j+=1\n        i+=1\ndef next_greater_element_in_a_sorted_array(arr,n):\n    '''\n    Write a function to find the next greate"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n>len(nums):\n        return []\n    hq = []\n    for num in nums:\n        hq.append((-num,num))\n    if len(hq) < n:\n        return []\n    ans = []\n    while len(ans) < n:\n        ans.append(hq[0][1])\n        hq[0] = hq[-1]\n        hq.pop()\n        hq.sort()\n    return ans\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n>len(nums):\n        return []\n    hq = []\n    for num in nums:\n        hq.append((num,num))\n    if len(hq) < n:\n        return []\n    ans = []\n    while len(ans) < n:\n        ans.append(hq[0][1])\n        hq[0] = hq[-1]\n        hq.pop()\n        hq.sort()\n    return ans\ndef heap_queue_kth(nums,k):\n    '''\n    Write a function to find the kth smallest integer from a given list of numbers, returned in ascending order.\n    '''\n    if k<1 or k>len(nums):\n        return []\n    hq = []\n    for num in nums:\n        hq.append((num,num))\n    if len(hq) < k:\n        return []\n    ans = []\n    while len(ans) < k:\n        ans.append(hq[0][1])\n        hq[0] = hq[-1]\n        hq.pop()\n        hq.sort()\n    return ans\ndef heap_queue_insert(nums,num):\n    '''\n    Write a function to insert a value into a heap. It should maintain the heap invariant.\n    '''\n    if num in nums:\n        return\n    if len(nums) == 0:\n        nums.append(num)\n        return\n    hq = []\n    for i in range(len(nums)):\n        if num > nums[i]:\n            hq.append((num,num))\n        else:\n            hq.append((nums[i],nums[i]))\n    hq.append((num,num))\n    nums = hq\ndef heap_queue_delete(nums,num):\n    '''\n    Write a function to delete a value from a heap. It should maintain the heap invariant.\n    '''\n    if num not in nums:\n        return\n    hq = []\n    for i in range(len(nums)):\n        if nums[i]!= num:\n            hq.append((nums[i],nums[i]))\n        else:\n            hq.append((num,num))\n    nums = hq\ndef heapsort(nums):\n    '''\n    Write a function to sort an array in ascending order.\n    '''\n    hq = []\n    for num in nums:\n        hq.append((num,num))\n    nums = hq\ndef heapsort_rev(nums):\n    '''\n    Write a function to sort an array in descending order.\n    '''\n    hq = []\n    for num in nums:\n        hq.append((num,num))\n    nums = hq\n    nums.reverse()\ndef heapsort_recursive(nums):\n    '''\n    Write a function to sort an array in ascending order.\n    '''\n    if len(nums) == 1:\n        return\n    n = len(nums)//2\n    heapsort_recursive(nums[0:n])\n    heapsort_recursive(nums[n:])\n    nums.reverse()\ndef heap_sort(nums):\n    '''\n    Write a function to sort an array in ascending order.\n    '''\n    hq = []\n    for num in nums:\n        hq.append((num,num))\n    nums = hq\n    while len(nums)!= 1:\n        n = len(nums)//2\n        nums = sorted(nums[0:n]) + sorted(nums[n:])\n    return nums[0][1]\ndef binary_search(arr,val):\n    '''\n    Write a function to search a given target value in an array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if val == arr[-1]:\n        return len(arr)-1\n    low = 0\n    high = len(arr) - 1\n    while high >= low:\n        mid = (low + high)//2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\ndef count_bits(n):\n    '''\n    Write a function that takes an unsigned integer and returns the number of \u20191' bits it has (also known as the Hamming weight).\n    '''\n    res = 0\n    while n:\n        res += n&1\n        n >>= 1\n    return res\ndef minimum_distance(a):\n    '''\n    Write a function to find the minimum distance between two integers in an array.\n    '''\n    res = len(a)\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] > a[j]:\n                res = min(res,a[i] - a[j])\n    return res\ndef longest_strange_substr(arr):\n    '''\n    Write a function to find the longest substr of unique letters in a given string.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            flag = True\n            for k in range(len(arr[i])):\n                if arr[i][k]!= arr[j][k]:\n                    flag = False\n                    break\n            if flag:\n                res = max(res,j-i+1)\n    return res\ndef count_palindrome(string):\n    '''\n    Write a function to count the number of palindromic substrings.\n    A string is called a palindrome if it reads the same from front and back.\n    '''\n    res = 0\n    for i in range(len(string)):\n        for j in range(i+1,len(string)):\n            flag = True\n            for k in range(len(string[i])):\n                if string[i][k]!= string[j][len(string[i])-k-1]:\n                    flag = False\n                    break\n            if flag:\n                res += 1\n    return res\ndef fibonacci(n):\n    '''\n    Write a function that returns the nth fibonacci number, where n is an integer.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    res = [0,1]\n    for i in range(2,n+1):\n        res.append(res[-1] + res[-2])\n    return res[-1]\ndef fibonacci_dp(n):\n    '''\n    Write a function that returns the nth fibonacci number, where n is an integer.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    arr = [0 for i in range(n+1)]\n    arr[0] = 0\n    arr[1] = 1\n    for i in range(2,n+1):\n        arr[i] = arr[i-1] + arr[i-2]\n    return arr[n]\ndef bfs(adj,n):\n    '''\n    Write a function that takes in a binary tree and finds the maximum depth.\n    '''\n    res = 0\n    q = []\n    for i in range(n):\n        q.append(i)\n    while len(q)!= 0:\n        res += 1\n        l = len"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append((-nums[i],i))\n    hq.sort()\n    l = []\n    for i in range(n):\n        l.append(nums[hq[i][1]])\n    return l\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append((nums[i],i))\n    hq.sort()\n    l = []\n    for i in range(n):\n        l.append(nums[hq[i][1]])\n    return l\ndef max_profit_interval(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] > arr[i-1]:\n            max_profit += arr[i] - arr[i-1]\n    return max_profit\ndef max_profit_interval_2(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    min_price = arr[0]\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit\ndef max_profit_interval_3(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    min_price = arr[0]\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit\ndef max_profit_interval_4(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    min_price = arr[0]\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit\ndef max_profit_interval_5(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    min_price = arr[0]\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit\ndef max_profit_interval_6(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    min_price = arr[0]\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit\ndef max_profit_interval_7(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    min_price = arr[0]\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit\ndef max_profit_interval_8(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    min_price = arr[0]\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit\ndef max_profit_interval_9(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    min_price = arr[0]\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit\ndef max_profit_interval_10(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    min_price = arr[0]\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit\ndef max_profit_interval_11(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    min_price = arr[0]\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit\ndef max_profit_interval_12(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    min_price = arr[0]\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit\ndef max_profit_interval_13(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made by buying and selling a stock on that interval\n    '''\n    min_price = arr[0]\n    max_profit = 0\n    for i in range(1,len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit\ndef max_profit_interval_14(arr):\n    '''\n    For a given interval [l,r] find the maximum profit that can be made b"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 0:\n        return []\n    h=[]\n    for i in nums:\n        hq.heappush(h,-1*i)\n    for i in range(n):\n        hq.heappop(h)\n    return [-1*x for x in h]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # h = []\n    # for i in nums:\n    #     h.append((-i,i))\n    # while len(h) > n:\n    #     h.pop()\n    # return [i for f,i in h]\n    return sorted(nums,reverse=True)[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0:\n        return []\n    heap=[]\n    for i in range(len(nums)):\n        if len(heap)<n:\n            hq.heappush(heap,nums[i])\n        else:\n            if nums[i]>heap[0]:\n                hq.heappush(heap,nums[i])\n                hq.heappop(heap)\n    return heap\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n==0:\n        return []\n    heap=[]\n    for i in range(len(nums)):\n        if len(heap)<n:\n            hq.heappush(heap,nums[i])\n        else:\n            if nums[i]<heap[0]:\n                hq.heappush(heap,nums[i])\n                hq.heappop(heap)\n    return heap\ndef merge_sort(nums):\n    '''\n    Write a function to sort a list of numbers by merging sort.\n    '''\n    if len(nums)==0:\n        return []\n    if len(nums)==1:\n        return nums\n    mid=len(nums)//2\n    left=merge_sort(nums[:mid])\n    right=merge_sort(nums[mid:])\n    result=[]\n    while len(left)!=0 and len(right)!=0:\n        if left[0]<right[0]:\n            result.append(left[0])\n            left=left[1:]\n        else:\n            result.append(right[0])\n            right=right[1:]\n    result+=left\n    result+=right\n    return result\ndef insert_sort(nums):\n    '''\n    Write a function to sort a list of numbers by inserting sort.\n    '''\n    for i in range(1,len(nums)):\n        j=i\n        while j>0 and nums[j]<nums[j-1]:\n            nums[j],nums[j-1]=nums[j-1],nums[j]\n            j-=1\n    return nums\ndef quick_sort(nums):\n    '''\n    Write a function to sort a list of numbers by quick sort.\n    '''\n    if len(nums)==0:\n        return []\n    if len(nums)==1:\n        return nums\n    pivot=nums[0]\n    left=[]\n    right=[pivot]\n    for i in range(1,len(nums)):\n        if nums[i]<pivot:\n            left.append(nums[i])\n        else:\n            right.append(nums[i])\n    return quick_sort(left)+right\ndef max_heap(nums):\n    '''\n    Write a function to build a max heap of numbers.\n    '''\n    if len(nums)==0:\n        return []\n    max_heap=[]\n    for i in range(len(nums)):\n        max_heap.append(nums[i])\n        hq.heappush(max_heap,nums[i])\n    return max_heap\ndef min_heap(nums):\n    '''\n    Write a function to build a min heap of numbers.\n    '''\n    if len(nums)==0:\n        return []\n    min_heap=[]\n    for i in range(len(nums)):\n        min_heap.append(nums[i])\n        hq.heappush(min_heap,nums[i])\n    return min_heap\ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of numbers by heap sort.\n    '''\n    if len(nums)==0:\n        return []\n    min_heap=[]\n    for i in range(len(nums)):\n        hq.heappush(min_heap,nums[i])\n    result=[]\n    while len(min_heap)!=0:\n        result.append(hq.heappop(min_heap))\n    return result\ndef quick_select(nums,k):\n    '''\n    Write a function to find the kth largest element in an array by quick select.\n    '''\n    if len(nums)==0:\n        return -1\n    if len(nums)==1:\n        return nums[0]\n    pivot=nums[0]\n    left=[i for i in nums if i<pivot]\n    right=[i for i in nums if i>pivot]\n    if k<len(left):\n        return quick_select(left,k)\n    elif k>(len(nums)-len(right)):\n        return quick_select(right,k-(len(nums)-len(right)))\n    else:\n        return pivot\ndef quick_select2(nums,k):\n    '''\n    Write a function to find the kth largest element in an array by quick select.\n    '''\n    if len(nums)==0:\n        return -1\n    if len(nums)==1:\n        return nums[0]\n    pivot=nums[0]\n    left=[i for i in nums if i<pivot]\n    right=[i for i in nums if i>pivot]\n    if k<len(left):\n        return quick_select2(left,k)\n    elif k>(len(nums)-len(right)):\n        return quick_select2(right,k-(len(nums)-len(right)))\n    else:\n        return pivot\ndef count_sort(nums):\n    '''\n    Write a function to sort an array of positive integers in increasing order by counting sort.\n    '''\n    max_num=max(nums)\n    count=[0]*(max_num+1)\n    for i in range(len(nums)):\n        count[nums[i]]+=1\n    result=[]\n    for i in range(len(count)):\n        while count[i]!=0:\n            result.append(i)\n            count[i]-=1\n    return result\ndef radix_sort(nums):\n    '''\n    Write a function to sort an array of positive integers by radix sort.\n    '''\n    if len(nums)==0:\n        return []\n    max_num=max(nums)\n    radix=1\n    while max_num>=radix:\n        temp=[]\n        count=[0]*(10)\n        for i in range(len(nums)):\n            digit=(nums[i]//radix)%10\n            count[digit]+=1\n        for i in range(10):\n            while count[i]!=0:\n                temp.append(i)\n                count[i]-=1\n        nums=temp\n        radix*=10\n    return nums\ndef bucket_sort(nums):\n    '''\n    Write a function to sort an array of positive integers by bucket sort.\n    '''\n    if len(nums)==0:\n        return []\n    max_num=max(nums)\n    length=len(str(max_num))\n    buckets=[[] for i in range(10)]\n    for i in range(length):\n        for j in range(len(nums)):\n            buckets[(nums[j]//(10**i))%10].append(nums[j])\n        nums=[]\n        for k in range(10):\n            nums+=buckets[k]\n        buckets=[[] for i in range(10)]\n    return nums\ndef max_heap_insert(max_heap,num):\n    '''\n    Write a function to insert a new number into a max heap.\n    '''\n    max_heap.append(num)\n    hq.heappush(max_heap,num)\ndef min_heap_insert(min_heap,num):\n    '''\n    Write a function t"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n,nums)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    return heapq.nsmallest(n,nums)\ndef heap_push(heap,item):\n    '''\n    Write a function to push a new item on a min- or max-heap. \n    '''\n    hq.heappush(heap,item)\ndef heap_pop(heap):\n    '''\n    Write a function to remove and return the smallest item from a heap. \n    '''\n    return hq.heappop(heap)\ndef heap_peek(heap):\n    '''\n    Write a function to return the smallest item from a heap, without popping it off.\n    '''\n    return hq.heappop(heap)\ndef heap_size(heap):\n    '''\n    Write a function to return the size of a heap.\n    '''\n    return len(heap)\ndef heap_empty(heap):\n    '''\n    Write a function to check if a heap is empty.\n    '''\n    return len(heap)==0\ndef heap_insert(heap,item):\n    '''\n    Write a function to insert an item on a heap.\n    '''\n    hq.heappush(heap,item)\ndef heap_del(heap,item):\n    '''\n    Write a function to delete an item from a heap.\n    '''\n    hq.heappop(heap,item)\ndef heap_update(heap,item):\n    '''\n    Write a function to replace the value at a given index with a new item in the heap.\n    '''\n    hq.heapreplace(heap,item)\ndef heap_sort(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order.\n    '''\n    return sorted(nums)\ndef heap_sort_max(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the largest values at the front.\n    '''\n    return sorted(nums)[::-1]\ndef heap_sort_min(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the smallest values at the front.\n    '''\n    return sorted(nums)\ndef heap_sort_max_min(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the largest values at the front and smallest values at the back.\n    '''\n    return sorted(nums)[::-1]\ndef heap_sort_max_min_non_decrease(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the largest values at the front and smallest values at the back.\n    '''\n    return sorted(nums)\ndef heap_sort_descending(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the smallest values at the front and largest values at the back.\n    '''\n    return sorted(nums)[::-1]\ndef heap_sort_descending_non_decrease(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the smallest values at the front and largest values at the back.\n    '''\n    return sorted(nums)\ndef heap_sort_ascending(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the smallest values at the front and largest values at the back.\n    '''\n    return sorted(nums)\ndef heap_sort_ascending_non_decrease(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the smallest values at the front and largest values at the back.\n    '''\n    return sorted(nums)\ndef heap_sort_sort(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order.\n    '''\n    return sorted(nums)\ndef heap_sort_sort_non_decrease(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order.\n    '''\n    return sorted(nums)\ndef heap_sort_sort_non_decrease_max(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the largest values at the front.\n    '''\n    return sorted(nums)[::-1]\ndef heap_sort_sort_non_decrease_min(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the smallest values at the front.\n    '''\n    return sorted(nums)[::-1]\ndef heap_sort_sort_non_decrease_max_min(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the largest values at the front and smallest values at the back.\n    '''\n    return sorted(nums)[::-1]\ndef heap_sort_sort_non_decrease_max_min_non_decrease(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the largest values at the front and smallest values at the back.\n    '''\n    return sorted(nums)[::-1]\ndef heap_sort_sort_descending(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the smallest values at the front and largest values at the back.\n    '''\n    return sorted(nums)[::-1]\ndef heap_sort_sort_descending_non_decrease(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the smallest values at the front and largest values at the back.\n    '''\n    return sorted(nums)[::-1]\ndef heap_sort_sort_ascending(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the smallest values at the front and largest values at the back.\n    '''\n    return sorted(nums)\ndef heap_sort_sort_ascending_non_decrease(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the smallest values at the front and largest values at the back.\n    '''\n    return sorted(nums)\ndef heap_sort_sort_sort(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order.\n    '''\n    return sorted(nums)\ndef heap_sort_sort_sort_non_decrease(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order.\n    '''\n    return sorted(nums)\ndef heap_sort_sort_sort_non_decrease_max(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the largest values at the front.\n    '''\n    return sorted(nums)[::-1]\ndef heap_sort_sort_sort_non_decrease_min(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list sorted in non-decreasing order with the smallest values at the front."
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x & (x - 1)) == 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return is_Power_Of_Two(x/2)\n    \nassert is_Power_Of_Two(0) == 1\nassert is_Power_Of_Two(1) == 0\nassert is_Power_Of_Two(2) == 0\nassert is_Power_Of_Two(7) == 1\nassert is_Power_Of_Two(8) == 0\nassert is_Power_Of_Two(9) == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x==0):\n        return False\n    if (x==1):\n        return False\n    while (x & 1 == 0):\n        x = x // 2\n    if (x==1):\n        return True\n    else:\n        return False\n    return False\n    \ndef is_Prime(x): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if (x < 2):\n        return False\n    if (x == 2):\n        return True\n    for i in range(2, x):\n        if (x % i == 0):\n            return False\n    return True\n    \ndef factorial(x):\n    '''\n    Write a python function to calculate factorial of a given number\n    '''\n    if (x == 0 or x == 1):\n        return 1\n    else:\n        return x * factorial(x - 1)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2:\n        return True\n    if x == 1:\n        return False\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: \n        return True \n    return False \n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    while x:\n        if x % 2!= 0:\n            return False\n        x /= 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==1: \n        return False\n    elif x==2:\n        return True\n    else:\n        temp = x-1\n        while temp>=2:\n            if x%temp==0:\n                return False\n            temp=temp-1\n        return True\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # find all words which are at least 4 characters long\n    words = [word for word in re.findall('\\w{4,}', text) if len(word) >= 4]\n    # return all words\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    length = len(text)\n    length = length - 1\n    result = []\n    if length < 4:\n        result.append(text)\n    else:\n        for i in range(length):\n            if i + 4 <= length:\n                result.append(text[i:i+4])\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #text = raw_input('Enter a text:')\n    words = re.findall(r'\\w{4,}', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'[a-z]+', text.lower())\n    if words:\n        return [word for word in words if len(word)>=4]\n    else:\n        return []\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if not text:\n        return []\n    else:\n        return re.findall(r'[\\w\\s]+', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for word in re.findall('[a-zA-Z]+', text):\n        if len(word) > 3:\n            res.append(word)\n    return res\n    \n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list = text.split()\n    result = []\n    for word in list:\n        if len(word)>=4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_list = []\n    for word in re.findall(r'\\b[a-zA-Z]+\\b', text):\n        if len(word) >= 4:\n            char_list.append(word)\n    return char_list\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    l=[]\n    for i in re.finditer(r'\\w{4,}',text):\n        l.append(i.group())\n    return l\n    \n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(r'\\b\\w{4,}\\b')\n    return regex.findall(text)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i * i)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return map(lambda x: x*x, nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n ** 2 for n in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sqrs = [num * num for num in nums]\n    return sqrs\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    #str = \"waterbottle\"\n    dict1 = {}\n    for i in range(len(str)):\n        if str[i] in dict1:\n            dict1[str[i]].append(i)\n        else:\n            dict1[str[i]] = [i]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if (n == 1):\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Convert the string into a list of characters\n    char_list = list(str)\n    #If string is empty return -1\n    if len(char_list)==0:\n        return -1\n    #Create a dictionary to store all the rotations\n    rotations = {}\n    #For each character in the string\n    for i in range(0,len(char_list)):\n        #If the rotations are not present, add the character with its rotation\n        if char_list[i] not in rotations.keys():\n            rotations[char_list[i]] = i\n    #For each character in the string\n    for i in range(0,len(char_list)):\n        #For each character in the string\n        for j in range(i+1,len(char_list)):\n            #If the rotations are equal, return the index of i\n            if char_list[i] == char_list[j]:\n                return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Find the minimum number of rotations (greater than 0) required to get the same string\n    def find_rotations(str, len_str):\n        if len_str == 1:\n            return 0\n        elif len_str == 2:\n            if str[0] == str[1]:\n                return 0\n            else:\n                return 1\n        else:\n            if str[0] == str[len_str-1]:\n                return find_rotations(str[1:len_str-1], len_str-2)\n            else:\n                return find_rotations(str[1:len_str], len_str-1) + 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    if l<=1:\n        return 0\n    for i in range(l-1):\n        if str[i] == str[l-i-1]:\n            return i\n    else:\n        return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = []\n    if len(str) == 1:\n        rotations.append(0)\n    else:\n        for i in range(len(str)):\n            rotations.append(find_Rotation(str,i,i))\n    return min(rotations)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - len(rotate(str))\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    def find(s,l,r):\n        if l<r:\n            mid = (l+r)//2\n            if s[l:mid] == s[mid+1:r+1]:\n                l = mid+1\n                return l\n            elif s[l:mid] == s[mid:r]:\n                r = mid\n                return r\n            elif s[l:mid] < s[mid:r]:\n                return find(s,l,mid-1)\n            else:\n                return find(s,mid+1,r)\n    l = 0\n    r = n-1\n    while l<=r:\n        mid = (l+r)//2\n        if str[l:mid] == str[mid+1:r+1]:\n            l = mid+1\n        elif str[l:mid] < str[mid:r+1]:\n            r = mid-1\n        else:\n            l = mid+1\n    if l>n:\n        count+=1\n    else:\n        count += 2\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def find_rotations(s1, s2):\n        if s1 == s2:\n            return 0\n        n = min(len(s1), len(s2))\n        for i in range(1, n):\n            if s1[-i:] == s2[:i] and s1[:-i] == s2[i:]:\n                return n - i\n        return n\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    ch_count = s.count(ch)\n    if ch_count == 0:\n        return s\n    else:\n        last_occ_index = s.rfind(ch)\n        first_occ_index = s.find(ch)\n        new_s = s[:first_occ_index] + s[last_occ_index+1:]\n        return new_s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    p1=s.find(ch)\n    p2=s.rfind(ch)\n    s2=s[:p1]+s[p2+1:]\n    return s2\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # removing the first occurance of the given character\n    s = s.replace(ch, \"\",1)\n    # removing the last occurance of the given character\n    s = s.replace(ch,\"\",1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', 1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    assert ch in s\n    if ch in s[:-1]:\n        s=s.replace(ch,'',1)\n    if ch in s[1:]:\n        s=s.replace(ch,'',1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    # loop through the string \n    for i in range(len(s)):\n        \n        # if the character is found\n        if s[i] == ch:\n            \n            # increment the index \n            i = i+1\n            \n            # check if the index is at the end\n            if i == len(s):\n                \n                # remove the character from the string\n                s = s[:-1]\n                \n            # remove the character from the string\n            else:\n                s = s[1:]\n                \n    # return the modified string\n    return s\n    \nprint remove_Occ(\"fghitxhb\",\"f\")\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '')\n        s = s.replace(ch, '')\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\n    \ndef remove_occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\").replace(ch, \"\")\n    \ndef replace_occ(s,ch,newch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, newch)\n    \ndef remove_duplicates(s):\n    '''\n    Write a python function to remove duplicates from a given string.\n    '''\n    return ''.join(set(s))\n    \ndef duplicate_char(s):\n    '''\n    Write a python function to remove duplicates from a given string.\n    '''\n    dup_char = []\n    for i in s:\n        if i not in dup_char:\n            dup_char.append(i)\n    return dup_char\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.find(ch)] + s[s.rfind(ch) + 1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,'',1)\n        s = s.replace(ch,'',1)\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # using two loops, one for row and one for column to find the top-left index of the sum of each row\n    # sort the row according to the sum of the rows\n    # keep the top-left index of the sum of each row\n    # keep sorting the column accroding to the index of the row\n    row_index = []\n    n = len(M)\n    m = len(M[0])\n    for row in xrange(n):\n        # sort the row according to the sum of the rows\n        for col in xrange(m):\n            row_index.append((M[row][col],row,col))\n        row_index.sort()\n        for col in xrange(m):\n            row = row_index[col][1]\n            M[row][col] = row_index[col][0]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    import operator\n    return sorted(M, key=lambda row: sum(row))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    # for row_num in range(len(M)):\n    #     M[row_num].sort(key = lambda x: row_sums[row_num])\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][m-i-1] > M[j+1][m-i-1]:\n                temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M,key=sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def submatrix_sum(M, i, j, k, l):\n        if i >= len(M) or j >= len(M[0]) or k >= len(M) or l >= len(M[0]):\n            return 0\n        return M[i][j] + M[i][k] + M[k][l] + M[i][l] + submatrix_sum(M, i+1, j, k, l)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for i in range(N-1):\n        for j in range(N-1-i):\n            if M[j][-1] > M[j+1][-1]:\n                temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            if M[i][j] > M[j][i]:\n                M[i], M[j] = M[j], M[i]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    sort_row_sums = sorted(row_sums)\n    for i, row_sum in enumerate(sort_row_sums):\n        for j, entry in enumerate(M[i]):\n            M[i][j] = entry / row_sum\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for row in M:\n        row.sort()\n    return sorted(M, key=sum)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #! /usr/bin/env python\n    import math\n    s = (h*b*b)/3\n    print \"Volume of Triangle : %.2f\" % s\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    #! /usr/bin/env python\n    s = (h*b)/2\n    print \"Area of Triangle : %.2f\" % s\n    \ndef find_Volume_cylinder(r,h) : \n    '''\n    Write a python function to find the volume of a cylinder.\n    '''\n    #! /usr/bin/env python\n    import math\n    V = math.pi * r * r * h\n    print \"Volume of Cylinder : %.2f\" % V\n    \ndef find_Area_cylinder(r,h) : \n    '''\n    Write a python function to find the area of a cylinder.\n    '''\n    #! /usr/bin/env python\n    import math\n    A = math.pi * r * r + math.pi * r * r * h\n    print \"Area of Cylinder : %.2f\" % A\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = 0.5*l*b*h\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume=.5*l*b*h\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print (\"Volume of the triangular prism is : \"+str(l*b*h))\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return h*(b+l)*(b+l+h)/2\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    volume=l*b*h/6\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/2\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    return l*b*h/6\n    \ndef find_Area(a,b,h) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    \n    return (a*b + a*h + b*h)/2\n    \ndef find_perimeter(a,b,h) : \n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    \n    return a+b+h\n    \ndef find_volume(a,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    return (a*b*h)/6\n    \ndef find_area(a,b,h) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    \n    return (a*b + a*h + b*h)/2\n    \ndef find_perimeter(a,b,h) : \n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    \n    return a+b+h\n    \ndef main() : \n    '''\n    Write a main program to prompt the user for values of a, b, and h and \n    print out the calculated values.\n    '''\n    a = eval(input('Enter the length of the first side of the triangular : '))\n    b = eval(input('Enter the length of the second side of the triangular : '))\n    h = eval(input('Enter the height of the triangular : '))\n    \n    print('The area of the triangular is ',find_Area(a,b,h))\n    print('The perimeter of the triangular is ',find_perimeter(a,b,h))\n    print('The volume of the triangular is ',find_Volume(a,b,h))\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/6)*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = l**2\n    b = b**2\n    h = h**2\n    Volume = l*b*h/3\n    print Volume\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text.isalpha():\n        return text.islower()\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    str_list = re.findall('[a-z]+_',text)\n    if len(str_list)>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #your code here\n    return text.lower()==text\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.search('[a-z]+_[a-z]+',text)\n    if result:\n        return result\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # pattern = re.compile('([a-z]+_+[a-z]+)*')\n    # match = pattern.match(text)\n    \n    # if match:\n    #     print('match')\n    # else:\n    #     print('no match')\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]',text)\ndef text_uppercase_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of upper case letters joined with lower case letters and false otherwise.\n    '''\n    return re.search('[A-Z]',text)\ndef text_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[A-Z]',text)\ndef text_capitalized(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lower case letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]',text)\ndef text_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, and underscores, and false otherwise.\n    '''\n    return re.search('[a-z_]',text)\ndef text_hyphen(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, and underscores, and false otherwise.\n    '''\n    return re.search('[a-z_]',text)\ndef text_end_hyphen(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, and underscores, and false otherwise.\n    '''\n    return re.search('[a-z_]$',text)\ndef text_end_upper_hyphen(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, and underscores, and false otherwise.\n    '''\n    return re.search('[a-z_]$',text)\ndef text_nonalphanumeric(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z]',text)\ndef text_start_nonalphanumeric(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z]$',text)\ndef text_nonalnum_end(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_hyphen_nonalnum(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]',text)\ndef text_end_nonalnum(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_nonalphanumeric_end(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_nonalphanumeric_start(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_nonalnum_start(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_number_start(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_number_end(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_nonalphanumeric_start_end(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_nonalphanumeric_end_start(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_nonalphanumeric_end_end(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_end_nonalphanumeric(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_end_upper_nonalnum(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_start_upper_nonalnum(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_start_nonalnum(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_end_upper_start_lower(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_end_upper_start_lower_end(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_end_lower_start_upper(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_end_lower_start_upper_end(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_end_lower_start_lower(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]$',text)\ndef text_end_lower_start_lower_end(text):\n    '''\n    Write a function to that returns true if the input string contains non-alphanumeric characters and false otherwise.\n    '''"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # return re.search(r'[a-z]+_[a-z]+', text)\n    return re.search(r'[a-z]+_[a-z]+', text.lower())\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'^[a-z]+_[a-z]+$')\n    match = pattern.match(text)\n    return match is not None\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(string)):\n        for j in range(len(string[i])):\n            if string[i][j] not in list2:\n                list2.append(string[i][j])\n                list1.append(string[i])\n    return list1\ndef rotate(string, n):\n    '''\n    Rotate the string by n places\n    '''\n    str_len = len(string)\n    for i in range(str_len):\n        string = string[-1]+string[:-1]\n    return string\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = ''\n    for i in range(len(list)):\n        string+=list[i]\n    return string\ndef xor(string1,string2):\n    '''\n    Write a function to compute the bitwise XOR of two numbers\n    '''\n    string1 = list_to_str(string1)\n    string2 = list_to_str(string2)\n    xor_string = ''\n    for i in range(len(string1)):\n        if string1[i]!=string2[i]:\n            xor_string+= '1'\n        else:\n            xor_string+= '0'\n    return xor_string\ndef add_binary(string1,string2):\n    '''\n    Write a function to add two binary numbers\n    '''\n    string1 = list_to_str(string1)\n    string2 = list_to_str(string2)\n    carry = 0\n    result = []\n    for i in range(len(string1)-1,-1,-1):\n        if i<len(string1)-1:\n            r = carry+int(string1[i])+int(string2[i])\n            carry = r//2\n            result.append(r%2)\n        else:\n            r = carry+int(string1[i])+int(string2[i])\n            carry = r//2\n            result.append(r%2)\n    result.append(carry)\n    result.reverse()\n    return result\ndef convert_string_to_number(string):\n    '''\n    Write a function to convert a string to a number\n    '''\n    number = 0\n    for i in range(len(string)):\n        number += (ord(string[i])-ord('0'))*pow(2,len(string)-1-i)\n    return number\ndef convert_number_to_string(number):\n    '''\n    Write a function to convert a number to a string\n    '''\n    string = ''\n    while number>0:\n        string+= chr(number%10+ord('0'))\n        number = number//10\n    return string\ndef get_key(string1,string2):\n    '''\n    Write a function to convert two strings to a number and return the result\n    '''\n    string1 = convert_string_to_number(string1)\n    string2 = convert_string_to_number(string2)\n    return string1^string2\ndef str_to_int(string):\n    '''\n    Write a function to convert a string to a number\n    '''\n    number = 0\n    for i in range(len(string)):\n        number += (ord(string[i])-ord('0'))*pow(2,len(string)-1-i)\n    return number\ndef encrypt(string,n):\n    '''\n    Write a function to encrypt a string with a given key\n    '''\n    string = str_to_list(string)\n    result = []\n    for i in range(len(string)):\n        x = (str_to_int(string[i])+n)%256\n        result.append(convert_number_to_string(x))\n    result = list_to_str(result)\n    return result\ndef decrypt(string,n):\n    '''\n    Write a function to decrypt a encrypted string with the key\n    '''\n    string = str_to_list(string)\n    result = []\n    for i in range(len(string)):\n        x = (str_to_int(string[i])-n)%256\n        result.append(convert_number_to_string(x))\n    result = list_to_str(result)\n    return result\ndef main():\n    string1 ='sunday'\n    string2 ='saturday'\n    n = get_key(string1,string2)\n    print(n)\n    string1 = 'hello'\n    string2 = 'world'\n    n = get_key(string1,string2)\n    print(n)\n    string1 = '10101010101110101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    # traverse for all characters\n    for i in range(len(char_list)):\n        \n        # ignore the first character\n        if i == 0:\n            continue\n        \n        # search for the corresponding character and remove\n        if char_list[i] in string[1:]:\n            char_list[i] = ''\n    return \"\".join(char_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_to_remove = [str_to_list(string[1:]) for string in string[1:]]\n    return [char for char in string if char not in list_to_remove]\ndef list_to_str(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_to_remove = [list_to_str(string[1:]) for string in string[1:]]\n    return ''.join(string[1:] for string in string[1:])\ndef remove_letters(string, remove_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    remove_list = [remove_letters(string[1:], remove_list) for string in string[1:]]\n    return [char for char in string if char not in remove_list]\ndef list_to_str(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return ''.join(string[1:])\ndef remove_char(string, remove_char):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.replace(remove_char, '')\ndef string_compression(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    compressed_string = [string[0]]\n    count = 1\n    for i in xrange(1,len(string)):\n        if string[i] == string[i-1]:\n            count += 1\n        else:\n            compressed_string.append(str(count))\n            compressed_string.append(string[i])\n            count = 1\n    compressed_string.append(str(count))\n    compressed_string.append(string[-1])\n    if len(string) >= len(compressed_string):\n        return string\n    else:\n        return ''.join(compressed_string)\ndef edit_distance(str1, str2):\n    '''\n    Write a function to return the minimum number of operations required to convert one string to another.\n    '''\n    if len(str1) < len(str2):\n        str1, str2 = str2, str1\n    distance = [[i]+[0]*len(str2) for i in xrange(len(str1))]\n    for i in xrange(len(str1)):\n        for j in xrange(len(str2)):\n            if str1[i] == str2[j]:\n                distance[i][j] = distance[i-1][j-1]\n            else:\n                distance[i][j] = min(distance[i-1][j], distance[i][j-1], distance[i-1][j-1])+1\n    return distance[-1][-1]\ndef str_to_int(string):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    return int(''.join(string[1:]))\ndef int_to_str(num):\n    '''\n    Write a function to convert an integer to a string.\n    '''\n    return str(num)\ndef is_vowel(string):\n    '''\n    Write a function to check whether a given string is a vowel or not.\n    '''\n    return True if string in ['a','e','i','o','u'] else False\ndef reverse(string):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return True if string == reverse(string) else False\ndef make_palindrome(string):\n    '''\n    Write a function to check whether a given string can be made a palindrome string or not.\n    '''\n    if string[0]!= string[-1]:\n        return string + string[0:len(string)-1][::-1]\n    else:\n        return string + string[0:len(string)-1][::-1]\ndef change_case(string, case):\n    '''\n    Write a function to convert the case of a string.\n    '''\n    if case == 'upper':\n        return string.upper()\n    elif case == 'lower':\n        return string.lower()\ndef remove_nth_char(string, n):\n    '''\n    Write a function to remove characters from the first string.\n    '''\n    return string[n:]\ndef remove_nth_char_from_back(string, n):\n    '''\n    Write a function to remove characters from the first string.\n    '''\n    return string[:-n]\ndef remove_nth_char_from_front(string, n):\n    '''\n    Write a function to remove characters from the first string.\n    '''\n    return string[n:]\ndef duplicate_string_count(string):\n    '''\n    Write a function to count the duplicate characters in a string.\n    '''\n    count = 1\n    for char in string[1:]:\n        if char == string[0]:\n            count += 1\n    return count\ndef get_longest_word(string):\n    '''\n    Write a function to count the duplicate characters in a string.\n    '''\n    return max(string.split(), key=len)\ndef vowel_string_count(string):\n    '''\n    Write a function to count the vowel characters in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    return len([char for char in string if char in vowels])\ndef count_characters(string):\n    '''\n    Write a function to count the duplicate characters in a string.\n    '''\n    return len(string)\ndef count_unique_characters(string):\n    '''\n    Write a function to count the unique characters in a string.\n    '''\n    return len(set(string))\ndef is_unique(string):\n    '''\n    Write a function to check whether a string contains all the unique characters or not.\n    '''\n    return True if len(set(string)) == len(string) else False\ndef is_alphabet(string):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    return True if len(string) == len(set(string)) else False\ndef is_anagram(string1, string2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    return True if sorted(string1) == sorted(string2) else False\ndef is_palindrome_permutation(string):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome or not.\n    '''\n    return True if sorted(string) == sorted(string[::-1]) else False\ndef is_prime(num):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in xrange(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\ndef is_permutation(string1, string2):\n    '''\n    Write a function to check whether two strings are permutations of each other or not.\n    '''\n    return True if sorted(string1) == sorted(string2) else False\ndef is_one_away(string1, string2):\n    '''\n    Write a function to check whether two strings are one edit distance apart or not.\n    '''\n    if len(string1) == len(string2):\n        return True if abs(len(string1) - len(string2)) == 1 else False\n    else:\n        if len(string1) > len(string2):\n            return is_one_away(string2, string1)\n        else:\n            return is_one_away(string1, string2)"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = []\n    for i in string:\n        if i not in res:\n            res.append(i)\n    return res\ndef alpha_to_num(string):\n    '''\n    Write a function to convert a given string to a string where the vowels have been replaced with a number.\n    '''\n    vowels = ['a','e','i','o','u']\n    d = {'a': 1, 'e': 2, 'i': 3, 'o': 4, 'u': 5}\n    new_string = ''\n    for i in string:\n        if i in vowels:\n            new_string += str(d[i])\n        else:\n            new_string += i\n    return new_string\ndef check_palindrome(string):\n    '''\n    Write a function to check if the string is a palindrome or not.\n    '''\n    return string == string[::-1]\ndef rotate(string, n):\n    '''\n    Write a function to rotate the string by n places\n    '''\n    res = ''\n    for i in range(n, len(string)):\n        res += string[i]\n    for i in range(0, n):\n        res += string[i]\n    return res\ndef max_product(arr):\n    '''\n    Write a function to find the maximum product of three numbers.\n    '''\n    res = arr[0] * arr[1] * arr[2]\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                res = max(res, arr[i] * arr[j] * arr[k])\n    return res\ndef majority_element(arr):\n    '''\n    Write a function to return the majority element in an array of integers.\n    '''\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        if d[i] > len(arr) / 2:\n            return i\ndef char_histogram(string):\n    '''\n    Write a function to return the frequency of characters in a string.\n    '''\n    d = {}\n    for i in string:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\ndef char_histogram(string):\n    '''\n    Write a function to return the frequency of characters in a string.\n    '''\n    d = {}\n    for i in string:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\ndef swap_keys_values(d):\n    '''\n    Write a function to return a dictionary with the keys and values swapped.\n    '''\n    res = {}\n    for i in d:\n        res[d[i]] = i\n    return res\ndef swap_keys_values(d):\n    '''\n    Write a function to return a dictionary with the keys and values swapped.\n    '''\n    res = {}\n    for i in d:\n        res[d[i]] = i\n    return res\ndef check_permutation(string1, string2):\n    '''\n    Write a function to check if two strings are a permutation of each other.\n    '''\n    d = {}\n    for i in string1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in string2:\n        if i not in d:\n            return False\n        else:\n            d[i] -= 1\n    for i in d:\n        if d[i]!= 0:\n            return False\n    return True\ndef rotate_string_by_n_chars(string, n):\n    '''\n    Write a function to rotate the string by n characters\n    '''\n    n = n % len(string)\n    res = ''\n    for i in range(n, len(string)):\n        res += string[i]\n    for i in range(0, n):\n        res += string[i]\n    return res\ndef rotate_string_by_n_chars(string, n):\n    '''\n    Write a function to rotate the string by n characters\n    '''\n    n = n % len(string)\n    res = ''\n    for i in range(n, len(string)):\n        res += string[i]\n    for i in range(0, n):\n        res += string[i]\n    return res\ndef reverse_list(arr):\n    '''\n    Write a function to reverse a list\n    '''\n    l = len(arr) - 1\n    res = []\n    for i in range(0, l + 1):\n        res.append(arr[l - i])\n    return res\ndef reverse_list(arr):\n    '''\n    Write a function to reverse a list\n    '''\n    l = len(arr) - 1\n    res = []\n    for i in range(0, l + 1):\n        res.append(arr[l - i])\n    return res\ndef merge_two_lists(l1, l2):\n    '''\n    Write a function to merge two sorted lists\n    '''\n    res = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] <= l2[j]:\n            res.append(l1[i])\n            i += 1\n        else:\n            res.append(l2[j])\n            j += 1\n    while i < len(l1):\n        res.append(l1[i])\n        i += 1\n    while j < len(l2):\n        res.append(l2[j])\n        j += 1\n    return res\ndef reverse_words_in_a_string(string):\n    '''\n    Write a function to reverse words in a string\n    '''\n    words = string.split(' ')\n    res = []\n    for i in range(0, len(words)):\n        res.append(words[i][::-1])\n    return''.join(res)\ndef reverse_words_in_a_string(string):\n    '''\n    Write a function to reverse words in a string\n    '''\n    words = string.split(' ')\n    res = []\n    for i in range(0, len(words)):\n        res.append(words[i][::-1])\n    return''.join(res)\ndef maximum_product_of_three(arr):\n    '''\n    Write a function to find the maximum product of three numbers\n    '''\n    arr.sort()\n    return arr[-1] * arr[-2] * arr[-3]\ndef is_anagram(string1, string2):\n    '''\n    Write a function to check if two strings are anagrams of each other\n    '''\n    d1 = {}\n    d2 = {}\n    for i in string1:\n        if i not in d1:\n            d1[i] = 1\n        else:\n            d1[i] += 1\n    for i in string2:\n        if i not in d2:\n            d2[i] = 1\n        else:\n            d2[i] += 1\n    return d1 == d2\ndef is_anagram(string1, string2):\n    '''\n    Write a function to check if two strings are anagrams of each other\n    '''\n    d1 = {}\n    d2 = {}\n    for i in string1:\n        if i not in d1:\n            d1[i] = 1\n        else:\n            d1[i] += 1\n    for i in string2:\n        if i not in d2:\n            d2[i] = 1\n        else:\n            d2[i] += 1\n    return d1 == d2\ndef is_anagram(string1, string2):\n    '''\n    Write a function to check if two strings are anagrams of each other\n    '''\n    d1 = {}\n    d2 = {}\n    for i in string1:\n        if i not in d1:\n            d1["
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return ''.join(list)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if not string:\n        return string\n    list_one = []\n    list_two = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i] == string[j] and string[i] not in list_two:\n                list_one.append(string[i])\n                list_two.append(string[i])\n    list_one.sort()\n    return ''.join(list_one)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lenstr=len(string)\n    lenstr2=len(string2)\n    li=[]\n    for i in range(0,lenstr):\n        for j in range(0,lenstr2):\n            if string[i]==string2[j]:\n                break\n        if j==lenstr2-1:\n            li.append(string[i])\n    return li\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string=''\n    for i in list:\n        string+=i\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = list(string)\n    str2 = list(string)\n    for i in str1:\n        if i in str2:\n            str1.remove(i)\n    return str1\ndef is_there_anagram(str1, str2):\n    if len(str1)!= len(str2):\n        return False\n    return sorted(str1) == sorted(str2)\ndef first_non_repeating_character(string):\n    dict_of_freq = {}\n    for i in string:\n        if i in dict_of_freq:\n            dict_of_freq[i] += 1\n        else:\n            dict_of_freq[i] = 1\n    for j in string:\n        if dict_of_freq[j] == 1:\n            return j\n    return None\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = [] \n    for i in range(len(string)): \n        if string[i] not in list_str: \n            list_str.append(string[i]) \n    return list_str\ndef get_char_count(string): \n    '''\n    Write a function to return the frequency of characters in a string\n    '''\n    freq_dict = {} \n    for i in range(len(string)): \n        if string[i] in freq_dict: \n            freq_dict[string[i]] += 1\n        else: \n            freq_dict[string[i]] = 1\n    return freq_dict\ndef remove_char(string,char): \n    '''\n    Write a function to remove a character from the string \n    '''\n    string = list(string)\n    string.remove(char)\n    string = ''.join(string)\n    return string\ndef rem_space(string): \n    '''\n    Write a function to remove a space from the string \n    '''\n    string = string.replace(' ','')\n    return string\ndef add_space(string): \n    '''\n    Write a function to add a space in the string \n    '''\n    return''.join(string)\ndef remove_punctuation(string): \n    '''\n    Write a function to remove punctuation from the string \n    '''\n    punctuation = '''()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    for i in string: \n        if i in punctuation: \n            string = string.replace(i,'')\n    return string\ndef find_max(string): \n    '''\n    Write a function to find the max occuring character in the string \n    '''\n    char_dict = get_char_count(string)\n    max_freq = 0\n    max_char = ''\n    for char in char_dict: \n        if char_dict[char] > max_freq: \n            max_freq = char_dict[char]\n            max_char = char\n    return max_char\ndef check_permutation(string1,string2): \n    '''\n    Write a function to check whether a given string is a permutation of another string\n    '''\n    string1 = rem_space(string1)\n    string2 = rem_space(string2)\n    if len(string1)!= len(string2): \n        return False\n    else: \n        char_list1 = str_to_list(string1)\n        char_list2 = str_to_list(string2)\n        if len(char_list1)!= len(char_list2): \n            return False\n        else: \n            char_list1.sort()\n            char_list2.sort()\n            for i in range(len(char_list1)): \n                if char_list1[i]!= char_list2[i]: \n                    return False\n            return True\ndef check_palindrome(string): \n    '''\n    Write a function to check whether a given string is a palindrome\n    '''\n    string = rem_space(string)\n    string = remove_punctuation(string)\n    for i in range(len(string)): \n        if string[i]!= string[len(string)-i-1]: \n            return False\n    return True\ndef is_anagram(string1,string2): \n    '''\n    Write a function to check whether two strings are anagrams\n    '''\n    string1 = rem_space(string1)\n    string2 = rem_space(string2)\n    if len(string1)!= len(string2): \n        return False\n    else: \n        char_list1 = str_to_list(string1)\n        char_list2 = str_to_list(string2)\n        if len(char_list1)!= len(char_list2): \n            return False\n        else: \n            char_list1.sort()\n            char_list2.sort()\n            for i in range(len(char_list1)): \n                if char_list1[i]!= char_list2[i]: \n                    return False\n            return True\ndef print_permutation(string): \n    '''\n    Write a function to print all permutations of a given string\n    '''\n    string = rem_space(string)\n    string = remove_punctuation(string)\n    if len(string) == 0: \n        print ('No permutations')\n    else: \n        char_list = str_to_list(string)\n        char_list.sort()\n        for i in range(len(char_list)): \n            for j in range(i+1,len(char_list)): \n                string = char_list[i] + char_list[j]\n                print (string)\ndef check_combination(string1,string2): \n    '''\n    Write a function to check whether two strings are a combination of each other\n    '''\n    string1 = rem_space(string1)\n    string2 = rem_space(string2)\n    if len(string1)!= len(string2): \n        return False\n    else: \n        char_list1 = str_to_list(string1)\n        char_list2 = str_to_list(string2)\n        if len(char_list1)!= len(char_list2): \n            return False\n        else: \n            char_list1.sort()\n            char_list2.sort()\n            for i in range(len(char_list1)): \n                if char_list1[i] not in char_list2: \n                    return False\n            return True\ndef get_longest_common_substring(string1,string2): \n    '''\n    Write a function to find the longest common substring in two strings\n    '''\n    string1 = rem_space(string1)\n    string2 = rem_space(string2)\n    if len(string1)!= len(string2): \n        return ''\n    else: \n        string1 = remove_punctuation(string1)\n        string2 = remove_punctuation(string2)\n        char_list1 = str_to_list(string1)\n        char_list2 = str_to_list(string2)\n        char_list1.sort()\n        char_list2.sort()\n        for i in range(len(char_list1)): \n            for j in range(len(char_list2)): \n                if char_list1[i] == char_list2[j]: \n                    if j == len(char_list2)-1: \n                        return string1[i]\n                    else: \n                        string1 = string1[i+1:]\n                        string2 = string2[j+1:]\n                        break\ndef check_rotated_string(string1,string2): \n    '''\n    Write a function to check whether a given string is a rotation of another string\n    '''\n    string1 = rem_space(string1)\n    string2 = rem_space(string2)\n    if len(string1)!= len(string2): \n        return False\n    else: \n        if string1 == string2 + string2: \n            return True\n        else: \n            return False\ndef get_longest_common_subsequence(string1,string2): \n    '''\n    Write a function to find the longest common subsequence in two strings\n    '''\n    string1 = rem_space(string1)\n    string2 = rem_space(string2)\n    if len(string1)!= len(string2): \n        return ''\n    else: \n        sub_list = [[[0 for i in range(len(string1)+1)] for j in range(len(string2)+1)] for k in range(len(string1)+1)]\n        for i in range(1,len(string1)+1): \n            for j in range(1,len(string2)+1): \n                if string1[i-1] == string2[j-1]: \n                    sub_list[i][j][0] = 1 + sub_list[i-1][j-1][0]\n                else:"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = []\n    for i in string:\n        if i not in list_str:\n            list_str.append(i)\n    return list_str\ndef list_to_str(list_str):\n    '''\n    Write a function to join two strings using the characters in the first string.\n    '''\n    string = \"\"\n    for i in list_str:\n        string += i\n    return string\ndef get_frequency_list(string):\n    '''\n    Write a function to return a list of tuples of the format (charecter, frequency) for each charecter in the given string.\n    '''\n    freq = [0] * NO_OF_CHARS\n    for i in string:\n        freq[ord(i)] += 1\n    return freq\ndef get_max_frequency_char(string):\n    '''\n    Write a function to return the character which occurs the maximum number of times in the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_key(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_max_frequency_char_key(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_string_with_max_frequency_char(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_string_with_max_frequency_char_key(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_string_with_max_frequency_char_key2(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_string_with_max_frequency_char2(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_string_with_max_frequency_char3(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_string_with_max_frequency_char4(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_string_with_max_frequency_char5(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_string_with_max_frequency_char6(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_string_with_max_frequency_char7(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_string_with_max_frequency_char8(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_string_with_max_frequency_char9(string):\n    '''\n    Write a function to return a string which is a key for the given string.\n    '''\n    freq = get_frequency_list(string)\n    max_freq = 0\n    max_char = None\n    for i in range(NO_OF_CHARS):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_char = chr(i)\n    return max_char\ndef get_string_with_max_frequency_char10(string):\n    '''\n    Write a function to return a string whic"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #arraynums = [2, 3, 1, 4, 5, 6]\n    #arraynums = [3, 1, 4, 6, 5]\n    #arraynums = [2, 2, 1, 3, 4, 5, 6]\n    #arraynums = [3, 2, 1, 3, 4, 5, 6]\n    #arraynums = [3, 3, 1, 4, 4, 5, 6]\n    #arraynums = [2, 3, 2, 4, 5, 6]\n    #arraynums = [3, 1, 4, 5, 6, 6]\n    #arraynums = [3, 1, 4, 4, 5, 6]\n    #arraynums = [1, 1, 1, 1]\n    #arraynums = [3, 1, 4, 4, 5, 6]\n    #arraynums = [1, 1, 1, 1, 1]\n    #arraynums = [3, 1, 4, 5, 6]\n    #arraynums = [3, 1, 4, 5, 5]\n    #arraynums = [3, 1, 4, 4, 5, 6]\n    #arraynums = [2, 3, 2, 4, 5, 6]\n    #arraynums = [2, 1, 3, 4, 5, 6]\n    #arraynums = [3, 1, 4, 5, 5, 6]\n    #arraynums = [2, 1, 3, 4, 5, 6]\n    #arraynums = [1, 2, 3, 4, 5, 6]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 2, 3, 4, 5, 6]\n    #arraynums = [3, 1, 4, 5, 6]\n    #arraynums = [3, 2, 1, 3, 4, 5, 6]\n    #arraynums = [3, 2, 1, 3, 4, 5, 6]\n    #arraynums = [3, 2, 1, 3, 4, 5, 6]\n    #arraynums = [3, 1, 4, 5, 6]\n    #arraynums = [3, 1, 4, 5, 5]\n    #arraynums = [3, 1, 4, 4, 5, 6]\n    #arraynums = [2, 3, 2, 4, 5, 6]\n    #arraynums = [2, 3, 1, 4, 5, 6]\n    #arraynums = [3, 1, 4, 5, 6]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, 1]\n    #arraynums = [1, 1, 1, 1, 1, "
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    try:\n        length = len(arraynums)\n        i = 0\n        while i < length:\n            while arraynums[i] in arraynums[i+1:length]:\n                arraynums[i] *= 10\n            i += 1\n        return arraynums\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for i in arraynums:\n        if i in seen:\n            return True\n        seen.add(i)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 1:\n        return False\n    if len(arraynums) == 0:\n        return False\n    if len(arraynums) == 2:\n        return arraynums[0]!= arraynums[1]\n    else:\n        if arraynums[0]!= arraynums[1] and arraynums[0]!= arraynums[2]:\n            return True\n        else:\n            return test_duplicate(arraynums[1:])\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    s = set()\n    for num in arraynums:\n        if num in s:\n            return True\n        else:\n            s.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    s = set()\n    for i in arraynums:\n        if i in s:\n            return True\n        else:\n            s.add(i)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for x in arraynums:\n        if arraynums.count(x) > 1:\n            duplicate = True\n            break\n    return duplicate\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #if x in (num for num in range(1,21)):\n    if x in (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = len(x)\n    if n!= 6:\n        return False\n    else:\n        count = 0\n        for i in x:\n            count += int(i)\n        if count > 6 or count < 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x >= 'z' and x <= 'Z') or (x >= '0' and x <= '9'):\n        return False\n    if x == 'b' or x == 'c' or x == 'd' or x == 'f' or x == 'g' or x == 'h' or x == 'j' or x == 'k' or x == 'l' or x =='m' or x == 'n' or x == 'p' or x == 'q' or x == 'r' or x =='s' or x == 't' or x == 'v' or x == 'w' or x == 'x' or x == 'y' or x == 'z':\n        return True\n    return False\n    \n    \ndef woodall_sort(l): \n    '''\n    Write a function to sort a list of number using the Woodall function.\n    '''\n    list = []\n    for i in l:\n        if is_woodall(i):\n            list.append(i)\n    return sorted(list)\n    \n    \ndef is_mixed(x): \n    '''\n    Write a function to check if the given number is mixed or not.\n    '''\n    if (x >= 'a' and x <= 'z') or (x >= 'A' and x <= 'Z') or (x >= '0' and x <= '9') or (x >= 'A' and x <= 'Z') or (x >= 'a' and x <= 'z') or (x >= 'A' and x <= 'Z'):\n        return False\n    if x == 'a' or x == 'b' or x == 'c' or x == 'd' or x == 'e' or x == 'f' or x == 'g' or x == 'h' or x == 'i' or x == 'j' or x == 'k' or x == 'l' or x =='m' or x == 'n' or x == 'o' or x == 'p' or x == 'q' or x == 'r' or x =='s' or x == 't' or x == 'u' or x == 'v' or x == 'w' or x == 'x' or x == 'y' or x == 'z':\n        return True\n    return False\n    \n    \ndef mixed_sort(l): \n    '''\n    Write a function to sort a list of number using the mixed function.\n    '''\n    list = []\n    for i in l:\n        if is_mixed(i):\n            list.append(i)\n    return sorted(list)\n    \n    \ndef is_number(x): \n    '''\n    Write a function to check if the given number is number or not.\n    '''\n    if (x >= '0' and x <= '9') or (x >= '0' and x <= '9'):\n        return True\n    return False\n    \n    \ndef number_sort(l): \n    '''\n    Write a function to sort a list of number using the number function.\n    '''\n    list = []\n    for i in l:\n        if is_number(i):\n            list.append(i)\n    return sorted(list)\n    \n    \ndef is_punct(x): \n    '''\n    Write a function to check if the given number is punctuation or not.\n    '''\n    if x == '.' or x == ',' or x == '?' or x == '!' or x == ';' or x == ':' or x == '-' or x == '/' or x == '(' or x == ')' or x == '_':\n        return True\n    return False\n    \n    \ndef punct_sort(l): \n    '''\n    Write a function to sort a list of punctuation using the punctuation function.\n    '''\n    list = []\n    for i in l:\n        if is_punct(i):\n            list.append(i)\n    return sorted(list)\n    \n    \ndef is_alpha(x): \n    '''\n    Write a function to check if the given number is alphabetical or not.\n    '''\n    if (x >= 'a' and x <= 'z') or (x >= 'A' and x <= 'Z'):\n        return True\n    return False\n    \n    \ndef alpha_sort(l): \n    '''\n    Write a function to sort a list of alphabetical character using the alpha function.\n    '''\n    list = []\n    for i in l:\n        if is_alpha(i):\n            list.append(i)\n    return sorted(list)\n    \n    \ndef is_special(x): \n    '''\n    Write a function to check if the given number is special or not.\n    '''\n    if x == '@' or x == '#' or x == '$' or x == '%' or x == '^' or x == '&' or x == '*' or x == '(' or x == ')' or x == '?' or x == '/' or x == '+' or x == '=' or x == '_':\n        return True\n    return False\n    \n    \ndef special_sort(l): \n    '''\n    Write a function to sort a list of special character using the special function.\n    '''\n    list = []\n    for i in l:\n        if is_special(i):\n            list.append(i)\n    return sorted(list)\n    \n    \ndef is_word(x): \n    '''\n    Write a function to check if the given number is word or not.\n    '''\n    if (x >= 'a' and x <= 'z') or (x >= 'A' and x <= 'Z'):\n        return True\n    return False\n    \n    \ndef word_sort(l): \n    '''\n    Write a function to sort a list of word using the word function.\n    '''\n    list = []\n    for i in l:\n        if is_word(i):\n            list.append(i)\n    return sorted(list)\n    \n    \ndef is_space(x): \n    '''\n    Write a function to check if the given number is space or not.\n    '''\n    if x =='':\n        return True\n    return False\n    \n    \ndef space_sort(l): \n    '''\n    Write a function to sort a list of space using the space function.\n    '''\n    list = []\n    for i in l:\n        if is_space(i):\n            list.append(i)\n    return sorted(list)\n    \n    \ndef is_digit(x): \n    '''\n    Write a function to check if the given number is digit or not.\n    '''\n    if (x >= '0' and x <= '9'):\n        return True\n    return False\n    \n    \ndef digit_sort(l): \n    '''\n    Write a function to sort a list of digit using the digit function.\n    '''\n    list = []\n    for i in l:\n        if is_digit(i):\n            list.append(i)\n    return sorted(list)\n    \n    \ndef is_octal(x): \n    '''\n    Write a function to check if the given number is octal or not.\n    '''\n    if (x >= '0' and x <= '7') or (x >= '0' and x <= '7'):\n        return True\n    return False\n    \n    \ndef octal_sort(l): \n    '''\n    Write a function to sort a list of octal using the octal function.\n    '''\n    list = []\n    for i in l:\n        if is_octal(i):\n            list.append(i)\n    return sorted(list)\n    \n    \ndef is_hex(x): \n    '''\n    Write a function to check if the given number is hex or not.\n    '''\n    if (x >= '0' and x <= '9') or (x >= 'a' and x <= 'f') or (x >= 'A' and x <= 'F'):\n        return True\n    return False\n    \n    \ndef hex_sort(l): \n    '''\n    Write a function to sort a list of hex using the hex function.\n    '''\n    list = []\n    for i in l:\n        if is_hex(i):\n            list.append(i)\n    return sorted(list)\n    \n    \ndef i"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x>=0 and x<=9):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x[0]=='0' or x[1]=='0' or x[2]=='0':\n        return False\n    return (x[0]=='1' and x[1]=='1' and x[2]=='1') or (x[0]=='2' and x[1]=='2' and x[2]=='2') or (x[0]=='3' and x[1]=='3' and x[2]=='3') or (x[0]=='4' and x[1]=='4' and x[2]=='4') or (x[0]=='5' and x[1]=='5' and x[2]=='5') or (x[0]=='6' and x[1]=='6' and x[2]=='6') or (x[0]=='7' and x[1]=='7' and x[2]=='7') or (x[0]=='8' and x[1]=='8' and x[2]=='8') or (x[0]=='9' and x[1]=='9' and x[2]=='9')\ndef is_japenese(x): \n    '''\n    Write a function to check if the given number is japanese or not.\n    '''\n    if x[0]=='0' or x[1]=='0' or x[2]=='0':\n        return False\n    return (x[0]=='1' and x[1]=='1' and x[2]=='1') or (x[0]=='2' and x[1]=='2' and x[2]=='2') or (x[0]=='3' and x[1]=='3' and x[2]=='3') or (x[0]=='4' and x[1]=='4' and x[2]=='4') or (x[0]=='5' and x[1]=='5' and x[2]=='5') or (x[0]=='6' and x[1]=='6' and x[2]=='6') or (x[0]=='7' and x[1]=='7' and x[2]=='7') or (x[0]=='8' and x[1]=='8' and x[2]=='8') or (x[0]=='9' and x[1]=='9' and x[2]=='9')\ndef is_dutch(x): \n    '''\n    Write a function to check if the given number is dutch or not.\n    '''\n    if x[0]=='0' or x[1]=='0' or x[2]=='0':\n        return False\n    return (x[0]=='1' and x[1]=='1' and x[2]=='1') or (x[0]=='2' and x[1]=='2' and x[2]=='2') or (x[0]=='3' and x[1]=='3' and x[2]=='3') or (x[0]=='4' and x[1]=='4' and x[2]=='4') or (x[0]=='5' and x[1]=='5' and x[2]=='5') or (x[0]=='6' and x[1]=='6' and x[2]=='6') or (x[0]=='7' and x[1]=='7' and x[2]=='7') or (x[0]=='8' and x[1]=='8' and x[2]=='8') or (x[0]=='9' and x[1]=='9' and x[2]=='9')\ndef is_swedish(x): \n    '''\n    Write a function to check if the given number is Swedish or not.\n    '''\n    if x[0]=='0' or x[1]=='0' or x[2]=='0':\n        return False\n    return (x[0]=='1' and x[1]=='1' and x[2]=='1') or (x[0]=='2' and x[1]=='2' and x[2]=='2') or (x[0]=='3' and x[1]=='3' and x[2]=='3') or (x[0]=='4' and x[1]=='4' and x[2]=='4') or (x[0]=='5' and x[1]=='5' and x[2]=='5') or (x[0]=='6' and x[1]=='6' and x[2]=='6') or (x[0]=='7' and x[1]=='7' and x[2]=='7') or (x[0]=='8' and x[1]=='8' and x[2]=='8') or (x[0]=='9' and x[1]=='9' and x[2]=='9')\ndef is_norwegian(x): \n    '''\n    Write a function to check if the given number is norwegian or not.\n    '''\n    if x[0]=='0' or x[1]=='0' or x[2]=='0':\n        return False\n    return (x[0]=='1' and x[1]=='1' and x[2]=='1') or (x[0]=='2' and x[1]=='2' and x[2]=='2') or (x[0]=='3' and x[1]=='3' and x[2]=='3') or (x[0]=='4' and x[1]=='4' and x[2]=='4') or (x[0]=='5' and x[1]=='5' and x[2]=='5') or (x[0]=='6' and x[1]=='6' and x[2]=='6') or (x[0]=='7' and x[1]=='7' and x[2]=='7') or (x[0]=='8' and x[1]=='8' and x[2]=='8') or (x[0]=='9' and x[1]=='9' and x[2]=='9')\ndef is_finnish(x): \n    '''\n    Write a function to check if the given number is Finnish or not.\n    '''\n    if x[0]=='0' or x[1]=='0' or x[2]=='0':\n        return False\n    return (x[0]=='1' and x[1]=='1' and x[2]=='1') or (x[0]=='2' and x[1]=='2' and x[2]=='2') or (x[0]=='3' and x[1]=='3' and x[2]=='3') or (x[0]=='4' and x[1]=='4' and x[2]=='4') or (x[0]=='5' and x[1]=='5' and x[2]=='5') or (x[0]=='6' and x[1]=='6' and x[2]=='6') or (x[0]=='7' and x[1]=='7' and x[2]=='7') or (x[0]=='8' and x[1]=='8' and x[2]=='8') or (x[0]=='9' and x[1]=='9' and x[2]=='9')\ndef is_ukrainian(x): \n    '''\n    Write a function to check if the given number is ukrainian or not.\n    '''\n    if x[0]=='0' or x[1]=='0' or x[2]=='0':\n        return False\n    return (x[0]=='1' and x[1]=='1' and x[2]=='1') or (x[0]=='2' and x"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%11 == 0 or x%13 == 0 or x%17 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 'w1':\n        return True\n    elif x == 'w2':\n        return True\n    elif x == 'w3':\n        return True\n    elif x == 'w4':\n        return True\n    elif x == 'w5':\n        return True\n    elif x == 'w6':\n        return True\n    elif x == 'w7':\n        return True\n    elif x == 'w8':\n        return True\n    elif x == 'w9':\n        return True\n    elif x == 'w10':\n        return True\n    elif x == 'w11':\n        return True\n    elif x == 'w12':\n        return True\n    elif x == 'w13':\n        return True\n    elif x == 'w14':\n        return True\n    elif x == 'w15':\n        return True\n    elif x == 'w16':\n        return True\n    elif x == 'w17':\n        return True\n    elif x == 'w18':\n        return True\n    elif x == 'w19':\n        return True\n    elif x == 'w20':\n        return True\n    elif x == 'w21':\n        return True\n    elif x == 'w22':\n        return True\n    elif x == 'w23':\n        return True\n    elif x == 'w24':\n        return True\n    elif x == 'w25':\n        return True\n    elif x == 'w26':\n        return True\n    elif x == 'w27':\n        return True\n    elif x == 'w28':\n        return True\n    elif x == 'w29':\n        return True\n    elif x == 'w30':\n        return True\n    elif x == 'w31':\n        return True\n    elif x == 'w32':\n        return True\n    elif x == 'w33':\n        return True\n    elif x == 'w34':\n        return True\n    elif x == 'w35':\n        return True\n    elif x == 'w36':\n        return True\n    elif x == 'w37':\n        return True\n    elif x == 'w38':\n        return True\n    elif x == 'w39':\n        return True\n    elif x == 'w40':\n        return True\n    elif x == 'w41':\n        return True\n    elif x == 'w42':\n        return True\n    elif x == 'w43':\n        return True\n    elif x == 'w44':\n        return True\n    elif x == 'w45':\n        return True\n    elif x == 'w46':\n        return True\n    elif x == 'w47':\n        return True\n    elif x == 'w48':\n        return True\n    elif x == 'w49':\n        return True\n    elif x == 'w50':\n        return True\n    elif x == 'w51':\n        return True\n    elif x == 'w52':\n        return True\n    elif x == 'w53':\n        return True\n    elif x == 'w54':\n        return True\n    elif x == 'w55':\n        return True\n    elif x == 'w56':\n        return True\n    elif x == 'w57':\n        return True\n    elif x == 'w58':\n        return True\n    elif x == 'w59':\n        return True\n    elif x == 'w60':\n        return True\n    elif x == 'w61':\n        return True\n    elif x == 'w62':\n        return True\n    elif x == 'w63':\n        return True\n    elif x == 'w64':\n        return True\n    elif x == 'w65':\n        return True\n    elif x == 'w66':\n        return True\n    elif x == 'w67':\n        return True\n    elif x == 'w68':\n        return True\n    elif x == 'w69':\n        return True\n    elif x == 'w70':\n        return True\n    elif x == 'w71':\n        return True\n    elif x == 'w72':\n        return True\n    elif x == 'w73':\n        return True\n    elif x == 'w74':\n        return True\n    elif x == 'w75':\n        return True\n    elif x == 'w76':\n        return True\n    elif x == 'w77':\n        return True\n    elif x == 'w78':\n        return True\n    elif x == 'w79':\n        return True\n    elif x == 'w80':\n        return True\n    elif x == 'w81':\n        return True\n    elif x == 'w82':\n        return True\n    elif x == 'w83':\n        return True\n    elif x == 'w84':\n        return True\n    elif x == 'w85':\n        return True\n    elif x == 'w86':\n        return True\n    elif x == 'w87':\n        return True\n    elif x == 'w88':\n        return True\n    elif x == 'w89':\n        return True\n    elif x == 'w90':\n        return True\n    elif x == 'w91':\n        return True\n    elif x == 'w92':\n        return True\n    elif x == 'w93':\n        return True\n    elif x == 'w94':\n        return True\n    elif x == 'w95':\n        return True\n    elif x == 'w96':\n        return True\n    elif x == 'w97':\n        return True\n    elif x == 'w98':\n        return True\n    elif x == 'w99':\n        return True\n    elif x == 'w100':\n        return True\n    elif x == 'w101':\n        return True\n    elif x == 'w102':\n        return True\n    elif x == 'w103':\n        return True\n    elif x == 'w104':\n        return True\n    elif x == 'w105':\n        return True\n    elif x == 'w106':\n        return True\n    elif x == 'w107':\n        return True\n    elif x == 'w108':\n        return True\n    elif x == 'w109':\n        return True\n    elif x == 'w110':\n        return True\n    elif x == 'w111':\n        return True\n    elif x == 'w112':\n        return True\n    elif x == 'w113':\n        return True\n    elif x == 'w114':\n        return True\n    elif x == 'w115':\n        return True\n    elif x == 'w116':\n        return True\n    elif x == 'w117':\n        return True\n    elif x == 'w118':\n        return True\n    elif x == 'w119':\n        return True\n    elif x == 'w120':\n        return True\n    elif x == 'w121':\n        return True\n    elif x == 'w122':\n        return True\n    elif x == 'w123':\n        return True\n    elif x == 'w124':\n        return True\n    elif x == 'w125':\n        return True\n    elif x == 'w126':\n        return True\n    elif x == 'w127':\n        return True\n    elif x == 'w128':\n        return True\n    elif x == 'w129':\n        return True\n    elif x == 'w130':\n        return True\n    elif x == 'w131':\n        return True\n    elif x == 'w132':\n        return True\n    elif x == 'w133':\n        return True\n    elif x == 'w134':\n        return True\n    elif x == 'w135':\n        return True\n    elif x == 'w136':\n        return True\n    elif x == 'w137':\n        return True\n    elif x == 'w138':\n        return True\n    elif x == 'w139':\n        return True\n    elif x == 'w140':\n        return True\n    elif x == 'w141':\n        return True\n    elif x == 'w142':\n        return True\n    elif x == 'w143':\n        return True\n    elif x == 'w144':\n        retur"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    y = x\n    if len(x)==7:\n        y=x\n    elif len(x)==6:\n        y=x[1:]\n    elif len(x)==5:\n        y=x[2:]\n    elif len(x)==4:\n        y=x[3:]\n    else:\n        return False\n    return y.isdigit()\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if ((x >= 100) and (x <= 199)): \n        return True\n    elif ((x >= 200) and (x <= 299)): \n        return True\n    elif ((x >= 300) and (x <= 399)): \n        return True\n    elif ((x >= 400) and (x <= 499)): \n        return True\n    elif ((x >= 500) and (x <= 599)): \n        return True\n    elif ((x >= 600) and (x <= 699)): \n        return True\n    elif ((x >= 700) and (x <= 799)): \n        return True\n    elif ((x >= 800) and (x <= 899)): \n        return True\n    elif ((x >= 900) and (x <= 999)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    a = str(x)\n    if a[0]!= a[-1]:\n        return False\n    else:\n        a = a[1:-1]\n        for i in a:\n            if i!= '8':\n                return False\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    elif num == 0:\n        return True\n    else:\n        return num % 10 == 0 and rev(num // 10)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num<0:\n        return False\n    elif num==0:\n        return True\n    numstr = str(num)\n    if int(numstr[::-1])==num-1:\n        return True\n    else:\n        return False\n        \n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == num[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num:\n        rev = (rev * 10) + (num%10)\n        num /= 10\n    return num == rev/10\n    \ndef isPal(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    return num == int(str(num)[::-1])\n    \ndef oddFact(num):\n    '''\n    Write a python function to find the odd-factorial of a given number.\n    '''\n    factorial = 1\n    while num:\n        factorial *= num%10\n        num /= 10\n    return factorial\n    \ndef factorial(num):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    while num:\n        factorial *= num\n        num -= 1\n    return factorial\n    \ndef isPalindrome(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    return num == int(str(num)[::-1])\n    \ndef isPrime(num):\n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n    \ndef getGCD(num1, num2):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if num1 > num2:\n        num1, num2 = num2, num1\n    while num1!= 0:\n        num1, num2 = num2 % num1, num1\n    return num2\n    \ndef lcm(num1, num2):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return num1 * num2 // getGCD(num1, num2)\n    \ndef getLCM(num1, num2, num3):\n    '''\n    Write a python function to find the LCM of three numbers.\n    '''\n    return lcm(num1, lcm(num2, num3))\n    \ndef getLowestNumber(num1, num2, num3):\n    '''\n    Write a python function to find the lowest number from three numbers.\n    '''\n    if num1 > num2:\n        if num1 > num3:\n            return num3\n        else:\n            return num1\n    else:\n        if num2 > num3:\n            return num3\n        else:\n            return num2\n    \ndef isPrime2(num):\n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n    \ndef primeNumber():\n    '''\n    Write a python function to find the prime number less than a given number.\n    '''\n    num = int(input(\"Enter the number:\"))\n    if num <= 1:\n        print(\"Enter a number greater than 1\")\n    else:\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n    \ndef findPrime(num):\n    '''\n    Write a python function to find the first nth prime number.\n    '''\n    prime = 2\n    count = 1\n    while count!= num:\n        if isPrime(prime):\n            count += 1\n        prime += 1\n    return prime\n    \ndef primeCount(num):\n    '''\n    Write a python function to find the prime factorization of a given number.\n    '''\n    count = 1\n    num = int(num)\n    prime = 2\n    while num > 1:\n        while num%prime == 0:\n            count += 1\n            num /= prime\n        prime += 1\n    return count\n    \ndef isSquare(num):\n    '''\n    Write a python function to check if a given number is a perfect square.\n    '''\n    root = num ** 0.5\n    return root == int(root)\n    \ndef isSquare(num):\n    '''\n    Write a python function to find the square root of a given number.\n    '''\n    num = int(num)\n    guess = num / 2\n    while guess * guess!= num:\n        guess = (guess + num/guess) / 2\n    return guess\n    \ndef isPower(num, power):\n    '''\n    Write a python function to check if a given number is a power of a given base.\n    '''\n    return num ** power == int(num ** power)\n    \ndef getBase(num):\n    '''\n    Write a python function to find the base of a given number.\n    '''\n    for i in range(2, num):\n        if isPower(num, i):\n            return i\n            \ndef getExponent(num):\n    '''\n    Write a python function to find the exponent of a given number.\n    '''\n    for i in range(2, num):\n        if isPower(num, i):\n            return i\n            \ndef getFactorial(num):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    while num:\n        factorial *= num\n        num -= 1\n    return factorial\n    \ndef getFactorial(num):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    while num:\n        factorial *= num\n        num -= 1\n    return factorial\n    \ndef getSum(num1, num2):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return num1 + num2\n    \ndef getProd(num1, num2):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return num1 * num2\n    \ndef isUpper(num):\n    '''\n    Write a python function to check if a given number is an upper case letter.\n    '''\n    return num >= 65 and num <= 90\n    \ndef isLower(num):\n    '''\n    Write a python function to check if a given number is an lower case letter.\n    '''\n    return num >= 97 and num <= 122\n    \ndef isDigit(num):\n    '''\n    Write a python function to check if a given number is an integer.\n    '''\n    return num >= 48 and num <= 57\n    \ndef isLetters(num):\n    '''\n    Write a python function to check if a given number is a letter.\n    '''\n    return num >= 97 and num <= 122\n    \ndef isCapital(num):\n    '''\n    Write a python function to check if a given number is a capital letter.\n    '''\n    return num >= 65 and num <= 90\n    \ndef isNumber(num):\n    '''\n    Write a python function to check if a given number is a number.\n    '''\n    return num >= 48 and num <= 57\n    \ndef isSpecialChar(num):\n    '''\n    Write a python function to check if a given number is a special character.\n    '''\n    return num >= 33 and num <= 47\n    \ndef isLetter(num):\n    '''\n    Write a python function to check if a given number is a letter.\n    '''\n    return num >= 97 and num <= 122\n    \ndef isUpperOrDigit(num):\n    '''\n    Write a python function to check if a given number is a upper or digit.\n    '''\n    return isUpper(num) or isDigit(num)\n    \ndef isLowerOrDigit(num):\n    '''\n    Write a python function to check if a given number is a lower or digit.\n    '''\n    return isLower(num) or isDigit(num)\n    \ndef isNumberOrSpecialChar(num):\n    '''\n    Write a python function to check if a given number is a number or a special character.\n    '''\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num%2==0:\n        return num+1\n    else:\n        return num-1\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num /= 10\n    return rev_num == num - 2\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==0:\n        return True\n    rev_num=0\n    while num:\n        pop=num%10\n        num=num//10\n        rev_num=rev_num*10+pop\n    if num==rev_num-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=0\n    while num:\n        rev=rev*10+num%10\n        num=num/10\n    if num==0 and rev/2==rev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=0\n    while(num>0):\n        dig=num%10\n        rev=rev*10+dig\n        num=num//10\n    if(rev==(rev*2)):\n        return 1\n    return 0\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    N = len(arr)\n    if N==0 : return -1\n    elif N==1 : return arr[0]\n    elif N==2 : return max(arr[0],arr[1])\n    else : \n        if arr[0]>arr[1] : return arr[0]\n        else : return arr[1]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1 : \n        return arr[0]\n    else : \n        return max(arr[0] * arr[1], arr[1] * arr[2], arr[0] * arr[2], arr[0] + arr[1] + arr[2])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for num in arr :\n        if num > max_num :\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = arr[0]\n    for i in range(1,len(arr)) :\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1 :\n        return arr[0]\n    if len(arr) == 2 :\n        return max(arr[0],arr[1])\n    #print(arr)\n    arr.sort()\n    #print(arr)\n    \n    return arr[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(0, len(arr)) :\n        for j in range(i+1, len(arr)) :\n            if arr[i] < arr[j] :\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in arr :\n        if i > max :\n            max = i\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    temp = []\n    for num in arr : \n        temp.append(int(num))\n    temp.sort()\n    temp.reverse()\n    return temp[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = arr[0]*arr[1]*arr[n-2]*arr[n-1]\n    for i in range(2, n-1) :\n        temp = arr[i-2]*arr[i-1]*arr[n-1]\n        if temp > max_num :\n            max_num = temp\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\n    \nprint(opposite_Signs(12,-3))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(-1,2))\nprint(opposite_Signs(-5,-4))\nprint(opposite_Signs(12,-3))\nprint(opposite_Signs(-12,-3))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return False\n    elif x<0 and y<0:\n        return False\n    elif x<0 and y>0:\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y>0) or (x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y<0:\n        return True\n    elif x*y>0:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return False\n    elif x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0) ^ (y>0)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False\ndef factorize(x): \n    '''\n    Write a python function to find the prime factorization of an integer.\n    '''\n    factor_list = []\n    factors = []\n    temp = x\n    while temp > 1:\n        for i in range(2, temp+1):\n            if temp % i == 0:\n                if i not in factors:\n                    factors.append(i)\n                factor_list.append(i)\n                temp /= i\n    return factors\ndef pyramid(height, base_row, spaces):\n    '''\n    Write a python function to print a pyramid shape with spaces between each row of the pyramid.\n    '''\n    for i in range(height):\n        for j in range(spaces):\n            print(\" \", end =\"\")\n        for k in range(base_row):\n            print(\"*\", end =\"\")\n        print()\n        spaces -= 1\ndef word_count(a_str, word):\n    '''\n    Write a python function to count the number of occurrences of a given word in a string.\n    '''\n    return a_str.count(word)\ndef reverse_string(a_str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return a_str[::-1]\ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    return sorted(s1) == sorted(s2)\ndef add_digit_to_digit(digit):\n    '''\n    Write a python function to add a digit to a digit.\n    '''\n    return int(digit) + 1\ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    a, b = 0, 1\n    for i in range(n-1):\n        a, b = b, a + b\n    return a\ndef count_digit(n, digit):\n    '''\n    Write a python function to count the number of digits in a given integer.\n    '''\n    count = 0\n    while n > 0:\n        n = n // 10\n        count += 1\n    return count\ndef largest_digit(n):\n    '''\n    Write a python function to find the largest digit in a given integer.\n    '''\n    temp = n\n    while temp > 0:\n        if temp % 10 > temp//10 % 10:\n            return temp % 10\n        else:\n            temp = temp // 10\n    return 0\ndef number_of_digits(n):\n    '''\n    Write a python function to count the number of digits in a given integer.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count\ndef remove_digit(n, digit):\n    '''\n    Write a python function to remove a digit from a given integer.\n    '''\n    return n//10\ndef can_be_divided_by(n, x):\n    '''\n    Write a python function to check whether a number is divisible by a given number.\n    '''\n    if n % x == 0:\n        return True\n    else:\n        return False\ndef get_longest_word(a_str):\n    '''\n    Write a python function to find the longest word in a string.\n    '''\n    l = len(a_str)\n    words = a_str.split()\n    longest = 0\n    for i in range(l):\n        if len(words[i]) > longest:\n            longest = len(words[i])\n    return longest\ndef is_palindrome(a_str):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if a_str == a_str[::-1]:\n        return True\n    else:\n        return False\ndef remove_whitespace(a_str):\n    '''\n    Write a python function to remove leading and trailing whitespace characters from a string.\n    '''\n    return a_str.strip()\ndef is_multiple(n, x):\n    '''\n    Write a python function to check whether a given number is a multiple of a given number.\n    '''\n    if n % x == 0:\n        return True\n    else:\n        return False\ndef is_multiple_of_seven(n):\n    '''\n    Write a python function to check whether a given number is a multiple of 7 or not.\n    '''\n    if n % 7 == 0:\n        return True\n    else:\n        return False\ndef is_leap_year(n):\n    '''\n    Write a python function to check whether a given year is a leap year or not.\n    '''\n    if n % 4 == 0 and n % 100!= 0:\n        return True\n    else:\n        return False\ndef is_an_int(a_str):\n    '''\n    Write a python function to check whether a given string is a integer or not.\n    '''\n    try:\n        int(a_str)\n        return True\n    except ValueError:\n        return False\ndef prime_number_of_digits(n):\n    '''\n    Write a python function to check whether a given number is a prime number or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\ndef is_palindrome_number(n):\n    '''\n    Write a python function to check whether a given integer is a palindrome or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        reverse = 0\n        while n > reverse:\n            reverse = reverse * 10 + n % 10\n            n = n // 10\n        if reverse == n or reverse // 10 == n:\n            return True\n        else:\n            return False\ndef sum_of_digits(n):\n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\ndef gcd(x, y):\n    '''\n    Write a python function to find the greatest common divisor of two integers.\n    '''\n    while y:\n        x, y = y, x % y\n    return x\ndef is_palindrome_number(n):\n    '''\n    Write a python function to check whether a given integer is a palindrome or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        reverse = 0\n        while n > reverse:\n            reverse = reverse * 10 + n % 10\n            n = n // 10\n        if reverse == n or reverse // 10 == n:\n            return True\n        else:\n            return False\ndef number_of_digits(n):\n    '''\n    Write a python function to calculate the number of digits in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count\ndef is_an_int(a_str):\n    '''\n    Write a python function to check whether a given string is an integer or not.\n    '''\n    try:\n        int(a_str)\n        return True\n    except ValueError:\n        return False\ndef is_multiple_of_seven(n):\n    '''\n    Write a python function to check whether a given number is a multiple of 7 or not.\n    '''\n    if n % 7 == 0:\n        return True\n    else:\n        return False\ndef is_palindrome(a_str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if a_str == a_str[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome_number(n):\n    '''\n    Write a python function to check whether a given integer is a palindrome or not.\n    ''"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y>0) or (x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n    \nprint opposite_Signs(1,-3"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**2 + n + 1 == (n + 1) ** 2\n    \ndef find_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**2 + n + 1\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n**2 - n + 1 == (n - 1) ** 2\n    \ndef find_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n**2 - n + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n**2 + n) % 2 == 0\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return True\n    \n    if n % 2 == 1:\n        for i in range(1, 4):\n            if is_octagonal(n - i):\n                return True\n            if is_octagonal(n + i):\n                return True\n        return False\n    else:\n        for i in range(2, 4):\n            if is_octagonal(n - i):\n                return True\n            if is_octagonal(n + i):\n                return True\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n == int(n**0.5)**2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 2) == (2*n**2 + n)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5)) / 16\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (3*n - 2)*n/2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #solution\n    nth = (3*n**2 + 3*n - 2) / 2\n    return nth\n    \nif __name__ == \"__main__\":\n    print is_octagonal(1)\n    print is_octagonal(2)\n    print is_octagonal(3)\n    print is_octagonal(5)\n    print is_octagonal(12)"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    res = 1\n    if n == 1:\n        return 1\n    else:\n        for i in range(1, n):\n            res += 6 * (i + 1) ** 2\n        return res\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        sums = 0\n        for j in range(i, len(s)):\n            sums += int(s[j])\n            d[sums] += 1\n    return d\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    count = 0\n    for i in xrange(len(s)):\n        count += count_Substrings_Util(s,i,i,0)\n        count += count_Substrings_Util(s,i,i,1)\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        temp = []\n        for j in range(len(s)):\n            if s[j] not in temp:\n                if sum(int(x) for x in s[i:j+1]) == j+1:\n                    count += 1\n                temp.append(s[j])\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in xrange(len(s)):\n        j = i\n        k = 1\n        temp = s[i]\n        while j >= 0 and k < len(s):\n            if int(s[j]) + k == len(s[j:k+1]):\n                count += 1\n            j -= 1\n            k += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    n = len(s)\n    for i in xrange(n):\n        s1 = s[i]\n        count = 1\n        for j in xrange(i+1,n):\n            s2 = s[j]\n            if s1 == s2:\n                count+=1\n            else:\n                break\n        result+=count\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substr_sum_map = {}\n    # print(substr_sum_map)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if j-i <= len(s):\n                substr_sum_map[j-i] = substr_sum_map.get(j-i,0) + 1\n    print(substr_sum_map)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    count = 0\n    sub = []\n    result = []\n    for i in range(0,len(s)):\n        for j in range(i,len(s)):\n            sub.append(s[i:j+1])\n    for i in sub:\n        if len(i)>1:\n            if sum([int(j) for j in i]) == len(i):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    N = len(s)\n    dp = [[0 for j in xrange(N)] for i in xrange(N)]\n    for i in xrange(N):\n        dp[i][i] = 1\n    for i in xrange(N-1):\n        if s[i] == s[i+1]:\n            dp[i][i+1] = 1\n    for l in xrange(3, N+1):\n        for i in xrange(N-l+1):\n            j = i + l - 1\n            if s[i] == s[j] and dp[i+1][j-1] == 1:\n                dp[i][j] = 1\n    sum_count = 0\n    for i in xrange(N):\n        sum_count += dp[i][i]\n    return sum_count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            sum_digits = sum(int(digit) for digit in s[i:j])\n            d[sum_digits] += 1\n    return d[len(s)]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Your Code Here\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = xs[0]\n    for i in range(len(xs)):\n        if num > xs[i]:\n            num = xs[i]\n    return num\n    \n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for i in xs:\n        if i < min_num:\n            min_num = i\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return 0\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    list_of_pairs = [(test_list[i],test_list[i+1]) for i in range(len(test_list)-1)]\n    max_diff = -1\n    for pair in list_of_pairs:\n        if abs(pair[0]-pair[1]) > max_diff:\n            max_diff = abs(pair[0]-pair[1])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    sorted_list = sorted(test_list)\n    max_difference = 0\n    for i in xrange(0, len(test_list), 2):\n        difference = sorted_list[i + 1] - sorted_list[i]\n        max_difference = max(max_difference, difference)\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    list_len = len(test_list)\n    diff_list = []\n    for i in range(0,list_len):\n        for j in range(i+1,list_len):\n            diff = test_list[i] - test_list[j]\n            diff_list.append(abs(diff))\n    return max(diff_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            max_diff = max(max_diff, abs(test_list[i]-test_list[j]))\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                diff_list.append(test_list[j]-test_list[i])\n    return max(diff_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    temp_list = []\n    for i in test_list:\n        for j in test_list:\n            if (i, j) not in temp_list and (j, i) not in temp_list:\n                temp_list.append((i, j))\n    # return max([(abs(test_list[i] - test_list[j]), (i, j)) for i in range(len(test_list)) for j in range(i + 1, len(test_list))])\n    return max([(abs(test_list[i] - test_list[j]), (i, j)) for i in range(len(test_list)) for j in range(i + 1, len(test_list))])\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(test_list[i] - test_list[i+1]) for i in range(len(test_list)-1))\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = 0\n    n = len(test_list)\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if test_list[i] > test_list[j]:\n                diff = max(diff, test_list[j] - test_list[i])\n    return diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if test_list == []:\n        return 0\n    max_diff = 0\n    for i in xrange(len(test_list) - 1):\n        for j in xrange(i + 1, len(test_list)):\n            max_diff = max(max_diff, abs(test_list[i] - test_list[j]))\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff_list.append(abs(test_list[i]-test_list[j]))\n    print diff_list\n    return max(diff_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda tup: tup[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjects = sorted(subjectmarks,key = lambda x:x[1],reverse = True)\n    return subjects\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list_of_tuples = [tuple(sublist) for sublist in subjectmarks]\n    list_of_tuples.sort(key=lambda x: x[1], reverse=True)\n    return list_of_tuples\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1],reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = sorted(subjectmarks, key = lambda x: x[1])\n    return marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda tup:tup[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #[('A', 1), ('B', 3), ('C', 2), ('D', 4), ('E', 5), ('F', 6), ('G', 7), ('H', 8), ('I', 9), ('J', 10), ('K', 11), ('L', 12), ('M', 13), ('N', 14), ('O', 15), ('P', 16), ('Q', 17), ('R', 18), ('S', 19), ('T', 20), ('U', 21), ('V', 22), ('W', 23), ('X', 24), ('Y', 25), ('Z', 26)]\n    #Tuple[0] for sorting\n    #[('A', 1), ('B', 3), ('C', 2), ('D', 4), ('E', 5), ('F', 6), ('G', 7), ('H', 8), ('I', 9), ('J', 10), ('K', 11), ('L', 12), ('M', 13), ('N', 14), ('O', 15), ('P', 16), ('Q', 17), ('R', 18), ('S', 19), ('T', 20), ('U', 21), ('V', 22), ('W', 23), ('X', 24), ('Y', 25), ('Z', 26)]\n    \n    #sorted_list = sorted(subjectmarks, key=lambda tup: tup[1])\n    #print(sorted_list)\n    #['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    \n    sorted_list = sorted(subjectmarks, key=lambda tup: tup[1], reverse = True)\n    print(sorted_list)\n    #['P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'I', 'H', 'K', 'J', 'E', 'D', 'L', 'M', 'N', 'O', 'G', 'F', 'B', 'C', 'A']\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x : x[1])\n    return subjectmarks\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Base case: If there is no data, return 0\n    if data_list is None:\n        return 0\n    # Recursive case: If there is data, get the first item in the list, and call the function with the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return sum(data_list) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, (list, tuple)):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return recursive_sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == int:\n        return data_list\n    elif type(data_list) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return sum(data_list) + recursive_list_sum(data_list[1:])\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n    "
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    npos = 0\n    for num in list:\n        if num > 0:\n            npos = npos + 1\n    return npos\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    print count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    count = 0\n    \n    for item in list:\n        if item > 0:\n            count = count + 1\n    \n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos = pos + 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    cnt=0\n    for i in list:\n        if i>0:\n            cnt+=1\n    return cnt\n    "
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0]*n\n    bell[0] = 1\n    bell[1] = 2\n    for i in range(2, n):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # if n<0:\n    #     return None\n    # elif n==0:\n    #     return 1\n    # elif n==1:\n    #     return 1\n    # elif n==2:\n    #     return 2\n    # else:\n    #     return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n    return bell_number_iterative(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #If n is 0, there is only one possible way\n    if n == 0:\n        return 1\n    #If n is 1, there is only one way to partition\n    elif n == 1:\n        return 2\n    #If n is 2, there are four ways to partition the set\n    elif n == 2:\n        return 4\n    #If n is greater than 2, the number of ways to partition is n*(n+1)/2\n    else:\n        return n*(n+1)/2\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n        \nprint bell_number(5)\nprint bell_number(15)\nprint bell_number(2)"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    flag = 1\n    i = 0\n    while i < len(A)-1:\n        if A[i] <= A[i+1]:\n            i += 1\n        else:\n            flag = 0\n            break\n    if flag == 1:\n        print 'Array is monotonic'\n    else:\n        print 'Array is not monotonic'\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A == sorted(A) or A == sorted(A, reverse=True):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)):\n        if A[i]<=A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)):\n        if A[i]<A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0 or len(A) == 1: \n        return True \n    for i in range(len(A)-1): \n        if A[i] >= A[i+1]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(x<=y for x,y in zip(A, A[1:])) or \n    all(x>=y for x,y in zip(A, A[1:])))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i - 1]:\n                return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    try:\n        return len(set(A)) == 1 or len(set(A)) == len(A)\n    except:\n        return 0\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: return True\n    if A[0] >= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i+1]: return False\n        return True\n    if A[-1] <= A[-2]:\n        for i in range(len(A)-2, -1, -1):\n            if A[i] >= A[i+1]: return False\n        return True\n    else: return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in xrange(len(l) - len(s) + 1):\n        if s == l[i: i + len(s)]:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sublist in l:\n        if s == sublist:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) > len(s): return False\n    for i in range(len(s)):\n        if l[i]!= s[i]: return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return False\n    if l[:len(s)] == s:\n        return True\n    return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l): return False\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if l[i:i+len(s)] == s:\n                return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    \n    temp = sorted(Input)\n    \n    count = 0\n    for i in range(0,len(temp)-1):\n        if temp[i][1] == temp[i+1][1]:\n            count = count + 1\n        else:\n            break\n    \n    if count == len(temp)-1:\n        return True\n    else:\n        return False\n    \n    \ndef print_matrix(Input):\n    '''\n    Write a function to print the given matrix in spiral order.\n    '''\n    \n    \n    def reverse_matrix(Input):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        def get_row_width(Input):\n            '''\n            Write a function to print the given matrix in spiral order.\n            '''\n            \n            \n            def get_column_width(Input):\n                '''\n                Write a function to print the given matrix in spiral order.\n                '''\n                \n                \n                length = len(Input)\n                \n                if length < 4:\n                    return length\n                \n                mid = length/2\n                \n                if length % 2 == 0:\n                    return mid\n                \n                return mid + 1\n                \n            \n            row_width = get_column_width(Input)\n            \n            for row in range(0,len(Input)):\n                Input[row].append(0)\n                \n            for i in range(0,row_width):\n                Input[i][-1] = i\n            \n            return Input\n            \n        \n        row_width = get_row_width(Input)\n        \n        if row_width < 4:\n            return Input\n        \n        \n        new_row_width = row_width - 1\n        \n        for i in range(0,new_row_width):\n            Input[i] = Input[i] + Input[i+1]\n        \n        \n        Input.pop()\n        \n        return Input\n    \n    \n    def add_row_width(Input):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        row_width = len(Input)\n        \n        if row_width < 4:\n            return Input\n        \n        \n        new_row_width = row_width + 1\n        \n        for i in range(0,new_row_width):\n            Input[i] = Input[i] + [0]\n        \n        return Input\n        \n    \n    \n    def get_column_width(Input):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        length = len(Input)\n        \n        if length < 4:\n            return length\n        \n        mid = length/2\n        \n        if length % 2 == 0:\n            return mid\n        \n        return mid + 1\n        \n    \n    \n    def get_row_width(Input):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        length = len(Input)\n        \n        if length < 4:\n            return length\n        \n        mid = length/2\n        \n        if length % 2 == 0:\n            return mid\n        \n        return mid + 1\n        \n    \n    \n    def get_max_width(Input):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        row_width = get_row_width(Input)\n        \n        column_width = get_column_width(Input)\n        \n        if row_width < column_width:\n            return row_width\n        \n        return column_width\n    \n    \n    \n    def get_new_row_width(Input):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        row_width = get_row_width(Input)\n        \n        column_width = get_column_width(Input)\n        \n        if row_width < column_width:\n            return row_width\n        \n        return column_width\n    \n    \n    \n    def find_last_index_of_row(Input):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        def get_last_index_of_row(Input,row_width):\n            '''\n            Write a function to print the given matrix in spiral order.\n            '''\n            \n            \n            length = row_width\n            \n            if length < 4:\n                return length\n            \n            mid = length/2\n            \n            if length % 2 == 0:\n                return mid\n            \n            return mid + 1\n            \n        \n        row_width = get_row_width(Input)\n        \n        return get_last_index_of_row(Input,row_width)\n        \n    \n    \n    def get_new_column_width(Input):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        length = len(Input)\n        \n        if length < 4:\n            return length\n        \n        mid = length/2\n        \n        if length % 2 == 0:\n            return mid\n        \n        return mid + 1\n        \n    \n    \n    def get_last_index_of_column(Input):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        length = len(Input)\n        \n        if length < 4:\n            return length\n        \n        mid = length/2\n        \n        if length % 2 == 0:\n            return mid\n        \n        return mid + 1\n        \n    \n    \n    def print_matrix_in_spirale(Input):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        row_width = get_new_row_width(Input)\n        \n        column_width = get_new_column_width(Input)\n        \n        row_index = 0\n        column_index = 0\n        \n        output = []\n        \n        for i in range(0,row_width):\n            output.append([])\n        \n        for i in range(0,row_width):\n            output[i].append(0)\n        \n        for i in range(0,row_width):\n            output[i].append(0)\n        \n        for i in range(0,column_width):\n            output[0][i] = i\n        \n        for i in range(0,column_width):\n            output[row_width-1][i] = i\n        \n        \n        \n        for i in range(0,row_width):\n            for j in range(0,column_width):\n                output[i][j] = Input[row_index][column_index]\n                \n                if row_index == 0:\n                    row_index = row_index + 1\n                else:\n                    row_index = row_index - 1\n                    \n                if column_index == 0:\n                    column_index = column_index + 1\n                else:\n                    column_index = column_index - 1\n                    \n        return output\n        \n        \n    \n    \n    def get_middle_index(Input,row_width,column_width):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        \n        if row_width < 4:\n            return row_width\n        \n        mid = row_width/2\n        \n        if row_width % 2 == 0:\n            return mid\n        \n        return mid + 1\n        \n    \n    \n    def get_min_row_width(Input,row_width):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        length = row_width\n        \n        if length < 4:\n            return length\n        \n        mid = length/2\n        \n        if length % 2 == 0:\n            return mid\n        \n        return mid + 1\n        \n    \n    \n    def get_min_column_width(Input,column_width):\n        '''\n        Write a function to print the given matrix in spiral order.\n        '''\n        \n        \n        length = column_width\n        \n        if length < 4:\n            return length\n        \n        mid = length"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = True\n    for x in range(0, len(Input)):\n        if len(Input[x])!= len(Input[x-1]):\n            Output = False\n            break\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set([len(x) for x in Input])) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    list_tuple = []\n    for i in Input:\n        list_tuple.append(len(i))\n    \n    if len(list_tuple) == len(set(list_tuple)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    List = []\n    for i in Input:\n        List.append(len(i))\n    print(List)\n    for i in range(len(List) - 1):\n        if List[i]!= List[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if Input[0][0] == Input[1][0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #Write your code here\n    tup = []\n    for i in Input:\n        tup.append(len(i))\n    if tup.count(tup[0]) == len(tup):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    list_of_tuple=[]\n    n=len(Input)\n    for i in range(n):\n        j=0\n        for j in range(n):\n            if i!=j:\n                if len(Input[i])!=len(Input[j]):\n                    break\n        else:\n            list_of_tuple.append(Input[i])\n    if len(list_of_tuple)==1:\n        return 'ALL'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = []\n    for i in Input:\n        lengths.append(len(i))\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    m = len(Input)\n    if m == 0:\n        return False\n    for i in range(m):\n        if len(Input[i])!= m:\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if nums[i] > nums[j]:\n                tmp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = tmp\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swaps = True\n    while gap > 1 or swaps:\n        gap = max(1, int(gap/1.25))\n        swaps = False\n        for i in range(len(nums)-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swaps = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(1, len(nums)):\n        key = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > key:\n            nums[j + 1] = nums[j]\n            j -= 1\n            nums[j + 1] = key\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not isinstance(nums, list):\n        raise TypeError('Input must be a list!')\n    if len(nums) < 2:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(length - 1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # The first step is to generate a sublist, so that the smallest number of\n    # elements in the sublist is greater than 1.\n    \n    # For example, [2,4,5,3,1] will give us [2,4,5,1,3] as the sublist.\n    \n    # We then begin to compare the first two elements in the sublist.\n    # If they are different, we exchange them.\n    \n    # Now we continue the process until we reach the end of the list,\n    # since there is no way to get a sublist with greater than one element\n    # smaller than the original list.\n    \n    # We continue this process until we reach the end of the list\n    \n    # Time Complexity: O(nlogn)\n    \n    # Space Complexity: O(n)\n    \n    # We sort our sublist.\n    # Then we check for the smaller number of elements in the sublist.\n    # If it is greater than one, we exchange the two elements.\n    # If it is less than one, we are done, since there is no way to get a\n    # sublist with greater than one element smaller than the original list.\n    \n    # We then start this process again, but this time from the second element\n    # until the end of the list.\n    \n    # Time Complexity: O(nlogn)\n    \n    # Space Complexity: O(n)\n    \n    sublist = nums[:]\n    \n    while len(sublist) > 1:\n        \n        # The first element in our sublist is our smallest number.\n        # We know that there is a sublist with one element smaller than it.\n        \n        # The smallest element in our sublist is the minimum in the original\n        # list.\n        \n        # min_num is the index of the smallest number in the original list.\n        # min_num is the index of the smallest number in our sublist.\n        \n        min_num = 0\n        \n        # We then find the index of the smallest number in our sublist.\n        for index in range(1, len(sublist)):\n            \n            # min_num is the index of the smallest number in our sublist.\n            \n            if sublist[index] < sublist[min_num]:\n                \n                min_num = index\n                \n        # Now that we have min_num, we know that the smallest number in our\n        # sublist is the smallest number in the original list.\n        \n        # We then exchange the smallest number in our sublist with the smallest\n        # number in our original list.\n        \n        # min_num is the index of the smallest number in our original list.\n        # sublist[min_num] is the smallest number in our original list.\n        \n        sublist[min_num] = sublist[0]\n        sublist[0] = sublist[min_num]\n        \n        # Then we remove the smallest number from our original list.\n        \n        sublist.pop(min_num)\n        \n    return sublist\n    \n    \n    "
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # check if list is sorted\n    if nums == sorted(nums):\n        return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return ((n*n)**0.5 - int(n*n**0.5)) == 0\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return int(math.sqrt(n))**2 == n\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        n = -n\n    for i in range(1, int(n**0.5) + 1):\n        if n - i**2 == 0 or n - i**2 == -i**2:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        if ((n-i)**2)==n: \n            return True\n        elif ((n+i)**2)==n: \n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5)):\n        for j in range(int(n**0.5)):\n            if i**2+j**2==n:\n                print('Given number is a difference of two squares')\n                return\n    print('Given number is not a difference of two squares')\ndef main():\n    print(dif_Square(25))\nif __name__=='__main__':\n    main("
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    cnt = 0\n    for i in xrange(1,n):\n        if n-i**2 in xrange(1,n):\n            cnt += 1\n    if cnt==2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    for i in range(n+1):\n        for j in range(i+1):\n            diff = math.sqrt((i*i) + (j*j))\n            if diff.is_integer():\n                if (i*i) == (j*j):\n                    return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    from math import floor\n    \n    if n <= 0:\n        print('The number must be positive')\n        return False\n    \n    if n == 1:\n        print('The given number is a square number')\n        return True\n    \n    if n == 2:\n        print('The given number is a difference of two square numbers')\n        return True\n    \n    if n % 2 == 0:\n        print('The given number is a difference of two square numbers')\n        return True\n    \n    dif = int(floor(sqrt(n)) - sqrt(n))\n    print('The given number is a difference of two square numbers', dif)\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        return True\n    i = 1\n    while i*i <= n:\n        if n - i*i == i:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s1 = int(math.sqrt(n))\n    s2 = s1*s1\n    if n == s2:\n        return True\n    elif n > s2:\n        return False\n    else:\n        s3 = s1*s1 + s1\n        if s3 < n:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return True\n    \n    if len(patterns) == 0:\n        return False\n    \n    if len(colors) == 1 and len(patterns) == 1:\n        return True\n    \n    if len(patterns) == 1:\n        return (colors[0] == patterns[0])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pat_dict = {}\n    for pattern in patterns:\n        if pattern in pat_dict:\n            pat_dict[pattern] += 1\n        else:\n            pat_dict[pattern] = 1\n    \n    for color in colors:\n        if color in pat_dict:\n            if pat_dict[color] <= 1:\n                pat_dict.pop(color)\n                continue\n            else:\n                pat_dict[color] -= 1\n        else:\n            return False\n    return True\n    \ndef solve_it(input_data):\n    # Modify this code to run your optimization algorithm\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    result = True\n    \n    for pattern in patterns:\n        if pattern[0] in colors:\n            \n            if pattern[1] not in colors:\n                return False\n            \n            else:\n                index1 = colors.index(pattern[0])\n                index2 = colors.index(pattern[1])\n                \n                if pattern[2] not in colors:\n                    return False\n                \n                else:\n                    index3 = colors.index(pattern[2])\n                    \n                    if index1 == index2 or index1 == index3 or index2 == index3:\n                        return False\n                    \n    return result\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #base case\n    if len(colors) == 1:\n        return True\n    #recursive case\n    if patterns[0] == colors[0]:\n        return is_samepatterns(colors[1:], patterns[1:])\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] == '<':\n            if colors[i] == 'R':\n                return False\n        elif patterns[i] == '>':\n            if colors[i] == 'B':\n                return False\n        elif patterns[i] == '<>':\n            if colors[i]!= colors[i-1]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pos = 0\n    for pattern in patterns:\n        pos += pattern[0]\n        if pos > len(colors) - 1:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def color_with_pattern(color, pattern):\n        '''\n        Write a function to check whether the color given follows the pattern.\n        '''\n        for i in xrange(len(pattern)):\n            if pattern[i] == 'W':\n                if color[i]!= 'W':\n                    return False\n            else:\n                if color[i] == 'W':\n                    return False\n        return True\n        \n    for color in colors:\n        for pattern in patterns:\n            if color_with_pattern(color, pattern) == False:\n                return False\n    return True\n    \ndef is_samepatterns2(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def color_with_pattern(color, pattern):\n        '''\n        Write a function to check whether the color given follows the pattern.\n        '''\n        if pattern == None:\n            return True\n        \n        for i in xrange(len(pattern)):\n            if pattern[i] == 'W':\n                if color[i]!= 'W':\n                    return False\n            else:\n                if color[i] == 'W':\n                    return False\n        return True\n        \n    for color in colors:\n        for pattern in patterns:\n            if color_with_pattern(color, pattern) == False:\n                return False\n    return True\n    \ndef test_is_samepatterns():\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW']) == True\n    assert is_samepatterns(['W', 'W', 'B', 'W', 'B', 'W'], ['WBWBWBWB', 'BWBWBWBW', 'WBWBWBWB', 'BWBWBWBW', 'W"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    while i < len(colors):\n        for pattern in patterns:\n            if pattern[i] == colors[i]:\n                i += 1\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_dict = {}\n    for i in range(len(patterns)):\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = 1\n        else:\n            pattern_dict[patterns[i]] += 1\n    for key in pattern_dict:\n        if pattern_dict[key]!= colors.count(key):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    if len(colors) == 0:\n        return True\n    currentColor = colors[0]\n    for i in range(1, len(colors)):\n        if currentColor!= patterns[i]:\n            return False\n        currentColor = colors[i]\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        temp = []\n        for elem in t:\n            if elem % K == 0:\n                temp.append(elem)\n        if len(temp) == len(t):\n            result.append(t)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #set of tuples\n    s = set()\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    i = 0\n    j = 0\n    for tuple in test_list:\n        for x in tuple:\n            if x % K!= 0:\n                i = i + 1\n                break\n        if i == len(tuple):\n            j = j + 1\n        i = 0\n    return j\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(x,y) for x, y in test_list if (y % K) == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(x%K==0 for x in i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # return [t for t in test_list if len(set(t)) == K]\n    return [[x for x in t if x % K == 0] for t in test_list]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(j%K == 0 for j in i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if i[0] % K == 0 and i[1] % K == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(elem % K == 0 for elem in i):\n            result.append(i)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    possible_tuples = []\n    for elem in test_list:\n        if elem[0]%K == 0 and elem[1]%K == 0:\n            possible_tuples.append(elem)\n    return possible_tuples\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    # make sure n is an integer\n    n = int(n)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\ndef is_Diff2(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\ndef count_digit(n): \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n))\ndef count_digit2(n): \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n))\ndef count_digit3(n): \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n))\ndef count_digit4(n): \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n))\ndef is_divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible2(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible3(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible4(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible5(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible6(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible7(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible8(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible9(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible10(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible11(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible12(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible13(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible14(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible15(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible16(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible17(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\ndef is_divisible18(n): \n    '''\n    Write a python function to find whether a number is divisible by 2,3,4,5,6.\n    '''\n    if (n%2==0) and (n%3==0) and (n%4==0) and (n%5==0) and (n%6==0):\n        return True\n    else:\n        return False\nde"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return(len(s) % 2 == 0)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print \"The word is even\"\n    else:\n        print \"The word is odd\"\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # nth tetrahedral number is sum of geometric sequence starting from 1, 1, 3, 7, 19, 37, 61, 127,....\n    # Use geometric progression 1, 3, 5,... to generate this sequence\n    # return sum(range(1, n+1))\n    return sum([n * ((n+1) ** (i+1)) / ((i+1)*(i+2)*(i+3)) for i in range(n)])\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 6\n    if n == 2:\n        return 15\n    if n == 3:\n        return 28\n    return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n    \ndef check_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    if s[0] == s[-1]:\n        return check_palindrome(s[1:-1])\n    return False\n    \ndef factorial(n):\n    '''\n    Write a function to compute n!\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return factorial(n-1) * n\n    \ndef check_power(a, b):\n    '''\n    Write a function to check if a number is a power of b.\n    '''\n    if b == 1:\n        return True\n    if a == 0:\n        return False\n    if a % b == 0:\n        return check_power(a/b, b)\n    return False\n    \ndef check_permutation(s1, s2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    for i in xrange(len(s1)):\n        if s1[i] == s2[i]:\n            continue\n        if s1.find(s2[i])!= -1:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n * (n + 1) * (n + 2) * (n + 3) / 6)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return tetrahedral_number(n-1) + sum(range(1, n+1))\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 10\n    if n == 4:\n        return 22\n    return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    return int(n*(n+1)*(n+2)/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tn(n): \n        return n*(n+1)*(n+2)*(n+3)/4\n    for i in range(1,n+1): \n        print(tn(i))\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum(range(n + 1))\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = n - 1\n    ans = 1\n    for i in xrange(n):\n        ans *= 4\n        ans %= 10**9 + 7\n    return ans\n    \ndef pentagonal_number(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    n = n - 1\n    ans = 1\n    for i in xrange(n):\n        ans *= 5\n        ans %= 10**9 + 7\n    return ans\n    \ndef hexagonal_number(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = n - 1\n    ans = 1\n    for i in xrange(n):\n        ans *= 6\n        ans %= 10**9 + 7\n    return ans\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    return (4/3) * (math.pi * r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4.0/3.0)*math.pi*(r**3)\n    return vol\ndef volume_sphere_simple(r):\n    '''\n    Write a function that finds the volume of a sphere by ignoring the radius\n    '''\n    vol = 4.0/3.0*math.pi\n    return vol\ndef volume_sphere_recursive(r):\n    '''\n    Write a function that finds the volume of a sphere by recursively computing\n    the volume of the sphere.\n    '''\n    if r <= 0:\n        return 0\n    else:\n        return 4.0/3.0*math.pi*(r**3)\ndef volume_cube(l):\n    '''\n    Write a function that finds the volume of a cube.\n    '''\n    vol = l**3\n    return vol\ndef volume_cube_recursive(l):\n    '''\n    Write a function that finds the volume of a cube by recursively computing\n    the volume of the cube.\n    '''\n    if l <= 0:\n        return 0\n    else:\n        return l**3\ndef volume_cube_simple(l):\n    '''\n    Write a function that finds the volume of a cube by ignoring the length\n    '''\n    vol = l**3\n    return vol\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = math.pi*(r**2)*h\n    return vol\ndef volume_cylinder_recursive(r, h):\n    '''\n    Write a function to find the volume of a cylinder by recursively computing\n    the volume of the cylinder.\n    '''\n    if r <= 0 or h <= 0:\n        return 0\n    else:\n        return math.pi*(r**2)*h\ndef volume_cylinder_simple(r, h):\n    '''\n    Write a function that finds the volume of a cylinder by ignoring the radius\n    and height.\n    '''\n    vol = math.pi*r*(r**2)*h\n    return vol\ndef sum_naturals(n):\n    '''\n    Write a function that sums the first n natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_naturals(n-1)\ndef sum_naturals_recursive(n):\n    '''\n    Write a function that sums the first n natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_naturals_recursive(n-1)\ndef sum_naturals_simple(n):\n    '''\n    Write a function that sums the first n natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n\ndef sum_recursive(n):\n    '''\n    Write a function that sums the first n natural numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_recursive(n-1)\ndef sum_iterative(n):\n    '''\n    Write a function that sums the first n natural numbers.\n    '''\n    total = 0\n    while n!= 0:\n        total += n\n        n -= 1\n    return total\ndef sum_iterative_recursive(n):\n    '''\n    Write a function that sums the first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_iterative_recursive(n-1)\ndef sum_iterative_simple(n):\n    '''\n    Write a function that sums the first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i\n    return total\ndef power_recursive(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    if base == 0:\n        return 0\n    else:\n        return base*power_recursive(base, exponent-1)\ndef power_recursive_2(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    if base == 0:\n        return 0\n    elif exponent == 1:\n        return base\n    else:\n        return base*power_recursive_2(base, exponent-1)\ndef power_iterative(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    total = 1\n    for i in range(exponent):\n        total *= base\n    return total\ndef power_iterative_2(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    total = 1\n    for i in range(exponent):\n        total *= base\n    return total\ndef power_iterative_simple(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    total = 1\n    for i in range(exponent):\n        total *= base\n    return total\ndef exp_iterative(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    total = 1\n    for i in range(exponent):\n        total = total*base\n    return total\ndef exp_iterative_2(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    total = 1\n    for i in range(exponent):\n        total = total*base\n    return total\ndef exp_iterative_simple(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    total = 1\n    for i in range(exponent):\n        total = total*base\n    return total\ndef exp_recursive(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    if base == 0:\n        return 0\n    elif exponent == 0:\n        return 1\n    else:\n        return base*exp_recursive(base, exponent-1)\ndef exp_recursive_2(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    if base == 0:\n        return 0\n    elif exponent == 0:\n        return 1\n    elif exponent == 1:\n        return base\n    else:\n        return base*exp_recursive_2(base, exponent-1)\ndef exp_recursive_3(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    if base == 0:\n        return 0\n    elif exponent == 0:\n        return 1\n    elif exponent == 1:\n        return base\n    else:\n        return base*exp_recursive_3(base, exponent-1)\ndef exp_recursive_4(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    if base == 0:\n        return 0\n    elif exponent == 0:\n        return 1\n    elif exponent == 1:\n        return base\n    else:\n        return base*exp_recursive_4(base, exponent-1)\ndef exp_recursive_5(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    if base == 0:\n        return 0\n    elif exponent == 0:\n        return 1\n    elif exponent == 1:\n        return base\n    else:\n        return base*exp_recursive_5(base, exponent-1)\ndef exp_iterative_5(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    total = 1\n    for i in range(exponent):\n        total = total*base\n    return total\ndef exp_iterative_5_2(base, exponent):\n    '''\n    Write a function that computes the exponential (base**exponent).\n    '''\n    total = 1\n    for i in range(exponent):\n        total = total*base\n    retur"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return ((4.0/3)*math.pi*(r**3))\ndef area_of_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return ((2*math.pi*r*(r+h)) + (2*math.pi*h*r))\ndef energy_of_atom(m,e):\n    '''\n    Write a function to find the kinetic energy of a particle.\n    '''\n    return (1.0/2)*m*(e**2)\ndef force_of_atom(m,e,a):\n    '''\n    Write a function to find the force acting on an atom due to gravity.\n    '''\n    return (g*m*e)\ndef moles_of_carbon_dioxide(m):\n    '''\n    Write a function to find the number of moles of carbon dioxide in one gram.\n    '''\n    return (m/(12.0*math.pi*(0.0816*((6.0*10**6)/m))))\ndef pressure_of_atmosphere(m):\n    '''\n    Write a function to find the pressure of atmosphere.\n    '''\n    return (1.0*(math.pi*(6.0*10**6)*((8.0*10**6)/m)))\ndef force_of_gravity(m,a,h):\n    '''\n    Write a function to find the force of gravity acting on an atom.\n    '''\n    return (m*a*h)\ndef pressure_of_atmosphere(m,h):\n    '''\n    Write a function to find the pressure of atmosphere.\n    '''\n    return (1.0*(math.pi*(6.0*10**6)*((8.0*10**6)/m)))\ndef force_of_gravity(m,a,h):\n    '''\n    Write a function to find the force of gravity acting on an atom.\n    '''\n    return (m*a*h)\ndef force_of_gravity_over_mass(m,a,h):\n    '''\n    Write a function to find the force of gravity acting on an atom.\n    '''\n    return (m*a/h)\ndef force_of_gravity_over_volume(m,v,h):\n    '''\n    Write a function to find the force of gravity acting on an atom.\n    '''\n    return (m*g*v/h)\ndef angle_of_slope(m,a,h):\n    '''\n    Write a function to find the angle of slope.\n    '''\n    return ((2.0*m*a)/h)\ndef heat_capacity_of_carbon_dioxide(m):\n    '''\n    Write a function to find the heat capacity of carbon dioxide.\n    '''\n    return (1.0*(6.0*10**6)*((8.0*10**6)/m))\ndef moles_of_carbon_dioxide(m):\n    '''\n    Write a function to find the number of moles of carbon dioxide in one gram.\n    '''\n    return (m/(12.0*math.pi*(0.0816*((6.0*10**6)/m))))\ndef energy_of_atom(m,e):\n    '''\n    Write a function to find the kinetic energy of a particle.\n    '''\n    return (1.0/2)*m*(e**2)\ndef force_of_atom(m,e,a):\n    '''\n    Write a function to find the force acting on an atom due to gravity.\n    '''\n    return (g*m*e)\ndef moles_of_carbon_dioxide(m):\n    '''\n    Write a function to find the number of moles of carbon dioxide in one gram.\n    '''\n    return (m/(12.0*math.pi*(0.0816*((6.0*10**6)/m))))\ndef pressure_of_atmosphere(m):\n    '''\n    Write a function to find the pressure of atmosphere.\n    '''\n    return (1.0*(math.pi*(6.0*10**6)*((8.0*10**6)/m)))\ndef force_of_gravity(m,a,h):\n    '''\n    Write a function to find the force of gravity acting on an atom.\n    '''\n    return (m*a*h)\ndef pressure_of_atmosphere(m,h):\n    '''\n    Write a function to find the pressure of atmosphere.\n    '''\n    return (1.0*(math.pi*(6.0*10**6)*((8.0*10**6)/m)))\ndef force_of_gravity(m,a,h):\n    '''\n    Write a function to find the force of gravity acting on an atom.\n    '''\n    return (m*a*h)\ndef force_of_gravity_over_mass(m,a,h):\n    '''\n    Write a function to find the force of gravity acting on an atom.\n    '''\n    return (m*a/h)\ndef force_of_gravity_over_volume(m,v,h):\n    '''\n    Write a function to find the force of gravity acting on an atom.\n    '''\n    return (m*g*v/h)\ndef angle_of_slope(m,a,h):\n    '''\n    Write a function to find the angle of slope.\n    '''\n    return ((2.0*m*a)/h)\ndef heat_capacity_of_carbon_dioxide(m):\n    '''\n    Write a function to find the heat capacity of carbon dioxide.\n    '''\n    return (1.0*(6.0*10**6)*((8.0*10**6)/m))\ndef moles_of_carbon_dioxide(m):\n    '''\n    Write a function to find the number of moles of carbon dioxide in one gram.\n    '''\n    return (m/(12.0*math.pi*(0.0816*((6.0*10**6)/m))))\ndef energy_of_atom(m,e):\n    '''\n    Write a function to find the kinetic energy of a particle.\n    '''\n    return (1.0/2)*m*(e**2)\ndef force_of_atom(m,e,a):\n    '''\n    Write a function to find the force acting on an atom due to gravity.\n    '''\n    return (g*m*e)\ndef moles_of_carbon_dioxide(m):\n    '''\n    Write a function to find the number of moles of carbon dioxide in one gram.\n    '''\n    return (m/(12.0*math.pi*(0.0816*((6.0*10**6)/m))))\ndef pressure_of_atmosphere(m):\n    '''\n    Write a function to find the pressure of atmosphere.\n    '''\n    return (1.0*(math.pi*(6.0*10**6)*((8.0*10**6)/m)))\ndef force_of_gravity(m,a,h):\n    '''\n    Write a function to find the force of gravity acting on an atom.\n    '''\n    return (m*a*h)\ndef pressure_of_atmosphere(m,h):\n    '''\n    Write a function to find the pressure of atmosphere.\n    '''\n    return (1.0*(math.pi*(6.0*10**6)*((8.0*10**6)/m)))\ndef force_of_gravity(m,a,h):\n    '''\n    Write a function to find the force of gravity acting on an atom.\n    '''\n    return (m*a*h)\ndef force_of_gravity_over_mass(m,a,h):\n    '''\n    Write a function to find the force of gravity acting on an atom.\n    '''\n    return (m*a/h)\ndef force_of_gravity_over_volume(m,v,h):\n    '''\n    Write a function to find the force of gravity acting on an atom.\n    '''\n    return (m*g*v/h)\ndef angle_of_slope(m,a,h):\n    '''\n    Write a function to find the angle of slope.\n    '''\n    return ((2.0*"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = int(r)\n    return ((4/3)*math.pi*(r**3))\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*(math.pi)*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = int(r)\n    return (4/3.0)*math.pi*r*r*r\n    \n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if not isinstance(r,(int,float)):\n        raise TypeError('r must be a number')\n    if r < 0:\n        raise ValueError('r must be positive')\n    volume = (4.0/3.0)*math.pi*r**3\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    from collections import Counter\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = []\n    for c in strr:\n        result.append(ord(c))\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    sum = sum % 26\n    return sum\ndef get_key(c,key):\n    '''\n    Write a python function to find the key corresponding to the given character by taking the ASCII value of the character and finding the\n    corresponding key value from the key list.\n    '''\n    for i in range(len(key)):\n        if(key[i] == c):\n            return i\n    return -1\ndef enc(str,key):\n    '''\n    Write a python function to implement the caesar cipher. The function takes two parameters:\n    1) str: a string to be encrypted\n    2) key: an integer representing the key. The function returns the encrypted string.\n    '''\n    cipher = ''\n    for i in str:\n        cipher = cipher + chr((ord(i) + key) % 256)\n    return cipher\ndef dec(str,key):\n    '''\n    Write a python function to implement the caesar cipher. The function takes two parameters:\n    1) str: a string to be decrypted\n    2) key: an integer representing the key. The function returns the decrypted string.\n    '''\n    cipher = ''\n    for i in str:\n        cipher = cipher + chr((ord(i) - key) % 256)\n    return cipher\ndef encrypt(plain,key):\n    '''\n    Write a python function to implement the caesar cipher. The function takes two parameters:\n    1) plain: a string to be encrypted\n    2) key: an integer representing the key. The function returns the encrypted string.\n    '''\n    if(len(plain)%2!= 0):\n        plain = plain + 'X'\n    return enc(plain,key)\ndef decrypt(cipher,key):\n    '''\n    Write a python function to implement the caesar cipher. The function takes two parameters:\n    1) cipher: a string to be decrypted\n    2) key: an integer representing the key. The function returns the decrypted string.\n    '''\n    if(len(cipher)%2!= 0):\n        cipher = cipher + 'X'\n    return dec(cipher,key)\ndef my_pow(a,b,m):\n    '''\n    Write a python function to implement the power algorithm. The function takes three parameters:\n    1) a: a number to be raised to the power b\n    2) b: a number to be raised to the power b\n    3) m: a number to be raised to the power b\n    The function returns the power result.\n    '''\n    res = 1\n    a = a%m\n    while(b>0):\n        if(b%2 == 1):\n            res = (res*a)%m\n        b = int(b/2)\n        a = (a*a)%m\n    return res\ndef mul_inv(a,m):\n    '''\n    Write a python function to implement the multiplicative inverse algorithm. The function takes two parameters:\n    1) a: a number to find the multiplicative inverse of\n    2) m: a number to find the multiplicative inverse of\n    The function returns the multiplicative inverse of a.\n    '''\n    g,x,y = 1,0,1\n    while(a>0):\n        q,r = m/a,m%a\n        x,y = y,x-(q*y)\n        a,m = r,a\n    return x\ndef modinv(a,m):\n    '''\n    Write a python function to implement the multiplicative inverse algorithm. The function takes two parameters:\n    1) a: a number to find the multiplicative inverse of\n    2) m: a number to find the multiplicative inverse of\n    The function returns the multiplicative inverse of a.\n    '''\n    return my_pow(a,m-2,m)\ndef euclid(a,b):\n    '''\n    Write a python function to implement the euclid algorithm. The function takes two parameters:\n    1) a: a number to find the multiplicative inverse of\n    2) b: a number to find the multiplicative inverse of\n    The function returns the multiplicative inverse of a.\n    '''\n    if(b==0):\n        return a,1,0\n    g,x,y = euclid(b,a%b)\n    return g,y,x-(a/b)*y\ndef mod(a,b):\n    '''\n    Write a python function to implement the euclid algorithm. The function takes two parameters:\n    1) a: a number to find the multiplicative inverse of\n    2) b: a number to find the multiplicative inverse of\n    The function returns the multiplicative inverse of a.\n    '''\n    return a%b\ndef encrypt_hill_crypt(plain,key):\n    '''\n    Write a python function to implement the Hill cipher. The function takes three parameters:\n    1) plain: a string to be encrypted\n    2) key: a key to be used in the cipher. The function returns the encrypted string.\n    '''\n    cipher = ''\n    key_inv = modinv(key[0],26)\n    for i in range(len(plain)):\n        cipher = cipher + chr(((key_inv*(ord(plain[i]) - 65))%26) + 65)\n    return cipher\ndef decrypt_hill_crypt(cipher,key):\n    '''\n    Write a python function to implement the Hill cipher. The function takes three parameters:\n    1) cipher: a string to be decrypted\n    2) key: a key to be used in the cipher. The function returns the decrypted string.\n    '''\n    plain = ''\n    key_inv = modinv(key[0],26)\n    for i in range(len(cipher)):\n        plain = plain + chr(((key_inv*(ord(cipher[i]) - 65))%26) + 65)\n    return plain\ndef encrypt_vigenere(plain,key):\n    '''\n    Write a python function to implement the Vigenere cipher. The function takes two parameters:\n    1) plain: a string to be encrypted\n    2) key: a key to be used in the cipher. The function returns the encrypted string.\n    '''\n    cipher = ''\n    for i in range(len(plain)):\n        cipher = cipher + chr(((ord(plain[i]) - 65) + (ord(key[i]) - 65))%26 + 65)\n    return cipher\ndef decrypt_vigenere(cipher,key):\n    '''\n    Write a python function to implement the Vigenere cipher. The function takes two parameters:\n    1) cipher: a string to be decrypted\n    2) key: a key to be used in the cipher. The function returns the decrypted string.\n    '''\n    plain = ''\n    for i in range(len(cipher)):\n        plain = plain + chr(((ord(cipher[i]) - 65) - (ord(key[i]) - 65))%26 + 65)\n    return plain\ndef encrypt_affine_crypt(plain,key):\n    '''\n    Write a python function to implement the Affine cipher. The function takes three parameters:\n    1) plain: a string to be encrypted\n    2) key: a key to be used in the cipher. The function returns the encrypted string.\n    '''\n    cipher = ''\n    for i in range(len(plain)):\n        cipher = cipher + chr((((key[0]*(ord(plain[i]) - 65))+key[1]) % 26) + 65)\n    return cipher\ndef decrypt_affine_crypt(cipher,key):\n    '''\n    Write a python function to implement the Affine cipher. The function takes three parameters:\n    1) cipher: a string to be decrypted\n    2) key: a key to be used in the cipher. The function returns the decrypted string.\n    '''\n    plain = ''\n    for i in range(len(cipher)):\n        plain = plain + chr((((modinv(key[0],26)*((ord(cipher[i]) - 65) - key[1])) % 26) + 65) % 26 + 65)\n    return plain\ndef encrypt_caesar_crypt(plain,key):\n    '''\n    Write a python function to implement the Caesar cipher. The function takes two parameters:\n    1) plain: a string to be encrypted"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_list = []\n    for char in strr:\n        ascii_list.append(ord(char))\n    ascii_list = [i%26 for i in ascii_list]\n    return ''.join([chr(i) for i in ascii_list])\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    chr=0\n    for i in strr:\n        chr+=ord(i)\n    chr%=26\n    return chr\n    \ndef encrypt(strr,key):\n    '''\n    Write a python function to encrypt a string with given key\n    '''\n    strr=list(strr)\n    key=list(key)\n    result=[]\n    result.append(key[0])\n    for i in range(1,len(strr)):\n        result.append((strr[i]+get_Char(key[i-1]))%26)\n    return ''.join(result)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in strr:\n        res = res + ord(i)\n    return res%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans=0\n    for i in strr:\n        ans=ans+ord(i)\n    return ans%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(sum([ord(char) for char in strr])%26+97)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans=0\n    for i in strr:\n        ans=ans+ord(i)\n        ans=ans%26\n    return chr(ans)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n = len(strr)\n    n = n*26\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return (sum%n)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    seq = [1, 2, 3]\n    i = 3\n    \n    while i < n:\n        seq.append(seq[i-2] + seq[i-1])\n        i += 1\n        \n    return seq[-1]\n    \n    \ndef count(l, elem):\n    '''\n    Count the number of times elem occurs in the list l.\n    '''\n    \n    return l.count(elem)\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    while len(sequence) < n:\n        next = sequence[-1] + 1\n        if next % 2 == 1:\n            sequence.append(next)\n        else:\n            sequence.append(next // 2)\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Base case\n    if n == 0:\n        return 1\n    \n    # If we want the nth number in the sequence,\n    # we need to find the n - 1 th number in the sequence\n    # and multiply by 4\n    return (sequence(n - 1) * 4)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0,1,1]\n    for i in range(3,n):\n        new_num = sequence[i-1] + sequence[i-2]\n        sequence.append(new_num)\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    return sum(range(n))\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 1, 3, 10, 5, 21, 35, 49, 67, 89, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781909, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 7234262579802, 11766903046071, 190393014995230]\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = []\n    i = 0\n    while i < n:\n        sequence.append(1)\n        if i == 0:\n            sequence.append(0)\n        else:\n            if i % 2 == 0:\n                sequence.append(sequence[i-1]+sequence[i-2])\n            else:\n                sequence.append(sequence[i-2]+sequence[i-1])\n        i += 1\n    return sequence[-1]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = (4.0 * math.pi * (r ** 2))\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi*r**3\ndef surf_vol_cube(side):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*side**2\ndef surf_vol_cuboid(side,length):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return 2*(side*length)\ndef surf_vol_prism(side,height,length):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return 2*(side*length+height*length)\ndef surf_vol_cylinder(radius,height):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*radius*(radius+height)\ndef surf_vol_cone(radius,height):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 2*math.pi*radius*(radius+height)\ndef surf_vol_pyramid(side1,side2,side3):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return (side1+side2+side3)*2\ndef surf_vol_triangle(base,height):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (base*height)/2\ndef mass_sphere(r):\n    '''\n    Write a function to find the mass of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef mass_cube(side):\n    '''\n    Write a function to find the mass of a cube.\n    '''\n    return 6*side**2\ndef mass_cuboid(side,length):\n    '''\n    Write a function to find the mass of a cuboid.\n    '''\n    return 12*side*length\ndef mass_prism(side,height,length):\n    '''\n    Write a function to find the mass of a prism.\n    '''\n    return 2*(side*length+height*length)\ndef mass_cylinder(radius,height):\n    '''\n    Write a function to find the mass of a cylinder.\n    '''\n    return 2*math.pi*radius*(radius+height)\ndef mass_cone(radius,height):\n    '''\n    Write a function to find the mass of a cone.\n    '''\n    return 2*math.pi*radius*(radius+height)\ndef mass_pyramid(side1,side2,side3):\n    '''\n    Write a function to find the mass of a pyramid.\n    '''\n    return (side1+side2+side3)*2\ndef mass_triangle(base,height):\n    '''\n    Write a function to find the mass of a triangle.\n    '''\n    return (base*height)/2\ndef surfacearea_torus(r,R):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    return 2*math.pi*R*(r**2+R**2)\ndef volume_torus(r,R):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return math.pi*r**2*R**2\ndef surfacearea_sphere_x(r,R):\n    '''\n    Write a function to find the surface area of a sphere on the x-axis.\n    '''\n    return 2*math.pi*r*(r+R)\ndef surfacearea_sphere_y(r,R):\n    '''\n    Write a function to find the surface area of a sphere on the y-axis.\n    '''\n    return 2*math.pi*r*(r+R)\ndef surfacearea_sphere_z(r,R):\n    '''\n    Write a function to find the surface area of a sphere on the z-axis.\n    '''\n    return 2*math.pi*r*(r+R)\ndef volume_sphere_x(r,R):\n    '''\n    Write a function to find the volume of a sphere on the x-axis.\n    '''\n    return 4/3*math.pi*r**3*(r+R)\ndef volume_sphere_y(r,R):\n    '''\n    Write a function to find the volume of a sphere on the y-axis.\n    '''\n    return 4/3*math.pi*r**3*(r+R)\ndef volume_sphere_z(r,R):\n    '''\n    Write a function to find the volume of a sphere on the z-axis.\n    '''\n    return 4/3*math.pi*r**3*(r+R)\ndef surf_vol_cylinder_x(radius,height):\n    '''\n    Write a function to find the surface area of a cylinder on the x-axis.\n    '''\n    return 2*math.pi*radius*(radius+height)\ndef surf_vol_cylinder_y(radius,height):\n    '''\n    Write a function to find the surface area of a cylinder on the y-axis.\n    '''\n    return 2*math.pi*radius*(radius+height)\ndef surf_vol_cylinder_z(radius,height):\n    '''\n    Write a function to find the surface area of a cylinder on the z-axis.\n    '''\n    return 2*math.pi*radius*(radius+height)\ndef surf_vol_cone_x(radius,height):\n    '''\n    Write a function to find the surface area of a cone on the x-axis.\n    '''\n    return 2*math.pi*radius*(radius+height)\ndef surf_vol_cone_y(radius,height):\n    '''\n    Write a function to find the surface area of a cone on the y-axis.\n    '''\n    return 2*math.pi*radius*(radius+height)\ndef surf_vol_cone_z(radius,height):\n    '''\n    Write a function to find the surface area of a cone on the z-axis.\n    '''\n    return 2*math.pi*radius*(radius+height)\ndef surf_vol_pyramid_x(side1,side2,side3):\n    '''\n    Write a function to find the surface area of a pyramid on the x-axis.\n    '''\n    return (side1+side2+side3)*2\ndef surf_vol_pyramid_y(side1,side2,side3):\n    '''\n    Write a function to find the surface area of a pyramid on the y-axis.\n    '''\n    return (side1+side2+side3)*2\ndef surf_vol_pyramid_z(side1,side2,side3):\n    '''\n    Write a function to find the surface area of a pyramid on the z-axis.\n    '''\n    return (side1+side2+side3)*2\ndef surf_vol_triangle_x(base,height):\n    '''\n    Write a function to find the surface area of a triangle on the x-axis.\n    '''\n    return (base*height)/2\ndef surf_vol_triangle_y(base,height):\n    '''\n    Write a function to find the surface area of a triangle on the y-axis.\n    '''\n    return (base*height)/2\ndef surf_vol_triangle_z(base,height):\n    '''\n    Write a function to find the surface area of a triangle on the z-axis.\n    '''\n    return (base*height)/2\ndef mass_cylinder_x(radius,height):\n    '''\n    Write a function to find the mass of a cylinder on the x-axis.\n    '''\n    return 4/3*math.pi*radius**3*(radius+height)\ndef mass_cylinder_y(radius,height):\n    '''\n    Write a function to find the mass of a cylinder on the y-axis.\n    '''\n    return 4/3*math.pi*radius**3*(radius+height)\ndef mass_cylinder_z(radius,height):\n    '''"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #print(f\"\\nSurface area of a sphere is {4 * math.pi * math.pow(r, 2)}\")\n    return 4 * math.pi * math.pow(r, 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea=4*math.pi*r*r\n    return surfacearea\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4/3*math.pi*r*r*r\n    return volume\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea=math.pi*r*(r+h)\n    return surfacearea\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*r*r*h\n    return volume\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surfacearea=math.pi*r*(r+h)\n    return surfacearea\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*r*r*h/3\n    return volume\ndef surfacearea_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfacearea=6*s*s\n    return surfacearea\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume=s*s*s\n    return volume\ndef surfacearea_sphere2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea=4*math.pi*r*r\n    return surfacearea\ndef volume_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4/3*math.pi*r*r*r\n    return volume\ndef surfacearea_cylinder2(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea=math.pi*r*(r+h)\n    return surfacearea\ndef volume_cylinder2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*r*r*h\n    return volume\ndef surfacearea_cone2(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surfacearea=math.pi*r*(r+h)\n    return surfacearea\ndef volume_cone2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*r*r*h/3\n    return volume\ndef surfacearea_cube2(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfacearea=6*s*s\n    return surfacearea\ndef volume_cube2(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume=s*s*s\n    return volume\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4 * math.pi * r**2\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3 * math.pi * r**3\n    return v\ndef surfacearea_cylinder(d,r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2 * math.pi * r * (d + r)\n    return sa\ndef volume_cylinder(d,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = math.pi * r**2 * d\n    return v\ndef surfacearea_cone(d,r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sa = math.pi * r * (d + r)\n    return sa\ndef volume_cone(d,r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * d/3\n    return v\ndef surfacearea_torus(r,d):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    sa = 2 * math.pi * r * (d + r)\n    return sa\ndef volume_torus(r,d):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    v = math.pi * r**2 * d\n    return v\ndef mass_sphere(r):\n    '''\n    Write a function to find the mass of a sphere.\n    '''\n    m = 4/3 * math.pi * r**3\n    return m\ndef mass_cylinder(d,r):\n    '''\n    Write a function to find the mass of a cylinder.\n    '''\n    m = math.pi * r**2 * d\n    return m\ndef mass_cone(d,r):\n    '''\n    Write a function to find the mass of a cone.\n    '''\n    m = math.pi * r**2 * d/3\n    return m\ndef mass_torus(r,d):\n    '''\n    Write a function to find the mass of a torus.\n    '''\n    m = math.pi * r**2 * d\n    return m\ndef energy_sphere(m,v):\n    '''\n    Write a function to find the energy of a sphere.\n    '''\n    e = 0.5 * m * v**2\n    return e\ndef energy_cylinder(m,v,d):\n    '''\n    Write a function to find the energy of a cylinder.\n    '''\n    e = 0.5 * m * v**2 + 0.5 * m * (v**2) * d\n    return e\ndef energy_cone(m,v,d):\n    '''\n    Write a function to find the energy of a cone.\n    '''\n    e = 0.5 * m * v**2 + 0.5 * m * (v**2) * d/3\n    return e\ndef energy_torus(m,v,r):\n    '''\n    Write a function to find the energy of a torus.\n    '''\n    e = 0.5 * m * v**2 + 0.5 * m * (v**2) * r\n    return e\ndef momentum_sphere(m,v):\n    '''\n    Write a function to find the momentum of a sphere.\n    '''\n    p = m * v\n    return p\ndef momentum_cylinder(m,v,d):\n    '''\n    Write a function to find the momentum of a cylinder.\n    '''\n    p = m * v + m * (v**2) * d\n    return p\ndef momentum_cone(m,v,d):\n    '''\n    Write a function to find the momentum of a cone.\n    '''\n    p = m * v + m * (v**2) * d/3\n    return p\ndef momentum_torus(m,v,r):\n    '''\n    Write a function to find the momentum of a torus.\n    '''\n    p = m * v + m * (v**2) * r\n    return p\ndef angularvelocity_sphere(p,r):\n    '''\n    Write a function to find the angular velocity of a sphere.\n    '''\n    w = p / r\n    return w\ndef angularvelocity_cylinder(p,r,d):\n    '''\n    Write a function to find the angular velocity of a cylinder.\n    '''\n    w = p / (r**2) + (p**2) / (r * (d + r))\n    return w\ndef angularvelocity_cone(p,r,d):\n    '''\n    Write a function to find the angular velocity of a cone.\n    '''\n    w = p / (r**2) + (p**2) / (r * (d + r))\n    return w\ndef angularvelocity_torus(p,r,d):\n    '''\n    Write a function to find the angular velocity of a torus.\n    '''\n    w = p / (r**2) + (p**2) / (r * (d + r))\n    return w\ndef angularacceleration_sphere(w,r):\n    '''\n    Write a function to find the angular acceleration of a sphere.\n    '''\n    a = -w**2 / r\n    return a\ndef angularacceleration_cylinder(w,r,d):\n    '''\n    Write a function to find the angular acceleration of a cylinder.\n    '''\n    a = -(w**2) / (r**2) - (w**2) / (r * (d + r))\n    return a\ndef angularacceleration_cone(w,r,d):\n    '''\n    Write a function to find the angular acceleration of a cone.\n    '''\n    a = -(w**2) / (r**2) - (w**2) / (r * (d + r))\n    return a\ndef angularacceleration_torus(w,r,d):\n    '''\n    Write a function to find the angular acceleration of a torus.\n    '''\n    a = -(w**2) / (r**2) - (w**2) / (r * (d + r))\n    return a\ndef work_sphere(m,v,p):\n    '''\n    Write a function to find the work of a sphere.\n    '''\n    w = p + 0.5 * m * v**2\n    return w\ndef work_cylinder(m,v,p,d):\n    '''\n    Write a function to find the work of a cylinder.\n    '''\n    w = p + 0.5 * m * v**2 + 0.5 * m * (v**2) * d\n    return w\ndef work_cone(m,v,p,d):\n    '''\n    Write a function to find the work of a cone.\n    '''\n    w = p + 0.5 * m * v**2 + 0.5 * m * (v**2) * d/3\n    return w\ndef work_torus(m,v,p,r):\n    '''\n    Write a function to find the work of a torus.\n    '''\n    w = p + 0.5 * m * v**2 + 0.5 * m * (v**2) * r\n    return w\ndef distance_sphere(p1,v1,p2):\n    '''\n    Write a function to find the distance between 2 points on a sphere.\n    '''\n    d = math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2 + (p2[2] - p1[2])**2)\n    return d\ndef distance_cylinder(p1,v1,p2,d):\n    '''\n    Write a function to find the distance between 2 points on a cylinder.\n    '''\n    d = math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2 + (p2[2] - p1[2])**2) + math.sqrt((p2[0] "
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*math.pow(r,2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    print(2*math.pi*r*r)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    nth = 1\n    k = 1\n    while k <= n:\n        nth = nth + 2 * k + 1\n        k += 1\n    return nth\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    return 3*(n**2 - n)/2 + 1\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**3/2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n**2 - 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n - 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n+1)**2/2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    c = (3 * n**2 - n) / 2\n    return c\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 12\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 18\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 22\n    else:\n        return None\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def hexagonal(n):\n        '''\n        Returns the nth hexagonal number\n        '''\n        return n*(2*n - 1)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for dict1_key in dict1:\n        merged_dict[dict1_key] = dict1[dict1_key]\n    for dict2_key in dict2:\n        if not dict2_key in merged_dict:\n            merged_dict[dict2_key] = dict2[dict2_key]\n    for dict3_key in dict3:\n        if not dict3_key in merged_dict:\n            merged_dict[dict3_key] = dict3[dict3_key]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    ret = dict1\n    ret.update(dict2)\n    ret.update(dict3)\n    return ret\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dictionary=dict(dict1.items()+dict2.items()+dict3.items())\n    print merged_dictionary\nmerge_dictionaries_three(dictionary1,dictionary2,dictionary3)\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    merged_dictionary=dict(dict1.items()+dict2.items())\n    print merged_dictionary\nmerge_dictionaries_two(dictionary1,dictionary2)\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    merged_dictionary=dict(dict1.items()+dict2.items())\n    print merged_dictionary\nmerge_dictionaries_one(dictionary1,dictionary2)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1\n    for k in dict2:\n        if k in new_dict:\n            new_dict[k] += dict2[k]\n        else:\n            new_dict[k] = dict2[k]\n    for k in dict3:\n        if k in new_dict:\n            new_dict[k] += dict3[k]\n        else:\n            new_dict[k] = dict3[k]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key1, value1 in dict1.iteritems():\n        for key2, value2 in dict2.iteritems():\n            if key1 == key2:\n                res[key1] = {**value1, **value2}\n            else:\n                res[key1] = value1\n    for key3, value3 in dict3.iteritems():\n        res[key3] = value3\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if isinstance(dict1,dict) == False or isinstance(dict2,dict) == False or isinstance(dict3,dict) == False:\n        print \"One of the inputs is not a dictionary\"\n    else:\n        for i in dict1:\n            for j in dict2:\n                for k in dict3:\n                    if i == j and j == k:\n                        for l in dict3[k]:\n                            dict1[i][l] = dict3[k][l]\n        return dict1\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if isinstance(dict1,dict) == False or isinstance(dict2,dict) == False:\n        print \"One of the inputs is not a dictionary\"\n    else:\n        for i in dict1:\n            for j in dict2:\n                if i == j:\n                    for k in dict2[j]:\n                        dict1[i][k] = dict2[j][k]\n        return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d={}\n    for i in dict1.keys():\n        d[i]=dict1[i]\n    for i in dict2.keys():\n        d[i]=dict2[i]\n    for i in dict3.keys():\n        d[i]=dict3[i]\n    return d\n    \ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for i in dict1.keys():\n        d[i] = dict1[i]\n    for i in dict2.keys():\n        d[i] = dict2[i]\n    return d\n    \ndef merge_dictionaries(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for i in dict1.keys():\n        d[i] = dict1[i]\n    for i in dict2.keys():\n        d[i] = dict2[i]\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    assert isinstance(dict1,dict)\n    assert isinstance(dict2,dict)\n    assert isinstance(dict3,dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if len(dict1) > len(dict2):\n        temp = len(dict2)\n    else:\n        temp = len(dict1)\n    if len(dict1) > len(dict3):\n        temp = len(dict3)\n    else:\n        temp = len(dict1)\n    for i in range(temp):\n        if i < len(dict2):\n            dict1[i] = dict1[i] + dict2[i]\n        else:\n            dict1[i] = dict1[i] + dict3[i]\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for i in list1:\n        freq[i] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for i in list1:\n        if i in freq:\n            freq[i]+=1\n        else:\n            freq[i]=1\n    return freq\ndef freq_count2(list1):\n    freq={}\n    for i in list1:\n        if i in freq:\n            freq[i]+=1\n        else:\n            freq[i]=1\n    return freq\ndef freq_count_with_range(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for i in list1:\n        if i in range(len(list1)):\n            if i in freq:\n                freq[i]+=1\n            else:\n                freq[i]=1\n    return freq\ndef sum_list(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list2(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list3(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list4(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list5(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list6(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list7(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list8(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list9(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list10(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list11(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list12(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list13(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list14(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list15(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list16(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list17(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list18(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list19(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list20(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list21(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list22(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list23(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list24(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list25(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list26(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list27(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list28(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list29(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list30(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list31(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list32(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list33(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list34(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list35(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list36(list1):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a single value.\n    '''\n    return sum(list1)\ndef sum_list37(list1):\n    '''\n    Write a function to get the sum of all the elements in a list"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1={}\n    for item in list1:\n        dict1[item]=list1.count(item)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        freq_dict[i] = 1\n    return freq_dict\ndef freq_count_v3(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        freq_dict[i] = list1.count(i)\n    return freq_dict\ndef freq_count_v4(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v5(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\ndef freq_count_v6(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\ndef freq_count_v7(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v8(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v9(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v10(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] = list1.count(i)\n    return freq_dict\ndef freq_count_v11(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v12(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] = list1.count(i)\n    return freq_dict\ndef freq_count_v13(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v14(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v15(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v16(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v17(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v18(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v19(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v20(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v21(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v22(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v23(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v24(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\ndef freq_count_v25(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dic"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d=collections.defaultdict(int)\n    for i in list1:\n        d[i]+=1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for elem in list1:\n        if elem not in freq:\n            freq[elem]=0\n        freq[elem]+=1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    res = collections.defaultdict(int)\n    for ele in list1:\n        res[ele] += 1\n    return res\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1={}\n    for i in list1:\n        if i in dict1:\n            dict1[i]+=1\n        else:\n            dict1[i]=1\n    return dict1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return -1\n    n = int(N)\n    return float(format(n/2, '.1f'))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    \n    result = 0\n    diff = float('inf')\n    for i in xrange(1, n):\n        temp = abs(n-i)\n        if temp < diff:\n            result = i\n            diff = temp\n    return result\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(n-1,-1,-1):\n        if is_prime(i):\n            return i\n    return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return -1\n    if N < 100:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 1:\n        return -1\n    if N == 1:\n        return 0\n    return min(x for x in range(1, N) if x < N)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if len(str(N)) == 1:\n        return 0\n    n1 = N // 10\n    n2 = N % 10\n    if abs(n1 - n2) <= 1:\n        return n1\n    return n2\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return -1\n    num_list = []\n    for i in range(1, N+1):\n        num_list.append(i)\n    num_list.reverse()\n    while True:\n        for i in range(len(num_list)-1):\n            if num_list[i] >= num_list[i+1]:\n                num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n        if num_list[0] == num_list[len(num_list)-1]:\n            return num_list[0]\n        else:\n            return num_list[0] - 1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # get the negative value from n\n    n_neg = -n\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # Time: O(log n)\n    # Space: O(1)\n    \n    return int(str(N)[::-1])\n    \ndef find_smallest_int(arr):\n    '''\n    Find the smallest number that is larger than all the elements in the array.\n    '''\n    \n    # Time: O(n lg n)\n    # Space: O(1)\n    \n    arr = sorted(arr)\n    \n    return arr[0] - 1\n    \ndef find_smallest_int_helper(arr, start, end):\n    \n    if end - start == 1:\n        return arr[start]\n    \n    mid = (start + end) / 2\n    \n    if arr[mid] > arr[start]:\n        return find_smallest_int_helper(arr, start, mid)\n    else:\n        return find_smallest_int_helper(arr, mid, end)\n    \ndef find_smallest_int(arr):\n    '''\n    Find the smallest number that is larger than all the elements in the array.\n    '''\n    \n    # Time: O(n)\n    # Space: O(n)\n    \n    return find_smallest_int_helper(arr, 0, len(arr))\n    \ndef find_smallest_int_helper2(arr, start, end, target):\n    \n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) / 2\n    \n    if arr[mid] == target:\n        return arr[mid]\n    elif arr[mid] < target:\n        return find_smallest_int_helper(arr, mid, end, target)\n    else:\n        return find_smallest_int_helper(arr, start, mid, target)\n    \ndef find_smallest_int(arr):\n    '''\n    Find the smallest number that is larger than all the elements in the array.\n    '''\n    \n    # Time: O(n)\n    # Space: O(n)\n    \n    return find_smallest_int_helper2(arr, 0, len(arr) - 1, arr[-1] + 1)\n    \ndef find_smallest_int_helper(arr, start, end, target):\n    \n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) / 2\n    \n    if target == arr[mid]:\n        return arr[mid]\n    elif target < arr[mid]:\n        return find_smallest_int_helper(arr, start, mid, target)\n    else:\n        return find_smallest_int_helper(arr, mid, end, target)\n    \ndef find_smallest_int(arr):\n    '''\n    Find the smallest number that is larger than all the elements in the array.\n    '''\n    \n    # Time: O(n)\n    # Space: O(n)\n    \n    return find_smallest_int_helper(arr, 0, len(arr) - 1, arr[-1] + 1)\n    \ndef find_smallest_int_helper(arr, start, end, target):\n    \n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) / 2\n    \n    if target == arr[mid]:\n        return arr[mid]\n    elif target < arr[mid]:\n        return find_smallest_int_helper(arr, start, mid, target)\n    else:\n        return find_smallest_int_helper(arr, mid, end, target)\n    \ndef find_smallest_int(arr):\n    '''\n    Find the smallest number that is larger than all the elements in the array.\n    '''\n    \n    # Time: O(n)\n    # Space: O(1)\n    \n    return find_smallest_int_helper(arr, 0, len(arr) - 1, arr[-1] + 1)\n    \ndef find_smallest_int_helper(arr, start, end, target):\n    \n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) / 2\n    \n    if target == arr[mid]:\n        return arr[mid]\n    elif target < arr[mid]:\n        return find_smallest_int_helper(arr, start, mid, target)\n    else:\n        return find_smallest_int_helper(arr, mid, end, target)\n    \ndef find_smallest_int(arr):\n    '''\n    Find the smallest number that is larger than all the elements in the array.\n    '''\n    \n    # Time: O(n)\n    # Space: O(1)\n    \n    return find_smallest_int_helper(arr, 0, len(arr) - 1, arr[-1] + 1)\n    \ndef find_smallest_int_helper(arr, start, end, target):\n    \n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) / 2\n    \n    if target == arr[mid]:\n        return arr[mid]\n    elif target < arr[mid]:\n        return find_smallest_int_helper(arr, start, mid, target)\n    else:\n        return find_smallest_int_helper(arr, mid, end, target)\n    \ndef find_smallest_int(arr):\n    '''\n    Find the smallest number that is larger than all the elements in the array.\n    '''\n    \n    # Time: O(n)\n    # Space: O(1)\n    \n    return find_smallest_int_helper(arr, 0, len(arr) - 1, arr[-1] + 1)\n    \ndef find_smallest_int_helper(arr, start, end, target):\n    \n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) / 2\n    \n    if target == arr[mid]:\n        return arr[mid]\n    elif target < arr[mid]:\n        return find_smallest_int_helper(arr, start, mid, target)\n    else:\n        return find_smallest_int_helper(arr, mid, end, target)\n    \ndef find_smallest_int(arr):\n    '''\n    Find the smallest number that is larger than all the elements in the array.\n    '''\n    \n    # Time: O(n)\n    # Space: O(1)\n    \n    return find_smallest_int_helper(arr, 0, len(arr) - 1, arr[-1] + 1)\n    \ndef find_smallest_int_helper(arr, start, end, target):\n    \n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) / 2\n    \n    if target == arr[mid]:\n        return arr[mid]\n    elif target < arr[mid]:\n        return find_smallest_int_helper(arr, start, mid, target)\n    else:\n        return find_smallest_int_helper(arr, mid, end, target)\n    \ndef find_smallest_int(arr):\n    '''\n    Find the smallest number that is larger than all the elements in the array.\n    '''\n    \n    # Time: O(n)\n    # Space: O(1)\n    \n    return find_smallest_int_helper(arr, 0, len(arr) - 1, arr[-1] + 1)\n    \ndef find_smallest_int_helper(arr, start, end, target):\n    \n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) / 2\n    \n    if target == arr[mid]:\n        return arr[mid]\n    elif target < arr[mid]:\n        return find_smallest_int_helper(arr, start, mid, target)\n    else:\n        return find_smallest_int_helper(arr, mid, end, target)\n    \ndef find_smallest_int(arr):\n    '''\n    Find the smallest number that is larger than all the elements in the array.\n    '''\n    \n    # Time: O(n)\n    # Space: O(1)\n    \n    return find"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for i in list1:\n        length = length if length > len(i) else len(i)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for ele in list1:\n        list2.append(len(ele))\n    return max(list2)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not list1:\n        return 0\n    list2 = []\n    for item in list1:\n        list2.append(len(item))\n    return max(list2)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list1=[]\n    for i in list1:\n        len_list1.append(len(i))\n    return max(len_list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in range(0, len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for i in list1:\n        if len(i)>len_word:\n            len_word=len(i)\n    return len_word\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not list1:\n        return 0\n    return max(len(i) for i in list1)\n    \ndef count_words(str1):\n    '''\n    Write a python function to count the number of each word in a string.\n    '''\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\r','')\n    lst1 = str1.split(' ')\n    dct1 = {}\n    for i in lst1:\n        if i not in dct1:\n            dct1[i] = 1\n        else:\n            dct1[i] += 1\n    return dct1\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count = 0\n    for word in list1:\n        if len(word) > count:\n            count = len(word)\n    return count\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l1=len(list1[0])\n    for i in list1:\n        if len(i)>l1:\n            l1=len(i)\n    return l1\n    \ndef longest_word(list1):\n    '''\n    Write a python function to find the longest word.\n    '''\n    l1=len_log(list1)\n    x=0\n    for i in list1:\n        if len(i)==l1:\n            if x<len(i):\n                x=len(i)\n                w=i\n    return w\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1.find(sub_str) == -1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str == '':\n        return True\n    for item in str1:\n        if sub_str in item:\n            if sub_str == item:\n                return True\n            else:\n                return find_substring(item, sub_str)\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any([sub_str in s for s in str1])\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, str):\n        return False\n    if not isinstance(sub_str, str):\n        return False\n    if len(str1) == 0:\n        return False\n    if len(str1) < len(sub_str):\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        print \"Not present\"\n    else:\n        print \"Present\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    start = 0\n    while(start < len(str1)):\n        index = str1.find(sub_str, start, len(str1))\n        if(index == -1):\n            return False\n        start = index + 1\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print \"Substring found: \" + str1\n    else:\n        print \"No Substring found\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any([True for val in str1 if sub_str in val])\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    index = -1\n    for i in sub_str:\n        if i in str1:\n            index = str1.find(i, index + 1)\n            if index!= -1:\n                print index\n    return index\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return True\n    \n    if n % 2 == 0:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 \n    # 0, 1, 1, 2, 2, 3, 3, 4, 4, 5 \n    \n    if n < 10: \n        return True\n    \n    str_n = str(n)\n    digits = len(str_n)\n    \n    for i in xrange(0, digits/2):\n        if int(str_n[i])!= int(str_n[digits-1-i]): \n            return False\n    \n    return True \n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    return s == s[::-1]\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    d = {}\n    for i in range(len(n)):\n        if n[i] in d:\n            if d[n[i]] == i:\n                return False\n            else:\n                d[n[i]] = i\n        else:\n            d[n[i]] = i\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_even(x): \n        return x%2 == 0\n    def is_one(x): \n        return x == 1\n    def is_undulating_helper(n):\n        if n == 0:\n            return is_one(n)\n        elif is_even(n):\n            return is_undulating_helper(n/2)\n        else:\n            return is_undulating_helper(n-1)\n    return is_undulating_helper(n)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def undulating(n): \n        digits = len(str(n))\n        if digits % 2!= 0: \n            return False\n        for i in range(digits / 2): \n            if str(n)[i]!= str(n)[digits - i - 1]: \n                return False\n        return True\n    if undulating(n): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # If the sum of the digits of a number is greater than one,\n    # then the number is not undulating.\n    if sum(map(int, str(n))) > 1:\n        return False\n    return all(n % int(x) == 0 for x in str(n))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_divisible(n): \n        if n <= 10: return True\n        if n % 10 == 0: return False\n        if n % 10!= 0: return is_divisible(n // 10)\n    if is_divisible(n): return True\n    if not is_divisible(n): return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if len(str(n)) == 1:\n        return False\n    else:\n        while n:\n            lastDigit = n % 10\n            if n == lastDigit**2:\n                return True\n            n //= 10\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return False\n    elif n < 100:\n        return True\n    elif n < 1000:\n        return is_undulating(n/10)\n    elif n < 10000:\n        return is_undulating(n/100) or is_undulating(n/10)\n    else:\n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b == -1:\n        return 1/a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a * power(a,b-1)\n    elif b < 0:\n        return 1/power(a,b+1)\n    \ndef factorial(n):\n    '''\n    Write a recursive function to calculate the factorial of 'n'.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    #i = 1\n    #while i <= b:\n    #    a = a * a\n    #    i = i + 1\n    #return a\n    #x = 1\n    #while x <= b:\n    #    a = a * a\n    #    x = x + 1\n    #return a\n    #return a**b\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b<0:\n        raise ValueError(\"the power can not be less than zero\")\n    elif b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    def inner_power(x):\n        return x**b\n    return inner_power\n    \ndef pow(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return lambda x: x**b\n    \ndef test_power(fn,a,b):\n    assert fn(a) == fn(a,b)\n    assert fn(a) == fn(a,b)\n    assert fn(a) == fn(a,b)\n    assert fn(a) == fn(a,b)\n    \ndef test_pow():\n    test_power(power,2,3)\n    test_power(power,3,3)\n    test_power(power,2,3)\n    test_power(power,3,3)\n    test_power(pow,3,3)\n    test_power(pow,2,3)\n    test_power(pow,3,3)\n    test_power(pow,2,3)\n    test_power(pow,3,3)\n    \ntest_pow()\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    elif b==-1:\n        return 1/a\n    elif b<0:\n        return 1/power(a,b+1)\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    if(b<0):\n        result = 1/a\n        b *= -1\n    if(b == 0):\n        return result\n    while(b > 0):\n        result *= a\n        b -= 1\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = float('inf')\n    index = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < smallest:\n            smallest = test_list[i][1]\n            index = i\n    return test_list[index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = 100000000\n    for i in test_list:\n        if i[1] < minimum:\n            minimum = i[1]\n    index = test_list.index((i[0],minimum))\n    return index\n    \n    # test_list = [('apple',2),('orange',3),('banana',5)]\n    # for i in test_list:\n    #     if i[1] < minimum:\n    #         minimum = i[1]\n    #         index = test_list.index(i)\n    # return index\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if test_list == []:\n        return \n    smallest = test_list[0]\n    for a in range(1, len(test_list)):\n        if test_list[a][1] < smallest[1]:\n            smallest = test_list[a]\n    return smallest\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    minimum_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < minimum[1]:\n            minimum = test_list[i]\n            minimum_index = i\n    return minimum_index\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_lst = []\n    for l in lst:\n        if len(l) < len(min_lst):\n            min_lst = l\n    return min_lst\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == []:\n        return 0\n    else:\n        return Find_Min_Length(lst[1:])\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0]\n    for i in range(len(lst)):\n        if(len(lst[i]) < len(min_length)):\n            min_length = lst[i]\n    return len(min_length)\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #lst_min=lst[0]\n    lst_min=[lst[0][0],lst[0][1]]\n    for lst_item in lst:\n        if lst_item[1]<lst_min[1]:\n            lst_min=[lst_item[0],lst_item[1]]\n    return lst_min\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minLen = 1000\n    for i in range(len(lst)):\n        if len(lst[i]) < minLen:\n            minLen = len(lst[i])\n    return minLen\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    a = len(lst)\n    n = len(lst[0])\n    x = lst[0][0]\n    for i in range(n):\n        for j in range(a):\n            if len(lst[j]) < n:\n                n = len(lst[j])\n                x = lst[0][j]\n    return x\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) <= min_len:\n            min_len = len(i)\n    return min_len\n    \ndef list_to_list_of_list(lst):\n    '''\n    Write a python function to convert a list into a list of list.\n    '''\n    lst_of_lst = []\n    for i in lst:\n        lst_of_lst.append([])\n        for j in i:\n            lst_of_lst[-1].append(j)\n    return lst_of_lst\n    \ndef Find_Common_Count(lst1, lst2):\n    '''\n    Write a python function to find the number of common elements in two lists.\n    '''\n    if not lst1 or not lst2:\n        return 0\n    if len(lst1) <= len(lst2):\n        smaller = lst1\n        bigger = lst2\n    else:\n        smaller = lst2\n        bigger = lst1\n    count = 0\n    for i in smaller:\n        if i in bigger:\n            count += 1\n    return count\n    \ndef Find_Common_Count_2(lst1, lst2):\n    '''\n    Write a python function to find the number of common elements in two lists.\n    '''\n    if not lst1 or not lst2:\n        return 0\n    count = 0\n    for i in lst1:\n        if i in lst2:\n            count += 1\n    return count\n    \ndef Find_List_of_List_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    max_len = len(lst[0])\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_List_of_List_Min_Length(lst):\n    '''\n    Write a python function to find the length of the shortest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n    \ndef Find_List_of_List_Min_Max_Length(lst):\n    '''\n    Write a python function to find the length of the shortest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    min_len = Find_List_of_List_Min_Length(lst)\n    max_len = Find_List_of_List_Max_Length(lst)\n    return min_len, max_len\n    \ndef Find_All_List_Of_List_Max_Length(lst):\n    '''\n    Write a python function to find all the longest list in a list of lists.\n    '''\n    if not lst:\n        return []\n    max_len = Find_List_of_List_Max_Length(lst)\n    max_lst = []\n    for i in lst:\n        if len(i) == max_len:\n            max_lst.append(i)\n    return max_lst\n    \ndef Find_All_List_Of_List_Min_Length(lst):\n    '''\n    Write a python function to find all the shortest list in a list of lists.\n    '''\n    if not lst:\n        return []\n    min_len = Find_List_of_List_Min_Length(lst)\n    min_lst = []\n    for i in lst:\n        if len(i) == min_len:\n            min_lst.append(i)\n    return min_lst\n    \ndef Find_All_List_Of_List_Min_Max_Length(lst):\n    '''\n    Write a python function to find all the shortest list in a list of lists.\n    '''\n    if not lst:\n        return []\n    min_len, max_len = Find_List_of_List_Min_Max_Length(lst)\n    min_lst = []\n    for i in lst:\n        if len(i) == min_len:\n            min_lst.append(i)\n    max_lst = []\n    for i in lst:\n        if len(i) == max_len:\n            max_lst.append(i)\n    return min_lst, max_lst\n    \ndef Find_All_List_Of_List_Median_Length(lst):\n    '''\n    Write a python function to find all the shortest list in a list of lists.\n    '''\n    if not lst:\n        return []\n    median_len = Find_List_of_List_Median_Length(lst)\n    min_lst = []\n    for i in lst:\n        if len(i) == median_len:\n            min_lst.append(i)\n    return min_lst\n    \ndef Find_List_Of_List_Median_Length(lst):\n    '''\n    Write a python function to find the length of the median list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    lst_of_lst = list_to_list_of_list(lst)\n    median_len = Find_List_of_List_Max_Length(lst_of_lst)\n    return median_len\n    \ndef Find_All_List_Of_List_Median_Max_Length(lst):\n    '''\n    Write a python function to find all the longest list in a list of lists.\n    '''\n    if not lst:\n        return []\n    median_len, max_len = Find_List_of_List_Median_Max_Length(lst)\n    max_lst = []\n    for i in lst:\n        if len(i) == median_len:\n            max_lst.append(i)\n    return max_lst\n    \ndef Find_All_List_Of_List_Median_Min_Length(lst):\n    '''\n    Write a python function to find all the shortest list in a list of lists.\n    '''\n    if not lst:\n        return []\n    median_len, min_len = Find_List_of_List_Median_Min_Length(lst)\n    min_lst = []\n    for i in lst:\n        if len(i) == median_len:\n            min_lst.append(i)\n    return min_lst\n    \ndef Find_List_of_List_Median_Max_Length(lst):\n    '''\n    Write a python function to find the length of the median list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    lst_of_lst = list_to_list_of_list(lst)\n    median_len = Find_List_of_List_Max_Length(lst_of_lst)\n    return median_len\n    \ndef Find_List_of_List_Median_Min_Length(lst):\n    '''\n    Write a python function to find the length of the median list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    lst_of_lst = list_to_list_of_list(lst)\n    median_len = Find_List_of_List_Min_Length(lst_of_lst)\n    return median_len\n    \ndef Find_All_List_Of_List_Median_Min_Max_Length(lst):\n    '''\n    Write a python function to find all the shortest list in a list of lists.\n    '''\n    if not lst:\n        return []\n    median_len, min_len, max_len = Find_List_of_List_Median_Min_Max_Length(lst)\n    min_lst = ["
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_len = 100000000000000000000000\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    print(min_len)\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = [1]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    t = 1\n    for i in range(2, n):\n        if n % i == 0:\n            t += 1\n    return t\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # use set of while loops to calculate divisors\n    divisors = set()\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n/i)\n        i += 1\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count=count+1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors=[]\n    i=1\n    while i<=n:\n        if n%i==0:\n            divisors.append(i)\n        i=i+1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(2, (n//2)+1):\n        if n%i == 0:\n            div += 1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    factors = []\n    for i in range(2,n):\n        if n%i == 0:\n            factors.append(i)\n    return len(factors)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(2, n):\n        if n % i == 0:\n            div += 1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 1\n    for i in range(2,n):\n        if n%i==0:\n            divs += 1\n    return divs\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = dict()\n    for item in list1:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    output = {}\n    for i in list1:\n        if i in output:\n            output[i] += 1\n        else:\n            output[i] = 1\n    return output\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for item in list1:\n        if item in dictionary:\n            dictionary[item] += 1\n        else:\n            dictionary[item] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for l in list1:\n        for i in l:\n            result[i] = result.get(i, 0) + 1\n    return result\n    \nassert frequency_lists([[1,1,1,2,2,3], [2,1,1,1], [2,2,1,1,2,2,3,2,2]]) == {1:4, 2:7, 3:2}\nassert frequency_lists([[1,1,1,1,1], [2,2,2,2,2,2,2], [3,3,3,3,3,3,3,3,3]]) == {1:3, 2:9, 3:3}\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # start with an empty dictionary\n    d = {}\n    # loop over each item in the list\n    for item in list1:\n        # if key is already in dictionary, increment count\n        if item in d:\n            d[item] += 1\n        # if key not in dictionary, add it and set count to 1\n        else:\n            d[item] = 1\n    # return the dictionary\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    length = len(list1)\n    dict = {}\n    for item in list1:\n        if item in dict:\n            dict[item] += 1\n        else:\n            dict[item] = 1\n    return dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = []\n    for element in list1:\n        list2.extend(element)\n    dictionary = {}\n    for element in list2:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict = {}\n    for i in list1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    if numbers is not None:\n        mul = 1\n        for i in numbers:\n            mul *= i\n        return mul / len(numbers)\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x*y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product = product * num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x,y: x * y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)\n    \ndef add_num(numbers):\n    '''\n    Write a function to add all the numbers in a list.\n    '''\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n    \ndef count_num(numbers):\n    '''\n    Write a function to count the number of even numbers in a list.\n    '''\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result *= n\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 0\n    result = 1\n    for x in numbers:\n        result = result * x\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 1\n    for i in numbers:\n        sum *= i\n    return sum/len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n!= 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_string = ''\n    if n == 0:\n        return '0'\n    while n > 0:\n        bin_string = str(n % 2) + bin_string\n        n = n // 2\n    return bin_string\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n)[2:])\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        return decimal_to_binary(n//2) + decimal_to_binary(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = ''\n    while n: \n        res = str(n%2) + res\n        n = n >> 1\n    return res\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    b = \"\"\n    while n > 0:\n        if n % 2 == 1:\n            b = str(n % 2) + b\n        n = n / 2\n    return b\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    while n > 0:\n        if (n % 2) == 1:\n            result = '1' + result\n        else:\n            result = '0' + result\n        n = n/2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n).replace(\"0b\", \"\"))\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    length = len(num_str)\n    for i in range(length-1, -1, -1):\n        if num_str[i] < num_str[i-1]:\n            break\n    else:\n        return int(num_str+'1')\n    return int(num_str[:i]+'9'*(length-i-1)+num_str[i])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if not num: return 1\n    if num == 0: return -1\n    num = int(num)\n    num_str = str(num)\n    length = len(num_str)\n    if num < 10:\n        return int(num_str+'0')\n    num_str = str(num)\n    if num_str[0] == '9':\n        return int(num_str[1:] + '0' + '1' + '0' * (length-1))\n    else:\n        for i in xrange(length-1,-1,-1):\n            if num_str[i] < '9':\n                num_str = num_str[:i] + chr(ord(num_str[i]) + 1) + num_str[i+1:]\n                break\n        return int(num_str)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    if num > 9999:\n        return -1\n    else:\n        while not is_palindrome(num):\n            num += 1\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    if num < 0:\n        return -1\n    if num == 1:\n        return 2\n    num = str(num)\n    if num[::-1] < num:\n        return int(num + num[::-1])\n    return int(num + num[::-1][1:])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if int(num)>99999:\n        sys.exit('Error: The largest palindrome can only be 999999')\n    if int(num)<1:\n        sys.exit('Error: The smallest palindrome is 1')\n    num = str(num)\n    palin = num+num[::-1]\n    palin = int(palin)\n    return palin\ndef is_palindrome(num):\n    '''\n    Write a function to check whether an integer is a palindrome\n    '''\n    if int(num)>99999:\n        sys.exit('Error: The largest palindrome can only be 999999')\n    if int(num)<1:\n        sys.exit('Error: The smallest palindrome is 1')\n    num = str(num)\n    if num==num[::-1]:\n        return True\n    else:\n        return False\ndef is_anagram(word1,word2):\n    '''\n    Write a function to check whether two words are anagrams\n    '''\n    if len(word1)!=len(word2):\n        return False\n    return sorted(word1)==sorted(word2)\ndef longest_common_prefix(s1,s2):\n    '''\n    Write a function to find the longest common prefix of two strings\n    '''\n    s1 = s1.split(' ')\n    s2 = s2.split(' ')\n    if len(s1)<len(s2):\n        short = s1\n        long = s2\n    else:\n        short = s2\n        long = s1\n    for i in range(len(long)):\n        if short[i]!=long[i]:\n            return short[:i]\n    return short[:len(short)]\ndef is_anagram(word1,word2):\n    '''\n    Write a function to check whether two words are anagrams\n    '''\n    if len(word1)!=len(word2):\n        return False\n    return sorted(word1)==sorted(word2)\ndef int_to_string(num):\n    '''\n    Write a function to convert a integer into a string\n    '''\n    if num<0:\n        sys.exit('Error: The smallest palindrome is 1')\n    if num>999999:\n        sys.exit('Error: The largest palindrome can only be 999999')\n    num = str(num)\n    palin = num+num[::-1]\n    return palin\ndef is_permutation(word1,word2):\n    '''\n    Write a function to check whether two strings are permutations of each other\n    '''\n    if len(word1)!=len(word2):\n        return False\n    d1 = {}\n    d2 = {}\n    for i in word1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in word2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    return d1==d2\ndef is_permutation(word1,word2):\n    '''\n    Write a function to check whether two strings are permutations of each other\n    '''\n    if len(word1)!=len(word2):\n        return False\n    d1 = {}\n    d2 = {}\n    for i in word1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in word2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    return d1==d2\ndef is_permutation(word1,word2):\n    '''\n    Write a function to check whether two strings are permutations of each other\n    '''\n    if len(word1)!=len(word2):\n        return False\n    d1 = {}\n    d2 = {}\n    for i in word1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in word2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    return d1==d2\ndef is_permutation(word1,word2):\n    '''\n    Write a function to check whether two strings are permutations of each other\n    '''\n    if len(word1)!=len(word2):\n        return False\n    d1 = {}\n    d2 = {}\n    for i in word1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in word2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    return d1==d2\ndef is_permutation(word1,word2):\n    '''\n    Write a function to check whether two strings are permutations of each other\n    '''\n    if len(word1)!=len(word2):\n        return False\n    d1 = {}\n    d2 = {}\n    for i in word1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in word2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    return d1==d2\ndef is_permutation(word1,word2):\n    '''\n    Write a function to check whether two strings are permutations of each other\n    '''\n    if len(word1)!=len(word2):\n        return False\n    d1 = {}\n    d2 = {}\n    for i in word1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in word2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    return d1==d2\ndef is_permutation(word1,word2):\n    '''\n    Write a function to check whether two strings are permutations of each other\n    '''\n    if len(word1)!=len(word2):\n        return False\n    d1 = {}\n    d2 = {}\n    for i in word1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in word2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    return d1==d2\ndef is_permutation(word1,word2):\n    '''\n    Write a function to check whether two strings are permutations of each other\n    '''\n    if len(word1)!=len(word2):\n        return False\n    d1 = {}\n    d2 = {}\n    for i in word1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in word2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    return d1==d2\ndef is_permutation(word1,word2):\n    '''\n    Write a function to check whether two strings are permutations of each other\n    '''\n    if len(word1)!=len(word2):\n        return False\n    d1 = {}\n    d2 = {}\n    for i in word1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in word2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    return d1==d2\ndef is_permutation(word1,word2):\n    '''\n    Write a function to check whether two strings are permutations of each other\n    '''\n    if len(word1)!=len(word2):\n        return False\n    d1 = {}"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num > 9999:\n        return 0\n    s = str(num)\n    if s[::-1] == s:\n        return int(s + '1')\n    for i in xrange(len(s)-1,-1,-1):\n        if s[i]!= '9':\n            if s[i] == s[::-1][i]:\n                s = s[:i] + '9' + s[i+1:]\n                break\n    return int(s)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    num = str(num)\n    if len(num) == 1:\n        return int(num)\n    \n    if num[0] == '9':\n        return int(num[1]) * 10 + int(num[0])\n    \n    if int(num[0]) > int(num[1]):\n        return int(num[1]) * 10 + int(num[0])\n    \n    if int(num[0]) == int(num[1]):\n        return int(num[1]) * 10 + int(num[0]) + 1\n    \n    return int(num[0]) * 10 + int(num[1]) + 1\n    \n    \n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num)-1, -1, -1):\n        if int(num[i])!= 9:\n            num = num[:i] + str(int(num[i])+1) + num[i+1:]\n            return int(num)\n        else:\n            num = num[:i] + '0' + num[i+1:]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Find the kth element in the array.\n    if k < 0 or k >= len(arr):\n        return None\n    arr.sort()\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    length = len(arr)\n    if length == 1:\n        return arr[0]\n    elif length == 2:\n        return arr[0] if k == 1 else arr[1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(k):\n        for j in range(len(arr)-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 0 or k > len(arr):\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[-1]\n    i = 0\n    for j in range(len(arr) - 1):\n        if arr[j] > pivot:\n            arr[j], arr[i] = arr[i], arr[j]\n            i += 1\n    arr[i], arr[-1] = arr[-1], arr[i]\n    if k < i:\n        return kth_element(arr[:i], k)\n    elif k > i:\n        return kth_element(arr[i:], k - i)\n    else:\n        return arr[i]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace(\"_\", \"\")\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    # your code here\n    if word=='':\n        return ''\n    if word[0].isupper():\n        return word\n    else:\n        newWord=''\n        for i in range(len(word)):\n            if i>0 and word[i-1].isupper():\n                newWord+=word[i].upper()\n            else:\n                newWord+=word[i].lower()\n        return newWord\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # word = snake_case.replace('_','')\n    word = word[0].upper() + word[1:]\n    for char in word:\n        if char.isupper():\n            return word\n        else:\n            word = word.replace(char,'')\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    else:\n        first_char = word[0].lower()\n        if first_char == '_':\n            return word[1:]\n        else:\n            new_word = first_char + word[1:].replace('_','')\n            return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace('_', '')"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([i.capitalize() for i in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = ''\n    if not word:\n        return word\n    if word[0] == '_':\n        return word[1:]\n    else:\n        for i in xrange(len(word)):\n            if word[i]!= '_':\n                res += word[i]\n            else:\n                res += word[i+1].upper()\n        return res\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(map(lambda x: x.capitalize() if x.isupper() else x, word.split('_')))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    #find the number of ways that n can be decomposed into the sum of two integers m\n    #a(n, m) = number of ways where n = sum of two integers m\n    return (m * (m + 1) + (n - m) * (n - m + 1)) / 2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        return eulerian_num(m, n)\n    if n == m:\n        return 1\n    return eulerian_num(n-m, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    elif m == 0:\n        return 0\n    elif m == 1:\n        return n\n    elif m < n:\n        return n\n    else:\n        return n + eulerian_num(n - 1, m - n)\n        \n        \ndef ex4_2():\n    '''\n    4.2 Write a function that takes a list and returns a new list with all the values\n    less than 5 replaced with the value None.\n    '''\n    L = [1, 2, 3, 4, 5, 6, 7]\n    L = [x if x > 5 else None for x in L]\n    return L\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0: \n        return 0\n    if m == 0: \n        return n + 1 \n    return n * eulerian_num(n, m - 1) + m * eulerian_num(n - 1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = 0\n    if m > 0: \n        res += eulerian_num(n, m-1)\n    if n > 0: \n        res += eulerian_num(n-1, m)\n    return res + (n * m)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    E = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            E = E + (i + j)\n    return E\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # rule 1\n    if m == 0:\n        return 0\n    # rule 2\n    if n == 0:\n        return 1\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [0] * m\n    for i in range(m):\n        a[i] = [0] * n\n    for i in range(m):\n        for j in range(n):\n            a[i][j] = [0]\n    return a\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*m - (m+n-2)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return int(factorial(n+m) / (factorial(n) * factorial(m)))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = [list(ele) for ele in input_list]\n    return [sorted(sublist) for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key = lambda x:sorted(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_index = 0\n    while sublist_index < len(input_list):\n        input_list[sublist_index].sort()\n        sublist_index += 1\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for i in range(len(input_list)):\n        sorted_list.append(sorted(input_list[i]))\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for a_list in input_list:\n        a_list.sort()\n        new_list.append(a_list)\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for i in input_list:\n        output_list.append(sorted(i))\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        sublist.sort()\n        output_list.append(sublist)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist = []\n    for i in input_list:\n        sublist.append(sorted(i))\n    input_list = [sublist[i] for i in range(0, len(sublist))]\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if type(i) is bool:\n            if i is True:\n                count+=1\n    return count\n    \ndef count_true(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i is True:\n            count+=1\n    return count\n    \ndef test_function():\n    print(count_true([\"apple\", \"banana\", \"orange\", True, False]))\n    print(count([\"apple\", \"banana\", \"orange\", True, False]))\n    \nif __name__ == \"__main__\":\n    test_function()"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(1 for e in lst if e is True)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true = 0\n    for val in lst:\n        if val == True:\n            count_true += 1\n    return count_true\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n    \n    \ndef is_consecutive(lst):   \n    '''\n    Write a python function to check whether the given list is consecutive or not.\n    '''\n    \n    if (count(lst) - 1 == sum(lst)):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([True for i in lst])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    if(isinstance(lst, list)):\n        true_booleans = 0\n        for i in lst:\n            if(i == True):\n                true_booleans+=1\n        return true_booleans\n    else:\n        return None\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(map(bool,lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    if lst==[]:\n        return 0\n    elif lst[0]==True:\n        return 1+count(lst[1:])\n    else:\n        return count(lst[1:])\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp = []\n    for item in test_tup:\n        temp.append(item)\n    for item in test_list:\n        temp.append(item)\n    return tuple(temp)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + list(test_tup)\n    \ndef concatenate_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + (test_list)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    # If the lists are not the same length, append the tuples \n    # of the same length to the given lists.\n    if len(test_list)!= len(test_tup):\n        # Create a tuple of the same length as the longest list.\n        test_tup_len = len(test_list)\n        for i in range(test_tup_len - len(test_tup)):\n            test_tup.append('')\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for i in range(len(test_tup)):\n        new_list.append(test_list)\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if isinstance(test_tup, tuple):\n        return test_list + test_tup\n    else:\n        return test_list + tuple(test_tup)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    sorted_list = []\n    \n    if num1!= []:\n        heapq.heappush(sorted_list,num1[0])\n    if num2!= []:\n        heapq.heappush(sorted_list,num2[0])\n    if num3!= []:\n        heapq.heappush(sorted_list,num3[0])\n    \n    \n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i] < num2[j] and num1[i]<num3[k]:\n            merged_list.append(num1[i])\n            i+=1\n        elif num2[j] < num1[i] and num2[j]<num3[k]:\n            merged_list.append(num2[j])\n            j+=1\n        else:\n            merged_list.append(num3[k])\n            k+=1\n    if i<len(num1):\n        merged_list.extend(num1[i:])\n    if j<len(num2):\n        merged_list.extend(num2[j:])\n    if k<len(num3):\n        merged_list.extend(num3[k:])\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    a=heapq.nsmallest(3,num1)\n    b=heapq.nsmallest(3,num2)\n    c=heapq.nsmallest(3,num3)\n    print(a)\n    print(b)\n    print(c)\n    res=a+b+c\n    res=sorted(res)\n    return res\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #Merge function\n    sorted_list = []\n    if num1 == []:\n        sorted_list = num2\n        return sorted_list\n    if num2 == []:\n        sorted_list = num1\n        return sorted_list\n    if num3 == []:\n        sorted_list = num1+num2\n        return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    elif num2 == None:\n        return num3\n    elif num3 == None:\n        return num1\n    return sorted(num1+num2+num3)\n    \ndef find_kth_smallest(nums, k):\n    '''\n    Find the kth smallest element in nums\n    '''\n    if nums == None or len(nums) <= 1:\n        return None\n    pq = []\n    for num in nums:\n        heapq.heappush(pq, num)\n    for i in range(k-1):\n        heapq.heappop(pq)\n    return heapq.heappop(pq)\n    \ndef sort_kth_smallest(nums, k):\n    '''\n    Write a function to sort the kth smallest elements in an unsorted array.\n    '''\n    if nums == None or len(nums) <= 1:\n        return None\n    pq = []\n    for num in nums:\n        heapq.heappush(pq, num)\n    for i in range(k-1):\n        heapq.heappop(pq)\n    return heapq.heappop(pq)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list_1 = num1\n    list_2 = num2\n    list_3 = num3\n    list_1.extend(list_2)\n    list_1.extend(list_3)\n    #print(list_1)\n    return sorted(list_1)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if (num2>num1) and (num2>num3):\n        return [num2,num1,num3]\n    elif (num1>num3):\n        return [num1,num3,num2]\n    else:\n        return [num3,num2,num1]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    combinedList=[]\n    if len(num1)==0:\n        combinedList=num2\n    elif len(num2)==0:\n        combinedList=num1\n    elif len(num3)==0:\n        combinedList=num1+num2\n    else:\n        if num1[0]<num2[0] and num1[0]<num3[0]:\n            combinedList.append(num1[0])\n            combinedList+=num2\n        elif num2[0]<num1[0] and num2[0]<num3[0]:\n            combinedList.append(num2[0])\n            combinedList+=num1\n        elif num3[0]<num1[0] and num3[0]<num2[0]:\n            combinedList.append(num3[0])\n            combinedList+=num1+num2\n    return combinedList\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    num1.sort()\n    return num1\n    \ndef merge_sorted_list_inplace(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    heapq.heapify(num1)\n    return num1\n    \ndef mergesort(num1):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    if len(num1)==0 or len(num1)==1:\n        return num1\n    mid = int(len(num1)/2)\n    left_half = num1[:mid]\n    right_half = num1[mid:]\n    left_half = mergesort(left_half)\n    right_half = mergesort(right_half)\n    return merge_sorted_list(left_half,right_half,num1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s=='0': return 0\n    if n==0: return 1\n    res=0\n    if s[0]=='1': res+=odd_Equivalent(s[1:],n)\n    if s[0]=='0': res+=odd_Equivalent(s[1:],n-1)\n    return res\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # s = string\n    # n = number of times to rotate the string\n    if (len(s) == 0 or len(s) == 1):\n        return 0\n    elif (len(s) == 2):\n        if (s[0] == s[1]):\n            return 1\n        else:\n            return 0\n    else:\n        # assert that the string is a binary string\n        assert(len(s) % 2 == 0)\n        \n        # s1 = s[0:len(s)/2]\n        # s2 = s[len(s)/2:]\n        s1 = s[0:len(s) / 2]\n        s2 = s[len(s) / 2:]\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s1 = []\n    for i in range(len(s)):\n        if i%2==0:\n            s1.append(s[i])\n    s2 = []\n    for i in range(len(s1)):\n        if i%2==0:\n            s2.append(s1[i])\n    s3 = []\n    for i in range(len(s2)):\n        if i%2==0:\n            s3.append(s2[i])\n    s4 = s3[n:]+s3[:n]\n    if s4 == s:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=list(s)\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary=['0','1']\n    count=0\n    for i in range(n):\n        temp=binary.pop(0)\n        binary.append(temp)\n    for i in binary:\n        if int(i)%2==1:\n            count+=1\n    return count\ndef binary_string(n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotatin"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def to_list(s):\n        l=[]\n        for c in s:\n            l.append(c)\n        return l\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    x=0\n    for i in range(n):\n        if int(s[i:],2)%2==1:\n            x+=1\n    return x\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ans = 0\n    for i in range(n):\n        if s[i] == '0':\n            s = s[1:] + '0'\n        else:\n            s = '0' + s[1:]\n        if len(s)%2 == 1:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # test the number of times to be rotated\n    for num in range(1,n+1):\n        if num%2==1:\n            s = s + s[0]\n            s = s[1:]\n    print s\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return len(s)\n    if n < 0:\n        return 0\n    if len(s) == 0:\n        return 0\n    if s[0] == '0':\n        return 2**(len(s) -1) * odd_Equivalent(s[1:],n - 1)\n    else:\n        return 2**(len(s) -1) * odd_Equivalent(s[1:],n)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0 \n    for i in range(s, n+1): \n        a = bin(i)[2:]\n        a = a[::-1]\n        if len(a) < n:\n            a = '0'*(n-len(a)) + a\n        if int(a) % 2 == 1: \n            result = result + 1\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        if len(common_elements) == 0:\n            common_elements = i\n        else:\n            common_elements = list(set(common_elements).intersection(set(i)))\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not isinstance(nestedlist, list):\n        return None\n    if len(nestedlist) == 0:\n        return None\n    return [common_element(a,b) for a,b in itertools.izip_longest(nestedlist[:-1], nestedlist[1:]) if common_element(a,b)]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for element in nestedlist:\n        if element not in common_elements:\n            common_elements.append(element)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Find common elements\n    if len(nestedlist) == 0:\n        return\n    elif len(nestedlist) == 1:\n        return nestedlist[0]\n    common = nestedlist[0]\n    for element in nestedlist[1:]:\n        common = [e for e in common if e in element]\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j])!= set():\n                common.append(set(nestedlist[i]) & set(nestedlist[j]))\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        res.intersection_update(set(nestedlist[i]))\n    return list(res)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = [[2, 3], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9]]\n    print(nestedlist)\n    l = []\n    for i in nestedlist:\n        if i in l:\n            pass\n        else:\n            l.append(i)\n    print(l)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for elt in nestedlist:\n        if type(elt) is list:\n            for elt2 in elt:\n                if elt2 in result:\n                    continue\n                else:\n                    result.append(elt2)\n        else:\n            if elt in result:\n                continue\n            else:\n                result.append(elt)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for element in nestedlist:\n        if isinstance(element, list):\n            common_set |= common_in_nested_lists(element)\n        else:\n            common_set.add(element)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    flattened = flatten(nestedlist)\n    return list(set(flattened))\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if re.match(r'^[-+]?[0-9]*$', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # print(text)\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all([x == {} for x in list1])\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    l = len(list1)\n    for i in range(0,l):\n        if not list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for i in list1:\n        if not i:\n            return True\n    return False\n    \ndef get_keys(dict1):\n    '''\n    Write a function to return the keys of a dictionary as a list.\n    '''\n    \n    return list(dict1.keys())\n    \ndef get_values(dict1):\n    '''\n    Write a function to return the values of a dictionary as a list.\n    '''\n    \n    return list(dict1.values())\n    \ndef keys_values_dict(dict1, key1, value1):\n    '''\n    Write a function to return a dictionary with keys and values that satisfies\n    the condition.\n    '''\n    \n    if key1 not in dict1:\n        return {}\n    else:\n        return {key1:value1}\n    \ndef count_keys(dict1):\n    '''\n    Write a function to return the count of all the keys present in a dictionary.\n    '''\n    \n    return len(dict1)\n    \ndef find_common(list1, list2):\n    '''\n    Write a function to return the common items of two lists.\n    '''\n    \n    return list(set(list1).intersection(set(list2)))\n    \ndef convert_string_to_num(list1):\n    '''\n    Write a function to convert a list of strings to a list of numbers.\n    '''\n    \n    return list(map(int, list1))\n    \ndef odd_even(list1):\n    '''\n    Write a function to check whether all elements of a list are even or odd.\n    '''\n    \n    return all(i%2==0 for i in list1)\n    \ndef multiple_dict(dict1, num1):\n    '''\n    Write a function to return the dictionary whose values are multiples of a given number.\n    '''\n    \n    return {key:value for key,value in dict1.items() if value%num1==0}\n    \ndef remove_duplicate(list1):\n    '''\n    Write a function to remove duplicate elements from a list.\n    '''\n    \n    return list(set(list1))\n    \ndef num_to_str(num1):\n    '''\n    Write a function to convert a number to string.\n    '''\n    \n    return str(num1)\n    \ndef find_min(list1):\n    '''\n    Write a function to find the minimum number from a list.\n    '''\n    \n    return min(list1)\n    \ndef find_max(list1):\n    '''\n    Write a function to find the maximum number from a list.\n    '''\n    \n    return max(list1)\n    \ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by values.\n    '''\n    \n    return sorted(dict1, key=dict1.get)\n    \ndef create_dict(dict1):\n    '''\n    Write a function to create a dictionary from a list of tuples.\n    '''\n    \n    return {key:value for key,value in dict1}\n    \ndef find_min_max_values(dict1):\n    '''\n    Write a function to return the minimum and maximum value of a dictionary.\n    '''\n    \n    return (min(dict1.values()), max(dict1.values()))\n    \ndef check_positiveness(list1, flag):\n    '''\n    Write a function to check if all elements of a list are positive or negative.\n    '''\n    \n    return all(i>=0 for i in list1) if flag else all(i<=0 for i in list1)\n    \ndef unique_elem_dict(dict1):\n    '''\n    Write a function to return a dictionary with unique elements as keys and list of values as values.\n    '''\n    \n    return {key: [value] for key, value in dict1.items() if len(value)==1}\n    \ndef find_longest_str(list1):\n    '''\n    Write a function to return the longest string in a list.\n    '''\n    \n    return max(list1, key=len)\n    \ndef check_if_all_elements_in_list_are_strings(list1):\n    '''\n    Write a function to check if all elements of a list are strings.\n    '''\n    \n    return all(type(i)==str for i in list1)\n    \ndef most_common(list1):\n    '''\n    Write a function to find the most common element in a list.\n    '''\n    \n    return max(set(list1), key=list1.count)\n    \ndef is_it_an_even_num(num1):\n    '''\n    Write a function to check if a number is even or odd.\n    '''\n    \n    return num1%2==0\n    \ndef sum_of_elements(list1):\n    '''\n    Write a function to sum all the elements of a list.\n    '''\n    \n    return sum(list1)\n    \ndef sorted_dict(dict1):\n    '''\n    Write a function to sort a dictionary by values.\n    '''\n    \n    return sorted(dict1.items(), key=lambda x:x[1])\n    \ndef filter_dict(dict1, condition):\n    '''\n    Write a function to filter a dictionary by condition.\n    '''\n    \n    return {key:value for key,value in dict1.items() if condition(value)}\n    \ndef unique_dict_values(dict1):\n    '''\n    Write a function to return a dictionary with unique elements as keys and list of values as values.\n    '''\n    \n    return {key: [value] for key, value in dict1.items() if len(value)==1}\n    \ndef find_unique_elem_dict(dict1):\n    '''\n    Write a function to return a dictionary with unique elements as keys and list of values as values.\n    '''\n    \n    return {key: [value] for key, value in dict1.items() if len(value)==1}\n    \ndef remove_duplicate_items(list1):\n    '''\n    Write a function to remove duplicate items from a list.\n    '''\n    \n    return list(set(list1))\n    \ndef get_even_dict(dict1):\n    '''\n    Write a function to return a dictionary whose keys are even numbers from a given dictionary.\n    '''\n    \n    return {key: value for key, value in dict1.items() if key%2==0}\n    \ndef get_odd_dict(dict1):\n    '''\n    Write a function to return a dictionary whose keys are odd numbers from a given dictionary.\n    '''\n    \n    return {key: value for key, value in dict1.items() if key%2!=0}\n    \ndef count_dict_values(dict1):\n    '''\n    Write a function to count the number of values in a dictionary.\n    '''\n    \n    return len(dict1)\n    \ndef check_if_all_values_are_same(list1):\n    '''\n    Write a function to check if all elements of a list are same.\n    '''\n    \n    return all(i==list1[0] for i in list1)\n    \ndef count_values(dict1, key1):\n    '''\n    Write a function to return the count of all values in a dictionary.\n    '''\n    \n    return dict1[key1]\n    \ndef count_occurence(list1):\n    '''\n    Write a function to return a dictionary with each element of a list as key and number of times it is repeated as value.\n    '''\n    \n    return {key:list1.count(key) for key in list1}\n    \ndef get_dict_values(dict1):\n    '''\n    Write a function to return the values of a dictionary as a list.\n    '''\n    \n    return list(dict1.values())\n    \ndef get_dict_keys(dict1):\n    '''\n    Write a function to return the keys of a dictionary as a list.\n    '''\n    \n    return list(dict1.keys())\n    \ndef sort_list_by_second_element(list1):\n    '''\n    Write a function to sort a list o"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = True\n    for i in list1:\n        if len(i)!=0:\n            flag = False\n    return flag\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif all(v == {} for v in list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n    \ndef sum_of_dicts(lst_of_dicts):\n    '''\n    Write a function to find the sum of the values of the dictionary in a list.\n    '''\n    total = 0\n    for d in lst_of_dicts:\n        total += sum(d.values())\n    return total\n    \ndef find_max_dict(lst_of_dicts):\n    '''\n    Write a function to find the dictionary with the maximum values in a list.\n    '''\n    max_dict = lst_of_dicts[0]\n    max_val = sum_of_dicts(lst_of_dicts)\n    for d in lst_of_dicts:\n        if sum_of_dicts(lst_of_dicts) > sum_of_dicts(max_dict):\n            max_dict = d\n            max_val = sum_of_dicts(lst_of_dicts)\n    return max_dict\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for elem in list1:\n        if elem:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x,y: x*10+y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Create an empty list to store all the integers\n    integers = []\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for i in nums:\n        num += i * pow(2, len(nums) - 1)\n    return num\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum([x*10**i for i, x in enumerate(reversed(nums))])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    sum = 0\n    n = len(nums)\n    for i in range(n):\n        sum = sum + nums[i] * (2 ** (n-1-i))\n    return sum\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(lambda x, y: x * y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    t = 0\n    for i in nums:\n        t += i * 10 ** (len(nums) - 1)\n    return t\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res = res * 10 + num\n    return res\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        float_list = []\n        for i in range(len(test_list)):\n            float_list.append(float(test_list[i]))\n        return float_list\n    except ValueError:\n        return None\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sub_list in test_list:\n        for i in range(len(sub_list)):\n            try:\n                sub_list[i] = float(sub_list[i])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for x in test_list:\n        for y in x:\n            if isinstance(y, (float, int)):\n                pass\n            else:\n                y = float(y)\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) is float or type(test_list[i][j]) is int:\n                test_list[i][j] = float(test_list[i][j])\n            else:\n                test_list[i][j] = float(test_list[i][j].replace(',', ''))\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for l in test_list:\n        for i in range(len(l)):\n            if not isinstance(l[i], float):\n                try:\n                    l[i] = float(l[i])\n                except ValueError:\n                    pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) is int:\n                test_list[i][j] = float(test_list[i][j])\n            else:\n                test_list[i][j] = float(test_list[i][j].replace(',', ''))\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = float(test_list[i])\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list to a string separated by spaces.\n    '''\n    return''.join(list)\n    \ndef check_permutation(string1, string2):\n    '''\n    Write a function that returns True if string1 is a permutation of string2, else False.\n    '''\n    # Create a dictionary for string2\n    d = {}\n    # Convert string2 into a dictionary\n    for i in string2:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    # Now check if string1 has only 1 permutation of string2\n    for i in string1:\n        if i in d:\n            if d[i] == 1:\n                d[i] -= 1\n            else:\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_list = string.split(' ')\n    return new_list\n    \n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of strings to a string where the items are space separated.\n    '''\n    new_string = ''\n    for i in list:\n        new_string = new_string + i +''\n    return new_string\n    \n    \ndef count_words(list):\n    '''\n    Write a function to count the number of items in a list that are strings.\n    '''\n    counter = 0\n    for i in list:\n        if type(i) == str:\n            counter = counter + 1\n    return counter\n    \n    \ndef count_items(list):\n    '''\n    Write a function to count the number of items in a list that are lists.\n    '''\n    counter = 0\n    for i in list:\n        if type(i) == list:\n            counter = counter + 1\n    return counter\n    \n    \ndef count_strings(list):\n    '''\n    Write a function to count the number of items in a list that are strings.\n    '''\n    counter = 0\n    for i in list:\n        if type(i) == str:\n            counter = counter + 1\n    return counter\n    \n    \ndef unique_words(list):\n    '''\n    Write a function to get all the unique words in a list.\n    '''\n    new_list = []\n    for i in list:\n        if type(i) == str:\n            if i not in new_list:\n                new_list.append(i)\n    return new_list\n    \n    \ndef uniqu_words_dict(list):\n    '''\n    Write a function to get all the unique words in a list of strings.\n    '''\n    new_list = []\n    for i in list:\n        if type(i) == str:\n            if i not in new_list:\n                new_list.append(i)\n    new_dict = {i:0 for i in new_list}\n    for i in new_list:\n        new_dict[i] = list.count(i)\n    return new_dict\n    \n    \ndef all_words(list):\n    '''\n    Write a function to get all the words in a list of strings.\n    '''\n    new_list = []\n    for i in list:\n        if type(i) == str:\n            if i not in new_list:\n                new_list.append(i)\n    return new_list\n    \n    \ndef all_words_dict(list):\n    '''\n    Write a function to get all the words in a list of strings.\n    '''\n    new_list = []\n    for i in list:\n        if type(i) == str:\n            if i not in new_list:\n                new_list.append(i)\n    new_dict = {i:0 for i in new_list}\n    for i in new_list:\n        new_dict[i] = list.count(i)\n    return new_dict\n    \n    \ndef last_word(list):\n    '''\n    Write a function to get the last word in a list of strings.\n    '''\n    new_list = []\n    for i in list:\n        if type(i) == str:\n            new_list.append(i)\n    return new_list[-1]\n    \n    \ndef last_word_dict(list):\n    '''\n    Write a function to get the last word in a list of strings.\n    '''\n    new_list = []\n    for i in list:\n        if type(i) == str:\n            new_list.append(i)\n    new_dict = {i:0 for i in new_list}\n    for i in new_list:\n        new_dict[i] = list.count(i)\n    return new_dict\n    \n    \ndef string_length(list):\n    '''\n    Write a function to get the length of the string.\n    '''\n    length = 0\n    for i in list:\n        length = length + len(i)\n    return length\n    \n    \ndef last_length(list):\n    '''\n    Write a function to get the length of the last word in a list of strings.\n    '''\n    length = 0\n    for i in list:\n        if type(i) == str:\n            length = length + len(i)\n    return length\n    \n    \ndef first_word(list):\n    '''\n    Write a function to get the first word in a list of strings.\n    '''\n    new_list = []\n    for i in list:\n        if type(i) == str:\n            new_list.append(i)\n    return new_list[0]\n    \n    \ndef first_word_dict(list):\n    '''\n    Write a function to get the first word in a list of strings.\n    '''\n    new_list = []\n    for i in list:\n        if type(i) == str:\n            new_list.append(i)\n    new_dict = {i:0 for i in new_list}\n    for i in new_list:\n        new_dict[i] = list.count(i)\n    return new_dict\n    \n    \ndef string_join(list):\n    '''\n    Write a function to join all the items in a list of strings into one string.\n    '''\n    new_string = ''\n    for i in list:\n        new_string = new_string + i\n    return new_string\n    \n    \ndef string_join_dict(list):\n    '''\n    Write a function to join all the items in a list of strings into one string.\n    '''\n    new_string = ''\n    for i in list:\n        new_string = new_string + i\n    new_dict = {i:0 for i in new_string}\n    for i in new_string:\n        new_dict[i] = list.count(i)\n    return new_dict\n    \n    \ndef reverse_list(list):\n    '''\n    Write a function to reverse a list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.insert(0, i)\n    return new_list\n    \n    \ndef reverse_list_dict(list):\n    '''\n    Write a function to reverse a list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.insert(0, i)\n    new_dict = {i:0 for i in new_list}\n    for i in new_list:\n        new_dict[i] = list.count(i)\n    return new_dict\n    \n    \ndef middle_string(list):\n    '''\n    Write a function to get the middle string in a list of strings.\n    '''\n    new_list = []\n    for i in list:\n        if type(i) == str:\n            new_list.append(i)\n    if len(new_list) % 2 == 0:\n        index1 = len(new_list) // 2 - 1\n        index2 = len(new_list) // 2\n        return new_list[index1] + new_list[index2]\n    else:\n        index1 = len(new_list) // 2\n        return new_list[index1]\n    \n    \ndef middle_string_dict(list):\n    '''\n    Write a function to get the middle string in a list of strings.\n    '''\n    new_list = []\n    for i in list:\n        if type(i) == str:\n            new_list.append(i)\n    if len(new_list) % 2 == 0:\n        index1 = len(new_list) // 2 - 1\n        index2 = len(new_list) // 2\n        new_dict = {i:0 for i in new_list}\n        new_dict[new_list[index1]] = new_list.count(new_list[index1])\n        new_dict[new_list[index2]] = new_list.count(new_list[index2])\n        return new_dict\n    else:\n        index1 = len(new_list) // 2\n        new_dict = {i:0 for i in new_list}\n        new_dict[new"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = []\n    if string!= '':\n        string_list = string.split()\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split() \n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split(\" \")\n    return string_list\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    length = len(arr)\n    for i in range(0, length):\n        if arr[i] == arr[arr[i]]:\n            arr[arr[i]] = arr[length-1]\n        else:\n            arr[arr[i]] = arr[i]\n    return arr[length-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    '''\n    The idea is to traverse the array and count the elements that have count == 1\n    If the count of the element is 1, then it is the answer.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr[i]!= arr[arr[i]-1]:\n            arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n        else:\n            i += 1\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            return i+1\n    return len(arr) + 1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n        \n    return arr[-1]\n    \n    \n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #return next(i for i,v in enumerate(arr) if arr.count(v) == 1)\n    return binarySearch(arr,0,len(arr)-1,arr[0])\n    \ndef binarySearch(arr,low,high,e):\n    if high < low:\n        return -1\n    mid = (low + high)/2\n    if mid == 0:\n        return arr[0]\n    if e == arr[mid]:\n        return mid\n    elif e < arr[mid]:\n        return binarySearch(arr,low,mid-1,e)\n    else:\n        return binarySearch(arr,mid+1,high,e)\n    \n    \n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == None or len(arr) == 0:\n        return\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    result = -1\n    i = 0\n    while i < len(arr):\n        if arr[i] == arr[i-1] and i!=0:\n            i += 1\n            continue\n        else:\n            result = arr[i]\n            i += 1\n    return result\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        last = arr[0]\n        cnt = 1\n        for i in xrange(1, n):\n            if arr[i] == last:\n                cnt += 1\n            else:\n                if cnt == 1:\n                    return last\n                else:\n                    last = arr[i]\n                    cnt = 1\n        return arr[n-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return search_helper(arr, 0, len(arr))\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr)//2\n    if arr[mid] == arr[mid+1] or arr[mid] == arr[mid-1]:\n        return search(arr[:mid])\n    elif arr[mid] > arr[mid+1] and arr[mid] < arr[mid-1]:\n        return search(arr[mid+1:])\n    else:\n        return search(arr[:mid])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return search_helper(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key = abs, reverse = True)\n    i = 0\n    while i < len(list1) - 1:\n        if list1[i] > 0 and list1[i+1] > 0:\n            break\n        i += 1\n    j = len(list1) - 1\n    while j > i:\n        if list1[j] > 0 and list1[j-1] > 0:\n            break\n        j -= 1\n    return (list1[i] * list1[j], i, j)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = []\n    for i in range(0, len(list1), 2):\n        product = tuple(x*y for x,y in zip(list1[i], list1[i+1]))\n        max_product.append(max(product))\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort()\n    a = list1[-1] * list1[-2]\n    return a\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([(i*j) for i in list1 for j in list1 if i<j])\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -sys.maxsize - 1\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #Could use list comprehension to simplify code\n    #Could sort the tuples by product and return the largest product from the top\n    #O(n log n) time, O(n) space\n    list1.sort(key=lambda x: x[0]*x[1], reverse=True)\n    return list1[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return max(list1[0][0]*list1[0][1], list1[0][1]*list1[1][0], list1[0][0]*list1[1][1], list1[0][1]*list1[1][0])\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][0] > max_product:\n                max_product = list1[i][0] * list1[j][0]\n            if list1[i][1] * list1[j][1] > max_product:\n                max_product = list1[i][1] * list1[j][1]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # if list is empty\n    if len(list1) == 0:\n        return 0\n    # else\n    else:\n        result = 0\n        for i in range(len(list1)):\n            for j in range(len(list1)):\n                if i!= j:\n                    result = max(result, abs(list1[i][0]*list1[j][1]))\n        return result\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    abs_list = list(map(lambda x: abs(x), list1))\n    return max(abs_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        return sum(map(lambda x: int(x), str(num))) == sum(map(lambda x: int(x), str(num)))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    amicable_numbers = []\n    for num in range(1, limit):\n        if sum_of_factors(num) == num:\n            amicable_sum += num\n            amicable_numbers.append(num)\n    print('amicable_sum =', amicable_sum)\n    print('amicable_numbers =', amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        sum_of_divisors = 0\n        for j in range(1, i):\n            if (i % j == 0):\n                sum_of_divisors += j\n        second_sum_of_divisors = 0\n        for k in range(1, sum_of_divisors):\n            if (sum_of_divisors % k == 0):\n                second_sum_of_divisors += k\n        if second_sum_of_divisors == i and i!= sum_of_divisors:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for number in range(2, limit):\n        divisor_sum = sum(divisor for divisor in range(2, number) if number % divisor == 0)\n        if number!= divisor_sum and number!= (divisor_sum := sum(divisor for divisor in range(2, divisor_sum) if divisor_sum % number == 0)):\n            amicable_numbers.add(number)\n            amicable_numbers.add(divisor_sum)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(amicable_numbers_range(limit))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = []\n    for i in range(1, limit+1):\n        if sum_of_divisors(i) == i:\n            amicable_nums.append(i)\n    sum_amicable_nums = sum(amicable_nums)\n    return sum_amicable_nums\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_divisors(i)\n        if i == sum_divisors(j) and i!= j:\n            amicable_numbers.update([i, j])\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(2,limit):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum([x for x in range(1,i) if i % x == 0])\n            if sum_of_divisors!= i and sum_of_divisors in amicable_numbers:\n                amicable_numbers.add(i)\n                amicable_numbers.add(sum_of_divisors)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_to_limit = 0\n    amicables = []\n    for x in range(1, limit):\n        sum_to_y = sum_to_x(x)\n        if x == sum_to_y:\n            amicables.append(x)\n    return sum(amicables)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_list = []\n    for n in range(1,limit):\n        sum1 = 0\n        sum2 = 0\n        for i in range(1,n):\n            if n%i == 0:\n                sum1 += i\n        for j in range(1,sum1):\n            if sum1%j == 0:\n                sum2 += j\n        if n == sum2 and n!= sum1:\n            amicable_list.append(n)\n    return sum(amicable_list)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b == 0.0:\n        return math.pi / 2.0\n    angle = cmath.phase(complex(a,b))\n    if angle < 0.0:\n        angle += 2.0 * math.pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(a+b*1j))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # return cmath.phase(complex(a,b))\n    print abs(a-b)\n    print cmath.phase(complex(a,b))\n    return abs(a-b)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b == 0:\n        return cmath.phase(a)\n    else:\n        return cmath.phase(a/b)\n    \ndef is_prime(x):\n    for i in xrange(2,int(x**0.5)+1):\n        if x%i==0:\n            return False\n    return True\n    \ndef find_prime(n):\n    prime_list=[]\n    for i in xrange(2,n+1):\n        if is_prime(i):\n            prime_list.append(i)\n    return prime_list\n    \ndef find_sum_of_primes(n):\n    prime_list=find_prime(n)\n    sum=0\n    for i in prime_list:\n        sum+=i\n    return sum\n    \ndef is_palindrome(x):\n    if str(x)==str(x)[::-1]:\n        return True\n    return False\n    \ndef find_largest_palindrome(n):\n    for i in xrange(999,99,-1):\n        if is_palindrome(i):\n            if i>n:\n                return i\n            elif i<n:\n                if is_palindrome(i*11):\n                    return i*11\n            else:\n                return n\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle=cmath.phase(complex(a,b))\n    if angle<0:\n        angle=2*cmath.pi+angle\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    r = cmath.polar(complex(a,b))\n    return r[1]\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a_norm = cmath.sqrt(a.real**2+a.imag**2)\n    b_norm = cmath.sqrt(b.real**2+b.imag**2)\n    angle = cmath.acos((a_norm*a_norm+b_norm*b_norm-a.imag*b.imag)/(2*a_norm*b_norm))\n    return angle\n    \ndef is_prime(num):\n    '''\n    Implement a function to check whether a given number is prime or not.\n    '''\n    if num<2:\n        return False\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b==0:\n        return(cmath.phase(a))\n    else:\n        return(cmath.phase(complex(a,b)))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return math.atan(a/b)\n    \n    \ndef angle_unit(a,b):\n    '''\n    Write a function to get the angle of a unit complex number\n    '''\n    return angle_complex(a,b)/(2*math.pi)\n    \n    \ndef angle_diff(a,b):\n    '''\n    Write a function to get the difference between two angles in radians\n    '''\n    return abs(angle_unit(a,b)-angle_unit(b,a))\n    \n    \ndef angle_add(a,b):\n    '''\n    Write a function to get the sum of two angles in radians\n    '''\n    return angle_complex(a,b)+angle_complex(b,a)\n    \n    \ndef mag_complex(a,b):\n    '''\n    Write a function to get the magnitude of a complex number\n    '''\n    return math.sqrt(a**2+b**2)\n    \n    \ndef mag_unit(a,b):\n    '''\n    Write a function to get the magnitude of a unit complex number\n    '''\n    return mag_complex(a,b)\n    \n    \ndef mag_diff(a,b):\n    '''\n    Write a function to get the difference between two magnitudes\n    '''\n    return abs(mag_unit(a,b)-mag_unit(b,a))\n    \n    \ndef mag_add(a,b):\n    '''\n    Write a function to get the sum of two magnitudes\n    '''\n    return mag_complex(a,b)+mag_complex(b,a)\n    \n    \ndef phase_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number\n    '''\n    return math.atan2(a,b)\n    \n    \ndef phase_unit(a,b):\n    '''\n    Write a function to get the phase of a unit complex number\n    '''\n    return phase_complex(a,b)/(2*math.pi)\n    \n    \ndef phase_diff(a,b):\n    '''\n    Write a function to get the difference between two phases\n    '''\n    return abs(phase_unit(a,b)-phase_unit(b,a))\n    \n    \ndef phase_add(a,b):\n    '''\n    Write a function to get the sum of two phases\n    '''\n    return phase_complex(a,b)+phase_complex(b,a)\n    \n    \ndef exp_complex(a,b):\n    '''\n    Write a function to get the exponential of a complex number\n    '''\n    return cmath.exp(complex(a,b))\n    \n    \ndef exp_unit(a,b):\n    '''\n    Write a function to get the exponential of a unit complex number\n    '''\n    return exp_complex(a,b).real\n    \n    \ndef exp_diff(a,b):\n    '''\n    Write a function to get the difference between two exponentials\n    '''\n    return abs(exp_unit(a,b)-exp_unit(b,a))\n    \n    \ndef exp_add(a,b):\n    '''\n    Write a function to get the sum of two exponentials\n    '''\n    return exp_complex(a,b)+exp_complex(b,a)\n    \n    \ndef mod_complex(a,b):\n    '''\n    Write a function to get the modulus of a complex number\n    '''\n    return abs(a**2+b**2)\n    \n    \ndef mod_unit(a,b):\n    '''\n    Write a function to get the modulus of a unit complex number\n    '''\n    return mod_complex(a,b)\n    \n    \ndef mod_diff(a,b):\n    '''\n    Write a function to get the difference between two magnitudes\n    '''\n    return abs(mod_unit(a,b)-mod_unit(b,a))\n    \n    \ndef mod_add(a,b):\n    '''\n    Write a function to get the sum of two magnitudes\n    '''\n    return mod_complex(a,b)+mod_complex(b,a)\n    \n    \ndef add_complex(a,b):\n    '''\n    Write a function to get the sum of two complex numbers\n    '''\n    return a+b\n    \n    \ndef add_unit(a,b):\n    '''\n    Write a function to get the sum of two unit complex numbers\n    '''\n    return mod_unit(a,b)+mod_unit(b,a)\n    \n    \ndef add_diff(a,b):\n    '''\n    Write a function to get the difference between two sums\n    '''\n    return abs(add_unit(a,b)-add_unit(b,a))\n    \n    \ndef sub_complex(a,b):\n    '''\n    Write a function to get the difference between two complex numbers\n    '''\n    return a-b\n    \n    \ndef sub_unit(a,b):\n    '''\n    Write a function to get the difference between two unit complex numbers\n    '''\n    return mod_unit(a,b)-mod_unit(b,a)\n    \n    \ndef sub_diff(a,b):\n    '''\n    Write a function to get the difference between two sums\n    '''\n    return abs(sub_unit(a,b)-sub_unit(b,a))\n    \n    \ndef mul_complex(a,b):\n    '''\n    Write a function to get the product of two complex numbers\n    '''\n    return a*b\n    \n    \ndef mul_unit(a,b):\n    '''\n    Write a function to get the product of two unit complex numbers\n    '''\n    return mod_unit(a,b)*mod_unit(b,a)\n    \n    \ndef mul_diff(a,b):\n    '''\n    Write a function to get the difference between two products\n    '''\n    return abs(mul_unit(a,b)-mul_unit(b,a))\n    \n    \ndef div_complex(a,b):\n    '''\n    Write a function to get the quotient of a complex number\n    '''\n    return a/b\n    \n    \ndef div_unit(a,b):\n    '''\n    Write a function to get the quotient of a unit complex number\n    '''\n    return mul_unit(a,b)/mod_unit(b,a)\n    \n    \ndef div_diff(a,b):\n    '''\n    Write a function to get the difference between two quotients\n    '''\n    return abs(div_unit(a,b)-div_unit(b,a))\n    \n    \ndef pow_complex(a,b):\n    '''\n    Write a function to get the bth power of a complex number\n    '''\n    return a**b\n    \n    \ndef pow_unit(a,b):\n    '''\n    Write a function to get the bth power of a unit complex number\n    '''\n    return mod_unit(a,b)**b\n    \n    \ndef pow_diff(a,b):\n    '''\n    Write a function to get the difference between two powers\n    '''\n    return abs(pow_unit(a,b)-pow_unit(b,a))\n    \n    \ndef conj_complex(a):\n    '''\n    Write a function to get the conjugate of a complex number\n    '''\n    return complex(a.real,a.imag)\n    \n    \ndef conj_unit(a):\n    '''\n    Write a function to get the conjugate of a unit complex number\n    '''\n    return mod_unit(a)\n    \n    \ndef conj_diff(a):\n    '''\n    Write a function to get the difference between two conjugates\n    '''\n    return abs(conj_unit(a)-conj_unit(a))\n    \n    \ndef conj_add(a,b):\n    '''\n    Write a function to get the sum of two conjugates\n    '''\n    return conj_complex(a)+conj_complex(b)\n    \n    \ndef conj_mul(a,b):\n    '''\n    Write a function to get the product of two conjugates\n    '''\n    return conj_comple"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    count = 0\n    zeros = 0\n    ones = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            zeros += 1\n        else:\n            ones += 1\n        if zeros == ones:\n            return 0\n        elif zeros > ones:\n            length = zeros - ones\n        else:\n            length = zeros - ones + 1\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    bit_count = 0\n    for char in string:\n        if char == '0':\n            bit_count += 1\n        else:\n            bit_count -= 1\n        max_diff = max(max_diff, bit_count)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    count_0 = 0\n    count_1 = 0\n    for i in xrange(length):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # convert the string to a list, containing each byte of the string\n    list = [int(i) for i in list(string)]\n    # initiate the current length as 0\n    length = 0\n    # initiate the counter, to keep track of the number of zeros and ones\n    counter = 0\n    # initiate the length as 0\n    length = 0\n    # run the loop till the length of the list\n    for i in range(len(list)):\n        # check if the current element is 1\n        if (list[i] == 1):\n            # increase the counter\n            counter += 1\n        # if the current element is 0\n        else:\n            # increase the counter\n            counter -= 1\n        # increase the length\n        length += 1\n        # if the length is more than the current length\n        if (length > length):\n            # change the length to the current length\n            length = length\n        # if the length is less than the current length\n        else:\n            # change the length to the current length\n            length = length\n    # return the length\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) <= 2:\n        return -1\n    num_zeros = 0\n    num_ones = 0\n    for i in range(0, len(string)):\n        if string[i] == \"0\":\n            num_zeros += 1\n        else:\n            num_ones += 1\n        if num_zeros > num_ones:\n            return num_zeros - num_ones\n        if num_ones > num_zeros:\n            return num_ones - num_zeros\n    return -1\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # n = len(string)\n    n = len(string)\n    if n == 0:\n        return -1\n    else:\n        max_length = 0\n        for i in xrange(n):\n            counter = 0\n            for j in xrange(i, n):\n                if string[j] == '0':\n                    counter += 1\n                else:\n                    max_length = max(max_length, counter)\n                    counter = 0\n        return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Length of the string\n    length = len(string)\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Take the string as a list\n    n = len(string)\n    # Find the number of 1s and 0s in the string\n    count = [0]*2\n    for i in xrange(n):\n        if string[i] == '1':\n            count[0] += 1\n        else:\n            count[1] += 1\n    # Find the max difference between the numbers of 1s and 0s\n    max_diff = max(abs(count[0] - count[1]), abs(count[1] - count[0]))\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = [0,0]\n    for i in range(len(string)):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n    return max(count[0],count[1]) - min(count[0],count[1])\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    result = []\n    for i in range(len(string)):\n        result.append(find_length_aux(string, i))\n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 1\n    i = 2\n    while i <= a and i <= b:\n        if a%i == 0 and b%i == 0:\n            sum = sum*i\n        i += 1\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==b:\n        return a\n    elif a>b:\n        for i in range(b+1,a):\n            if i%a==0 and i%b==0:\n                return i\n    else:\n        for i in range(a+1,b):\n            if i%a==0 and i%b==0:\n                return i\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s=[]\n    # for i in range(1,a):\n    #     if a%i==0 and b%i==0:\n    #         s.append(i)\n    # return s\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum([i for i in range(1,min(a,b)) if a%i==0 and b%i==0])\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 1\n    for i in range(2, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        while b!= 0:\n            a,b = b,a%b\n        return a\n    a = gcd(a,b)\n    return (a*(a+b))/2\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 2\n    res = 0\n    while i <= a and i <= b:\n        if a%i == 0 and b%i == 0:\n            res += i\n        i += 1\n    return res\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    list_of_divisors=[]\n    if(a>b):\n        for i in range(2,b):\n            if(a%i==0 and b%i==0):\n                list_of_divisors.append(i)\n    else:\n        for i in range(2,a):\n            if(a%i==0 and b%i==0):\n                list_of_divisors.append(i)\n    sum=0\n    for i in list_of_divisors:\n        sum=sum+i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    n1=a\n    n2=b\n    div=[]\n    l=[]\n    for i in range(1,n1+1):\n        if n1%i==0 and n2%i==0:\n            div.append(i)\n    sum=0\n    for i in div:\n        l.append(i)\n    for i in l:\n        sum+=i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x,y = a,b\n    divisors=[]\n    for divisor in range(1,x):\n        if x%divisor == 0 and y%divisor == 0:\n            divisors.append(divisor)\n    sum=0\n    for divisor in divisors:\n        sum=sum+divisor\n    return sum\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x > 0:\n        return x * y\n    else:\n        return -(-x * y)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return 0\n    else:\n        return x + multiply_int(x, y-1)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    else:\n        return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return list(filter(lambda x: len(x) > n, str))\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str:\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    print(long_words)\n    \nlong_words(4, ['cat', 'rat', 'rat', 'cat', 'dog'])\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longwords = [word for word in str.split() if len(word) > n]\n    return longwords\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return list(filter(lambda x: len(x) > n, str))\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    if rows!= cols:\n        return False\n    elif rows == cols:\n        total = 0\n        for i in range(rows):\n            for j in range(cols):\n                total += my_matrix[i][j]\n        if total == rows * rows:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check each row sum\n    for i in range(len(my_matrix)):\n        row_sum = 0\n        for j in range(len(my_matrix)):\n            row_sum += my_matrix[i][j]\n        if row_sum!= i + 1:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # to do: complete this method\n    # a magic square is an n x n matrix that is made up of integers that add up to\n    # the nth power of an integer, where the nth power is the number of rows or columns\n    # in the matrix. The sum of the nth power of a number is equal to the nth\n    # row/column sum of the matrix.\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows, cols = len(my_matrix), len(my_matrix[0])\n    row_sum, col_sum, total_sum = 0, 0, 0\n    for i in range(rows):\n        for j in range(cols):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n            total_sum += my_matrix[i][j]\n    if rows == cols and (row_sum == col_sum == total_sum):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #Check the matrix is square\n    rows,cols = len(my_matrix), len(my_matrix[0])\n    if rows!= cols:\n        return False\n    #Check that the sum of each row is the same\n    for row in my_matrix:\n        if sum(row)!= rows:\n            return False\n    #Check the sum of each column is the same\n    for i in range(rows):\n        col_sum = 0\n        for j in range(rows):\n            col_sum += my_matrix[j][i]\n        if col_sum!= rows:\n            return False\n    #Check the diagonals are the same\n    diag1 = my_matrix[0][0]\n    diag2 = my_matrix[rows-1][rows-1]\n    diag3 = my_matrix[rows-1][0]\n    diag4 = my_matrix[0][rows-1]\n    if diag1!= diag2 or diag3!= diag4:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list):\n        raise TypeError\n    for a_list in my_matrix:\n        if not isinstance(a_list, list):\n            raise TypeError\n    if not all(isinstance(a, int) for a_list in my_matrix for a in a_list):\n        raise TypeError\n    if len(my_matrix)!= len(my_matrix[0]):\n        raise ValueError\n    for i in range(len(my_matrix)):\n        if len(my_matrix)!= len(my_matrix[i]):\n            raise ValueError\n        if sum(my_matrix[i])!= sum(my_matrix[0][i]):\n            raise ValueError\n    if sum(my_matrix[0])!= sum(my_matrix[len(my_matrix)-1]):\n        raise ValueError\n    if sum(my_matrix[len(my_matrix)-1])!= sum(my_matrix[len(my_matrix)-1][len(my_matrix)-1]):\n        raise ValueError\n    if sum(my_matrix[0])!= sum(my_matrix[len(my_matrix)-1]):\n        raise ValueError\n    if sum(my_matrix[len(my_matrix)-1][len(my_matrix)-1])!= sum(my_matrix[len(my_matrix)-1][0]):\n        raise ValueError\n    if sum(my_matrix[len(my_matrix)-1][0])!= sum(my_matrix[0][len(my_matrix)-1]):\n        raise ValueError\n    if sum(my_matrix[0][0])!= sum(my_matrix[len(my_matrix)-1][len(my_matrix)-1]):\n        raise ValueError\n    if sum(my_matrix[len(my_matrix)-1][len(my_matrix)-1])!= sum(my_matrix[0][0]):\n        raise ValueError\n    if my_matrix[len(my_matrix)-1][0]!= 0:\n        raise ValueError\n    if my_matrix[len(my_matrix)-1][len(my_matrix)-1]!= 0:\n        raise ValueError\n    if my_matrix[0][len(my_matrix)-1]!= 0:\n        raise ValueError\n    if my_matrix[0][0]!= 0:\n        raise ValueError\n    if my_matrix[len(my_matrix)-1][len(my_matrix)-1]!= sum(my_matrix[0][0]):\n        raise ValueError\n    if my_matrix[len(my_matrix)-1][0]!= sum(my_matrix[0][len(my_matrix)-1]):\n        raise ValueError\n    if my_matrix[len(my_matrix)-1][len(my_matrix)-1]!= sum(my_matrix[0][0]):\n        raise ValueError\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0, len(my_matrix)):\n        if sum(my_matrix[i])!= 15:\n            return False\n    for j in range(0, len(my_matrix)):\n        row_total = 0\n        for i in range(0, len(my_matrix)):\n            row_total += my_matrix[i][j]\n        if row_total!= 15:\n            return False\n    row_total = 0\n    col_total = 0\n    for i in range(0, len(my_matrix)):\n        row_total += my_matrix[i][i]\n        col_total += my_matrix[i][len(my_matrix)-1-i]\n    if row_total!= 15:\n        return False\n    if col_total!= 15:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    #magic_square = [[8, 1, 6, 3, 5, 7, 4, 9, 2],\n    #        [4, 9, 2, 3, 5, 7, 8, 1, 6],\n    #        [2, 7, 8, 1, 6, 3, 9, 5, 4],\n    #        [6, 1, 8, 9, 5, 4, 3, 2, 7],\n    #        [5, 3, 4, 2, 7, 6, 1, 9, 8],\n    #        [9, 2, 7, 6, 8, 1, 4, 3, 5],\n    #        [1, 5, 3, 7, 9, 6, 8, 4, 2],\n    #        [2, 4, 6, 8, 5, 7, 9, 1, 3],\n    #        [3, 9, 5, 2, 4, 1, 7, 6, 8]]\n    \n    #This method is more efficient than the above method\n    \n    #Magic square is a symmetric matrix with a sum of each row, col and diagonal = (n*(n**2+1)/2)\n    #To find the sum of the diagonal: diagonal = (n**2*(n**2+1)/2)\n    #To find the sum of each row: row_sum = (n*(n**2+1))/2\n    #To find the sum of each col: col_sum = (n*(n**2+1))/2\n    \n    #A magic square is said to be magic if the sum of each row, col and diagonal is equal\n    \n    n = len(my_matrix)\n    row_sum = 0\n    col_sum = 0\n    diagonal_sum = 0\n    \n    for i in range(n):\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n            diagonal_sum += my_matrix[i][j]\n    \n    if row_sum == diagonal_sum and col_sum == diagonal_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Solution 1\n    # set size\n    size = len(my_matrix)\n    \n    # iterate rows\n    for i in range(size):\n        # iterate columns\n        for j in range(size):\n            # sum up the values\n            if sum(my_matrix[i])!= sum(my_matrix[j]):\n                # check the sum is the same for each row\n                return False\n    \n    # check the sum of each row\n    for j in range(size):\n        if sum(my_matrix[i][j] for i in range(size))!= sum(my_matrix[i][j] for i in range(size)):\n            return False\n    \n    # check the sum of each column\n    for i in range(size):\n        if sum(my_matrix[i][j] for j in range(size))!= sum(my_matrix[i][j] for j in range(size)):\n            return False\n    \n    # check the sum of each diag\n    if sum(my_matrix[i][j] for i in range(size) for j in range(size))!= sum(my_matrix[i][size-1-j] for i in range(size) for j in range(size)):\n        return False\n    \n    # check the sum of each other diag\n    if sum(my_matrix[i][j] for i in range(size) for j in range(size))!= sum(my_matrix[size-1-i][i] for i in range(size) for j in range(size)):\n        return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_rows = [sum(row) for row in my_matrix]\n    sum_cols = [sum(col) for col in zip(*my_matrix)]\n    #print sum_rows, sum_cols\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_num = max(count.values())\n    return [num for num, freq in count.items() if freq == max_num]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_val = max(d.values())\n    return max([key for key, val in d.items() if val == max_val])\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #map dictonary\n    d = {}\n    max_freq = 0\n    item = None\n    for num in nums:\n        d[num] = d.get(num,0)+1\n        if d[num]>max_freq:\n            max_freq = d[num]\n            item = num\n    return item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_num = nums[0]\n    max_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == max_num:\n            max_freq += 1\n        elif nums[i] > max_num:\n            max_num = nums[i]\n            max_freq = 1\n    return max_num, max_freq\ndef max_occurrences2(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = {}\n    for i in range(len(nums)):\n        if nums[i] in dic.keys():\n            dic[nums[i]] += 1\n        else:\n            dic[nums[i]] = 1\n    max_num, max_freq = None, 0\n    for k,v in dic.items():\n        if v > max_freq:\n            max_num, max_freq = k, v\n    return max_num, max_freq\ndef unique_words(words):\n    '''\n    Write a function to find the unique words in a list of words.\n    '''\n    unique = []\n    for word in words:\n        if word not in unique:\n            unique.append(word)\n    return unique\ndef unique_words2(words):\n    '''\n    Write a function to find the unique words in a list of words.\n    '''\n    return list(set(words))\ndef permutations(s):\n    '''\n    Write a function to find the permutations of a string.\n    '''\n    def helper(start, lst):\n        if start == len(s):\n            return lst\n        for i in range(start, len(s)):\n            s[start], s[i] = s[i], s[start]\n            lst.append(''.join(s))\n            helper(start + 1, lst)\n            s[start], s[i] = s[i], s[start]\n    lst = []\n    helper(0, lst)\n    return lst\ndef permutations2(s):\n    '''\n    Write a function to find the permutations of a string.\n    '''\n    def helper(start, lst):\n        if start == len(s):\n            lst.append(s)\n        for i in range(start, len(s)):\n            s[start], s[i] = s[i], s[start]\n            helper(start + 1, lst)\n            s[start], s[i] = s[i], s[start]\n    lst = []\n    helper(0, lst)\n    return lst\ndef word_split(s, wordDict):\n    '''\n    Write a function to check if a word can be split into\n    a list of words based on the given dictionary of words.\n    '''\n    wordDict = set(wordDict)\n    for i in range(len(s)):\n        if s[:i+1] in wordDict:\n            return True\n    return False\ndef word_split2(s, wordDict):\n    '''\n    Write a function to check if a word can be split into\n    a list of words based on the given dictionary of words.\n    '''\n    return any([s[:i+1] in wordDict for i in range(len(s))])\ndef word_split3(s, wordDict):\n    '''\n    Write a function to check if a word can be split into\n    a list of words based on the given dictionary of words.\n    '''\n    return any(s[:i+1] in wordDict for i in range(len(s)))\ndef word_split4(s, wordDict):\n    '''\n    Write a function to check if a word can be split into\n    a list of words based on the given dictionary of words.\n    '''\n    res = []\n    for i in range(1, len(s) + 1):\n        if s[:i] in wordDict:\n            if i == len(s):\n                res.append(s[:i])\n            else:\n                res.extend(word_split4(s[i:], wordDict))\n    return res\ndef word_split5(s, wordDict):\n    '''\n    Write a function to check if a word can be split into\n    a list of words based on the given dictionary of words.\n    '''\n    if not s:\n        return [[]]\n    res = []\n    for i in range(1, len(s) + 1):\n        if s[:i] in wordDict:\n            res.extend([[s[:i]] + r for r in word_split5(s[i:], wordDict)])\n    return res\ndef word_split6(s, wordDict):\n    '''\n    Write a function to check if a word can be split into\n    a list of words based on the given dictionary of words.\n    '''\n    if not s:\n        return [[]]\n    res = []\n    for i in range(1, len(s) + 1):\n        if s[:i] in wordDict:\n            for r in word_split6(s[i:], wordDict):\n                res.append([s[:i]] + r)\n    return res\ndef anagrams(s):\n    '''\n    Write a function to find the list of all anagrams of a word\n    in a list of words.\n    '''\n    dic = {}\n    for word in s:\n        key = ''.join(sorted(word))\n        if key in dic.keys():\n            dic[key].append(word)\n        else:\n            dic[key] = [word]\n    return dic\ndef anagrams2(s):\n    '''\n    Write a function to find the list of all anagrams of a word\n    in a list of words.\n    '''\n    dic = {}\n    for word in s:\n        key = ''.join(sorted(word))\n        dic[key] = dic.get(key, []) + [word]\n    return dic\ndef permutations3(s):\n    '''\n    Write a function to find the permutations of a string\n    in a list of strings.\n    '''\n    if len(s) == 1:\n        return [s]\n    res = []\n    for i in range(len(s)):\n        for perm in permutations3(s[:i] + s[i+1:]):\n            res.append(s[i] + perm)\n    return res\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome\n    or not.\n    '''\n    return s == s[::-1]\ndef is_palindrome2(s):\n    '''\n    Write a function to check if a string is a palindrome\n    or not.\n    '''\n    return all([s[i] == s[-i-1] for i in range(len(s)//2)])\ndef is_palindrome3(s):\n    '''\n    Write a function to check if a string is a palindrome\n    or not.\n    '''\n    def helper(s, start, end):\n        if start > end:\n            return True\n        if s[start]!= s[end]:\n            return False\n        return helper(s, start+1, end-1)\n    return helper(s, 0, len(s)-1)\ndef is_palindrome4(s):\n    '''\n    Write a function to check if a string is a palindrome\n    or not.\n    '''\n    def helper(s, start, end):\n        while start < end:\n            if s[start]!= s[end]:\n                return False\n            start += 1\n            end -= 1\n        return True\n    return helper(s, 0, len(s)-1)\ndef is_palindrome5(s):\n    '''\n    Write a function to check if a string is a palindrome\n    or not.\n    '''\n    return all(s[i] == s[-i-1] for i in range(len(s)//2))\ndef is_palin"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    cnt = defaultdict(int)\n    for num in nums:\n        cnt[num] += 1\n    return cnt[max(cnt, key=cnt.get)]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    return max(set(nums), key=nums.count)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_val = max(counts.values())\n    max_vals = [k for k, v in counts.items() if v == max_val]\n    return max_vals\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result, count = [], defaultdict(int)\n    for item in nums:\n        count[item] += 1\n    max_count = max(count.values())\n    for item, count in count.items():\n        if count == max_count:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for item in nums:\n        dic[item] += 1\n    max_v = -1\n    max_k = -1\n    for key, value in dic.items():\n        if value > max_v:\n            max_v = value\n            max_k = key\n    return max_k\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1[i] = str1[i].upper()\n    return \"\".join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str2 = list(str1)\n    i = 0\n    j = len(str1)-1\n    while i < j:\n        if str2[i].lower() not in vowels:\n            i+=1\n        elif str2[j].lower() not in vowels:\n            j-=1\n        else:\n            str2[i], str2[j] = str2[j], str2[i]\n            i+=1\n            j-=1\n    return ''.join(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    list1 = list(str1)\n    length = len(list1)\n    for i in range(0,length):\n        if list1[i] in vowels:\n            list1[i] = list1[i].swapcase()\n    return ''.join(list1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    string = list(str1)\n    i = 0\n    j = len(str1)-1\n    while i < j:\n        if string[i].lower() not in vowels:\n            i += 1\n        elif string[j].lower() not in vowels:\n            j -= 1\n        else:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n    return ''.join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str1 = str1.lower()\n    output = list(str1)\n    for i in range(len(output)):\n        if output[i] in vowels:\n            output[i] = output[i].swapcase()\n    return ''.join(output)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    length = len(str1)\n    for i in range(length):\n        if str1[i] in vowels:\n            str1[i] = str1[i] + str1[i]\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    list1 = list(str1)\n    i = 0\n    j = len(list1) - 1\n    while i < j:\n        if list1[i].lower() not in vowels:\n            i += 1\n        elif list1[j].lower() not in vowels:\n            j -= 1\n        else:\n            list1[i], list1[j] = list1[j], list1[i]\n            i += 1\n            j -= 1\n    return ''.join(list1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]\n    string = list(str1)\n    temp = list()\n    for i in string:\n        if i in vowel:\n            temp.append(i)\n    temp.reverse()\n    string = \"\".join(temp)\n    return string\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = \"aeiou\"\n    str2 = \"\"\n    for i in str1:\n        if i in vowels:\n            str2 = str2 + i\n    return str2[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str1 = list(str1)\n    start, end = 0, len(str1)-1\n    while start < end:\n        if str1[start] in vowels and str1[end] in vowels:\n            str1[start], str1[end] = str1[end], str1[start]\n            start += 1\n            end -= 1\n        if str1[start] not in vowels:\n            start += 1\n        if str1[end] not in vowels:\n            end -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    new_string = ''\n    for i in tup1:\n        new_string += str(i) +''\n    return new_string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(%d, %d, %d, %d, %d)' % tup1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1 = ''\n    for i in tup1:\n        string1 += str(i) + ', '\n    string1 = string1[0:-2]\n    return string1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for i in tup1:\n        tup_str += str(i)\n    return tup_str\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = '('\n    for item in tup1:\n        result += str(item)\n    return result + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s += str(i)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if len(tup1) == 0:\n        return 'Empty'\n    if len(tup1) == 1:\n        return str(tup1[0])\n    if len(tup1) == 2:\n        return str(tup1[0]) +'' + str(tup1[1])\n    return str(tup1[0]) +'' + str(tup1[1]) +'' + tup_string(tup1[2:])\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    list1 = []\n    for i in tup1:\n        list1.append(i)\n    string = ''.join(map(str,list1))\n    return string\n    \ndef add_string(str1, str2):\n    '''\n    Write a function to add two strings.\n    '''\n    string = str1 + str2\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = \"\"\n    for item in tup1:\n        s = s + str(item)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    output = ''\n    for i in tup1:\n        output += str(i) +''\n    return output\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for n in nums:\n        if n < 0:\n            result += n\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    else:\n        return sum(filter(lambda x:x<0,nums))\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    result = 0\n    for n in nums:\n        if n < 0:\n            result = result + n\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(i for i in nums if i < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x < 0, nums))\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += num\n    return count\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * (3 ** 0.5) * (n - 1) + 1\n    \ndef is_pentagonal(n):\n    '''\n    Write a function that takes a natural number n and returns True if n is pentagonal, and False otherwise.\n    '''\n    return n * (3 * n - 1) / 2 == int(n * (3 * n - 1) / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return None\n    num = 0\n    result = 0\n    while result < n:\n        num += 1\n        result = num * (2 * num - 1)\n    return num\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int((n * (2 * n + 1) + 1) / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))//2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 4\n    if n == 2:\n        return 6\n    if n == 3:\n        return 8\n    if n == 4:\n        return 10\n    if n == 5:\n        return 12\n    if n == 6:\n        return 16\n    if n == 7:\n        return 19\n    if n == 8:\n        return 22\n    if n == 9:\n        return 28\n    if n == 10:\n        return 31\n    if n == 11:\n        return 37\n    if n == 12:\n        return 41\n    if n == 13:\n        return 48\n    if n == 14:\n        return 54\n    if n == 15:\n        return 61\n    if n == 16:\n        return 64\n    if n == 17:\n        return 72\n    if n == 18:\n        return 82\n    if n == 19:\n        return 97\n    if n == 20:\n        return 109\n    if n == 21:\n        return 120\n    if n == 22:\n        return 143\n    if n == 23:\n        return 156\n    if n == 24:\n        return 171\n    if n == 25:\n        return 185\n    if n == 26:\n        return 197\n    if n == 27:\n        return 231\n    if n == 28:\n        return 262\n    if n == 29:\n        return 282\n    if n == 30:\n        return 297\n    if n == 31:\n        return 333\n    if n == 32:\n        return 351\n    if n == 33:\n        return 370\n    if n == 34:\n        return 405\n    if n == 35:\n        return 432\n    if n == 36:\n        return 469\n    if n == 37:\n        return 482\n    if n == 38:\n        return 497\n    if n == 39:\n        return 523\n    if n == 40:\n        return 581\n    if n == 41:\n        return 606\n    if n == 42:\n        return 652\n    if n == 43:\n        return 693\n    if n == 44:\n        return 719\n    if n == 45:\n        return 772\n    if n == 46:\n        return 805\n    if n == 47:\n        return 840\n    if n == 48:\n        return 875\n    if n == 49:\n        return 906\n    if n == 50:\n        return 945\n    if n == 51:\n        return 984\n    if n == 52:\n        return 1025\n    if n == 53:\n        return 1055\n    if n == 54:\n        return 1095\n    if n == 55:\n        return 1127\n    if n == 56:\n        return 1151\n    if n == 57:\n        return 1180\n    if n == 58:\n        return 1210\n    if n == 59:\n        return 1245\n    if n == 60:\n        return 1275\n    if n == 61:\n        return 1315\n    if n == 62:\n        return 1347\n    if n == 63:\n        return 1380\n    if n == 64:\n        return 1420\n    if n == 65:\n        return 1454\n    if n == 66:\n        return 1485\n    if n == 67:\n        return 1523\n    if n == 68:\n        return 1559\n    if n == 69:\n        return 1596\n    if n == 70:\n        return 1637\n    if n == 71:\n        return 1674\n    if n == 72:\n        return 1714\n    if n == 73:\n        return 1745\n    if n == 74:\n        return 1786\n    if n == 75:\n        return 1827\n    if n == 76:\n        return 1861\n    if n == 77:\n        return 1896\n    if n == 78:\n        return 1925\n    if n == 79:\n        return 1975\n    if n == 80:\n        return 2016\n    if n == 81:\n        return 2049\n    if n == 82:\n        return 2089\n    if n == 83:\n        return 2124\n    if n == 84:\n        return 2156\n    if n == 85:\n        return 2203\n    if n == 86:\n        return 2215\n    if n == 87:\n        return 2235\n    if n == 88:\n        return 2267\n    if n == 89:\n        return 2331\n    if n == 90:\n        return 2372\n    if n == 91:\n        return 2405\n    if n == 92:\n        return 2427\n    if n == 93:\n        return 2464\n    if n == 94:\n        return 2495\n    if n == 95:\n        return 2527\n    if n == 96:\n        return 2559\n    if n == 97:\n        return 2590\n    if n == 98:\n        return 2623\n    if n == 99:\n        return 2654\n    if n == 100:\n        return 2685\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) \n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #print(nums)\n    #return str(nums.count(0) / (nums.count(0) + nums.count(1)))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count = count + 1\n    return float(count)/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    c = 0\n    for num in nums:\n        if num == 0:\n            c += 1\n    return float(c)/len(nums)\n    \ndef compress(chars):\n    '''\n    Given an array of characters chars, compress it using the following algorithm:\n    Begin with an empty string s. For each group of consecutive repeating characters in chars:\n    If the group's length is 1, append the character to s.\n    Otherwise, append the character followed by the group's length.\n    The compressed string s should not be returned separately, but instead be stored \n    in the input character array chars. Note that group lengths that are 10 or longer \n    should be split into multiple characters in chars.\n    Do not split a character into two characters - \n    you must do this by appending the second character to the end of the first character, \n    then the first character to the end of the second character, and so on.\n    Do not modify the input array.\n    '''\n    s = ''\n    i = 0\n    while i < len(chars):\n        if i == len(chars)-1 or chars[i]!= chars[i+1]:\n            s += chars[i]\n            s += str(len(chars[i:i+2]))\n            i += 2\n        else:\n            i += 1\n    chars[:] = s\ndef decode(chars):\n    '''\n    You are given a code represented as a string, \n    you need to return the decoded string. The input string is guaranteed to be valid, \n    there are no leading zeroes, spaces or other formatting irregularities.\n    The code is a sequence of numbers and letters, \n    where the numbers are in the set {'1','2','3','4','5','6','7','8','9'}, \n    and the letters are in the set {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}.\n    The decoded string does not have any leading or trailing spaces, and the \n    decoded string is guaranteed to have no duplicate letters.\n    '''\n    num = ''\n    string = ''\n    for char in chars:\n        if char.isdigit():\n            num += char\n        else:\n            string += char * int(num)\n            num = ''\n    return string\n    \ndef filter_is_odd(nums):\n    '''\n    Given an array of integers, find out whether there are two distinct indices i and j in the array \n    such that nums[i] == nums[j] and i!= j. \n    '''\n    s = set()\n    for i in range(len(nums)):\n        if nums[i] not in s:\n            s.add(nums[i])\n        else:\n            return True\n    return False\n    \ndef linear_search(nums, target):\n    '''\n    Given an array of integers and a target, \n    return the index of the target if it's in the array,\n    return -1 otherwise.\n    '''\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n    \ndef rotate_string(chars, num):\n    '''\n    Given a string of lowercase letters, rotate the string to the right by num letters, \n    where num is in the range [0, 25]. \n    '''\n    n = len(chars)\n    for i in range(n):\n        chars[(i+num)%n] = chars[i]\n    return chars\n    \ndef is_valid_move(board, col):\n    '''\n    Given a column number, check if it is a valid move.\n    '''\n    for i in range(len(board)):\n        if board[i][col]!= '-':\n            return False\n    return True\n    \ndef next_empty_row(board, col):\n    '''\n    Given a column number, find the first row that is empty.\n    '''\n    for i in range(len(board)):\n        if board[i][col] == '-':\n            return i\n    return -1\n    \ndef place_token(board, row, col, player):\n    '''\n    Place the token of player at board[row][col] and return a new board.\n    '''\n    b = list(board)\n    b[row][col] = player\n    return b\n    \ndef has_win(board, player):\n    '''\n    Check whether there is a horizontal, vertical, or diagonal win for the token of player on board.\n    '''\n    for i in range(3):\n        for j in range(3):\n            if board[i][j] == player and board[i][j+1] == player and board[i][j+2] == player:\n                return True\n            if board[j][i] == player and board[j+1][i] == player and board[j+2][i] == player:\n                return True\n    for i in range(3):\n        if board[i][i] == player and board[i+1][i+1] == player and board[i+2][i+2] == player:\n            return True\n    if board[0][2] == player and board[1][1] == player and board[2][0] == player:\n        return True\n    return False\n    \ndef board_status(board):\n    '''\n    Checks whether the game is over or not. \n    '''\n    if has_win(board, 'X') or has_win(board, 'O'):\n        return 'W'\n    elif has_win(board, '-'):\n        return 'D'\n    else:\n        return '-'\n    \ndef full_board_status(board):\n    '''\n    Check whether the game board is full or not.\n    '''\n    for row in board:\n        for col in row:\n            if col == '-':\n                return False\n    return True\n    \ndef create_empty_board():\n    '''\n    Create and return a new empty board. \n    '''\n    board = []\n    for i in range(3):\n        board.append(['-']*3)\n    return board\n    \ndef copy_board(board):\n    '''\n    Make a copy of the given board and return it.\n    '''\n    b = create_empty_board()\n    for i in range(3):\n        for j in range(3):\n            b[i][j] = board[i][j]\n    return b\n    \ndef switch_player(player):\n    '''\n    Change the player to the other one. \n    '''\n    if player == 'X':\n        return 'O'\n    return 'X'\n    \ndef print_board(board):\n    '''\n    Print the board.\n    '''\n    for row in board:\n        print''.join(row)\n    print\n    \ndef drop_piece(board, row, col, piece):\n    '''\n    Place the piece at the bottommost empty slot in the given column and \n    rotate the board so that the dropped piece will end up in the bottommost slot.\n    '''\n    b = copy_board(board)\n    b[row][col] = piece\n    return b\n    \ndef valid_space(board, col):\n    '''\n    Return True if the given column is valid, False otherwise. \n    '''\n    for i in range(len(board)):\n        if board[i][col] == '-':\n            return True\n    return False\n    \ndef check_end(board, col):\n    '''\n    Check whether the game is over. \n    '''\n    for i in range(3):\n        if board[i][col] == '-':\n            return False\n    return True\n    \ndef get_valid_locations(board):\n    '''\n    Return a list of valid column numbers for the next piece to drop. \n    '''\n    valid = []\n    for i in range(len(board)):\n        if valid_space(board, i):\n            valid.append(i)\n    return valid\n    \ndef print_board_nums(board):\n    '''\n    Print the board wit"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in range(0,len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return float(zero_count) / len(nums)\ndef find_max_consecutive_ones(nums):\n    '''\n    Given a binary array, find the maximum number of consecutive 1s in this array.\n    '''\n    maximum = 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            count += 1\n        else:\n            maximum = max(maximum, count)\n            count = 0\n    maximum = max(maximum, count)\n    return maximum\ndef find_missing_number(nums):\n    '''\n    Given an array where elements are sorted in ascending order, \n    find the element that has the minimum index in the array.\n    '''\n    i = 0\n    while i < len(nums) and nums[i]!= i + 1:\n        if nums[i] == i:\n            i += 1\n        else:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n    return i + 1\ndef find_peak_element(nums):\n    '''\n    Find the peak element in a unimodal array.\n    An array element is a peak if it is NOT smaller than its neighbours.\n    '''\n    nums.insert(0, float('-inf'))\n    nums.append(float('-inf'))\n    for i in range(1, len(nums) - 1):\n        if nums[i - 1] < nums[i] > nums[i + 1]:\n            return i\n    return -1\ndef is_valid_triangle(a, b, c):\n    '''\n    Given lengths of the three sides of a triangle, determine whether or not the triangle is valid.\n    '''\n    return a + b > c and b + c > a and c + a > b\ndef is_same_triangle(a, b, c):\n    '''\n    Given lengths of the three sides of a triangle, determine whether or not the triangle is equilateral, isosceles, or scalene.\n    '''\n    if a == b and b == c:\n        return 'Equilateral'\n    elif a!= b and b!= c and a!= c:\n        return 'Scalene'\n    else:\n        return 'Isosceles'\ndef is_in_range(a, b, c):\n    '''\n    Given three integers a, b, and c, determine if the sum of three numbers could be a float.\n    '''\n    return a + b > c and b + c > a and c + a > b\ndef max_count_val(nums):\n    '''\n    Given an array of numbers, find the maximum number of consecutive numbers that sum to a value.\n    '''\n    count = 1\n    max_count = 1\n    curr_sum = 0\n    for i in range(1, len(nums)):\n        if nums[i] == curr_sum:\n            count += 1\n        elif nums[i]!= curr_sum:\n            count = 1\n            curr_sum = nums[i]\n        if count > max_count:\n            max_count = count\n    return max_count\ndef largest_num(nums):\n    '''\n    Find the largest integer in an array of integers.\n    '''\n    return max(nums)\ndef rotate_image(matrix):\n    '''\n    Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to rotate the image by 90 degrees.\n    '''\n    for i in range(len(matrix)):\n        for j in range(i, len(matrix[0])):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    for i in range(len(matrix)):\n        matrix[i].reverse()\n    return matrix\ndef reverse_bits(n):\n    '''\n    Write a function that takes an unsigned integer and returns the integer with reversed bits.\n    '''\n    if n == 0:\n        return 0\n    elif n & 1 == 0:\n        return reverse_bits(n >> 1)\n    else:\n        return reverse_bits(n >> 1) | (1 << (len(bin(n)) - 2))\ndef find_n_digit_fibonacci_number(n):\n    '''\n    Given a positive integer n, find the nth Fibonacci number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return find_n_digit_fibonacci_number(n - 1) + find_n_digit_fibonacci_number(n - 2)\ndef find_range_bitwise_and(nums):\n    '''\n    Given a list of integers, find the range of numbers that have the same bitwise AND.\n    '''\n    if len(nums) == 0:\n        return []\n    min_number = min(nums)\n    max_number = max(nums)\n    if min_number == max_number:\n        return [min_number]\n    else:\n        return [min_number, max_number]\ndef min_number_of_unique_characters_in_string(string):\n    '''\n    Given a string, find the minimum number of characters that need to be changed to reach the string from the original string.\n    '''\n    if string == '':\n        return 0\n    else:\n        n = min_number_of_unique_characters_in_string(string[1:])\n        if string[0]!= string[1]:\n            n += 1\n        return n\ndef find_uncommon_string(str1, str2):\n    '''\n    Find the uncommon characters between two strings.\n    '''\n    if len(str1) == 0 or len(str2) == 0:\n        return []\n    else:\n        arr1 = [0 for _ in range(26)]\n        arr2 = [0 for _ in range(26)]\n        for i in range(len(str1)):\n            arr1[ord(str1[i]) - ord('a')] += 1\n        for i in range(len(str2)):\n            arr2[ord(str2[i]) - ord('a')] += 1\n        result = []\n        for i in range(26):\n            if arr1[i] == 0 or arr2[i] == 0:\n                result.append(chr(i + ord('a')))\n        return result\ndef find_max_consecutive_ones(nums):\n    '''\n    Given a binary array, find the maximum number of consecutive 1s in this array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        count = 0\n        max_count = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                count += 1\n            else:\n                max_count = max(max_count, count)\n                count = 0\n        max_count = max(max_count, count)\n        return max_count\ndef find_palindrome(n):\n    '''\n    Given a positive integer, find the next palindromic integer which is palindrome when read from left to right.\n    '''\n    if n == 1:\n        return 2\n    else:\n        n = n % 10\n        if n == 0:\n            n = 1\n        return 10 ** (len(str(n)) - 1) + find_palindrome(n - 1)\ndef find_max_length_of_substring_with_k_distinct_characters(str, k):\n    '''\n    Given a string, find the maximum length of a substring with k distinct characters.\n    '''\n    if len(str) == 0 or k == 0:\n        return 0\n    else:\n        count = 0\n        stack = []\n        for i in range(len(str)):\n            if len(stack) < k:\n                stack.append(str[i])\n                count = max(count, len(stac"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    i, count = 0, 0\n    while i < len(nums):\n        if nums[i] == 0:\n            count += 1\n        i += 1\n    return count\ndef sum_of_digits(n):\n    '''\n    Write a function to compute the sum of the digits of a positive integer using recursion.\n    '''\n    return n%10 + sum_of_digits(n/10) if n else 0\ndef sum_of_digits_iter(n):\n    '''\n    Write a function to compute the sum of the digits of a positive integer without using recursion.\n    '''\n    res, power = 0, 1\n    while n:\n        res += n%10 * power\n        power *= 10\n        n /= 10\n    return res\ndef to_decimal(n, base):\n    '''\n    Write a function to convert a number from one base to another.\n    '''\n    return n%base * (base**(len(n) - 1)) + to_decimal(n/base, base) if n else 0\ndef to_binary(n, base):\n    '''\n    Write a function that takes an integer and returns the string representation of that integer in base 2.\n    '''\n    return str(n%base) + to_binary(n/base, base) if n else ''\ndef palindrome_permutation(s):\n    '''\n    Write a function that takes a string and returns True if it is a permutation of a palindrome and False otherwise.\n    '''\n    return len(s) == len(set(s))\ndef count_words(s):\n    '''\n    Write a function to count the number of words in a string using recursion.\n    '''\n    return count_words(s[1:]) + 1 if s else 0\ndef count_words_iter(s):\n    '''\n    Write a function to count the number of words in a string without using recursion.\n    '''\n    res, word, count = 0, '', 0\n    for i in s:\n        if i =='':\n            res += count\n            count = 0\n        else:\n            count += 1\n    res += count\n    return res\ndef is_anagram(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(s1) == sorted(s2)\ndef is_anagram_iter(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    res, count, n = 0, 0, min(len(s1), len(s2))\n    while count < n:\n        if s1[count] == s2[count]:\n            res += 1\n        count += 1\n    return res == n\ndef is_anagram_string_map(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return map(s1.count, s1) == map(s2.count, s2)\ndef is_anagram_string_map_pythonic(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return [s1.count(i) for i in s1] == [s2.count(i) for i in s2]\ndef is_anagram_string_sort(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(s1) == sorted(s2)\ndef is_anagram_string_sort_pythonic(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(s1) == sorted(s2)\ndef is_anagram_dict(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return {i:s1.count(i) for i in s1} == {i:s2.count(i) for i in s2}\ndef is_anagram_dict_pythonic(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return {i:s1.count(i) for i in s1} == {i:s2.count(i) for i in s2}\ndef is_anagram_map(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return list(map(s1.count, s1)) == list(map(s2.count, s2))\ndef is_anagram_map_pythonic(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return [s1.count(i) for i in s1] == [s2.count(i) for i in s2]\ndef is_anagram_recursive(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if not s1 and not s2:\n        return True\n    if len(s1)!= len(s2):\n        return False\n    return is_anagram(s1[1:], s2[1:]) and is_anagram(s1[1:], s2[1:])\ndef is_anagram_recursive_pythonic(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    return is_anagram_recursive(s1, s2)\ndef is_anagram_recursive_pythonic2(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return [s1.count(i) for i in s1] == [s2.count(i) for i in s2]\ndef is_anagram_recursive_pythonic3(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return [s1.count(i) for i in s1] == [s2.count(i) for i in s2]\ndef is_anagram_recursive_pythonic4(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return [s1.count(i) for i in s1] == [s2.count(i) for i in s2]\ndef is_anagram_recursive_pythonic5(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return [s1.count(i) for i in s1] == [s2.count(i) for i in s2]\ndef is_anagram_recursive_pythonic6(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return [s1.count(i) for i in s1] == [s2.count(i) for i in s2]\ndef is_anagram_recursive_pythonic7(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return [s1.count(i) for i in s1] == [s2.count(i) for i in s2]\ndef is_anagram_recursive_pythonic8(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return [s1.count(i) for i in s1] == [s2.count(i) for i in s2]\ndef is_anagram_recursive_pythonic9(s1, s2):\n    '"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len(nums) - nums.count(0)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_of_zeros = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            num_of_zeros += 1\n    print(num_of_zeros/len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    ans=0\n    i=0\n    while n:\n        if n&1==1:\n            if 2**i<n:\n                ans=1\n                break\n        n=n>>1\n        i+=1\n    return ans\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    from math import log\n    return log(n,2).is_integer()\n    "
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<2:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        return False\n    if n%4==0:\n        return True\n    for i in range(3,int(n**0.5),2):\n        if n%i==0:\n            return False\n    return True\ndef sum_of_powers_of_two(n):\n    '''\n    Write a python function to return the sum of powers of 2 less than or equal to the given number.\n    '''\n    if n<2:\n        return 0\n    if n==2:\n        return 1\n    if n%2==0:\n        return sum_of_powers_of_two(n//2)\n    else:\n        return 2 + sum_of_powers_of_two(n//2)\ndef is_Power_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as power of two or not.\n    '''\n    if n<1:\n        return False\n    if n==1:\n        return True\n    if n%2==1:\n        return False\n    if n%4==1:\n        return True\n    for i in range(3,int(n**0.5),2):\n        if n%i==1:\n            return False\n    return True\ndef power_of_two(n):\n    '''\n    Write a python function to return the power of two less than or equal to the given number.\n    '''\n    if n<1:\n        return 0\n    if n==1:\n        return 1\n    if n%2==1:\n        return power_of_two(n-1)\n    if n%4==1:\n        return power_of_two(n//2)\n    for i in range(3,int(n**0.5),2):\n        if n%i==1:\n            return power_of_two(n//i)\n    return n\ndef is_Perfect_Number(n):\n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s+=i\n    return s==n\ndef get_prime_factors(n):\n    '''\n    Write a python function to return the prime factors of the given number.\n    '''\n    for i in range(2,int(n**0.5)+1):\n        while n%i==0:\n            print(i,end=\" \")\n            n=n//i\n    if n>1:\n        print(n,end=\" \")\ndef is_Prime(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    for i in range(3,int(n**0.5),2):\n        if n%i==0:\n            return False\n    return True\ndef find_first_factor(n):\n    '''\n    Write a python function to return the first factor of the given number.\n    '''\n    for i in range(2,n//2+1):\n        if n%i==0:\n            return i\n    return n\ndef is_perfect_power(n):\n    '''\n    Write a python function to check whether the given number is a perfect power or not.\n    '''\n    if n<=1:\n        return False\n    i=2\n    while n>i**i:\n        i+=1\n    if n%i==0:\n        return True\n    return False\ndef factorial(n):\n    '''\n    Write a python function to return the factorial of the given number.\n    '''\n    if n<2:\n        return 1\n    return n*factorial(n-1)\ndef is_perfect_cube(n):\n    '''\n    Write a python function to check whether the given number is a perfect cube or not.\n    '''\n    if n<0:\n        return False\n    if n==0:\n        return True\n    i=0\n    while n**i%1==0:\n        i+=1\n    if i==3:\n        return True\n    return False\ndef is_perfect_square(n):\n    '''\n    Write a python function to check whether the given number is a perfect square or not.\n    '''\n    if n<0:\n        return False\n    if n==0:\n        return True\n    i=1\n    while i**2<=n:\n        if i**2==n:\n            return True\n        i+=1\n    return False\ndef find_next_prime(n):\n    '''\n    Write a python function to return the next prime number after the given number.\n    '''\n    if n<2:\n        return 2\n    i=n+1\n    while True:\n        if is_Prime(i):\n            return i\n        i+=1\ndef find_previous_prime(n):\n    '''\n    Write a python function to return the previous prime number after the given number.\n    '''\n    if n<2:\n        return 2\n    i=n-1\n    while True:\n        if is_Prime(i):\n            return i\n        i-=1\ndef is_abundant(n):\n    '''\n    Write a python function to check whether the given number is an abundant number or not.\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s+=i\n    if s>n:\n        return True\n    return False\ndef find_factor(n):\n    '''\n    Write a python function to find all the factors of a number.\n    '''\n    f=[]\n    for i in range(2,n//2+1):\n        if n%i==0:\n            f.append(i)\n    return f\ndef is_abundant_factor(n):\n    '''\n    Write a python function to check whether the given number is an abundant factor or not.\n    '''\n    s=0\n    for i in find_factor(n):\n        if i<n:\n            s+=i\n    if s>n:\n        return True\n    return False\ndef sum_divisors(n):\n    '''\n    Write a python function to return the sum of divisors of the given number.\n    '''\n    s=1\n    for i in find_factor(n):\n        s+=i\n    return s\ndef is_amicable(n):\n    '''\n    Write a python function to check whether the given number is an amicable number or not.\n    '''\n    if n<=1:\n        return False\n    if is_abundant(sum_divisors(n)) and is_abundant(n) and n!=sum_divisors(n):\n        return True\n    return False\ndef sum_amicable_numbers(n):\n    '''\n    Write a python function to find all the amicable numbers between 1 and the given number.\n    '''\n    s=[]\n    for i in range(1,n):\n        if is_amicable(i):\n            s.append(i)\n    return s\ndef prime_factors(n):\n    '''\n    Write a python function to find all the prime factors of the given number.\n    '''\n    f=[]\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            f.append(i)\n            n=n//i\n        else:\n            i+=1\n    if n>1:\n        f.append(n)\n    return f\ndef is_perfect_product_of_primes(n):\n    '''\n    Write a python function to check whether the given number is a perfect product of primes or not.\n    '''\n    if n<=0:\n        return False\n    if n==1:\n        return True\n    if n%2==1:\n        return False\n    f=prime_factors(n)\n    if n==1:\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 1: \n        return False\n    while n!= 0:\n        if n % 2 == 1: \n            return False\n        n = n/2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n = int(n)\n    if n == 0:\n        return True\n    if n & (n-1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    d = 0\n    while n>=1:\n        if n%2==1:\n            d+=1\n        n/=2\n    return d\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    \n    while n > 1: \n        if n % 2 == 0: \n            n = n / 2\n        else: \n            return False\n    if n == 1: \n        return True\n    return False\n    \n    \ndef power_of_two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 0\n    while i < 32 and n > 0: \n        if n & (1 << i)!= 0: \n            return True\n        i += 1\n    return False\n    \n    \ndef count_bits(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n: \n        n = n & (n - 1)\n        count += 1\n    return count\n    \n    \ndef get_perfect_squares(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    perfect_squares = []\n    i = 1\n    while i * i <= n: \n        if n % i == 0: \n            perfect_squares.append(i * i)\n        i += 1\n    return perfect_squares\n    \n    \ndef is_perfect_squares(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    perfect_squares = get_perfect_squares(n)\n    if len(perfect_squares) == 1: \n        return True\n    return False\n    \n    \ndef is_digit_and_not_0(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if n % 10!= 0: \n            return True\n        n = n / 10\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if n % 10!= 0: \n            return True\n        n = n / 10\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_bin(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if n % 2!= 0: \n            return True\n        n = n / 2\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_oct(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if n % 8!= 0: \n            return True\n        n = n / 8\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_hex(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if n % 16!= 0: \n            return True\n        n = n / 16\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_dec(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if n % 10!= 0: \n            return True\n        n = n / 10\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_base_10(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if n % 2!= 0: \n            return True\n        n = n / 2\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_base_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if n % 8!= 0: \n            return True\n        n = n / 8\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_base_8(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if n % 16!= 0: \n            return True\n        n = n / 16\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_base_16(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if n % 10!= 0: \n            return True\n        n = n / 10\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_base_10_using_len(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if len(str(n)) > 1: \n            return True\n        n = n / 10\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_base_10_using_sum(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while n > 0: \n        sum += n % 10\n        n = n / 10\n    if sum > 0: \n        return True\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_base_10_using_str(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if str(n)[-1]!= '0': \n            return True\n        n = n / 10\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_base_10_using_max(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if max(str(n)) == '0': \n            return True\n        n = n / 10\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_base_10_using_min(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0: \n        if min(str(n)) == '0': \n            return True\n        n = n / 10\n    return False\n    \n    \ndef is_digit_and_not_0_for_single_digit_number_using_base"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 0\n    while (2 ** i <= n):\n        if (n % 2 ** i == 0):\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n_set = set()\n    while n:\n        power = int(math.log(n,2))\n        if power in n_set:\n            return False\n        n_set.add(power)\n        n -= (2**power)\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    l = [2**i for i in range(32)]\n    l.reverse()\n    for i in l:\n        if n>i:\n            n-=i\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.1416*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #A circle has a radius of r.\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    import math\n    return math.pi * r**2\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * 2 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return pi * 2 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # the array to store the result\n    result = []\n    # the function for flatten\n    flatten(test_list, result)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for i in test_list:\n        if type(i) == list:\n            return extract_singly(i)\n    return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([item for sublist in test_list for item in sublist])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [e for sl in test_list for e in sl]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        for j in i:\n            result.append(j)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list_numbers = []\n    for num in test_list:\n        if isinstance(num, list):\n            test_list_numbers += extract_singly(num)\n        else:\n            test_list_numbers += [num]\n    return test_list_numbers\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        flat_list.extend(i)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [item for sublist in test_list for item in sublist]\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([x for sublist in test_list for x in sublist])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # take a copy of the list so that we don't mutate the original\n    nums_copy = list(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)//2, 0, -1):\n        if nums[i] > nums[0]:\n            nums.append(nums.pop(i))\n            if nums[0] > nums[-1]:\n                nums.insert(0, nums.pop())\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for x in range(len(nums)-1,0,-1):\n        #print(x)\n        for i in range(0,x+1):\n            if nums[i]>nums[i+1]:\n                temp=nums[i+1]\n                nums[i+1]=nums[i]\n                nums[i]=temp\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_index = len(nums) - 1\n    for i in range(max_index, 0, -1):\n        print(i, max_index)\n        if nums[i] > nums[max_index]:\n            nums[0], nums[i] = nums[i], nums[0]\n            nums[:i+1] = sorted(nums[:i+1])\n            max_index -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        # start at the end, 1 step at a time, moving backwards\n        for j in range(len(nums) - 1, i - 1, -1):\n            if nums[j] > nums[j - 1]:\n                nums[j], nums[j - 1] = nums[j - 1], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # first, find the largest number in the list\n    n = len(nums)\n    for i in range(n):\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index!= i:\n            swap(nums, i, max_index)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip_list(nums, n):\n        for i in range(n // 2):\n            nums[i], nums[n - i - 1] = nums[n - i - 1], nums[i]\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip_pancake(nums):\n        '''\n        Flip the rightmost element to the left to make\n        the resulting array palindrome\n        '''\n        mid = len(nums) // 2\n        nums[mid], nums[-1] = nums[-1], nums[mid]\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, k):\n        start = 0\n        while start < k:\n            nums[start], nums[len(nums)-1-start] = nums[len(nums)-1-start], nums[start]\n            start += 1\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #base case\n    if len(nums) == 0:\n        return nums\n    #find the max length of sublist\n    max_length = 1\n    for i in range(len(nums) - 1):\n        if nums[i + 1] < nums[i]:\n            max_length = max(max_length, i + 2)\n    #reverse the last sublist\n    reverse(nums, 0, max_length - 1)\n    #sort the rest\n    pancake_sort(nums[:max_length])\n    pancake_sort(nums[max_length:])\n    #reverse the last sublist\n    reverse(nums, 0, len(nums) - 1)\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num_of_samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list3[i] == list2[i]:\n                num_of_samepair += 1\n    return num_of_samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            samepair += 1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count = count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    len1 = len(list1)\n    len2 = len(list2)\n    len3 = len(list3)\n    if len1!= len2 or len2!= len3:\n        raise ValueError('Lists do not have same length')\n    count = 0\n    for i in xrange(len1):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list1[i]==list3[k]:\n                    count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n        return -1\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count=count+1\n    return count\n    \n    \ndef count_diffpair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the different position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]!=list2[i] and list1[i]!=list3[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_pair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list3[i] == list2[i]:\n                same_pair += 1\n    return same_pair\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count = count + 1\n    print(count)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Lists = 0\n    for i in Input:\n        if type(i) is tuple:\n            Lists += 1\n    return Lists\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_counter = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is list:\n            list_counter += 1\n    return list_counter\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for t in Input:\n        if type(t) is list:\n            num_lists += 1\n    return num_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    result = len(Input)\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # len(t) gives the length of tuple t\n    # str(t) gives the string representation of tuple t\n    # t[0] gives the first element of t\n    # t[-1] gives the last element of t\n    # str(t[0]) gives the first element of t, with [] removing the square brackets\n    # len(t[0]) gives the length of the first element of t\n    # str(t[0][0]) gives the first element of the first element of t\n    # len(t[0][0]) gives the length of the first element of the first element of t\n    return len(t) - len(str(t[0])) + 1\n    # +1 is to add one extra space after each bracket\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return Input.count('list')\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    x = Input[1]\n    for i in x:\n        if type(i) == list:\n            return 1\n        else:\n            continue\n    return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count = 0\n    l = []\n    for i in Input:\n        if type(i) == type(l):\n            count = count + 1\n        else:\n            l = i\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    i = 0\n    count = 0\n    for i in Input:\n        if isinstance(i,list):\n            count += 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[1]-arr[0]\n    for i in range(0,len(arr)-1):\n        max_diff = max(max_diff, arr[i+1]-arr[i])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max_diff = max(max_diff,abs(arr[i]-arr[j]))\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    res = arr[-1]-arr[0]\n    for i in range(1, len(arr)):\n        res = max(res, arr[i]-arr[i-1])\n    return res\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    n = len(arr)\n    max_diff = arr[1] - arr[0]\n    for i in range(n):\n        for j in range(i+1,n):\n            max_diff = max(max_diff, abs(arr[i] - arr[j]))\n    return max_diff\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i]-arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    abs_arr = [abs(arr[i]-arr[j]) for i in range(n) for j in range(n) if i!= j]\n    return max(abs_arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)<2:\n        return None\n    max_diff = abs(arr[0]-arr[1])\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff>max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_len = len(arr)\n    max_diff = arr[1] - arr[0]\n    for i in range(1, arr_len):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Base case\n    if n == 0:\n        return (0, 0)\n    if n < 0:\n        return None\n    \n    # Recursive Case\n    # 2^a * 2^b = n\n    # a * 2^b = n - 2^a\n    # a * 2^b = n - 2^a\n    # 2^a * 2^b = n\n    # a * 2^b = n\n    # 2^a * 2^b = n - 2^a\n    # a * 2^b = n - 2^a\n    # a * 2^b = n - 2^a\n    # b = n - 2^a / 2^a\n    # a = n - 2^a / 2^b\n    # 2^a = 2^b * 2^a\n    # (n - 2^a) / 2^a = b\n    # a = n / (2^b * 2^a)\n    # a = n / (2^b * 2^a)\n    # a = 2^(b + 1) * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # b = log2(n / (2^b * 2^a))\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a)\n    # a = 2^b * n / (2^b * 2^a"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return gcd(a, n) == 1, n/a\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Brute Force\n    # Time: O(n^2)\n    # Space: O(1)\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a == 0:\n        return a, n // a\n    elif n % b == 0:\n        return b, n // b\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 0)\n    else:\n        n_minus_a = n - a\n        n_minus_b = n - b\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # a = 2, b = 3, n = 6\n    # a = 3, b = 2, n = 8\n    # a = 5, b = 1, n = 9\n    # a = 1, b = 5, n = 4\n    # a = 8, b = 3, n = 11\n    # a = 2, b = 6, n = 13\n    # a = 7, b = 5, n = 18\n    # a = 3, b = 9, n = 14\n    # a = 2, b = 7, n = 19\n    # a = 1, b = 4, n = 12\n    # a = 9, b = 1, n = 11\n    # a = 6, b = 2, n = 15\n    # a = 5, b = 4, n = 17\n    # a = 4, b = 2, n = 13\n    # a = 3, b = 7, n = 22\n    # a = 1, b = 8, n = 19\n    # a = 5, b = 6, n = 26\n    # a = 9, b = 5, n = 30\n    # a = 1, b = 1, n = 4\n    # a = 7, b = 9, n = 17\n    # a = 2, b = 7, n = 22\n    # a = 4, b = 9, n = 25\n    # a = 1, b = 3, n = 8\n    # a = 7, b = 5, n = 17\n    # a = 3, b = 7, n = 22\n    # a = 2, b = 9, n = 28\n    # a = 6, b = 4, n = 16\n    # a = 5, b = 4, n = 13\n    # a = 1, b = 3, n = 11\n    # a = 8, b = 1, n = 10\n    # a = 4, b = 5, n = 12\n    # a = 9, b = 8, n = 17\n    # a = 1, b = 6, n = 22\n    # a = 7, b = 8, n = 19\n    # a = 6, b = 6, n = 14\n    # a = 2, b = 9, n = 22\n    # a = 8, b = 9, n = 28\n    # a = 7, b = 3, n = 15\n    # a = 1, b = 1, n = 4\n    # a = 1, b = 4, n = 8\n    # a = 3, b = 6, n = 17\n    # a = 4, b = 6, n = 21\n    # a = 8, b = 3, n = 22\n    # a = 3, b = 8, n = 22\n    # a = 2, b = 3, n = 23\n    # a = 5, b = 6, n = 24\n    # a = 8, b = 2, n = 22\n    # a = 4, b = 7, n = 21\n    # a = 7, b = 4, n = 22\n    # a = 9, b = 4, n = 22\n    # a = 5, b = 5, n = 22\n    # a = 8, b = 1, n = 19\n    # a = 1, b = 3, n = 22\n    # a = 7, b = 1, n = 19\n    # a = 1, b = 2, n = 21\n    # a = 8, b = 3, n = 21\n    # a = 1, b = 7, n = 21\n    # a = 6, b = 4, n = 22\n    # a = 9, b = 7, n = 19\n    # a = 7, b = 4, n = 22\n    # a = 9, b = 5, n = 24\n    # a = 8, b = 6, n = 22\n    # a = 4, b = 4, n = 22\n    # a = 8, b = 7, n = 19\n    # a = 2, b = 8, n = 22\n    # a = 6, b = 6, n = 22\n    # a = 2, b = 2, n = 22\n    # a = 3, b = 4, n = 22\n    # a = 7, b = 7, n = 22\n    # a = 7, b = 7, n = 22\n    # a = 5, b = 5, n = 22\n    # a = 1, b = 4, n = 22\n    # a = 8, b = 1, n = 21\n    # a = 1, b = 5, n = 21\n    # a = 9, b = 3, n = 21\n    # a = 5, b = 3, n = 21\n    # a = 9, b = 7, n = 22\n    # a = 1, b = 8, n = 21\n    # a = 5, b = 9, n = 21\n    # a = 2, b = 8, n = 22\n    # a = 8, b = 2, n = 22\n    # a = 1, b = 7, n = 22\n    # a = 6, b = 4, n = 22\n    # a = 7, b = 4, n = 22\n    # a = 1, b = 2, n = 22\n    # a = 8, b = 2, n = 22\n    # a = 1, b = 8, n = 22\n    # a = 7, b = 9, n = 22\n    # a = 9, b = 3, n = 22\n    # a = 3, b = 6, n = 22\n    # a = 7, b = 7, n = 22\n    # a = 8, b = 7, n = 22\n    # a = 6, b = 4, n = 22\n    # a = 2, b = 7, n = 22\n    # a = 6, b = 5, n = 22\n    # a = 9, b = 1, n = 22\n    # a = 3, b = 1, n = 22\n    # a = 2, b = 6, n = 22\n    # a = 7, b = 4, n = 22\n    # a = 6, b = 4, n = 22\n    # a = 4, b = 4, n = 22\n    # a = 4, b = 6, n = 22\n    # a = 8, b = 4, n = 22\n    # a = 7, b = 7, n = 22\n    # a = 5, b = 7, n = 22\n    # a = 4, b = 7, n = 22\n    # a = 8, b = 6, n = 22\n    # a = 2, b = 5, n = 22\n    # a = 8, b = 3, n = 22\n    # a = 4, b = 3, n = 22\n    # a = 2, b = 7, n = 22\n    # a = 1, b = 7, n = 22\n    # a = 3, b = 8, n = 22\n    # a = 8, b = 6, n = 22\n    # a = 5, b = 7, n = 22\n    # a = 1, b = 6, n = 22\n    # a = 4, b = 5, n = 22\n    # a = 9, b = 3, n = 22\n    # a = 1, b = 1, n = 22\n    # a = 6, b = 4, n = 22\n    # a = 3, b = 1, n = 22\n    # a = 8, b = 6, n = 22\n    # a = 2, b = 8, n = 22\n    # a = 6, b = 5, n = 22\n    # a = 4, b = 7, n = 22\n    # a = 7, b = 7, n = 22\n    # a = 8, b = 9, n = 22\n    # a = 1, b = 1, n = 22\n    # a = 1, b = 8, n = 22\n    # a = 5, b = 8, n = 22\n    # a = 6, b = 6, n = 22\n    # a = 7, b = 3, n = 22\n    # a = 8, b = 2, n = 22\n    # a = 6, b = 4, n = 22\n    # a = 9, b = 2, n = 22\n    # a = 8, b = 8, n = 22\n    # a = 3, b = 3, n = 22\n    # a = 8, b = 7, n = 22\n    # a = 2, b = 8, n = 22\n    # a = 9, b = 9, n = 22\n    # a = 8, b = 7, n = 22\n    # a = 1, b = 9, n = 22\n    # a = 9, b = "
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if a*x + b*n - n*n == 0:\n            return (x, n - x)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return 0, 1\n    if n % a == 0:\n        return 0, n / a\n    for i in range(1, n):\n        if (n - i * b) % a == 0:\n            return i, (n - i * b) / a\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (b*-1, n)\n    else:\n        r = n % a\n        quot = n // a\n        if r == 0:\n            return (a, quot)\n        else:\n            return (r, quot)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    import fractions\n    import math\n    m = math.ceil(b/a)\n    delta = n - (a*m)\n    # find a point on line b/a\n    x = delta / b\n    y = m * x\n    # find a point on line a/c\n    x_prime = (n - delta) / a\n    y_prime = m * x_prime\n    # return\n    if x == x_prime and y == y_prime:\n        return (x, y)\n    else:\n        return None\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n    \n    \ndef sort_list(list1, list2):\n    '''\n    Write a function to sort the elements in a list using another list to sort the elements.\n    '''\n    pass\n    \n    \ndef filter_list(list1, list2):\n    '''\n    Write a function to filter the elements in a list using another list to filter them.\n    '''\n    pass\n    \n    \ndef remove_elements_of_list(list1, list2):\n    '''\n    Write a function to remove all elements from a list using another list to remove them.\n    '''\n    pass\n    \n    \ndef map_list(list1, list2):\n    '''\n    Write a function to map a function to each element in a list using another list to map the function on it.\n    '''\n    pass\n    \n    \ndef filter_list_of_list(list1, list2):\n    '''\n    Write a function to filter the elements of a list using another list to filter them.\n    '''\n    pass\n    \n    \ndef map_list_of_list(list1, list2):\n    '''\n    Write a function to map a function to each element of a list using another list to map the function on it.\n    '''\n    pass\n    \n    \ndef filter_list_of_list_of_list(list1, list2):\n    '''\n    Write a function to filter the elements of a list using another list to filter them.\n    '''\n    pass\n    \n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list.\n    '''\n    pass\n    \n    \ndef find_duplicates(list1):\n    '''\n    Write a function to find all duplicates in a list.\n    '''\n    pass\n    \n    \ndef find_duplicate_values(list1, list2):\n    '''\n    Write a function to find all duplicate values in a list.\n    '''\n    pass\n    \n    \ndef sort_list_of_tuples(list1, list2):\n    '''\n    Write a function to sort a list of tuples using a list of values from the tuples.\n    '''\n    pass\n    \n    \ndef find_duplicate_values_in_list_of_tuples(list1, list2):\n    '''\n    Write a function to find all duplicate values in a list of tuples.\n    '''\n    pass\n    \n    \ndef is_list_sorted(list1):\n    '''\n    Write a function to determine if a list is sorted.\n    '''\n    pass\n    \n    \ndef find_missing_element(list1, list2):\n    '''\n    Write a function to find the missing element in a list.\n    '''\n    pass\n    \n    \ndef remove_duplicates_from_list(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    pass\n    \n    \ndef remove_duplicates_from_list_of_list(list1):\n    '''\n    Write a function to remove duplicates from a list of list.\n    '''\n    pass\n    \n    \ndef merge_sorted_list_of_list(list1, list2):\n    '''\n    Write a function to merge two lists of list.\n    '''\n    pass\n    \n    \ndef find_missing_element_in_sorted_list_of_list(list1, list2):\n    '''\n    Write a function to find the missing element in a sorted list of list.\n    '''\n    pass\n    \n    \ndef merge_sorted_list_of_list_of_list(list1, list2):\n    '''\n    Write a function to merge two sorted list of list.\n    '''\n    pass\n    \n    \ndef merge_sorted_list(list1, list2):\n    '''\n    Write a function to merge two sorted list.\n    '''\n    pass\n    \n    \ndef reverse_list_of_list(list1):\n    '''\n    Write a function to reverse a list of list.\n    '''\n    pass\n    \n    \ndef find_duplicate_list_of_list(list1, list2):\n    '''\n    Write a function to find duplicate values in a list of list.\n    '''\n    pass\n    \n    \ndef is_list_rotated(list1, list2):\n    '''\n    Write a function to determine if two list are rotated or not.\n    '''\n    pass\n    \n    \ndef find_rotated_element(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is rotated.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_list_of_list_of_list(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is rotated.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_list_of_list(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is rotated.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_list_of_list_using_binary_search(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is rotated.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_list_of_list(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is rotated.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_list_of_list_of_list(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is rotated.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_list_of_list_using_binary_search(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is rotated.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_list_of_list(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is rotated.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_list_of_list(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is rotated.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_list_of_list_of_list(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is rotated.\n    '''\n    pass\n    \n    \ndef is_rotated_sorted_list(list1):\n    '''\n    Write a function to determine if a list of list is sorted.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_sorted_list(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is sorted.\n    '''\n    pass\n    \n    \ndef is_rotated_sorted_list_of_list(list1):\n    '''\n    Write a function to determine if a list of list is sorted.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_sorted_list_of_list(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is sorted.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_sorted_list_of_list(list1, list2):\n    '''\n    Write a function to find the index of the element in a list of list which is sorted.\n    '''\n    pass\n    \n    \ndef find_rotated_element_in_sorted_list_of_list(list1, list2):\n    ''"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # for each element in list1, if it is present in list2, remove it\n    return [element for element in list1 if element not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #return [x for x in list1 if x not in list2]\n    new_list = []\n    for x in list1:\n        if x not in list2:\n            new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for item in list2:\n        list1.remove(item)\n    \n    return list1\n    \nl1 = [1, 3, 5, 7]\nl2 = [1, 2, 4, 8, 10]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) == 0:\n        return list2\n    else:\n        return list2 + remove_elements(list1[1:], list1[0])\n    \ndef is_palindrome(string):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    if len(string) < 2:\n        return True\n    elif string[0]!= string[-1]:\n        return False\n    else:\n        return is_palindrome(string[1:-1])\n    \ndef rotate_string(string, n):\n    '''\n    Write a function to return a string that is the result of rotating a string n places to the left.\n    '''\n    if len(string) == 0:\n        return string\n    else:\n        return rotate_string(string[1:], n) + string[0]\n    \ndef print_left_view(n, m, arr):\n    '''\n    Write a function to print left view of a binary tree.\n    '''\n    if len(arr) == 0:\n        return\n    elif len(arr) == 1:\n        print(arr[0])\n    else:\n        print(arr[0])\n        print_left_view(n, m, arr[1:])\n    \ndef print_right_view(n, m, arr):\n    '''\n    Write a function to print right view of a binary tree.\n    '''\n    if len(arr) == 0:\n        return\n    elif len(arr) == 1:\n        print(arr[0])\n    else:\n        print(arr[-1])\n        print_right_view(n, m, arr[:-1])\n    \ndef print_zig_zag_level(n, m, arr):\n    '''\n    Write a function to print zig-zag level order traversal of a binary tree.\n    '''\n    if len(arr) == 0:\n        return\n    elif len(arr) == 1:\n        print(arr[0])\n    else:\n        print(arr[0])\n        print_zig_zag_level(n, m, arr[1:])\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    output = []\n    for i in list1:\n        if i not in list2:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return n + sum_series(n - 2)\n    else:\n        return sum_series(n - 1)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n - 2*sum_series(n//2) if n >= 2 else 0\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n==0:\n        return 0\n    if n<0:\n        return None\n    return n+sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return None\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # The function which is to be optimized\n    def func(i):\n        return n - 2*i\n    \n    # Initialize the sum to 0\n    sum = 0\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return None\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    assert n > 0\n    return n + sum_series(n-2) if n % 2 == 0 else sum_series(n-1)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def area_of_regular_polygon(s, l):\n        return (s * l) / 2\n    return area_of_regular_polygon(s, l)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l**2)/(tan(pi/s))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s, l = int(s), int(l)\n    area = ((s*l)/2)*(1-(s*1.0/l)**2)**0.5\n    return area\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere given the radius.\n    '''\n    r = float(r)\n    volume = (4.0/3.0) * (3.141592)**2 * (r**3)\n    return volume\ndef volume_cuboid(l, b, h):\n    '''\n    Write a function to calculate the volume of a cuboid given the length, breadth, and height.\n    '''\n    l, b, h = int(l), int(b), int(h)\n    volume = l * b * h\n    return volume\ndef volume_cone(r, h):\n    '''\n    Write a function to calculate the volume of a cone given the radius and height.\n    '''\n    r, h = float(r), float(h)\n    volume = 1.0/3.0 * (3.141592)**2 * (r**2) * h\n    return volume\ndef volume_cylinder(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given the radius and height.\n    '''\n    r, h = float(r), float(h)\n    volume = (1.0/3.0) * (3.141592)**2 * r**2 * h\n    return volume\ndef volume_prism(r1, r2, h):\n    '''\n    Write a function to calculate the volume of a prism given the base radius, tip radius, and height.\n    '''\n    r1, r2, h = int(r1), int(r2), int(h)\n    volume = (1.0/3.0) * (3.141592)**2 * r1 * r2 * h\n    return volume\ndef volume_pyramid(r1, r2, h):\n    '''\n    Write a function to calculate the volume of a pyramid given the base radius, tip radius, and height.\n    '''\n    r1, r2, h = int(r1), int(r2), int(h)\n    volume = (1.0/3.0) * (3.141592)**2 * r1 * r2**2 * h\n    return volume\ndef area_ellipsoid(a, b, c):\n    '''\n    Write a function to calculate the area of an ellipsoid given the semiaxes a, b, and c.\n    '''\n    a, b, c = int(a), int(b), int(c)\n    area = 4.0 * (a * b * c)**0.5\n    return area\ndef area_sphere(r):\n    '''\n    Write a function to calculate the area of a sphere given the radius.\n    '''\n    r = float(r)\n    area = 4.0 * (3.141592)**2 * (r**2)\n    return area\ndef area_trapezoid(a, b, c, d):\n    '''\n    Write a function to calculate the area of a trapezoid given the base length, top length, bottom length, and height.\n    '''\n    a, b, c, d = int(a), int(b), int(c), int(d)\n    area = ((a + b) * (d - c)) / 2.0\n    return area\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given the length of its sides.\n    '''\n    a, b, c = int(a), int(b), int(c)\n    s = (a + b + c) / 2.0\n    area = (s * (s-a) * (s-b) * (s-c)) ** 0.5\n    return area\ndef area_dodecagon(a, b, c, d, e, f, g, h):\n    '''\n    Write a function to calculate the area of a dodecagon given the length of its sides.\n    '''\n    a, b, c, d, e, f, g, h = int(a), int(b), int(c), int(d), int(e), int(f), int(g), int(h)\n    s = (a + b + c + d + e + f + g + h) / 2.0\n    area = (s * (s-a) * (s-b) * (s-c) * (s-d) * (s-e) * (s-f) * (s-g) * (s-h)) ** 0.5\n    return area\ndef area_rhombus(a, b):\n    '''\n    Write a function to calculate the area of a rhombus given the length of its sides.\n    '''\n    a, b = int(a), int(b)\n    area = (a*b) / 2.0\n    return area\ndef area_square(l):\n    '''\n    Write a function to calculate the area of a square given the length of its sides.\n    '''\n    l = int(l)\n    area = l**2\n    return area\ndef area_rectangle(l, b):\n    '''\n    Write a function to calculate the area of a rectangle given the length and breadth.\n    '''\n    l, b = int(l), int(b)\n    area = l * b\n    return area\ndef area_cuboid(l, b, h):\n    '''\n    Write a function to calculate the area of a cuboid given the length, breadth, and height.\n    '''\n    l, b, h = int(l), int(b), int(h)\n    area = l * b * h\n    return area\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given the length of its sides.\n    '''\n    a, b, c = int(a), int(b), int(c)\n    s = (a + b + c) / 2.0\n    area = (s * (s-a) * (s-b) * (s-c)) ** 0.5\n    return area\ndef area_sphere(r):\n    '''\n    Write a function to calculate the area of a sphere given the radius.\n    '''\n    r = float(r)\n    area = 4.0 * (3.141592)**2 * (r**2)\n    return area\ndef area_rectangle(l, b):\n    '''\n    Write a function to calculate the area of a rectangle given the length and breadth.\n    '''\n    l, b = int(l), int(b)\n    area = l * b\n    return area\ndef area_hexagon(a):\n    '''\n    Write a function to calculate the area of a hexagon given the length of its side.\n    '''\n    a = int(a)\n    area = 3.0/2.0 * (3.141592)**2 * (a**2)\n    return area\ndef area_octagon(a):\n    '''\n    Write a function to calculate the area of an octagon given the length of its side.\n    '''\n    a = int(a)\n    area = 2.0/3.0 * (3.141592)**2 * (a**2)\n    return area\ndef area_heptagon(a):\n    '''\n    Write a function to calculate the area of a heptagon given the length of its side.\n    '''\n    a = int(a)\n    area = (3.0/2.0) * (3.141592)**2 * (a**2)\n    return area\ndef area_octagon(a):\n    '''\n    Write a function to calculate the area of an octagon given the length of its side.\n    '''\n    a = int(a)\n    area = 2.0/3.0 * (3.141592)**2 * (a**2)\n    return area\ndef area_hexagon(a):\n    '''\n    Write a function to calculate the area of a hexagon given the length of its side.\n    '''\n    a = int(a)\n    area = 3.0"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l**2)/(4*tan(pi/s))\n    return area\n    \ndef c_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    perimeter = (l+s)*s\n    return perimeter\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l <= 0 or s <= 0:\n        raise ValueError('Invalid parameters')\n    if l % (2 * s)!= 0:\n        raise ValueError('Incompatible sides and length')\n    return (l / (2 * s)) * (s ** 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25*s*l**2)/tan(pi/l)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l ** 2) / (4 * tan(pi / s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2*tan(pi/n)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i == n/i:\n                s += i\n            else:\n                s += i\n                s += n/i\n    return s\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            s += i\n            if n/i!= i:\n                s += n/i\n    return s == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    i = 2\n    s = 1\n    while i * i < n:\n        if n % i == 0:\n            s += i + n / i\n        i += 1\n    if i * i == n:\n        s += i\n    return s == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i * i!= n:\n                divisors.append(int(n / i))\n    total = sum(divisors)\n    return (total == n)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n    if n < 1:\n        return False\n    # result = 0\n    # for i in range(1, n):\n    #     if n % i == 0:\n    #         result = result + i\n    # if result == n:\n    #     return True\n    # return False\n    return (sum([x for x in range(1, n) if n%x == 0]) == n)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return sum(divisors(n))==n\ndef divisors(n): \n    divs=[1]\n    for i in range(2,int(math.sqrt(n))+1): \n        if n%i==0:\n            divs.append(i)\n            divs.append(n/i)\n    return divs\ndef divisors_sum(n):\n    '''\n    Write a function to determine the sum of all the divisors of a given integer. \n    '''\n    divs=[]\n    for i in range(1,n): \n        if n%i==0:\n            divs.append(i)\n    return sum(divs)\ndef fizz_buzz(n):\n    '''\n    Write a function to output a Fizz Buzz sequence. \n    '''\n    seq=[]\n    for i in range(1,n+1): \n        if i%3==0 and i%5==0:\n            seq.append('FizzBuzz')\n        elif i%3==0:\n            seq.append('Fizz')\n        elif i%5==0:\n            seq.append('Buzz')\n        else:\n            seq.append(str(i))\n    return''.join(seq)\ndef is_prime(n):\n    '''\n    Write a function to determine if a given integer is prime or not. \n    '''\n    if n==2 or n==3: return True\n    if n%2==0 or n%3==0: return False\n    sqrt=int(math.sqrt(n))\n    for i in range(5,sqrt+1,6):\n        if n%i==0 or n%(i+2)==0:\n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Write a function to determine the prime factorization of a given integer. \n    '''\n    divs=[]\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            divs.append(i)\n            divs.extend(prime_factors(n/i))\n    return divs\ndef rotate(array, n): \n    '''\n    Write a function to rotate an array. \n    '''\n    return array[n:]+array[:n]\ndef change_char(string,char1,char2):\n    '''\n    Write a function to change all the characters of a string to another character. \n    '''\n    for i in range(len(string)):\n        if string[i]==char1:\n            string=string[:i]+char2+string[i+1:]\n    return string\ndef is_palindrome(string):\n    '''\n    Write a function to determine if a given string is a palindrome. \n    '''\n    return string[::-1].lower()==string.lower()\ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in a string. \n    '''\n    return len([i for i in string if i in 'aeiou'])\ndef is_panagram(string):\n    '''\n    Write a function to determine if a string is a panagram. \n    '''\n    vowels='aeiou'\n    string=string.lower()\n    for i in string:\n        if i not in vowels:\n            return False\n    return True\ndef count_pairs(string):\n    '''\n    Write a function to count the number of pairs of a letter in a string. \n    '''\n    vowels='aeiou'\n    pairs=0\n    for i in string:\n        if i in vowels:\n            pairs+=1\n    return pairs//2\ndef count_letters(string):\n    '''\n    Write a function to count the number of letters in a string. \n    '''\n    return len(string)\ndef is_even(n): \n    '''\n    Write a function to determine if a given integer is even or not. \n    '''\n    return n%2==0\ndef is_odd(n): \n    '''\n    Write a function to determine if a given integer is odd or not. \n    '''\n    return not is_even(n)\ndef is_palindrome_permutation(string):\n    '''\n    Write a function to determine if a string is a permutation of a palindrome. \n    '''\n    string=string.lower()\n    d={}\n    for i in string:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    if len(d)<2:\n        return True\n    odd=0\n    for key in d:\n        if d[key]%2!=0:\n            odd+=1\n    if odd>1:\n        return False\n    return True\ndef is_palindrome_permutation2(string):\n    '''\n    Write a function to determine if a string is a permutation of a palindrome. \n    '''\n    string=string.lower()\n    d={}\n    for i in string:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return sum(d.values())//2==len(d)\ndef count_words(string):\n    '''\n    Write a function to count the number of words in a string. \n    '''\n    return len(string.split())\ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in a string. \n    '''\n    return len([i for i in string if i in 'aeiou'])\ndef count_consonants(string):\n    '''\n    Write a function to count the number of consonants in a string. \n    '''\n    return len([i for i in string if i in 'bcdfghjklmnpqrstvwxyz'])\ndef count_double_letters(string):\n    '''\n    Write a function to count the number of double letters in a string. \n    '''\n    return len([i for i in string[::2] if string.count(i)>1])\ndef is_prime_number(n):\n    '''\n    Write a function to determine if a given integer is a prime number. \n    '''\n    if n<2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_multiple(n,m):\n    '''\n    Write a function to determine if two given numbers are multiples of each other. \n    '''\n    return n%m==0\ndef is_prime_factor(n,m):\n    '''\n    Write a function to determine if a given integer is a prime factor of a given number. \n    '''\n    return n%m==0 and is_prime(m)\ndef is_prime_factor_of_product(n,m):\n    '''\n    Write a function to determine if a given integer is a prime factor of the product of two given numbers. \n    '''\n    return is_prime_factor(n,m*n)\ndef count_factors(n):\n    '''\n    Write a function to determine the number of factors of a given number. \n    '''\n    count=1\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            count+=1\n    if n==1:\n        count-=1\n    return count\ndef sum_factors(n):\n    '''\n    Write a function to determine the sum of all the factors of a given number. \n    '''\n    return sum([i for i in range(1,n+1) if n%i==0])\ndef sum_divisors(n):\n    '''\n    Write a function to determine the sum of all the divisors of a given integer. \n    '''\n    return sum([i for i in range(1,n+1) if n%i==0])\ndef is_perfect_number(n):\n    '''\n    Write a function to determine if a given integer is a perfect number. \n    '''\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # this one is the same as the previous one.\n    # this one is also faster because it is only checking for the divisors of n,\n    # and does not include the n itself.\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    \n    return sum(divisors) == n\n    \n    # above solution was faster than the one below, which is faster than the below.\n    # from math import sqrt\n    # return sum([i for i in range(1, int(sqrt(n)) + 1) if n % i == 0]) == n\n    \n    \n    \ndef longest_palindromic_substring(string):\n    '''\n    Given a string, find the longest palindromic substring\n    '''\n    # we can have a runtime for this algorithm to be n^2\n    # so we will need to think about the best way to do this\n    # so for the most part we will use two pointers\n    # one to start from the front and one to start from the back\n    # then we will check if the characters at the front and the back are equal\n    # and if they are then we increase the length\n    # once the pointers meet, we move the pointers one step further\n    # and then the pointers are moved one step farther\n    # the algorithm is slow so we will probably need to think about the best way to optimize it\n    # for the most part we will use two pointers\n    # one to start from the front and one to start from the back\n    # then we will check if the characters at the front and the back are equal\n    # and if they are then we increase the length\n    # once the pointers meet, we move the pointers one step further\n    # the pointers are moving so fast that we do not need to think about them\n    # this is the most interesting solution for this problem\n    # this solution is actually faster than the other two\n    # for more information, see the wikipedia page for palindrome\n    # the two main points of this algorithm are the first and last pointers\n    # then we have a left and right pointers, which are increased by 1 at each step\n    # once these pointers meet, we want to see if they are equal\n    # if they are, we increase the length\n    # and once they meet again, we return the length\n    # the left pointer moves as fast as possible so we do not have to think about it\n    # the right pointer moves at the same speed\n    # the algorithm is slow because we have to move all the pointers to check\n    # if they meet, and we increase the length every time we move the pointers\n    # since we want to know the longest substring, we can only move the pointers as fast as we can\n    # this can be done by iterating over the string and keeping a running sum of the length\n    # then if the sum of the length is greater than the length at a certain point, then we increase the length\n    # if the length is greater, then we return the length\n    # we have a running sum to check\n    # so for example if we have the following string\n    # we will get a running sum of 4 (we have 4 letters, so we increase the length)\n    # if we get a running sum of 6 (we have 6 letters, so we increase the length)\n    # if we get a running sum of 9 (we have 9 letters, so we increase the length)\n    # then we get a running sum of 16 (we have 16 letters, so we increase the length)\n    # and then we get a running sum of 22 (we have 22 letters, so we increase the length)\n    # and then we get a running sum of 27 (we have 27 letters, so we increase the length)\n    # and then we get a running sum of 30 (we have 30 letters, so we increase the length)\n    # and then we get a running sum of 33 (we have 33 letters, so we increase the length)\n    # and then we get a running sum of 36 (we have 36 letters, so we increase the length)\n    # and then we get a running sum of 39 (we have 39 letters, so we increase the length)\n    # and then we get a running sum of 42 (we have 42 letters, so we increase the length)\n    # and then we get a running sum of 45 (we have 45 letters, so we increase the length)\n    # and then we get a running sum of 48 (we have 48 letters, so we increase the length)\n    # and then we get a running sum of 51 (we have 51 letters, so we increase the length)\n    # and then we get a running sum of 54 (we have 54 letters, so we increase the length)\n    # and then we get a running sum of 57 (we have 57 letters, so we increase the length)\n    # and then we get a running sum of 60 (we have 60 letters, so we increase the length)\n    # and then we get a running sum of 63 (we have 63 letters, so we increase the length)\n    # and then we get a running sum of 66 (we have 66 letters, so we increase the length)\n    # and then we get a running sum of 69 (we have 69 letters, so we increase the length)\n    # and then we get a running sum of 72 (we have 72 letters, so we increase the length)\n    # and then we get a running sum of 75 (we have 75 letters, so we increase the length)\n    # and then we get a running sum of 78 (we have 78 letters, so we increase the length)\n    # and then we get a running sum of 81 (we have 81 letters, so we increase the length)\n    # and then we get a running sum of 84 (we have 84 letters, so we increase the length)\n    # and then we get a running sum of 87 (we have 87 letters, so we increase the length)\n    # and then we get a running sum of 90 (we have 90 letters, so we increase the length)\n    # and then we get a running sum of 93 (we have 93 letters, so we increase the length)\n    # and then we get a running sum of 96 (we have 96 letters, so we increase the length)\n    # and then we get a running sum of 99 (we have 99 letters, so we increase the length)\n    # and then we get a running sum of 102 (we have 102 letters, so we increase the length)\n    # and then we get a running sum of 105 (we have 105 letters, so we increase the length)\n    # and then we get a running sum of 108 (we have 108 letters, so we increase the length)\n    # and then we get a running sum of 111 (we have 111 letters, so we increase the length)\n    # and then we get a running sum of 114 (we have 114 letters, so we increase the length)\n    # and then we get a running sum of 117 (we have 117 letters, so we increase the length)\n    # and then we get a running sum of 120 (we have 120 letters, so we increase the length)\n    # and then we get a running sum of 123 (we have 123 letters, so we increase the length)\n    # and then we get a running sum of 126 (we have 126 letters, so we increase the length)\n    # and then we get a running sum of 129 (we have 129 letters, so we increase the length)\n    # and then we get a running sum of 132 (we have 132 letters, so we increase the length)\n    # and then we get a running sum of 135 (we have 135 letters, so we increase the length)\n    # and then we get a running sum of 138 (we have 138 letters, so we increase the length)\n    # and then we get a running sum of 141 (we have 141 letters, so we increase the length)\n    # and then we get a running sum of 144 (we have 144 letters, so we increase the length)\n    # and then we get a running sum of 147 (we have 147 letters, so we increase the length)\n    # and then we get a running sum of 150 (we have 150 letters, so we increase the length)\n    # and then we get a running sum of 153 (we have 153 letters, so we increase the length)\n    # and then we get a running sum of 156 (we have 156 letters, so we increase the length)\n    # and then we get a running sum of 159 (we have 159 letters, so we increase the length)\n    # and then we get a running sum of 162 (we have 162 letters, so we increase the length)\n    # and then we get a running sum of 165 (we have 165 letters, so we increase the length)\n    # and then we get a running sum of 168 (we have 168 letters, so we increase the length)\n    # and then we get a running sum of 171 (we have 171 letters, so we increase the length)\n    # and the"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            if (n/i) == (i+n/i):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # print n\n    divs = {}\n    for i in range(1,int(math.ceil(math.sqrt(n)))):\n        if n%i == 0:\n            divs[i] = 0\n            if i*i!= n:\n                divs[n/i] = 0\n    # print divs\n    if sum(divs.values()) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) / len(divisors)\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    count = 0\n    for letter in str1:\n        count += dict1[letter]\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    def count_char_position(str1):\n        dict = {}\n        for a in alphabet:\n            dict[a] = 0\n        for i in range(len(str1)):\n            dict[str1[i]] += 1\n        return dict\n    \n    return count_char_position(str1)\n    \n    \ndef longest_word(filename):\n    '''\n    Write a function that reads a file and returns the longest word in the file.\n    '''\n    dict = {}\n    for line in open(filename):\n        words = line.strip().split()\n        for word in words:\n            if len(word) in dict:\n                dict[len(word)].append(word)\n            else:\n                dict[len(word)] = [word]\n    return max(dict, key=lambda x: len(dict[x]))\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if (str1[i].isalpha()):\n            if (str1[i] == str1[i].upper()):\n                if (str1[i] == str1[i].lower()):\n                    count += 1\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dic={}\n    for i in range(26):\n        dic[chr(97+i)]=0\n    for j in str1:\n        dic[j.lower()]+=1\n    return dic\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # def convert_to_lower_case(str1):\n    #     '''\n    #     Given a string, return the string with each character converted to lower case.\n    #     '''\n    #     return ''.join(char.lower() for char in str1)\n    \n    # print(convert_to_lower_case(str1))\n    \n    \n    # counter = {}\n    # for i in range(len(str1)):\n    #     if str1[i] in counter:\n    #         counter[str1[i]] += 1\n    #     else:\n    #         counter[str1[i]] = 1\n    # return counter\n    \n    # counter = {str1[i]:str1.count(str1[i]) for i in range(len(str1))}\n    # return counter\n    \n    # '''\n    # If we are not sure about the position, we can do a linear scan of the string.\n    # '''\n    # for i in range(len(str1)):\n    #     if str1[i] in 'abcdefghijklmnopqrstuvwxyz':\n    #         counter[str1[i]] += 1\n    # return counter\n    \n    # return {char:str1.count(char) for char in str1 if char in 'abcdefghijklmnopqrstuvwxyz'}\n    \n    \n    # count = {}\n    # for char in str1:\n    #     count[char] = str1.count(char)\n    # return count\n    \n    # from collections import Counter\n    # count = Counter(str1)\n    # return count\n    \n    # from collections import defaultdict\n    # count = defaultdict(int)\n    # for char in str1:\n    #     count[char] += 1\n    # return count\n    \n    # from collections import Counter\n    # return Counter(str1)\n    \n    # return {char:str1.count(char) for char in str1}\n    \n    # return {char:str1.count(char) for char in str1 if char in 'abcdefghijklmnopqrstuvwxyz'}\n    \n    # cnt = Counter(str1)\n    # for char in str1:\n    #     if char in 'abcdefghijklmnopqrstuvwxyz':\n    #         cnt[char] += 1\n    # return cnt\n    \n    # return {char:str1.count(char) for char in str1 if char in 'abcdefghijklmnopqrstuvwxyz'}\n    \n    # return {char:str1.count(char) for char in str1 if char.isalpha()}\n    \n    # return {char:str1.count(char) for char in str1 if char.isalpha() or char.isdigit()}\n    \n    # return {char:str1.count(char) for char in str1 if char.isalpha() or char.isdigit() or char.isspace()}\n    \n    # return {char:str1.count(char) for char in str1 if char.isalpha() or char.isdigit() or char.isspace() or char in '-_'}\n    \n    # return {char:str1.count(char) for char in str1 if char.isalpha() or char.isdigit() or char.isspace() or char in '-_' or char.isnumeric()}\n    \n    # return {char:str1.count(char) for char in str1 if char.isalpha() or char.isdigit() or char.isspace() or char in '-_' or char.isnumeric() or char.isupper()}\n    \n    # return {char:str1.count(char) for char in str1 if char.isalpha() or char.isdigit() or char.isspace() or char in '-_' or char.isnumeric() or char.isupper() or char.islower()}\n    \n    # return {char:str1.count(char) for char in str1 if char.isalpha() or char.isdigit() or char.isspace() or char in '-_' or char.isnumeric() or char.isupper() or char.islower() or char.isalpha().lower()}\n    \n    # return {char:str1.count(char) for char in str1 if char.isalpha() or char.isdigit() or char.isspace() or char in '-_' or char.isnumeric() or char.isupper() or char.islower() or char.isalpha().lower() or char.isdigit() or char.isdigit().lower() or char.isdigit().upper()}\n    \n    # return {char:str1.count(char) for char in str1 if char.isalpha() or char.isdigit() or char.isspace() or char in '-_' or char.isnumeric() or char.isupper() or char.islower() or char.isalpha().lower() or char.isdigit() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.isdigit().lower() or char.isdigit().upper() or char.is"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    print(str1)\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    letters_dict = {}\n    for i in range(len(letters)):\n        letters_dict[letters[i]] = i\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    if str1 == '':\n        return 0\n    \n    # first, build a dictionary of the positions of each letter in the alphabet\n    char_pos = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    \n    # now, count the number of occurences of each letter in the string\n    count = 0\n    for char in str1:\n        pos = char_pos[char]\n        count += count_char_position(str1[pos+1:])\n    \n    # return the count of occurences\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for i in range(26):\n        d[str(chr(i+97))] = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            d[str1[i]] += 1\n    return d\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #convert to lower case\n    str1 = str1.lower()\n    #create the 26 alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    #create a list with 26 elements\n    char_position = [0 for i in range(26)]\n    #go through all characters\n    for i in range(len(str1)):\n        #replace the letter to its position\n        char_position[alphabet.index(str1[i])] += 1\n    #convert to string\n    str1 = ''.join(str(x) for x in char_position)\n    return str1\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(1 for i in range(len(str1)) if str1[i] == chr(i+96))\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    N = len(A)\n    xor_sum = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 0:\n                xor_sum += 1\n    return xor_sum\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if not A:\n        return 0\n    count = 0\n    for x in xrange(len(A) - 1):\n        for y in xrange(x + 1, len(A)):\n            if A[x] ^ A[y] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    total = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j] % 2 == 0):\n                total += 1\n    return total\n    \n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_count = 0\n    for i in xrange(len(A)):\n        for j in xrange(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                xor_count += 1\n    return xor_count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if (A[i]^A[j])%2 == 0:\n                return 1\n    return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if i!= j and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for a in A:\n        for b in A:\n            if a!= b and (a ^ b) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 0: \n        return 0 \n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    def xor_find(i, j):\n        if i!= j:\n            if A[i]!= A[j]:\n                return True\n    \n    num_xors = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j:\n                if xor_find(i,j) == True:\n                    num_xors += 1\n    return num_xors\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(2 ** math.ceil(math.log(n, 2)))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** int(log(n, 2))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    # if n is a power of 2, return n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # if n is a power of 2, return it\n        if n & (n-1) == 0:\n            return n\n        else:\n            # find the next power of 2\n            n = n+1\n            if n & (n-1) == 0:\n                return n\n            else:\n                # if n is not a power of 2, return the next power of 2\n                return next_power_of_2(n)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if n <= 0: \n        return 0\n    if n == 1:\n        return n\n    if n & (n-1) == 0: \n        return n\n    while n & (n-1) > 0:\n        n = n & (n-1)\n    return n\n    \ndef to_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if n <= 0: \n        return 0\n    if n == 1:\n        return n\n    if n & (n-1) == 0: \n        return n\n    while n & (n-1) > 0:\n        n = n & (n-1)\n    return n\n    \ndef is_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if n <= 0: \n        return False\n    if n == 1:\n        return True\n    if n & (n-1) > 0: \n        return False\n    return True\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while p <= n:\n        p *= 2\n    return p\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        raise ValueError('n cannot be less than 1')\n    if n == 1:\n        return 1\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num = 0\n    for i in x:\n        if i == x:\n            num += 1\n    return num\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in a:\n        if x == i:\n            c += 1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([i for i in a if i == x])\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in x:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(0,len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\n    \ndef sort(a,n):\n    '''\n    Write a function to sort a given list.\n    '''\n    b=[]\n    for i in range(0,n):\n        b.append(a[i])\n    b.sort()\n    return b\n    \ndef inverse_index(a,x):\n    '''\n    Write a function to return the index of a given number in a list\n    '''\n    index=0\n    for i in range(0,len(a)):\n        if a[i]==x:\n            index=i\n    return index\n    \ndef all_palindromes(a,n):\n    '''\n    Write a function to check if a given list of words is a palindrome.\n    '''\n    for i in range(0,n):\n        for j in range(0,n):\n            if a[i][j]!=a[j][i]:\n                return False\n    return True\n    \ndef make_lists(a):\n    '''\n    Write a function to return a list with a given length of the same value.\n    '''\n    b=[]\n    for i in range(0,len(a)):\n        b.append(a[i])\n    return b\n    \ndef is_prime(a):\n    '''\n    Write a function to check if a given number is prime.\n    '''\n    if a<=1:\n        return False\n    elif a==2:\n        return True\n    else:\n        for i in range(2,a):\n            if a%i==0:\n                return False\n        return True\n        \ndef primes(n):\n    '''\n    Write a function to return a list of primes less than n.\n    '''\n    l=[]\n    for i in range(2,n):\n        if is_prime(i):\n            l.append(i)\n    return l\n    \ndef r_squared(x,y):\n    '''\n    Write a function to compute the r-squared value.\n    '''\n    total=0\n    mean=sum(y)/len(y)\n    for i in range(0,len(y)):\n        total=total+pow(y[i]-mean,2)\n    total=total/len(y)\n    return 1-total\n    \ndef weighted_average(a,n,w):\n    '''\n    Write a function to compute the weighted average.\n    '''\n    total=0\n    for i in range(0,n):\n        total=total+a[i]*w[i]\n    return total/sum(w)\n    \ndef mean_squared_error(x,y):\n    '''\n    Write a function to compute the mean squared error.\n    '''\n    error=0\n    for i in range(0,len(x)):\n        error=error+pow((x[i]-y[i]),2)\n    return error/len(x)\n    \ndef correlation_coefficient(x,y):\n    '''\n    Write a function to compute the correlation coefficient.\n    '''\n    x_mean=sum(x)/len(x)\n    y_mean=sum(y)/len(y)\n    numerator=0\n    denominator_x=0\n    denominator_y=0\n    for i in range(0,len(x)):\n        numerator=numerator+((x[i]-x_mean)*(y[i]-y_mean))\n        denominator_x=denominator_x+pow((x[i]-x_mean),2)\n        denominator_y=denominator_y+pow((y[i]-y_mean),2)\n    denominator=((denominator_x*denominator_y)**(1/2))\n    return numerator/denominator\n    \ndef covariance(x,y):\n    '''\n    Write a function to compute the covariance.\n    '''\n    x_mean=sum(x)/len(x)\n    y_mean=sum(y)/len(y)\n    numerator=0\n    denominator_x=0\n    denominator_y=0\n    for i in range(0,len(x)):\n        numerator=numerator+((x[i]-x_mean)*(y[i]-y_mean))\n        denominator_x=denominator_x+pow((x[i]-x_mean),2)\n        denominator_y=denominator_y+pow((y[i]-y_mean),2)\n    denominator=((denominator_x*denominator_y)**(1/2))\n    return numerator/denominator\n    \ndef correlation_matrix(a,n):\n    '''\n    Write a function to compute the correlation matrix.\n    '''\n    c=[]\n    for i in range(0,n):\n        c.append([])\n    for i in range(0,n):\n        for j in range(0,n):\n            c[i].append(correlation_coefficient(a[i],a[j]))\n    return c\n    \ndef inv_covariance_matrix(a,n):\n    '''\n    Write a function to compute the inverse covariance matrix.\n    '''\n    c=[]\n    for i in range(0,n):\n        c.append([])\n    for i in range(0,n):\n        for j in range(0,n):\n            c[i].append(covariance(a[i],a[j]))\n    return c\n    \ndef k_means(a,k):\n    '''\n    Write a function to perform k-means clustering on a given list.\n    '''\n    l=[]\n    for i in range(0,k):\n        l.append([])\n    for i in range(0,len(a)):\n        min_d=10000000\n        min_i=0\n        for j in range(0,k):\n            d=pow((a[i][0]-l[j][0]),2)+pow((a[i][1]-l[j][1]),2)\n            if d<min_d:\n                min_d=d\n                min_i=j\n        l[min_i].append(a[i])\n    return l\n    \ndef mean(a,n):\n    '''\n    Write a function to compute the mean of a list.\n    '''\n    total=0\n    for i in range(0,n):\n        total=total+a[i]\n    return total/n\n    \ndef var(a,n):\n    '''\n    Write a function to compute the variance of a list.\n    '''\n    mean_x=mean(a,n)\n    total=0\n    for i in range(0,n):\n        total=total+pow((a[i]-mean_x),2)\n    return total/n\n    \ndef std_dev(a,n):\n    '''\n    Write a function to compute the standard deviation of a list.\n    '''\n    return pow((var(a,n)),(1/2))\n    \ndef covariance_matrix(a,n):\n    '''\n    Write a function to compute the covariance matrix.\n    '''\n    c=[]\n    for i in range(0,n):\n        c.append([])\n    for i in range(0,n):\n        for j in range(0,n):\n            c[i].append(covariance(a[i],a[j]))\n    return c\n    \ndef inv_covariance_matrix(a,n):\n    '''\n    Write a function to compute the inverse covariance matrix.\n    '''\n    c=[]\n    for i in range(0,n):\n        c.append([])\n    for i in range(0,n):\n        for j in range(0,n):\n            c[i].append(covariance(a[i],a[j]))\n    return c\n    \ndef k_means_cluster(a,k):\n    '''\n    Write a function to perform k"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count=count+1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #check if the number is in the list\n    if x not in a: \n        return 0\n    #If the number is in the list then count the frequency\n    else:\n        c = 0\n        for i in range(len(a)):\n            if x == a[i]:\n                c+=1\n        return c\n    \n    \na = [1,2,3,2,1,4,3,4,4]\nb = [1,2,3,2,1]\nc = [1,2,3,4,5]\nprint(frequency(a,5))\nprint(frequency(b,2))\nprint(frequency(c,4)"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > len(list1)-1:\n        return 0\n    elif m < 0:\n        return 0\n    elif n > len(list1)-1:\n        return 0\n    elif n < 0:\n        return 0\n    else:\n        return list1[m]+list1[n]\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) == 0:\n        return 0\n    if m > n:\n        return 0\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return 0\n    else:\n        return list1[m] + sum_range_list(list1, m+1, n)\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = []\n    for i in range(m, n):\n        sum_list.append(list1[i])\n    print(sum(sum_list))\nsum_range_list([1, 2, 3, 4, 5, 6], 2, 5)\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5+a*(5-math.sqrt(5))\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*4\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*4\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*4\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*4\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*4\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*4\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*4\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + a\ndef perimeter_square(a):\n    '"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5*math.sqrt(2)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5 * a)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 3*a*math.sqrt(5)/2\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 8 + a\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a * 7 + a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a\ndef perimeter_nonagon_alternate(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 11 + a\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a * 12 + a\ndef perimeter_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return a * 4 + a\ndef perimeter_cube(a):\n    '''\n    Write a function to find the perimeter of a regular cube from the length of its sides.\n    '''\n    return a * 12\ndef perimeter_octahedron(a):\n    '''\n    Write a function to find the perimeter of a regular octahedron from the length of its sides.\n    '''\n    return a * 8\ndef perimeter_dodecahedron(a):\n    '''\n    Write a function to find the perimeter of a regular dodecahedron from the length of its sides.\n    '''\n    return a * 20\ndef perimeter_icosahedron(a):\n    '''\n    Write a function to find the perimeter of a regular icosahedron from the length of its sides.\n    '''\n    return a * 12\ndef perimeter_octaedron(a):\n    '''\n    Write a function to find the perimeter of a regular octaedron from the length of its sides.\n    '''\n    return a * 18\ndef perimeter_enneagon(a):\n    '''\n    Write a function to find the perimeter of a regular enneagon from the length of its sides.\n    '''\n    return a * 7 + a\ndef perimeter_nonan(a):\n    '''\n    Write a function to find the perimeter of a regular nonanagon from the length of its sides.\n    '''\n    return a * 13 + a\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a * 9 + a\ndef perimeter_decagon_alternate(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a * 17 + a\ndef perimeter_icosagon(a):\n    '''\n    Write a function to find the perimeter of a regular icosagon from the length of its sides.\n    '''\n    return a * 8\ndef perimeter_hexagon_alternate(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 13 + a\ndef perimeter_heptagon_alternate(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a * 18 + a\ndef perimeter_octagon_alternate(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 17 + a\ndef perimeter_dodecagon_alternate(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a * 21 + a\ndef perimeter_hexagon_series(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a\ndef perimeter_nonagon_series(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 8 + a\ndef perimeter_octagon_series(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 7 + a\ndef perimeter_dodecagon_series(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a * 9 + a\ndef perimeter_heptagon_series(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a * 6 + a\ndef perimeter_octagon_series(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a\ndef perimeter_tetrahedron_series(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return a * 4 + a\ndef perimeter_hexagon_series(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 5 + a\ndef perimeter_octahedron_series(a):\n    '''\n    Write a function to find the perimeter of a regular octahedron from the length of its sides.\n    '''\n    return a * 7 + a\ndef perimeter_dodecagon_series(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a * 10 + a\ndef perimeter_icosahedron_series(a):\n    '''\n    Write a function to find the perimeter of a regular icosahedron from the length of its sides.\n    '''\n    return a * 5 + a\ndef perimeter_octaedron_series(a):\n    '''\n    Write a function to find the perimeter of a regular octaedron from the length of its sides.\n    '''\n    return a * 9 + a\ndef perimeter_enneagon_series(a):\n    '''\n    Write a function to find the perimeter of a regular enneagon from the length of its sides.\n    '''\n    return a * 7 + a\ndef perimeter_nonan_series(a):\n    '''\n    Write a function to find the perimeter of a regular nonanagon from the length of its sides.\n    '''\n    return a * 11 + a\ndef perimeter_decagon_series(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a * 8 + a\ndef perimeter_decagon_alternate_series(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a * 16 + a\ndef perimeter_icosagon_series(a):\n    '''\n    Write a function to find the perimeter of a regular icosagon from the length of its sides.\n    '''\n    return a * 8\ndef perimeter_hexagon_alternate_series(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 12 + a\ndef perimeter_heptagon_alternate_series(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a * 17 + a\ndef perimeter_octagon_alternate_series(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a "
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 * math.sqrt(3)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6 * a\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 6 * a\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return 10 * a\ndef perimeter_decagon2(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return 12 * a\ndef perimeter_octagon2(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_triangle(a, b):\n    '''\n    Write a function to find the perimeter of a regular triangle from the lengths of its sides.\n    '''\n    return a + b\ndef perimeter_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_nonagon2(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_triangle2(a, b):\n    '''\n    Write a function to find the perimeter of a regular triangle from the lengths of its sides.\n    '''\n    return a + b\ndef perimeter_octagon3(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_pentagon2(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_hexagon2(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6 * a\ndef perimeter_heptagon3(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_octagon4(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_nonagon3(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 6 * a\ndef perimeter_pentagon4(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_hexagon4(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6 * a\ndef perimeter_heptagon5(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_octagon5(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from the radius of its circle.\n    '''\n    return 2 * math.pi * r\ndef perimeter_circle2(a):\n    '''\n    Write a function to find the perimeter of a circle from the radius of its circle.\n    '''\n    return 2 * math.pi * a\ndef perimeter_hexagon6(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6 * a\ndef perimeter_octagon6(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_heptagon6(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_pentagon6(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_hexagon7(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6 * a\ndef perimeter_octagon7(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_heptagon7(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_octagon8(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_heptagon8(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_pentagon9(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_hexagon9(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6 * a\ndef perimeter_heptagon9(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_octagon9(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_nonagon9(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 6 * a\ndef perimeter_decagon9(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return 10 * a\ndef perimeter_decagon10(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return 12 * a\ndef perimeter_octagon10(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_triangle9(a, b):\n    '''\n    Write a function to find the perimeter of a regular triangle from the lengths of its sides.\n    '''\n    return a + b\ndef perimeter_tetrahedron9(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_nonagon10(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_triangle10(a, b):\n    '''\n    Write a function to find the perimeter of a regular triangle from the lengths of its sides.\n    '''\n    return a + "
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i] =='s' and s[i+1] == 'd' and s[i+2] == 't':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n-3):\n        if s[i:i+3] =='std':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n    \ndef string_match(a, b):\n    '''\n    Write a function which returns the characters which occur in both a and b.\n    '''\n    a_letters = {}\n    b_letters = {}\n    a_len = len(a)\n    b_len = len(b)\n    for i in range(a_len):\n        if a[i] in a_letters:\n            a_letters[a[i]] += 1\n        else:\n            a_letters[a[i]] = 1\n    for i in range(b_len):\n        if b[i] in b_letters:\n            b_letters[b[i]] += 1\n        else:\n            b_letters[b[i]] = 1\n    count = 0\n    for letter in a_letters:\n        if letter in b_letters:\n            count += min(a_letters[letter], b_letters[letter])\n    return count\n    \ndef longest_common_substring(s1, s2):\n    '''\n    Write a function which returns the longest substring that is common to two strings.\n    '''\n    a_len = len(s1)\n    b_len = len(s2)\n    matrix = [[0] * (b_len + 1) for i in range(a_len + 1)]\n    max_length = 0\n    max_location = [0, 0]\n    for i in range(a_len):\n        for j in range(b_len):\n            if s1[i] == s2[j]:\n                matrix[i][j] = matrix[i - 1][j - 1] + 1\n                if matrix[i][j] > max_length:\n                    max_length = matrix[i][j]\n                    max_location = [i, j]\n    return s1[max_location[0] - max_length + 1: max_location[0] + 1]\n    \ndef longest_common_substring_2(s1, s2):\n    '''\n    Write a function which returns the longest substring that is common to two strings.\n    '''\n    a_len = len(s1)\n    b_len = len(s2)\n    matrix = [[0] * (b_len + 1) for i in range(a_len + 1)]\n    max_length = 0\n    max_location = [0, 0]\n    for i in range(a_len):\n        for j in range(b_len):\n            if s1[i] == s2[j]:\n                matrix[i][j] = matrix[i - 1][j - 1] + 1\n                if matrix[i][j] > max_length:\n                    max_length = matrix[i][j]\n                    max_location = [i, j]\n    return s1[max_location[0] - max_length + 1: max_location[0] + 1]\n    \ndef longest_palindromic_substring(s):\n    '''\n    Write a function which returns the longest palindrome substring.\n    '''\n    a_len = len(s)\n    matrix = [[0] * a_len for i in range(a_len)]\n    max_length = 0\n    max_location = [0, 0]\n    for i in range(a_len):\n        for j in range(a_len):\n            if i == j:\n                matrix[i][j] = 1\n            elif i == j - 1:\n                if s[i] == s[j]:\n                    matrix[i][j] = 2\n                else:\n                    matrix[i][j] = 1\n            else:\n                if s[i] == s[j]:\n                    matrix[i][j] = 2 + matrix[i + 1][j - 1]\n                else:\n                    matrix[i][j] = max(matrix[i + 1][j], matrix[i][j - 1])\n            if matrix[i][j] > max_length:\n                max_length = matrix[i][j]\n                max_location = [i, j]\n    return s[max_location[0] - max_length + 1: max_location[0] + max_length]\n    \ndef longest_palindromic_substring_2(s):\n    '''\n    Write a function which returns the longest palindrome substring.\n    '''\n    a_len = len(s)\n    matrix = [[0] * a_len for i in range(a_len)]\n    max_length = 0\n    max_location = [0, 0]\n    for i in range(a_len):\n        for j in range(a_len):\n            if i == j:\n                matrix[i][j] = 1\n            elif i == j - 1:\n                if s[i] == s[j]:\n                    matrix[i][j] = 2\n                else:\n                    matrix[i][j] = 1\n            else:\n                if s[i] == s[j]:\n                    matrix[i][j] = 2 + matrix[i + 1][j - 1]\n                else:\n                    matrix[i][j] = max(matrix[i + 1][j], matrix[i][j - 1])\n            if matrix[i][j] > max_length:\n                max_length = matrix[i][j]\n                max_location = [i, j]\n    return s[max_location[0] - max_length + 1: max_location[0] + max_length]\n    \ndef compress(s):\n    '''\n    Write a function which takes a string and returns the compressed version of it.\n    '''\n    a_len = len(s)\n    matrix = [0] * a_len\n    count = 1\n    i = 1\n    while i < a_len:\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            matrix[i] = count\n            count = 1\n        i += 1\n    matrix[i] = count\n    i += 1\n    s_new = ''\n    for num in matrix:\n        s_new += str(num)\n    return s_new\n    \ndef compress_2(s):\n    '''\n    Write a function which takes a string and returns the compressed version of it.\n    '''\n    a_len = len(s)\n    matrix = [0] * a_len\n    count = 1\n    i = 1\n    while i < a_len:\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            matrix[i] = count\n            count = 1\n        i += 1\n    matrix[i] = count\n    i += 1\n    s_new = ''\n    for num in matrix:\n        s_new += str(num)\n    return s_new\n    \ndef longest_common_substring_3(s1, s2):\n    '''\n    Write a function which returns the longest common substring.\n    '''\n    a_len = len(s1)\n    b_len = len(s2)\n    matrix = [[0] * (b_len + 1) for i in range(a_len + 1)]\n    max_length = 0\n    max_location = [0, 0]\n    for i in range(a_len):\n        for j in range(b_len):\n            if s1[i] == s2[j]:\n                matrix[i][j] = matrix[i - 1][j - 1] + 1\n                if matrix[i][j] > max_length:\n                    max_length = matrix[i][j]\n                    max_location = [i, j]\n    return s1[max_location[0] - max_length + 1: max_location[0] + 1]\n    \ndef longest_common_substring_4(s1, s2):\n    '''\n    Write a function which returns the longest common substring.\n    '''\n    a_len = len(s1)\n    b_len = len(s2)\n    matrix = [[0] * (b_len + 1) for i in range(a_len + 1)]\n    max_length = 0\n    ma"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    try:\n        return s.count('std')\n    except:\n        return 0\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s.count('std')>0:\n        return s.count('std')\n    else:\n        return -1\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    res = s.lower().count('std')\n    return res\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)==0:\n        return True\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i],type(test_tuple[0])):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(item) is type(test_tuple[0]) for item in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # your code here\n    if type(test_tuple) is not tuple:\n        print('Not a tuple')\n    else:\n        tuple_type = type(test_tuple)\n        for item in test_tuple:\n            if type(item) is not tuple_type:\n                print('Not a tuple')\n                return\n        print('All items in tuple have same data type')\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    res = True\n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            res = False\n            break\n    return res\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) > 0:\n        tuple_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if not type(test_tuple[i]) == tuple_type:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(isinstance(t, test_tuple[0]) for t in test_tuple):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    l=len(test_tuple)\n    i=0\n    while i<l:\n        if type(test_tuple[i])==str:\n            return False\n        i+=1\n    return True\ndef all_equal(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple are equal to each other or not.\n    '''\n    l=len(test_tuple)\n    i=0\n    while i<l:\n        if test_tuple[i]!=test_tuple[l-1]:\n            return False\n        i+=1\n    return True\ndef get_string(test_tuple):\n    '''\n    Write a function to get the concatenation of tuples in tuples.\n    '''\n    i=0\n    l=len(test_tuple)\n    r=\"\"\n    while i<l:\n        r=r+str(test_tuple[i])\n        i+=1\n    return r\ndef get_sum(test_tuple):\n    '''\n    Write a function to compute the sum of all the elements in tuple.\n    '''\n    i=0\n    l=len(test_tuple)\n    r=0\n    while i<l:\n        r+=test_tuple[i]\n        i+=1\n    return r\ndef reverse(test_tuple):\n    '''\n    Write a function to reverse the order of tuple.\n    '''\n    l=len(test_tuple)\n    i=0\n    r=()\n    while i<l/2:\n        r+=(test_tuple[l-1-i],)\n        i+=1\n    if l%2!=0:\n        r+=(test_tuple[l/2],)\n    return r\ndef get_product(test_tuple):\n    '''\n    Write a function to compute the product of all the elements in tuple.\n    '''\n    i=0\n    l=len(test_tuple)\n    r=1\n    while i<l:\n        r*=test_tuple[i]\n        i+=1\n    return r\ndef rotate_left(test_tuple,n):\n    '''\n    Write a function to compute the tuple obtained by rotating the first n elements of the tuple to the left.\n    '''\n    i=0\n    l=len(test_tuple)\n    r=()\n    while i<n:\n        r+=(test_tuple[l-i-1],)\n        i+=1\n    if n>l:\n        r+=(test_tuple[0],)\n    return r\ndef rotate_right(test_tuple,n):\n    '''\n    Write a function to compute the tuple obtained by rotating the last n elements of the tuple to the right.\n    '''\n    i=0\n    l=len(test_tuple)\n    r=()\n    while i<l-n:\n        r+=(test_tuple[i+n],)\n        i+=1\n    if l-n>0:\n        r+=(test_tuple[0],)\n    return r\ndef get_average(test_tuple):\n    '''\n    Write a function to compute the average value of a tuple.\n    '''\n    l=len(test_tuple)\n    r=0\n    i=0\n    while i<l:\n        r+=test_tuple[i]\n        i+=1\n    return r/l\ndef maximum(test_tuple):\n    '''\n    Write a function to compute the maximum value of a tuple.\n    '''\n    l=len(test_tuple)\n    i=0\n    r=test_tuple[0]\n    while i<l:\n        if r<test_tuple[i]:\n            r=test_tuple[i]\n        i+=1\n    return r\ndef minimum(test_tuple):\n    '''\n    Write a function to compute the minimum value of a tuple.\n    '''\n    l=len(test_tuple)\n    i=0\n    r=test_tuple[0]\n    while i<l:\n        if r>test_tuple[i]:\n            r=test_tuple[i]\n        i+=1\n    return r\ndef get_median(test_tuple):\n    '''\n    Write a function to compute the median value of a tuple.\n    '''\n    l=len(test_tuple)\n    if l%2!=0:\n        return test_tuple[l/2]\n    else:\n        return (test_tuple[l/2]+test_tuple[l/2-1])/2\ndef make_average(test_tuple):\n    '''\n    Write a function to compute the average of all the elements of tuple.\n    '''\n    l=len(test_tuple)\n    r=0\n    i=0\n    while i<l:\n        r+=test_tuple[i]\n        i+=1\n    return r/l\ndef make_maximum(test_tuple):\n    '''\n    Write a function to compute the maximum of all the elements of tuple.\n    '''\n    l=len(test_tuple)\n    r=test_tuple[0]\n    i=0\n    while i<l:\n        if r<test_tuple[i]:\n            r=test_tuple[i]\n        i+=1\n    return r\ndef make_minimum(test_tuple):\n    '''\n    Write a function to compute the minimum of all the elements of tuple.\n    '''\n    l=len(test_tuple)\n    r=test_tuple[0]\n    i=0\n    while i<l:\n        if r>test_tuple[i]:\n            r=test_tuple[i]\n        i+=1\n    return r\ndef make_median(test_tuple):\n    '''\n    Write a function to compute the median of all the elements of tuple.\n    '''\n    l=len(test_tuple)\n    if l%2!=0:\n        return test_tuple[l/2]\n    else:\n        return (test_tuple[l/2]+test_tuple[l/2-1])/2\ndef make_product(test_tuple):\n    '''\n    Write a function to compute the product of all the elements of tuple.\n    '''\n    l=len(test_tuple)\n    r=1\n    i=0\n    while i<l:\n        r*=test_tuple[i]\n        i+=1\n    return r\ndef make_reverse(test_tuple):\n    '''\n    Write a function to reverse the order of tuple.\n    '''\n    l=len(test_tuple)\n    i=0\n    r=()\n    while i<l/2:\n        r+=(test_tuple[l-1-i],)\n        i+=1\n    if l%2!=0:\n        r+=(test_tuple[l/2],)\n    return r\ndef make_rotate_left(test_tuple,n):\n    '''\n    Write a function to compute the tuple obtained by rotating the first n elements of the tuple to the left.\n    '''\n    i=0\n    l=len(test_tuple)\n    r=()\n    while i<n:\n        r+=(test_tuple[l-1-i],)\n        i+=1\n    if n>l:\n        r+=(test_tuple[0],)\n    return r\ndef make_rotate_right(test_tuple,n):\n    '''\n    Write a function to compute the tuple obtained by rotating the last n elements of the tuple to the right.\n    '''\n    i=0\n    l=len(test_tuple)\n    r=()\n    while i<l-n:\n        r+=(test_tuple[i+n],)\n        i+=1\n    if l-n>0:\n        r+=(test_tuple[0],)\n    return r\ndef make_get_average(test_tuple):\n    '''\n    Write a function to compute the average of all the elements of tuple.\n    '''\n    l=len(test_tuple)\n    r=0\n    i=0"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    test_type = type(test_tuple[0])\n    for i in range(1,len(test_tuple)):\n        if type(test_tuple[i])!= test_type:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_type = type(test_tuple[0])\n    \n    for element in test_tuple:\n        if type(element)!= first_type:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            if type(test_tuple[i]) is int:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # O(n) time\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # base case\n    if n == 1:\n        return arr[0] == x\n    # if x is the majority element\n    if arr[n//2] == x:\n        return True\n    # if x is not the majority element\n    else:\n        return is_majority(arr, n//2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Use a dictionary to track the number of occurrences of each element\n    counts = {}\n    for i in range(0, n):\n        if arr[i] in counts:\n            counts[arr[i]] += 1\n        else:\n            counts[arr[i]] = 1\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return sum(1 for a in arr if a == x) > n / 2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    start = 0\n    end = n - 1\n    mid = (start + end) // 2\n    while start <= end:\n        if arr[mid] == x:\n            return True\n        if arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n        mid = (start + end) // 2\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if n == 1:\n        return arr[0]\n    else:\n        mid = n // 2\n        l = is_majority(arr, mid, x)\n        r = is_majority(arr, n - mid, x)\n        return l if arr.count(l) > mid else r\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    i = 1\n    while i < len(arr):\n        if arr[i] == arr[i - 1]:\n            count += 1\n        else:\n            count -= 1\n        i += 1\n    if count > n // 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = left + (right-left)/2\n        if arr[mid] == x:\n            left = mid+1\n        elif arr[mid] < x:\n            left = mid+1\n        else:\n            right = mid-1\n    return right\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # x will be a num from 0 to n - 1\n    # store num of times x appears in arr\n    # if count > n/2, return true, else return false\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        if n&1:\n            count = count + 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = bin(n)\n    return s.count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # convert to binary\n    n = bin(n)\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1') \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    i = 0\n    while n:\n        if n&1:\n            i+=1\n        n=n>>1\n    return i\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(str[::2])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([s[i] for i in range(len(s)) if i%2==0])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[i] for i in range(1,len(str),2))\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[0::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([c for i,c in enumerate(str) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    final_str=''\n    for i in range(0,len(str)):\n        if i%2==0:\n            final_str=final_str+str[i]\n    return final_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i%2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[::2])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    a = str[::2]\n    return a\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if not str:\n        return ''\n    else:\n        return str[1::2]\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n    \n    \ndef smallest_of_three(a,b,c):\n    '''\n    Write a function that finds the smallest of three numbers\n    '''\n    return min_of_three(a,b,c)\n    \n    \ndef smallest_of_three_recursive(a,b,c):\n    '''\n    Write a function that finds the smallest of three numbers recursively.\n    '''\n    return min(a,b,c)\n    \n    \ndef greatest_of_three(a,b,c):\n    '''\n    Write a function to find the greatest of three numbers\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n    \n    \ndef greatest_of_three_recursive(a,b,c):\n    '''\n    Write a function that finds the greatest of three numbers recursively.\n    '''\n    return max(a,b,c)\n    \n    \ndef is_divisible_by(x,y):\n    '''\n    Write a function that checks if a number is divisible by another number.\n    '''\n    if x % y == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_divisible_by_recursive(x,y):\n    '''\n    Write a function that checks if a number is divisible by another number recursively.\n    '''\n    if x % y == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_power_of(x,y):\n    '''\n    Write a function that checks if a number is a power of another number.\n    '''\n    if x == y:\n        return True\n    else:\n        return is_power_of_recursive(x,y)\n    \n    \ndef is_power_of_recursive(x,y):\n    '''\n    Write a function that checks if a number is a power of another number recursively.\n    '''\n    if x == y:\n        return True\n    elif x < y:\n        return False\n    elif x % y == 0:\n        return True\n    else:\n        return is_power_of_recursive(x,y-1)\n    \n    \ndef is_power_of_three(x):\n    '''\n    Write a function that checks if a number is a power of three.\n    '''\n    if x > 0:\n        return is_power_of_three_recursive(x,3)\n    else:\n        return False\n    \n    \ndef is_power_of_three_recursive(x,n):\n    '''\n    Write a function that checks if a number is a power of three recursively.\n    '''\n    if x == 0:\n        return True\n    elif x % n == 0:\n        return is_power_of_three_recursive(x/n,n)\n    else:\n        return False\n    \n    \ndef is_power_of_two(x):\n    '''\n    Write a function that checks if a number is a power of two.\n    '''\n    if x > 0:\n        return is_power_of_two_recursive(x,2)\n    else:\n        return False\n    \n    \ndef is_power_of_two_recursive(x,n):\n    '''\n    Write a function that checks if a number is a power of two recursively.\n    '''\n    if x == 0:\n        return True\n    elif x % n == 0:\n        return is_power_of_two_recursive(x/n,n)\n    else:\n        return False\n    \n    \ndef is_power_of_two_iterative(x):\n    '''\n    Write a function that checks if a number is a power of two iteratively.\n    '''\n    if x > 0:\n        while x!= 1:\n            if x % 2!= 0:\n                return False\n            else:\n                x = x / 2\n        return True\n    else:\n        return False\n    \n    \ndef is_power_of_two_recursive(x):\n    '''\n    Write a function that checks if a number is a power of two recursively.\n    '''\n    if x == 0:\n        return True\n    elif x == 1:\n        return True\n    elif x % 2!= 0:\n        return False\n    else:\n        return is_power_of_two_recursive(x/2)\n    \n    \ndef is_perfect_square(x):\n    '''\n    Write a function that checks if a number is a perfect square.\n    '''\n    if x > 0:\n        return is_perfect_square_recursive(x,x)\n    else:\n        return False\n    \n    \ndef is_perfect_square_recursive(x,y):\n    '''\n    Write a function that checks if a number is a perfect square recursively.\n    '''\n    if x == 0:\n        return True\n    elif x < 0:\n        return False\n    else:\n        return is_perfect_square_recursive(x-1,x)\n    \n    \ndef is_perfect_square_iterative(x):\n    '''\n    Write a function that checks if a number is a perfect square iteratively.\n    '''\n    if x > 0:\n        while x!= 0:\n            if x % 2!= 0:\n                return False\n            else:\n                x = x / 2\n        return True\n    else:\n        return False\n    \n    \ndef is_perfect_square_recursive(x):\n    '''\n    Write a function that checks if a number is a perfect square recursively.\n    '''\n    if x == 0:\n        return True\n    elif x < 0:\n        return False\n    else:\n        return is_perfect_square_recursive(x-1,x)\n    \n    \ndef is_perfect_square_iterative(x):\n    '''\n    Write a function that checks if a number is a perfect square iteratively.\n    '''\n    if x > 0:\n        sqrt = 0\n        while x >= sqrt * sqrt:\n            sqrt = sqrt + 1\n        return x == sqrt * sqrt\n    else:\n        return False\n    \n    \ndef is_palindrome(x):\n    '''\n    Write a function that checks if a number is a palindrome.\n    '''\n    if x > 0:\n        if is_palindrome_recursive(x):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \ndef is_palindrome_recursive(x):\n    '''\n    Write a function that checks if a number is a palindrome recursively.\n    '''\n    if x < 0:\n        return False\n    else:\n        return x == reverse_recursive(x)\n    \n    \ndef is_palindrome_recursive(x):\n    '''\n    Write a function that checks if a number is a palindrome recursively.\n    '''\n    if x < 0:\n        return False\n    else:\n        return x == reverse_recursive(x)\n    \n    \ndef reverse_recursive(x):\n    '''\n    Write a function that reverses a number recursively.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return x + reverse_recursive(x-1)\n    \n    \ndef reverse_recursive(x):\n    '''\n    Write a function that reverses a number recursively.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return x + reverse_recursive(x-1)\n    \n    \ndef reverse_iterative(x):\n    '''\n    Write a function that reverses a number iteratively.\n    '''\n    reverse = 0\n    while x > 0:\n        reverse = reverse * 10 + x % 10\n        x = x / 10\n    return reverse\n    \n    \ndef reverse_iterative(x):\n    '''\n    Write a function that reverses a number iteratively.\n    '''"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,min(b,c))\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = min(a,b,c)\n    return min_num\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b) and (a < c):\n        return a\n    elif (b < a) and (b < c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c:\n        return b\n    else:\n        return c\n        \ndef find_next_min(numbers): \n    '''\n    Find the minimum number in a list and the index of that number in the list.\n    '''\n    minimum = numbers[0]\n    minimum_index = 0\n    for i in range(1, len(numbers)): \n        if numbers[i] < minimum:\n            minimum = numbers[i]\n            minimum_index = i\n    return (minimum_index, minimum)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    return max(a,b,c)\n    \ndef sum_of_three(a,b,c): \n    '''\n    Write a function to find sum of three numbers.\n    '''\n    return a+b+c\n    \ndef subtract_of_three(a,b,c): \n    '''\n    Write a function to find difference of three numbers.\n    '''\n    return a-b-c\n    \ndef multiply_of_three(a,b,c): \n    '''\n    Write a function to find product of three numbers.\n    '''\n    return a*b*c\n    \ndef divide_of_three(a,b,c): \n    '''\n    Write a function to find quotient of three numbers.\n    '''\n    return a/b/c\n    \ndef count_of_words(a,b,c): \n    '''\n    Write a function to count number of words in a string.\n    '''\n    return len(a.split()) + len(b.split()) + len(c.split())\n    \ndef change_case(a,b): \n    '''\n    Write a function to change case of a string.\n    '''\n    return a.lower() if b == 'lower' else a.upper()\n    \ndef check_anagram(a,b): \n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    return sorted(a) == sorted(b)\n    \ndef check_permutation(a,b): \n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    return sorted(a) == sorted(b)\n    \ndef check_anagram_from_user(a,b): \n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(a) == sorted(b)\n    \ndef count_vowels(a): \n    '''\n    Write a function to count number of vowels in a string.\n    '''\n    return len([i for i in a if i in 'aeiou'])\n    \ndef find_common_characters(a,b): \n    '''\n    Write a function to find common characters in two strings.\n    '''\n    return sorted(list(set(a) & set(b)))\n    \ndef list_histogram(a): \n    '''\n    Write a function to create a histogram from a list of integers.\n    '''\n    return list(map(lambda x: a.count(x),a))\n    \ndef check_pallindrome(a): \n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return a == a[::-1]\n    \ndef check_pallindrome_from_user(a): \n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return a == a[::-1]\n    \ndef is_palindrome(a): \n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return a == a[::-1]\n    \ndef is_palindrome_from_user(a): \n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return a == a[::-1]\n    \ndef is_pandigital(a): \n    '''\n    Write a function to check if a number is pandigital.\n    '''\n    return len(a) == len(set(a))\n    \ndef is_pandigital_from_user(a): \n    '''\n    Write a function to check if a number is pandigital.\n    '''\n    return len(a) == len(set(a))\n    \ndef is_prime(a): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    return a in [2,3,5,7,11,13,17,19,23,29]\n    \ndef is_prime_from_user(a): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    return a in [2,3,5,7,11,13,17,19,23,29]\n    \ndef is_prime_number(a): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    return a in [2,3,5,7,11,13,17,19,23,29]\n    \ndef is_prime_number_from_user(a): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    return a in [2,3,5,7,11,13,17,19,23,29]\n    \ndef swap_numbers(a,b): \n    '''\n    Write a function to swap the values of two integers without using temp variable.\n    '''\n    return a,b\n    \ndef swap_numbers_from_user(a,b): \n    '''\n    Write a function to swap the values of two integers without using temp variable.\n    '''\n    return a,b\n    \ndef reverse_string(a): \n    '''\n    Write a function to reverse a string.\n    '''\n    return a[::-1]\n    \ndef reverse_string_from_user(a): \n    '''\n    Write a function to reverse a string.\n    '''\n    return a[::-1]\n    \ndef reverse_number(a): \n    '''\n    Write a function to reverse a number.\n    '''\n    return int(str(a)[::-1])\n    \ndef reverse_number_from_user(a): \n    '''\n    Write a function to reverse a number.\n    '''\n    return int(str(a)[::-1])\n    \ndef reverse_number_string(a): \n    '''\n    Write a function to reverse a number string.\n    '''\n    return str(a)[::-1]\n    \ndef reverse_number_string_from_user(a): \n    '''\n    Write a function to reverse a number string.\n    '''\n    return str(a)[::-1]\n    \ndef sum_of_digit(a): \n    '''\n    Write a function to find the sum of digits in a number.\n    '''\n    return sum(map(lambda x: int(x),str(a)))\n    \ndef sum_of_digit_from_user(a): \n    '''\n    Write a function to find the sum of digits in a number.\n    '''\n    return sum(map(lambda x: int(x),str(a)))\n    \ndef factorial(a): \n    '''\n    Write a function to find the factorial of a number.\n    '''\n    return 1 if a < 0 else a*factorial(a-1)\n    \ndef factorial_from_user(a): \n    '''\n    Write a function to find the factorial of a number.\n    '''\n    return 1 if a < 0 else a*factorial(a-1)\n    \ndef reverse_string_array(a): \n    '''\n    Write a function to reverse an array of characters.\n    '''\n    return a[::-1]\n    \ndef reverse_string_array_from_user(a): \n    '''\n    Write a function to reverse an array of characters.\n    '''\n    return a[::-1]\n    \ndef string_array_to_number(a): \n    '''\n    Write a function to convert an array of characters to number.\n    '''\n    return int(a)\n    \ndef string_array_to_number_from_user(a): \n    '''\n    Write a function to convert an array of characters to number.\n    '''\n    return int(a)\n    \ndef string_array_to_char(a): \n    '''\n    Write a function to convert an array of characters to string.\n    '''\n    return ''.joi"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    a=[]\n    b=bin(n)[2:]\n    for i in range(len(b)):\n        if b[i]=='0':\n            a.append(i+1)\n    for i in range(len(a)):\n        if i>r:\n            print 'NO'\n            return\n        elif i<l:\n            print 'NO'\n            return\n    print 'YES'\n        \n        \ndef Binary_Search(a,x):\n    start=0\n    end=len(a)-1\n    while start<=end:\n        mid=start+(end-start)/2\n        if a[mid]==x:\n            return mid\n        elif a[mid]<x:\n            start=mid+1\n        else:\n            end=mid-1\n    return -1\n    \n    \ndef Find_the_occurrence_of_the_first_and_last_element_in_a_sorted_array(a,l,r):\n    '''\n    Write a python function to find the occurrence of the first and last element in a sorted array.\n    '''\n    a.sort()\n    first=0\n    last=len(a)-1\n    first=Binary_Search(a,first)+1\n    last=Binary_Search(a,last)+1\n    print first,last\n    \ndef Count_the_set_bits_in_an_integer(n):\n    '''\n    Write a python function to count the set bits in an integer.\n    '''\n    c=0\n    while n!=0:\n        n=n&(n-1)\n        c+=1\n    return c\n    \ndef Find_the_value_of_the_bit_corresponding_to_the_index_position_of_a_bit_in_a_binary_number(n,i):\n    '''\n    Write a python function to find the value of the bit corresonding to the index position of a bit in a binary number.\n    '''\n    n=n^(1<<i)\n    return n\n    \ndef Find_the_minimum_length_of_the_string_without_repeating_characters(s):\n    '''\n    Write a python function to find the minimum length of the string without repeating characters.\n    '''\n    n=len(s)\n    a=[0]*256\n    for i in range(n):\n        a[ord(s[i])]+=1\n    for i in range(n):\n        if a[ord(s[i])]==1:\n            return i\n    return n\n    \ndef is_unique_chars_in_the_string(s):\n    '''\n    Write a python function to check whether the characters in a string are unique or not.\n    '''\n    n=len(s)\n    a=[0]*256\n    for i in range(n):\n        a[ord(s[i])]+=1\n    for i in range(n):\n        if a[ord(s[i])]>1:\n            return 'NO'\n    return 'YES'\n    \ndef find_minimum_difference_between_two_distinct_numbers(a,b):\n    '''\n    Write a python function to find the minimum difference between two distinct numbers in an array of distinct integers.\n    '''\n    b.sort()\n    a.sort()\n    res=float('inf')\n    for i in range(len(a)-1):\n        res=min(res,abs(a[i]-b[i+1]))\n    return res\n    \ndef Maximum_value_of_the_bitwise_AND_of_two_numbers(n1,n2):\n    '''\n    Write a python function to find the maximum value of the bitwise AND of two numbers.\n    '''\n    n1,n2=sorted([n1,n2])\n    res=0\n    while n1:\n        n1=n1&(n1-1)\n        res+=1\n    return res\n    \ndef Maximum_value_of_the_bitwise_OR_of_two_numbers(n1,n2):\n    '''\n    Write a python function to find the maximum value of the bitwise OR of two numbers.\n    '''\n    n1,n2=sorted([n1,n2])\n    res=0\n    while n1:\n        n1=n1|(n1-1)\n        res+=1\n    return res\n    \ndef Reverse_bits_of_an_integer(n):\n    '''\n    Write a python function to reverse bits of an integer.\n    '''\n    n=n&(2**32-1)\n    res=0\n    for i in range(32):\n        res=res<<1\n        res+=n&1\n        n=n>>1\n    return res\n    \ndef Count_the_number_of_triangles_in_a_rectangle(n,m):\n    '''\n    Write a python function to count the number of triangles in a rectangle with dimensions n*m.\n    '''\n    c=0\n    for i in range(n):\n        for j in range(m):\n            a=max(i,j)\n            b=min(i+1,m-j)\n            c+=a*b\n    return c\n    \ndef Rotate_an_array_by_one_element(a):\n    '''\n    Write a python function to rotate an array by one element to the right.\n    '''\n    a.append(a[0])\n    a.pop(0)\n    return a\n    \ndef Binary_Search(a,x):\n    start=0\n    end=len(a)-1\n    while start<=end:\n        mid=start+(end-start)/2\n        if a[mid]==x:\n            return mid\n        elif a[mid]<x:\n            start=mid+1\n        else:\n            end=mid-1\n    return -1\n    \ndef Number_of_divisors_of_an_integer(n):\n    '''\n    Write a python function to count the number of divisors of a number.\n    '''\n    a=[]\n    t=int(sqrt(n))\n    for i in range(2,t+1):\n        if n%i==0:\n            a.append(i)\n            a.append(n/i)\n    return len(a)\n    \ndef Prime_or_not(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    t=int(sqrt(n))\n    for i in range(2,t+1):\n        if n%i==0:\n            return 'NO'\n    return 'YES'\n    \ndef Swap_two_elements_in_an_array(a,i,j):\n    '''\n    Write a python function to swap two elements in an array.\n    '''\n    a[i],a[j]=a[j],a[i]\n    return a\n    \ndef Print_an_array_in_reverse_order(a):\n    '''\n    Write a python function to print an array in reverse order.\n    '''\n    n=len(a)\n    for i in range(n):\n        print a[n-i-1],\n    return\n    \ndef print_array_in_ascending_order(a):\n    '''\n    Write a python function to print an array in ascending order.\n    '''\n    n=len(a)\n    for i in range(n):\n        print a[i],\n    return\n    \ndef Print_an_array_of_string_in_descending_order(a):\n    '''\n    Write a python function to print an array of strings in descending order.\n    '''\n    n=len(a)\n    for i in range(n):\n        print a[n-i-1],\n    return\n    \ndef Print_a_line_with_a_given_length(n):\n    '''\n    Write a python function to print a line with a given length.\n    '''\n    print '-'*n\n    return\n    \ndef print_array_of_string_in_alphabetical_order(a):\n    '''\n    Write a python function to print an array of strings in alphabetical order"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1 << (r - l + 1)) - 1\n    return (n & mask) == 0\n    \ndef all_Bits_Set_In_The_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1 << (r - l + 1)) - 1\n    return n & mask == 0\n    \ndef count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits in a given integer.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n = n >> 1\n    return count\n    \ndef count_Set_Bits_In_The_Range(n,l,r):\n    '''\n    Write a python function to count the number of set bits in the given range.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Set_Bits_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to count the number of set bits in the given range.\n    '''\n    mask = (1 << (r - l + 1)) - 1\n    return bin(mask & n).count(\"1\")\n    \ndef isPowerOfTwo(n):\n    '''\n    Write a python function to check whether a given number is a power of 2 or not.\n    '''\n    return all_Bits_Set_In_The_Given_Range(n,1,32)\n    \ndef isPowerOfTwo_In_The_Range(n,l,r):\n    '''\n    Write a python function to check whether a given number is a power of 2 in the given range.\n    '''\n    return all_Bits_Set_In_The_Given_Range(n,l,r)\n    \ndef count_Bits_In_The_Range(n,l,r):\n    '''\n    Write a python function to count the number of bits set in the given range.\n    '''\n    mask = (1 << (r - l + 1)) - 1\n    return bin(mask & n).count(\"1\")\n    \ndef count_Bits_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to count the number of bits set in the given range.\n    '''\n    mask = (1 << (r - l + 1)) - 1\n    return n & mask\n    \ndef count_Bits_In_The_Range(n,l,r):\n    '''\n    Write a python function to count the number of bits set in the given range.\n    '''\n    mask = (1 << (r - l + 1)) - 1\n    return n & mask\n    \ndef count_Bits_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to count the number of bits set in the given range.\n    '''\n    mask = (1 << (r - l + 1)) - 1\n    return bin(mask & n).count(\"1\")\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a python function to count the number of lines in the given string.\n    '''\n    count = 0\n    for line in str1.split('\\n'):\n        count += 1\n    return count\n    \ndef count_Number_Of_Lines_In_The_Input(str1):\n    '''\n    Write a pytho"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #print \"Entering the all_Bits_Set_In_The_Given_Range Function\"\n    #print \"n = \", n\n    #print \"l = \", l\n    #print \"r = \", r\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #print \"l = \", bin(l)[2:].zfill(n)\n    #print \"n = \", bin(n)[2:].zfill(n)\n    #print \"r = \", bin(r)[2:].zfill(n)\n    #prin"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    num = list(reversed(bin(n)))\n    for i in range(l,r+1):\n        if num[i] == '0':\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #n = 10, l = 0, r = 7\n    return all(pow(2,x)&n > l and pow(2,x)&n < r for x in range(1,8))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bits = 0b0000011111\n    while (bits & n)!= 0:\n        if bits & r>=l and bits & r<=r:\n            return False\n        bits = bits << 1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bin_n = bin(n)\n    bin_l = bin(l)\n    bin_r = bin(r)\n    bin_n = list(bin_n)\n    bin_l = list(bin_l)\n    bin_r = list(bin_r)\n    bin_n = [int(x) for x in bin_n[2:]]\n    bin_l = [int(x) for x in bin_l[2:]]\n    bin_r = [int(x) for x in bin_r[2:]]\n    n = [int(x) for x in bin_n]\n    l = [int(x) for x in bin_l]\n    r = [int(x) for x in bin_r]\n    for x in range(len(n)):\n        if l[x] <= n[x] <= r[x]:\n            pass\n        else:\n            return False\n    return True\n    \nprint(all_Bits_Set_In_The_Given_Range(6,0,3))\nprint(all_Bits_Set_In_The_Given_Range(6,1,3))\nprint(all_Bits_Set_In_The_Given_Range(6,2,3))\nprint(all_Bits_Set_In_The_Given_Range(6,0,4))\nprint(all_Bits_Set_In_The_Given_Range(6,1,4))\nprint(all_Bits_Set_In_The_Given_Range(6,2,4))\nprint(all_Bits_Set_In_The_Given_Range(6,3,4))\nprint(all_Bits_Set_In_The_Given_Range(6,4,4))\nprint(all_Bits_Set_In_The_Given_Range(6,5,4))\nprint(all_Bits_Set_In_The_Given_Range(6,0,5))\nprint(all_Bits_Set_In_The_Given_Range(6,1,5))\nprint(all_Bits_Set_In_The_Given_Range(6,2,5))\nprint(all_Bits_Set_In_The_Given_Range(6,3,5))\nprint(all_Bits_Set_In_The_Given_Range(6,4,5))\nprint(all_Bits_Set_In_The_Given_Range(6,5,5))\nprint(all_Bits_Set_In_The_Given_Range(7,0,3))\nprint(all_Bits_Set_In_The_Given_Range(7,1,3))\nprint(all_Bits_Set_In_The_Given_Range(7,2,3))\nprint(all_Bits_Set_In_The_Given_Range(7,3,3))\nprint(all_Bits_Set_In_The_Given_Range(7,4,3))\nprint(all_Bits_Set_In_The_Given_Range(7,5,3))\nprint(all_Bits_Set_In_The_Given_Range(7,0,4))\nprint(all_Bits_Set_In_The_Given_Range(7,1,4))\nprint(all_Bits_Set_In_The_Given_Range(7,2,4))\nprint(all_Bits_Set_In_The_Given_Range(7,3,4))\nprint(all_Bits_Set_In_The_Given_Range(7,4,4))\nprint(all_Bits_Set_In_The_Given_Range(7,5,4))\nprint(all_Bits_Set_In_The_Given_Range(7,6,4))\nprint(all_Bits_Set_In_The_Given_Range(7,7,4))\nprint(all_Bits_Set_In_The_Given_Range(7,8,4))\nprint(all_Bits_Set_In_The_Given_Range(7,9,4))\nprint(all_Bits_Set_In_The_Given_Range(7,10,4))\nprint(all_Bits_Set_In_The_Given_Range(7,11,4))\nprint(all_Bits_Set_In_The_Given_Range(7,12,4))\nprint(all_Bits_Set_In_The_Given_Range(7,13,4))\nprint(all_Bits_Set_In_The_Given_Range(7,14,4))\nprint(all_Bits_Set_In_The_Given_Range(7,15,4))\nprint(all_Bits_Set_In_The_Given_Range(7,16,4))\nprint(all_Bits_Set_In_The_Given_Range(7,17,4))\nprint(all_Bits_Set_In_The_Given_Range(7,18,4))\nprint(all_Bits_Set_In_The_Given_Range(7,19,4))\nprint(all_Bits_Set_In_The_Given_Range(7,20,4))\nprint(all_Bits_Set_In_The_Given_Range(7,21,4))\nprint(all_Bits_Set_In_The_Given_Range(7,22,4))\nprint(all_Bits_Set_In_The_Given_Range(7,23,4))\nprint(all_Bits_Set_In_The_Given_Range(7,24,4))\nprint(all_Bits_Set_In_The_Given_Range(7,25,4))\nprint(all_Bits_Set_In_The_Given_Range(7,26,4))\nprint(all_Bits_Set_In_The_Given_Range(7,27,4))\nprint(all_Bits_Set_In_The_Given_Range(7,28,4))\nprint(all_Bits_Set_In_The_Given_Range(7,29,4))\nprint(all_Bits_Set_In_The_Given_Range(7,30,4))\nprint(all_Bits_Set_In_The_Given_Range(7,31,4))\nprint(all_Bits_Set_In_The_Given_Range(7,32,4))\nprint(all_Bits_Set_In_The_Given_Range(7,33,4))\nprint(all_Bits_Set_In_The_Given_Range(7,34,4))\nprint(all_Bits_Set_In_The_Given_Range(7,35,4))\nprint(all_Bits_Set_In_The_Given_Range(7,36,4))\nprint(all_Bits_Set_In_The_Given_Range(7,37,4))\nprint(all_Bits_Set_In_The_Given_Range(7,38,4))\nprint(all_Bits_Set_In_The_Given_Range(7,39,4))\nprint(all_Bits_Set_In_The_Given_Range(7,40,4))\nprint(all_Bits_Set_In_The_Given_Range(7,41,4))\nprint(all_Bits_Set_In_The_Given_Range(7,42,4))\nprint(all_Bits_Set_In_The_Given_Range(7,43,4))\nprint(all_Bits_Set_In_The_Given_Range(7,44,4))\nprint(all_Bits_Set_In_The_Given_Range(7,45,4))\nprint(all_Bits_Set_In_The_Given_Range(7,46,4))\nprint(all_Bits_Set_In_The_Given_Range(7,47,4))\nprint(all_Bits_Set_In_The_Given_Range(7,48,4))\nprint(all_Bits_Set_In_The_Given_Range(7,49,4))\nprint(all_Bits_Set_In_The_Given_Range(7,50,4))\nprint(all_Bits_Set_In_The_Given_Range(7,51,4))\nprint(all_Bits_Set_In_The_Given_Range(7"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # your code here\n    return (n & (2**r - 1) == 0) and (n & (2**l - 1) == 0)\n    \n    \n    \n    \ndef all_Bits_Set_In_The_Given_Range_v2(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # your code here\n    while (r > l):\n        if (n & (2**(r-1) -1)!= 0):\n            return False\n        r -= 1\n    return True\n    \n    \n    \ndef all_Bits_Set_In_The_Given_Range_v3(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # your code here\n    while (r > l):\n        if (n & (2**(r-1) -1)!= 0):\n            return False\n        r -= 1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (r < 0) or (l > n):  \n        return False \n    return not(any(map(lambda x: x & 1, range(l,r+1)))) \n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not (reduce(lambda x,y: x|(1<<y),range(l,r+1),0))\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0, n):\n        for j in range(i+1, len(arr)):\n            if arr[i] < 0 and arr[j] > 0:\n                arr[i], arr[j] = arr[j], arr[i]\n            elif arr[i] >= 0 and arr[j] < 0:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr[:n] = sorted(arr[:n])\n    arr[:n] = sorted(arr[:n], reverse=True)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    for i in range(n):\n        if arr[i] < 0:\n            result.append(arr[i])\n    for j in range(n):\n        if arr[j] > 0:\n            result.append(arr[j])\n    return result\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    new_arr = []\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        elif i > 0:\n            positive.append(i)\n    new_arr.extend(negative[::-1])\n    new_arr.extend(positive)\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    for i in range(n):\n        if arr[i] < 0:\n            arr.insert(i, 0)\n            del arr[n]\n            break\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            new_arr.append(arr[i])\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            new_arr.append(arr[i])\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr.insert(0, arr.pop(i))\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # get negative indices\n    neg_indices = [i for i in range(len(arr)) if arr[i] < 0]\n    # re-arrange array\n    return [-arr[i] if i in neg_indices else arr[i] for i in range(len(arr))]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n < 1:\n        return arr\n    \n    # store negative and positive elements in separate arrays\n    pos = []\n    neg = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    \n    # sort the negative and positive arrays\n    neg.sort()\n    pos.sort()\n    \n    # take n elements from the sorted array and put them into the original array\n    i = 0\n    j = 0\n    while i < n:\n        if j < len(pos) and j < n:\n            arr[i] = pos[j]\n            i += 1\n            j += 1\n        elif i < len(neg) and i < n:\n            arr[i] = neg[j]\n            i += 1\n            j += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positives = []\n    negatives = []\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    list1 = []\n    for i in str1:\n        if i =='':\n            list1.append(char)\n        else:\n            list1.append(i)\n    new_string = ''.join(list1)\n    return new_string\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1.find(char) == -1:\n        return str1\n    else:\n        return str1.replace(char,'_')\ndef check_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, returns True if the string contains the character and False otherwise.\n    '''\n    if str1.find(char)!= -1:\n        return True\n    else:\n        return False\ndef is_upper(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all upper case and False otherwise.\n    '''\n    if str1.isupper() == True:\n        return True\n    else:\n        return False\ndef is_lower(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all lower case and False otherwise.\n    '''\n    if str1.islower() == True:\n        return True\n    else:\n        return False\ndef is_title(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is title case and False otherwise.\n    '''\n    if str1.istitle() == True:\n        return True\n    else:\n        return False\ndef is_digit(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is a digit and False otherwise.\n    '''\n    if str1.isdigit() == True:\n        return True\n    else:\n        return False\ndef is_alphabet(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is an alphabet and False otherwise.\n    '''\n    if str1.isalpha() == True:\n        return True\n    else:\n        return False\ndef is_punctuation(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is a punctuation and False otherwise.\n    '''\n    if str1 in ',.;:!?':\n        return True\n    else:\n        return False\ndef is_separator(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is a separator and False otherwise.\n    '''\n    if str1 in '()[]{}':\n        return True\n    else:\n        return False\ndef is_symbol(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is a symbol and False otherwise.\n    '''\n    if str1 in '~`!@#$%^&*()_+=':\n        return True\n    else:\n        return False\ndef is_space(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is a space and False otherwise.\n    '''\n    if str1 in'':\n        return True\n    else:\n        return False\ndef is_other(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is neither alphabet, digit, punctuation, separator, or symbol and False otherwise.\n    '''\n    if is_alphabet(str1) == False and is_digit(str1) == False and is_punctuation(str1) == False and is_separator(str1) == False and is_symbol(str1) == False:\n        return True\n    else:\n        return False\ndef all_upper(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all upper and False otherwise.\n    '''\n    if is_upper(str1) == True:\n        return True\n    else:\n        return False\ndef all_lower(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all lower and False otherwise.\n    '''\n    if is_lower(str1) == True:\n        return True\n    else:\n        return False\ndef all_title(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is title case and False otherwise.\n    '''\n    if is_title(str1) == True:\n        return True\n    else:\n        return False\ndef all_digit(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all digit and False otherwise.\n    '''\n    if is_digit(str1) == True:\n        return True\n    else:\n        return False\ndef all_alphabet(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all alphabet and False otherwise.\n    '''\n    if is_alphabet(str1) == True:\n        return True\n    else:\n        return False\ndef all_punctuation(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all punctuation and False otherwise.\n    '''\n    if is_punctuation(str1) == True:\n        return True\n    else:\n        return False\ndef all_separator(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all separator and False otherwise.\n    '''\n    if is_separator(str1) == True:\n        return True\n    else:\n        return False\ndef all_symbol(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all symbol and False otherwise.\n    '''\n    if is_symbol(str1) == True:\n        return True\n    else:\n        return False\ndef all_space(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all space and False otherwise.\n    '''\n    if is_space(str1) == True:\n        return True\n    else:\n        return False\ndef is_all_upper(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all upper and False otherwise.\n    '''\n    if all_upper(str1) == True:\n        return True\n    else:\n        return False\ndef is_all_lower(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all lower and False otherwise.\n    '''\n    if all_lower(str1) == True:\n        return True\n    else:\n        return False\ndef is_all_title(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is title case and False otherwise.\n    '''\n    if all_title(str1) == True:\n        return True\n    else:\n        return False\ndef is_all_digit(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all digit and False otherwise.\n    '''\n    if all_digit(str1) == True:\n        return True\n    else:\n        return False\ndef is_all_alphabet(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all alphabet and False otherwise.\n    '''\n    if all_alphabet(str1) == True:\n        return True\n    else:\n        return False\ndef is_all_punctuation(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all punctuation and False otherwise.\n    '''\n    if all_punctuation(str1) == True:\n        return True\n    else:\n        return False\ndef is_all_separator(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all separator and False otherwise.\n    '''\n    if all_separator(str1) == True:\n        return True\n    else:\n        return False\ndef is_all_symbol(str1):\n    '''\n    Write a function that takes in a string, and returns True if the string is all symbol and False otherwise.\n    '''\n    if all_symbol(str1) == True:\n        return True\n    else:\n        return False\ndef is_all_space(str1):\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # str1 ='   spaces   '\n    # char = '%'\n    # str1 = str1.strip()\n    # str1 = str1.replace(' ','%')\n    # print(str1)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == \" \":\n            new_str += char\n        else:\n            new_str += char\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    newstr=str1.replace(' ','')\n    return newstr\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(char if str1[i] =='' else str1[i] for i in range(len(str1)))\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # base case\n    if len(str1) <= 1:\n        return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1=='':\n        return ''\n    elif str1[0]==' ':\n        return char+replace_blank(str1[1:],char)\n    else:\n        return str1[0]+replace_blank(str1[1:],char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1 == '':\n        return char\n    elif str1[0] =='':\n        return char + replace_blank(str1[1:],char)\n    else:\n        return str1[0] + replace_blank(str1[1:],char)\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(\" \",char)\n    return new_string\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n,len(list1)):\n        if(list1[i]>heap[0]):\n            heapq.heappop(heap)\n            heapq.heappush(heap,list1[i])\n    return heap\ndef smallest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n,len(list1)):\n        if(list1[i]<heap[0]):\n            heapq.heappop(heap)\n            heapq.heappush(heap,list1[i])\n    return heap\ndef max_comb(list1):\n    '''\n    Write a function that takes in a list and returns a list whose i-th element is the maximum value that can be formed by the i-th and (i+1)-th elements in the original list. \n    For example, if the input list is [4,6,2,3,9,5], the function should return [9,6,9], because 9 = max(4,6) and 6 = max(2,3).\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(max(list1[i],list1[i+1]))\n    return list2\ndef f_index(list1):\n    '''\n    Write a function that takes in a list and returns a list in which each index contains the length of the longest subsequence in the list that can be made using the index as a starting point. For example, if the input list is [1,2,3,4], then the function should return [1,2,2,2].\n    '''\n    index_list = []\n    for i in range(len(list1)):\n        index_list.append(1)\n    for i in range(len(list1)):\n        for j in range(i):\n            if(list1[i]>list1[j] and index_list[i]<index_list[j]+1):\n                index_list[i] = index_list[j]+1\n    maxi = index_list[0]\n    index = 0\n    for i in range(len(index_list)):\n        if(index_list[i]>maxi):\n            maxi = index_list[i]\n            index = i\n    return index_list\ndef mult_mat(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list whose i-th element is the number of times list2 appears in list1 starting at index i. For example, if the input lists are [0,1,2,0,1,2,0,1,2], [0,3,4] and [2,1,1,1,1,2,3,1,1,1,1], then the function should return [2,4,1,3,1,1,1,1,1,1,1].\n    '''\n    list3 = []\n    for i in range(len(list1)):\n        list3.append(0)\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if(list1[i]==list2[j]):\n                list3[i]+=1\n    return list3\ndef n_in_list(list1,n):\n    '''\n    Write a function that takes in a list and returns True if the number of elements in the list is equal to n, and False otherwise.\n    '''\n    for i in range(len(list1)):\n        if(list1[i]==n):\n            return True\n    return False\ndef num_list(list1,n):\n    '''\n    Write a function that takes in a list and returns a list whose i-th element is the number of times the number i appears in the list. For example, if the input list is [0,1,2,0,1,2,0,1,2], the function should return [4,2,1].\n    '''\n    num_list = []\n    for i in range(n+1):\n        num_list.append(0)\n    for i in range(len(list1)):\n        num_list[list1[i]]+=1\n    return num_list\ndef n_sum(list1,n):\n    '''\n    Write a function that takes in a list and returns a list whose i-th element is the sum of the first i elements of the list. For example, if the input list is [1,2,3,4,5,6,7], the function should return [1+2+3,2+3+4,3+4+5,4+5+6,5+6+7].\n    '''\n    list2 = []\n    for i in range(n+1):\n        list2.append(0)\n    for i in range(len(list1)):\n        list2[i] = list1[i]\n        for j in range(i):\n            list2[i]+=list1[j]\n    return list2\ndef fibonacci(n):\n    '''\n    Write a function that takes in a non-negative integer n and returns the n-th Fibonacci number.\n    '''\n    if(n==0):\n        return 0\n    elif(n==1):\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef fibonacci_list(n):\n    '''\n    Write a function that takes in a non-negative integer n and returns the list of Fibonacci numbers less than or equal to the n-th Fibonacci number.\n    '''\n    if(n==0):\n        return 0\n    elif(n==1):\n        return 1\n    else:\n        fib_list = []\n        fib_list.append(0)\n        fib_list.append(1)\n        for i in range(2,n+1):\n            fib_list.append(fib_list[i-1]+fib_list[i-2])\n        return fib_list\ndef fib_list_p(n):\n    '''\n    Write a function that takes in a non-negative integer n and returns the list of Fibonacci numbers less than or equal to the n-th Fibonacci number.\n    '''\n    fib_list = []\n    for i in range(n+1):\n        fib_list.append(0)\n    fib_list[0] = 0\n    fib_list[1] = 1\n    for i in range(2,n+1):\n        fib_list[i] = fib_list[i-1]+fib_list[i-2]\n    return fib_list\ndef n_sum_p(list1,n):\n    '''\n    Write a function that takes in a list and returns the sum of the first n elements of the list.\n    '''\n    if(n==0):\n        return 0\n    else:\n        return n_sum_p(list1[1:],n-1)+list1[0]\ndef n_sum_2(list1,n):\n    '''\n    Write a function that takes in a list and returns the sum of the first n elements of the list.\n    '''\n    if(n==0):\n        return 0\n    else:\n        return n_sum_2(list1[1:],n-1)+list1[0]\ndef max_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the maximum element of the original list.\n    '''\n    maxi = list1[0]\n    for i in range(len(list1)):\n        if(list1[i]>maxi):\n            maxi = list1[i]\n    return maxi\ndef n_sum_3(list1,n):\n    '''\n    Write a function that takes in a list and returns th"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # if n is less than the length of the list, just return the list.\n    if n < len(list1):\n        return list1[:n]\n    else:\n        return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        heapq.heappush(list2,list1[i])\n    for j in range(n,len(list1)):\n        if list1[j]>list2[0]:\n            heapq.heappop(list2)\n            heapq.heappush(list2,list1[j])\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #return list(reversed(sorted(list1,key=lambda x: x[1])))\n    return heapq.nlargest(n,list1,key=lambda x: x[1])\ndef sum_arr(n):\n    '''\n    Create a function that returns the sum of all the elements of a list\n    '''\n    return sum(n)\ndef cntr(n):\n    '''\n    Write a function that counts the number of zeroes in a list\n    '''\n    return n.count(0)\ndef cntr_list(list1):\n    '''\n    Write a function that returns the count of the number of 0s in a list\n    '''\n    return list1.count(0)\ndef cntr_map(map1):\n    '''\n    Write a function that returns the count of the number of 0s in a map\n    '''\n    return len(map1) - map1.count(0)\ndef cntr_str(str1):\n    '''\n    Write a function that returns the count of the number of 0s in a string\n    '''\n    return str1.count(\"0\")\ndef cntr_dict(dict1):\n    '''\n    Write a function that returns the count of the number of 0s in a dictionary\n    '''\n    return dict1.values().count(0)\ndef cntr_set(set1):\n    '''\n    Write a function that returns the count of the number of 0s in a set\n    '''\n    return set1.count(0)\ndef cntr_tuple(tup1):\n    '''\n    Write a function that returns the count of the number of 0s in a tuple\n    '''\n    return tup1.count(0)\ndef add_to_list(n):\n    '''\n    Create a function that adds a number to each item in a list\n    '''\n    return [x+n for x in list1]\ndef add_to_map(n):\n    '''\n    Create a function that adds a number to each item in a map\n    '''\n    return {x+n for x in map1}\ndef add_to_str(n):\n    '''\n    Create a function that adds a number to each item in a string\n    '''\n    return str1 + n\ndef add_to_set(n):\n    '''\n    Create a function that adds a number to each item in a set\n    '''\n    return {x+n for x in set1}\ndef add_to_dict(n):\n    '''\n    Create a function that adds a number to each item in a dictionary\n    '''\n    return {x+n:y+n for x,y in dict1.items()}\ndef add_to_tuple(n):\n    '''\n    Create a function that adds a number to each item in a tuple\n    '''\n    return tuple(x+n for x in tup1)\ndef remove_from_list(n):\n    '''\n    Create a function that removes a number from each item in a list\n    '''\n    return [x-n for x in list1]\ndef remove_from_map(n):\n    '''\n    Create a function that removes a number from each item in a map\n    '''\n    return {x-n for x in map1}\ndef remove_from_str(n):\n    '''\n    Create a function that removes a number from each item in a string\n    '''\n    return str1.replace(n,\"\")\ndef remove_from_set(n):\n    '''\n    Create a function that removes a number from each item in a set\n    '''\n    return {x-n for x in set1}\ndef remove_from_dict(n):\n    '''\n    Create a function that removes a number from each item in a dictionary\n    '''\n    return {x-n:y-n for x,y in dict1.items()}\ndef remove_from_tuple(n):\n    '''\n    Create a function that removes a number from each item in a tuple\n    '''\n    return tuple(x-n for x in tup1)\ndef cntr_str(str1):\n    '''\n    Create a function that counts the number of characters in a string\n    '''\n    return str1.count(\"0\")\ndef cntr_map(map1):\n    '''\n    Create a function that counts the number of characters in a map\n    '''\n    return len(map1) - map1.count(0)\ndef cntr_tuple(tup1):\n    '''\n    Create a function that counts the number of characters in a tuple\n    '''\n    return tup1.count(0)\ndef add_to_dict(n):\n    '''\n    Create a function that adds a number to each item in a dictionary\n    '''\n    return {x+n:y+n for x,y in dict1.items()}\ndef add_to_list(n):\n    '''\n    Create a function that adds a number to each item in a list\n    '''\n    return [x+n for x in list1]\ndef add_to_str(n):\n    '''\n    Create a function that adds a number to each item in a string\n    '''\n    return str1 + n\ndef add_to_set(n):\n    '''\n    Create a function that adds a number to each item in a set\n    '''\n    return {x+n for x in set1}\ndef cntr_tuple(tup1):\n    '''\n    Create a function that counts the number of characters in a tuple\n    '''\n    return tup1.count(0)\ndef cntr_list(list1):\n    '''\n    Create a function that counts the number of characters in a list\n    '''\n    return list1.count(0)\ndef cntr_dict(dict1):\n    '''\n    Create a function that counts the number of characters in a dictionary\n    '''\n    return dict1.values().count(0)\ndef cntr_set(set1):\n    '''\n    Create a function that counts the number of characters in a set\n    '''\n    return set1.count(0)\ndef cntr_str(str1):\n    '''\n    Create a function that counts the number of characters in a string\n    '''\n    return str1.count(\"0\")\ndef cntr_map(map1):\n    '''\n    Create a function that counts the number of characters in a map\n    '''\n    return len(map1) - map1.count(0)\ndef cntr_list(list1):\n    '''\n    Create a function that counts the number of characters in a list\n    '''\n    return list1.count(\"0\")\ndef cntr_set(set1):\n    '''\n    Create a function that counts the number of characters in a set\n    '''\n    return set1.count(0)\ndef cntr_tuple(tup1):\n    '''\n    Create a function that counts the number of characters in a tuple\n    '''\n    return tup1.count(0)\ndef cntr_map(map1):\n    '''\n    Create a function that counts the number of characters in a map\n    '''\n    return len(map1) - map1.count(0)\ndef cntr_list(list1):\n    '''\n    Create a function that counts the number of characters in a list\n    '''\n    return list1.count(0)\ndef cntr_set(set1):\n    '''\n    Create a function that counts the number of characters in a set\n    '''\n    return set1.count(0)\ndef cntr_str(str1):\n    '''\n    Create a function that counts the number of characters in a string\n    '''\n    return str1.count(\"0\")\ndef cntr_dict(dict1):\n    '''\n    Create a function that counts the number of characters in a dictionary\n    '''\n    return dict1.values().count(0)\ndef cntr_list(list1):\n    '''\n    Create a function that counts the number of characters in a list\n    '''\n    return list1.count(\"0\")\ndef cntr_set(set1):\n    '''"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #using heapq\n    heap = []\n    heapq.heapify(heap)\n    if n>len(list1):\n        print \"No item left in the list\"\n        return\n    else:\n        for i in range(n):\n            heapq.heappush(heap,list1[i])\n        while len(heap)>1:\n            heapq.heappop(heap)\n            heapq.heappop(heap)\n        return heap\ndef larg_rnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    #using heapq\n    heap = []\n    heapq.heapify(heap)\n    if n>len(list1):\n        print \"No item left in the list\"\n        return\n    else:\n        for i in range(n):\n            heapq.heappush(heap,list1[i])\n        while len(heap)>1:\n            heapq.heappop(heap)\n            heapq.heappop(heap)\n        return heap\ndef main():\n    #test\n    #test1\n    #test2\n    #test3\n    #test4\n    #test5\n    #test6\n    #test7\n    #test8\n    #test9\n    #test10\n    #test11\n    #test12\n    #test13\n    #test14\n    #test15\n    #test16\n    #test17\n    #test18\n    #test19\n    #test20\n    #test21\n    #test22\n    #test23\n    #test24\n    #test25\n    #test26\n    #test27\n    #test28\n    #test29\n    #test30\n    #test31\n    #test32\n    #test33\n    #test34\n    #test35\n    #test36\n    #test37\n    #test38\n    #test39\n    #test40\n    #test41\n    #test42\n    #test43\n    #test44\n    #test45\n    #test46\n    #test47\n    #test48\n    #test49\n    #test50\n    #test51\n    #test52\n    #test53\n    #test54\n    #test55\n    #test56\n    #test57\n    #test58\n    #test59\n    #test60\n    #test61\n    #test62\n    #test63\n    #test64\n    #test65\n    #test66\n    #test67\n    #test68\n    #test69\n    #test70\n    #test71\n    #test72\n    #test73\n    #test74\n    #test75\n    #test76\n    #test77\n    #test78\n    #test79\n    #test80\n    #test81\n    #test82\n    #test83\n    #test84\n    #test85\n    #test86\n    #test87\n    #test88\n    #test89\n    #test90\n    #test91\n    #test92\n    #test93\n    #test94\n    #test95\n    #test96\n    #test97\n    #test98\n    #test99\n    #test100\n    #test101\n    #test102\n    #test103\n    #test104\n    #test105\n    #test106\n    #test107\n    #test108\n    #test109\n    #test110\n    #test111\n    #test112\n    #test113\n    #test114\n    #test115\n    #test116\n    #test117\n    #test118\n    #test119\n    #test120\n    #test121\n    #test122\n    #test123\n    #test124\n    #test125\n    #test126\n    #test127\n    #test128\n    #test129\n    #test130\n    #test131\n    #test132\n    #test133\n    #test134\n    #test135\n    #test136\n    #test137\n    #test138\n    #test139\n    #test140\n    #test141\n    #test142\n    #test143\n    #test144\n    #test145\n    #test146\n    #test147\n    #test148\n    #test149\n    #test150\n    #test151\n    #test152\n    #test153\n    #test154\n    #test155\n    #test156\n    #test157\n    #test158\n    #test159\n    #test160\n    #test161\n    #test162\n    #test163\n    #test164\n    #test165\n    #test166\n    #test167\n    #test168\n    #test169\n    #test170\n    #test171\n    #test172\n    #test173\n    #test174\n    #test175\n    #test176\n    #test177\n    #test178\n    #test179\n    #test180\n    #test181\n    #test182\n    #test183\n    #test184\n    #test185\n    #test186\n    #test187\n    #test188\n    #test189\n    #test190\n    #test191\n    #test192\n    #test193\n    #test194\n    #test195\n    #test196\n    #test197\n    #test198\n    #test199\n    #test200\n    #test201\n    #test202\n    #test203\n    #test204\n    #test205\n    #test206\n    #test207\n    #test208\n    #test209\n    #test210\n    #test211\n    #test212\n    #test213\n    #test214\n    #test215\n    #test216\n    #test217\n    #test218\n    #test219\n    #test220\n    #test221\n    #test222\n    #test223\n    #test224\n    #test225\n    #test226\n    #test227\n    #test228\n    #test229\n    #test230\n    #test231\n    #test232\n    #test233\n    #test234\n    #test235\n    #test236\n    #test237\n    #test238\n    #test239\n    #test240\n    #test241\n    #test242\n    #test243\n    #test244\n    #test245\n    #test246\n    #test247\n    #test248\n    #test249\n    #test250\n    #test251\n    #test252\n    #test253\n    #test254\n    #test255\n    #test256\n    #test257\n    #test258\n    #test259\n    #test260\n    #test261\n    #test262\n    #test263\n    #test264\n    #test265\n    #test266\n    #test267\n    #test268\n    #test269\n    #test270\n    #test271\n    #test272\n    #test273\n    #test274\n    #test275\n    #test276\n    #test277\n    #test278\n    #test279\n    #test280\n    #test281\n    #test282\n    #test283\n    #test284\n    #test285\n    #test286\n    #test287\n    #test288\n    #test289\n    #test290\n    #test291\n    #test292\n    #test293\n    #test294\n    #test295\n    #test296\n    #test297\n    #test298\n    #test299\n    #test300\n    #test301\n    #test302\n    #test303\n    #test304\n    #test305\n    #test306\n    #test307\n    #test308\n    #test309\n    #test310\n    #test311\n    #test312\n    #test313\n    #test314\n    #test315\n    #test316\n    #test317\n    #test318\n    #test319\n    #test320\n    #test321\n    #test322\n    #test323\n    #test324\n    #test325\n    #test326\n    #test327\n    #test328\n    #test329\n    #test330\n    #test331\n    #test332\n    #test333\n    #test334\n    #test335\n    #test336\n    #test337\n    #test338\n    #test339\n    #test340"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    '''\n    sort the list\n    list.sort(reverse=True)\n    return list[0:n]\n    '''\n    list1.sort(reverse=True)\n    return list1[0:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for i in list1:\n        heapq.heappush(max_heap,i)\n    print max_heap\n    return heapq.nlargest(n,max_heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l = []\n    for i in range(n):\n        l.append(list1[i])\n    l.sort(reverse=True)\n    return l\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    return heapq.nlargest(n,list1)\ndef smal_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    return heapq.nsmallest(n,list1)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.14\n    return pi*r**2+2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s=pi*(r**2)*(h/2.0)\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    r = float(r)\n    h = float(h)\n    \n    #defines\n    lateral_surface_cylinder = 2 * math.pi * r * h\n    return lateral_surface_cylinder\n    "
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Inputs:\n    #r - radius of cylinder\n    #h - height of cylinder\n    #Returns:\n    #Surface area of cylinder\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # Code here\n    print(r*r*2*h)\n    \n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    pi2 = 2*pi\n    return pi2*(r**2) + pi2*(r**2)*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*r**2+2*math.pi*r*h\ndef lateralsuface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid.\n    '''\n    return 2*l*w+2*w*h+2*l*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = math.pi\n    return (pi*(r**2)+pi*r*h)/3\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.1415926535897931\n    return pi*(r**2)*h\n    \ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pi=3.1415926535897931\n    return 4*pi*r**2\n    \ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    pi=3.1415926535897931\n    return pi*r*(r+h)\n    \ndef lateral_surface_area(radius,height,shape):\n    '''\n    Write a function to find the lateral surface area of a shape.\n    '''\n    if shape=='cylinder':\n        return lateralsuface_cylinder(radius,height)\n    elif shape=='sphere':\n        return lateralsuface_sphere(radius)\n    elif shape=='cone':\n        return lateralsuface_cone(radius,height)\n    else:\n        print 'Enter a valid shape'\n        return False\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return pow(l,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    # Hint: use the formula for the volume of a cuboid.\n    return l**3\n    \n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n    assert type(l) is float or type(l) is int\n    assert l > 0\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if type(l)!= int:\n        raise TypeError('The side length must be an integer!')\n    if l < 0:\n        raise ValueError('The side length must be positive!')\n    return l*l*l\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n    \ndef test_even_bit_set_number():\n    assert even_bit_set_number(2) == 3\n    assert even_bit_set_number(4) == 8\n    assert even_bit_set_number(8) == 0\n    assert even_bit_set_number(9) == 1\n    assert even_bit_set_number(10) == 0\n    assert even_bit_set_number(20) == 3\n    assert even_bit_set_number(21) == 4\n    assert even_bit_set_number(22) == 8\n    assert even_bit_set_number(23) == 9\n    assert even_bit_set_number(24) == 10\n    assert even_bit_set_number(25) == 1\n    assert even_bit_set_number(26) == 0\n    assert even_bit_set_number(27) == 0\n    assert even_bit_set_number(28) == 3\n    assert even_bit_set_number(29) == 4\n    assert even_bit_set_number(30) == 8\n    assert even_bit_set_number(31) == 9\n    assert even_bit_set_number(32) == 10\n    assert even_bit_set_number(33) == 1\n    assert even_bit_set_number(34) == 0\n    assert even_bit_set_number(35) == 0\n    assert even_bit_set_number(36) == 3\n    assert even_bit_set_number(37) == 4\n    assert even_bit_set_number(38) == 8\n    assert even_bit_set_number(39) == 9\n    assert even_bit_set_number(40) == 10\n    assert even_bit_set_number(41) == 1\n    assert even_bit_set_number(42) == 0\n    assert even_bit_set_number(43) == 0\n    assert even_bit_set_number(44) == 3\n    assert even_bit_set_number(45) == 4\n    assert even_bit_set_number(46) == 8\n    assert even_bit_set_number(47) == 9\n    assert even_bit_set_number(48) == 10\n    assert even_bit_set_number(49) == 1\n    assert even_bit_set_number(50) == 0\n    assert even_bit_set_number(51) == 0\n    assert even_bit_set_number(52) == 3\n    assert even_bit_set_number(53) == 4\n    assert even_bit_set_number(54) == 8\n    assert even_bit_set_number(55) == 9\n    assert even_bit_set_number(56) == 10\n    assert even_bit_set_number(57) == 1\n    assert even_bit_set_number(58) == 0\n    assert even_bit_set_number(59) == 0\n    assert even_bit_set_number(60) == 3\n    assert even_bit_set_number(61) == 4\n    assert even_bit_set_number(62) == 8\n    assert even_bit_set_number(63) == 9\n    assert even_bit_set_number(64) == 10\n    assert even_bit_set_number(65) == 1\n    assert even_bit_set_number(66) == 0\n    assert even_bit_set_number(67) == 0\n    assert even_bit_set_number(68) == 3\n    assert even_bit_set_number(69) == 4\n    assert even_bit_set_number(70) == 8\n    assert even_bit_set_number(71) == 9\n    assert even_bit_set_number(72) == 10\n    assert even_bit_set_number(73) == 1\n    assert even_bit_set_number(74) == 0\n    assert even_bit_set_number(75) == 0\n    assert even_bit_set_number(76) == 3\n    assert even_bit_set_number(77) == 4\n    assert even_bit_set_number(78) == 8\n    assert even_bit_set_number(79) == 9\n    assert even_bit_set_number(80) == 10\n    assert even_bit_set_number(81) == 1\n    assert even_bit_set_number(82) == 0\n    assert even_bit_set_number(83) == 0\n    assert even_bit_set_number(84) == 3\n    assert even_bit_set_number(85) == 4\n    assert even_bit_set_number(86) == 8\n    assert even_bit_set_number(87) == 9\n    assert even_bit_set_number(88) == 10\n    assert even_bit_set_number(89) == 1\n    assert even_bit_set_number(90) == 0\n    assert even_bit_set_number(91) == 0\n    assert even_bit_set_number(92) == 3\n    assert even_bit_set_number(93) == 4\n    assert even_bit_set_number(94) == 8\n    assert even_bit_set_number(95) == 9\n    assert even_bit_set_number(96) == 10\n    assert even_bit_set_number(97) == 1\n    assert even_bit_set_number(98) == 0\n    assert even_bit_set_number(99) == 0\n    assert even_bit_set_number(100) == 3\n    assert even_bit_set_number(101) == 4\n    assert even_bit_set_number(102) == 8\n    assert even_bit_set_number(103) == 9\n    assert even_bit_set_number(104) == 10\n    assert even_bit_set_number(105) == 1\n    assert even_bit_set_number(106) == 0\n    assert even_bit_set_number(107) == 0\n    assert even_bit_set_number(108) == 3\n    assert even_bit_set_number(109) == 4\n    assert even_bit_set_number(110) == 8\n    assert even_bit_set_number(111) == 9\n    assert even_bit_set_number(112) == 10\n    assert even_bit_set_number(113) == 1\n    assert even_bit_set_number(114) == 0\n    assert even_bit_set_number(115) == 0\n    assert even_bit_set_number(116) == 3\n    assert even_bit_set_number(117) == 4\n    assert even_bit_set_number(118) == 8\n    assert even_bit_set_number(119) == 9\n    assert even_bit_set_number(120) == 10\n    assert even_bit_set_number(121) == 1\n    assert even_bit_set_number(122) == 0\n    assert even_bit_set_number(123) == 0\n    assert even_bit_set_number(124) == 3\n    assert even_bit_set_number(125) == 4\n    assert even_bit_set_number(126) == 8\n    assert even_bit_set_number(127) == 9\n    assert even_bit_set_number(128) == 10\n    assert even_bit_set_number(129) == 1\n    assert even_bit_set_number(130) == 0\n    assert even_bit_set_number(131) == 0\n    assert even_bit_set_number(132) == 3\n    assert even_bit_set_number(133) == 4\n    assert even_bit_set_number(134) == 8\n    assert even_bit_set_number(135) == 9\n    assert even_bit_set_number(136) == 10\n    assert even_bit_set_number(137) == 1\n    assert even_bit_set_number(138) == 0\n    assert even_bit_set_number(139) == 0\n    assert even_bit_set_number(140) == 3\n    assert even_bit_set_number(141) == 4\n    assert even_bit_set_number(142) == 8\n    assert even_bit_set_number(143) == 9\n    assert even_bit_set_number(144) == 10\n    assert even_bit_set_number(145) == 1\n    assert even_bit_set_number(146) == 0\n    assert even_bit"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # function to set all even bits of a number\n    # n is the number which is to be checked for even bits\n    # the function returns the number of bits set to 1 in the number\n    # it uses bitwise operators (&, |) to set all the even bits\n    # it uses % to check if the number is zero or not\n    \n    # convert the number into binary\n    bin_num = bin(n) \n    # print bin_num\n    # create a new empty list to store the number of bits set to 1 in the number\n    n_bits_set = [] \n    # traverse the binary number \n    for j in range(2, len(bin_num)): \n        # check if the bit is set \n        if bin_num[j] == '1': \n            # add one to the list \n            n_bits_set.append(1) \n        # else \n        else: \n            # do nothing \n            pass\n    # check if the number is 0 or not \n    if n == 0: \n        # the number is 0 so the number of bits set to 1 in the number is 0\n        return 0\n    else: \n        # check if the number is odd or even \n        if n % 2 == 0: \n            # the number is even \n            # return the total number of bits set to 1 in the number\n            return len(n_bits_set) \n        else: \n            # the number is odd \n            # return the total number of bits set to 1 in the number\n            return len(n_bits_set) + 1 \n        "
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n & 0xAAAAAAAA) | 0x000001;\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n&(n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bin_number = bin(n)[2:]\n    list_of_ones = []\n    for digit in bin_number:\n        if digit == '1':\n            list_of_ones.append(1)\n        else:\n            list_of_ones.append(0)\n    even_bits = 0\n    for element in list_of_ones:\n        if element % 2 == 0:\n            even_bits += 1\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0x5555555555555555\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n = n ^ 0xAAAAAAAA\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = int(n)\n    return n ^ (n >> 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #d = dict(Counter(test_list))\n    #return d\n    dict_occurences = {}\n    for item in test_list:\n        if item in dict_occurences:\n            dict_occurences[item] += 1\n        else:\n            dict_occurences[item] = 1\n    return dict_occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurrences = Counter()\n    for item in test_list:\n        occurrences[item] += 1\n    return occurrences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\ndef common_elements(list_1, list_2):\n    '''\n    Write a function that takes in two lists and returns a list of elements that appear in both lists.\n    '''\n    #list_1_set = set(list_1)\n    #list_2_set = set(list_2)\n    #return list(list_1_set.intersection(list_2_set))\n    return list(set(list_1) & set(list_2))\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # for i in test_list:\n    #     print i\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = Counter(test_list)\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    ret_dict = {}\n    for item in test_list:\n        ret_dict[item] = ret_dict.get(item, 0) + 1\n    return ret_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter(test_list)\n    return d\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(str[i:j+1]) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i,len(str)): \n            if str[i:j+1]!= \"\": \n                count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring = ''\n    count = 0\n    for i in range(len(str)):\n        substring = str[i:i+1]\n        if substring!= '':\n            count += 1\n    return count\n    \nprint number_of_substrings('12345')\nprint number_of_substrings('a')\nprint number_of_substrings('12345abc')\nprint number_of_substrings('12345abcde')\nprint number_of_substrings('qwertyuiop')\nprint number_of_substrings('xyzzz')\nprint number_of_substrings('xyzzzabc')\nprint number_of_substrings('a')\nprint number_of_substrings('')\nprint number_of_substrings('abc')\nprint number_of_substrings('abcd')\nprint number_of_substrings('abcdef')\nprint number_of_substrings('abcdefgh')\nprint number_of_substrings('abcdefghij')\nprint number_of_substrings('abcdefghijkl')\nprint number_of_substrings('abcdefghijklmn')\nprint number_of_substrings('abcdefghijklmnop')\nprint number_of_substrings('abcdefghijklmnopqrstuvwxyz')\nprint number_of_substrings('abcdefghijklmnopqrstuvwxyzabcd')\nprint number_of_substrings('abcdefghijklmnopqrstuvwxyzabcde')\nprint number_of_substrings('abcdefghijklmnopqrstuvwxyzabcdef')\nprint number_of_substrings('abcdefghijklmnopqrstuvwxyzabcdefgh')\nprint number_of_substrings('abcdefghijklmnopqrstuvwxyzabcdefghij')\nprint number_of_substrings('abcdefghijklmnopqrstuvwxyzabcdefghijkl')\nprint number_of_substrings('abcdefghijklmnopqrstuvwxyzabcdefghijklmn')\nprint number_of_substrings('abcdefghijklmnopqrstuvwxyzabcdefghijklmnop')\nprint number_of_substrings('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)):\n        for j in range(i,len(str)):\n            if str[i:j]!= '':\n                count +=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring_count = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            substring = str[i:j]\n            if substring:\n                substring_count += 1\n    return substring_count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    i=0\n    str_len = len(str)\n    if str_len < 1:\n        return 0\n    else:\n        while i < str_len:\n            if str[i]!='':\n                if i+1 < str_len:\n                    if str[i+1] =='':\n                        i += 1\n                    else:\n                        i += 1\n                        continue\n                else:\n                    i += 1\n                    continue\n            else:\n                if i+2 < str_len:\n                    if str[i+1] =='' and str[i+2] =='':\n                        i += 2\n                    else:\n                        i += 1\n                        continue\n                else:\n                    i += 1\n                    continue\n            i += 1\n        return i\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    i=0\n    while i<len(str):\n        if str[i]=='a':\n            if i+1<len(str):\n                if str[i+1]=='a':\n                    i+=2\n                    continue\n            count+=1\n        i+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                num += 1\n    return num\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)): \n        for j in range(i, len(str)): \n            if str[i]!='': \n                count = count + 1\n            else: \n                break\n    print count \n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < n:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m-n, n)\n    \ndef test_get_total_number_of_sequences():\n    assert get_total_number_of_sequences(5,0) == 1\n    assert get_total_number_of_sequences(5,1) == 1\n    assert get_total_number_of_sequences(5,2) == 1\n    assert get_total_number_of_sequences(5,3) == 2\n    assert get_total_number_of_sequences(5,4) == 4\n    assert get_total_number_of_sequences(5,5) == 4\n    assert get_total_number_of_sequences(5,6) == 5\n    assert get_total_number_of_sequences(10,5) == 5\n    assert get_total_number_of_sequences(10,6) == 10\n    assert get_total_number_of_sequences(10,7) == 10\n    assert get_total_number_of_sequences(10,8) == 9\n    assert get_total_number_of_sequences(10,9) == 9\n    assert get_total_number_of_sequences(10,10) == 9\n    \ndef find_all_non_negative_numbers_in_the_series(series):\n    '''\n    Write a function that takes in a non-empty array of arbitrary integer numbers and returns a sorted array of all numbers that can be found in the array. The returned array should contain all numbers that are not negative numbers.\n    '''\n    result = []\n    for x in series:\n        if x >= 0:\n            result.append(x)\n    return sorted(result)\n    \ndef test_find_all_non_negative_numbers_in_the_series():\n    assert find_all_non_negative_numbers_in_the_series([]) == []\n    assert find_all_non_negative_numbers_in_the_series([3, 4, -1, 9, 10]) == [-1, 3, 4, 9, 10]\n    assert find_all_non_negative_numbers_in_the_series([-10, -9, -1, 0]) == [-10, -9, -1, 0]\n    assert find_all_non_negative_numbers_in_the_series([-1, -2, 0, 1, 2, 3, 4, 5]) == [-1, -2, 0, 1, 2, 3, 4, 5]\n    assert find_all_non_negative_numbers_in_the_series([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\n    assert find_all_non_negative_numbers_in_the_series([5, 4, 3, 2, 1, 0]) == [-1, 0, 1, 2, 3, 4, 5]\n    assert find_all_non_negative_numbers_in_the_series([0, -1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1, 0]\n    assert find_all_non_negative_numbers_in_the_series([1, 2, 3, 4, 5, 6, -7, -8, -9]) == [-7, -8, -9, 1, 2, 3, 4, 5, 6]\n    assert find_all_non_negative_numbers_in_the_series([1, 2, 3, 4, -5, -6, -7, -8, -9]) == [-9, -8, -7, -6, -5, 1, 2, 3, 4]\n    \ndef find_the_best_of_three_numbers(numbers):\n    '''\n    Write a function that takes in an array of arbitrary numbers and returns the smallest number in the array. In the case that the array is empty, the function should return None.\n    '''\n    min_number = None\n    for number in numbers:\n        if min_number == None or number < min_number:\n            min_number = number\n    return min_number\n    \ndef test_find_the_best_of_three_numbers():\n    assert find_the_best_of_three_numbers([]) == None\n    assert find_the_best_of_three_numbers([1, 2, 3]) == 1\n    assert find_the_best_of_three_numbers([3, 2, 1]) == 1\n    assert find_the_best_of_three_numbers([1, 2, 3, 4, 5, 6, 7]) == 1\n    assert find_the_best_of_three_numbers([3, 4, 5, 6, 7, 8, 9, 10]) == 1\n    assert find_the_best_of_three_numbers([3, 4, -1, 5, 6, 7, 8, 9, 10]) == -1\n    assert find_the_best_of_three_numbers([-1, -2, -3, -4, -5]) == -1\n    assert find_the_best_of_three_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -1\n    assert find_the_best_of_three_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]) == -1\n    assert find_the_best_of_three_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1\n    assert find_the_best_of_three_numbers([1, 2, 3, 4, -5, -6, -7, -8, -9, -10, -11]) == -1\n    assert find_the_best_of_three_numbers([1, 2, 3, 4, -5, -6, -7, -8, -9, -10, -11, -12]) == -1\n    assert find_the_best_of_three_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == -1\n    assert find_the_best_of_three_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]) == -1\n    assert find_the_best_of_three_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100]) == -1\n    \ndef find_the_best_of_five_numbers(numbers):\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (m - 1) * n\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m*(m+1)/2**n\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Initialize the output\n    total = 0\n    #Calculate the total possible sequences\n    total = m * (n + 1)\n    #Return the result\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return factorial(n)/(factorial(n-m)*factorial(m))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0:\n        return 1\n    if n == 0:\n        return 0\n    return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-1,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert m>=1 and n>=1, \"Inputs to function must be positive integers\"\n    #Return m^n-1 for the case that m is 1.\n    if m == 1:\n        return n-1\n    elif n == 1:\n        return 1\n    else:\n        return m**n-1\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    '''\n    base case \n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return n\n    if m < n:\n        return 0\n    if n > 0:\n        return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m, n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(math.factorial(n)/(math.factorial(n-2)*math.factorial(2)))\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n    \ndef replace_list_soln(list1,list2):\n    '''\n    Solution:\n    Copy the second list to a new list and then pop the last element of the first list to get the replacement value.\n    '''\n    newlist = list2[:]\n    newlist.pop()\n    list1[-1] = newlist\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return [list1[i] if i < len(list1) - 1 else list2[i - len(list1)] for i in range(len(list1))]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print list1[:-1]\n    print list2\n    return list1[:-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    for i in range(len(list2)):\n        new_list.append(list2[i])\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n    "
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n    "
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        return list1 + list2\n    else:\n        return list1[:len(list1)-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num_char = 0\n    for char in str1:\n        num_char += 1\n    return num_char\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        return 1 + count_charac(str1[1:])\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = 0\n    for i in str1:\n        total_charac += 1\n    return total_charac\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    l = len(str1)\n    if l == 0:\n        return 0\n    else:\n        return 1 + count_charac(str1[1:])\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total=0\n    for i in str1:\n        total=total+1\n    return total\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = 0\n    for c in str1:\n        total_charac += 1\n    return total_charac\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    counter = 0\n    for i in str1:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Return the next perfect square greater than N.\n    N = int(N)\n    if (N <= 0): \n        return -1\n    if (N == 1): \n        return N\n    else: \n        root = int(N ** 0.5)\n        if ((root + 1) ** 2 == N): \n            return (root + 1) ** 2\n        else: \n            return -1\ndef count_distinct_permutations(n): \n    '''\n    Write a python function to find the count of distinct permutations of an integer.\n    '''\n    # A number is said to be a permutation of an integer n if it contains the same digits in\n    # sorted order. For example, 1234 and 4321 are permutations of 1234.\n    # Write a python function to count the number of distinct permutations of an integer.\n    # The count can be very large so print it modulo 10^9+7.\n    def factorial(n): \n        if (n <= 1): \n            return 1\n        else: \n            return n * factorial(n - 1)\n    n = int(n)\n    ans = 1\n    for i in range(1, n + 1): \n        ans = (ans * (n + 1 - i)) / i\n    return int(ans % (1000000007))\ndef is_Pandigital(N):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    A number is said to be pandigital if all the digits are present in the number in sorted order.\n    For example, 12345 is pandigital and 4321 is not.\n    '''\n    # Return True if all the digits in the number are present in the number in sorted order.\n    # Otherwise return False.\n    N = str(N)\n    for i in range(1, len(N)): \n        if (N[i] < N[i - 1]): \n            return False\n    return True\ndef count_longest_series(A): \n    '''\n    Write a python function to find the count of longest increasing series of a given array.\n    A series is considered as a sequence of integers A[i], A[i + 1],..., A[j] where j >= i and\n    A[i] < A[j] where j >= i.\n    For example, [1, 2, 3, 4] is a series.\n    Write a python function to count the number of longest increasing series of a given array.\n    The count can be very large so print it modulo 10^9+7.\n    '''\n    # Find the index of the last non-increasing number.\n    N = len(A)\n    # Find the index of the last non-increasing number.\n    lastNonInc = A.index(max(A[0:N]))\n    # For all the numbers after the index of the last non-increasing number,\n    # count the number of longest series.\n    ans = 1\n    for i in range(lastNonInc + 1, N): \n        if (A[i] > A[lastNonInc]): \n            ans += 1\n    return int(ans % (1000000007))\ndef longest_substring_with_k_distinct(s, k): \n    '''\n    Write a python function to find the length of the longest substring of s that has exactly k distinct characters.\n    '''\n    # Find the index of the first non-repeating character.\n    N = len(s)\n    if (k == 0): \n        return 0\n    index = -1\n    for i in range(N): \n        if (s[i] in s[i + 1 : N]): \n            continue\n        else: \n            index = i\n            break\n    # If there are no repeating characters, there is no substring with exactly k distinct characters.\n    if (index == -1): \n        return 0\n    ans = 1\n    # For all the characters after the index of the first non-repeating character,\n    # count the length of the substring.\n    for i in range(index + 1, N): \n        if (s[i] in s[index + 1 : N]): \n            ans += 1\n    return ans\ndef num_triangles(k): \n    '''\n    Write a python function to find the number of triangles for which the perimeter is a perfect square.\n    A perfect square is a number that is equal to the square of a number. For example, 1, 4, 9, 16, 25 etc.\n    The perimeter of a triangle is the sum of the lengths of the sides.\n    For example, the perimeter of the triangle with sides 1, 2, 3 is equal to 5.\n    The length of each side of a triangle is equal to the square of the hypotenuse of the corresponding triangle.\n    The hypotenuse is the side opposite the longest side of the triangle. For example, the length of side 2 of the triangle is the square root of 4.\n    For the perimeter of a triangle, there are three types of triangles: equilateral, isosceles and scalene.\n    Write a python function to count the number of triangles for which the perimeter is a perfect square.\n    The count can be very large so print it modulo 10^9+7.\n    '''\n    # A number is said to be a perfect square if it is a perfect square of an integer.\n    # Find the index of the last non-perfect square.\n    N = len(k)\n    lastNonSquare = k.index(int(math.sqrt(k[N - 1])))\n    # For all the numbers after the index of the last non-perfect square,\n    # count the number of triangles.\n    ans = 0\n    for i in range(lastNonSquare + 1, N): \n        if (int(math.sqrt(k[i])) ** 2 == k[i]): \n            ans += 1\n    return int(ans % (1000000007))\ndef compare_strings(s1, s2): \n    '''\n    Write a python function to compare two strings.\n    Two strings are said to be equal if both their characters are the same.\n    For example, \"GeeksforGeeks\" and \"GeekforGeeks\" are equal because all the characters are equal.\n    However, \"GeeksforGeeks\" and \"GeeksforGeeksforGeeks\" are not equal because the characters are not same.\n    '''\n    # A string is said to be a permutation of another string if the characters of the first string can be rearranged to form the second string.\n    # For example, \"GeeksforGeeks\" and \"GeeksforGeeks\" are permutations of each other because all the characters of the first string can be rearranged to form the second string.\n    # If all the characters are same, the strings are equal.\n    # Return True if the strings are permutations of each other. Otherwise return False.\n    def is_Permutation(s1, s2): \n        # If both the strings have the same length, then check for all the characters in the strings.\n        if (len(s1)!= len(s2)): \n            return False\n        for i in range(len(s1)): \n            if (s1[i] not in s2): \n                return False\n        return True\n    # Check if the strings are equal.\n    if (s1 == s2): \n        return True\n    # If not equal, then check if the strings are permutations.\n    if (is_Permutation(s1, s2)): \n        return True\n    return False\ndef partition_array(arr, k): \n    '''\n    Write a python function to partition an array into k subarrays with equal sums.\n    You should try to do it in time complexity less than O(nk).\n    Write a python program to partition an array into k subarrays with equal sums.\n    The sum of each array should be equal.\n    For example, if the array is [1, 3, 2, 4, 5, 6, 7, 8] and k = 4, there are two subarrays of equal sums.\n    The first subarray is [1, 3, 2, 4], the second subarray is [5, 6, 7, 8].\n    '''\n    # Initialize the sum of each subarray.\n    currSum = sum(arr[0 : k])\n    if (currSum == 0): \n        return 0\n    # Find the index of the last element with a sum equal to zero.\n    lastZero = arr.index(currSum)\n    "
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if int(math.sqrt(N)) ** 2 == N: \n        return int(math.sqrt(N)) ** 2\n    else: \n        return int(math.sqrt(N)) ** 2 + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt=math.sqrt(N)\n    if sqrt%1==0:\n        return (sqrt+1)**2\n    else:\n        return (sqrt+1)**2+1\ndef countPrime(n):\n    '''\n    Write a python function to count the prime numbers upto a given number.\n    '''\n    if n<2:\n        return 0\n    count=1\n    for i in range(2,n+1):\n        if i%2==0:\n            continue\n        count=count+1\n        for j in range(3,int(i**0.5)+1,2):\n            if i%j==0:\n                break\n        else:\n            print(i)\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.ceil(math.sqrt(N)))\n    return n*n\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    while x < N:\n        if (x*x == N):\n            return x*x\n        x += 1\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = N\n    while (root * root <= N):\n        root = root + 1\n    return root\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return N**2\n    \ndef Next_Bigger(a):\n    '''\n    Write a python function to find the smallest number which is bigger than a given number\n    '''\n    for i in range(a, a+10):\n        if i > a:\n            return i\n    \ndef Next_Smaller(a):\n    '''\n    Write a python function to find the next smallest number which is smaller than a given number\n    '''\n    for i in range(a, a-10, -1):\n        if i < a:\n            return i\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the next integer that is exactly divisible by the given number\n    return int(math.ceil(math.sqrt(N)))**2\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    seq = [arr[0]]\n    max = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > seq[len(seq) - 1]:\n            seq.append(arr[i])\n        else:\n            seq[seq.index(min(seq))] = arr[i]\n        max = max if max > sum(seq) else sum(seq)\n    return max\n        \nprint max_sum([-1,3,8,12,4,10,5,7])\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    ans = -1\n    for i in range(n):\n        s1,s2,t = i+1,i+2,i-1\n        while s1<n and arr[s1]>=arr[s1-1]: s1+=1\n        while s2<n and arr[s2]>=arr[s2-1]: s2+=1\n        while t>=0 and arr[t]>=arr[t+1]: t-=1\n        ans = max(ans, arr[i] + arr[s1-1] + arr[s2-1] + arr[t+1])\n    return ans\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    max_ending_here = max_so_far = arr[0]\n    start = end = 0\n    for i in range(1, len(arr)): \n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        if max_ending_here < max_so_far:\n            start = i - 1\n            max_so_far = max_ending_here\n        else:\n            max_ending_here = max_ending_here\n    print(max_ending_here, max_so_far, start, end)\n    return max_so_far, start, end\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return sum(arr)\n    \n    left, right = [0 for _ in range(len(arr))], [0 for _ in range(len(arr))]\n    left[0] = arr[0]\n    right[len(arr) - 1] = arr[len(arr) - 1]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    low = 0\n    high = len(arr) - 1\n    low_sum = arr[0]\n    high_sum = arr[-1]\n    max_sum = low_sum\n    while low <= high:\n        if low_sum < high_sum:\n            low_sum += arr[low]\n            low += 1\n        else:\n            high_sum += arr[high]\n            high -= 1\n        if high_sum > max_sum:\n            max_sum = high_sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    #start from the second element of the array\n    for i in range(1, len(arr)):\n        #check if the current element is greater than the max ending here\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n            \n        #check if the max ending here so far is greater than the max so far so far\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    \n    return max_so_far\n    \n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    '''\n    # the best case is to first reverse the array and get the max sum of the reversed array\n    # then the max sum of the original array and the reversed array is the best case\n    # to find the max sum, we need to figure out the max sum for the ascending and descending sequence separately.\n    # Hence we are going to keep the elements in ascending and descending order, and update the global max_sum everytime we get a new max_sum\n    # O(N) space\n    '''\n    arr.reverse()\n    ascending_max_sum = 0\n    descending_max_sum = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum, temp_sum = 0, 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            temp_sum += arr[i-1]\n            max_sum = max(max_sum, temp_sum)\n        else:\n            temp_sum = 0\n    return max(max_sum, arr[0])\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    low = 0\n    high = len(arr)-1\n    i = len(arr)//2\n    left = arr[0:i]\n    right = arr[i:]\n    left_sum = max_sum(left)\n    right_sum = max_sum(right)\n    max_sum = 0\n    while i >= 1:\n        if left_sum > right_sum:\n            max_sum = max(max_sum, left_sum)\n            i -= 1\n            left = arr[0:i]\n            left_sum = max_sum(left)\n        else:\n            max_sum = max(max_sum, right_sum)\n            i -= 1\n            right = arr[i:]\n            right_sum = max_sum(right)\n    max_sum = max(max_sum, left_sum+right_sum)\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    '''\n    Babylonian method: (n + 2) * n / 2\n    '''\n    if number == 1:\n        return 1\n    elif number == 0:\n        return 0\n    else:\n        n = number\n        x = 1\n        while n > x:\n            x = n\n            n = (n + 2) * n / 2\n        return x\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        while abs(guess**2 - number) > 0.001:\n            guess = (guess + number/guess)/2\n        return guess\n    \ndef hyperbolic_squareroot(number):\n    '''\n    Write a function for computing square roots using the hyperbolic method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        while abs(guess**2 - number) > 0.001:\n            guess = (guess + number/guess)/2\n        return guess\n    \ndef riemann_squareroot(number):\n    '''\n    Write a function for computing square roots using the Riemann method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        while abs(guess**2 - number) > 0.001:\n            guess = (guess + number/guess)/2\n        return guess\n    \ndef iterative_squareroot(number, tol = 0.001, max_iterations = 1000):\n    '''\n    Write a function for computing square roots using the iterative method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        for i in range(0, max_iterations):\n            guess = (guess + number/guess)/2\n            if abs(guess**2 - number) <= tol:\n                break\n        return guess\n    \ndef newton_squareroot(number, max_iterations = 1000):\n    '''\n    Write a function for computing square roots using the Newton method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        for i in range(0, max_iterations):\n            guess = (guess + number/guess)/2\n        return guess\n    \ndef secant_squareroot(number, max_iterations = 1000):\n    '''\n    Write a function for computing square roots using the secant method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        for i in range(0, max_iterations):\n            guess = (guess + number/guess)/2\n        return guess\n    \ndef wilson_squareroot(number, tol = 0.001, max_iterations = 1000):\n    '''\n    Write a function for computing square roots using the Wilson method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        for i in range(0, max_iterations):\n            guess = (guess + number/guess)/2\n            if abs(guess**2 - number) <= tol:\n                break\n        return guess\n    \ndef quadratic_squareroot(number, tol = 0.001, max_iterations = 1000):\n    '''\n    Write a function for computing square roots using the quadratic method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        for i in range(0, max_iterations):\n            guess = (guess + number/guess)/2\n            guess2 = (guess + number/guess)/2\n            if abs(guess2**2 - number) <= tol:\n                break\n        return guess\n    \ndef brent_squareroot(number, tol = 0.001, max_iterations = 1000):\n    '''\n    Write a function for computing square roots using the Brent method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        for i in range(0, max_iterations):\n            guess = (guess + number/guess)/2\n            if abs(guess**2 - number) <= tol:\n                break\n        return guess\n    \ndef secant_bisection_squareroot(number, max_iterations = 1000):\n    '''\n    Write a function for computing square roots using the secant method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        for i in range(0, max_iterations):\n            guess = (guess + number/guess)/2\n            if abs(guess**2 - number) <= 0.001:\n                break\n        return guess\n    \ndef bisection_squareroot(number, max_iterations = 1000):\n    '''\n    Write a function for computing square roots using the bisection method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        for i in range(0, max_iterations):\n            guess = (guess + number/guess)/2\n            if abs(guess**2 - number) <= 0.001:\n                break\n        return guess\n    \ndef false_position_squareroot(number, max_iterations = 1000):\n    '''\n    Write a function for computing square roots using the false position method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        for i in range(0, max_iterations):\n            guess = (guess + number/guess)/2\n            if abs(guess**2 - number) <= 0.001:\n                break\n        return guess\n    \ndef fixed_point_squareroot(number, max_iterations = 1000):\n    '''\n    Write a function for computing square roots using the fixed point method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loop\n        for i in range(0, max_iterations):\n            guess = (guess + number/guess)/2\n            if abs(guess**2 - number) <= 0.001:\n                break\n        return guess\n    \ndef newton_squareroot_iteration(number, tol = 0.001, max_iterations = 1000):\n    '''\n    Write a function for computing square roots using the Newton method.\n    '''\n    \n    # Setup\n    if number < 0:\n        return 'Error: cannot compute square root of a negative number'\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        \n        # Main loo"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    for i in range(2, number):\n        if number % i == 0:\n            return i\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    # Your code here.\n    while abs(guess ** 2 - number) > 0.000001:\n        guess = (guess + (number / guess)) / 2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    guess = 0\n    increment = 0.001\n    previous_guess = 0\n    while True:\n        guess = (guess + number / guess) / 2\n        if abs(guess - previous_guess) <= increment:\n            break\n        previous_guess = guess\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = 0\n    increment = 1\n    while increment * increment < number:\n        if (number - increment * increment) <= increment:\n            break\n        increment += 1\n    if increment * increment!= number:\n        increment -= 1\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if not isinstance(number, int):\n        raise ValueError('The number must be an integer')\n    if number < 0:\n        raise ValueError('The number must be positive')\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    r0 = 0\n    r1 = 1\n    r2 = 2\n    r3 = 3\n    while r3 <= number:\n        if r3 == number:\n            return r3\n        r0 = r1\n        r1 = r2\n        r2 = r3\n        r3 = r2 + r1\n        r3 = r3 // r0\n    return r3 - 1"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #x = float(number)\n    #g = lambda x: (x + 1/x) / 2\n    g = lambda x: (1 + x) / (2*x)\n    for i in range(0, 50):\n        x = g(x)\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    #print 'guess:', guess\n    if number < 0:\n        # if the number is negative, return none\n        return None\n    elif guess == 1 or guess == 0:\n        # if the guess is 1 or 0, return the guess\n        return guess\n    else:\n        # if the guess is not 1 or 0, compute the square of the guess\n        return babylonian_squareroot(number/guess) * guess\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    m = len(str)\n    lps = [[0 for x in range(n)] for x in range(m)]\n    for i in range(n):\n        lps[i][i] = 1\n    for cl in range(2, m+1):\n        for i in range(m-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                lps[i][j] = 2\n            elif str[i] == str[j]:\n                lps[i][j] = lps[i+1][j-1] + 2\n            else:\n                lps[i][j] = max(lps[i][j-1], lps[i+1][j])\n    return lps[0][m-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    arr = [[0 for x in xrange(n)] for x in xrange(n)]\n    max_len = 0\n    for i in xrange(n):\n        arr[i][i] = 1\n        max_len = 1\n    for i in xrange(n-1):\n        if str[i] == str[i+1]:\n            arr[i][i+1] = 2\n            max_len = 2\n    for k in xrange(3, n+1):\n        for i in xrange(n-k+1):\n            j = i+k-1\n            if str[i] == str[j] and arr[i+1][j-1] > 1:\n                arr[i][j] = arr[i+1][j-1] + 2\n                max_len = max(max_len, arr[i][j])\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    table = [[0 for x in range(n)] for x in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return len(lps_recursive(str))\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    t = [[0 for j in range(n)] for i in range(n)]\n    longest = 1\n    start = 0\n    for i in range(n):\n        t[i][i] = 1\n    for i in range(n-1):\n        if (str[i] == str[i+1]):\n            t[i][i+1] = 2\n            longest = 2\n            start = i\n    for sl in range(3, n+1):\n        for i in range(n-sl+1):\n            j = i+sl-1\n            if (str[i] == str[j] and sl == 3):\n                t[i][j] = 3\n                if (longest < 3):\n                    longest = 3\n                    start = i\n            elif (str[i] == str[j]):\n                t[i][j] = t[i+1][j-1] + 2\n                if (t[i][j] > longest):\n                    longest = t[i][j]\n                    start = i\n    return str[start:start+longest]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def longest_palindrome(str):\n        if len(str) < 1:\n            return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    dp = [[0]*n for _ in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for i in xrange(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    for i in xrange(n-3, -1, -1):\n        for j in xrange(i+2, n):\n            if str[i] == str[j] and dp[i+1][j-1] == 2:\n                dp[i][j] = 3\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        l[i][i] = 1\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            l[i][i+1] = 2\n    for i in range(n-3,-1,-1):\n        for j in range(i+2,n):\n            if str[i] == str[j] and l[i+1][j-1] >= l[i][j-1]:\n                l[i][j] = l[i+1][j-1] + 2\n            else:\n                l[i][j] = max(l[i][j-1],l[i+1][j])\n    return l[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    matrix = [[0 for x in range(len(str))] for y in range(len(str))]\n    for i in range(len(str)):\n        matrix[i][i] = 1\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            matrix[i][i+1] = 2\n        else:\n            matrix[i][i+1] = 1\n    for gap in range(2,len(str)):\n        for i in range(len(str) - gap):\n            j = i + gap\n            matrix[i][j] = max(matrix[i+1][j-1], matrix[i+1][j], matrix[i][j-1])\n    return matrix[0][len(str)-1]\n    \n    \ndef lps2(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    matrix = [[0 for x in range(len(str))] for y in range(len(str))]\n    for i in range(len(str)):\n        matrix[i][i] = 1\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            matrix[i][i+1] = 2\n        else:\n            matrix[i][i+1] = 1\n    for gap in range(3,len(str)):\n        for i in range(len(str) - gap):\n            j = i + gap\n            if str[i] == str[j] and matrix[i+1][j-1] == gap-2:\n                matrix[i][j] = gap + 2\n            elif str[i] == str[j]:\n                matrix[i][j] = matrix[i+1][j-1] + 2\n            else:\n                matrix[i][j] = max(matrix[i+1][j], matrix[i][j-1])\n    return matrix[0][len(str)-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    count = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n): \n        count[i][i] = 1\n    for startIndex in range(n-1, -1, -1):\n        for endIndex in range(startIndex+1, n):\n            if str[startIndex] == str[endIndex]:\n                count[startIndex][endIndex] = count[startIndex+1][endIndex-1] + 2\n            else:\n                count[startIndex][endIndex] = max(count[startIndex+1][endIndex], count[startIndex][endIndex-1])\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 1\n    for i in range(1, n):\n        total *= i\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Your code here\n    if n == 1:\n        return 1\n    return n / 1 + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + 1 / n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # your code here\n    return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n    \ndef factorial(n):\n    '''\n    Write a function that takes in an integer n and returns the nth factorial.\n    '''\n    return 1 if n < 1 else n * factorial(n-1)\n    \ndef fibonacci(n):\n    '''\n    Write a function that takes in an integer n and returns the nth fibonacci number.\n    '''\n    if n < 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef lucas(n):\n    '''\n    Write a function that takes in an integer n and returns the nth number in the Lucas sequence.\n    '''\n    return sum_series(n, 'lucas', 4)\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef exp_n_x(b, n, x):\n    '''\n    Write a function that takes in three parameters: a base, an exponent, and a number, \n    and returns the exponential of the number by raising it to the exponent by the base.\n    '''\n    return b**n * x\n    \ndef exp_n_x_without_math(b, n, x):\n    '''\n    Write a function that takes in three parameters: a base, an exponent, and a number, \n    and returns the exponential of the number by raising it to the exponent by the base.\n    '''\n    result = 1\n    for i in range(1, n):\n        result = result * b\n    return result * x\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_num\n    \ndef sum_series(n, num_series = 'fibonacci', series_num = 0):\n    '''\n    Write a function that takes in an integer n and two optional arguments.\n    The first optional argument is the name of a mathematical series to use.\n    The second optional argument is the series number to use.\n    The function should return the nth number in the selected series.\n    '''\n    return fibonacci(n) if num_series == 'fibonacci' else series_nu"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) > len(array_nums2):\n        temp = array_nums1\n        array_nums1 = array_nums2\n        array_nums2 = temp\n    length = len(array_nums1)\n    array_nums1.extend(array_nums2)\n    array_nums1.sort()\n    dic = {}\n    for i in array_nums1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    result = []\n    for key,value in dic.iteritems():\n        if value == 2:\n            result.append(key)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    arr_1 = set(array_nums1)\n    arr_2 = set(array_nums2)\n    \n    return list(arr_1.intersection(arr_2))\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    for i in array_nums1:\n        if i in array_nums2:\n            intersection_array.append(i)\n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a_list = array_nums1\n    b_list = array_nums2\n    result = []\n    for i in a_list:\n        if i in b_list:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array=[]\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection_array:\n            intersection_array.append(num)\n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection.append(num1)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    return [elem for elem in array_nums1 if elem in array_nums2]\n    \ndef main():\n    \n    array_nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    array_nums2 = [2,4,6,8,10,12,14,16,18,20]\n    \n    print(intersection_array(array_nums1,array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    idx1 = 0\n    idx2 = 0\n    result = []\n    while idx1 < len(array_nums1) and idx2 < len(array_nums2):\n        if array_nums1[idx1] == array_nums2[idx2]:\n            result.append(array_nums1[idx1])\n            idx1 += 1\n            idx2 += 1\n        elif array_nums1[idx1] < array_nums2[idx2]:\n            idx1 += 1\n        else:\n            idx2 += 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    '''\n    Input: array_nums1 = [1,2,3,4,5,6,7,8,9], array_nums2 = [4,5,6,7,8,9]\n    Output: [4,5,6,7,8,9]\n    '''\n    # time complexity: O(n1+n2)\n    # space complexity: O(n)\n    '''\n    # 1) using set\n    # 2) using hashmap\n    # 3) using counter\n    '''\n    output = []\n    '''\n    if not array_nums1 and not array_nums2:\n        return output\n    elif not array_nums1 and array_nums2:\n        return array_nums2\n    elif not array_nums2 and array_nums1:\n        return array_nums1\n    else:\n        for i in array_nums1:\n            if i in array_nums2:\n                output.append(i)\n                array_nums2.remove(i)\n        return output\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tuple.count(tup, x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup:\n        if t == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tuple_len = len(tup)\n    count = 0\n    for i in range(tuple_len):\n        if tup[i] == x:\n            count = count + 1\n    return count\n    \ndef count_O(tup, o): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tuple_len = len(tup)\n    count = 0\n    for i in range(tuple_len):\n        if tup[i] == o:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    lst = [i for i in tup if i == x]\n    return len(lst)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_count = 0\n    for elem in tup:\n        if elem == x:\n            tup_count += 1\n    return tup_count\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [list[i]+element for i in range(0,len(list))]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return [element]\n    elif type(list[0]) == str:\n        return [list[0]] + insert_element(list[1:],element)\n    else:\n        return [element] + insert_element(list[1:],list[0])\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Insert the element before each element in the list\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return []\n    elif len(list) == 1:\n        return [list[0],element]\n    else:\n        return [list[0],element]+insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index in range(len(list)):\n        list.insert(index,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    element_index=0\n    for element in list:\n        if element==element_index:\n            list.insert(element_index-1,element)\n        element_index+=1\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x=0\n    y=0\n    z=0\n    c = complex(numbers)\n    r = cmath.polar(c)\n    print(r)\n    if r[0] < 0:\n        x = r[1]*(-1)\n        y = r[0]\n        z = r[2]\n    else:\n        x = r[1]\n        y = r[0]\n        z = r[2]\n    if z < 0:\n        z = r[2]*(-1)\n    elif z == 0:\n        z = 0\n    else:\n        z = r[2]\n    print(x, y, z)\n    return x, y, z\n    \ndef convert2(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x=0\n    y=0\n    z=0\n    c = complex(numbers)\n    r = cmath.polar(c)\n    print(r)\n    if r[0] < 0:\n        x = r[1]*(-1)\n        y = r[0]\n        z = r[2]\n    else:\n        x = r[1]\n        y = r[0]\n        z = r[2]\n    if z < 0:\n        z = r[2]*(-1)\n    elif z == 0:\n        z = 0\n    else:\n        z = r[2]\n    return x, y, z\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    l=len(numbers)\n    l1=len(numbers[0])\n    ans=[]\n    for i in range(l):\n        temp=[]\n        for j in range(l1):\n            temp.append(cmath.polar(numbers[i][j]))\n        ans.append(temp)\n    return ans\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r=numbers.real\n    i=numbers.imag\n    if(i>0):\n        if(r>0):\n            return(\"%.2f+%.2fi\"%(r,i))\n        else:\n            return(\"%.2f+%.2fi\"%(r,i))\n    elif(i<0):\n        if(r<0):\n            return(\"%.2f+%.2fi\"%(r,i))\n        else:\n            return(\"%.2f+%.2fi\"%(r,i))\n    else:\n        return(\"%.2f\"%r)\ndef quadratic_formula(a,b,c):\n    '''\n    Write a python function to solve quadratic equation\n    a*x*x + b*x + c = 0.\n    '''\n    d = b**2 - 4*a*c\n    if(d>0):\n        x1=(-b+cmath.sqrt(d))/(2*a)\n        x2=(-b-cmath.sqrt(d))/(2*a)\n        return(x1,x2)\n    elif(d==0):\n        x=(-b+cmath.sqrt(d))/(2*a)\n        return(x)\n    else:\n        return(\"none\")\ndef power_formula(a,b,n):\n    '''\n    Write a python function to calculate the value of x to the nth power when the equation a*x^n + b = 0\n    '''\n    if(n==0):\n        return(1)\n    if(n==1):\n        return(a)\n    if(n%2==1):\n        return((power_formula(a,b,n-1)*a)%(10**9+7))\n    else:\n        return((power_formula(a,b,n/2)*power_formula(a,b,n/2))%(10**9+7))\ndef power_formula2(a,b,n):\n    '''\n    Write a python function to calculate the value of x to the nth power when the equation a*x^n + b = 0\n    '''\n    if(n==0):\n        return(1)\n    if(n==1):\n        return(a)\n    if(n%2==1):\n        return((power_formula(a,b,n-1)*a)%(10**9+7))\n    else:\n        return((power_formula(a,b,n/2)*power_formula(a,b,n/2))%(10**9+7))\ndef power_formula3(a,b,n):\n    '''\n    Write a python function to calculate the value of x to the nth power when the equation a*x^n + b = 0\n    '''\n    if(n==0):\n        return(1)\n    if(n==1):\n        return(a)\n    if(n%2==1):\n        return((power_formula(a,b,n-1)*a)%(10**9+7))\n    else:\n        return((power_formula(a,b,n/2)*power_formula(a,b,n/2))%(10**9+7))\ndef power_formula4(a,b,n):\n    '''\n    Write a python function to calculate the value of x to the nth power when the equation a*x^n + b = 0\n    '''\n    if(n==0):\n        return(1)\n    if(n==1):\n        return(a)\n    if(n%2==1):\n        return((power_formula(a,b,n-1)*a)%(10**9+7))\n    else:\n        return((power_formula(a,b,n/2)*power_formula(a,b,n/2))%(10**9+7))\ndef power_formula5(a,b,n):\n    '''\n    Write a python function to calculate the value of x to the nth power when the equation a*x^n + b = 0\n    '''\n    if(n==0):\n        return(1)\n    if(n==1):\n        return(a)\n    if(n%2==1):\n        return((power_formula(a,b,n-1)*a)%(10**9+7))\n    else:\n        return((power_formula(a,b,n/2)*power_formula(a,b,n/2))%(10**9+7))\ndef power_formula6(a,b,n):\n    '''\n    Write a python function to calculate the value of x to the nth power when the equation a*x^n + b = 0\n    '''\n    if(n==0):\n        return(1)\n    if(n==1):\n        return(a)\n    if(n%2==1):\n        return((power_formula(a,b,n-1)*a)%(10**9+7))\n    else:\n        return((power_formula(a,b,n/2)*power_formula(a,b,n/2))%(10**9+7))\ndef power_formula7(a,b,n):\n    '''\n    Write a python function to calculate the value of x to the nth power when the equation a*x^n + b = 0\n    '''\n    if(n==0):\n        return(1)\n    if(n==1):\n        return(a)\n    if(n%2==1):\n        return((power_formula(a,b,n-1)*a)%(10**9+7))\n    else:\n        return((power_formula(a,b,n/2)*power_formula(a,b,n/2))%(10**9+7))\ndef power_formula8(a,b,n):\n    '''\n    Write a python function to calculate the value of x to the nth power when the equation a*x^n + b = 0\n    '''\n    if(n==0):\n        return(1)\n    if(n==1):\n        return(a)\n    if(n%2==1):\n        return((power_formula(a,b,n-1)*a)%(10**9+7))\n    else:\n        return((power_formula(a,b,n/2)*power_formula(a,b,n/2))%(10**9+7))\ndef power_formula9(a,b,n):\n    '''\n    Write a python function to calculate the value of x to the nth power when the equation a*x^n + b = 0\n    '''\n    if(n==0):\n        return(1)\n    if(n==1):\n        return(a)\n    if(n%2==1):\n        return((power_formula(a,b,n-1)*a)%(10**9+7))\n    else:\n        return((power_formula(a,b,n/2)*power_formula(a,b,n/2))%(10**9+7))\ndef power_formula10(a,b,n):\n    '''\n    Write a python function to calculate the value of x to the nth power when the equation a*x^n + b = 0\n    '''\n    if(n==0):\n        return(1)\n    if(n==1):\n        return(a)\n    if(n%2==1):\n        return((power_formula(a,b,n-1)*a)%(10**9+7))\n    else:\n        return((power_formula(a,b,n/2)*power_formula(a,b,n/2))%(10**9+7))\ndef power_formula11(a,b,n):\n    '''\n    Write a python function to calculate the value of x to the nth power when the equation a*x^n + b = 0\n    '''\n    if(n==0):\n        return(1)\n    if(n==1):\n        return(a)\n    if(n%2==1):\n        return((power_formula(a,b,n-1)*a)%(10**9+7))\n    else:\n    "
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # Let's make sure the input is a list of complex numbers\n    assert isinstance(numbers, list)\n    \n    for i in numbers:\n        assert isinstance(i, cmath.cmath)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    from cmath import polar\n    return list(polar(complex(a)) for a in numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(complex(numbers[0],numbers[1]))\n    \ndef test(numbers,ans):\n    myans=convert(numbers)\n    if myans==ans:\n        print('Passed')\n    else:\n        print('Failed')\n    \n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a,b=numbers.real,numbers.imag\n    r=abs(numbers)\n    if a==0:\n        if b>=0:\n            return(r,90)\n        else:\n            return(r,270)\n    elif b==0:\n        if a>=0:\n            return(r,0)\n        else:\n            return(r,180)\n    else:\n        if a>=0 and b>=0:\n            return(r,cmath.acos(a/r)*180/cmath.pi)\n        elif a>=0 and b<0:\n            return(r,360+cmath.acos(a/r)*180/cmath.pi)\n        elif a<0 and b>=0:\n            return(r,360+cmath.acos(a/r)*180/cmath.pi)\n        else:\n            return(r,360+cmath.acos(a/r)*180/cmath.pi)\ndef polar(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r,angle=convert(numbers)\n    return(r,angle)\ndef normalize(numbers):\n    '''\n    Write a python function to normalize a complex number.\n    '''\n    a,b=numbers.real,numbers.imag\n    r=abs(numbers)\n    angle=cmath.phase(numbers)\n    angle=angle*180/cmath.pi\n    if r==0:\n        a=0\n        b=0\n    else:\n        if a>=0:\n            a=a/r\n        else:\n            a=(a/r)*(-1)\n        if b>=0:\n            b=b/r\n        else:\n            b=(b/r)*(-1)\n    a=complex(a,b)\n    return(a)\ndef is_normalized(numbers):\n    '''\n    Write a python function to check if a complex number is normalized.\n    '''\n    n=normalize(numbers)\n    a,b=n.real,n.imag\n    if a==0 and b==0:\n        return(True)\n    else:\n        return(False)\ndef complement(numbers):\n    '''\n    Write a python function to get the complement of a complex number.\n    '''\n    a,b=numbers.real,numbers.imag\n    r=abs(numbers)\n    angle=cmath.phase(numbers)\n    angle=angle*180/cmath.pi\n    a=(a/r)*(-1)\n    b=(b/r)*(-1)\n    a=complex(a,b)\n    return(a)\ndef is_complementary(numbers):\n    '''\n    Write a python function to check if a complex number is complementary.\n    '''\n    n=complement(numbers)\n    a,b=n.real,n.imag\n    if a==0 and b==0:\n        return(True)\n    else:\n        return(False)\ndef conjugate(numbers):\n    '''\n    Write a python function to get the conjugate of a complex number.\n    '''\n    a,b=numbers.real,numbers.imag\n    r=abs(numbers)\n    angle=cmath.phase(numbers)\n    angle=angle*180/cmath.pi\n    a=(a/r)*(-1)\n    b=(b/r)*(-1)\n    a=complex(a,b)\n    return(a)\ndef is_conjugate(numbers):\n    '''\n    Write a python function to check if a complex number is conjugate.\n    '''\n    n=conjugate(numbers)\n    a,b=n.real,n.imag\n    if a==0 and b==0:\n        return(True)\n    else:\n        return(False)\ndef add(numbers1,numbers2):\n    '''\n    Write a python function to add two complex numbers.\n    '''\n    a,b=numbers1.real,numbers1.imag\n    c,d=numbers2.real,numbers2.imag\n    r1=abs(numbers1)\n    r2=abs(numbers2)\n    angle1=cmath.phase(numbers1)\n    angle2=cmath.phase(numbers2)\n    angle1=angle1*180/cmath.pi\n    angle2=angle2*180/cmath.pi\n    a=(a/r1)*(c/r2)+((a*c+b*d)/(r1*r2))\n    b=(b/r1)*(d/r2)-((a*d+b*c)/(r1*r2))\n    a=complex(a,b)\n    return(a)\ndef is_add(numbers1,numbers2):\n    '''\n    Write a python function to check if two complex numbers are additive.\n    '''\n    n1=add(numbers1,numbers2)\n    a,b=n1.real,n1.imag\n    if a==0 and b==0:\n        return(True)\n    else:\n        return(False)\ndef subtract(numbers1,numbers2):\n    '''\n    Write a python function to subtract two complex numbers.\n    '''\n    a,b=numbers1.real,numbers1.imag\n    c,d=numbers2.real,numbers2.imag\n    r1=abs(numbers1)\n    r2=abs(numbers2)\n    angle1=cmath.phase(numbers1)\n    angle2=cmath.phase(numbers2)\n    angle1=angle1*180/cmath.pi\n    angle2=angle2*180/cmath.pi\n    a=(a/r1)*(c/r2)-((a*c+b*d)/(r1*r2))\n    b=(b/r1)*(d/r2)+((a*d+b*c)/(r1*r2))\n    a=complex(a,b)\n    return(a)\ndef is_subtract(numbers1,numbers2):\n    '''\n    Write a python function to check if two complex numbers are subtractive.\n    '''\n    n1=subtract(numbers1,numbers2)\n    a,b=n1.real,n1.imag\n    if a==0 and b==0:\n        return(True)\n    else:\n        return(False)\ndef multiply(numbers1,numbers2):\n    '''\n    Write a python function to multiply two complex numbers.\n    '''\n    a,b=numbers1.real,numbers1.imag\n    c,d=numbers2.real,numbers2.imag\n    r1=abs(numbers1)\n    r2=abs(numbers2)\n    angle1=cmath.phase(numbers1)\n    angle2=cmath.phase(numbers2)\n    angle1=angle1*180/cmath.pi\n    angle2=angle2*180/cmath.pi\n    a=(a/r1)*(c/r2)+((b*c+a*d)/(r1*r2))\n    b=(b/r1)*(d/r2)-((a*d+b*c)/(r1*r2))\n    a=complex(a,b)\n    return(a)\ndef is_multiply(numbers1,numbers2):\n    '''\n    Write a python function to check if two complex numbers are multiplicative.\n    '''\n    n1=multiply(numbers1,numbers2)\n    a,b=n1.real,n1.imag\n    if a==0 and b==0:\n        return(True)\n    else:\n        return(False)\ndef divide(numbers1,numbers2):\n    '''\n    Write a python function to divide two complex numbers.\n    '''\n    a,b=numbers1.real,numbers1.imag\n    c,d=numbers2.real,numbers2.imag\n    r1=abs(numbers1)\n    r2=abs(numbers2)\n    angle1=cmath.phase(numbers1)"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # your code goes here\n    complex_list = []\n    for i in numbers:\n        t = (i.real, i.imag)\n        complex_list.append(t)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers.real\n    b = numbers.imag\n    r = complex(a,b)\n    print('a', a)\n    print('b', b)\n    print('r', r)\n    print('The polar form of', numbers, 'is', cmath.polar(r))\n    \ndef find_nearest_o(theta):\n    '''\n    Write a python function to find nearest 90 degree angle.\n    '''\n    if abs(theta) < 90:\n        return theta\n    if theta > 90:\n        return 180 - abs(theta)\n    if theta < -90:\n        return abs(180 + theta)\ndef find_nearest_o1(theta):\n    '''\n    Write a python function to find nearest 90 degree angle.\n    '''\n    if abs(theta) < 90:\n        return theta\n    if theta > 90:\n        return theta - 90\n    if theta < -90:\n        return theta + 90\ndef find_nearest_o2(theta):\n    '''\n    Write a python function to find nearest 90 degree angle.\n    '''\n    if abs(theta) < 90:\n        return theta\n    if theta > 90:\n        return theta - 90\n    if theta < -90:\n        return theta + 90\n    \ndef find_nearest_o3(theta):\n    '''\n    Write a python function to find nearest 90 degree angle.\n    '''\n    if abs(theta) < 90:\n        return theta\n    if theta > 90:\n        return theta - 90\n    if theta < -90:\n        return theta + 90\n    \ndef find_nearest_o4(theta):\n    '''\n    Write a python function to find nearest 90 degree angle.\n    '''\n    if abs(theta) < 90:\n        return theta\n    if theta > 90:\n        return theta - 90\n    if theta < -90:\n        return theta + 90\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # print(\"input is \",numbers)\n    real_part=numbers.real\n    imaginary_part=numbers.imag\n    r=complex(real_part,imaginary_part)\n    # print(\"converted complex number is \",r)\n    r=cmath.polar(r)\n    # print(\"converted polar number is \",r)\n    return r\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for ele in list1:\n        if isinstance(ele, int):\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1) - list1.count(float)\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return list1.count(int)\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(1 for element in list1 if isinstance(element, int))\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    total_number_of_int = 0\n    for i in list1:\n        if type(i) == int:\n            total_number_of_int += 1\n    return total_number_of_int\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i) is int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num = 0\n    for x in list1:\n        if type(x) == int:\n            num += 1\n    return num\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for c in combinations_with_replacement(l, n):\n        combinations.append(c)\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list1 = []\n    for i in range(len(l)):\n        for j in range(1, n+1):\n            comb = list(combinations_with_replacement(l, j))\n            comb = [tuple(sorted(x)) for x in comb]\n            for y in comb:\n                list1.append(y)\n    return list1\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i+n]) for i in range(0, len(l), n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in combinations_with_replacement(l, n):\n        yield i\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, i):\n            result.append(j)\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(map(tuple, combinations_with_replacement(l, n)))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i] for i in range(n)) for i in range(len(l))]\n    \ndef all_combinations_colors(l):\n    '''\n    Write a function that takes in a list and returns a list with all combinations of the elements of the list.\n    '''\n    combs = []\n    for i in range(1, len(l) + 1):\n        combs += list(combinations_with_replacement(l, i))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_of_combinations = []\n    for i in range(n):\n        comb = combinations_with_replacement(l, i)\n        list_of_combinations += comb\n    return list_of_combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(comb) for comb in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime = [True for i in range(n+1)]\n    p = 2\n    while p*p <= n:\n        if prime[p] == True:\n            for i in range(p*2, n+1, p):\n                prime[i] = False\n        p += 1\n    return sum(prime[2:])\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n = int(n)\n    if n < 2:\n        return 0\n    primes = [2]\n    x = 3\n    while x <= n:\n        for p in primes:\n            if x % p == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # from 0 to n\n    # i = 0\n    # # True = prime, False = not prime\n    # prime = [True] * (n+1)\n    # while i < len(prime):\n    #     j = 2\n    #     while j*j <= i:\n    #         if i % j == 0:\n    #             prime[i] = False\n    #             break\n    #         j += 1\n    #     i += 1\n    # count = 0\n    # for i in xrange(2, n):\n    #     if prime[i]:\n    #         count += 1\n    # return count\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    # from 1 to n-1\n    prime = [1] * (n+1)\n    prime[0] = prime[1] = 0\n    i = 2\n    while i*i <= n:\n        if prime[i] == 1:\n            j = 2\n            while i*j < n:\n                prime[i*j] = 0\n                j += 1\n        i += 1\n    return sum(prime)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    from math import sqrt\n    if n < 1:\n        return 0\n    if n == 1:\n        return 0\n    count = 0\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    return count + 1\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    \n    if n == 1:\n        return 0\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n==1:\n        return 0\n    else:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    \n    # set a list of primes numbers\n    # anything less than 2 is prime\n    primes = [True] * (n+1)\n    primes[0] = False\n    primes[1] = False\n    \n    # set the number of prime numbers to count\n    count = 0\n    \n    # number of primes\n    for i in range(2, n+1):\n        if primes[i]:\n            count += 1\n            \n            # iterate through each number that is i**2 until n\n            for j in range(i*2, n+1, i):\n                primes[j] = False\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 1:\n        return 0\n    nums = [False]*n\n    nums[0] = True\n    nums[1] = True\n    for i in range(2,n):\n        if nums[i]:\n            continue\n        j = i\n        while j*i < n:\n            nums[j*i] = True\n            j += 1\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == False:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Iteratively check each number up to the square root\n    for num in range(2, int(n**0.5) + 1):\n        if n % num == 0:\n            return 0\n    return 1\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 1:\n        return 0\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n        if isPrime:\n            count += 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a, b = b, a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup = (b,a)\n    return tup\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \ndef get_number():\n    '''\n    Prompts the user for a number and returns it.\n    '''\n    # convert the input to a float\n    return float(input(\"Enter a number: \"))\n    \ndef get_integer():\n    '''\n    Prompts the user for an integer and returns it.\n    '''\n    # convert the input to a float\n    return int(input(\"Enter an integer: \"))\n    \ndef get_string():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return input(\"Enter a string: \")\n    \ndef get_boolean():\n    '''\n    Prompts the user for a boolean and returns it.\n    '''\n    return input(\"Enter a boolean: \")\n    \ndef get_float_boolean():\n    '''\n    Prompts the user for a float boolean and returns it.\n    '''\n    return float(input(\"Enter a boolean: \"))\n    \ndef get_float():\n    '''\n    Prompts the user for a float and returns it.\n    '''\n    return float(input(\"Enter a float: \"))\n    \ndef get_int():\n    '''\n    Prompts the user for an integer and returns it.\n    '''\n    return int(input(\"Enter an integer: \"))\n    \ndef get_even_int():\n    '''\n    Prompts the user for an even integer and returns it.\n    '''\n    return get_int() % 2 == 0\n    \ndef get_odd_int():\n    '''\n    Prompts the user for an odd integer and returns it.\n    '''\n    return get_int() % 2 == 1\n    \ndef get_prime_int():\n    '''\n    Prompts the user for an integer and returns it.\n    '''\n    return get_int() > 1 and all(get_int() % n!= 0 for n in range(2, get_int()))\n    \ndef get_greater_than_5():\n    '''\n    Prompts the user for an integer and returns it.\n    '''\n    return get_int() > 5\n    \ndef get_less_than_5():\n    '''\n    Prompts the user for an integer and returns it.\n    '''\n    return get_int() < 5\n    \ndef get_string_is_upper():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return get_string().isupper()\n    \ndef get_string_is_lower():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return get_string().islower()\n    \ndef get_string_has_a_number():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return any(char.isdigit() for char in get_string())\n    \ndef get_string_has_a_symbol():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return any(char.isalpha() for char in get_string())\n    \ndef get_string_has_a_special_char():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return any(char in get_string() for char in [\"!\", \"?\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"*\", \"+\"])\n    \ndef get_string_has_a_valid_date():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return re.match(\"^\\d{4}-\\d{2}-\\d{2}$\", get_string())!= None\n    \ndef get_string_has_a_valid_email():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return re.match(\"[^@]+@[^@]+\\.[^@]+\", get_string())!= None\n    \ndef get_string_has_a_valid_phone_number():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return re.match(\"^\\d{10}$\", get_string())!= None\n    \ndef get_string_has_no_spaces():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return \" \" not in get_string()\n    \ndef get_string_has_no_tabs():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return \"\\t\" not in get_string()\n    \ndef get_string_has_no_line_breaks():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return \"\\n\" not in get_string()\n    \ndef get_string_has_no_line_breaks_or_tabs():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return \"\\n\" not in get_string() and \"\\t\" not in get_string()\n    \ndef get_string_has_no_tabs_or_line_breaks():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return \"\\n\" not in get_string() and \"\\t\" not in get_string()\n    \ndef get_string_has_no_tabs_or_line_breaks_or_spaces():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return \"\\n\" not in get_string() and \"\\t\" not in get_string() and \" \" not in get_string()\n    \ndef get_string_has_no_special_characters():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return not any(char in get_string() for char in [\"!\", \"?\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"*\", \"+\"])\n    \ndef get_string_has_no_diacritics():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return \"\".join(char for char in get_string() if not unicodedata.category(char).startswith(\"Mn\"))\n    \ndef get_string_has_no_diacritics_or_spaces():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return \"\".join(char for char in get_string() if not unicodedata.category(char).startswith(\"Mn\") and char!= \" \")\n    \ndef get_string_has_no_diacritics_or_spaces_or_line_breaks():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return \"\".join(char for char in get_string() if not unicodedata.category(char).startswith(\"Mn\") and char!= \" \" and char!= \"\\n\")\n    \ndef get_string_has_no_diacritics_or_spaces_or_line_breaks_or_tabs():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return \"\".join(char for char in get_string() if not unicodedata.category(char).startswith(\"Mn\") and char!= \" \" and char!= \"\\n\" and char!= \"\\t\")\n    \ndef get_string_has_no_punctuation():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return not any(char in get_string() for char in [\"!\", \"?\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"*\", \"+\"])\n    \ndef get_string_has_no_punctuation_or_spaces():\n    '''\n    Prompts the user for a string and returns it.\n    '''\n    return \"\".join(char for char in get_string() if not char in [\"!\", \"?\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"*\", \"+\"])\n    \ndef get_string_has_no_punctuation_or_spaces_or_line_break"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # your code here\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(map(max, zip(*zip(test_tup1, test_tup2))))\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    first_tup = max(test_tup1)\n    second_tup = max(test_tup2)\n    print (first_tup, second_tup)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1_max, test_tup2_max = 0, 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup1_max:\n            test_tup1_max = test_tup1[i]\n            test_tup1_index = i\n    for j in range(len(test_tup2)):\n        if test_tup2[j] > test_tup2_max:\n            test_tup2_max = test_tup2[j]\n            test_tup2_index = j\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1_val = 0\n    tup2_val = 0\n    for i in test_tup1:\n        tup1_val += i\n    for i in test_tup2:\n        tup2_val += i\n    if tup1_val > tup2_val:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Find the maximum element among all the tuples in the given list\n    # \"test_tup1\" and \"test_tup2\"\n    # Hint: Use the built-in min() and max() functions.\n    # Return the element that has the maximum value among the tuples\n    # in the given list\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(zip(test_tup1,test_tup2), key=operator.itemgetter(0,1))\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2, key=lambda x: x[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return sorted(test_tup1, key = lambda tup: (-tup[1], -tup[2])) + sorted(test_tup2, key = lambda tup: (-tup[1], -tup[2]))\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(sorted(test_tup1, reverse = True)[:3] + sorted(test_tup2, reverse = True)[:3])\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n == 1:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5, int(n ** 0.5) + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def find_prime(n):\n        for i in range(1,n+1):\n            if i > 1 and i % 2 == 0:\n                continue\n            for j in range(3, int(math.ceil(math.sqrt(i))) + 1, 2):\n                if i % j == 0:\n                    break\n            else:\n                yield i\n    prime = find_prime(n)\n    while len(list(prime)) < n:\n        p = next(prime)\n        if p**2 > n:\n            return p\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n -= 1\n    while True:\n        n += 1\n        if gcd(n, 1) == 1:\n            return n\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    #if n is 2 or 3 return 2\n    if n == 2 or n == 3: \n        return 2\n    \n    #if n is a multiple of 3, then (n-1)/3 is the smallest multiple of 3\n    elif n%3 == 0:\n        return newman_prime((n-1)/3)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #define variables\n    primes = [2]\n    n = int(n)\n    x = 2\n    y = 3\n    counter = 3\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    nth = 2\n    p = 2\n    d = {}\n    while n > 0:\n        if n == 1:\n            return p\n        if n in d:\n            return d[n]\n        q = 0\n        for i in range(2,p):\n            if p % i == 0:\n                q = i\n                break\n        if q!= 0:\n            d[n] = p\n            n -= 1\n            continue\n        else:\n            p += 1\n            continue\n    return p\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        if n%2 == 0:\n            return False\n        if n%3 == 0:\n            return False\n        for i in range(5, int(n**0.5) + 1, 6):\n            if n%i == 0:\n                return False\n            if n%(i+2) == 0:\n                return False\n        return True\n    \n    x = 1\n    prime = [2]\n    n1 = 2\n    while len(prime) < n:\n        n1+=1\n        if is_prime(n1):\n            x = n1\n            prime.append(x)\n    \n    y = n\n    n2 = 0\n    while prime[n2] <= y:\n        n2+=1\n    return prime[n2-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    x = random.randint(1, n - 1)\n    y = pow(x, n - 1, n)\n    return gcd(y - x, n) == 1\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    primes = [2, 3]\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    t1, t2 = test_tup1, test_tup2\n    # Element-wise division\n    elem_wise_div = lambda a, b: (a[0] / b[0], a[1] / b[1])\n    return elem_wise_div(t1, t2)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [test_tup1[i] / test_tup2[i] for i in range(len(test_tup1))]\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    assert(len1 == len2)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # division_elements = list(map(lambda x,y: x/y, test_tup1, test_tup2))\n    # return division_elements\n    return tuple(a/b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #TODO: Write function that performs division\n    #TODO: Write function that performs division\n    return\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    quot = []\n    for idx, el in enumerate(test_tup1):\n        quot.append(el/test_tup2[idx])\n    return quot\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup1 = ()\n    new_tup2 = ()\n    for i in range(len(test_tup1)):\n        new_tup1 += (test_tup1[i] / test_tup2[i],)\n    for i in range(len(test_tup2)):\n        new_tup2 += (test_tup2[i] / test_tup1[i],)\n    return new_tup1, new_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    div = (int(test_tup1[0]) / int(test_tup2[0]), int(test_tup1[1]) / int(test_tup2[1]), int(test_tup1[2]) / int(test_tup2[2]))\n    return div\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #base case\n    if L == 1:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n    \n    \ndef same_first_last(list1):\n    '''\n    Write a function that takes in a list of strings and returns a list of only the strings that start and end with the same character.\n    '''\n    return [i for i in list1 if i[0]==i[-1]]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) == 0:\n        return None\n    if L > len(list1) or L < 1:\n        return None\n    elif L == len(list1):\n        return (list1, None)\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_one = list1[0:L]\n    list_two = list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    # Your code here\n    list2 = list1[L:]\n    list1 = list1[:L]\n    return (list1, list2)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    index = int(L / 2)\n    return list1[:index], list1[index:]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        raise ValueError('list must have length greater than L')\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    def is_integer(n):\n        try:\n            float(n)\n            return True\n        except ValueError:\n            return False\n    if is_integer(h_age):\n        if h_age == 0:\n            return \"How much is it\"\n        elif h_age == 1:\n            return \"How old is it?\"\n        else:\n            return (\"I'm %s years old, so I'm %s in dog years\" % (h_age, (h_age * 7)))\n    else:\n        return \"I need a number\"\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # First, calculate the dog's age in human years.\n    h_age_human = h_age * 7\n    \n    # Now, calculate the dog's age in dog's years.\n    h_age_dog = h_age_human * 7\n    \n    # Return the dog's age in dog's years.\n    return h_age_dog\n    "
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 2:\n        return h_age * 7\n    elif h_age == 2:\n        return 14\n    else:\n        return h_age * 4\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # build a dictionary of dog_ages\n    dog_ages = {1:7, 2:14, 3:21}\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round(h_age * 7, 2)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #Input:\n    #A tuple with the following values: (hours, minutes, seconds)\n    #Output:\n    #The age in years as an integer, rounded down\n    #Hint: How many seconds are in a minute?\n    #Hint: How many minutes are in an hour?\n    #Hint: How many hours are in a day?\n    \n    days = 24 * 60 * 60\n    seconds_per_hour = 60 * 60\n    seconds_per_day = days\n    \n    days_to_seconds = lambda days: days * seconds_per_day\n    minutes_to_seconds = lambda minutes: minutes * seconds_per_hour\n    seconds_to_minutes = lambda seconds: seconds / 60\n    \n    if h_age[0] <= 0:\n        return 0\n    \n    #Do some math!\n    hours = int(h_age[0])\n    minutes = int(h_age[1])\n    seconds = int(h_age[2])\n    \n    return seconds_to_minutes(seconds) + minutes_to_seconds(minutes) + days_to_seconds(hours)\n    \ndef dog_years(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #Input:\n    #A tuple with the following values: (hours, minutes, seconds)\n    #Output:\n    #The age in years as an integer, rounded down\n    #Hint: How many seconds are in a minute?\n    #Hint: How many minutes are in an hour?\n    #Hint: How many hours are in a day?\n    \n    days = 24 * 60 * 60\n    seconds_per_hour = 60 * 60\n    seconds_per_day = days\n    \n    days_to_seconds = lambda days: days * seconds_per_day\n    minutes_to_seconds = lambda minutes: minutes * seconds_per_hour\n    seconds_to_minutes = lambda seconds: seconds / 60\n    \n    if h_age[0] <= 0:\n        return 0\n    \n    #Do some math!\n    hours = int(h_age[0])\n    minutes = int(h_age[1])\n    seconds = int(h_age[2])\n    \n    return seconds_to_minutes(seconds) + minutes_to_seconds(minutes) + days_to_seconds(hours) / 365\n    \ndef dog_years_p2(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #Input:\n    #A tuple with the following values: (hours, minutes, seconds)\n    #Output:\n    #The age in years as an integer, rounded down\n    #Hint: How many seconds are in a minute?\n    #Hint: How many minutes are in an hour?\n    #Hint: How many hours are in a day?\n    \n    days = 24 * 60 * 60\n    seconds_per_hour = 60 * 60\n    seconds_per_day = days\n    \n    days_to_seconds = lambda days: days * seconds_per_day\n    minutes_to_seconds = lambda minutes: minutes * seconds_per_hour\n    seconds_to_minutes = lambda seconds: seconds / 60\n    \n    if h_age[0] <= 0:\n        return 0\n    \n    #Do some math!\n    hours = int(h_age[0])\n    minutes = int(h_age[1])\n    seconds = int(h_age[2])\n    \n    return seconds_to_minutes(seconds) + minutes_to_seconds(minutes) + days_to_seconds(hours) / (365 * 8)\n    \ndef first_plus_last(a_list):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the first and last elements.\n    '''\n    #Input:\n    #A list of integers\n    #Output:\n    #The sum of the first and last elements\n    \n    return a_list[0] + a_list[-1]\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 2:\n        return 21 + (h_age - 2) * 4\n    else:\n        return 21\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(\"The dog's age cannot be negative\")\n    else:\n        return h_age*7\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    for i in range(0, len(S), step):\n        res.append(S[i:i+step])\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[x:x+step] for x in range(0,len(S),step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def split_it(list, step):\n        return list[::step]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n    "
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_len = len(S)\n    if list_len % step == 0:\n        return [S[x:x+step] for x in range(0, list_len, step)]\n    else:\n        return [S[x:x+step] for x in range(0, list_len, step)] + [S[-step:]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # the split function is going to return a list of lists, so we need to place a list in the return list\n    returnList = []\n    # for every index in the list, we need to iterate over the list up to that index and split the list.\n    for index in range(0, len(S), step):\n        # the return list is going to be a list of lists, so we need to append the list to the return list\n        returnList.append(S[index:])\n    # the return list will be a list of lists, so we need to return that\n    return returnList\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = list(S)\n    i = 0\n    result = []\n    for x in lst:\n        if i%step == 0:\n            result.append(x)\n        i += 1\n    return result\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l) ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 6\n    return (6*l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6*l**2\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l**2\n    print(\"The lateral surface area of the cube with side length\", l, \"is\", s)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1, n, 2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(1, n, 2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i * i\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n**2 + square_Sum(n-1)\n    "
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if type(n) is not int:\n        return \"Error: argument must be an integer\"\n    \n    nums = []\n    for i in range(n+1):\n        if i%2 == 1:\n            nums.append(i*i)\n    return sum(nums)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i*i for i in range(1, n+1) if i % 2])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return square_Sum(n-1) + n*n\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i*i for i in range(1, n + 1, 2))\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i ** 2 for i in range(1, n+1, 2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([num**2 for num in range(1, n, 2)])\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # gcd(n,6)=1, thus, we only need to check the first 6 numbers\n    # i=1,2,3,4,5,6,7,8,9,...\n    # n=x*y, so, \n    # x=n/y, y=n/y\n    # so, we only need to check from 2*i to n/y\n    # y=6, x=2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25\n    # => x=n/6, y=n/6, i=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25\n    # => x=n/6, y=n/6, i=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_to_find = 1\n    num_to_find_new = 1\n    count = 0\n    \n    while count <= n - 1:\n        num_to_find_new = num_to_find + 1\n        num_to_find = num_to_find_new\n        count = count + 1\n    \n    return num_to_find\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n*(n-1))/2 + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n_list = [1,1,1,2,5,11,23,\n             31,67,\n             69,\n            \n             11,13,17,19,23,27,29,\n             31,37,39,43,47,53,\n            \n              59,61,67,69,73,77,79,\n             73,79,83,89,97,101,103,\n            \n             113,127,131,137,139,149,\n             151,157,163,167,173,179,\n            \n             181,193,197,199,211,223,\n             227,229,233,239,241,251,\n            \n             263,267,269,271,277,281,\n             283,289,\n            \n             293,307,311,313,317,321,\n             323,327,329,337,\n            \n             349,353,359,361,367,369,\n             373,377,379,383,389,\n            \n             391,399,401,407,409,411,\n            \n             431,433,439,443,449,\n             459,\n            \n             463,467,479,487,493,499,\n            \n             499,\n            \n             505,511,\n            \n             509,521,\n            \n             523,527,\n            \n             533,539,\n            \n             541,547,\n            \n             549,\n            \n             553,557,\n            \n             559,\n            \n             563,569,\n            \n             571,\n            \n             577,\n            \n             579,\n            \n             583,\n            \n             587,\n            \n             593,\n            \n             599,\n            \n             601,\n            \n             607,\n            \n             613,\n            \n             617,\n            \n             619,\n            \n             631,\n            \n             643,\n            \n             647,\n            \n             653,\n            \n             659,\n            \n             661,\n            \n             673,\n            \n             677,\n            \n             683,\n            \n             691,\n            \n             701,\n            \n             709,\n            \n             719,\n            \n             727,\n            \n             733,\n            \n             739,\n            \n             743,\n            \n             751,\n            \n             757,\n            \n             761,\n            \n             769,\n            \n             773,\n            \n             779,\n            \n             783,\n            \n             789,\n            \n             793,\n            \n             799,\n            \n             809,\n            \n             811,\n            \n             817,\n            \n             823,\n            \n             829,\n            \n             831,\n            \n             837,\n            \n             841,\n            \n             847,\n            \n             853,\n            \n             859,\n            \n             863,\n            \n             877,\n            \n             881,\n            \n             883,\n            \n             887,\n            \n             893,\n            \n             899,\n            \n             909,\n            \n             911,\n            \n             917,\n            \n             919,\n            \n             929,\n            \n             931,\n            \n             937,\n            \n             941,\n            \n             947,\n            \n             953,\n            \n             967,\n            \n             971,\n            \n             977,\n            \n             983,\n            \n             991,\n            \n             997,\n            \n             1009,\n            \n             1013,\n            \n             1019,\n            \n             1025,\n            \n             1031,\n            \n             1037,\n            \n             1043,\n            \n             1049,\n            \n             1053,\n            \n             1059,\n            \n             1061,\n            \n             1067,\n            \n             1073,\n            \n             1079,\n            \n             1083,\n            \n             1089,\n            \n             1097,\n            \n             1103,\n            \n             1111,\n            \n             1117,\n            \n             1123,\n            \n             1128,\n            \n             1129,\n            \n             1151,\n            \n             1153,\n            \n             1163,\n            \n             1171,\n            \n             1181,\n            \n             1187,\n            \n             1193,\n            \n             1201,\n            \n             1213,\n            \n             1219,\n            \n             1225,\n            \n             1231,\n            \n             1237,\n            \n             1243,\n            \n             1249,\n            \n             1255,\n            \n             1259,\n            \n             1265,\n            \n             1271,\n            \n             1277,\n            \n             1283,\n            \n             1289,\n            \n             1297,\n            \n             1303,\n            \n             1315,\n            \n             1317,\n            \n             1321,\n            \n             1327,\n            \n             1333,\n            \n             1339,\n            \n             1343,\n            \n             1349,\n            \n             1353,\n            \n             1359,\n            \n             1363,\n            \n             1367,\n            \n             1373,\n            \n             1379,\n            \n             1383,\n            \n             1387,\n            \n             1393,\n            \n             1399,\n            \n             1409,\n            \n             1411,\n            \n             1417,\n            \n             1423,\n            \n             1429,\n            \n             1433,\n            \n             1439,\n            \n             1443,\n            \n             1451,\n            \n             1457,\n            \n             1463,\n            \n             1467,\n            \n             1473,\n            \n             1479,\n            \n             1483,\n            \n             1489,\n            \n             1497,\n            \n             1503,\n            \n             1511,\n            \n             1517,\n            \n             1523,\n            \n             1531,\n            \n             1543,\n            \n             1547,\n            \n             1553,\n            \n             1559,\n            \n             1567,\n            \n             1573,\n            \n             1583,\n            \n             1597,\n            \n             1609,\n            \n             1617,\n            \n             1623,\n            \n             1629,\n            \n             1641,\n            \n             1647,\n            \n             1653,\n            \n             1659,\n            \n             1665,\n            \n             1671,\n            \n             1677,\n            \n             1683,\n            \n             1699,\n            \n             1709,\n            \n             1721,\n            \n             1723,\n            \n             1733,\n            \n             1741,\n            \n             1747,\n            \n             1753,\n            \n             1759,\n            \n             1765,\n            \n             1771,\n            \n             1777,\n            \n             1783,\n            \n             1789,\n            \n             1795,\n            \n             1801,\n            \n             1807,\n            \n             1813,\n            \n             1819,\n            \n             1825,\n            \n             1831,\n            \n             1837,\n            \n             1843,\n            \n             1849,\n            \n             1855,\n            \n             1859,\n            \n             1865,\n            \n             1871,\n            \n             1877,\n            \n             1883,\n            \n             1889,\n            \n             1895,\n            \n             1901,\n            \n             1907,\n            \n             1913,\n            \n             1919,\n            \n             1925,\n            \n             1931,\n            \n             1937,\n            \n             1943,\n            \n             1949,\n            \n             1955,\n            \n             1959,\n            \n             1965,\n            \n             1971,\n            \n             1977,\n            \n             1983,\n            \n             1987,\n            \n             1993,\n            \n             1999,\n            \n             2005,\n            \n             2011,\n            \n             2017,\n            \n             2027,\n            \n             2033,\n            \n             2039,\n            \n             2045,\n            \n             205"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 14\n    elif n == 4:\n        return 41\n    elif n == 5:\n        return 85\n    elif n == 6:\n        return 216\n    elif n == 7:\n        return 865\n    elif n == 8:\n        return 2162\n    elif n == 9:\n        return 5991\n    elif n == 10:\n        return 1427\n    elif n == 11:\n        return 3780\n    elif n == 12:\n        return 8394\n    elif n == 13:\n        return 2272\n    elif n == 14:\n        return 5906\n    elif n == 15:\n        return 1367\n    elif n == 16:\n        return 3243\n    elif n == 17:\n        return 6260\n    elif n == 18:\n        return 14925\n    elif n == 19:\n        return 32489\n    elif n == 20:\n        return 6279\n    elif n == 21:\n        return 12315\n    elif n == 22:\n        return 22274\n    elif n == 23:\n        return 53657\n    elif n == 24:\n        return 11173\n    elif n == 25:\n        return 30149\n    elif n == 26:\n        return 61664\n    elif n == 27:\n        return 12354\n    elif n == 28:\n        return 24395\n    elif n == 29:\n        return 43464\n    elif n == 30:\n        return 8349\n    elif n == 31:\n        return 15612\n    elif n == 32:\n        return 31891\n    elif n == 33:\n        return 63330\n    elif n == 34:\n        return 12687\n    elif n == 35:\n        return 23323\n    elif n == 36:\n        return 45552\n    elif n == 37:\n        return 85499\n    elif n == 38:\n        return 17013\n    elif n == 39:\n        return 29250\n    elif n == 40:\n        return 59838\n    elif n == 41:\n        return 1194253\n    elif n == 42:\n        return 24429\n    elif n == 43:\n        return 461918\n    elif n == 44:\n        return 9609193\n    elif n == 45:\n        return 2516669\n    elif n == 46:\n        return 49053321\n    elif n == 47:\n        return 87775806\n    elif n == 48:\n        return 173572342\n    elif n == 49:\n        return 41681201\n    elif n == 50:\n        return 80425595\n    elif n == 51:\n        return 181834604\n    elif n == 52:\n        return 44967083\n    elif n == 53:\n        return 93676639\n    elif n == 54:\n        return 186601597\n    elif n == 55:\n        return 419142944\n    elif n == 56:\n        return 78999000\n    elif n == 57:\n        return 167590631\n    elif n == 58:\n        return 323993499\n    elif n == 59:\n        return 64880607\n    elif n == 60:\n        return 130249903\n    elif n == 61:\n        return 27689450\n    elif n == 62:\n        return 541240704\n    elif n == 63:\n        return 10772279\n    elif n == 64:\n        return 221052606\n    elif n == 65:\n        return 54596109\n    elif n == 66:\n        return 111554535\n    elif n == 67:\n        return 227311186\n    elif n == 68:\n        return 553468282\n    elif n == 69:\n        return 115969018\n    elif n == 70:\n        return 231955791\n    elif n == 71:\n        return 564236583\n    elif n == 72:\n        return 11866449\n    elif n == 73:\n        return 236174437\n    elif n == 74:\n        return 587644034\n    elif n == 75:\n        return 119845003\n    elif n == 76:\n        return 244057262\n    elif n == 77:\n        return 579360293\n    elif n == 78:\n        return 12149862\n    elif n == 79:\n        return 251057415\n    elif n == 80:\n        return 595479584\n    elif n == 81:\n        return 131365892\n    elif n == 82:\n        return 268242988\n    elif n == 83:\n        return 612164911\n    elif n == 84:\n        return 137932967\n    elif n == 85:\n        return 28506539\n    elif n == 86:\n        return 633658332\n    elif n == 87:\n        return 141457314\n    elif n == 88:\n        return 304510295\n    elif n == 89:\n        return 669115862\n    elif n == 90:\n        return 150992657\n    elif n == 91:\n        return 318847707\n    elif n == 92:\n        return 664662822\n    elif n == 93:\n        return 152057171\n    elif n == 94:\n        return 326751515\n    elif n == 95:\n        return 678968341\n    elif n == 96:\n        return 162956322\n    elif n == 97:\n        return 328536986\n    elif n == 98:\n        return 674823116\n    elif n == 99:\n        return 171946907\n    elif n == 100:\n        return 333352942\n    elif n == 101:\n        return 678984543\n    elif n == 102:\n        return 182984068\n    elif n == 103:\n        return 344065001\n    elif n == 104:\n        return 689691537\n    elif n == 105:\n        return 188464763\n    elif n == 106:\n        return 363611819\n    elif n == 107:\n        return 70873747\n    elif n == 108:\n        return 194379334\n    elif n == 109:\n        return 392241820\n    elif n == 110:\n        return 78938946\n    elif n == 111:\n        return 197546850\n    elif n == 112:\n        return 453224498\n    elif n == 113:\n        return 899054354\n    elif n == 114:\n        return 200905202\n    elif n == 115:\n        return 456266748\n    elif n == 116:\n        return 956503346\n    elif n == 117:\n        return 212476081\n    elif n == 118:\n        return 490328163\n    elif n == 119:\n        return 947960223\n    elif n == 120:\n        return 216277939\n    elif n == 121:\n        return 523417755\n    elif n == 122:\n        return 115692084\n    elif n == 123:\n        return 232274443\n    elif n == 124:\n        return 569285863\n    elif n == 125:\n        return 117019392\n    elif n == 126:\n        return 243976849\n    elif n == 127:\n        return 599162894\n    elif n == 128:\n        return 129450280\n    elif n == 129:\n        return 251924745\n    elif n == 130:\n        return 596142526\n    elif n == 131:\n        return 131294201\n    elif n == 132:\n        return 262250230\n    elif n == 133:\n        return 591912604\n    elif n == 134:\n        return 141265385\n    elif n == 135:\n        return 27585450\n    elif n == 136:\n        return 611755069\n    elif n == 137:\n        return 136039451\n    elif n == 138:\n        return 285508494\n    elif n == 139:\n        return 633403031\n    elif "
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 1\n    for i in range(1, n): \n        result *= i\n    return result \n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    res = 1\n    for i in range(n):\n        res *= (i+1)\n    return res\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    return n * find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_of_stars = 1\n    for i in range(1,n+1):\n        num_of_stars = num_of_stars * i\n    return num_of_stars\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1)*(n-1) + find_star_num(n-2)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k =='':\n        return 32\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k) - 96\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) < 128:\n        return ord(k)\n    else:\n        return ord(k) + 256\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    return ord(k)\n    \ndef print_ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    return chr(ascii_value(k))\n    \ndef rotate(s,n):\n    '''\n    Write a function to rotate a string.\n    '''\n    \n    if len(s) <= 1:\n        return s\n    \n    rotated_string = ''\n    for i in range(n):\n        rotated_string += s[i]\n    \n    for i in range(n, len(s)):\n        rotated_string += s[i]\n    \n    return rotated_string\n    \ndef print_rotate(s,n):\n    '''\n    Write a function to rotate a string.\n    '''\n    \n    return rotate(s,n)\n    \ndef group_by(s, n):\n    '''\n    Write a function to group a string by n characters.\n    '''\n    \n    grouped_list = []\n    for i in range(0, len(s), n):\n        grouped_list.append(s[i:i+n])\n    \n    return grouped_list\n    \ndef print_group_by(s, n):\n    '''\n    Write a function to group a string by n characters.\n    '''\n    \n    return group_by(s, n)\n    \ndef count_word(s, n):\n    '''\n    Write a function to count the number of times a word occurs in a string.\n    '''\n    \n    word_count = 0\n    for i in range(len(s)):\n        if s[i:i+n] == n:\n            word_count += 1\n            \n    return word_count\n    \ndef print_count_word(s, n):\n    '''\n    Write a function to count the number of times a word occurs in a string.\n    '''\n    \n    return count_word(s, n)\n    \ndef count_number(s, n):\n    '''\n    Write a function to count the number of times a number occurs in a string.\n    '''\n    \n    number_count = 0\n    for i in range(len(s)):\n        if s[i:i+n] == n:\n            number_count += 1\n            \n    return number_count\n    \ndef print_count_number(s, n):\n    '''\n    Write a function to count the number of times a number occurs in a string.\n    '''\n    \n    return count_number(s, n)\n    \ndef count_word_letters(s, n):\n    '''\n    Write a function to count the number of letters in each word in a string.\n    '''\n    \n    word_count = {}\n    for i in range(len(s)):\n        if s[i:i+n] == n:\n            word = s[i:i+n]\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n                \n    return word_count\n    \ndef print_word_letters(s, n):\n    '''\n    Write a function to count the number of letters in each word in a string.\n    '''\n    \n    return count_word_letters(s, n)\n    \ndef count_words(s, n):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    \n    word_count = 0\n    for i in range(len(s)):\n        if s[i:i+n] == n:\n            word_count += 1\n            \n    return word_count\n    \ndef print_count_words(s, n):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    \n    return count_words(s, n)\n    \ndef remove_string(s, n):\n    '''\n    Write a function to remove the nth character of a string.\n    '''\n    \n    new_string = ''\n    for i in range(len(s)):\n        if i!= n:\n            new_string += s[i]\n            \n    return new_string\n    \ndef print_remove_string(s, n):\n    '''\n    Write a function to remove the nth character of a string.\n    '''\n    \n    return remove_string(s, n)\n    \ndef convert_to_int(s):\n    '''\n    Write a function to convert a string to integer.\n    '''\n    \n    return int(s)\n    \ndef print_convert_to_int(s):\n    '''\n    Write a function to convert a string to integer.\n    '''\n    \n    return convert_to_int(s)\n    \ndef convert_to_float(s):\n    '''\n    Write a function to convert a string to float.\n    '''\n    \n    return float(s)\n    \ndef print_convert_to_float(s):\n    '''\n    Write a function to convert a string to float.\n    '''\n    \n    return convert_to_float(s)\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is palindrome.\n    '''\n    \n    return s == s[::-1]\n    \ndef print_is_palindrome(s):\n    '''\n    Write a function to check if a string is palindrome.\n    '''\n    \n    return is_palindrome(s)\n    \ndef is_pangram(s):\n    '''\n    Write a function to check if a string is pangram.\n    '''\n    \n    letter_list = 'abcdefghijklmnopqrstuvwxyz'\n    letter_list = letter_list.lower()\n    \n    for letter in letter_list:\n        if letter not in s.lower():\n            return False\n            \n    return True\n    \ndef print_is_pangram(s):\n    '''\n    Write a function to check if a string is pangram.\n    '''\n    \n    return is_pangram(s)\n    \ndef remove_punctuation(s):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    \n    punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n    \n    for i in range(len(s)):\n        if s[i] in punctuation:\n            s = s[:i] + s[i+1:]\n            \n    return s\n    \ndef print_remove_punctuation(s):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    \n    return remove_punctuation(s)\n    \ndef count_vowels(s):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    \n    vowel_list = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    \n    for i in range(len(s)):\n        if s[i] in vowel_list:\n            vowel_count += 1\n            \n    return vowel_count\n    \ndef print_count_vowels(s):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    \n    return count_vowels(s)\n    \ndef replace_string(s, word, replacement):\n    '''\n    Write a function to replace a word in a string with another word.\n    '''\n    \n    new_string = ''\n    for i in range(len(s)):\n        if s[i] == word[0]:\n            new_string += replacement\n            new_string += word[1:]\n            \n    return new_string\n    \ndef print_replace_string(s, word, replacement):\n    '''\n    Write a function to replace a word in a string with another word.\n    '''\n    \n    return replace_string(s, word, replacement)\n    \ndef find_word(s, word):\n    '''\n    Write a function to find the index of the first appearance of a wor"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        return ord(k)\n    elif isinstance(k, unicode):\n        return ord(k)\n    else:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0,len(arr),2):\n        total += arr[i]\n    return total\n    \ndef count_and_say(n):\n    '''\n    Write a python function to count and say of a number.\n    '''\n    return \"\".join(str(len(str(n))) + str(i[0]) + str(i[1:]) for i in str(n))\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if not arr:\n        return 0\n    return sum(arr[0::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                s += arr[i]\n    return s\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([arr[i] for i in range(0,len(arr),2) if arr[i]%2 == 0])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(0,len(arr),2):\n        if(arr[i]%2 == 0):\n            sum_even_index = sum_even_index + arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_of_even_at_even_index = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_of_even_at_even_index = sum_of_even_at_even_index + arr[i]\n    return sum_of_even_at_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(0,len(arr)):\n        if i%2==0 and arr[i]%2==0:\n            sum_even_index = sum_even_index + arr[i]\n    return sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_list = [i for i in arr if i%2 == 0]\n    return sum(even_list[::2])\n    \ndef sum_odd_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    odd_list = [i for i in arr if i%2!= 0]\n    return sum(odd_list[1::2])\n    \ndef find_index_of_duplicate(arr):  \n    '''\n    Write a python function to find the index of the duplicate number in an array.\n    '''\n    seen_number = {}\n    for i in arr:\n        if i in seen_number:\n            return seen_number[i]\n        else:\n            seen_number[i] = 1\n            \ndef find_max_of_duplicate(arr):  \n    '''\n    Write a python function to find the maximum duplicate number in an array.\n    '''\n    seen_number = {}\n    for i in arr:\n        if i in seen_number:\n            seen_number[i] += 1\n        else:\n            seen_number[i] = 1\n            \n    max_value = 0\n    for key,value in seen_number.iteritems():\n        if value > max_value:\n            max_value = value\n    return max_value\n    \ndef find_min_of_duplicate(arr):  \n    '''\n    Write a python function to find the minimum duplicate number in an array.\n    '''\n    seen_number = {}\n    for i in arr:\n        if i in seen_number:\n            seen_number[i] += 1\n        else:\n            seen_number[i] = 1\n            \n    min_value = float(\"inf\")\n    for key,value in seen_number.iteritems():\n        if value < min_value:\n            min_value = value\n    return min_value\n    \ndef sort_list_of_dictionaries(dict_list):  \n    '''\n    Write a python function to sort a list of dictionaries by key.\n    '''\n    return sorted(dict_list, key = lambda item: item['name'])\n    \ndef sort_list_of_dictionaries_without_key(dict_list):  \n    '''\n    Write a python function to sort a list of dictionaries by key.\n    '''\n    return sorted(dict_list, key = lambda item: item['value'])\n    \ndef get_all_keys_of_dictionary(dict):  \n    '''\n    Write a python function to get all keys of a dictionary.\n    '''\n    return sorted(dict.keys())\n    \ndef get_all_values_of_dictionary(dict):  \n    '''\n    Write a python function to get all values of a dictionary.\n    '''\n    return sorted(dict.values())\n    \ndef get_key_from_value(dict, value):  \n    '''\n    Write a python function to get all keys of a dictionary.\n    '''\n    return [key for key,value in dict.iteritems() if value == value]\n    \ndef get_values_from_key(dict, key):  \n    '''\n    Write a python function to get all values of a dictionary.\n    '''\n    return [value for key,value in dict.iteritems() if key == key]\n    \ndef find_average_of_list(list):  \n    '''\n    Write a python function to find the average of a list.\n    '''\n    return sum(list)/len(list)\n    \ndef sort_list_by_length(list):  \n    '''\n    Write a python function to sort a list by length.\n    '''\n    return sorted(list,key=len)\n    \ndef add_element_to_list(element,list):  \n    '''\n    Write a python function to add an element to a list.\n    '''\n    list.append(element)\n    return list\n    \ndef add_multiple_elements_to_list(element_list,list):  \n    '''\n    Write a python function to add multiple elements to a list.\n    '''\n    for element in element_list:\n        list.append(element)\n    return list\n    \ndef get_all_pairs_of_list(list):  \n    '''\n    Write a python function to get all pairs of a list.\n    '''\n    list_len = len(list)\n    for i in range(list_len):\n        for j in range(i+1,list_len):\n            yield list[i],list[j]\n            \ndef get_all_pairs_of_list_with_index(list):  \n    '''\n    Write a python function to get all pairs of a list with index.\n    '''\n    list_len = len(list)\n    for i in range(list_len):\n        for j in range(i+1,list_len):\n            yield i,j\n            \ndef count_pairs_of_list(list):  \n    '''\n    Write a python function to count the number of pairs in a list.\n    '''\n    list_len = len(list)\n    count = 0\n    for i in range(list_len):\n        for j in range(i+1,list_len):\n            count += 1\n    return count\n    \ndef get_first_key_of_dictionary(dict):  \n    '''\n    Write a python function to get the first key of a dictionary.\n    '''\n    return sorted(dict.keys())[0]\n    \ndef get_first_value_of_dictionary(dict):  \n    '''\n    Write a python function to get the first value of a dictionary.\n    '''\n    return sorted(dict.values())[0]\n    \ndef get_last_key_of_dictionary(dict):  \n    '''\n    Write a python function to get the last key of a dictionary.\n    '''\n    return sorted(dict.keys())[-1]\n    \ndef get_last_value_of_dictionary(dict):  \n    '''\n    Write a python function to get the last value of a dictionary.\n    '''\n    return sorted(dict.values())[-1]\n    \ndef get_last_key_value_pairs_of_dictionary(dict):  \n    '''\n    Write a python function to get the last key value pairs of a dictionary.\n    '''\n    for key,value in dict.iteritems():\n        if key == sorted(dict.keys())[-1]:\n            yield value,key\n    \ndef reverse_string(str):  \n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\n    \ndef reverse_string_using_list(str):  \n    '''\n    Write a python function to reverse a string.\n    '''\n    list_str = list(str)\n    list_str.reverse()\n    return ''.join(list_str)\n    \ndef sort_string(str):  \n    '''\n    Write a python function to sort a string.\n    '''\n    return sorted(str)\n    \ndef count_number_of_times_a_string_appears_in_a_list(str,list):  \n    '''\n    Write a python function to count the number of times a string appears in a list.\n    '''\n    list_len = len(list)\n    count = 0\n    for i in range(list_len):\n        if str == list[i]:\n            count += 1\n    return count\n    \ndef remove_duplicate_strings_from_list(list):  \n    '''\n    Write a python function to remove duplicate strings from a list.\n    '''\n    return list(set(list))\n    \ndef find_the_largest_and_smallest_numbers_in_a_list(list):  \n    '''\n    Write a python function to find the largest and smallest numbers in a list.\n    '''\n    return max(list),min(list)\n    \ndef get_index_of_first_occurence_of_a_string_in_a_list(str,list):  \n    '''\n    Write a python function to find the index of the first occurence of a string in a list.\n    '''\n    list_le"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 2\n    if n == 2:\n        return 8\n    if n == 3:\n        return 9\n    else:\n        return 2 + even_Power_Sum(n-1) + (4**5) * even_Power_Sum(n-2)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #base case\n    if n == 0:\n        return 0\n    else:\n        return even_Power_Sum(n-1) + (n**5)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    ans = 0\n    for i in range(2,n+1,2):\n        ans += i**5\n    return ans\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i+1)%2 == 0:\n            sum = sum + (i+1)**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for x in range(2,n+1):\n        if x%2 == 0:\n            result = result + (x**5)\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #Step 1: Initialize a variable that will hold the sum of the first n even natural numbers that are raised to the fifth power\n    total = 0\n    #Step 2: Use for loop to calculate the sum of the first n even natural numbers that are raised to the fifth power\n    for i in range(0, n):\n        #Use the equation 2 * (n * n * n) to find the sum of the first n even natural numbers that are raised to the fifth power\n        total += 2 * (i * i * i * i * i)\n    #Step 3: Return the sum of the first n even natural numbers that are raised to the fifth power\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0: \n        return 0\n    else:\n        total = 2\n        for i in range(2,n+1):\n            if i % 2 == 0:\n                total += i**5\n        return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    if (n%2 == 0):\n        return (n/2 + n/2) + 2*even_Power_Sum(n-1)\n    else:\n        return (n/2 + n/2) + (n/2 + n/2) + 2*even_Power_Sum(n-1)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #base case\n    if n == 0:\n        return 0\n    #recursive case\n    elif n%2 == 0:\n        return even_Power_Sum(n/2) + 5**(n/2)\n    else:\n        return even_Power_Sum(n-1) + 5**(n/2)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s=0\n    for i in range(2,n+1,2):\n        s+=i**5\n    return s\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(t[0], t[1]) for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output_list = []\n    for item in test_list:\n        output_list.append(item[-1])\n    return output_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result\n    \ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[0])\n    return result\n    \ndef middle_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the middle element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[1])\n    return result\n    \ndef get_last_value(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the last element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result\n    \ndef get_first_value(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the first element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[0])\n    return result\n    \ndef chop_list(test_list, index):\n    '''\n    Write a function that takes in a list of tuples and a single index value and returns a list containing each tuple up to that index.\n    '''\n    return test_list[:index]\n    \ndef chop_list_no_return(test_list, index):\n    '''\n    Write a function that takes in a list of tuples and a single index value and returns a list containing each tuple up to that index.\n    '''\n    for i in range(index):\n        test_list.pop(0)\n    return test_list\n    \ndef chop_list_no_return2(test_list, index):\n    '''\n    Write a function that takes in a list of tuples and a single index value and returns a list containing each tuple up to that index.\n    '''\n    for i in range(index):\n        test_list.pop(0)\n    return test_list\n    \ndef is_longer_than(test_list, index):\n    '''\n    Write a function that takes in a list of tuples and a single index value and returns a list containing each tuple up to that index.\n    '''\n    return test_list[index:]\n    \ndef is_longer_than_no_return(test_list, index):\n    '''\n    Write a function that takes in a list of tuples and a single index value and returns a list containing each tuple up to that index.\n    '''\n    for i in range(index):\n        test_list.pop(0)\n    return test_list\n    \ndef is_longer_than_no_return2(test_list, index):\n    '''\n    Write a function that takes in a list of tuples and a single index value and returns a list containing each tuple up to that index.\n    '''\n    for i in range(index):\n        test_list.pop(0)\n    return test_list\n    \ndef front_extract_no_return(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[0])\n    return result\n    \ndef front_extract_no_return2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    return [item[0] for item in test_list]\n    \ndef get_first_two(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the first two elements of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[:2])\n    return result\n    \ndef add_first(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the first element of each tuple plus each tuple in the list.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[0] + item)\n    return result\n    \ndef add_first_no_return(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the first element of each tuple plus each tuple in the list.\n    '''\n    return [item[0] + item for item in test_list]\n    \ndef add_first_no_return2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the first element of each tuple plus each tuple in the list.\n    '''\n    return [item[0] + item for item in test_list]\n    \ndef concat_list(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing each tuple with the first element and the last element of the tuple concatenated.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[0] + item[-1])\n    return result\n    \ndef concat_list_no_return(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing each tuple with the first element and the last element of the tuple concatenated.\n    '''\n    return [item[0] + item[-1] for item in test_list]\n    \ndef concat_list_no_return2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing each tuple with the first element and the last element of the tuple concatenated.\n    '''\n    return [item[0] + item[-1] for item in test_list]\n    \ndef get_all_but_last(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing all but the last element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[:-1])\n    return result\n    \ndef get_all_but_last_no_return(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing all but the last element of each tuple.\n    '''\n    return [item[:-1] for item in test_list]\n    \ndef get_all_but_last_no_return2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing all but the last element of each tuple.\n    '''\n    return [item[:-1] for item in test_list]\n    \ndef join_list(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that is the concatenation of each tuple.\n    '''\n    result = ''\n    for item in test_list:\n        result = result + item\n    return result\n    \ndef join_list_no_return(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that is the concatenation of each tuple.\n    '''\n    return ''.join(test_list)\n    \ndef join_list_no_return2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that is the concatenation of each tuple.\n    '''\n    return ''.join(test_list)\n    \ndef get_all_but_last_chars(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing all but the last characters of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[:-1])\n    return result\n    \ndef get_all_but_last_chars"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(elem[0]) for elem in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Not equal lengths\"\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    if len(list1)!= len(list2):\n        raise IndexError\n    for i in range(0, len(list1)):\n        list1[i] = list1[i] - list2[i]\n    return tuple(list1)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(list(test_tup1)[i] - list(test_tup2)[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(e1 - e2 for e1, e2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i]-test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    res = tuple()\n    for i in range(len(test_tup1)):\n        res += (test_tup1[i] - test_tup2[i],)\n    return res\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    elem_dict1 = dict(test_tup1)\n    elem_dict2 = dict(test_tup2)\n    return tuple([elem_dict1[k] - elem_dict2[k] for k in elem_dict1.keys()])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(operator.sub, test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Write your function here\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] - test_tup2[i],)\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*even_binomial_Coeff_Sum(n-1)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    while n > 0:\n        if n & 1 == 1:\n            sum += math.factorial(n)\n        n = n >> 1\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n+1)/(2*n)/n*even_binomial_Coeff_Sum(n-1)+n/n*even_binomial_Coeff_Sum(n-1)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (n*even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return ((n-1)*even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Your code here\n    # Base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    # Constraint for n\n    elif n < 0:\n        return None\n    # Even case\n    elif n % 2 == 0:\n        return (1 / math.factorial(n)) * (((4 * n) + 1) / (n + 1)) * even_binomial_Coeff_Sum(n - 2)\n    # Odd case\n    else:\n        return (1 / math.factorial(n)) * (((4 * n) + 1) / (n + 1)) * odd_binomial_Coeff_Sum(n - 1)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    assert isinstance(n, int) and n > 0\n    if n == 0 or n == 1:\n        return 1\n    \n    #else\n    return n*(n+1)/2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + n\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coefficient_sum = 0\n    # start your answer with 0\n    for index in range( n):\n        binomial_coefficient_sum += binomial_coefficient(n, index)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binom_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            binom_sum += (-1)**(i+1) / (2*i+1)\n    return binom_sum\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi * (r**2) * h)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    if type(r)!= int or type(h)!= int:\n        raise TypeError('The radius and height of a cylinder must be a whole number.')\n    if r < 0 or h < 0:\n        raise ValueError('The radius and height of a cylinder must be a positive whole number greater than or equal to zero.')\n    return (math.pi * (r**2) * h) / 3\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*r*math.pi*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi * r * r * h) / 3\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = math.pi * (r**2) * h\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return ((pi*r**2)*h)/3.0\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output = {}\n    for key in dict:\n        if dict[key] >= n:\n            output[key] = dict[key]\n    return output\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # create a new dictionary\n    # iterate through the keys, check if key is greater or equal to n\n    # if the key is greater or equal to n, then add to the new dictionary\n    # return the new dictionary\n    new_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # declare empty dictionary\n    new_dict = {}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filtered = {}\n    for key,value in dict.items():\n        if value >= n:\n            dict_filtered[key] = value\n    return dict_filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict2={}\n    for key,value in dict.items():\n        if value>=n:\n            dict2[key]=value\n    return dict2\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    if len(test_tup) == 1:\n        return 1\n    if test_tup[0] == test_tup[1]:\n        return 1 + count_first_elements(test_tup[1:])\n    return count_first_elements(test_tup[1:])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_first = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            num_first += 1\n    return num_first\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([i for i in test_tup[:test_tup.index(1)] if i > 0])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(list(filter(lambda x:x[1]==test_tup[1], test_tup[0])))\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in test_tup:\n        if i == 1:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return sum(1 for element in test_tup if element < test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    res = 0\n    for i in xrange(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            res += 1\n    return res\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for t in test_tup:\n        if t == test_tup[0]:\n            counter += 1\n        else:\n            break\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Example -\n    # [1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10]\n    # Input - (9, 10)\n    # Output - 3\n    \n    num_of_elements = 0\n    \n    for element in test_tup:\n        if element == tuple_element:\n            break\n        else:\n            num_of_elements += 1\n    return num_of_elements\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    count = 0\n    while True:\n        num += count\n        count += 1\n        if num % 10 == 0:\n            return num\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_nums = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...]\n    if n not in dec_nums: return False\n    return True\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n - 1\n    num_list = []\n    for i in xrange(n):\n        num_list.append(i*(i+1))\n    return sum(num_list)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_of_decagonal = 0\n    num_of_decagonal_list = [0]\n    while num_of_decagonal < n:\n        num_of_decagonal += 1\n        num_of_decagonal_list.append(num_of_decagonal)\n    return num_of_decagonal_list[-1]\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1,n):\n        num += i\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # nth decagonal number = n(n+1)/2\n    # nth_dec = n*(n+1)//2\n    # if n is odd, nth_dec = nth_dec - 1\n    return n*(n+1)//2 - 1 if n%2 == 0 else n*(n+1)//2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if isinstance(n, int) and n > 0:\n        return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    result = 0\n    num = 1\n    while result < n:\n        result = num*(num+1)*(2*num+1)\n        num += 1\n    return result\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec = 1\n    num = 1\n    i = 1\n    while True:\n        dec += i*(i+1)//2\n        num += dec\n        if num > n:\n            return i-1\n        i += 1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i, j in enumerate(dlist):\n        if j == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            break\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = None\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            break\n    return (True, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            break\n    return (pos, item)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    position = 0\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(0, len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for num in test_list:\n        if test_list.count(num) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    l=test_list\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i]==l[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list_copy = test_list[:]\n    test_list_copy.sort()\n    for i in xrange(len(test_list_copy)-1):\n        if test_list_copy[i] == test_list_copy[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n    "
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp_list = test_list[:]\n    temp_list.sort()\n    i = 0\n    while i < len(temp_list)-1:\n        if temp_list[i] == temp_list[i+1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Runtime: 48 ms, faster than 98.40% of Python online submissions for Subtract Elements.\n    # Memory Usage: 12.6 MB, less than 31.34% of Python online submissions for Subtract Elements.\n    if len(nums1) > len(nums2):\n        for i in xrange(len(nums2)):\n            nums1[i] = nums1[i] - nums2[i]\n        return nums1\n    else:\n        for i in xrange(len(nums1)):\n            nums1[i] = nums1[i] - nums2[i]\n        return nums1\n    \ndef _sub_list(nums1, nums2):\n    # Runtime: 36 ms, faster than 61.43% of Python online submissions for Subtract Elements.\n    # Memory Usage: 12.9 MB, less than 91.39% of Python online submissions for Subtract Elements.\n    if len(nums1) > len(nums2):\n        return [nums1[i]-nums2[i] for i in xrange(len(nums1))]\n    else:\n        return [nums1[i]-nums2[i] for i in xrange(len(nums1))]\n    \ndef sub_list2(nums1, nums2):\n    # Runtime: 36 ms, faster than 61.43% of Python online submissions for Subtract Elements.\n    # Memory Usage: 12.8 MB, less than 91.39% of Python online submissions for Subtract Elements.\n    if len(nums1) > len(nums2):\n        return [nums1[i]-nums2[i] for i in xrange(len(nums1)) if nums1[i]-nums2[i] >= 0]\n    else:\n        return [nums1[i]-nums2[i] for i in xrange(len(nums1)) if nums1[i]-nums2[i] >= 0]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == 0:\n        return []\n    if len(nums2) == 0:\n        return nums1\n    if len(nums1) > len(nums2):\n        bigger_num = nums1\n        smaller_num = nums2\n    else:\n        bigger_num = nums2\n        smaller_num = nums1\n    result = []\n    for i in range(len(smaller_num)):\n        result.append(bigger_num[i] - smaller_num[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    subs = []\n    for num1, num2 in zip(nums1, nums2):\n        subs.append(num1 - num2)\n    return subs\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        return nums2,nums1\n    return nums1,nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)==0:\n        return nums2\n    if len(nums2)==0:\n        return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\ndef sum_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [num1+num2 for num1,num2 in zip(nums1,nums2)]\ndef shuffle_list(nums1,nums2):\n    '''\n    Write a function to shuffle two lists of equal length element-wise.\n    '''\n    return [nums1[i]+nums2[i] for i in range(len(nums1))]\ndef remove_nth_from_end(nums1,nums2):\n    '''\n    Write a function that takes the first list and a number n and removes the nth item from the end of the list.\n    '''\n    nums1.pop()\n    return nums1\ndef missing_substring(str1,str2):\n    '''\n    Write a function that takes in two strings and returns the string that is missing from the other string\n    '''\n    return str1.replace(str2,'')\ndef remove_all_before(nums1,nums2):\n    '''\n    Write a function that takes in two lists of numbers and returns a new list where all the values less than 5 are removed\n    from the first list and the remaining values from the second list are added to the end of the new list.\n    '''\n    return nums1+nums2\ndef remove_duplicates(nums1,nums2):\n    '''\n    Write a function that takes in two lists and returns a new list where all duplicate values in the first list are removed\n    from the new list.\n    '''\n    return list(set(nums1))+list(set(nums2))\ndef rotate_list(nums1,nums2):\n    '''\n    Write a function that takes in two lists and returns the new list where the values of the first list are rearranged according\n    to their original positions in the second list.\n    '''\n    return nums1[nums2.index(nums1[0]):]+nums1[:nums2.index(nums1[0])]\ndef reverse_list(nums1,nums2):\n    '''\n    Write a function that takes in two lists and returns the new list where the values of the first list are reversed according\n    to their original positions in the second list.\n    '''\n    return nums2[:nums1.index(nums2[0])]+nums2[nums1.index(nums2[0]):][::-1]+nums2[nums1.index(nums2[0]):][::-1]\ndef sum_tuples(tup1,tup2):\n    '''\n    Write a function that takes in two tuples and returns the sum of the values in the tuples.\n    '''\n    return tuple([sum(x) for x in zip(tup1,tup2)])\ndef find_rotation_point(nums1,nums2):\n    '''\n    Write a function that takes in two lists of equal length and returns the index of the element in nums1 that's equal to the\n    element at the same index in nums2.\n    '''\n    return nums1.index(nums2[0])\ndef binary_search(nums1,nums2,target):\n    '''\n    Write a function that takes in two lists of equal length and returns the index of the element in nums1 that's equal to the\n    element at the same index in nums2.\n    '''\n    start=0\n    end=len(nums1)-1\n    while start<=end:\n        mid=(start+end)//2\n        if target==nums1[mid]:\n            return mid\n        elif target<nums1[mid]:\n            end=mid-1\n        else:\n            start=mid+1\n    return None\ndef find_rotation_point_2(nums1,nums2):\n    '''\n    Write a function that takes in two lists of equal length and returns the index of the element in nums1 that's equal to the\n    element at the same index in nums2.\n    '''\n    if len(nums1)!=len(nums2):\n        return None\n    start=0\n    end=len(nums1)-1\n    while start<=end:\n        mid=(start+end)//2\n        if nums1[mid]==nums2[mid]:\n            return mid\n        elif nums1[mid]<nums2[mid]:\n            end=mid-1\n        else:\n            start=mid+1\n    return None\ndef get_midpoint_index(nums1,nums2):\n    '''\n    Write a function that takes in two lists of equal length and returns the index of the element in nums1 that's equal to the\n    element at the same index in nums2.\n    '''\n    if len(nums1)!=len(nums2):\n        return None\n    start=0\n    end=len(nums1)-1\n    while start<=end:\n        mid=(start+end)//2\n        if nums1[mid]==nums2[mid]:\n            return mid\n        elif nums1[mid]<nums2[mid]:\n            end=mid-1\n        else:\n            start=mid+1\n    return None\ndef find_rotation_point_3(nums1,nums2):\n    '''\n    Write a function that takes in two lists of equal length and returns the index of the element in nums1 that's equal to the\n    element at the same index in nums2.\n    '''\n    if len(nums1)!=len(nums2):\n        return None\n    start=0\n    end=len(nums1)-1\n    while start<=end:\n        mid=(start+end)//2\n        if nums1[mid]==nums2[mid]:\n            return mid\n        elif nums1[mid]<nums2[mid]:\n            end=mid-1\n        else:\n            start=mid+1\n    return None\ndef contains_duplicates(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a boolean indicating whether the list contains any duplicate values.\n    '''\n    return len(nums)>len(set(nums))\ndef move_zeroes(nums1,nums2):\n    '''\n    Write a function that takes in two lists of equal length and returns the new list where the values from the first list are\n    replaced by the values from the second list.\n    '''\n    return [nums2[x] if nums1[x]==0 else nums1[x] for x in range(len(nums1))]\ndef remove_duplicates_from_sorted_list(nums):\n    '''\n    Write a function that takes in a sorted list and returns the new list where all duplicate values in the new list are removed\n    '''\n    if len(nums)<=1:\n        return nums\n    start=0\n    end=len(nums)-1\n    while start<=end:\n        if nums[start]==nums[end]:\n            end-=1\n        else:\n            nums[start+1],nums[end]=nums[end],nums[start+1]\n            start+=1\n            end-=1\n    return nums\ndef sort_list(nums):\n    '''\n    Write a function that takes in a list and returns a sorted list with the same values as the original list\n    '''\n    if len(nums)<=1:\n        return nums\n    start=0\n    end=len(nums)-1\n    while start<=end:\n        if nums[start]>nums[end]:\n            nums[start],nums[end]=nums[end],nums[start]\n        start+=1\n        end-=1\n    return nums\ndef rotate_list(nums,k):\n    '''\n    Write a function that takes in a list and an integer k and returns the new list where the values from the original list are\n    rotated by the integer k positions to the right.\n    '''\n    if len(nums)<="
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\ndef len_of_list(nums):\n    '''\n    Write a function to return the length of a list.\n    '''\n    return len(nums)\ndef append_of_list(nums,addition):\n    '''\n    Write a function to append a number onto a list.\n    '''\n    return nums + [addition]\ndef sort_by_last(nums):\n    '''\n    Write a function to sort a list by the last element of each tuple.\n    '''\n    return sorted(nums,key=lambda x:x[-1])\ndef sort_by_last_rev(nums):\n    '''\n    Write a function to sort a list by the last element of each tuple in reverse order.\n    '''\n    return sorted(nums,key=lambda x:x[-1],reverse=True)\ndef slice_list(nums,start_idx,end_idx):\n    '''\n    Write a function to slice a list.\n    '''\n    return nums[start_idx:end_idx]\ndef slice_list_rev(nums,start_idx,end_idx):\n    '''\n    Write a function to slice a list in reverse order.\n    '''\n    return nums[start_idx:end_idx][::-1]\ndef remove_dups(nums):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    seen = set()\n    seen_add = seen.add\n    return [x for x in nums if not (x in seen or seen_add(x))]\ndef reverse_list(nums):\n    '''\n    Write a function to reverse a list.\n    '''\n    return nums[::-1]\ndef swap_list(nums1,nums2):\n    '''\n    Write a function to swap the values of two variables.\n    '''\n    return nums1,nums2\ndef swap_list_rev(nums1,nums2):\n    '''\n    Write a function to swap the values of two variables in reverse order.\n    '''\n    return nums2,nums1\ndef get_index(nums,val):\n    '''\n    Write a function to get the index of the first occurence of a value in a list.\n    '''\n    return nums.index(val)\ndef get_index_rev(nums,val):\n    '''\n    Write a function to get the index of the last occurence of a value in a list.\n    '''\n    return nums.rindex(val)\ndef get_index_of_all(nums,val):\n    '''\n    Write a function to get the indexes of all occurences of a value in a list.\n    '''\n    return [idx for idx,v in enumerate(nums) if v == val]\ndef get_index_of_all_rev(nums,val):\n    '''\n    Write a function to get the indexes of all occurences of a value in a list in reverse order.\n    '''\n    return [idx for idx,v in enumerate(nums) if v == val][::-1]\ndef get_slice_range(nums,start_idx,end_idx):\n    '''\n    Write a function to get a slice of a list.\n    '''\n    return nums[start_idx:end_idx]\ndef get_slice_range_rev(nums,start_idx,end_idx):\n    '''\n    Write a function to get a slice of a list in reverse order.\n    '''\n    return nums[start_idx:end_idx][::-1]\ndef even_odd_list(nums):\n    '''\n    Write a function to get a list of even and odd numbers from a list.\n    '''\n    return ([num for num in nums if num % 2 == 0],\n            [num for num in nums if num % 2!= 0])\ndef even_odd_list_rev(nums):\n    '''\n    Write a function to get a list of even and odd numbers from a list in reverse order.\n    '''\n    return ([num for num in nums if num % 2 == 0][::-1],\n            [num for num in nums if num % 2!= 0][::-1])\ndef remove_first_occurence(nums,val):\n    '''\n    Write a function to remove the first occurence of a value in a list.\n    '''\n    return nums[nums.index(val)+1:]\ndef remove_last_occurence(nums,val):\n    '''\n    Write a function to remove the last occurence of a value in a list.\n    '''\n    return nums[:nums.rindex(val)]\ndef remove_val_rev(nums,val):\n    '''\n    Write a function to remove a value from a list in reverse order.\n    '''\n    return nums[:nums.rindex(val)]+nums[nums.rindex(val)+1:]\ndef add_val_rev(nums,val):\n    '''\n    Write a function to add a value to a list in reverse order.\n    '''\n    return nums[:nums.rindex(val)]+[val]+nums[nums.rindex(val)+1:]\ndef modify_list(nums,val,add):\n    '''\n    Write a function to modify a list by adding a value to a list.\n    '''\n    return nums + [val]\ndef modify_list_rev(nums,val,add):\n    '''\n    Write a function to modify a list by adding a value to a list in reverse order.\n    '''\n    return [add] + nums\ndef partition_list(nums,start_idx,end_idx,val):\n    '''\n    Write a function to partition a list.\n    '''\n    return nums[:start_idx]+[val]+nums[end_idx+1:]\ndef partition_list_rev(nums,start_idx,end_idx,val):\n    '''\n    Write a function to partition a list.\n    '''\n    return nums[end_idx+1:]+[val]+nums[:start_idx]\ndef partition_list_of_tuples(nums,start_idx,end_idx,val):\n    '''\n    Write a function to partition a list of tuples.\n    '''\n    return nums[:start_idx]+[(val,num[1])]+nums[end_idx+1:]\ndef partition_list_of_tuples_rev(nums,start_idx,end_idx,val):\n    '''\n    Write a function to partition a list of tuples.\n    '''\n    return nums[end_idx+1:]+[(val,num[1])]+nums[:start_idx]\ndef insert_at_idx(nums,val,idx):\n    '''\n    Write a function to insert a value at a specific index in a list.\n    '''\n    return nums[:idx]+[val]+nums[idx:]\ndef insert_at_idx_rev(nums,val,idx):\n    '''\n    Write a function to insert a value at a specific index in a list in reverse order.\n    '''\n    return nums[:idx]+[val]+nums[idx:][::-1]\ndef insert_at_val_rev(nums,val,val_to_insert):\n    '''\n    Write a function to insert a value at a specific index in a list in reverse order.\n    '''\n    return nums[:nums.rindex(val)]+[val_to_insert]+nums[nums.rindex(val):][::-1]\ndef insert_at_val(nums,val,val_to_insert):\n    '''\n    Write a function to insert a value at a specific index in a list.\n    '''\n    return nums[:nums.rindex(val)]+[val_to_insert]+nums[nums.rindex(val)+1:]\ndef insert_at_idx"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums3 = []\n    for i in range(len(nums1)):\n        nums3.append(nums1[i] - nums2[i])\n    return nums3\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in range(len(str(n))):\n        if (int(str(n)[i])!= 0 and int(str(n)[i]) > int(str(n)[i-1])):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) is not int: \n        raise TypeError(\"%s is not an int!\"%str(n))\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d={}\n    for i in range(10):\n        d[i]=0\n    for i in str(n):\n        d[int(i)]+=1\n    for i in d:\n        if(d[i]>i):\n            return False\n    return True\n        \ndef test_validate():\n    assert validate(12)==True\n    assert validate(45)==False\n    assert validate(22)==True\n    assert validate(2)==False\n    assert validate(14)==True\n    assert validate(134)==True\n    assert validate(1111)==True\n    assert validate(0)==True\n    assert validate(-12)==False\n    assert validate(-45)==False\n    assert validate(-22)==False\n    assert validate(-2)==False\n    assert validate(-14)==False\n    assert validate(-134)==False\n    assert validate(-1111)==False\n    assert validate(-0)==False\n    \n    \n    \ndef is_equal(n):\n    '''\n    Write a python function takes in an integer and check whether the number is equal to the sum of the square of the digits of the number.\n    '''\n    temp=n\n    total=0\n    while temp>0:\n        total+=pow(temp%10,2)\n        temp//=10\n    return n==total\n    \ndef test_is_equal():\n    assert is_equal(121)==True\n    assert is_equal(23)==False\n    assert is_equal(12)==False\n    assert is_equal(45)==True\n    assert is_equal(22)==False\n    assert is_equal(2)==False\n    assert is_equal(14)==False\n    assert is_equal(134)==False\n    assert is_equal(1111)==True\n    assert is_equal(0)==True\n    assert is_equal(-12)==False\n    assert is_equal(-45)==False\n    assert is_equal(-22)==False\n    assert is_equal(-2)==False\n    assert is_equal(-14)==False\n    assert is_equal(-134)==False\n    assert is_equal(-1111)==False\n    assert is_equal(-0)==True\n    \n    \ndef is_strictly_divisible(n,d):\n    '''\n    Write a python function takes in two integers n and d and check whether n is divisible by d.\n    '''\n    while n%d==0:\n        n//=d\n    return n==1\n    \ndef test_is_strictly_divisible():\n    assert is_strictly_divisible(12,2)==True\n    assert is_strictly_divisible(9,3)==False\n    assert is_strictly_divisible(9,9)==True\n    assert is_strictly_divisible(12,12)==True\n    assert is_strictly_divisible(11,11)==False\n    assert is_strictly_divisible(10,11)==True\n    assert is_strictly_divisible(0,11)==False\n    assert is_strictly_divisible(0,12)==True\n    assert is_strictly_divisible(15,3)==True\n    assert is_strictly_divisible(15,4)==False\n    assert is_strictly_divisible(15,5)==True\n    assert is_strictly_divisible(15,6)==False\n    assert is_strictly_divisible(15,9)==True\n    assert is_strictly_divisible(15,10)==False\n    assert is_strictly_divisible(15,15)==True\n    assert is_strictly_divisible(15,16)==False\n    assert is_strictly_divisible(15,17)==True\n    assert is_strictly_divisible(15,18)==False\n    assert is_strictly_divisible(15,19)==True\n    assert is_strictly_divisible(15,20)==False\n    assert is_strictly_divisible(15,21)==True\n    assert is_strictly_divisible(15,22)==False\n    assert is_strictly_divisible(15,23)==True\n    assert is_strictly_divisible(15,24)==False\n    assert is_strictly_divisible(15,25)==True\n    assert is_strictly_divisible(15,26)==False\n    assert is_strictly_divisible(15,27)==True\n    assert is_strictly_divisible(15,28)==False\n    assert is_strictly_divisible(15,29)==True\n    assert is_strictly_divisible(15,30)==False\n    assert is_strictly_divisible(15,31)==True\n    assert is_strictly_divisible(15,32)==False\n    assert is_strictly_divisible(15,33)==True\n    assert is_strictly_divisible(15,34)==False\n    assert is_strictly_divisible(15,35)==True\n    assert is_strictly_divisible(15,36)==False\n    assert is_strictly_divisible(15,37)==True\n    assert is_strictly_divisible(15,38)==False\n    assert is_strictly_divisible(15,39)==True\n    assert is_strictly_divisible(15,40)==False\n    assert is_strictly_divisible(15,41)==True\n    assert is_strictly_divisible(15,42)==False\n    assert is_strictly_divisible(15,43)==True\n    assert is_strictly_divisible(15,44)==False\n    assert is_strictly_divisible(15,45)==True\n    assert is_strictly_divisible(15,46)==False\n    assert is_strictly_divisible(15,47)==True\n    assert is_strictly_divisible(15,48)==False\n    assert is_strictly_divisible(15,49)==True\n    assert is_strictly_divisible(15,50)==False\n    assert is_strictly_divisible(15,51)==True\n    assert is_strictly_divisible(15,52)==False\n    assert is_strictly_divisible(15,53)==True\n    assert is_strictly_divisible(15,54)==False\n    assert is_strictly_divisible(15,55)==True\n    assert is_strictly_divisible(15,56)==False\n    assert is_strictly_divisible(15,57)==True\n    assert is_strictly_divisible(15,58)==False\n    assert is_strictly_divisible(15,59)==True\n    assert is_strictly_divisible(15,60)==False\n    assert is_strictly_divisible(15,61)==True\n    assert is_strictly_divisible(15,62)==False\n    assert is_strictly_divisible(15,63)==True\n    assert is_strictly_divisible(15,64)==False\n    assert is_strictly_divisible(15,65)==True\n    assert is_strictly_divisible(15,66)==False\n    assert is_strictly_divisible(15,67)==True\n    assert is_strictly_divisible(15,68)==False\n    assert is_strictly_divisible(15,69)==True\n    assert is_strictly_divisible(15,70)==False\n    assert is_strictly_divisible(15,71)==True\n    assert is_strictly_divisible(15,72)==False\n    assert is_strictly_divisible(15,73)==True\n    assert is_strictly_divisible(15,74)==False\n    assert is_strictly_divisible(15,75)==True\n    assert is_strictly_divisible(15,76)==False\n    assert is_strictly_divisible(15,77)==True\n    assert is_strictly_di"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0 for x in range(10)]\n    while n!=0:\n        r = n%10\n        freq[r] = freq[r]+1\n        n = n/10\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for i in n:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for k, v in d.items():\n        if v > k:\n            return False\n    return True\ndef is_digit(s):\n    '''\n    Write a python function is_digit() that checks whether a string is a digit. A string is a digit if it only contains digits.\n    '''\n    return s.isdigit()\ndef is_phone(s):\n    '''\n    Write a python function is_phone() that checks whether a string is a phone number. A phone number is a string that contains a number (string.digits) in it that can be dialled from a valid number. \n    A valid number is a number with exactly 8 digits. The function should return True if the string is a phone number and False otherwise.\n    '''\n    if is_digit(s) and len(s) == 8:\n        return True\n    return False\ndef is_email(s):\n    '''\n    Write a python function is_email() that checks whether a string is an email address. An email address is a string that starts with a '@' and is followed by a domain name. The domain name is an alphanumeric string. For example,'mike@example.com' is an email address and '@example.com' is not an email address. \n    '''\n    if s[0] == '@' and is_alphanum(s[1:]):\n        return True\n    return False\ndef is_alphanum(s):\n    '''\n    Write a python function is_alphanum() that checks whether a string is alphanumeric. A string is alphanumeric if it is either alphabetically or numerically (i.e. letters and numbers) characters.\n    '''\n    return s.isalpha() or s.isdigit()\ndef is_unique(s):\n    '''\n    Write a python function is_unique() that checks whether a string contains all unique characters. A string is unique if every character in the string appears exactly once.\n    '''\n    if len(s) == len(set(s)):\n        return True\n    return False\ndef is_palindrome(s):\n    '''\n    Write a python function is_palindrome() that checks whether a string is a palindrome. A string is a palindrome if the reverse of the string is the same as the string.\n    '''\n    if s == s[::-1]:\n        return True\n    return False\ndef is_anagram(s1, s2):\n    '''\n    Write a python function is_anagram() that checks whether two strings are anagrams. Two strings are anagrams if they are made up of the same letters, but may be in a different order. For example, 'abc' and 'cba' are anagrams while 'python' and 'nut' are not.\n    '''\n    if sorted(s1) == sorted(s2):\n        return True\n    return False\ndef is_pangram(s):\n    '''\n    Write a python function is_pangram() that checks whether a string is a pangram. A pangram is a sentence that contains every single letter of the alphabet at least once. For example, the string 'The quick brown fox jumps over the lazy dog' is a pangram, but the string 'Hello' is not.\n    '''\n    if len(s) == 26:\n        for i in range(97, 123):\n            if chr(i) not in s:\n                return False\n        return True\n    return False\ndef is_panagram(s):\n    '''\n    Write a python function is_panagram() that checks whether a string is a panagram. A panagram is a sentence that contains every single letter of the alphabet at least once. For example, the string 'The quick brown fox jumps over the lazy dog' is a panagram, but the string 'Hello' is not.\n    '''\n    return is_pangram(s) and is_unique(s)\ndef is_sorted(s):\n    '''\n    Write a python function is_sorted() that checks whether a string is sorted. A string is sorted if the characters in the string appear in alphabetical order. For example, 'apple' and 'elppa' are sorted while 'azbb' and 'cba' are not.\n    '''\n    return sorted(s) == list(s)\ndef is_anagram_of(s1, s2):\n    '''\n    Write a python function is_anagram_of() that checks whether a string is an anagram of another string. The anagram of a string is another string that is made up of the same characters but in a different order. For example, 'cat' and 'act' are anagrams, while 'dog' and 'god' are not.\n    '''\n    return is_anagram(s2, s1) and is_unique(s1)\ndef is_reverse(s1, s2):\n    '''\n    Write a python function is_reverse() that checks whether a string is a reverse of another string. The reverse of a string is the string that is the same in reverse. For example, 'abc' is the reverse of 'cba', while 'hello' and 'elpp' are not.\n    '''\n    return s1 == s2[::-1]\ndef is_palindrome_perm(s1, s2):\n    '''\n    Write a python function is_palindrome_perm() that checks whether a string is a permutation of a palindrome. A permutation is a rearrangement of the characters of a string into a palindrome. For example, 'abc' is a permutation of 'abcabc', while 'abbc' and 'aabc' are not.\n    '''\n    return sorted(s1) == sorted(s2) and len(s1) == len(s2)\ndef is_palindrome_perm_list(s):\n    '''\n    Write a python function is_palindrome_perm_list() that checks whether a string is a permutation of a palindrome. A permutation is a rearrangement of the characters of a string into a palindrome. For example, 'abc' is a permutation of 'abcabc', while 'abbc' and 'aabc' are not.\n    '''\n    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for k, v in d.items():\n        if v % 2:\n            return False\n    return True\ndef is_palindrome_perm_stack(s):\n    '''\n    Write a python function is_palindrome_perm_stack() that checks whether a string is a permutation of a palindrome. A permutation is a rearrangement of the characters of a string into a palindrome. For example, 'abc' is a permutation of 'abcabc', while 'abbc' and 'aabc' are not.\n    '''\n    stack = []\n    for i in s:\n        if not stack or stack[-1]!= i:\n            stack.append(i)\n        else:\n            stack.pop()\n    return len(stack) == 0\ndef is_rotated_word(s1, s2):\n    '''\n    Write a python function is_rotated_word() that checks whether a string is a rotated word. A word is a string made up of the same letters but in a different order. For example, 'waterbottle' is a rotated word, while 'bottlewater' and 'tawerbwb' are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    return s2 in s1 + s1\ndef is_rotated_word_perm(s1, s2):\n    '''\n    Write a python function is_rotated_word_perm() that checks whether a string is a rotated word permutation of another string. A word permutation is a rearrangement of the letters of a word into a word. For example, 'waterbottle' is a word permutation of 'bottlewater', while 'bottlewat' and 'bottelwater' are not.\n    '''\n    return is_rotated_word(s2, s1) and is_unique(s1)\ndef is_rotated_string(s1, s2):\n    '''\n    Write a python function is_rotated_string() that checks whether a string is a rotated strin"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return False if sum(map(lambda x: int(x) > int(x), str(n))) else True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n))!= 1:\n        return False\n    digits = [int(x) for x in str(n)]\n    freq = [0] * 10\n    for i in digits:\n        freq[i] += 1\n    for i in freq:\n        if i > 1:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Initialize array of length 10 to store the frequency of each digit in the integer\n    freq = [0]*10\n    \n    # Loop through each digit in the integer and increment the frequency of each digit in the array\n    for digit in range(len(n)):\n        freq[int(n[digit])] += 1\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0}\n    for i in str(n):\n        if d[i]>0:\n            return False\n        else:\n            d[i]+=1\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    dict1 = {}\n    for i in n:\n        if i in dict1:\n            dict1[i]+=1\n        else:\n            dict1[i]=1\n    for i in dict1:\n        if dict1[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return len(list)==len(set(list))\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(element==i for i in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(i == element for i in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    element_in_list = True\n    for item in list:\n        if item!= element:\n            element_in_list = False\n            break\n    return element_in_list\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    element_list=[]\n    for i in list:\n        if i == element:\n            element_list.append(True)\n        else:\n            element_list.append(False)\n    return all(element_list)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    elif list[0] == element:\n        return True\n    else:\n        return check_element(list[1:],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        if list[0] == element:\n            return True\n        else:\n            return False\n    elif len(list) > 1:\n        if list[0] == element:\n            return check_element(list[1:],element)\n        else:\n            return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('^a(.*)b{2,3}$', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    match = pattern.search(text)\n    if match:\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('a.b{2,3}',text))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('[a]{2}[b]{1,3}')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_two_three_v2(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(a{2}|b{1,3}))')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_two_three_v3(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(a{2}|b{1,3}))')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_two_three_v4(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return True\n    else:\n        return False\ndef text_match_two_three_v5(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v6(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v7(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v8(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v9(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v10(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v11(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v12(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v13(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v14(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v15(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v16(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v17(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v18(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('(?=(?P<match>a{2}|b{1,3}))')\n    m = pattern.match(text)\n    if m:\n        return m.group('match')\n    else:\n        return None\ndef text_match_two_three_v19(text):\n    '''\n    Use a negative lookahead assertion to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Match Found'\n    else:\n        return 'Match Not Found'\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.b{2,3}'\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'ab{2,3}', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # define the pattern\n    pattern = re.compile(r'\\bab+\\b')\n    # the regex match the string \n    match = pattern.search(text)\n    # check whether the match is successful\n    if match:\n        # if the match is successful, print the result\n        print ('Found a match!')\n    else:\n        # if the match failed, print the result\n        print ('No match!')\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a_a_b = re.compile(r'ab{2,3}')\n    return a_a_b.match(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(ab|ab{2,3})')\n    matches = pattern.search(text)\n    if matches:\n        return matches.group()\n    else:\n        return None\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k==1:\n        return max(a)\n    else:\n        temp_sum = sum(a)\n        for i in xrange(k-1):\n            a = [i for i in a]\n            temp_sum += max_sub_array_sum_repeated(a, n, k-1)\n        return temp_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = sum(a[:k])\n    current_sum = max_sum\n    for i in range(k,n):\n        current_sum = current_sum + a[i] - a[i-k]\n        max_sum = max(current_sum, max_sum)\n    return max_sum\n    \n    "
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = len(a)\n    if l < k:\n        return max(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if k == 1:\n        return max(a)\n    \n    best_sum = None\n    for i in xrange(len(a)):\n        for j in xrange(i+k, len(a)+1, k):\n            curr_sum = sum(a[i:j])\n            if best_sum is None or curr_sum > best_sum:\n                best_sum = curr_sum\n    \n    return best_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k > n:\n        return -1\n    \n    if k == 1:\n        return max(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n    \n    k = min(k, n)\n    max_sum = 0\n    start = 0\n    end = 0\n    max_sum = 0\n    #print(k, n, a)\n    for i in range(n):\n        if end == n - 1:\n            end = n - 1\n            max_sum += sum(a[start:end + 1])\n            start = end + 1\n            end = end + 1\n        else:\n            end += 1\n            max_sum += sum(a[start:end + 1])\n            #print(end, i, max_sum)\n            if end == n:\n                end = n - 1\n                max_sum += sum(a[start:end + 1])\n                start = end + 1\n                end = end + 1\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n==0:\n        return 0\n    start=0\n    end=0\n    max_so_far=a[0]\n    max_repeat=a[0]\n    for i in xrange(1,n):\n        end=i\n        if i==k:\n            start=end-k+1\n        max_so_far=max(max_so_far,sum(a[start:end+1]))\n    return max_so_far\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(k, n):\n        a[i] = a[i - 1] + a[i]\n    return max(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < k:\n        return 0\n    result = a[0]\n    for i in range(1, n):\n        result = max(result + a[i], a[i])\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if type(n)!= int:\n        return \"Please input a valid number\"\n    if n < 1:\n        return \"Please input a valid number\"\n    if n == 1:\n        return 1\n    else:\n        return n**2 + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return 0\n    else:\n        return n ** 2 + square_Sum(n - 2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if not type(n) is int:\n        raise TypeError('n must be an integer')\n    if n < 0:\n        raise ValueError('n must be >= 0')\n    if n == 0:\n        return 0\n    return (n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n=int(n)\n    if n==0:\n        return 0\n    else:\n        return int(((n*(n+1))/2)*(n+1))\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(map(lambda x: x**2, filter(lambda x: x%2==0, range(n))))\n    \ndef fibonacci_sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n fibonacci numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return fibonacci_sum(n-1) + fibonacci_sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1) if i%2==0])\n    \ndef factorial(n):\n    '''\n    Write a python function takes in an integer n and returns the factorial of n.\n    '''\n    return reduce(lambda x,y: x*y, range(1,n+1))\n    \ndef fibonacci(n):\n    '''\n    Write a python function takes in an integer n and returns the nth value in the Fibonacci sequence.\n    '''\n    if n<=1:\n        return n\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #your code here\n    return sum([i*i for i in range(1, n+1, 2)])\n    \n    "
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    assert(n>=0 and type(n)==int)\n    return sum([i**2 for i in range(0,n+1) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([x**2 for x in range(1, n+1) if x%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n = int(n)\n    if n > 1:\n        return n*(n+1)*(2*n+1)/6\n    return n\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = [len(x) for x in list1]\n    max_length = max(lengths)\n    max_length_index = lengths.index(max_length)\n    return list1[max_length_index]\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    list2 = []\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n            list2 = item\n    return list2\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #create a new list to store the length of each list\n    maxlen = []\n    #create a new list to store the maximum length\n    maxlen = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        maxlen = maxlen + [len(i)]\n    # return the max length\n    return max(maxlen)\n    #start writing your code here\n    \ndef contains_duplicates(list1):\n    '''\n    Write a function to determine whether the list contains duplicates or not.\n    '''\n    #create a new list to store the length of each list\n    dup_list = []\n    #create a new list to store the maximum length\n    dup_list = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        dup_list = dup_list + [i]\n    # return the max length\n    return len(dup_list)!= len(set(dup_list))\n    #start writing your code here\n    \ndef odd_even_list(list1):\n    '''\n    Write a function to return an odd-even list.\n    '''\n    #create a new list to store the length of each list\n    even_list = []\n    #create a new list to store the maximum length\n    even_list = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        even_list = even_list + [i]\n    # return the max length\n    return even_list\n    #start writing your code here\n    \ndef max_consecutive(list1):\n    '''\n    Write a function to return the maximum consecutive elements in a list.\n    '''\n    #create a new list to store the length of each list\n    max_consecutive = []\n    #create a new list to store the maximum length\n    max_consecutive = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        max_consecutive = max_consecutive + [max(i)]\n    # return the max length\n    return max(max_consecutive)\n    #start writing your code here\n    \ndef remove_sublist(list1):\n    '''\n    Write a function to remove all sublist in a list.\n    '''\n    #create a new list to store the length of each list\n    sublist = []\n    #create a new list to store the maximum length\n    sublist = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        sublist = sublist + [i]\n    # return the max length\n    return sublist\n    #start writing your code here\n    \ndef find_rotation_point(list1):\n    '''\n    Write a function to return the point of the list that is at which it is rotationally equilavent to the other list.\n    '''\n    #create a new list to store the length of each list\n    rotation_point = []\n    #create a new list to store the maximum length\n    rotation_point = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        rotation_point = rotation_point + [rotation_point]\n    # return the max length\n    return rotation_point\n    #start writing your code here\n    \ndef palindrome(list1):\n    '''\n    Write a function to check whether a list is a palindrome or not.\n    '''\n    #create a new list to store the length of each list\n    palindrome = []\n    #create a new list to store the maximum length\n    palindrome = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        palindrome = palindrome + [i]\n    # return the max length\n    return palindrome == palindrome[::-1]\n    #start writing your code here\n    \ndef rotate_left(list1):\n    '''\n    Write a function to rotate a list 90 degrees clockwise.\n    '''\n    #create a new list to store the length of each list\n    rotated_list = []\n    #create a new list to store the maximum length\n    rotated_list = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        rotated_list = rotated_list + [i]\n    # return the max length\n    return rotated_list[::-1]\n    #start writing your code here\n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list.\n    '''\n    #create a new list to store the length of each list\n    reversed_list = []\n    #create a new list to store the maximum length\n    reversed_list = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        reversed_list = reversed_list + [i]\n    # return the max length\n    return reversed_list[::-1]\n    #start writing your code here\n    \ndef replace_list(list1, list2):\n    '''\n    Write a function to replace all elements in a list with other elements in a list.\n    '''\n    #create a new list to store the length of each list\n    replaced_list = []\n    #create a new list to store the maximum length\n    replaced_list = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        replaced_list = replaced_list + [i]\n    # return the max length\n    return replaced_list\n    #start writing your code here\n    \ndef same_frequency(list1, list2):\n    '''\n    Write a function to determine whether two lists have the same frequency of elements.\n    '''\n    #create a new list to store the length of each list\n    same_frequency = []\n    #create a new list to store the maximum length\n    same_frequency = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        same_frequency = same_frequency + [i]\n    # return the max length\n    return same_frequency == same_frequency[::-1]\n    #start writing your code here\n    \ndef has_loop(list1):\n    '''\n    Write a function to determine whether a list has a loop or not.\n    '''\n    #create a new list to store the length of each list\n    loop = []\n    #create a new list to store the maximum length\n    loop = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        loop = loop + [i]\n    # return the max length\n    return len(loop) > 1\n    #start writing your code here\n    \ndef is_anagram(list1, list2):\n    '''\n    Write a function to determine if two lists are anagram or not.\n    '''\n    #create a new list to store the length of each list\n    anagram = []\n    #create a new list to store the maximum length\n    anagram = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        anagram = anagram + [i]\n    # return the max length\n    return anagram == anagram[::-1]\n    #start writing your code here\n    \ndef union(list1, list2):\n    '''\n    Write a function to return the union of two lists.\n    '''\n    #create a new list to store the length of each list\n    union = []\n    #create a new list to store the maximum length\n    union = []\n    # for each list in the list of lists\n    for i in list1:\n        #create a variable to store the max length of the list\n        union = unio"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #list1 = [1,2,3,[1,2,3,4],5,6,7,8,9]\n    max1 = len(list1)\n    for i in list1:\n        if len(i) > max1:\n            max1 = len(i)\n    print max1\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lmax = []\n    for l in list1:\n        lmax.append(len(l))\n    return max(lmax)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(a) for a in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for l in list1:\n        max_len = max(max_len,len(l))\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    n = len(list1)\n    if n == 0:\n        return\n    max_len = 0\n    for i in xrange(n):\n        max_len = max(max_len,len(list1[i]))\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = list1[0]\n    for element in list1:\n        if len(result) < len(element):\n            result = element\n    return result\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return k\n    if n == 2:\n        return k*(k-1)\n    else:\n        return count_no_of_ways(n-2, k) + k*(k-1)*count_no_of_ways(n-3, k) \n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def backtrack(remaining, used): \n        if remaining == 0: \n            return 1\n        elif used == len(colors): \n            return 0\n        count = 0\n        for i in range(remaining, 0, -1): \n            if colors[used]!= colors[remaining - i]: \n                continue\n            used += 1\n            count += backtrack(remaining - i, used)\n            used -= 1\n        return count\n    return backtrack(n, 0)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # If k is 0, then there are no ways to paint the fence.\n    if k == 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    ways[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways[i][j] += ways[i-1][j]\n            if i-1 >= 0:\n                if i-1 >= 1 and j-1 >= 0:\n                    ways[i][j] += ways[i-2][j-1]\n            if i-1 >= 0 and j+1 <= k:\n                ways[i][j] += ways[i-1][j+1]\n    return ways[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k)] for j in range(n)]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_recursive(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==0 and k==0:\n        return 0\n    if n==0:\n        return 1\n    if k==0:\n        return 0\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 0 or k < 0:\n        return 0\n    if n == 0:\n        return 1\n    if k == 1:\n        return n\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-2, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # brute force approach\n    # dp[i][j] = num of ways of painting the fence with i colors and j posts\n    # for every j, 1<=k<=n, 2<=j<=n-1, dp[i][j] = sum(dp[i-1][j-1], dp[i-1][j])\n    # dp[0][j] = 1\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(k+1):\n        dp[i][0] = 1\n    for j in range(1, n+1):\n        for i in range(1, k+1):\n            if i>j:\n                break\n            for k in range(j, 0, -1):\n                dp[i][j] += dp[i][k-1]\n    return dp[k][n]\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n<m):\n        return \"Quotient cannot be calculated since %d is smaller than %d\" %(n,m)\n    else:\n        return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    # Check if n is less than 0.\n    if n < 0:\n        return None\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \ndef find_remainder(n,m):  \n    '''\n    Write a python function to find remainder of two numbers (rounded down to the nearest integer).\n    '''\n    return n%m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (m/n)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \ndef find_mod(n,m):  \n    '''\n    Write a python function to find remainder of two numbers (rounded down to the nearest integer).\n    '''\n    return n%m\n    \ndef find_max(n,m,k):  \n    '''\n    Write a python function to find max of three numbers (using if-else statements).\n    '''\n    if n>m and n>k:\n        return n\n    elif m>n and m>k:\n        return m\n    else:\n        return k\n    \ndef find_min(n,m,k):  \n    '''\n    Write a python function to find min of three numbers (using if-else statements).\n    '''\n    if n<m and n<k:\n        return n\n    elif m<n and m<k:\n        return m\n    else:\n        return k\n    \ndef find_max_of_three(n1,n2,n3):  \n    '''\n    Write a python function to find max of three numbers (using elif statements).\n    '''\n    if n1>n2 and n1>n3:\n        return n1\n    elif n2>n1 and n2>n3:\n        return n2\n    else:\n        return n3\n    \ndef find_min_of_three(n1,n2,n3):  \n    '''\n    Write a python function to find min of three numbers (using elif statements).\n    '''\n    if n1<n2 and n1<n3:\n        return n1\n    elif n2<n1 and n2<n3:\n        return n2\n    else:\n        return n3\n    \ndef find_max_of_three_comprehension(n1,n2,n3):  \n    '''\n    Write a python function to find max of three numbers (using list comprehension).\n    '''\n    return max([n1,n2,n3])\n    \ndef find_min_of_three_comprehension(n1,n2,n3):  \n    '''\n    Write a python function to find min of three numbers (using list comprehension).\n    '''\n    return min([n1,n2,n3])\n    \ndef find_max_of_three_zip(n1,n2,n3):  \n    '''\n    Write a python function to find max of three numbers (using zip()).\n    '''\n    tuple1 = (n1,n2,n3)\n    return max(tuple1)\n    \ndef find_min_of_three_zip(n1,n2,n3):  \n    '''\n    Write a python function to find min of three numbers (using zip()).\n    '''\n    tuple2 = (n1,n2,n3)\n    return min(tuple2)\n    \ndef find_max_of_three_set(n1,n2,n3):  \n    '''\n    Write a python function to find max of three numbers (using set()).\n    '''\n    set1 = set([n1,n2,n3])\n    return max(set1)\n    \ndef find_min_of_three_set(n1,n2,n3):  \n    '''\n    Write a python function to find min of three numbers (using set()).\n    '''\n    set2 = set([n1,n2,n3])\n    return min(set2)\n    \ndef find_max_of_three_dict(n1,n2,n3):  \n    '''\n    Write a python function to find max of three numbers (using dictionary).\n    '''\n    dictionary = {'n1':n1,'n2':n2,'n3':n3}\n    return max(dictionary, key = dictionary.get)\n    \ndef find_min_of_three_dict(n1,n2,n3):  \n    '''\n    Write a python function to find min of three numbers (using dictionary).\n    '''\n    dictionary = {'n1':n1,'n2':n2,'n3':n3}\n    return min(dictionary, key = dictionary.get)\n    \ndef find_max_of_three_default(n1,n2,n3,n4):  \n    '''\n    Write a python function to find max of three numbers (using default arguments).\n    '''\n    if n1>n2 and n1>n3 and n1>n4:\n        return n1\n    elif n2>n1 and n2>n3 and n2>n4:\n        return n2\n    else:\n        return n3\n    \ndef find_min_of_three_default(n1,n2,n3,n4):  \n    '''\n    Write a python function to find min of three numbers (using default arguments).\n    '''\n    if n1<n2 and n1<n3 and n1<n4:\n        return n1\n    elif n2<n1 and n2<n3 and n2<n4:\n        return n2\n    else:\n        return n3\n    \ndef find_max_of_three_lambda(n1,n2,n3):  \n    '''\n    Write a python function to find max of three numbers (using lambda functions).\n    '''\n    return max(n1,n2,n3)\n    \ndef find_min_of_three_lambda(n1,n2,n3):  \n    '''\n    Write a python function to find min of three numbers (using lambda functions).\n    '''\n    return min(n1,n2,n3)\n    \ndef find_max_of_three_lambda_comprehension(n1,n2,n3):  \n    '''\n    Write a python function to find max of three numbers (using lambda functions).\n    '''\n    return max(n1,n2,n3)\n    \ndef find_min_of_three_lambda_comprehension(n1,n2,n3):  \n    '''\n    Write a python function to find min of three numbers (using lambda functions).\n    '''\n    return min(n1,n2,n3)\n    \ndef find_max_of_three_lambda_zip(n1,n2,n3):  \n    '''\n    Write a python function to find max of three numbers (using lambda functions).\n    '''\n    tuple1 = (n1,n2,n3)\n    return max(tuple1)\n    \ndef find_min_of_three_lambda_zip(n1,n2,n3):  \n    '''\n    Write a python function to find min of three numbers (using lambda functions).\n    '''\n    tuple2 = (n1,n2,n3)\n    return min(tuple2)\n    \ndef find_max_of_three_lambda_set(n1,n2,n3):  \n    '''\n    Write a python function to find max of three numbers (using lambda functions).\n    '''\n    set1 = set([n1,n2,n3])\n    return max(set1)\n    \ndef find_min_of_three_lambda_set(n1,n2,n3):  \n    '''\n    Write a python function to find min of three numbers (using lambda functions).\n    '''\n    set2 = set([n1,n2,n3])\n    return min(set2)\n    \ndef find_max_of_three_lambda_dict(n1,n2,n3):  \n    '''\n    Write a python function to find max of three numbers (using lambda functions).\n    '''\n    dictionary = {'n1':n1,'n2':n2,'n3':n3}\n    return max(dictionary, key = dictionary.get)\n    \ndef find_min_of_three_lambda_dict(n1,n2,n3):  \n    '''\n    Write a python function to find min of three numbers (using lambda functions).\n    '''\n    dictionary = {'n1':n1,'n2':n2,'n3':n3}\n    return min(dictionary, key = dictionary.get)\n    \ndef find_max_of_three_lambda_default(n1,n2,n3,n4)"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n//m\n    r = n%m\n    return(q)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return -1\n    else:\n        return int(n/m)\n    \ndef find_remainder(n,m):  \n    '''\n    Write a python function to find remainder of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return -1\n    else:\n        return int(n%m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 0\n    if n == 0:\n        return None\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return -find(m,n+m)\n    else:\n        return find(m,n-m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n / m\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    h2=math.sqrt((w**2+h**2-2*w*h)/2)\n    return h2\ndef area_rectangle(l,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*w\ndef area_triangle(l,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (l*h)/2\ndef area_trianon(b,h):\n    '''\n    Write a function to find the area of a trianon.\n    '''\n    return (b*h)/2\ndef area_square(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return l**2\ndef area_trapezoid(l1,l2,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return 1/2*(l1+l2)*h\ndef area_kite(l1,l2):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    return 1/2*l1*l2\ndef area_parallelogram(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_trapezoid2(l1,l2,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 1/2*(l1+l2)*h\ndef area_isosceles_triangle(b,h):\n    '''\n    Write a function to find the area of a isosceles triangle.\n    '''\n    return b*h/2\ndef area_triangle2(l,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return l*h/2\ndef area_diamond(l):\n    '''\n    Write a function to find the area of a diamond.\n    '''\n    return 1/4*l**2\ndef area_rhombus(l1,l2):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return l1*l2/2\ndef area_rombo(b,h):\n    '''\n    Write a function to find the area of a rombo.\n    '''\n    return 1/2*b*h\ndef area_parallelogram2(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef area_circle2(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_hexagon(l):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 3*l**2/2\ndef area_hexagon2(l):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 3*l**2/2\ndef area_octagon(l):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return l**2\ndef area_triangle3(l,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return l*h/2\ndef area_triangle4(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return b*h/2\ndef area_diamond2(l):\n    '''\n    Write a function to find the area of a diamond.\n    '''\n    return 1/4*l**2\ndef area_rhombus2(l1,l2):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return l1*l2/2\ndef area_rombo2(b,h):\n    '''\n    Write a function to find the area of a rombo.\n    '''\n    return 1/2*b*h\ndef area_hexagon3(l):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 3*l**2/2\ndef area_hexagon4(l):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 3*l**2/2\ndef area_octagon3(l):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return l**2\ndef area_octagon4(l):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return l**2\ndef area_rombo3(b,h):\n    '''\n    Write a function to find the area of a rombo.\n    '''\n    return 1/2*b*h\ndef area_rombo4(b,h):\n    '''\n    Write a function to find the area of a rombo.\n    '''\n    return 1/2*b*h\ndef area_octagon5(l):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return l**2\ndef area_octagon6(l):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return l**2\ndef area_hexagon5(l):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 3*l**2/2\ndef area_hexagon6(l):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 3*l**2/2\ndef area_hexagon7(l):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 3*l**2/2\ndef area_hexagon8(l):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 3*l**2/2\ndef area_hexagon9(l):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 3*l**2/2\ndef area_hexagon10(l):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 3*l**2/2\ndef area_octagon7(l):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return l**2\ndef area_octagon8(l):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return l**2\ndef area_octagon9(l):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return l**2\ndef area_octagon10(l):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return l**2\ndef area_diamond3(l):\n    '''\n    Write a function to find the area of a diamond.\n    '''\n    return 1/4*l**2\ndef area_diamond4(l):\n    '''\n    Write a function to find the area of a diamond.\n    '''\n    return 1/4*l**2\ndef area_diamond5(l):\n    '''\n    Write a function to find the area of a diamond.\n    '''\n    return 1/4*l**2\ndef area_diamond6(l):\n    '''\n    Write a function to find the area of a diamond.\n    '''\n    return 1/4*l**2\ndef area_diamond7(l):\n    '''\n    Write a function to find the area of a diamond.\n    '''\n    return 1/4*l**2\ndef area_diamond8(l):\n    '''\n    Writ"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    if w == h:\n        return \"Invalid: Both sides are equal\"\n    if w > h:\n        return \"Invalid: Side A is larger than side B\"\n    if w < h:\n        return \"Invalid: Side B is larger than side A\"\n    if h == 0:\n        return \"Invalid: Side A cannot be 0\"\n    if h == 1:\n        return \"Invalid: Side B cannot be 1\"\n    if h == 2:\n        return \"Invalid: Side A cannot be 2\"\n    if h == 3:\n        return \"Invalid: Side B cannot be 3\"\n    return \"Invalid: Side A cannot be 1 or 2\"\ndef valid_triangle(w,h):\n    '''\n    Write a function to check if a triangle is valid.\n    '''\n    if w == h:\n        return \"Invalid: Both sides are equal\"\n    if w > h:\n        return \"Invalid: Side A is larger than side B\"\n    if w < h:\n        return \"Invalid: Side B is larger than side A\"\n    if h == 0:\n        return \"Invalid: Side A cannot be 0\"\n    if h == 1:\n        return \"Invalid: Side B cannot be 1\"\n    if h == 2:\n        return \"Invalid: Side A cannot be 2\"\n    if h == 3:\n        return \"Invalid: Side B cannot be 3\"\n    return True\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    if w == h:\n        return \"Invalid: Both sides are equal\"\n    if w > h:\n        return \"Invalid: Side A is larger than side B\"\n    if w < h:\n        return \"Invalid: Side B is larger than side A\"\n    if h == 0:\n        return \"Invalid: Side A cannot be 0\"\n    if h == 1:\n        return \"Invalid: Side B cannot be 1\"\n    if h == 2:\n        return \"Invalid: Side A cannot be 2\"\n    if h == 3:\n        return \"Invalid: Side B cannot be 3\"\n    return \"Invalid: Side A cannot be 1 or 2\"\ndef valid_triangle(w,h):\n    '''\n    Write a function to check if a triangle is valid.\n    '''\n    if w == h:\n        return \"Invalid: Both sides are equal\"\n    if w > h:\n        return \"Invalid: Side A is larger than side B\"\n    if w < h:\n        return \"Invalid: Side B is larger than side A\"\n    if h == 0:\n        return \"Invalid: Side A cannot be 0\"\n    if h == 1:\n        return \"Invalid: Side B cannot be 1\"\n    if h == 2:\n        return \"Invalid: Side A cannot be 2\"\n    if h == 3:\n        return \"Invalid: Side B cannot be 3\"\n    return True\ndef perimeter_triangle(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    if w == h:\n        return \"Invalid: Both sides are equal\"\n    if w > h:\n        return \"Invalid: Side A is larger than side B\"\n    if w < h:\n        return \"Invalid: Side B is larger than side A\"\n    if h == 0:\n        return \"Invalid: Side A cannot be 0\"\n    if h == 1:\n        return \"Invalid: Side B cannot be 1\"\n    if h == 2:\n        return \"Invalid: Side A cannot be 2\"\n    if h == 3:\n        return \"Invalid: Side B cannot be 3\"\n    return w + h\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    if w == h:\n        return \"Invalid: Both sides are equal\"\n    if w > h:\n        return \"Invalid: Side A is larger than side B\"\n    if w < h:\n        return \"Invalid: Side B is larger than side A\"\n    if h == 0:\n        return \"Invalid: Side A cannot be 0\"\n    if h == 1:\n        return \"Invalid: Side B cannot be 1\"\n    if h == 2:\n        return \"Invalid: Side A cannot be 2\"\n    if h == 3:\n        return \"Invalid: Side B cannot be 3\"\n    return \"Invalid: Side A cannot be 1 or 2\"\ndef valid_triangle(w,h):\n    '''\n    Write a function to check if a triangle is valid.\n    '''\n    if w == h:\n        return \"Invalid: Both sides are equal\"\n    if w > h:\n        return \"Invalid: Side A is larger than side B\"\n    if w < h:\n        return \"Invalid: Side B is larger than side A\"\n    if h == 0:\n        return \"Invalid: Side A cannot be 0\"\n    if h == 1:\n        return \"Invalid: Side B cannot be 1\"\n    if h == 2:\n        return \"Invalid: Side A cannot be 2\"\n    if h == 3:\n        return \"Invalid: Side B cannot be 3\"\n    return True\ndef perimeter_triangle(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    if w == h:\n        return \"Invalid: Both sides are equal\"\n    if w > h:\n        return \"Invalid: Side A is larger than side B\"\n    if w < h:\n        return \"Invalid: Side B is larger than side A\"\n    if h == 0:\n        return \"Invalid: Side A cannot be 0\"\n    if h == 1:\n        return \"Invalid: Side B cannot be 1\"\n    if h == 2:\n        return \"Invalid: Side A cannot be 2\"\n    if h == 3:\n        return \"Invalid: Side B cannot be 3\"\n    return w + h\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    if w == h:\n        return \"Invalid: Both sides are equal\"\n    if w > h:\n        return \"Invalid: Side A is larger than side B\"\n    if w < h:\n        return \"Invalid: Side B is larger than side A\"\n    if h == 0:\n        return \"Invalid: Side A cannot be 0\"\n    if h == 1:\n        return \"Invalid: Side B cannot be 1\"\n    if h == 2:\n        return \"Invalid: Side A cannot be 2\"\n    if h == 3:\n        return \"Invalid: Side B cannot be 3\"\n    return \"Invalid: Side A cannot be 1 or 2\"\ndef valid_triangle(w,h):\n    '''\n    Write a function to check if a triangle is valid.\n    '''\n    if w == h:\n        return \"Invalid: Both sides are equal\"\n    if w > h:\n        return \"Invalid: Side A is larger than side B\"\n    if w < h:\n        return \"Invalid: Side B is larger than side A\"\n    if h == 0:\n        return \"Invalid: Side A cannot be 0\"\n    if h == 1:\n        return \"Invalid: Side B cannot be 1\"\n    if h == 2:\n        return \"Invalid: Side A cannot be 2\"\n    if h == 3:\n        return \"Invalid: Side B cannot be 3\"\n    return True\ndef perimeter_triangle(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    if w == h:\n        return \"Invalid: Both sides are equal\"\n    if w > h:\n        return \"Invalid: Side A is larger than side B\"\n    if w < h:\n        return \"Invalid: Side B is larger than side A\"\n    if h == 0:\n        return \"Invalid: Side A cannot be 0\"\n    if h == 1:\n        return \"Invalid: Side B cannot be 1\"\n    if h == 2:\n        return \"Invalid: Side A cannot be 2\"\n    if h == 3:\n        return \"Invalid: Side B cannot be 3\"\n    return w + h\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    if w == h:\n        return \"Invalid: Both sides are equal\"\n    if w > h:\n        return \"Invalid: Side A is larger than side B\""
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\ndef otherside_cuberoot(a):\n    '''\n    Write a function to find the third side of a cuberoot.\n    '''\n    return math.sqrt(a**3)\ndef otherside_cubic(a):\n    '''\n    Write a function to find the third side of a cubic.\n    '''\n    return a**(1/3)\ndef otherside_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef otherside_triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return a+b+c\ndef otherside_triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return math.sqrt(a*b*c)/2\ndef otherside_trapezium_area(a,b,h):\n    '''\n    Write a function to find the area of a triangular prism.\n    '''\n    return (a+b)/2*h\ndef otherside_rhombus_area(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return a*b\ndef otherside_pentagon_area(a,b,c):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    return (a*b)/2\ndef otherside_hexagon_area(a,b,c):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return (a*b)/2\ndef otherside_octagon_area(a,b,c,d):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return (a*b*c)/2\ndef otherside_nonagon_area(a,b,c):\n    '''\n    Write a function to find the area of a nonagon.\n    '''\n    return (a*b*c)/2\ndef otherside_decagon_area(a):\n    '''\n    Write a function to find the area of a decagon.\n    '''\n    return (a**2)**(1/2)\ndef otherside_decagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a decagon.\n    '''\n    return a*math.sqrt(2*(a**2))\ndef otherside_hexagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a hexagon.\n    '''\n    return a*6\ndef otherside_octagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a octagon.\n    '''\n    return a*8\ndef otherside_nonagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a nonagon.\n    '''\n    return a*5\ndef otherside_square_perimeter(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return a*4\ndef otherside_rectangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return a*2+b*2\ndef otherside_rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef otherside_square_area(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a**2\ndef otherside_isosceles_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of an isosceles triangle.\n    '''\n    return a+b\ndef otherside_isosceles_area(a,b):\n    '''\n    Write a function to find the area of an isosceles triangle.\n    '''\n    return math.sqrt(a*b)/2\ndef otherside_equilateral_triangle_area(a,b):\n    '''\n    Write a function to find the area of a equilateral triangle.\n    '''\n    return (a**2)*(math.sqrt(3)/4)\ndef otherside_quadrilateral_perimeter(a,b,c,d):\n    '''\n    Write a function to find the perimeter of a quadrilateral.\n    '''\n    return a+b+c+d\ndef otherside_quadrilateral_area(a,b,c,d):\n    '''\n    Write a function to find the area of a quadrilateral.\n    '''\n    return a*b/2\ndef otherside_square_perimeter(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return a*4\ndef otherside_circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef otherside_circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*math.pi*r\ndef otherside_pythagorean_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a pythagorean triplet.\n    '''\n    return a+b\ndef otherside_pythagorean_area(a,b):\n    '''\n    Write a function to find the area of a pythagorean triplet.\n    '''\n    return math.sqrt(a**2+b**2)\ndef otherside_sphere_area(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*math.pi*r**2/3\ndef otherside_sphere_perimeter(r):\n    '''\n    Write a function to find the perimeter of a sphere.\n    '''\n    return 4*math.pi*r\ndef otherside_sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef otherside_cylinder_area(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return 2*math.pi*r*h\ndef otherside_cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef otherside_pyramid_area(a,b,c):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    return b*c/2\ndef otherside_pyramid_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a pyramid.\n    '''\n    return a+b+c\ndef otherside_hexagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a hexagon.\n    '''\n    return a*6\ndef otherside_hexagon_area(a):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return a**2\ndef otherside_octagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a octagon.\n    '''\n    return a*8\ndef otherside_octagon_area(a):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return a**2\ndef otherside_snowflake_area(a,b,c):\n    '''\n    Write a function to find the area of a snowflake.\n    '''\n    return a*b*c/4\ndef otherside_hexagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a hexago"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (w**2)+(h**2)==(h**2):\n        return h\n    elif (h**2)+(w**2)==(w**2):\n        return w\n    else:\n        return None\ndef side_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2)+(h**2))\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**0.5\ndef otherside_righttriangle(b,h):\n    '''\n    Write a function to find the third side of a right triangle.\n    '''\n    return b**2+h**2\ndef rightangle_righttriangle(w,h):\n    '''\n    Write a function to find the third side of a right triangle.\n    '''\n    return (w**2+h**2)**0.5\ndef perimeter_rectangle(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*2+b*2\ndef rectangle_rectangle(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*b\ndef rectangle_circle(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*b+l+b\ndef rectangle_square(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*b+l+b\ndef rectangle_otherside(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*2+b*2\ndef square_square(l):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*4\ndef rectangle_rectangle_diagonal(l,b):\n    '''\n    Write a function to find the diagonal of a rectangle.\n    '''\n    return (l**2+b**2)**0.5\ndef rectangle_circle_diagonal(l,b):\n    '''\n    Write a function to find the diagonal of a rectangle.\n    '''\n    return (l**2+b**2)**0.5+l+b\ndef square_circle_diagonal(l):\n    '''\n    Write a function to find the diagonal of a rectangle.\n    '''\n    return l+l\ndef circle_circle_diagonal(r):\n    '''\n    Write a function to find the diagonal of a rectangle.\n    '''\n    return r+r\ndef rectangle_rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*2+b*2\ndef rectangle_circle_perimeter(l,r):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*2+r*2\ndef rectangle_square_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*2+b*2\ndef rectangle_otherside_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*2+b*2\ndef square_rectangle_perimeter(l):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*4\ndef square_circle_perimeter(l):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*4\ndef circle_circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*r\ndef otherside_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a+b+c)/2\ndef triangle_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a*b+b*c+c*a)/2\ndef triangle_circle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a*b+b*c+c*a)/2\ndef triangle_square(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a*b+b*c+c*a)/2\ndef triangle_otherside(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a+b+c)/2\ndef circle_circle(r):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 2*r\ndef triangle_rectangle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a*b+b*c+c*a)/2\ndef circle_rectangle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a*b+b*c+c*a)/2\ndef rectangle_circle(l,b,r):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (l*b+b*r+r*l)/2\ndef circle_square(r):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 2*r\ndef triangle_rectangle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a*b+b*c+c*a)/2\ndef rectangle_circle(l,b,r):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (l*b+b*r+r*l)/2\ndef rectangle_square(l,b,r):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (l*b+b*r+r*l)/2\ndef rectangle_otherside(l,b):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (l*2+b*2+2*l+b)/2\ndef square_circle(l):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return l+l\ndef circle_rectangle(r,l):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return l+l\ndef rectangle_square(l,b):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return l+l\ndef square_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a*b+b*c+c*a)/2\ndef circle_circle_perimeter(r):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 2*r\ndef triangle_circle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a*b+b*c+c*a)/2\ndef circle_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a*b+b*c+c*a)/2\ndef rectangle_circle(l,b,r):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (l*b+b*r+r*l)/2\ndef triangle_square(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a*b+b*c+c*a)/2\ndef circle_square(r):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return 2*r\ndef triangle_rectangle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (a*b+b*c+c*a)/2\ndef rectangle_circle"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle3(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle4(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle5(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle6(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle7(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle8(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle9(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle10(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle11(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle12(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle13(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle14(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle15(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle16(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle17(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle18(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle19(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle20(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle21(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle22(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle23(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle24(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle25(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle26(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle27(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle28(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle29(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangle30(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt(a**2+b**2)\n    return c\ndef otherside_rightangl"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return h*w/(math.sqrt(w**2+h**2))\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**(1/2)\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # mv = 0\n    # for i in range(0, len(listval)):\n    #     if mv < listval[i]:\n    #         mv = listval[i]\n    # return mv\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for i in range(len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in listval:\n        if i > maxval:\n            maxval = i\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[-1]\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return 0\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([div for div in range(1, number+1) if number % div == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 1\n    for n in range(2, number):\n        if number % n == 0:\n            div += n\n    return div\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(2, number+1):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    divisor = 1\n    while divisor < number:\n        if number % divisor == 0:\n            result += divisor\n        divisor += 1\n    return result\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 1\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            div_sum += i\n            div_sum += number / i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 0\n    i = 1\n    while i <= number:\n        if number % i == 0:\n            divisors += i\n        i += 1\n    return divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 1:\n        return 0\n    return number * sum([i for i in range(2, number) if number % i == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # base case\n    if number <= 1:\n        return number\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # 1. use the merge sort method to divide the array into two parts\n    # 2. compare the first part with the second part and find the count\n    \n    # 3. use recursion to count the inversions\n    \n    # 4. for every function call, we can do 2 things\n    # 4.1 count the inversions for the left part\n    # 4.2 count the inversions for the right part\n    # 4.3 return the sum of the two counts\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr_len = len(arr)\n    if arr_len < 2:\n        return arr_len\n    else:\n        return get_Inv_Count(arr[:arr_len/2]) + get_Inv_Count(arr[arr_len/2:])\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            if (arr[i] > arr[j]): \n                count += 1\n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in xrange(n): \n        for j in xrange(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1:\n        return 0\n    elif len(arr) == 2:\n        return int(arr[1] < arr[0])\n    else:\n        mid = len(arr)/2\n        left_count = get_Inv_Count(arr[:mid])\n        right_count = get_Inv_Count(arr[mid:])\n        inv_count = 0\n        i = 0\n        j = 0\n        while i < len(arr) and j < len(arr):\n            if arr[i] < arr[j]:\n                inv_count += len(arr[i:])\n                break\n            elif arr[i] > arr[j]:\n                inv_count += len(arr[:j])\n                i += 1\n                j += 1\n            else:\n                i += 1\n                j += 1\n        return inv_count + left_count + right_count\n    \ndef get_count_inv(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1:\n        return 0\n    elif len(arr) == 2:\n        return int(arr[1] < arr[0])\n    else:\n        mid = len(arr)/2\n        left_count = get_count_inv(arr[:mid])\n        right_count = get_count_inv(arr[mid:])\n        return left_count + right_count + merge_arr(arr[:mid], arr[mid:])\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # If array has less than 2 elements, there is no inversion.\n    if len(arr) < 2:\n        return 0\n    # If array has exactly 2 elements, there is no inversion.\n    if len(arr) == 2:\n        if arr[0] <= arr[1]:\n            return 0\n        else:\n            return 1\n    \n    # If array has more than 2 elements, then elements are compared to the pivot.\n    # Count inversions in the left and right side of the array.\n    # Merge the sorted array back to original array.\n    # Call recursively.\n    else:\n        # Initialize pivot value.\n        pivot = arr[-1]\n        # Initialize left and right side of array.\n        left = []\n        right = []\n        # Loop through array.\n        for i in range(len(arr)-1):\n            # If element is less than pivot, append it to left side.\n            if arr[i] < pivot:\n                left.append(arr[i])\n            # If element is greater than pivot, append it to right side.\n            elif arr[i] > pivot:\n                right.append(arr[i])\n        # Left and right side have different sizes.\n        if len(left)!= len(right):\n            return 1 + get_Inv_Count(left) + get_Inv_Count(right)\n        # Left and right side have same size.\n        else:\n            # Return result of left and right side.\n            return get_Inv_Count(left) + get_Inv_Count(right)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    if n == 1: \n        return 0\n    else:\n        mid = n//2\n        left = arr[:mid]\n        right = arr[mid:]\n        merged = get_Inv_Count(left) + get_Inv_Count(right)\n        i = j = k = 0\n        inv_count = 0\n        while i<len(left) and j<len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n                inv_count += len(left)-i\n            k += 1\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n        return inv_count + merged\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return 0, arr\n    else:\n        less, grt = get_Inv_Count(arr[:int(len(arr)/2)])\n        less_2, grt_2 = get_Inv_Count(arr[int(len(arr)/2):])\n        return less + grt_2 + get_Inv_Count_helper(arr[int(len(arr)/2):], less_2, grt_2)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for item in list1:\n        if isinstance(item, list):\n            yield from flatten_list(item)\n        else:\n            yield item\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    try:\n        for item in list1:\n            if type(item) == type([]):\n                for item2 in flatten_list(item):\n                    yield item2\n            else:\n                yield item\n    except TypeError:\n        yield list1\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in flatten_list(item):\n                yield subitem\n        else:\n            yield item\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return reduce(lambda x,y: x+y, list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    from collections import deque\n    deq = deque(list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(chain.from_iterable(list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            for item in sublist:\n                flat_list.append(item)\n        else:\n            flat_list.append(sublist)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return sum(list1, [])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def recur(nestedList):\n        return [item for sublist in nestedList for item in sublist]\n    return recur(list1)\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    tups = list(stdata)\n    if not tups:\n        return 0\n    tups.sort()\n    max_agg = tups[0][1]\n    for tup in tups:\n        if tup[1] > max_agg:\n            max_agg = tup[1]\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = {}\n    for st, c in stdata:\n        aggregate.setdefault(st, 0)\n        aggregate[st] += c\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = 0\n    for i in stdata:\n        max_val += i[1]\n    return max_val\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    return max(i[2] for i in stdata)\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    ans = 0\n    for s, d in stdata:\n        ans = max(ans, (d * s))\n    return ans\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    summ = 0\n    for val in stdata:\n        summ += val\n    return summ\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    summ = 0\n    for val in stdata:\n        summ += val\n    return summ\ndef max_and_min(stdata):\n    '''\n    Write a function to calculate the maximum aggregate and minimum aggregate from the list of tuples.\n    '''\n    max_val = 0\n    min_val = 0\n    for val in stdata:\n        if val > max_val:\n            max_val = val\n        if val < min_val:\n            min_val = val\n    return (max_val, min_val)\ndef max_and_min_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate and minimum aggregate from the list of tuples.\n    '''\n    max_val = 0\n    min_val = 0\n    for val in stdata:\n        if val > max_val:\n            max_val = val\n        if val < min_val:\n            min_val = val\n    return (max_val + min_val) / 2\ndef max_and_min_aggregate_sorted(stdata):\n    '''\n    Write a function to calculate the maximum aggregate and minimum aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    max_val = 0\n    min_val = 0\n    for val in stdata:\n        if val > max_val:\n            max_val = val\n        if val < min_val:\n            min_val = val\n    return (max_val + min_val) / 2\ndef avg(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    return sum(stdata) / len(stdata)\ndef avg_sorted(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    return sum(stdata) / len(stdata)\ndef median(stdata):\n    '''\n    Write a function to calculate the median aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    n = len(stdata)\n    if n % 2 == 0:\n        med_index = (n / 2) - 1\n        med_val = (stdata[med_index] + stdata[med_index + 1]) / 2\n    else:\n        med_index = n / 2\n        med_val = stdata[med_index]\n    return med_val\ndef median_sorted(stdata):\n    '''\n    Write a function to calculate the median aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    n = len(stdata)\n    if n % 2 == 0:\n        med_index = (n / 2) - 1\n        med_val = (stdata[med_index] + stdata[med_index + 1]) / 2\n    else:\n        med_index = n / 2\n        med_val = stdata[med_index]\n    return med_val\ndef mode(stdata):\n    '''\n    Write a function to calculate the mode aggregate from the list of tuples.\n    '''\n    mode_dict = defaultdict(int)\n    for val in stdata:\n        mode_dict[val] += 1\n    mode_dict = sorted(mode_dict.items(), key=lambda x: x[1], reverse=True)\n    return mode_dict[0][0]\ndef mode_sorted(stdata):\n    '''\n    Write a function to calculate the mode aggregate from the list of tuples.\n    '''\n    mode_dict = defaultdict(int)\n    stdata.sort()\n    for val in stdata:\n        mode_dict[val] += 1\n    mode_dict = sorted(mode_dict.items(), key=lambda x: x[1], reverse=True)\n    return mode_dict[0][0]\ndef percentile(stdata, percentile):\n    '''\n    Write a function to calculate the percentile aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    k = (len(stdata) / 100) * percentile\n    if k.is_integer():\n        return stdata[int(k)]\n    else:\n        return stdata[int(k) + 1]\ndef percentile_sorted(stdata, percentile):\n    '''\n    Write a function to calculate the percentile aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    k = (len(stdata) / 100) * percentile\n    if k.is_integer():\n        return stdata[int(k)]\n    else:\n        return stdata[int(k) + 1]\ndef multimode(stdata):\n    '''\n    Write a function to calculate the multimode aggregate from the list of tuples.\n    '''\n    mode_dict = defaultdict(int)\n    for val in stdata:\n        mode_dict[val] += 1\n    mode_dict = sorted(mode_dict.items(), key=lambda x: x[1], reverse=True)\n    return mode_dict[0][0]\ndef multimode_sorted(stdata):\n    '''\n    Write a function to calculate the multimode aggregate from the list of tuples.\n    '''\n    mode_dict = defaultdict(int)\n    stdata.sort()\n    for val in stdata:\n        mode_dict[val] += 1\n    mode_dict = sorted(mode_dict.items(), key=lambda x: x[1], reverse=True)\n    return mode_dict[0][0]\ndef covariance(stdata1, stdata2):\n    '''\n    Write a function to calculate the covariance aggregate from the list of tuples.\n    '''\n    summ = 0\n    n = len(stdata1)\n    for i in range(n):\n        summ += (stdata1[i] - stdata2[i]) ** 2\n    return summ / n\ndef covariance_sorted(stdata1, stdata2):\n    '''\n    Write a function to calculate the covariance aggregate from the list of tuples.\n    '''\n    summ = 0\n    n = len(stdata1)\n    for i in range(n):\n        summ += (stdata1[i] - stdata2[i]) ** 2\n    return summ / n\ndef correlation(stdata1, stdata2):\n    '''\n    Write a function to calculate the correlation aggregate from the list of tuples.\n    '''\n    summ = 0\n    n = len(stdata1)\n    for i in range(n):\n        summ += (stdata1[i] - stdata2[i]) ** 2\n    avg1 = sum(stdata1) / n\n    avg2 = sum(stdata2) / n\n    summ /= (n * avg1 * avg2) ** 0.5\n    return summ\ndef correlation_sorted(stdata1, stdata2):\n    '''\n    Write a function to calculate the correlation aggregate from the list of tuples.\n    '''\n    summ = 0\n    n = len(stdata1)\n    for i in range(n):\n        summ += (stdata1[i] - stdata2[i]) ** 2\n    avg1 = sum(stdata1) / n\n    avg2 = sum(stdata2) / n\n    summ /= (n * avg1 * avg2) ** 0.5\n    return summ\ndef count_and_sum(stdata):\n    '''\n    Write a function to calculate the count aggregate and sum aggregate from the list of tuples.\n    '''\n    count = 0\n    sum_val = 0\n    for val in stdata:\n        sum_val += val\n        count += 1\n    return (count, sum_val)\ndef count_and_sum_sorted(stdata):\n    '''\n    Write a function to calculate the count aggregate and sum aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    count = 0\n    sum_val = 0\n    for val in stdata:\n        sum_val += val\n        count += 1\n    return "
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = sorted(stdata, key=lambda t: t[0])\n    for i in range(len(stdata)-1):\n        if stdata[i][0] == stdata[i+1][0]:\n            stdata[i] = (stdata[i][0], stdata[i][1]+stdata[i+1][1])\n    return max(stdata, key=lambda t: t[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(int)\n    for student, course in stdata:\n        data[course] += 1\n    return max(data.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = [list(map(int,stdata[i].split())) for i in range(len(stdata))]\n    unique_levels = set([data[i][0] for i in range(len(data))])\n    unique_levels = list(unique_levels)\n    unique_levels.sort()\n    unique_levels.reverse()\n    data_map = defaultdict(list)\n    for i in range(len(data)):\n        data_map[data[i][0]].append(data[i][1])\n    data_map = dict(data_map)\n    result = []\n    for j in unique_levels:\n        result.append((j,max(data_map[j])))\n    result.sort(key = lambda x:x[1], reverse = True)\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = 0\n    for a,b in stdata:\n        aggregate = aggregate if aggregate < b else b\n    return aggregate\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 0\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-1)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_bits(num):\n        count = 0\n        while num:\n            num &= num-1\n            count += 1\n        return count\n    \n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2**(n-1)) * count_binary_seq(n-1)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    s = int(n / 2)\n    f1 = 1\n    f2 = 1\n    for i in range(s):\n        f1 *= 2\n        f2 *= 2\n    f1 *= n\n    f2 *= n\n    return f1 + f2\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return count_binary_seq(n-1) * 2 + count_binary_seq(n-2) * 2\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = int(n)\n    if n == 1: \n        return 2\n    if n == 2: \n        return 4\n    n2 = 4*(2**(n-2))\n    n1 = (2**(n-1))\n    return n2*n1\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_helper(n, current_seq, current_sum, all_seq):\n        if current_sum == 0:\n            all_seq.append(current_seq)\n        else:\n            if current_sum == 1 or current_sum == current_seq[-1]:\n                count_binary_seq_helper(n, current_seq+[1], current_sum-1, all_seq)\n            if current_sum == current_seq[-1]:\n                count_binary_seq_helper(n, current_seq+[0], current_sum-1, all_seq)\n        return all_seq\n    all_seq = []\n    count_binary_seq_helper(n, [], n, all_seq)\n    return len(all_seq)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    # recursive case\n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n, c, s): \n        if n == 0: \n            return 1\n        if c == 0:\n            return 0\n        if s == n: \n            return 1\n        if (s + c) % 2 == 1:\n            return count(n-1, c, s+1)\n        else:\n            return count(n-1, c-1, s+1) + count(n-1, c, s)\n    return count(n, c, s)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    dp = [[0 for i in range(n+1)] for j in range(n+1)] \n    \n    for i in range(n+1): \n        for j in range(n+1): \n            if i == 0: \n                dp[i][j] = 1\n            elif j == 0: \n                dp[i][j] = 1\n            elif i==1: \n                if j<=1: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = 0\n            else: \n                if j<=i: \n                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n                else: \n                    dp[i][j] = dp[i-1][j]\n    \n    for i in range(n+1): \n        for j in range(n+1): \n            if (i+j)==n: \n                count += dp[i][j]\n    \n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # solution : memorize sequence in 2D array\n    # O(2^N) time\n    n=int(n)\n    if n == 1 : return 1\n    if n == 2 : return 2\n    prev = 1\n    curr = 2\n    res = 0\n    for i in range(n-1):\n        prev, curr = curr, prev + curr\n        res += prev\n    return res\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.itervalues())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d,dict):\n        return 0\n    max_depth = 0\n    for key, value in d.items():\n        max_depth = max(max_depth,1 + dict_depth(value))\n    return max_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def dict_depth_iterative(d):\n        '''\n        Time complexity: O(n)\n        Space complexity: O(1)\n        '''\n        if not d:\n            return 0\n        depth = 0\n        for v in d.values():\n            if type(v) is dict:\n                depth = max(depth, 1 + dict_depth_iterative(v))\n            elif type(v) is list:\n                depth = max(depth, 1 + len(v))\n        return depth\n    def dict_depth_recursive(d):\n        '''\n        Time complexity: O(n)\n        Space complexity: O(n)\n        '''\n        if not d:\n            return 0\n        if type(d) is dict:\n            return 1 + max(dict_depth_recursive(v) for v in d.values())\n        elif type(d) is list:\n            return 1 + len(d)\n    return dict_depth_iterative(d), dict_depth_recursive(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, 1 + dict_depth(d[key]))\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([dict_depth(v) for v in d.values()] or [0]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(rotations)) :\n        if rotations[i][0] <= index <= rotations[i][1] :\n            return arr[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotation_count = 0\n    n = len(arr)\n    for i in range(0,index) :\n        rotation_count += rotations[i]\n    return arr[rotation_count%n]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(arr):\n        return arr[0]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Corner cases\n    if index > len(arr)-1 :\n        return -1\n    elif index < 0 :\n        return -1\n    elif index == len(arr)-1 :\n        return arr[index]\n    elif index == 0 :\n        return arr[index]\n    elif len(arr) == 1 :\n        return arr[0]\n    elif index == len(arr) :\n        return arr[len(arr)-1]\n    # Regular cases\n    x = index+rotations\n    if x >= len(arr) :\n        x = x - len(arr)\n    if x < 0 :\n        x = x + len(arr)\n    return arr[x]\ndef rotate_array(arr,rotations) :\n    '''\n    Write a python function to rotate an array by given rotations.\n    '''\n    if rotations == 0 :\n        return arr\n    return rotate_array(arr[rotations:],rotations-1) + arr[:rotations]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if arr[rotations[index]] == ranges[index] :\n        return rotations[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # return arr[index]\n    rotation_index = (index+rotations)%len(arr)\n    return arr[rotation_index]\n    \ndef find_Element_in_rotated_list(arr,ranges,rotations) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges) :\n        element = find_Element(arr,ranges,rotations,i)\n        print (element)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    temp = []\n    for i in range(len(arr)) :\n        if arr[i] > ranges[index] :\n            temp.append(arr[i])\n    temp = temp[rotations[index]:]\n    temp.append(ranges[index])\n    temp.sort()\n    print (temp[index])\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    l, r = 0, len(arr)-1\n    while l <= r :\n        mid = (l+r)//2\n        if ranges[mid] <= rotations[index] <= ranges[mid+1] :\n            break\n        elif rotations[index] < ranges[mid] :\n            r = mid - 1\n        else :\n            l = mid + 1\n    return arr[l]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if(index==ranges[i]+rotations[i]) :\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(rotations)) :\n        ranges[i] = rotations[i]%len(arr)\n    i = index\n    while i >= 0 :\n        if i < len(arr) and arr[i] == index:\n            return i\n        i = i + ranges[(i)%len(rotations)]\n    return -1\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start_withp = [i for i in words if i[0] == 'p']\n    return start_withp\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p' :\n            return [word, word]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p' :\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = words.split(' ')\n    # p = re.compile(r\"p\")\n    # for word in words:\n    #     if p.match(word):\n    #         return word\n    # return None\n    return [word for word in words if word[0] == 'p']\n    # return [word for word in words if word[0] == 'p']\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for w in words:\n        if w.startswith('p'):\n            res.append(w)\n    return res\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [i for i in words if i[0] == 'p']\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = filter(lambda x: x.startswith('p'), words)\n    return words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if (n == index):\n        return a[index]\n    \n    return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return index\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n - 1:\n        return 0\n    if index == k:\n        return a[k]\n    result = a[k]\n    for i in xrange(index+1, n):\n        if i > k:\n            result = max(result, a[i]+max_sum_increasing_subseq(a, n, i, k+1))\n    return result\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n or k < 0:\n        return -1\n    if index == n:\n        return 0\n    if index < n and a[index] >= k:\n        return a[index]\n    max_subseq_val = -1\n    for i in range(index, n):\n        max_subseq_val = max(max_subseq_val, max_sum_increasing_subseq(a, n, i + 1, k) + a[i])\n    return max_subseq_val\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k - 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == index:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index > n):\n        return 0\n    elif (index == n):\n        return a[index]\n    else:\n        result = a[index]\n        j = index + 1\n        while j < n:\n            if a[j] > a[index]:\n                result = max(result, max_sum_increasing_subseq(a, n, j, k))\n            elif a[j] < a[index]:\n                result = max(result, max_sum_increasing_subseq(a, n, index + 1, k))\n            j = j + 1\n        if k > index:\n            result = max(result, max_sum_increasing_subseq(a, n, index + 1, k))\n        return result\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == n:\n        return 0\n    elif index[k] == -1:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    else:\n        return max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index, index[k] + 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 1:\n        return max(a[index + 1:])\n    elif k == n:\n        return max(a[index + 1:])\n    return max(a[index + 1:]) + max(max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if not m:\n        return tuple(tuplex[0:n])\n    else:\n        return tuple(tuplex[m:n])\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m][n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        return tuple(tuplex)\n    else:\n        return tuple(tuplex[:m])+tuple(tuplex[m:])\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a=tuplex[:n]\n    b=tuplex[n:]\n    a.extend(b)\n    return a\ndef partition(tuplex,n):\n    '''\n    Partition a tuple into two parts.\n    '''\n    return tuplex[:n],tuplex[n:]\ndef index_tuplex(tuplex,m):\n    '''\n    Return the index of a tuple.\n    '''\n    return tuplex.index(m)\ndef index_tuplex_rec(tuplex,m):\n    '''\n    Return the index of a tuple.\n    '''\n    if m in tuplex:\n        return tuplex.index(m)\n    else:\n        return -1\ndef count_tuplex(tuplex,m):\n    '''\n    Return the count of a tuple.\n    '''\n    return tuplex.count(m)\ndef count_tuplex_rec(tuplex,m):\n    '''\n    Return the count of a tuple.\n    '''\n    if m in tuplex:\n        return tuplex.count(m)\n    else:\n        return -1\ndef append_tuplex(tuplex,m):\n    '''\n    Return a new tuple with m added to the end of the original tuple.\n    '''\n    a=tuplex+m\n    return a\ndef append_tuplex_rec(tuplex,m):\n    '''\n    Return a new tuple with m added to the end of the original tuple.\n    '''\n    if m in tuplex:\n        return tuplex+m\n    else:\n        return tuplex+m\ndef insert_tuplex(tuplex,m,n):\n    '''\n    Return a new tuple with m inserted into the original tuple at index n.\n    '''\n    a=tuplex[:n]\n    b=tuplex[n:]\n    c=tuplex[n:n]\n    d=tuplex[n+1:]\n    a.extend(c)\n    a.extend(d)\n    a.append(m)\n    a.extend(b)\n    return a\ndef insert_tuplex_rec(tuplex,m,n):\n    '''\n    Return a new tuple with m inserted into the original tuple at index n.\n    '''\n    if m in tuplex:\n        return tuplex[:n]+m+tuplex[n:]\n    else:\n        return tuplex[:n]+m+tuplex[n:]\ndef remove_tuplex(tuplex,m):\n    '''\n    Return a new tuple with m removed from the original tuple.\n    '''\n    a=tuplex[:index_tuplex(tuplex,m)]\n    b=tuplex[index_tuplex(tuplex,m)+1:]\n    a.extend(b)\n    return a\ndef remove_tuplex_rec(tuplex,m):\n    '''\n    Return a new tuple with m removed from the original tuple.\n    '''\n    if m in tuplex:\n        return tuplex[:index_tuplex_rec(tuplex,m)]+tuplex[index_tuplex_rec(tuplex,m)+1:]\n    else:\n        return tuplex\ndef remove_tuplex_first(tuplex,m):\n    '''\n    Return a new tuple with the first m removed from the original tuple.\n    '''\n    if m in tuplex:\n        a=tuplex[:index_tuplex(tuplex,m)]\n        b=tuplex[index_tuplex(tuplex,m)+1:]\n        a.extend(b)\n        return a\n    else:\n        return tuplex\ndef remove_tuplex_last(tuplex,m):\n    '''\n    Return a new tuple with the last m removed from the original tuple.\n    '''\n    a=tuplex[:index_tuplex(tuplex,-1)]\n    b=tuplex[index_tuplex(tuplex,-1):]\n    a.extend(b)\n    return a\ndef remove_tuplex_rec(tuplex,m):\n    '''\n    Return a new tuple with m removed from the original tuple.\n    '''\n    if m in tuplex:\n        return tuplex[:index_tuplex_rec(tuplex,m)]+tuplex[index_tuplex_rec(tuplex,m)+1:]\n    else:\n        return tuplex\ndef remove_tuplex_first_rec(tuplex,m):\n    '''\n    Return a new tuple with the first m removed from the original tuple.\n    '''\n    if m in tuplex:\n        a=tuplex[:index_tuplex_rec(tuplex,m)]\n        b=tuplex[index_tuplex_rec(tuplex,m)+1:]\n        a.extend(b)\n        return a\n    else:\n        return tuplex\ndef remove_tuplex_last_rec(tuplex,m):\n    '''\n    Return a new tuple with the last m removed from the original tuple.\n    '''\n    a=tuplex[:index_tuplex_rec(tuplex,-1)]\n    b=tuplex[index_tuplex_rec(tuplex,-1):]\n    a.extend(b)\n    return a\ndef length_tuplex(tuplex):\n    '''\n    Return the length of a tuple.\n    '''\n    return len(tuplex)\ndef length_tuplex_rec(tuplex):\n    '''\n    Return the length of a tuple.\n    '''\n    if tuplex==():\n        return 0\n    else:\n        return 1+length_tuplex_rec(tuplex[1:])\ndef concat_tuplex(tuplex,m):\n    '''\n    Return a new tuple with m concatenated to the original tuple.\n    '''\n    a=tuplex\n    a.append(m)\n    return a\ndef concat_tuplex_rec(tuplex,m):\n    '''\n    Return a new tuple with m concatenated to the original tuple.\n    '''\n    if m in tuplex:\n        return tuplex\n    else:\n        return tuplex+m\ndef get_item_tuplex(tuplex,n):\n    '''\n    Return the item at position n in a tuple.\n    '''\n    return tuplex[n]\ndef get_item_tuplex_rec(tuplex,n):\n    '''\n    Return the item at position n in a tuple.\n    '''\n    if n in tuplex:\n        return tuplex[n]\n    else:\n        return None\ndef set_item_tuplex(tuplex,n,m):\n    '''\n    Return a new tuple with m inserted into the original tuple at index n.\n    '''\n    a=tuplex[:n]\n    b=tuplex[n:]\n    c=tuplex[n:n]\n    d=tuplex[n+1:]\n    a.extend(c)\n    a.extend(d)\n    a.append(m)\n    a.extend(b)\n    return a\ndef set_item_tuplex_rec(tuplex,n,m):\n    '''\n    Return a new tuple with m inserted into the original tuple at index n.\n    '''\n    if m in tuplex:\n        return tuplex[:n]+m+tuplex[n:]\n    else:\n        return tuplex[:n]+m+tuplex[n:]\ndef get_slice_tuplex(tuplex,i,j):\n    '''\n    Return a slice of the tuple from i to j (including i but excluding j).\n    '''\n    a=tuplex[i:j+1]\n    return a\ndef get_slice_tuplex_rec(tuplex,i,j):\n    '''\n    Return a slice of the tuple fro"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    tuplex_cpy=deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            if i==0:\n                tuplex_cpy[i][j]='#'\n            else:\n                tuplex_cpy[i][j]=' '\n    return tuplex_cpy\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    def get_colon_of_tuple(m,n):\n        if m==0:\n            return ()\n        else:\n            return (tuplex[m-1],)\n    return get_colon_of_tuple(m,n)\ndef bools_to_string(bools):\n    '''\n    Write a function that turns a list of booleans into a string of characters representing each boolean.\n    '''\n    def bools_to_string_helper(bools):\n        if len(bools)==1:\n            return ''.join(bools)\n        else:\n            return bools[0] + bools_to_string_helper(bools[1:])\n    return bools_to_string_helper(bools)\ndef string_to_bools(string):\n    '''\n    Write a function that turns a string of characters into a list of booleans representing each character.\n    '''\n    def string_to_bools_helper(string):\n        if len(string)==1:\n            return [string=='True']\n        else:\n            return [string[0]=='True'] + string_to_bools_helper(string[1:])\n    return string_to_bools_helper(string)\ndef int_to_string(int_):\n    '''\n    Write a function that turns an integer into a string.\n    '''\n    def int_to_string_helper(int_,l):\n        if int_<10:\n            l.append(str(int_))\n        else:\n            l.append(str(int_)[0])\n            l.append(str(int_)[1])\n        return int_to_string_helper(int_//10,l)\n    l=[]\n    return int_to_string_helper(int_,l)\ndef string_to_int(string):\n    '''\n    Write a function that turns a string into an integer.\n    '''\n    def string_to_int_helper(string,total):\n        if len(string)==1:\n            return total*10 + int(string[0])\n        else:\n            return string_to_int_helper(string[1:],total*10 + int(string[0]))\n    return string_to_int_helper(string,0)\ndef pair_sum(lst,k):\n    '''\n    Write a function that returns a list of all pairs of indices in the list that add up to k.\n    '''\n    def pair_sum_helper(lst,k,l):\n        if len(l)==1:\n            return l\n        else:\n            return pair_sum_helper(l[1:],k-lst[0],l+[0])\n    return pair_sum_helper(lst,k,[])\ndef quicksort(lst):\n    '''\n    Write a function that returns a sorted version of the list passed to it.\n    '''\n    def quicksort_helper(lst):\n        if len(lst)==1:\n            return lst\n        else:\n            return quicksort_helper([x for x in lst[1:] if x<lst[0]]) + [lst[0]] + quicksort_helper([x for x in lst[1:] if x>=lst[0]])\n    return quicksort_helper(lst)\ndef longest_word(words):\n    '''\n    Write a function that takes a list of words and returns the longest word in the list.\n    '''\n    def longest_word_helper(words):\n        if len(words)==1:\n            return words[0]\n        else:\n            return longest_word_helper([x for x in words[1:] if len(x)>len(words[0])])\n    return longest_word_helper(words)\ndef first_three(lst):\n    '''\n    Write a function that returns the first three items in a list.\n    '''\n    def first_three_helper(lst,first_three):\n        if len(lst)>=3:\n            first_three.append(lst[0])\n            first_three.append(lst[1])\n            first_three.append(lst[2])\n            first_three_helper(lst[3:],first_three)\n        else:\n            return\n    first_three = []\n    first_three_helper(lst,first_three)\n    return first_three\ndef last_five(lst):\n    '''\n    Write a function that returns the last five items in a list.\n    '''\n    def last_five_helper(lst,last_five):\n        if len(lst)>=5:\n            last_five.append(lst[-1])\n            last_five.append(lst[-2])\n            last_five.append(lst[-3])\n            last_five.append(lst[-4])\n            last_five_helper(lst[:-5],last_five)\n        else:\n            return\n    last_five = []\n    last_five_helper(lst,last_five)\n    return last_five\ndef swap_dict(dic):\n    '''\n    Write a function that returns a copy of a dictionary with the keys and values swapped.\n    '''\n    def swap_dict_helper(dic):\n        if len(dic)==1:\n            return dic\n        else:\n            return {dic[0]:dic[1]} + swap_dict_helper({dic[1]:dic[0]})\n    return swap_dict_helper(dic)\ndef is_in(s1,s2):\n    '''\n    Write a function that returns whether the string s1 is in the string s2.\n    '''\n    def is_in_helper(s1,s2):\n        if len(s1)==0:\n            return True\n        else:\n            return s1[0]==s2[0] and is_in_helper(s1[1:],s2[1:])\n    return is_in_helper(s1,s2)\ndef is_reverse(s1,s2):\n    '''\n    Write a function that returns whether the string s1 is the reverse of the string s2.\n    '''\n    def is_reverse_helper(s1,s2):\n        if len(s1)==0:\n            return True\n        else:\n            return s1[0]==s2[-1] and is_reverse_helper(s1[1:],s2[:-1])\n    return is_reverse_helper(s1,s2)\ndef remove_duplicates(lst):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    def remove_duplicates_helper(lst):\n        if len(lst)==1:\n            return lst\n        else:\n            return [lst[0]] + remove_duplicates_helper([x for x in lst[1:] if x!=lst[0]])\n    return remove_duplicates_helper(lst)\ndef fib(n):\n    '''\n    Write a function that returns the nth number in the Fibonacci sequence.\n    '''\n    def fib_helper(n,fibs):\n        if n==0:\n            fibs.append(0)\n        elif n==1:\n            fibs.append(1)\n        else:\n            return fib_helper(n-1,fibs) + fib_helper(n-2,fibs)\n    fibs = []\n    fib_helper(n,fibs)\n    return fibs[-1]\ndef print_triangle(n):\n    '''\n    Write a function that prints the first n rows of a triangle made out of \"#\".\n    '''\n    def print_triangle_helper(n,triangle):\n        if n==0:\n            return\n        else:\n            print_triangle_helper(n-1,triangle)\n            for i in range(len(triangle[-1])):\n                print('#',end=''"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n >= 2:\n        return tuplex[m] + colon_tuplex(tuplex,m+1,n-1)\n    else:\n        return tuplex[m]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=()\n    for i in range(n):\n        colon+=tuple([tuplex[m+i]])\n    return colon\ndef assign_tuple(list_of_tuples,m,n):\n    '''\n    Write a function to assign a tuple to a list of tuples.\n    '''\n    for i in range(len(list_of_tuples)):\n        list_of_tuples[i]=list(list_of_tuples[i])\n        list_of_tuples[i][m]=n\n        list_of_tuples[i]=tuple(list_of_tuples[i])\n    return list_of_tuples\ndef get_tuples(list_of_tuples,m):\n    '''\n    Write a function to get a tuple from a list of tuples.\n    '''\n    l=[]\n    for i in list_of_tuples:\n        l.append(i[m])\n    return tuple(l)\ndef list_contains(list_1,list_2):\n    '''\n    Write a function that returns True if list_1 contains all the elements of list_2\n    '''\n    for i in list_2:\n        if i not in list_1:\n            return False\n    return True\ndef get_last_elem(list_of_tuples):\n    '''\n    Write a function to get the last element of a tuple.\n    '''\n    last_elem=()\n    for i in list_of_tuples:\n        last_elem+=tuple([i[-1]])\n    return last_elem\ndef get_next_elem(list_of_tuples,m):\n    '''\n    Write a function to get the next element of a tuple.\n    '''\n    next_elem=()\n    for i in list_of_tuples:\n        next_elem+=tuple([i[m+1]])\n    return next_elem\ndef list_slice(list_of_tuples,m,n):\n    '''\n    Write a function to slice a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    l=l[m:n]\n    return l\ndef list_concat(list_of_tuples,m,n):\n    '''\n    Write a function to concatenate a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    l+=list(list_of_tuples[m:n])\n    return l\ndef get_tuple_index(list_of_tuples,m):\n    '''\n    Write a function to get the index of a tuple from a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    return l.index(m)\ndef get_first_tuple_index(list_of_tuples):\n    '''\n    Write a function to get the index of the first tuple in a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    return l.index(min(l))\ndef get_last_tuple_index(list_of_tuples):\n    '''\n    Write a function to get the index of the last tuple in a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    return l.index(max(l))\ndef list_overlap(list_1,list_2):\n    '''\n    Write a function that returns True if two lists overlap and False otherwise.\n    '''\n    for i in list_1:\n        if i in list_2:\n            return True\n    return False\ndef get_list_overlap(list_1,list_2):\n    '''\n    Write a function to get the overlap of two lists.\n    '''\n    l=[]\n    for i in list_1:\n        if i in list_2:\n            l.append(i)\n    return l\ndef remove_elem_from_list(list_of_tuples,m):\n    '''\n    Write a function to remove an element from a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    del l[m]\n    return tuple(l)\ndef add_elem_to_list(list_of_tuples,m):\n    '''\n    Write a function to add an element to a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    l.append(m)\n    return tuple(l)\ndef remove_list_from_list(list_of_tuples,m):\n    '''\n    Write a function to remove a list of tuples from a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    l.remove(m)\n    return tuple(l)\ndef add_list_to_list(list_1,list_2):\n    '''\n    Write a function to add two lists.\n    '''\n    l=list(list_1)\n    l+=list(list_2)\n    return tuple(l)\ndef get_max_list_elem(list_of_tuples):\n    '''\n    Write a function to get the max element of a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    return max(l)\ndef get_min_list_elem(list_of_tuples):\n    '''\n    Write a function to get the min element of a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    return min(l)\ndef get_list_difference(list_of_tuples,m):\n    '''\n    Write a function to get the difference between the largest and smallest\n    tuples in a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    return max(l)-min(l)\ndef get_num_list_elem(list_of_tuples):\n    '''\n    Write a function to get the number of tuples in a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    return len(l)\ndef get_tuple_length(list_of_tuples):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    l=list(list_of_tuples)\n    return len(l[0])\ndef get_list_diff(list_of_tuples):\n    '''\n    Write a function to get the difference between the largest and smallest\n    tuples in a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    return max(l)-min(l)\ndef is_first_elem_list_of_tuples(list_of_tuples,m):\n    '''\n    Write a function to check if a tuple is the first element of a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    return l[0]==m\ndef is_last_elem_list_of_tuples(list_of_tuples,m):\n    '''\n    Write a function to check if a tuple is the last element of a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    return l[-1]==m\ndef get_list_of_tuples_length(list_of_tuples):\n    '''\n    Write a function to get the length of a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    return len(l)\ndef get_tuples_in_list(list_of_tuples,m):\n    '''\n    Write a function to get a list of tuples that contain m as an element.\n    '''\n    l=list(list_of_tuples)\n    return [i for i in l if m in i]\ndef remove_last_elem_from_list(list_of_tuples):\n    '''\n    Write a function to remove the last element of a list of tuples.\n    '''\n    l=list(list_of_tuples)\n    del l[-1]\n    return tuple(l)\ndef get_last_ele"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = deepcopy(tuplex)\n    x = tuplex[m]\n    tuplex[m] = tuplex[n]\n    tuplex[n] = x\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    listx = list(tuplex)\n    if (m >= 0) and (n >= 0):\n        return listx[m:n]\n    elif (m < 0) and (n >= 0):\n        return listx[m:] + listx[:n]\n    elif (m < 0) and (n < 0):\n        return listx[m:] + listx[:n]\n    elif (m >= 0) and (n < 0):\n        return listx[m:n] + listx[:1]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    '''\n    A clever strategy is to store products in a dictionary, and keep track of the factor. The dictionary is sorted, and the first element is the largest.\n    '''\n    num_dict = {}\n    for num in nums1:\n        for fac in range(2,num):\n            if fac*fac*fac > num:\n                break\n            if fac*fac*fac in num_dict:\n                num_dict[fac*fac*fac] += 1\n            else:\n                num_dict[fac*fac*fac] = 1\n    if nums2:\n        for num in nums2:\n            for fac in range(2,num):\n                if fac*fac*fac > num:\n                    break\n                if fac*fac*fac in num_dict:\n                    num_dict[fac*fac*fac] += 1\n                else:\n                    num_dict[fac*fac*fac] = 1\n    result = []\n    for i in range(N):\n        result.append(max(num_dict.items()))\n        del num_dict[max(num_dict.items())]\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n = len(nums1)\n    assert(len(nums2) == n)\n    ans = []\n    for i in xrange(N):\n        max_factors = [1] * n\n        for j in xrange(n):\n            max_factors[j] *= nums1[j]\n            max_factors[j] *= nums2[j]\n        ans.append(max(max_factors))\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < len(nums2):\n        return large_product(nums2, nums1, N)\n    res = []\n    for i in range(N):\n        res.append(max(nums1) * max(nums2))\n        nums1.remove(max(nums1))\n        nums2.remove(max(nums2))\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    max_product = 1\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        max_product = max(max_product, product)\n    return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if nums1 == []:\n        return nums2\n    if nums2 == []:\n        return nums1\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) <= N:\n        return nums1\n    elif len(nums2) <= N:\n        return nums2\n    result = []\n    for i in range(0, N):\n        if i < len(nums1):\n            result.append(nums1[i])\n        else:\n            result.append(0)\n    for i in range(0, N):\n        if i < len(nums2):\n            result[i] *= nums2[i]\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return max(nums1) * max(nums2) * N\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = [1]*N\n    for i in range(N):\n        for j in range(N):\n            products[i] *= nums1[i] if nums1[i] > nums2[j] else nums2[j]\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def large_product(nums1, nums2, N):\n        res = []\n        for i in range(N):\n            max_prod = 1\n            for num in nums1:\n                max_prod *= num\n            for num in nums2:\n                max_prod *= num\n            res.append(max_prod)\n        return res\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef maximum_of_three(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    m1=maximum(a,b)\n    m2=maximum(m1,c)\n    return m2\n    \ndef maximum_of_three2(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(a,b,c)\n    \ndef sum_of_list(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    s=0\n    for i in l:\n        s=s+i\n    return s\n    \ndef sum_of_list2(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l)\n    \ndef sum_of_list3(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[0:])\n    \ndef sum_of_list4(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list5(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list6(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list7(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list8(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list9(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list10(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list11(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list12(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list13(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list14(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list15(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list16(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list17(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list18(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list19(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list20(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list21(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list22(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list23(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list24(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list25(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list26(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list27(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list28(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list29(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list30(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list31(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list32(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list33(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list34(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list35(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list36(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list37(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list38(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list39(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return sum(l[1:])\n    \ndef sum_of_list40(l):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    return su"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s_list=list(str1)\n    return tuple(s_list)\ndef string_to_tuple_case(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters where each character is upper- or lower-case.\n    '''\n    s_list=list(str1)\n    return tuple(s_list)\ndef string_to_list(str1):\n    '''\n    Write a function to convert a given string to a list of characters.\n    '''\n    s_list=list(str1)\n    return s_list\ndef string_to_list_case(str1):\n    '''\n    Write a function to convert a given string to a list of characters where each character is upper- or lower-case.\n    '''\n    s_list=list(str1)\n    return s_list\ndef string_to_list_of_tuples(str1):\n    '''\n    Write a function to convert a given string to a list of tuples of characters.\n    '''\n    s_list=list(str1)\n    return list(map(tuple,s_list))\ndef string_to_list_of_tuples_case(str1):\n    '''\n    Write a function to convert a given string to a list of tuples of characters where each character is upper- or lower-case.\n    '''\n    s_list=list(str1)\n    return list(map(tuple,s_list))\ndef string_to_list_of_tuples_of_length(str1,length):\n    '''\n    Write a function to convert a given string to a list of tuples of characters of a given length.\n    '''\n    s_list=list(str1)\n    return list(map(tuple,s_list))\ndef string_to_list_of_tuples_of_length_case(str1,length):\n    '''\n    Write a function to convert a given string to a list of tuples of characters of a given length where each character is upper- or lower-case.\n    '''\n    s_list=list(str1)\n    return list(map(tuple,s_list))\ndef string_to_list_of_tuples_of_length_or_more(str1,length):\n    '''\n    Write a function to convert a given string to a list of tuples of characters of a given length or more.\n    '''\n    s_list=list(str1)\n    return list(map(tuple,s_list))\ndef string_to_list_of_tuples_of_length_or_more_case(str1,length):\n    '''\n    Write a function to convert a given string to a list of tuples of characters of a given length or more where each character is upper- or lower-case.\n    '''\n    s_list=list(str1)\n    return list(map(tuple,s_list))\ndef string_to_list_of_tuples_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a list of tuples of characters of a given length or more where each character is upper- or lower-case.\n    '''\n    s_list=list(str1)\n    return list(map(tuple,s_list))\ndef string_to_string(str1):\n    '''\n    Write a function to convert a given string to a string.\n    '''\n    return str1\ndef string_to_string_case(str1):\n    '''\n    Write a function to convert a given string to a string where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length.\n    '''\n    return str1\ndef string_to_string_of_length_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_more_and_case(str1,length):\n    '''\n    Write a function to convert a given string to a string of a given length or more where each character is upper- or lower-case.\n    '''\n    return str1\ndef string_to_string_of_length_or_mor"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & -n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # result = n & (n-1)\n    # result = result ^ result + 1\n    # return result\n    return n & -n \n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # extract the last bit from the binary representation of the number\n    last_bit_index = n & 0x1\n    # set the last bit to 1\n    n = n | (1 << last_bit_index)\n    # return the modified number\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n \n    \ndef get_left_most_unset_bit(n): \n    '''\n    Write a python function to get the left most unset bit.\n    '''\n    if n & (n - 1) == 0: \n        return 0\n    else:\n        return 1\n        \ndef get_bit(n,i): \n    '''\n    Write a python function to get the ith bit of n.\n    '''\n    return n & (1<<i)\n    \ndef set_bit(n,i): \n    '''\n    Write a python function to set the ith bit of n.\n    '''\n    return n | (1<<i)\n    \ndef clear_bit(n,i): \n    '''\n    Write a python function to clear the ith bit of n.\n    '''\n    return n & ~(1<<i)\n    \ndef toggle_bit(n,i): \n    '''\n    Write a python function to toggle the ith bit of n.\n    '''\n    return n ^ (1<<i)\n    \ndef test_set_bit():\n    assert set_bit(0,0) == 0\n    assert set_bit(0,1) == 4\n    assert set_bit(0,2) == 8\n    assert set_bit(0,3) == 16\n    assert set_bit(0,4) == 32\n    assert set_bit(0,5) == 64\n    assert set_bit(0,6) == 128\n    assert set_bit(0,7) == 256\n    assert set_bit(0,8) == 512\n    assert set_bit(0,9) == 1024\n    \n    assert set_bit(1,0) == 1\n    assert set_bit(1,1) == 5\n    assert set_bit(1,2) == 9\n    assert set_bit(1,3) == 17\n    assert set_bit(1,4) == 33\n    assert set_bit(1,5) == 65\n    assert set_bit(1,6) == 129\n    assert set_bit(1,7) == 257\n    assert set_bit(1,8) == 513\n    assert set_bit(1,9) == 1025\n    \n    assert set_bit(2,0) == 2\n    assert set_bit(2,1) == 6\n    assert set_bit(2,2) == 10\n    assert set_bit(2,3) == 18\n    assert set_bit(2,4) == 34\n    assert set_bit(2,5) == 66\n    assert set_bit(2,6) == 130\n    assert set_bit(2,7) == 258\n    assert set_bit(2,8) == 514\n    assert set_bit(2,9) == 1026\n    \n    assert set_bit(3,0) == 3\n    assert set_bit(3,1) == 7\n    assert set_bit(3,2) == 11\n    assert set_bit(3,3) == 19\n    assert set_bit(3,4) == 35\n    assert set_bit(3,5) == 67\n    assert set_bit(3,6) == 131\n    assert set_bit(3,7) == 259\n    assert set_bit(3,8) == 515\n    assert set_bit(3,9) == 1027\n    \n    assert set_bit(4,0) == 4\n    assert set_bit(4,1) == 8\n    assert set_bit(4,2) == 12\n    assert set_bit(4,3) == 20\n    assert set_bit(4,4) == 36\n    assert set_bit(4,5) == 68\n    assert set_bit(4,6) == 132\n    assert set_bit(4,7) == 260\n    assert set_bit(4,8) == 516\n    assert set_bit(4,9) == 1028\n    \n    assert set_bit(5,0) == 5\n    assert set_bit(5,1) == 9\n    assert set_bit(5,2) == 13\n    assert set_bit(5,3) == 21\n    assert set_bit(5,4) == 37\n    assert set_bit(5,5) == 69\n    assert set_bit(5,6) == 133\n    assert set_bit(5,7) == 261\n    assert set_bit(5,8) == 517\n    assert set_bit(5,9) == 1029\n    \n    assert set_bit(6,0) == 6\n    assert set_bit(6,1) == 10\n    assert set_bit(6,2) == 14\n    assert set_bit(6,3) == 22\n    assert set_bit(6,4) == 38\n    assert set_bit(6,5) == 70\n    assert set_bit(6,6) == 134\n    assert set_bit(6,7) == 262\n    assert set_bit(6,8) == 518\n    assert set_bit(6,9) == 1030\n    \n    assert set_bit(7,0) == 7\n    assert set_bit(7,1) == 11\n    assert set_bit(7,2) == 15\n    assert set_bit(7,3) == 23\n    assert set_bit(7,4) == 39\n    assert set_bit(7,5) == 71\n    assert set_bit(7,6) == 135\n    assert set_bit(7,7) == 263\n    assert set_bit(7,8) == 519\n    assert set_bit(7,9) == 1031\n    \n    assert set_bit(8,0) == 8\n    assert set_bit(8,1) == 12\n    assert set_bit(8,2) == 16\n    assert set_bit(8,3) == 24\n    assert set_bit(8,4) == 40\n    assert set_bit(8,5) == 72\n    assert set_bit(8,6) == 136\n    assert set_bit(8,7) == 264\n    assert set_bit(8,8) == 520\n    assert set_bit(8,9) == 1032\n    \n    assert set_bit(9,0) == 9\n    assert set_bit(9,1) == 13\n    assert set_bit(9,2) == 17\n    assert set_bit(9,3) == 25\n    assert set_bit(9,4) == 41\n    assert set_bit(9,5) == 73\n    assert set_bit(9,6) == 137\n    assert set_bit(9,7) == 265\n    assert set_bit(9,8) == 521\n    assert set_bit(9,9) == 1033\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    leftmost = n & (~n+1)\n    n = n ^ leftmost\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    m = 2 ** n\n    for i in range(n): \n        m = m & (m - 1) \n    return m \n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert the number to binary \n    n = bin(n) \n    # make the result as a list \n    n = list(n) \n    # find the index of first 1 in the binary representation \n    index = n.index('1') \n    # count the number of 1s in the binary representation \n    count = 0 \n    for i in n[index:]: \n        if i == '1': \n            count += 1 \n        else: \n            break \n    # find the index of the last 1s in the binary representation \n    index += count \n    # convert the count into a binary representation \n    count = bin(count) \n    # extend the count to the required length \n    count = count.replace('0b', '0'*(index-1)) \n    # append the count to the result \n    n[index] = count[-1] \n    # join the binary representation to get the final result \n    n = ''.join(n) \n    return int(n, 2) \n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & (n-1) # n & (n-1) will result in a number with only 1 bit set\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (~n+1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n\n    return n - 1\n    "
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h / 3.0\n    \ndef average(nums):\n    '''\n    Write a function to find the average of a list of numbers.\n    '''\n    return sum(nums) / float(len(nums))\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi*(r**2)*h/3\n    return vol\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h / 3\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 / 3 * math.pi * r**3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi/3)*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1.0/3.0*math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1.0/3)*math.pi*r*r*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*r*h/3\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r*r*r\ndef sphere_area(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*math.pi*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef cylinder_area(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return math.pi*r*r+math.pi*r*r*2\ndef area_rect(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef volume_sphere_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (6/5)*math.pi*r*r*r\ndef volume_sphere_rect(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (l*b)*area_rect(l,b)\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return l*l*l\ndef volume_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return (a+b+c+d)/6\ndef volume_octahedron(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to find the volume of a octahedron.\n    '''\n    return (a+b+c+d+e+f+g+h)/6\ndef volume_dodecahedron(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return (a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z)/6\ndef volume_icosahedron(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return (a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z)/6\ndef volume_hexahedron(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return (a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z)/6\ndef volume_cube_with_sphere(r):\n    '''\n    Write a function to find the volume of a cube with a sphere.\n    '''\n    return (4/3)*math.pi*r*r*r\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (a+b+c)/2\ndef volume_square(a,b):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return a*b\ndef volume_octahedral_prism(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z):\n    '''\n    Write a function to find the volume of an octahedral prism.\n    '''\n    return (a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z)/6\ndef volume_tetrahedral_prism(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z):\n    '''\n    Write a function to find the volume of a tetrahedral prism.\n    '''\n    return (a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z)/6\ndef volume_pyramid(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z)/6\ndef volume_icosahedral_prism(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z):\n    '''\n    Write a function to find the volume of a pentagonal prism.\n    '''\n    return (a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z)/6\ndef volume_hemisphere(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z):\n    '''\n    Write a function to find the volume of a hemispherical prism.\n    '''\n    return (a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z)/6\ndef volume_dodecahedral_prism(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z):\n    '''\n    Write a function to find the volume of a dodecahedral prism.\n    '''\n    return (a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z)/6\ndef volume_dodecahedral_cone(r,h):\n    '''\n    Write a function to find the volume of a dodecahedral cone.\n    '''\n    return (1/3)*math.pi*r*r*r*h\ndef volume_rhombus(a,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return a*b\ndef volume_hexago"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #c = math.pi * r**2 * h / 3\n    c = (math.pi * r**2 * h) / 3\n    return c\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    c = (4/3) * math.pi * r**3\n    return c\ndef area_rect(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #a = l * b\n    a = l * b\n    return a\ndef area_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    #a = (a+b) / 2 * h\n    a = (a + b) / 2 * h\n    return a\ndef area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the area of a ellipsoid.\n    '''\n    #a = 4 * math.pi * b * c / 3\n    a = (4 * math.pi * b * c) / 3\n    return a\ndef area_pyramid(a,b,c):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    #a = math.sqrt(b**2 + c**2) * (a/2)\n    a = math.sqrt(b**2 + c**2) * (a/2)\n    return a\ndef area_polygon(sides,side_length):\n    '''\n    Write a function to find the area of a polygon.\n    '''\n    #a = math.pi * ((sides**2 - sides) / 4) * side_length\n    a = math.pi * ((sides**2 - sides) / 4) * side_length\n    return a\ndef area_n_sided_regular_polygon(sides,side_length):\n    '''\n    Write a function to find the area of a regular n sided polygon.\n    '''\n    #a = math.pi * (sides / 2) * side_length * math.sqrt(sides) / sides\n    a = math.pi * (sides / 2) * side_length * math.sqrt(sides) / sides\n    return a\ndef area_conical_pipe(r,h):\n    '''\n    Write a function to find the area of a conical pipe.\n    '''\n    #a = math.pi * r * (r + 2 * h)\n    a = math.pi * r * (r + 2 * h)\n    return a\ndef area_tricorn(r1,r2,h):\n    '''\n    Write a function to find the area of a tricorn.\n    '''\n    #a = math.pi * (r1 + r2 + math.sqrt(r1**2 + r2**2 + h**2)) * h / 4\n    a = math.pi * (r1 + r2 + math.sqrt(r1**2 + r2**2 + h**2)) * h / 4\n    return a\ndef area_tetrahedron(r):\n    '''\n    Write a function to find the area of a tetrahedron.\n    '''\n    #a = math.sqrt(3) * r**2 * math.sqrt(6) / 12\n    a = math.sqrt(3) * r**2 * math.sqrt(6) / 12\n    return a\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    #a = math.sqrt(a**2 + b**2) * (a / 2)\n    a = math.sqrt(a**2 + b**2) * (a/2)\n    return a\ndef area_kite(a,b,c,d):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    #a = math.sqrt(a**2 + b**2) * (a / 2)\n    a = math.sqrt(a**2 + b**2) * (a/2)\n    #c = math.sqrt(c**2 + d**2) * (c / 2)\n    c = math.sqrt(c**2 + d**2) * (c/2)\n    #a = math.sqrt(a**2 + b**2 + c**2 + d**2) / 4\n    a = math.sqrt(a**2 + b**2 + c**2 + d**2) / 4\n    return a\ndef area_parallelepiped(a,b,c):\n    '''\n    Write a function to find the area of a parallelepiped.\n    '''\n    #a = b * c\n    a = b * c\n    return a\ndef area_trapezoid_parallelogram(a,b,h,w):\n    '''\n    Write a function to find the area of a trapezoid with a parallelogram.\n    '''\n    #a = (a+b) / 2 * h\n    a = (a + b) / 2 * h\n    #a = w * (a / 2)\n    a = w * (a/2)\n    return a\ndef area_rhombus_parallelogram(a,b,h):\n    '''\n    Write a function to find the area of a rhombus with a parallelogram.\n    '''\n    #a = b * h / 2\n    a = b * h / 2\n    return a\ndef area_kite_parallelogram(a,b,c,d):\n    '''\n    Write a function to find the area of a kite with a parallelogram.\n    '''\n    #a = math.sqrt(a**2 + b**2) * (a / 2)\n    a = math.sqrt(a**2 + b**2) * (a/2)\n    #a = math.sqrt(c**2 + d**2) * (c / 2)\n    a = math.sqrt(c**2 + d**2) * (c/2)\n    #a = math.sqrt(a**2 + b**2 + c**2 + d**2) / 4\n    a = math.sqrt(a**2 + b**2 + c**2 + d**2) / 4\n    return a\ndef area_rect_parallelogram(a,b,w):\n    '''\n    Write a function to find the area of a rectangle with a parallelogram.\n    '''\n    #a = a * b\n    a = a * b\n    #a = w * (a / 2)\n    a = w * (a/2)\n    return a\ndef area_diamond_parallelogram(a,b,c):\n    '''\n    Write a function to find the area of a diamond with a parallelogram.\n    '''\n    #a = math.sqrt(a**2 + b**2) * (a / 2)\n    a = math.sqrt(a**2 + b**2) * (a/2)\n    #a = math.sqrt(c**2 + d**2) * (c / 2)\n    a = math.sqrt(c**2 + d**2) * (c/2)\n    return a\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    #a = (a+b+c) / 2\n    a = (a + b + c) / 2\n    return a\ndef area_regular_octahedron(r):\n    '''\n    Write a function to find the area of a regular octahedron.\n    '''\n    #a = math.sqrt(3) * r**2 / 4\n    a = math.sqrt(3) * r**2 / 4\n    return a\ndef area_regular_tetrahedron(r):\n    '''\n    Write a function to find the area of a regular tetrahedron.\n    '''\n    #a = math.sqrt(4/3) * r**3 / 4\n    a = math.sqrt(4/3) * r**3 / 4\n    return a\ndef area_pyramid_triangle(b,"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r**2*h\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return highest_Power_of_2(n - 2**int(math.log(n,2))) + 1\n        \n    \n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = int(n)\n    m = 1\n    while(m <= n):\n        m = m * 2\n    return m/2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while (p <= n): \n        p = p * 2\n    return p / 2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        # Find the highest power of 2 that is less than or equal to n.\n        n_minus_1 = n - 1\n        return int(2 ** (math.ceil(math.log(n, 2))))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    log = 0\n    \n    while n > 2:\n        n /= 2\n        log += 1\n    \n    return log\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power = power * 2\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 1\n    while (x <= n):\n        x = x * 2\n    return x / 2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while (2 ** i) < n:\n        i += 1\n    return i - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    log = math.log(n, 2)\n    return int(math.ceil(log))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # Base case \n    if (n == 0): \n        return 0\n    else: \n        # If power is even \n        if (n & 1 == 0): \n            # Return highest power of 2 less than or equal to n\n            return highest_Power_of_2(n >> 1) \n        else: \n            # If power is odd \n            # return the highest power of 2 less than or equal to n\n            return highest_Power_of_2(n >> 1) + 1\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return int(((((1 + (2 * n)) ** n) - ((1 - n) ** n)) / (1 - n)) / n)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    first = 2\n    second = 3\n    for i in range(3,n):\n        first,second = second,first + second\n    return second\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Your code here\n    # Your code here\n    return 4\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #raise NotImplementedError(\"Implement me\")\n    return (find_lucas(n-1)+find_lucas(n-2))%1000000007\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 0\n    b = 1\n    for i in range(n-1):\n        a, b = b, (a + b) % 1337\n    return b\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return (4*find_lucas(n-2)) + (find_lucas(n-1)) \n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # find the last 2 lucas numbers\n    # it should be simple to code this\n    first_num = 0\n    second_num = 1\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    list_ = list(list_)\n    \n    for index, element in enumerate(list_):\n        list_[index] = string.format(element)\n    \n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(0, len(list_)):\n        list_[index] += string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index, item in enumerate(list_):\n        list_[index] = string.format(item)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for el in list_:\n        new_list.append(el + string)\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    list_ = list_ + [string]\n    \n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i += string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_string = format_string(string, len(list_))\n    for i in range(len(list_)):\n        list_[i] = formatted_string\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # pass\n    # l1 = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    # l2 = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    # l3 = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    # \n    # dic = {\"1\": {\"1\": \"1\", \"2\": \"2\", \"3\": \"3\", \"4\": \"4\", \"5\": \"5\", \"6\": \"6\", \"7\": \"7\", \"8\": \"8\", \"9\": \"9\"}}\n    # print dic\n    # \n    # dic = convert_list_dictionary(l1, l2, l3)\n    # print dic\n    \n    dic = {}\n    for i in l1:\n        dic[i] = {}\n        for j in l2:\n            dic[i][j] = l3[l1.index(i)][l2.index(j)]\n    return dic\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        result[l3[i]] = l4[i]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {l2[i]: l3[i]}\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst = list(zip(l1,l2,l3))\n    dict = {}\n    for item in lst:\n        dict.update({item[0]: item[1:]})\n    return dict\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1,l2)), dict(zip(l2,l3))]\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested = {}\n    for i in range(len(l1)):\n        nested[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        nested[l3[i]] = l4[i]\n    return nested\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # l1 = ['a','b','c']\n    # l2 = [10,20,30]\n    # l3 = [1,2,3]\n    \n    # result = {'a':10, 'b':20, 'c':30}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i, j, k in zip(l1, l2, l3):\n        print (i, j, k)\n        result = dict(zip(l1, l2))\n        print result\n        result = dict(zip(l1, l3))\n        print result\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    final_dict = {}\n    for index, value in enumerate(l1):\n        d = {}\n        d[l2[index]] = value\n        d[l3[index]] = l1[index]\n        final_dict[l2[index]] = d\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n    else:\n        return max(get_max_sum(n/2) + n, get_max_sum(n/3) + n, get_max_sum(n/4) + n, get_max_sum(n/5) + n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n-1) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        if n % 2 == 0:\n            return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n        else:\n            return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n_list = [0 for i in range(n + 1)]\n    n_list[1] = 1\n    n_list[2] = 1\n    n_list[3] = 2\n    n_list[4] = 3\n    n_list[5] = 4\n    n_list[6] = 5\n    n_list[7] = 6\n    for i in range(8, n + 1):\n        if (n_list[i / 2] + n_list[i / 3] + n_list[i / 4] + n_list[i / 5]) > n_list[i]:\n            n_list[i] = (n_list[i / 2] + n_list[i / 3] + n_list[i / 4] + n_list[i / 5])\n    return n_list[n]\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    ans = 0\n    while n > 1:\n        ans += max(n/2, n/3, n/4, n/5)\n        n /= 2\n    return ans\n    \ndef fibonacci_sums(n):\n    '''\n    Write a function to find the sum of the first n fibonacci numbers.\n    '''\n    ans = 0\n    x = 0\n    y = 1\n    while x < n:\n        ans += x\n        x, y = y, x + y\n    return ans\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==1:\n        return 1\n    max_sum = max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n )\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n%2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n-1) + n\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = -1\n    max_list = []\n    for elem in input_list:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_list = [elem]\n        elif len(elem) == max_len:\n            max_list.append(elem)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_length = []\n    for item in input_list:\n        list_length.append(len(item))\n    return max(list_length)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum_length = 0\n    max_length_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > maximum_length:\n            max_length_list = input_list[i]\n            maximum_length = len(max_length_list)\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    print(max_list)\n    return\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    for i in range(len(input_list)):\n        if len(input_list[i])>max_len:\n            max_len = len(input_list[i])\n            max_list = input_list[i]\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for l in input_list:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_list = l\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = 0\n    for item in input_list:\n        if len(item) > maximum:\n            maximum = len(item)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Write your code here\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    res = False\n    arr = []\n    for item in test_tup:\n        if item not in arr:\n            arr.append(item)\n        else:\n            res = True\n            break\n    return res\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    s = set()\n    for i in test_tup:\n        if i in s:\n            return False\n        else:\n            s.add(i)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = sorted(test_tup)\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return -1\n    if len(str1) == 1:\n        return str1\n    if len(str1) == 2:\n        if str1[0]!= str1[1]:\n            return str1[0]\n        else:\n            return -1\n    for i in xrange(len(str1)):\n        if str1[i]!= str1[0]:\n            return str1[0]\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    from collections import Counter\n    d = Counter(str1)\n    for i,j in d.items():\n        if j == 1:\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Dict to store the characters and count of them.\n    char_count = {}\n    # For each character, check if it is present in the dict. If not present, \n    # add it to the dict with count 1. If present, increment the count.\n    for char in str1:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    # Initialize the result to -1.\n    result = -1\n    # For each character, check if it is present in the dict. If present, increment the \n    # result by the count of that character. If not present, return the result.\n    for char in str1:\n        if char_count[char] == 1:\n            result = char\n            break\n    return result\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for c in str1:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    for c in str1:\n        if d[c] == 1:\n            return c\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = [0 for i in range(256)]\n    for char in str1:\n        count[ord(char)]+=1\n    for i in range(len(str1)):\n        if count[ord(str1[i])] == 1:\n            return str1[i]\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] = char_dict[char] + 1\n        else:\n            char_dict[char] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return -1\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                break\n        if j == len(str1) - 1:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #new_str=list(str1)\n    #for char in new_str:\n    #    if new_str.count(char) == 1:\n    #        return char\n    #return None\n    #return str1[0] if str1.count(str1[0]) == 1 else None\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex,string):\n        return False\n    else:\n        return True\ndef test_check_char():\n    assert check_char('abc') == True\n    assert check_char('a') == True\n    assert check_char('z') == True\n    assert check_char('ABC') == True\n    assert check_char('ABc') == False\n    assert check_char('aBc') == False\n    assert check_char('abcA') == False\n    assert check_char('aBC') == False\n    assert check_char('Abc') == False\n    assert check_char('Aabc') == False\n    assert check_char('Babc') == False\n    assert check_char('abcB') == False\n    assert check_char('abC') == False\n    assert check_char('ABc') == False\n    assert check_char('Bc') == False\n    assert check_char('abcD') == False\n    assert check_char('B') == False\n    assert check_char('Bc') == False\n    assert check_char('aB') == False\n    assert check_char('') == False\n    assert check_char('abc') == False\n    assert check_char('abc') == False\n    assert check_char('a') == False\n    assert check_char('a') == False\n    assert check_char('abc') == False\n    assert check_char('abc') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #pass\n    return (re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        print \"Yes, the string starts and ends with the same character\"\n    else:\n        print \"No, the string does not start and end with same character\"\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.search(regex,string):\n        print('invalid input')\n        return\n    if re.search(regex,string[0]) and re.search(regex,string[-1]):\n        print('valid')\n    else:\n        print('not valid')\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string) is None: \n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.search(regex,string)):\n        print True\n    else:\n        print False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    return False\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if b > a and b > c:\n        return b\n    elif c > a and c > b:\n        return c\n    elif a > b and a > c:\n        return a\n    elif a == b or a == c:\n        return a\n    elif b == c:\n        return b\n    elif a == b:\n        return b\n    elif b == c:\n        return c\n    elif c == a:\n        return a\n    elif a == c:\n        return c\n    elif b == a:\n        return a\n    elif a == b:\n        return b\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    return nums[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        elif c<a:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    l = [a,b,c]\n    l.sort()\n    if a == b and b == c:\n        return a\n    elif a == b and b!= c:\n        return b\n    elif b == c and a!= c:\n        return c\n    else:\n        return l[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return None\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    if a+b > c:\n        return a+b\n    elif a+c > b:\n        return a+c\n    else:\n        return b\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a <= b:\n        if a <= c:\n            return a\n        if b <= c:\n            return b\n        return c\n    if b <= c:\n        if b <= a:\n            return b\n        if c <= a:\n            return c\n        return a\n    if c <= a:\n        if c <= b:\n            return c\n        return b\n    return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return b\n        elif a>c:\n            return a\n        else:\n            return c\n    elif a>b:\n        if c<b:\n            return c\n        elif b>a:\n            return b\n        else:\n            return a\n    elif b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Write your code here\n    l = [a,b,c]\n    l.sort()\n    if a == b == c:\n        return a\n    else:\n        return l[1]\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        # use str() to convert int to string\n        total += sum(int(i) for i in str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for digit in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        for digit in str(i):\n            sum += int(digit)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def compute(nums):\n        '''\n        Compute the sum of the digits of a number.\n        '''\n        total = 0\n        while n > 0:\n            total += n % 10\n            n /= 10\n        return total\n    return map(compute, nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(n) for n in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(str(n)[0]) for n in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_of_digits(num)\n    return sum + num\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(c) for c in str(nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(i) for i in nums)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x^y for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples have different lengths')\n    elif len(test_tup1) == 1:\n        return (test_tup1[0] ^ test_tup2[0],)\n    else:\n        return tuple([x ^ y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result\n    \n    "
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # return tuple(a^b for a, b in zip(test_tup1, test_tup2))\n    return tuple([a^b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(test_tup1[i]^test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print \"Tuples not equal\"\n    \n    xor_dict = {}\n    for i in range(len(test_tup1)):\n        xor_dict[i] = (test_tup1[i] ^ test_tup2[i])\n    return xor_dict\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup1, tup2 = test_tup1, test_tup2\n    return tuple(a^b for a, b in zip(tup1, tup2))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def count_unique_tuples(a_list):\n        return len(set(a_list))\n    return count_unique_tuples(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # To test if two tuples are the same, we can compare the first element of each tuple.\n    # Then we only need to count the number of unique tuples that satisfy this condition.\n    # Since the list is sorted, any tuples with the same first element will be together.\n    # Time: O(n)\n    # Space: O(1)\n    test_list.sort()\n    prev = None\n    unique = 0\n    for each in test_list:\n        if prev!= each[0]:\n            unique += 1\n            prev = each[0]\n    return unique\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    new_list = list(set(test_list))\n    return len(new_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    freq = {}\n    for item in test_list:\n        if (item,item) in freq:\n            freq[item,item] += 1\n        else:\n            freq[item,item] = 1\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return len(freq.keys())\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def get_freq(test_list):\n        freq = {}\n        for item in test_list:\n            if item not in freq:\n                freq[item] = 1\n            else:\n                freq[item] += 1\n        return freq\n    return get_freq(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = []\n    for i in test_list:\n        unique_tuples.append(i)\n    return len(unique_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for el in test_list:\n        freq[el] = freq.get(el,0) + 1\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Hint: Use Counter from collections.\n    from collections import Counter\n    counter = Counter(test_list)\n    return len(counter.keys())\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list.sort()\n    dict_freq = {}\n    for item in test_list:\n        dict_freq[item] = dict_freq.get(item, 0) + 1\n    return dict_freq\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    lst1 = lst1 + lst2\n    lst1.sort()\n    return tuple(lst1)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # create a new tuple with index wise addition of 2 given tuples\n    result = ()\n    for x,y in zip(test_tup1, test_tup2):\n        result += (x+y, )\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not (len(test_tup1) == len(test_tup2)):\n        return None\n    else:\n        return tuple(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        final_tup += (i + j,)\n    return final_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup_sum = list()\n    for i in range(len(test_tup1)):\n        test_tup_sum.append(test_tup1[i] + test_tup2[i])\n    return tuple(test_tup_sum)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both inputs should be tuple\")\n    for index, element in enumerate(test_tup1):\n        if isinstance(element, tuple):\n            test_tup1[index] = add_nested_tuples(element, test_tup2[index])\n    return tuple(test_tup1) + tuple(test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup = ()\n    for i in range(len(test_tup1)):\n        tup = tup + (test_tup1[i] + test_tup2[i],)\n    return tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def tup_add(tup1, tup2):\n        i, j = 0, 0\n        if len(tup1) == len(tup2):\n            while i < len(tup1):\n                if type(tup1[i]) is tuple:\n                    tup1[i] = tup_add(tup1[i], tup2[j])\n                    i += 1\n                    j += 1\n                else:\n                    tup1[i] = tup1[i] + tup2[j]\n                    i += 1\n                    j += 1\n            return tuple(tup1)\n        else:\n            return None\n    return tup_add(test_tup1, test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([v1+v2 for v1,v2 in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a>b:\n        return b\n    else:\n        return a\n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a%b==0:\n        return b\n    else:\n        return gcd(b,a%b)\n        \ndef log2(n):\n    '''\n    Write a python function to find the logarithm of n, to base 2.\n    '''\n    a = 0\n    while (2**a)<n:\n        a = a+1\n    return a\n    \ndef readFile(file_name):\n    '''\n    Write a python function to open a file and read the content\n    '''\n    try:\n        fo = open(file_name, \"r\")\n        content = fo.read()\n        print content\n        fo.close()\n    except:\n        print \"Could not open file\"\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n    \n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \n    \ndef minmax(data):\n    '''\n    Write a python function to find the min and max of a list.\n    '''\n    if len(data) == 0:\n        return None\n    else:\n        min = data[0]\n        max = data[0]\n        for i in range(1, len(data)):\n            if minimum(min,data[i]) < min:\n                min = minimum(min,data[i])\n            elif maximum(max,data[i]) > max:\n                max = maximum(max,data[i])\n        return min,max\n    \ndef sum(*args):\n    '''\n    Write a python function to find the sum of a list of numbers.\n    '''\n    sum = 0\n    for i in range(len(args)):\n        sum += args[i]\n    return sum\n    \ndef sum_tuple(args):\n    '''\n    Write a python function to find the sum of a list of numbers.\n    '''\n    sum = 0\n    for i in range(len(args)):\n        sum += args[i]\n    return sum\n    \ndef sum_list(args):\n    '''\n    Write a python function to find the sum of a list of numbers.\n    '''\n    sum = 0\n    for i in range(len(args)):\n        sum += args[i]\n    return sum\n    \ndef average(data):\n    '''\n    Write a python function to find the average of a list of numbers.\n    '''\n    if len(data) == 0:\n        return None\n    else:\n        return sum(data)/len(data)\n    \ndef median(data):\n    '''\n    Write a python function to find the median of a list of numbers.\n    '''\n    if len(data) == 0:\n        return None\n    else:\n        length = len(data)\n        data.sort()\n        if length%2 == 0:\n            return data[length/2]\n        else:\n            return data[length/2] + data[(length-1)/2]\n    \ndef mode(data):\n    '''\n    Write a python function to find the mode of a list of numbers.\n    '''\n    if len(data) == 0:\n        return None\n    else:\n        count = {}\n        for i in data:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        max = 0\n        for i in count.values():\n            if i > max:\n                max = i\n        result = []\n        for i in count.keys():\n            if count[i] == max:\n                result.append(i)\n        return result\n        \ndef rms(data):\n    '''\n    Write a python function to find the root mean square of a list of numbers.\n    '''\n    if len(data) == 0:\n        return None\n    else:\n        sum = 0\n        for i in data:\n            sum += i**2\n        return (sum/len(data))**0.5\n    \ndef variance(data):\n    '''\n    Write a python function to find the variance of a list of numbers.\n    '''\n    if len(data) == 0:\n        return None\n    else:\n        sum = 0\n        for i in data:\n            sum += i\n        mean = sum/len(data)\n        sum = 0\n        for i in data:\n            sum += (i-mean)**2\n        return sum/len(data)\n    \ndef standarddeviation(data):\n    '''\n    Write a python function to find the standard deviation of a list of numbers.\n    '''\n    if len(data) == 0:\n        return None\n    else:\n        return (variance(data))**0.5\n    \ndef entropy(data):\n    '''\n    Write a python function to find the entropy of a list of numbers.\n    '''\n    if len(data) == 0:\n        return None\n    else:\n        sum = 0\n        for i in range(len(data)):\n            p = float(data[i])/sum(data)\n            if p == 0:\n                return 0\n            else:\n                sum += p*log(p)\n        return -sum\n    \ndef crosscorrelation(a,b):\n    '''\n    Write a python function to find the cross correlation of two lists.\n    '''\n    if len(a)!= len(b):\n        return None\n    else:\n        sum1 = 0\n        sum2 = 0\n        sum3 = 0\n        for i in range(len(a)):\n            sum1 += a[i]\n            sum2 += b[i]\n            sum3 += a[i]*b[i]\n        return sum3 - (sum1*sum2/len(a))\n    \ndef dotproduct(a,b):\n    '''\n    Write a python function to find the dot product of two lists.\n    '''\n    if len(a)!= len(b):\n        return None\n    else:\n        sum = 0\n        for i in range(len(a)):\n            sum += a[i]*b[i]\n        return sum\n    \ndef magnitude(a):\n    '''\n    Write a python function to find the magnitude of a list of numbers.\n    '''\n    sum = 0\n    for i in range(len(a)):\n        sum += a[i]**2\n    return sum**0.5\n    \ndef cosine(a,b):\n    '''\n    Write a python function to find the cosine similarity of two lists.\n    '''\n    if len(a)!= len(b):\n        return None\n    else:\n        return dotproduct(a,b)/(magnitude(a)*magnitude(b))\n    \ndef pearson(a,b):\n    '''\n    Write a python function to find the pearson similarity of two lists.\n    '''\n    if len(a)!= len(b):\n        return None\n    else:\n        sum1 = sum(a)\n        sum2 = sum(b)\n        sum3 = sum([a[i]*b[i] for i in range(len(a))])\n        sum4 = sum([a[i]**2 for i in range(len(a))])\n        sum5 = sum([b[i]**2 for i in range(len(b))])\n        return sum3/((magnitude(a)*magnitude(b))**0.5*((sum4*sum5)**0.5))\n    \ndef jaccard(a,b):\n    '''\n    Write a python function to find the jaccard similarity of two lists.\n    '''\n    if len(a)!= len(b):\n        return None\n    else:\n        sum1 = sum(a)\n        sum2 = sum(b)\n        return sum1/sum2\n    \ndef tanimoto(a,b):\n    '''\n    Write a python function to find the tanimoto similarity of two lists.\n    '''\n    if len(a)!= len(b):\n        return None\n    else:\n        sum1 = sum(a)\n        sum2 = sum(b)\n        return sum1/sum2\n    \ndef sorensen(a,b):\n    '''\n    Write a python function to find the sorensen similarity of two lists.\n    '''\n    if len(a)!= len(b):\n        return None\n    else:\n        sum1 = sum(a)\n        sum2 = sum(b)\n        return 2*sum1/sum2\n    \ndef dice(a,b):\n    '''\n    Write a python function to find the dice similarity of two lists.\n    '''\n    if len(a)!= len(b):\n        return None\n    else:\n        sum1 = sum(a)\n        sum2 = sum(b)\n        return 2*sum1/sum2\n    \ndef kulczynski(a,b):\n    '''\n    Write a python function to find the kulczynski similarity of two lists.\n    '''\n    if len("
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a>b):\n        return b\n    else:\n        return a\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\ndef test_minimum():\n    assert minimum(10,11) == 10\n    assert minimum(-10,11) == -10\n    assert minimum(-10,0) == -10\ndef test_maximum():\n    assert maximum(10,11) == 11\n    assert maximum(-10,11) == 11\n    assert maximum(-10,-11) == -11\ndef test_all():\n    test_minimum()\n    test_maximum()\nif __name__ == \"__main__\":\n    test_all()"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n    \ndef sort(a):\n    '''\n    Write a python function to sort an array of elements.\n    '''\n    for i in range(0,len(a)):\n        for j in range(i,len(a)):\n            if a[i] > a[j]:\n                temp = a[i]\n                a[i]=a[j]\n                a[j]=temp\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \n    \ndef search_min(a,b,c,d,e,f):\n    '''\n    Write a python function to find the smallest number of three numbers.\n    '''\n    if minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(a,b):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(b,f):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(a,c):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(a,b):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(b,d):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(a,c):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(a,c):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(a,c):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(b,f):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(b,f):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(a,c):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(a,c):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(b,d):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(b,d):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(c,d):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(c,d):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(c,d):\n        return minimum(a,b)\n    else:\n        return minimum(a,b)\n        \ndef search_max(a,b,c,d,e,f):\n    '''\n    Write a python function to find the largest number of three numbers.\n    '''\n    if maximum(a,b) == maximum(c,d) and maximum(e,f) == maximum(a,b):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(c,d) and maximum(e,f) == maximum(b,f):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(c,d) and maximum(e,f) == maximum(a,c):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(e,f) and maximum(c,d) == maximum(a,b):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(e,f) and maximum(c,d) == maximum(b,d):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(e,f) and maximum(c,d) == maximum(a,c):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(c,d) and maximum(e,f) == maximum(a,c):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(e,f) and maximum(c,d) == maximum(a,c):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(e,f) and maximum(c,d) == maximum(b,d):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(c,d) and maximum(e,f) == maximum(b,d):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(e,f) and maximum(c,d) == maximum(c,d):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(c,d) and maximum(e,f) == maximum(c,d):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(e,f) and maximum(c,d) == maximum(c,d):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(c,d) and maximum(e,f) == maximum(c,d):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(e,f) and maximum(c,d) == maximum(e,f):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(c,d) and maximum(e,f) == maximum(e,f):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(c,d) and maximum(e,f) == maximum(c,d):\n        return maximum(a,b)\n    elif maximum(a,b) == maximum(e,f) and maximum(c,d) == maximum(e,f):\n        return maximum(a,b)\n    else:\n        return maximum(a,b)\n        \ndef search_min_2(a,b,c,d,e,f):\n    '''\n    Write a python function to find the smallest number of two numbers.\n    '''\n    if minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(a,b):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(b,f):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(a,c):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(a,b):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(b,d):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(a,c):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(a,c):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(b,d):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(c,d) and minimum(e,f) == minimum(b,d):\n        return minimum(a,b)\n    elif minimum(a,b) == minimum(e,f) and minimum(c,d) == minimum(c,"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex) == tuple:\n        for i in range(0,len(tuplex)):\n            if tuplex[i] == tuple1:\n                return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = [1,2,3,4]\n    tuple1 = (1,2,3,4)\n    if len(tuplex) == len(tuple1):\n        for i in tuplex:\n            for j in tuple1:\n                if i == j:\n                    return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if tuplex.count(x) == 1:\n            return True\n        else:\n            return False\ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if tuplex.count(x) > 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex: \n        if tuple1 in tuplex: \n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tup in tuplex:\n        if tup == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if tuplex == tuple1: \n            print \"True\"\n            break\n        else:\n            print \"False\"\n            break\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = abs(x)\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #for i in x:\n    #    if(i%2==1):\n    #        print \"odd\"\n    #    else:\n    #        print \"even\"\n    print \"odd\" if(x%2==1) else \"even\"\nfind_Parity(x)\n    "
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x&1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 0 if x%2 == 0 else 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x&1)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    print(\"Parity is:\", bin(x).count(\"1\")%2)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if (x&1) == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n    \ndef find_Parity_in_file(filename): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    with open(filename, 'r') as f: \n        for line in f: \n            i = int(line.strip())\n            if (i&1) == 0: \n                print \"Even\"\n            else: \n                print \"Odd\"\n                \n                \ndef find_Parity_of_Sequence(n, m): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    return \"\".join(map(str, [find_Parity(i) for i in range(n, m, 2)]))\n    \n        \ndef find_Parity_in_a_range(n, m): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if (n&1) == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n    \ndef find_Parity_in_a_range_in_file(filename, n, m): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    with open(filename, 'r') as f: \n        for line in f: \n            i = int(line.strip())\n            if (i&1) == 0: \n                print \"Even\"\n            else: \n                print \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x&1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_str = str(n)\n    num_list = list(num_str)\n    num_len = len(num_list)\n    \n    bigger = False\n    if num_len % 2 == 0:\n        for i in range(num_len/2):\n            if int(num_list[i]) > int(num_list[num_len-i-1]):\n                bigger = True\n                break\n    else:\n        for i in range((num_len+1)/2):\n            if int(num_list[i]) > int(num_list[num_len-i-1]):\n                bigger = True\n                break\n    if bigger == False:\n        return -1\n    \n    rev_index = num_len-1\n    for i in range(num_len/2):\n        temp = num_list[i]\n        num_list[i] = num_list[num_len-i-1]\n        num_list[num_len-i-1] = temp\n    \n    if num_len % 2 == 0:\n        num_list[-1] = '0'\n    else:\n        num_list[-1] = '9'\n    \n    if int(''.join(num_list)) > n:\n        return int(''.join(num_list))\n    else:\n        return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def is_palindrome(x):\n        '''\n        Checks whether x is a palindrome or not.\n        '''\n        if x<0:\n            return False\n        elif x==0:\n            return True\n        else:\n            n = x\n            x = list(str(n))\n            x.reverse()\n            x = int(''.join(x))\n            return n==x\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    nums = list(str(n))\n    if len(nums) == 1:\n        return int(nums[0])\n    else:\n        i = 0\n        while i < len(nums)-1:\n            if nums[i] < nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                break\n            i += 1\n        return int(\"\".join(nums))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = list(str(n))\n    if n < 10:\n        return n\n    a = n % 10\n    n = int(n / 10)\n    b = n % 10\n    n = int(n / 10)\n    c = n % 10\n    n = int(n / 10)\n    res.sort()\n    res.append(c)\n    res.append(b)\n    res.append(a)\n    return int(''.join(str(i) for i in res))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return -1\n    n = str(n)\n    n = list(n)\n    n.sort()\n    n.reverse()\n    n = ''.join(n)\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(\"\".join(sorted(str(n), reverse=True)))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    assert type(n) == int\n    if n <= 9:\n        return n+1\n    else:\n        return int(str(n)[::-1])\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(str(n)) == 1:\n        return n\n    count = 1\n    n_list = list(str(n))\n    for i in range(len(n_list) - 2, -1, -1):\n        if int(n_list[i]) > int(n_list[i + 1]):\n            # print(n_list)\n            temp = n_list[i]\n            n_list[i] = n_list[i + 1]\n            n_list[i + 1] = temp\n            count += 1\n    if count == 1:\n        return int(''.join(n_list))\n    else:\n        return int(''.join(n_list))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def to_list(n):\n        return list(str(n))\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    m = len(nums1)\n    n = len(nums2)\n    pairs = []\n    \n    if m * n == 0:\n        return pairs\n    \n    minheap = []\n    \n    for i in range(0,m):\n        heapq.heappush(minheap, (nums1[i]+nums2[0],(i,0)))\n    \n    for i in range(0,k):\n        if len(minheap) == 0:\n            return pairs\n        \n        value, (row, col) = heapq.heappop(minheap)\n        pairs.append([nums1[row], nums2[col]])\n        if col+1 < n:\n            heapq.heappush(minheap, (nums1[row] + nums2[col+1],(row, col+1)))\n    \n    return pairs\n    \nprint k_smallest_pairs([-1,-2],[-1,3],5)\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (nums1[i], nums2[i]))\n    for i in range(k, len(nums1)):\n        heapq.heappush(heap, (nums1[i], nums2[i]))\n        heapq.heappop(heap)\n        result.append(heapq.heappop(heap))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    minHeap = []\n    for i in xrange(min(k, len(nums1))):\n        for j in xrange(min(k, len(nums2))):\n            if len(minHeap) < k:\n                heapq.heappush(minHeap, (nums1[i] + nums2[j], i, j))\n            else:\n                heapq.heappushpop(minHeap, (nums1[i] + nums2[j], i, j))\n    res = []\n    while len(minHeap) > 0:\n        res.append(heapq.heappop(minHeap))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    l = []\n    for i in nums1:\n        for j in nums2:\n            l.append([i,j])\n    l.sort(key = lambda x:x[0]+x[1])\n    return l[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # we can use quick select method as well \n    # sort both the array first and then we can find k pairs\n    # so we will use heapq library and then convert it into list \n    # and return it\n    \n    # check if k is valid \n    if k > len(nums1) * len(nums2):\n        return []\n    if k <= 0:\n        return []\n    \n    # we will use quick select to divide the array into two parts \n    # which will be one array of smalles and one array of biges\n    # in our case we will use nums1 as array of smalles and nums2 as array of biges\n    # we will use nums1 as array of smalles and nums2 as array of biges\n    # we will use nums1 as array of smalles and nums2 as array of biges\n    \n    # we will store all the elements of array of smalles in heap\n    # we will store all the elements of array of biges in heap\n    \n    # we will store all the pairs in a list \n    # we will use this list as output\n    \n    # first we will store nums1 elements into heap\n    # we will use heap as a min heap (implemented using list)\n    # we will use heap[0] to store smallest element in heap\n    # we will use heap[0][0] to store first element\n    # we will use heap[0][1] to store second element\n    # we will use heap[0][2] to store third element\n    # we will use heap[0][3] to store fourth element\n    # we will use heap[0][4] to store fifth element\n    # we will use heap[0][5] to store sixth element\n    # we will use heap[0][6] to store seventh element\n    # we will use heap[0][7] to store eighth element\n    # we will use heap[0][8] to store ninth element\n    # we will use heap[0][9] to store tenth element\n    \n    # now we will store nums2 elements into heap\n    # we will use heap as a max heap (implemented using list)\n    # we will use heap[0] to store largest element in heap\n    # we will use heap[0][0] to store first element\n    # we will use heap[0][1] to store second element\n    # we will use heap[0][2] to store third element\n    # we will use heap[0][3] to store fourth element\n    # we will use heap[0][4] to store fifth element\n    # we will use heap[0][5] to store sixth element\n    # we will use heap[0][6] to store seventh element\n    # we will use heap[0][7] to store eighth element\n    # we will use heap[0][8] to store ninth element\n    # we will use heap[0][9] to store tenth element\n    # we will use heap[0][10] to store eleventh element\n    # we will use heap[0][11] to store twelfth element\n    # we will use heap[0][12] to store thirteenth element\n    # we will use heap[0][13] to store fourtheth element\n    # we will use heap[0][14] to store fiftheth element\n    # we will use heap[0][15] to store sixtheth element\n    # we will use heap[0][16] to store seventheth element\n    # we will use heap[0][17] to store eighttheth element\n    # we will use heap[0][18] to store ninththeth element\n    # we will use heap[0][19] to store tenththeth element\n    \n    # we will store nums1 elements into heap\n    # we will use heap as a min heap (implemented using list)\n    # we will use heap[0] to store smallest element in heap\n    # we will use heap[0][0] to store first element\n    # we will use heap[0][1] to store second element\n    # we will use heap[0][2] to store third element\n    # we will use heap[0][3] to store fourth element\n    # we will use heap[0][4] to store fifth element\n    # we will use heap[0][5] to store sixth element\n    # we will use heap[0][6] to store seventh element\n    # we will use heap[0][7] to store eighth element\n    # we will use heap[0][8] to store ninth element\n    # we will use heap[0][9] to store tenth element\n    \n    # now we will store nums2 elements into heap\n    # we will use heap as a max heap (implemented using list)\n    # we will use heap[0] to store largest element in heap\n    # we will use heap[0][0] to store first element\n    # we will use heap[0][1] to store second element\n    # we will use heap[0][2] to store third element\n    # we will use heap[0][3] to store fourth element\n    # we will use heap[0][4] to store fifth element\n    # we will use heap[0][5] to store sixth element\n    # we will use heap[0][6] to store seventh element\n    # we will use heap[0][7] to store eighth element\n    # we will use heap[0][8] to store ninth element\n    # we will use heap[0][9] to store tenth element\n    # we will use heap[0][10] to store eleventh element\n    # we will use heap[0][11] to store twelfth element\n    # we will use heap[0][12] to store thirteenth element\n    # we will use heap[0][13] to store fourtheth element\n    # we will use heap[0][14] to store fiftheth element\n    # we will use heap[0][15] to store sixtheth element\n    # we will use heap[0][16] to store seventheth element\n    # we will use heap[0][17] to store eighttheth element\n    # we will use heap[0][18] to store ninththeth element\n    # we will use heap[0][19] to store tenththeth element\n    \n    # we will store nums1 elements into heap\n    # we will use heap as a min heap (implemented using list)\n    # we will use heap[0] to store smallest element in heap\n    # we will use heap[0][0] to store first element\n    # we will use heap[0][1] to store second element\n    # we will use heap[0][2] to store third element\n    # we will use heap[0][3] to store fourth element\n    # we will use heap[0][4] to store fifth element\n    # we will use heap[0][5] to store sixth element\n    # we will use heap[0][6] to store seventh element\n    # we will use heap[0][7] to store eighth element\n    # we will use heap[0][8] to store ninth element\n    # we will use heap[0][9] to store tenth element\n    \n    # now we will store nums2 elements into heap\n    # we will use heap as a max heap (implemented using list)\n    # we will use heap[0] to store largest element in heap\n    # we will use heap[0][0] to store first element\n    # we will use heap[0][1] to store second element\n    # we will use heap[0][2] to store third element\n    # we will use heap[0][3] to store fourth element\n    # we will use heap[0][4] to store fifth element\n    # we will use heap[0][5] to store sixth element\n    # we will use heap[0][6] to store seventh element\n    # we will use heap[0][7] to store eighth element\n    # we will use heap[0][8] to store ninth element\n    # we will use heap[0][9] to store tenth element\n    # we will use heap[0][10] to store eleventh element\n    # we will use heap[0][11] to store twelfth element\n    # we will use heap[0][12] to store thirteenth element\n    # we will use heap[0][13] to store fourtheth element\n    # we will use heap[0][14] to store fiftheth element\n    # we will use heap[0][15] to store sixtheth element\n    # we will use heap[0][16] to stor"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n    result = []\n    visited = [False] * len(nums1)\n    while min_heap:\n        val, a, b = heapq.heappop(min_heap)\n        if visited[a]:\n            continue\n        visited[a] = True\n        result.append((nums1[a], nums2[b]))\n        if b + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[a] + nums2[b + 1], a, b + 1))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(k):\n        if nums1:\n            heapq.heappush(heap, (nums1.pop(0), nums2.pop(0)))\n        elif nums2:\n            heapq.heappush(heap, (nums2.pop(0), None))\n        else:\n            break\n    return heap\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    minheap = []\n    for i in range(k):\n        heapq.heappush(minheap, (nums1[i] + nums2[0], i, 0))\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    minHeap = []\n    for i in range(0, k):\n        heapq.heappush(minHeap, (nums1[i], nums2[i]))\n    i = 0\n    j = 0\n    heapq.heapify(minHeap)\n    result = []\n    while i < len(nums1) and j < len(nums2):\n        result.append(heapq.heappop(minHeap))\n        if result[-1][0] < nums1[i]:\n            heapq.heappush(minHeap, (nums1[i], nums2[j]))\n            i += 1\n            j += 1\n        else:\n            heapq.heappush(minHeap, (nums1[i], nums2[j]))\n            j += 1\n    while i < len(nums1):\n        result.append(heapq.heappop(minHeap))\n        i += 1\n    while j < len(nums2):\n        result.append(heapq.heappop(minHeap))\n        j += 1\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    if len(nums1) == 0 or len(nums2) == 0:\n        return pairs\n    heap = []\n    for i in xrange(0, len(nums1)):\n        heapq.heappush(heap, (nums1[i] + nums2[0], (i, 0)))\n    for i in xrange(0, k):\n        pairs.append(heapq.heappop(heap))\n    return pairs\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    min_product = list1[0]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if (list1[i][0] * list1[j][0]) < min_product[0] * min_product[1]:\n                min_product = (list1[i][0] * list1[j][0],list1[i][0] * list1[j][1])\n            elif (list1[i][0] * list1[j][1]) < min_product[0] * min_product[1]:\n                min_product = (list1[i][0] * list1[j][1],list1[i][1] * list1[j][1])\n            elif (list1[i][1] * list1[j][1]) < min_product[0] * min_product[1]:\n                min_product = (list1[i][1] * list1[j][1],list1[i][1] * list1[j][0])\n            else:\n                continue\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if list1 == []:\n        return -1\n    else:\n        min_product = min([list1[0][0] * list1[1][1], list1[1][0] * list1[0][1]])\n        return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = [0] * len(list1)\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                min_prod[i] += (list1[i][0] * list1[j][1])\n    return min(min_prod)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = 0\n    for tuple1 in list1:\n        for tuple2 in list1:\n            if tuple1!= tuple2:\n                result = max(result, tuple1[0] * tuple2[1])\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    sorted_list = sorted(list1, key=lambda x: x[1])\n    result = sorted_list[0]\n    for i in range(len(sorted_list)-1):\n        result = min(result, (sorted_list[i+1][0] * sorted_list[i+1][1], sorted_list[i+1][0]))\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product_list = []\n    for i in range(len(list1)):\n        product_list.append(list1[i][0]*list1[i][1])\n    print(product_list)\n    return min(product_list)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n    min_prod = list1[0][0] * list1[0][1]\n    for i in xrange(1, len(list1)):\n        if min_prod > list1[i][0] * list1[i][1]:\n            min_prod = list1[i][0] * list1[i][1]\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1)\n    prod = 1\n    for i in range(len(list1)-1):\n        prod *= (list1[i][0]*list1[i+1][1])\n    return prod\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = [tup for tup in list1 if tup[0] < tup[1]]\n    return min([tup[0] * tup[1] for tup in list2])\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if list1 == None or len(list1) == 0:\n        return None\n    min_prod = list1[0][0] * list1[0][1]\n    min_index = 0\n    for i in range(1, len(list1)):\n        if list1[i][0] * list1[i][1] < min_prod:\n            min_prod = list1[i][0] * list1[i][1]\n            min_index = i\n    return (min_index, min_prod)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return\n    min_val=listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]<min_val:\n            min_val=listval[i]\n    return min_val\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return\n    max_val=listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]>max_val:\n            max_val=listval[i]\n    return max_val\ndef sort_list(listval):\n    '''\n    Write a function to sort a given heterogeneous list of numbers in ascending order.\n    '''\n    if len(listval)==0:\n        return\n    for i in range(len(listval)):\n        for j in range(i+1,len(listval)):\n            if listval[i]>listval[j]:\n                listval[i],listval[j]=listval[j],listval[i]\n    return listval\ndef count_occurrences(listval,val):\n    '''\n    Write a function to count the number of occurrences of a given value in a given heterogeneous list.\n    '''\n    count=0\n    for i in listval:\n        if i==val:\n            count=count+1\n    return count\ndef sort_list_desc(listval):\n    '''\n    Write a function to sort a given heterogeneous list of numbers in descending order.\n    '''\n    if len(listval)==0:\n        return\n    for i in range(len(listval)):\n        for j in range(i+1,len(listval)):\n            if listval[i]<listval[j]:\n                listval[i],listval[j]=listval[j],listval[i]\n    return listval\ndef unique_list(listval):\n    '''\n    Write a function to remove duplicates from a heterogeneous list.\n    '''\n    if len(listval)==0:\n        return\n    listval2=[]\n    for i in listval:\n        if i not in listval2:\n            listval2.append(i)\n    return listval2\ndef max_val_in_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return\n    max_val=listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]>max_val:\n            max_val=listval[i]\n    return max_val\ndef filter_list(listval,val):\n    '''\n    Write a function to filter a given heterogeneous list by a given value.\n    '''\n    if len(listval)==0:\n        return\n    listval2=[]\n    for i in listval:\n        if i!=val:\n            listval2.append(i)\n    return listval2\ndef remove_duplicates(listval):\n    '''\n    Write a function to remove duplicates from a heterogeneous list.\n    '''\n    if len(listval)==0:\n        return\n    listval2=[]\n    for i in listval:\n        if i not in listval2:\n            listval2.append(i)\n    return listval2\ndef insert_val(listval,val,index):\n    '''\n    Write a function to insert a value at a given index in a heterogeneous list.\n    '''\n    if len(listval)==0:\n        return\n    for i in range(len(listval)):\n        if i==index:\n            listval.insert(i,val)\n    return listval\ndef delete_val(listval,val):\n    '''\n    Write a function to delete a given value from a heterogeneous list.\n    '''\n    if len(listval)==0:\n        return\n    listval2=[]\n    for i in listval:\n        if i!=val:\n            listval2.append(i)\n    return listval2\ndef check_even_list(listval):\n    '''\n    Write a function to check if a given list contains even numbers.\n    '''\n    if len(listval)==0:\n        return\n    for i in listval:\n        if i%2!=0:\n            return False\n    return True\ndef check_odd_list(listval):\n    '''\n    Write a function to check if a given list contains odd numbers.\n    '''\n    if len(listval)==0:\n        return\n    for i in listval:\n        if i%2==0:\n            return False\n    return True\ndef check_prime_list(listval):\n    '''\n    Write a function to check if a given list of numbers contains prime numbers.\n    '''\n    if len(listval)==0:\n        return\n    for i in range(2,len(listval)):\n        if listval[i]==1:\n            continue\n        elif listval[i]%2!=0 and listval[i]%3!=0:\n            return False\n    return True\ndef fibonacci(n):\n    '''\n    Write a function to calculate the nth value of the Fibonacci sequence.\n    '''\n    if n<=1:\n        return 1\n    return fibonacci(n-1)+fibonacci(n-2)\ndef sum_list(listval):\n    '''\n    Write a function to calculate the sum of all the values in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return\n    sum_val=0\n    for i in listval:\n        sum_val=sum_val+i\n    return sum_val\ndef distinct_values(listval):\n    '''\n    Write a function to calculate the distinct values of a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return\n    listval2=[]\n    for i in listval:\n        if i not in listval2:\n            listval2.append(i)\n    return listval2\ndef sum_of_squares(listval):\n    '''\n    Write a function to calculate the sum of the squares of the values in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return\n    sum_val=0\n    for i in listval:\n        sum_val=sum_val+i*i\n    return sum_val\ndef filter_list_val(listval,val):\n    '''\n    Write a function to filter a given heterogeneous list by a given value.\n    '''\n    if len(listval)==0:\n        return\n    listval2=[]\n    for i in listval:\n        if i!=val:\n            listval2.append(i)\n    return listval2\ndef filter_list_val_desc(listval,val):\n    '''\n    Write a function to filter a given heterogeneous list by a given value in descending order.\n    '''\n    if len(listval)==0:\n        return\n    listval2=[]\n    for i in range(len(listval)-1,-1,-1):\n        if listval[i]==val:\n            listval2.append(listval[i])\n    return listval2\ndef flatten_list(listval):\n    '''\n    Write a function to flatten a given heterogeneous list to a new list.\n    '''\n    if len(listval)==0:\n        return\n    listval2=[]\n    for i in listval:\n        if type(i) is list:\n            for j in i:\n                listval2.append(j)\n        else:\n            listval2.append(i)\n    return listval2\ndef flatten_list_desc(listval):\n    '''\n    Write a function to flatten a given heterogeneous list to a new list in descending order.\n    '''\n    if len(listval)==0:\n        return\n    listval2=[]\n    for i in range(len"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return 0\n    minval=listval[0]\n    for i in range(1, len(listval)):\n        if listval[i]<minval:\n            minval=listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for val in listval[1:]:\n        if val < minval:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    minval = listval[0]\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    maxval = listval[0]\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l = len(listval)\n    if l == 0:\n        return None\n    if l == 1:\n        return listval[0]\n    if l == 2:\n        if listval[0] > listval[1]:\n            return listval[1]\n        else:\n            return listval[0]\n    mid = l/2\n    if listval[mid-1] > listval[mid]:\n        return min_val(listval[:mid])\n    else:\n        return min_val(listval[mid:])\n    \n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    l = len(listval)\n    if l == 0:\n        return None\n    if l == 1:\n        return listval[0]\n    if l == 2:\n        if listval[0] < listval[1]:\n            return listval[1]\n        else:\n            return listval[0]\n    mid = l/2\n    if listval[mid-1] < listval[mid]:\n        return max_val(listval[:mid])\n    else:\n        return max_val(listval[mid:])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    else:\n        head = word[0].upper()\n        return head + re.sub('(?!^)([A-Z]+)', lambda m: m.group(1).upper(), word[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    print(\"\\n\")\n    l=re.split(\"([a-z]+)\", word)\n    print(l)\n    string=\"\"\n    for i in range(0, len(l)):\n        if l[i] == \"\":\n            pass\n        elif l[i]==\"_\":\n            string += \" \"\n        else:\n            string += l[i]\n            if i!= len(l)-1:\n                string += l[i+1].title()\n    print(string)\n    return string\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #Step 1 - Remove the spaces\n    #Step 2 - Split the string\n    #Step 3 - Check the conditions of letters\n    #Step 4 - Concat the results\n    return re.sub('\\s', '', word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # transform the given string into an array\n    # then convert the array to camel case\n    words = word.split('_')\n    new_word = ''\n    # create camel case string\n    for word in words:\n        new_word = new_word + word[0].upper() + word[1:]\n    return new_word\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    # transform the given string into an array\n    # then convert the array to camel case\n    words = word.split('_')\n    new_word = ''\n    # create camel case string\n    for word in words:\n        if word[0].islower():\n            new_word = new_word + word[0].upper() + word[1:]\n        else:\n            new_word = new_word + word[0].lower() + word[1:]\n    return new_word\n    \ndef camel_to_underline(word):\n    '''\n    Write a function to convert the given camel case string to underscore case string.\n    '''\n    # transform the given string into an array\n    # then convert the array to camel case\n    words = word.split('_')\n    new_word = ''\n    # create underscore case string\n    for word in words:\n        if word[0].isupper():\n            new_word = new_word + '_' + word[0].lower() + word[1:]\n        else:\n            new_word = new_word + '_' + word[0].upper() + word[1:]\n    return new_word\n    \ndef underline_to_camel(word):\n    '''\n    Write a function to convert the given underscore case string to camel case string.\n    '''\n    # transform the given string into an array\n    # then convert the array to camel case\n    words = word.split('_')\n    new_word = ''\n    # create camel case string\n    for word in words:\n        if word[0].islower():\n            new_word = new_word + word[0].upper() + word[1:]\n        else:\n            new_word = new_word + word[0].lower() + word[1:]\n    return new_word\n    \ndef underline_to_snake(word):\n    '''\n    Write a function to convert the given underscore case string to snake case string.\n    '''\n    # transform the given string into an array\n    # then convert the array to camel case\n    words = word.split('_')\n    new_word = ''\n    # create underscore case string\n    for word in words:\n        if word[0].isupper():\n            new_word = new_word + word[0].lower() + word[1:]\n        else:\n            new_word = new_word + word[0].upper() + word[1:]\n    return new_word\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_','').title().split()\n    return ''.join([a[0].upper() + a[1:] for a in word])\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'(?!^)([A-Z][a-z]+)', r'_\\1', word).lower()\ndef to_camel_case(s):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return s[0] + s[1:].replace('_', '')\ndef to_snake_case(s):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', s)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\ndef is_correct_password(password):\n    '''\n    Write a function to check if the given password is strong or not.\n    '''\n    if len(password) < 6:\n        return False\n    elif re.search('[a-z]', password) is None:\n        return False\n    elif re.search('[A-Z]', password) is None:\n        return False\n    elif re.search('[0-9]', password) is None:\n        return False\n    elif re.search('[_@$]', password) is None:\n        return False\n    else:\n        return True\ndef is_correct_password_2(password):\n    '''\n    Write a function to check if the given password is strong or not.\n    '''\n    if len(password) < 6:\n        return False\n    elif re.search('[a-z]', password) is None:\n        return False\n    elif re.search('[A-Z]', password) is None:\n        return False\n    elif re.search('[0-9]', password) is None:\n        return False\n    elif re.search('[_@$]', password) is None:\n        return False\n    else:\n        return True\ndef is_correct_password_3(password):\n    '''\n    Write a function to check if the given password is strong or not.\n    '''\n    if len(password) < 6:\n        return False\n    elif re.search('[a-z]', password) is None:\n        return False\n    elif re.search('[A-Z]', password) is None:\n        return False\n    elif re.search('[0-9]', password) is None:\n        return False\n    elif re.search('[_@$]', password) is None:\n        return False\n    else:\n        return True\ndef is_correct_password_4(password):\n    '''\n    Write a function to check if the given password is strong or not.\n    '''\n    if len(password) < 6:\n        return False\n    elif re.search('[a-z]', password) is None:\n        return False\n    elif re.search('[A-Z]', password) is None:\n        return False\n    elif re.search('[0-9]', password) is None:\n        return False\n    elif re.search('[_@$]', password) is None:\n        return False\n    else:\n        return True\ndef is_correct_password_5(password):\n    '''\n    Write a function to check if the given password is strong or not.\n    '''\n    if len(password) < 6:\n        return False\n    elif re.search('[a-z]', password) is None:\n        return False\n    elif re.search('[A-Z]', password) is None:\n        return False\n    elif re.search('[0-9]', password) is None:\n        return False\n    elif re.search('[_@$]', password) is None:\n        return False\n    else:\n        return True\ndef is_correct_password_6(password):\n    '''\n    Write a function to check if the given password is strong or not.\n    '''\n    if len(password) < 6:\n        return False\n    elif re.search('[a-z]', password) is None:\n        return False\n    elif re.search('[A-Z]', password) is None:\n        return False\n    elif re.search('[0-9]', password) is None:\n        return False\n    elif re.search('[_@$]', password) is None:\n        return False\n    else:\n        return True\ndef is_correct_password_7(password):\n    '''\n    Write a function to check if the given password is strong or not.\n    '''\n    if len(password) < 6:\n        return False\n    elif re.search('[a-z]', password) is None:\n        return False\n    elif re.search('[A-Z]', password) is None:\n        return False\n    elif re.search('[0-9]', password) is None:\n        return False\n    elif re.search('[_@$]', password) is None:\n        return False\n    else:\n        return True\ndef is_correct_password_8(password):\n    '''\n    Write a function to check if the given password is strong or not.\n    '''\n    if len(password) < 6:\n        return False\n    elif re.search('[a-z]', password) is None:\n        return False\n    elif re.search('[A-Z]', password) is None:\n        return False\n    elif re.search('[0-9]', password) is None:\n        return False\n    elif re.search('[_@$]', password) is None:\n        return False\n    else:\n        return True\ndef is_correct_password_9(password):\n    '''\n    Write a function to check if the given password is strong or not.\n    '''\n    if len(password) < 6:\n        return False\n    elif re.search('[a-z]', password) is None:\n        return False\n    elif re.search('[A-Z]', password) is None:\n        return False\n    elif re.search('[0-9]', password) is None:\n        return False\n    elif re.search('[_@$]', password) is None:\n        return False\n    else:\n        return True\ndef is_correct_password_10(password):\n    '''\n    Write a function to check if the given password is strong or not.\n    '''\n    if len(password) < 6:\n        return False\n    elif re.search('[a-z]', password) is None:\n        return False\n    elif re.search('[A-Z]', password) is None:\n        return False\n    elif re.search('[0-9]', password) is None:\n        return False\n    elif re.search('[_@$]', password) is None:\n        return False\n    else:\n        return True\ndef is_correct_password_11(password):\n    '''\n    Write a function to check if the given password is strong or not.\n    '''\n    if len(password) < 6:\n        return False\n    elif re.search('[a-z]', password) is None:\n        return False\n    elif re.search('[A-Z]', password) is None:\n        return False\n    elif re.search('[0-9]', password) is None:\n        return False\n    elif re.search('[_@$]', password) is None:\n        return False\n    else:\n        return True\ndef is_correct_password_12(password):\n    '''\n    Write a function to check if the given password is strong or not.\n    '''\n    if len(password) < 6:\n        return False\n    elif re.search('[a-z]', password) is None:\n        return False\n    elif re.search('[A-Z]', password) is None:\n        return False\n    elif re.search('"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_',' ')\n    word = re.sub('\\s+',' ',word)\n    word = word.title()\n    return word\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    word = word.replace(' ', '')\n    return word[0].lower()+word[1:]\ndef to_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    word = re.sub('[\\-_]+','_',word)\n    return word[0].lower()+word[1:]\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    word = word.replace(' ', '')\n    return re.sub('_', '-', word)\ndef to_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return first + ''.join(x.title() for x in rest)\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', first).lower() + ''.join(x.title() for x in rest)\ndef to_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return first + ''.join(x.title() for x in rest)\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', first).lower() + ''.join(x.title() for x in rest)\ndef to_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return first + ''.join(x.title() for x in rest)\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', first).lower() + ''.join(x.title() for x in rest)\ndef to_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return first + ''.join(x.title() for x in rest)\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', first).lower() + ''.join(x.title() for x in rest)\ndef to_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return first + ''.join(x.title() for x in rest)\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', first).lower() + ''.join(x.title() for x in rest)\ndef to_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return first + ''.join(x.title() for x in rest)\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', first).lower() + ''.join(x.title() for x in rest)\ndef to_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return first + ''.join(x.title() for x in rest)\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', first).lower() + ''.join(x.title() for x in rest)\ndef to_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return first + ''.join(x.title() for x in rest)\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', first).lower() + ''.join(x.title() for x in rest)\ndef to_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return first + ''.join(x.title() for x in rest)\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', first).lower() + ''.join(x.title() for x in rest)\ndef to_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return first + ''.join(x.title() for x in rest)\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', first).lower() + ''.join(x.title() for x in rest)\ndef to_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return first + ''.join(x.title() for x in rest)\ndef to_snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first, *rest = word.split('_')\n    return re.sub('([a-z0-9])([A-Z])', r'\\"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    if word[0].isdigit() and not word[1].isdigit():\n        return ''\n    if not word[0].isdigit() and word[1].isdigit():\n        return ''\n    if word[0].isdigit() and word[1].isdigit():\n        return ''\n    if word[0].isupper():\n        return word[0].lower() + word[1:]\n    else:\n        return word[0].lower() + word[1:].title()\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    l = word.split('_')\n    print(l)\n    print(l[0],end=\"\")\n    for i in range(1,len(l)):\n        print(l[i].capitalize(),end=\"\")\n    return \"\"\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l==[]:\n        return []\n    else:\n        return [l[0]]+remove_odd(l[1:])\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2 == 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l= [i for i in l if i%2==0]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2!=0]\ndef add_odd_num(l):\n    '''\n    Write a python function to add a number to each item in the list\n    '''\n    return [x+2 for x in l]\ndef add_to_each_item(l,n):\n    '''\n    Write a python function to add a number to each item in the list\n    '''\n    return [x+n for x in l]\ndef remove_pos(l,pos):\n    '''\n    Write a python function to remove an element from a list\n    at a specified position\n    '''\n    return l[:pos]+l[pos+1:]\ndef rotate(l,n):\n    '''\n    Write a python function to rotate an array by n elements\n    '''\n    return l[n:]+l[:n]\ndef find_max(l):\n    '''\n    Write a python function to find the maximum of a list\n    '''\n    return max(l)\ndef find_min(l):\n    '''\n    Write a python function to find the minimum of a list\n    '''\n    return min(l)\ndef rotate_arr(l,n):\n    '''\n    Write a python function to rotate an array by n elements\n    '''\n    if len(l)>=n:\n        return l[n:]+l[:n]\n    else:\n        return l\ndef find_rotated_pos(l,n):\n    '''\n    Write a python function to find the position of the\n    rotated array by n elements\n    '''\n    if n>len(l):\n        return -1\n    if len(l)==0:\n        return -1\n    return len(l)-n\ndef find_rotated_pos_2(l,n):\n    '''\n    Write a python function to find the position of the\n    rotated array by n elements\n    '''\n    if len(l)==0:\n        return -1\n    return (len(l)-n)%len(l)\ndef rotate_arr_2(l,n):\n    '''\n    Write a python function to rotate an array by n elements\n    '''\n    if len(l)>=n:\n        return l[n:]+l[:n]\n    else:\n        if len(l)==0:\n            return []\n        return l[len(l)-n:]+l[:len(l)-n]\ndef rotate_arr_3(l,n):\n    '''\n    Write a python function to rotate an array by n elements\n    '''\n    if len(l)>=n:\n        return l[n:]+l[:n]\n    else:\n        if len(l)==0:\n            return []\n        return l[len(l)-n:]+l[:len(l)-n]\ndef get_rotated_arr(l,n):\n    '''\n    Write a python function to find the index of the\n    rotated array by n elements\n    '''\n    if len(l)==0:\n        return -1\n    return (len(l)-n)%len(l)\ndef rotate_arr_4(l,n):\n    '''\n    Write a python function to find the index of the\n    rotated array by n elements\n    '''\n    if len(l)==0:\n        return -1\n    return (len(l)-n)%len(l)\ndef get_rotated_arr_2(l,n):\n    '''\n    Write a python function to find the index of the\n    rotated array by n elements\n    '''\n    if len(l)==0:\n        return -1\n    return len(l)-n\ndef is_anagram(s1,s2):\n    '''\n    Write a python function to check if two strings are anagrams of each other\n    '''\n    return sorted(s1)==sorted(s2)\ndef get_anagrams(s):\n    '''\n    Write a python function to find the anagrams of a string\n    '''\n    return sorted([x for x in s])\ndef find_missing_num(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum(l) - sum(set(l))\ndef find_missing_num_2(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum(range(min(l),max(l)+1)) - sum(l)\ndef find_missing_num_3(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum(range(min(l),max(l)+1)) - sum(l)\ndef find_missing_num_4(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if i not in l])\ndef find_missing_num_5(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if i not in l])\ndef find_missing_num_6(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if i not in l])\ndef find_missing_num_7(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum(range(1,max(l)+1)) - sum(l)\ndef find_missing_num_8(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum(range(1,max(l)+1)) - sum(l)\ndef find_missing_num_9(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if i not in l])\ndef find_missing_num_10(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if i not in l])\ndef find_missing_num_11(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if i not in l])\ndef find_missing_num_12(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if i not in l])\ndef find_missing_num_13(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if i not in l])\ndef find_missing_num_14(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if i not in l])\ndef find_missing_num_15(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if i not in l])\ndef find_missing_num_16(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if i not in l])\ndef find_missing_num_17(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if i not in l])\ndef find_missing_num_18(l):\n    '''\n    Write a python function to find the missing number in a list\n    '''\n    return sum([i for i in range(1,max(l)+1) if "
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if not l:\n        return\n    p1 = 0\n    p2 = 1\n    while p2<len(l):\n        if l[p1]%2==0:\n            p1+=1\n        else:\n            l.pop(p2)\n        p2+=1\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item[n] for item in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [element for element in list1[n]]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # [[1,2],[3,4],[5,6],[7,8],[9,10]]\n    # list1 = [1,2,3,4,5,6,7,8,9,10]\n    # n = 1\n    # nth element = [2,3,4,5,6,7,8,9,10]\n    return [i[n-1] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item[n] for item in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # return list1[n-1]\n    if n == 0:\n        raise IndexError(\"0 is not a valid index\")\n    return list1[n - 1][0]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    if list1 & list2:\n        return True\n    else:\n        return False\ndef unique(list1):\n    '''\n    Write a python function to find the unique elements of a sequence.\n    '''\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef a_star(graph, start, goal):\n    '''\n    Write a python function to find the shortest path between a start node and a goal node using A* search.\n    '''\n    import heapq\n    from operator import itemgetter\n    if start == goal:\n        return [start]\n    frontier = [(0, start)]\n    explored = []\n    while frontier:\n        cost, current = heapq.heappop(frontier)\n        if current == goal:\n            return cost\n        elif current in explored:\n            continue\n        else:\n            explored.append(current)\n            for i in graph[current]:\n                heapq.heappush(frontier, (cost + i[1], i[0]))\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) > len(list2):\n        for val in list1:\n            if val in list2:\n                return True\n    else:\n        for val in list2:\n            if val in list1:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    flag = 0\n    for i in list1:\n        for j in list2:\n            if i==j:\n                flag = 1\n                break\n        if flag == 1:\n            break\n    if flag == 0:\n        return False\n    else:\n        return True\ndef symmetric_difference(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    flag = 0\n    for i in list1:\n        for j in list2:\n            if i==j:\n                flag = 1\n                break\n        if flag == 0:\n            list2.append(i)\n        flag = 0\n    return list2\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if(len(list1)==0 or len(list2)==0):\n        return False\n    for x in list1:\n        for y in list2:\n            if(x==y):\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    flag=0\n    for i in list1:\n        if i in list2:\n            flag=1\n            break\n    return flag\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    list1,list2=sorted(list1),sorted(list2)\n    if list1[-1] < list2[0]:return False\n    for i in range(len(list2)):\n        if list2[i] in list1:return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for ele in list1:\n        if ele in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for a in list1:\n        if a in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result=False\n    for i in range(0,len(list1)):\n        if list1[i] in list2:\n            result=True\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return max(arr[-1]*arr[-2],arr[-2]*arr[-3])\ndef maxProductSubarray(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    result = [arr[-1],arr[-2]]\n    for i in range(1,len(arr)-1):\n        if arr[-i-1] * arr[-i-2] > arr[-i] * arr[-i-3]:\n            result = [arr[-i-1],arr[-i-2]]\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maximum_product = -999\n    if len(arr) == 0:\n        return None\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    for i in xrange(len(arr)):\n        for j in xrange(i + 1, len(arr)):\n            if arr[i] * arr[j] > maximum_product:\n                maximum_product = arr[i] * arr[j]\n    \n    return maximum_product\n    \n    \ndef get_max_product(n, arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    \n    if n == 0:\n        return max_prod\n    \n    if n == 1:\n        return arr[0]\n    \n    for i in xrange(n):\n        for j in xrange(i + 1, n):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n    \n    return max_prod\n    \n    \ndef sort_arr(arr, n):\n    '''\n    Write a python function to sort a given array of integers.\n    '''\n    \n    if n == 1:\n        return\n    \n    if n == 0:\n        return\n    \n    temp = arr[0]\n    \n    for i in xrange(n):\n        for j in xrange(i + 1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    \n    arr[0] = temp\n    \n    sort_arr(arr, n - 1)\n    \n    \ndef get_max_product_2(n, arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    \n    if n == 0:\n        return max_prod\n    \n    if n == 1:\n        return arr[0]\n    \n    max_prod = arr[0]\n    \n    temp = arr[1]\n    \n    for i in xrange(2, n):\n        if temp > 0:\n            max_prod = max(max_prod, temp * arr[i])\n        \n        if arr[i] > 0:\n            temp = temp * arr[i]\n    \n    if temp > 0:\n        max_prod = max(max_prod, temp)\n    \n    return max_prod\n    \n    \ndef get_max_product_3(n, arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    \n    if n == 0:\n        return max_prod\n    \n    if n == 1:\n        return arr[0]\n    \n    max_prod = arr[0]\n    \n    temp = arr[1]\n    \n    for i in xrange(2, n):\n        if temp > 0:\n            max_prod = max(max_prod, temp * arr[i])\n        \n        if arr[i] > 0:\n            temp = temp * arr[i]\n    \n    return max_prod\n    \n    \ndef get_max_product_4(n, arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    \n    if n == 0:\n        return max_prod\n    \n    if n == 1:\n        return arr[0]\n    \n    max_prod = arr[0]\n    \n    temp = arr[1]\n    \n    for i in xrange(2, n):\n        if temp > 0:\n            max_prod = max(max_prod, temp * arr[i])\n        \n        if arr[i] > 0:\n            temp = temp * arr[i]\n    \n    return max_prod\n    \n    \ndef get_max_product_5(n, arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    \n    if n == 0:\n        return max_prod\n    \n    if n == 1:\n        return arr[0]\n    \n    max_prod = arr[0]\n    \n    temp = arr[1]\n    \n    for i in xrange(2, n):\n        if temp > 0:\n            max_prod = max(max_prod, temp * arr[i])\n        \n        if arr[i] > 0:\n            temp = temp * arr[i]\n    \n    return max_prod\n    \n    \ndef get_max_product_6(n, arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    \n    if n == 0:\n        return max_prod\n    \n    if n == 1:\n        return arr[0]\n    \n    max_prod = arr[0]\n    \n    temp = arr[1]\n    \n    for i in xrange(2, n):\n        if temp > 0:\n            max_prod = max(max_prod, temp * arr[i])\n        \n        if arr[i] > 0:\n            temp = temp * arr[i]\n    \n    return max_prod\n    \n    \ndef get_max_product_7(n, arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    \n    if n == 0:\n        return max_prod\n    \n    if n == 1:\n        return arr[0]\n    \n    max_prod = arr[0]\n    \n    temp = arr[1]\n    \n    for i in xrange(2, n):\n        if temp > 0:\n            max_prod = max(max_prod, temp * arr[i])\n        \n        if arr[i] > 0:\n            temp = temp * arr[i]\n    \n    return max_prod\n    \n    \ndef get_max_product_8(n, arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    \n    if n == 0:\n        return max_prod\n    \n    if n == 1:\n        return arr[0]\n    \n    max_prod = arr[0]\n    \n    temp = arr[1]\n    \n    for i in xrange(2, n):\n        if temp > 0:\n            max_prod = max(max_prod, temp * arr[i])\n        \n        if arr[i] > 0:\n            temp = temp * arr[i]\n    \n    return max_prod\n    \n    \ndef get_max_product_9(n, arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    \n    if n == 0:\n        return max_prod\n    \n    if n == 1:\n        return arr[0]\n    \n    max_prod = arr[0]\n    \n    temp = arr[1]\n    \n    for i in xrange(2, n):\n        if temp > 0:\n            max_prod = max(max_prod, temp * arr[i])\n        \n        if arr[i] > 0:\n            temp = temp * arr[i]\n    \n    return max_prod\n    \n    \ndef get_max_product_10(n, arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    \n    if n == 0:\n        return max_prod\n    \n    if n == 1:\n        return arr[0]\n    \n    max_prod = arr[0]\n    \n    temp = arr[1]\n    \n    for i in xrange(2, "
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    return arr[0] * arr[1]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    max_ending_here=max_ending_here_right=max_so_far=arr[0]\n    for i in range(1,len(arr)):\n        max_ending_here=max(arr[i],max_ending_here*arr[i])\n        max_ending_here_right=max(arr[i],max_ending_here_right*arr[i])\n        max_so_far=max(max_ending_here_right,max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    first_index = 0\n    second_index = len(arr) - 1\n    first_product = arr[first_index] * arr[second_index]\n    \n    while first_index < second_index:\n        current_product = arr[first_index] * arr[second_index]\n        if current_product > first_product:\n            first_product = current_product\n        first_index += 1\n        second_index -= 1\n    return first_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    temp = []\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            temp.append(arr[i]*arr[j])\n    return max(temp)\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    min_value = arr[0]\n    max_value = arr[0]\n    product = arr[0]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if arr == None:\n        return\n    n = len(arr)\n    if n <= 1:\n        return\n    max_product = -2147483648\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n    print arr[max_i], arr[max_j]\n    print 'Max product is: ', max_product\n    return\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n    \ndef rotate_matrix(arr):\n    '''\n    Write a python function to rotate a square matrix (N x N) by 90 degrees in a clockwise direction.\n    '''\n    n = len(arr)\n    for i in range(n/2):\n        for j in range(i, n-i-1):\n            temp = arr[i][j]\n            arr[i][j] = arr[n-j-1][i]\n            arr[n-j-1][i] = arr[n-i-1][n-j-1]\n            arr[n-i-1][n-j-1] = arr[j][n-i-1]\n            arr[j][n-i-1] = temp\n    return arr\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] * arr[j] > result:\n                result = arr[i] * arr[j]\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a=set()\n    for i in Input:\n        a.add(i[0])\n    return list(a)\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n = len(Input)\n    first_element = []\n    for i in range(0,n):\n        first_element.append(Input[i][0])\n    first_element = set(first_element)\n    print first_element\n    \ndef list_comprehension(Input): \n    '''\n    Write a function to get a list of words with the given length.\n    '''\n    n = len(Input)\n    l = []\n    for i in range(0,n):\n        l.append(Input[i][1])\n    print l\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a=set(Input[0])\n    for i in Input:\n        a.intersection_update(set(i))\n    return a\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # output = []\n    # for i in Input:\n    #     if i[0] in output:\n    #         output.append(i[1])\n    #     else:\n    #         output.append(i[0])\n    # return output\n    return list(set.intersection(*[set(item) for item in Input]))\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #my_dict = {}\n    my_list = []\n    new_list = []\n    for x in Input: \n        my_list.append(x[0])\n    for y in my_list: \n        if y not in new_list: \n            new_list.append(y)\n    for x in Input: \n        if x[0] in new_list: \n            print(x)\n            #my_dict[x[0]] = x\n    #return my_dict\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Solution 1\n    # Output=set([])\n    # for i in Input:\n    #     if Input.count(i[0])==1:\n    #         Output.add(i[0])\n    # return list(Output)\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if not Input:\n        return []\n    \n    Common_list = []\n    for val in Input:\n        val = val[0]\n        if val not in Common_list:\n            Common_list.append(val)\n    Common_list.sort()\n    \n    return Common_list\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                if i not in result:\n                    result.append(i)\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l = []\n    for i in Input:\n        l.append(i[0])\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] > 1:\n            return i\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [first for first, *_ in Input if first in _ for _ in Input]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = len(lst)\n    m1 = lst[0]\n    for i in range(1,m):\n        if len(lst[i]) > len(m1):\n            m1 = lst[i]\n    return m1\n    \n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    m = len(lst)\n    m1 = lst[0]\n    for i in range(1,m):\n        if len(lst[i]) < len(m1):\n            m1 = lst[i]\n    return m1\n    \n    \n    \ndef Find_Count(lst):\n    '''\n    Write a python function to find the count of the elements of a list having a certain value.\n    '''\n    m = len(lst)\n    c = 0\n    for i in range(m):\n        if lst[i] == True:\n            c = c + 1\n    return c\n    \n    \ndef Find_Mul(lst):\n    '''\n    Write a python function to find the product of elements of a list.\n    '''\n    m = len(lst)\n    p = 1\n    for i in range(m):\n        p = p * lst[i]\n    return p\n    \n    \ndef Find_Sum(lst):\n    '''\n    Write a python function to find the sum of elements of a list.\n    '''\n    m = len(lst)\n    s = 0\n    for i in range(m):\n        s = s + lst[i]\n    return s\n    \n    \ndef Sort_List_ascending(lst):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    m = len(lst)\n    for i in range(m):\n        j = i\n        while j > 0 and lst[j-1] > lst[j]:\n            lst[j-1], lst[j] = lst[j], lst[j-1]\n            j = j - 1\n    return lst\n    \n    \ndef Sort_List_descending(lst):\n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    m = len(lst)\n    for i in range(m):\n        j = i\n        while j > 0 and lst[j-1] < lst[j]:\n            lst[j-1], lst[j] = lst[j], lst[j-1]\n            j = j - 1\n    return lst\n    \n    \ndef Sort_List_by_index(lst,k):\n    '''\n    Write a python function to sort a list in order based on the index k.\n    '''\n    m = len(lst)\n    for i in range(m):\n        j = i\n        while j > 0 and lst[j-1][k] > lst[j][k]:\n            lst[j-1], lst[j] = lst[j], lst[j-1]\n            j = j - 1\n    return lst\n    \n    \ndef Sort_List_by_index1(lst,k):\n    '''\n    Write a python function to sort a list in order based on the index k.\n    '''\n    m = len(lst)\n    for i in range(m):\n        j = i\n        while j > 0 and lst[j-1][k] > lst[j][k]:\n            lst[j-1], lst[j] = lst[j], lst[j-1]\n            j = j - 1\n    return lst\n    \n    \ndef Sort_List_by_index2(lst,k):\n    '''\n    Write a python function to sort a list in order based on the index k.\n    '''\n    m = len(lst)\n    for i in range(m):\n        j = i\n        while j > 0 and lst[j-1][k] > lst[j][k]:\n            lst[j-1], lst[j] = lst[j], lst[j-1]\n            j = j - 1\n    return lst\n    \n    \ndef Sort_List_by_index3(lst,k):\n    '''\n    Write a python function to sort a list in order based on the index k.\n    '''\n    m = len(lst)\n    for i in range(m):\n        j = i\n        while j > 0 and lst[j-1][k] > lst[j][k]:\n            lst[j-1], lst[j] = lst[j], lst[j-1]\n            j = j - 1\n    return lst\n    \n    \ndef Sort_List_by_index4(lst,k):\n    '''\n    Write a python function to sort a list in order based on the index k.\n    '''\n    m = len(lst)\n    for i in range(m):\n        j = i\n        while j > 0 and lst[j-1][k] > lst[j][k]:\n            lst[j-1], lst[j] = lst[j], lst[j-1]\n            j = j - 1\n    return lst\n    \n    \ndef Sort_List_by_index5(lst,k):\n    '''\n    Write a python function to sort a list in order based on the index k.\n    '''\n    m = len(lst)\n    for i in range(m):\n        j = i\n        while j > 0 and lst[j-1][k] > lst[j][k]:\n            lst[j-1], lst[j] = lst[j], lst[j-1]\n            j = j - 1\n    return lst\n    \n    \ndef Check_Sublist(lst1,lst2):\n    '''\n    Write a python function to check whether lst2 is a sublist of lst1.\n    '''\n    m = len(lst2)\n    n = len(lst1)\n    for i in range(n-m+1):\n        s = 0\n        for j in range(m):\n            if lst1[i+j] == lst2[j]:\n                s = s + 1\n        if s == m:\n            return True\n    return False\n    \n    \ndef Delete_List(lst,pos):\n    '''\n    Write a python function to delete a value from a list.\n    '''\n    m = len(lst)\n    lst1 = []\n    for i in range(m):\n        if i!= pos:\n            lst1.append(lst[i])\n    return lst1\n    \n    \ndef Reverse_List(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    m = len(lst)\n    lst1 = []\n    for i in range(m):\n        lst1.append(lst[m-1-i])\n    return lst1\n    \n    \ndef Search_List(lst,value):\n    '''\n    Write a python function to search a value in a list.\n    '''\n    m = len(lst)\n    s = -1\n    for i in range(m):\n        if lst[i] == value:\n            s = i\n    return s\n    \n    \ndef Search_List_with_index(lst,value):\n    '''\n    Write a python function to search a value in a list.\n    '''\n    m = len(lst)\n    s = -1\n    for i in range(m):\n        if lst[i] == value:\n            s = i\n            break\n    return s\n    \n    \ndef Search_List_with_index1(lst,value):\n    '''\n    Write a python function to search a value in a list.\n    '''\n    m = len(lst)\n    s = -1\n    for i in range(m):\n        if lst[i] == value:\n            s = i\n            break\n    return s\n    \n    \ndef Search_List_with_index2(lst,value):"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    x = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])>= len(x):\n            x = lst[i]\n    return x\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen = 0\n    index = 0\n    for i in range(len(lst)):\n        if maxlen < len(lst[i]):\n            maxlen = len(lst[i])\n            index = i\n    return lst[index]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > m:\n            m = len(lst[i])\n            res = lst[i]\n    return res\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_len = len(lst)\n    max_len = 0\n    for i in lst:\n        if len(i)>max_len:\n            max_len = len(i)\n            res = i\n    return res\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len=len(lst[0])\n    max_ele=lst[0]\n    for ele in lst:\n        if len(ele)>max_len:\n            max_len=len(ele)\n            max_ele=ele\n    return max_ele\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_len = len(lst)\n    max_len = lst_len\n    max_elm = None\n    for i in xrange(lst_len):\n        lst_len_tmp = len(lst[i])\n        if lst_len_tmp > max_len:\n            max_len = lst_len_tmp\n            max_elm = lst[i]\n    return max_elm\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max_length = lst[0]\n    for i in lst:\n        if len(i)> len(Max_length):\n            Max_length = i\n    print 'Maximum length is',Max_length\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = len(lst[0])\n    index = 0\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n            index = lst.index(i)\n    return lst[index]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_item = lst[0]\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s=0\n    for i in list1:\n        s+=round(i)\n    print(s*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(0, len(list1)):\n        list1[i] = round(list1[i])\n        total += list1[i]\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total += round(x)\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += round(num)\n    return sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], 2)\n        total += list1[i]\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))\n    \nround_and_sum([3.4, 7.8, 3.2, 5.1, 2.3, 4.3, 4.6, 5.9, 5.7])"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in list1:\n        i = int(i)\n        i = round(i,0)\n        print(i)\n    print(len(list1))\n    return (len(list1))*(sum(list1))\n    "
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total += round(x)\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(i,2) for i in list1])\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for x in list1:\n        sum += round(x)\n    print(sum * len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = 0\n    i = 1\n    while i <= n:\n        if i%2==0:\n            a = a + i**3\n        i += 1\n    print(a)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2 == 0:\n            result = result + i**3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n**3\n    \ndef cube_Sum2(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(n) if i%2==0)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    total = 0\n    \n    for i in range(2,n+1):\n        if i % 2 == 0:\n            total += i*i*i\n            \n    return total\n    \ndef test_cube_Sum():\n    assert(cube_Sum(2) == 36)\n    assert(cube_Sum(3) == 276)\n    assert(cube_Sum(4) == 5040)\n    assert(cube_Sum(5) == 5040)\n    \n    \nif __name__ == \"__main__\":\n    test_cube_Sum()\n    print(cube_Sum(3))\n    print(cube_Sum(5))"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<1:\n        return \"Enter a positive natural number\"\n    else:\n        return sum([x**3 for x in range(2,n+1,2)])\n    \n    \nprint cube_Sum(4)\nprint cube_Sum(3)"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(x**3 for x in range(n) if x%2==0)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Base Case\n    if n == 1: \n        return 0\n    # Inductive Step\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2 == 0:\n            result += i ** 3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n = int(n)\n    result = 0\n    for i in range(0, n):\n        if i%2 == 0:\n            result = result + i**3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(n):\n        if i%2 == 0:\n            sum = sum + i**3 \n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    res = ''\n    for elem in test_tup:\n        res = res + elem + delimiter\n    return res[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    delimiter = '_'\n    s = ''\n    for i in test_tup:\n        s += i + delimiter\n    return s[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) == 0:\n        return 'No elements to concatenate'\n    else:\n        final_str = ''\n        for i in range(len(test_tup)):\n            final_str += str(test_tup[i])\n            if i < len(test_tup)-1:\n                final_str += delimiter\n    return final_str\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    if len(test_tup) == 0:\n        return\n    else:\n        return concatenate_tuple(test_tup[1:]) + test_tup[0]\n    "
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_str = ''\n    for elem in test_tup:\n        new_str += str(elem) + ','\n    return new_str[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    for elem in test_tup:\n        return elem\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + ','\n    return result[:-1]\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return ((n*n*n)/3)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Sum_Of_Cubed_Digits(n):\n    '''\n    Write a python function to find the sum of cubed digits of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        s = str(i**3)\n        sum = sum + int(s[0]) + int(s[1]) + int(s[2])\n    return sum\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    avg = sum/n\n    print 'The average of cubes of first',n,'natural numbers is ',avg\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # n = input(\"Enter the value of n:\")\n    # n = int(n)\n    c = 0\n    result = 0\n    for i in range(1, n+1):\n        result = result + i**3\n        c += 1\n    # print(result/c)\n    print(\"Average of cubes is\", result/c)\n    return result/c\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total = total + (i**3)\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 1:\n        return 1\n    return n**3 + find_Average_Of_Cube(n-1)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Sum=0\n    for i in range(1,n+1):\n        Sum=Sum+i**3\n    avg=Sum/n\n    return avg\n    \n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n * n * n) / 3.0\n    \ndef find_Average_Of_Cube_With_Recursion(n):\n    if n == 0:\n        return 0\n    else:\n        return (find_Average_Of_Cube_With_Recursion(n - 1) * n) / 2\n    \ndef find_Average_Of_Cube_Iteration(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes_of_numbers = []\n    for i in range(n):\n        cubes_of_numbers.append(i * i * i)\n    return sum(cubes_of_numbers) / float(len(cubes_of_numbers))\n    \ndef find_Average_Of_Cube_Using_Lambda(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes_of_numbers = list(map(lambda x : x * x * x, range(n)))\n    return sum(cubes_of_numbers) / float(len(cubes_of_numbers))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(item[-1] for item in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([x[-1] for x in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for word in test_tuple:\n        rear.append(word[-1])\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print \"Extracting rear index only from each string in the tuple\"\n    return tuple(map(lambda x: x[-1], test_tuple))\n    \n    \ndef main():\n    test_list = ['ab', 'abc', 'xyz', 'abcd', 'a', 'ba', 'abab']\n    print test_list\n    print \"\\n\"\n    print extract_rear(test_list)\n    print \"\\n\"\n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([item[-1] for item in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    def get_rear(s):\n        return s[1:]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_tuple = ()\n    for elem in test_tuple:\n        rear_index_tuple += (elem[-1],)\n    return rear_index_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    lst = []\n    for elem in test_tuple:\n        lst.append(elem[-1])\n    return tuple(lst)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [x[-1] for x in test_tuple]\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    if list1[0] == x:\n        return 1 + count_element_in_list(list1[1:], x)\n    else:\n        return count_element_in_list(list1[1:], x)\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for elem in list1:\n        if elem == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    num = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            num += 1\n    return num\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if list1 == []:\n        return 0\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # list1 = [1,2,3,4,5,5,5,5]\n    # x = 5\n    # Output: 5\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count +=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    total = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            total = total + 1\n    return total\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            nums[i] = 0\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if nums is None:\n        return None\n    if len(nums) == 0:\n        return None\n    else:\n        return [x for x in nums if x % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if not nums:\n        return []\n    odd_nums = []\n    for i in nums:\n        if i % 2 == 1:\n            odd_nums.append(i)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x:x%2!=0,nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_numbers = list(filter(lambda x: x%2!= 0, nums))\n    return filtered_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if isinstance(nums, list) and len(nums) > 0:\n        return [x for x in nums if x % 2!= 0]\n    else:\n        return False\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if not isinstance(nums, list):\n        raise Exception('Input must be a list')\n    return list(filter(lambda n: n % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2 == 1]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    return '-'.join(date[::-1])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    return \"{0}-{1}-{2}\".format(date[2], date[1], date[0])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:8]+\"-\"+dt[4:6]+\"-\"+dt[0:4]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:]+'-'+dt[3:5]+'-'+dt[0:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[2:]+\"-\"+dt[:2]+\"-\"+dt[4:]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    l = re.split('-', dt)\n    return l[2] + '-' + l[1] + '-' + l[0]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_obj = datetime.datetime.strptime(dt, '%Y-%m-%d')\n    return date_obj.strftime('%d-%m-%Y')\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    def convert(dt):\n        return '0'+dt if len(dt)==1 else dt\n    return convert(dt[6:10])+'-'+convert(dt[3:5])+'-'+convert(dt[0:2])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = re.compile(\"^\\d{4}-\\d{2}-\\d{2}$\")\n    if date_format.match(dt) is not None:\n        return dt[2:] + \"-\" + dt[5:7] + \"-\" + dt[:4]\n    return \"Invalid date\"\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    return '-'.join(date[::-1])\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_pos in range(sublist_count):\n            gap_InsertionSort(my_list, start_pos, sublist_count)\n        sublist_count //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    h = 1\n    while h < size/3:\n        h = 3 * h + 1\n    while h >= 1:\n        for i in range(h, size):\n            j = i\n            while j >= h and my_list[j] < my_list[j - h]:\n                my_list[j], my_list[j - h] = my_list[j - h], my_list[j]\n                j -= h\n        h = h // 3\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n // 3:\n        h = 3 * h + 1\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > temp:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n        h //= 3\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = int(n / 2)\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    '''\n    Insertion sort is guaranteed to be stable and is a simple sorting algorithm that works by repeatedly moving the last element to its correct position.\n    '''\n    size = len(my_list)\n    gap = size//2\n    while gap > 0:\n        for i in range(gap, size):\n            currentValue = my_list[i]\n            j = i\n            while j >= gap and currentValue < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = currentValue\n        gap //= 2\n    return my_list\n    \nprint(shell_sort([0,1,2,5,4,3,6,8,7,9]))"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(map(operator.and_, test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for tup1_tup, tup2_tup in zip(test_tup1, test_tup2):\n        result.append(tup1_tup & tup2_tup)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [tup1[i] & tup2[i] for i in range(len(test_tup1))]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return [ (x1, y1) for (x1, y1) in zip(test_tup1, test_tup2) ]\n    else:\n        return 'No'\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [elementwise_and_tuple(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return ((test_tup1[i] and test_tup2[i]) for i in range(len(test_tup1)))\n    \ndef not_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise not tuples from the given two tuples.\n    '''\n    return ((not test_tup1[i]) and (not test_tup2[i]) for i in range(len(test_tup1)))\n    \ndef all_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise all tuples from the given two tuples.\n    '''\n    return ((test_tup1[i] and test_tup2[i]) for i in range(len(test_tup1)))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # test_tup1 = (1, 2, 3, 4)\n    # test_tup2 = (10, 8, 6, 4)\n    # return [(1, 10), (2, 8), (3, 6), (4, 4)]\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # All solutions are on the x-axis\n    # a*x^2 + b*x + c = 0\n    # x = -b / (2*a)\n    # Return the value of x\n    return -b / (2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # define constants\n    x = Symbol('x')\n    \n    # calculate all other values\n    y_values = solve(a*x**2 + b*x + c, x)\n    y = y_values[0]\n    \n    # calculate the x value of the parabola's directrix\n    if abs(a) < 1:\n        x_value = -b/2/a\n    elif abs(a) > 1:\n        x_value = -b/(2*a)\n    else:\n        x_value = None\n    \n    # return the values\n    return y, x_value\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2-4*a*c)**0.5)/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = b**2-4*a*c\n    if x < 0:\n        return None\n    x = sqrt(x)\n    return (-b + x) / (2*a), (-b - x) / (2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None, None\n    else:\n        d = b**2 - 4*a*c\n        if d < 0:\n            return None, None\n        else:\n            discriminant = math.sqrt(d)\n            x1 = (-b + discriminant) / (2 * a)\n            x2 = (-b - discriminant) / (2 * a)\n            return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Imports\n    import math\n    # Functions\n    # Calculate\n    delta = b**2 - 4*a*c\n    if delta < 0: \n        print(\"There are no real roots.\")\n    elif delta > 0: \n        x1 = (-b + math.sqrt(delta)) / (2*a)\n        x2 = (-b - math.sqrt(delta)) / (2*a)\n        print(\"The real roots are:\", x1, x2)\n    elif delta == 0:\n        x1 = (-b + math.sqrt(delta)) / (2*a)\n        print(\"There is one real root:\", x1)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/2/a\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4 * a * c \n    x_1 = (-b + d**0.5) / (2 * a) \n    x_2 = (-b - d**0.5) / (2 * a) \n    return [x_1, x_2]\n    \n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #return list(set(list1).intersection(set(list2)))\n    return len(set(list1).intersection(set(list2))) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list(set(list1) & set(list2))) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for num1 in list1:\n        for num2 in list2:\n            if num1 == num2:\n                return True\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if not list1 or not list2:\n        return False\n    if len(list1) < len(list2):\n        return common_element(list2, list1)\n    return set(list1) & set(list2)!= set()\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1_set = set(list1)\n    for element in list2:\n        if element in list1_set:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2 * (base1 + base2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.0/2 * (base1 + base2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)*height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2) + height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2.0)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = ((base1+base2)/2)*height\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*height/2\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr = sorted(arr)\n    if arr[0] < number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        print True\n    else:\n        print False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if elem > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in range(len(arr)):\n        if(arr[x]>number):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return True\n    if arr[0] < number:\n        return True\n    return check_greater(arr[1:], number)\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]>number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(r'(?i)a.+b', text):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 0\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 1\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 2\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 3\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 4\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 5\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 6\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 7\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 8\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 9\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 10\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 11\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 12\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 13\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 14\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 15\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 16\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 17\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 18\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 19\n    \ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 20\n    \ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 21\n    \ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 22\n    \ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 23\n    \ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 24\n    \ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 25\n    \ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 26\n    \ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 27\n    \ndef text_match_twenty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 28\n    \ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return len(re.findall('ab+',text)) > 29\n    \ndef text_match_thirty_one(text):\n    '''\n    Write a function that matches a string tha"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_twentyfive(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_twentysix(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    match = re.match(r'a+b', text)\n    if match:\n        return True\n    return False\ndef text_match_twentyseven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = tex"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.match(text)\n    if result:\n        print('Match found: ', result.group())\n    else:\n        print('No match')\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('ab+', text):\n        return True\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab*', text):\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('ab{2}', text):\n        return True\n    else:\n        return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{3}', text):\n        return True\n    else:\n        return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{4}', text):\n        return True\n    else:\n        return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{5}', text):\n        return True\n    else:\n        return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{6}', text):\n        return True\n    else:\n        return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{7}', text):\n        return True\n    else:\n        return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{8}', text):\n        return True\n    else:\n        return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{9}', text):\n        return True\n    else:\n        return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{10}', text):\n        return True\n    else:\n        return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{11}', text):\n        return True\n    else:\n        return False\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{12}', text):\n        return True\n    else:\n        return False\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{13}', text):\n        return True\n    else:\n        return False\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{14}', text):\n        return True\n    else:\n        return False\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{15}', text):\n        return True\n    else:\n        return False\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{16}', text):\n        return True\n    else:\n        return False\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{17}', text):\n        return True\n    else:\n        return False\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{18}', text):\n        return True\n    else:\n        return False\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{19}', text):\n        return True\n    else:\n        return False\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{20}', text):\n        return True\n    else:\n        return False\ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{21}', text):\n        return True\n    else:\n        return False\ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{22}', text):\n        return True\n    else:\n        return False\ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{23}', text):\n        return True\n    else:\n        return False\ndef text_match_twentyfive(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{24}', text):\n        return True\n    else:\n        return False\ndef text_match_twentysix(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{25}', text):\n        return True\n    else:\n        return False\ndef text_match_twentyseven(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{26}', text):\n        return True\n    else:\n        return False\ndef text_match_twentyeight(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{27}', text):\n        return True\n    else:\n        return False\ndef text_match_twentynine(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{28}', text):\n        return True\n    else:\n        return False\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{29}', text):\n        return True\n    else:\n        return False\ndef text_match_thirtyone(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    if re.search('ab{30}', text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r'^a+b*$', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[ab]+')\n    m = pattern.search(text)\n    if m:\n        print m.group()\n    else:\n        print 'Not found'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.match(text)\n    if result:\n        print('Match found: ', result.group())\n    else:\n        print('No match found!')\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab*')\n    if pattern.match(text):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    p = re.compile(r'(ab){1}')\n    return bool(p.search(text))\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n / 10)\ndef isPrime(n) :\n    '''\n    Write a python function to find out if a given number is prime or not.\n    '''\n    if n < 2 :\n        return False\n    if n == 2 :\n        return True\n    if n % 2 == 0 :\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2) :\n        if n % i == 0 :\n            return False\n    return True\ndef all_Primes_below(n) :\n    '''\n    Write a python function to find all the prime numbers below a given number.\n    '''\n    if n <= 2 :\n        return []\n    elif n == 3 :\n        return [2]\n    elif isPrime(n) :\n        return [n]\n    else :\n        return all_Primes_below(n - 1) + [n]\ndef all_Primes_below_and_equal_to(n) :\n    '''\n    Write a python function to find all the prime numbers below a given number.\n    '''\n    if n < 2 :\n        return []\n    elif n == 2 :\n        return [2]\n    elif isPrime(n) :\n        return [n]\n    else :\n        return all_Primes_below_and_equal_to(n - 1) + [n]\ndef gcd(a, b) :\n    '''\n    Write a python function to compute the gcd of two numbers.\n    '''\n    if a < b :\n        return gcd(b, a)\n    while b!= 0 :\n        temp = b\n        b = a % b\n        a = temp\n    return a\ndef lcm(a, b) :\n    '''\n    Write a python function to compute the lcm of two numbers.\n    '''\n    return a * b / gcd(a, b)\ndef isDivisible(a, b) :\n    '''\n    Write a python function to check if a given number is divisible by another given number.\n    '''\n    if a % b == 0 :\n        return True\n    else :\n        return False\ndef factors(a) :\n    '''\n    Write a python function to find all the factors of a given number.\n    '''\n    if a < 0 :\n        a *= -1\n    if a == 0 or a == 1 :\n        return []\n    elif a == 2 :\n        return [2]\n    elif a == 3 :\n        return [3]\n    elif isPrime(a) :\n        return [a]\n    elif isDivisible(a, 2) :\n        return [2, a]\n    else :\n        i = 2\n        while a / i!= 0 :\n            if isDivisible(a, i) :\n                return [i] + factors(a / i)\n            i += 1\n        return [a]\ndef isPerfect(n) :\n    '''\n    Write a python function to check if a given number is perfect or not.\n    '''\n    if n < 2 :\n        return False\n    if n == 2 :\n        return True\n    if isPrime(n) :\n        return True\n    if isDivisible(n, 2) :\n        return False\n    i = 3\n    while i * i <= n :\n        if isDivisible(n, i) :\n            return False\n        i += 2\n    return True\ndef sum_of_digits(n) :\n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return sum_of_digits(n / 10) + n % 10\ndef sum_of_digits_in_all_positions(n) :\n    '''\n    Write a python function to find the sum of digits of a given number in all possible positions.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return sum_of_digits_in_all_positions(n / 10) + n % 10\ndef rotate_digits(n, s) :\n    '''\n    Write a python function to rotate a given number by a given number of times.\n    '''\n    if s == 0 :\n        return n\n    else :\n        return rotate_digits(n, s - 1) * 10 + n % 10\ndef reverse_digits(n) :\n    '''\n    Write a python function to reverse a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n % 10 + reverse_digits(n / 10) * 10\ndef count_upper_lower_case_alphabets(n) :\n    '''\n    Write a python function to count the number of upper-case alphabets and lower-case alphabets in a given string.\n    '''\n    count = 0\n    if n < 10 :\n        return count\n    else :\n        if n % 10 > 0 :\n            count += 1\n        if n > 9 :\n            count += count_upper_lower_case_alphabets(n / 10)\n        return count + count_upper_lower_case_alphabets(n % 10)\ndef count_upper_lower_case_alphabets_in_all_positions(n) :\n    '''\n    Write a python function to count the number of upper-case alphabets and lower-case alphabets in a given string in all possible positions.\n    '''\n    if n < 10 :\n        return 1\n    else :\n        if n % 10 > 0 :\n            return 1 + count_upper_lower_case_alphabets_in_all_positions(n / 10)\n        return count_upper_lower_case_alphabets_in_all_positions(n % 10) + count_upper_lower_case_alphabets_in_all_positions(n / 10)\ndef main() :\n    '''\n    Write a python function that performs a pre-order traversal of a binary tree and print all its values.\n    '''\n    class Node :\n        def __init__(self, value) :\n            self.value = value\n            self.left = None\n            self.right = None\n    def pre_order(root) :\n        if root!= None :\n            print root.value\n            pre_order(root.left)\n            pre_order(root.right)\n    def print_node(root) :\n        if root!= None :\n            print root.value\n            print_node(root.left)\n            print_node(root.right)\n    def in_order(root) :\n        if root!= None :\n            in_order(root.left)\n            print root.value\n            in_order(root.right)\n    def post_order(root) :\n        if root!= None :\n            post_order(root.left)\n            post_order(root.right)\n            print root.value\n    def print_tree(root) :\n        if root!= None :\n            print_tree(root.left)\n            print root.value\n            print_tree(root.right)\n    def height(root) :\n        if root == None :\n            return 0\n        return 1 + max(height(root.left), height(root.right))\n    def is_balanced(root) :\n        if root == None :\n            return True\n        if abs(height(root.left) - height(root.right)) <= 1 :\n            return is_balanced(root.left) and is_balanced(root.right)\n        else :\n            return False\n    def is_bst(root) :\n        if root == None :\n            return True\n        if root.left!= None and root.value <= root.left.value :\n            return False\n        if root.right!= None and root.value >= root.right.value :\n            return False\n        return is_bst(root.left) and is_bst(root.right)\n    def is_bst_helper(root, min_value, max_value) :\n        if root == None :\n            return True\n        if min_value!= None and root.value <= min_value :\n            return False\n        if max_value!= None and root.value >= max_value :\n            return False\n        return is_bst_helper(root.left"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    # your code here\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = n % 10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n == 0) :\n        return 0\n    else :\n        return last_Digit(n/10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n/10)\ndef getLast(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return getLast(n/10)\ndef getDigits(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDoubleDigits(n):\n    '''\n    Write a python function to find the last two digits of a given number.\n    '''\n    if n < 10 :\n        return [n, n]\n    else :\n        return getDoubleDigits(n/10) + [n % 10]\ndef isEven(n):\n    '''\n    Write a python function to determine if a given number is even or odd.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\ndef isOdd(n):\n    '''\n    Write a python function to determine if a given number is odd or even.\n    '''\n    if n % 2!= 0 :\n        return True\n    else :\n        return False\ndef isPrime(n):\n    '''\n    Write a python function to determine if a given number is prime.\n    '''\n    if n < 2 :\n        return False\n    for i in range(2, n) :\n        if n % i == 0 :\n            return False\n    return True\ndef isPrime(n):\n    '''\n    Write a python function to determine if a given number is prime.\n    '''\n    if n < 2 :\n        return False\n    if n == 2 :\n        return True\n    if n % 2 == 0 :\n        return False\n    for i in range(3, int(n**0.5) + 1, 2) :\n        if n % i == 0 :\n            return False\n    return True\ndef getPrimes(n):\n    '''\n    Write a python function to find all the primes up to a given number.\n    '''\n    if n < 2 :\n        return []\n    if n == 2 :\n        return [2]\n    primes = [2]\n    for i in range(3, n + 1) :\n        if isPrime(i) :\n            primes.append(i)\n    return primes\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits of a given number.\n    '''\n    if n < 10 :\n        return [n]\n    else :\n        return getDigits(n/10) + [n % 10]\ndef getDigits(n):\n    '''\n    Write a python function to find all the digits o"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    assert type(n) == int\n    return (n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    while n :\n        n /= 10\n        n = int(n)\n    return n\ndef main() :\n    n = 1234567\n    print \"The last digit of\",n,\"is\",last_Digit(n)\n    \nif __name__ == '__main__' :\n    main("
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            print list1[i]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n    \ndef pos_nos(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    return [i for i in list1 if i > 0]\n    \ndef divisible_by_3(num):\n    '''\n    Write a python function to return the list of divisible by 3 in a list.\n    '''\n    return [i for i in num if i % 3 == 0]\n    \ndef divisible_by_5(num):\n    '''\n    Write a python function to return the list of divisible by 5 in a list.\n    '''\n    return [i for i in num if i % 5 == 0]\n    \ndef divisible_by_3_or_5(num):\n    '''\n    Write a python function to return the list of divisible by 3 or 5 in a list.\n    '''\n    return [i for i in num if i % 3 == 0 or i % 5 == 0]\n    \ndef divisible_by_3_or_5_and_7(num):\n    '''\n    Write a python function to return the list of divisible by 3 or 5 and 7 in a list.\n    '''\n    return [i for i in num if i % 3 == 0 and i % 7 == 0]\n    \ndef get_key(val):\n    '''\n    Write a python function to return the key of a value in a dictionary.\n    '''\n    return [key for key, value in dict1.items() if val == value]\n    \ndef get_value(val):\n    '''\n    Write a python function to return the value of a value in a dictionary.\n    '''\n    return [value for key, value in dict1.items() if val == key]\n    \ndef get_key_and_value(val):\n    '''\n    Write a python function to return the key and the value of a value in a dictionary.\n    '''\n    return [(key, value) for key, value in dict1.items() if val == key]\n    \ndef add_two_dicts(dict1, dict2):\n    '''\n    Write a python function to add two dictionaries.\n    '''\n    return dict(dict1.items() + dict2.items())\n    \ndef get_average_score(dict1):\n    '''\n    Write a python function to return the average score of a dictionary.\n    '''\n    return sum(dict1.values()) / len(dict1)\n    \ndef get_average_score_by_student(student_dict):\n    '''\n    Write a python function to return the average score of a student.\n    '''\n    return get_average_score(student_dict[1])\n    \ndef get_percentage_score(dict1):\n    '''\n    Write a python function to return the percentage score of a dictionary.\n    '''\n    return (sum(dict1.values()) / len(dict1)) * 100\n    \ndef get_percentage_score_by_student(student_dict):\n    '''\n    Write a python function to return the percentage score of a student.\n    '''\n    return get_percentage_score(student_dict[1])\n    \ndef get_length(dict1):\n    '''\n    Write a python function to return the length of a dictionary.\n    '''\n    return len(dict1)\n    \ndef get_length_by_student(student_dict):\n    '''\n    Write a python function to return the length of a student.\n    '''\n    return get_length(student_dict[1])\n    \ndef get_longest_string_in_list(list1):\n    '''\n    Write a python function to return the longest string in a list.\n    '''\n    return max(list1, key=len)\n    \ndef get_longest_string_in_list_by_student(student_dict):\n    '''\n    Write a python function to return the longest string in a list.\n    '''\n    return get_longest_string_in_list(student_dict[1])\n    \ndef get_shortest_string_in_list(list1):\n    '''\n    Write a python function to return the shortest string in a list.\n    '''\n    return min(list1, key=len)\n    \ndef get_shortest_string_in_list_by_student(student_dict):\n    '''\n    Write a python function to return the shortest string in a list.\n    '''\n    return get_shortest_string_in_list(student_dict[1])\n    \ndef get_odd_string_in_list(list1):\n    '''\n    Write a python function to return the odd strings in a list.\n    '''\n    return [i for i in list1 if len(i) % 2!= 0]\n    \ndef get_odd_string_in_list_by_student(student_dict):\n    '''\n    Write a python function to return the odd strings in a list.\n    '''\n    return get_odd_string_in_list(student_dict[1])\n    \ndef get_even_string_in_list(list1):\n    '''\n    Write a python function to return the even strings in a list.\n    '''\n    return [i for i in list1 if len(i) % 2 == 0]\n    \ndef get_even_string_in_list_by_student(student_dict):\n    '''\n    Write a python function to return the even strings in a list.\n    '''\n    return get_even_string_in_list(student_dict[1])\n    \ndef get_strings_with_first_char_vowel(list1):\n    '''\n    Write a python function to return the strings with first character in vowel.\n    '''\n    return [i for i in list1 if i[0].lower() in 'aeiou']\n    \ndef get_strings_with_first_char_vowel_by_student(student_dict):\n    '''\n    Write a python function to return the strings with first character in vowel.\n    '''\n    return get_strings_with_first_char_vowel(student_dict[1])\n    \ndef get_strings_with_first_char_consonant(list1):\n    '''\n    Write a python function to return the strings with first character in consonant.\n    '''\n    return [i for i in list1 if i[0].lower() not in 'aeiou']\n    \ndef get_strings_with_first_char_consonant_by_student(student_dict):\n    '''\n    Write a python function to return the strings with first character in consonant.\n    '''\n    return get_strings_with_first_char_consonant(student_dict[1])\n    \ndef get_strings_with_last_char_vowel(list1):\n    '''\n    Write a python function to return the strings with last character in vowel.\n    '''\n    return [i for i in list1 if i[-1].lower() in 'aeiou']\n    \ndef get_strings_with_last_char_vowel_by_student(student_dict):\n    '''\n    Write a python function to return the strings with last character in vowel.\n    '''\n    return get_strings_with_last_char_vowel(student_dict[1])\n    \ndef get_strings_with_last_char_consonant(list1):\n    '''\n    Write a python function to return the strings with last character in consonant.\n    '''\n    return [i for i in list1 if i[-1].lower() not in 'aeiou']\n    \ndef get_strings_with_last_char_consonant_by_student(student_dict):\n    '''\n    Write a python function to return the strings with last character in consonant.\n    '''\n    return get_strings_with_last_char_consonant(student_dict[1])\n    \ndef get_string_by_char(string1, char1):\n    '''\n    Write a python function to return the string with char1.\n    '''\n    return string1.replace(char1, '')\n    \ndef get_string_by_char_by_student(student_dict):\n    '''\n    Write a python function to return the string with char1.\n    '''\n    return ge"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n    \ndef neg_nos1(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = [i for i in list1 if i < 0]\n    return list2\n    \ndef neg_nos2(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n    \ndef neg_nos3(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x < 0, list1))\n    \ndef neg_nos4(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x < 0, list1))\n    \ndef neg_nos5(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x < 0, list1))\n    \ndef neg_nos6(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos7(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos8(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos9(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos10(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos11(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos12(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos13(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos14(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos15(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos16(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos17(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos18(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos19(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos20(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos21(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos22(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos23(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos24(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos25(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos26(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos27(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos28(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos29(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos30(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos31(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos32(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos33(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos34(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos35(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos36(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos37(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: x*-1, list1))\n    \ndef neg_nos38(list1):\n    '''\n    Write a python function t"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x<0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i]<0:\n            list1[i]=-list1[i]\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for item in list1:\n        if item < 0:\n            list2.append(item)\n    return list2\nprint neg_nos([-1,2,3,4,5,6,-7,8])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if count % 2 == 0:\n            print(i, end='')\n        count += 1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\"a\",\"b\")\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    n = len(str1)\n    for i in range(0, n - 1, 2):\n        str1 = str1[:i] + str1[i + 1:]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1:\n        return ''\n    lst = []\n    for c in str1:\n        if ord(c)%2 == 1:\n            lst.append(c)\n    return ''.join(lst)\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([i for i in str1 if i%2 == 0])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(c for c in str1 if ord(c) % 2 == 0)\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1.split())\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([str1[i] for i in range(len(str1)) if i%2==0])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # remove odd character\n    # input ='string'\n    # output ='string'\n    # str1 ='string'\n    # for i in range(len(str1)):\n    #     if i % 2 == 0:\n    #         str1 = str1.replace(str1[i],'',1)\n    # print(str1)\n    # return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1 == '':\n        return ''\n    if len(str1) == 1:\n        return str1\n    str1 = list(str1)\n    temp = 0\n    while temp < len(str1):\n        if ord(str1[temp]) % 2 == 1:\n            str1.pop(temp)\n        else:\n            temp += 1\n    return ''.join(str1)\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    cnt = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(len(test_list)):\n            if test_list[i] < test_list[j]:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #Check if the number of unique elements is even.\n    if len(test_list)%2!= 0:\n        return 0\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) < 2:\n        return 0\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]) or (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    new_dict = {}\n    for item in test_list:\n        if item[0] in new_dict:\n            new_dict[item[0]] += 1\n        else:\n            new_dict[item[0]] = 1\n        if item[1] in new_dict:\n            new_dict[item[1]] += 1\n        else:\n            new_dict[item[1]] = 1\n    count = 0\n    for key, value in new_dict.iteritems():\n        if key < value:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def count_pair(x,y,test_list):\n        count = 0\n        for i in test_list:\n            if x < y and i[0] < i[1]:\n                count += 1\n            elif x > y and i[0] > i[1]:\n                count += 1\n        return count\n    return reduce(lambda x,y:x+y,map(lambda x:count_pair(x[0],x[1],test_list),test_list))\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    b_pairs = 0\n    for i in range(0, len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]:\n                b_pairs += 1\n            if test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]:\n                b_pairs += 1\n    return b_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    from collections import defaultdict\n    bidirectional_count = 0\n    test_dict = defaultdict(int)\n    for item in test_list:\n        test_dict[item] += 1\n    for key, value in test_dict.items():\n        if value % 2 == 1:\n            bidirectional_count += 1\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    tuple_count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            if(test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]):\n                tuple_count += 1\n            elif(test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]):\n                tuple_count += 1\n    return tuple_count\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return functools.reduce(lambda x,y: x*10 + y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return reduce(lambda x, y: x * 10 + y, L[:-1]) * 10 + L[-1]"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(item) for item in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ret = 0\n    for i in range(len(L)):\n        ret *= 10\n        ret += L[i]\n    return ret\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    p = re.compile('[\\w]+')\n    pos = p.findall(text)\n    for i, word in enumerate(pos):\n        if word == 'adverb':\n            print('First adverb found at position: ', i)\n            return i\n    \ndef count_vowels(text):\n    '''\n    Write a function to count the number of vowels in a given sentence.\n    '''\n    vowels = re.compile('[aeiouAEIOU]')\n    v = vowels.findall(text)\n    return len(v)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    for i in re.finditer(r'\\b[rR]\\w+\\b', text):\n        pos = i.span()[0]\n        result.append((text[pos:pos+len(i.group())], pos))\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_dict = {}\n    s = text.split()\n    for i in range(len(s)):\n        if s[i] == 'adverb':\n            adverb_dict[i] = s[i]\n    return adverb_dict\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return re.findall(r'\\w+(?=\\s+adverb)', text)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #Adverb check\n    #Check for 'to'\n    to_check = [m.start() for m in re.finditer('to', text)]\n    if len(to_check)>0:\n        return 'To', to_check\n    #Check for 'the'\n    the_check = [m.start() for m in re.finditer('the', text)]\n    if len(the_check)>0:\n        return 'The', the_check\n    #Check for 'and'\n    and_check = [m.start() for m in re.finditer('and', text)]\n    if len(and_check)>0:\n        return 'And', and_check\n    #Check for 'are'\n    are_check = [m.start() for m in re.finditer('are', text)]\n    if len(are_check)>0:\n        return 'Are', are_check\n    #Check for 'has'\n    has_check = [m.start() for m in re.finditer('has', text)]\n    if len(has_check)>0:\n        return 'Has', has_check\n    #Check for 'a'\n    a_check = [m.start() for m in re.finditer('a', text)]\n    if len(a_check)>0:\n        return 'A', a_check\n    #Check for 'is'\n    is_check = [m.start() for m in re.finditer('is', text)]\n    if len(is_check)>0:\n        return 'Is', is_check\n    #Check for 'of'\n    of_check = [m.start() for m in re.finditer('of', text)]\n    if len(of_check)>0:\n        return 'Of', of_check\n    #Check for 'for'\n    for_check = [m.start() for m in re.finditer('for', text)]\n    if len(for_check)>0:\n        return 'For', for_check\n    #Check for 'to'\n    to_check = [m.start() for m in re.finditer('to', text)]\n    if len(to_check)>0:\n        return 'To', to_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if len(question_check)>0:\n        return '?', question_check\n    #Check for 'what'\n    what_check = [m.start() for m in re.finditer('what', text)]\n    if len(what_check)>0:\n        return 'What', what_check\n    #Check for 'in'\n    in_check = [m.start() for m in re.finditer('in', text)]\n    if len(in_check)>0:\n        return 'In', in_check\n    #Check for 'by'\n    by_check = [m.start() for m in re.finditer('by', text)]\n    if len(by_check)>0:\n        return 'By', by_check\n    #Check for 'is'\n    is_check = [m.start() for m in re.finditer('is', text)]\n    if len(is_check)>0:\n        return 'Is', is_check\n    #Check for 'at'\n    at_check = [m.start() for m in re.finditer('at', text)]\n    if len(at_check)>0:\n        return 'At', at_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if len(question_check)>0:\n        return '?', question_check\n    #Check for 'that'\n    that_check = [m.start() for m in re.finditer('that', text)]\n    if len(that_check)>0:\n        return 'That', that_check\n    #Check for 'how'\n    how_check = [m.start() for m in re.finditer('how', text)]\n    if len(how_check)>0:\n        return 'How', how_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if len(question_check)>0:\n        return '?', question_check\n    #Check for 'it'\n    it_check = [m.start() for m in re.finditer('it', text)]\n    if len(it_check)>0:\n        return 'It', it_check\n    #Check for 'on'\n    on_check = [m.start() for m in re.finditer('on', text)]\n    if len(on_check)>0:\n        return 'On', on_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if len(question_check)>0:\n        return '?', question_check\n    #Check for 'this'\n    this_check = [m.start() for m in re.finditer('this', text)]\n    if len(this_check)>0:\n        return 'This', this_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if len(question_check)>0:\n        return '?', question_check\n    #Check for 'as'\n    as_check = [m.start() for m in re.finditer('as', text)]\n    if len(as_check)>0:\n        return 'As', as_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if len(question_check)>0:\n        return '?', question_check\n    #Check for 'which'\n    which_check = [m.start() for m in re.finditer('which', text)]\n    if len(which_check)>0:\n        return 'Which', which_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if len(question_check)>0:\n        return '?', question_check\n    #Check for 'a'\n    a_check = [m.start() for m in re.finditer('a', text)]\n    if len(a_check)>0:\n        return 'A', a_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if len(question_check)>0:\n        return '?', question_check\n    #Check for 'and'\n    and_check = [m.start() for m in re.finditer('and', text)]\n    if len(and_check)>0:\n        return 'And', and_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if len(question_check)>0:\n        return '?', question_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if len(question_check)>0:\n        return '?', question_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if len(question_check)>0:\n        return '?', question_check\n    #Check for ','\n    comma_check = [m.start() for m in re.finditer(',', text)]\n    if len(comma_check)>0:\n        return 'Comma', comma_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if len(question_check)>0:\n        return '?', question_check\n    #Check for ','\n    comma_check = [m.start() for m in re.finditer(',', text)]\n    if len(comma_check)>0:\n        return 'Comma', comma_check\n    #Check for '?'\n    question_check = [m.start() for m in re.finditer('?', text)]\n    if le"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    matches = re.findall(r'\\b(a)dd(ive)re\\b', text)\n    # print(matches)\n    for match in matches:\n        print(match)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list=[]\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",']'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",']'])\n    adverb_list.append([\"punct\",'\"'])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\''])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\",'\\\"'])\n    adverb_list.append([\"punct\","
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # text = re.sub(r'[^\\w\\s]','',text)\n    adverb_pos_list = []\n    for w in text.split():\n        w = re.sub('[0-9]','',w)\n        if re.search('^([a-z]+[\\w]*)$',w):\n            if w in ['then','if','when','once','always','wherever','whereas','where','why','whether','whereby','whereas','wherein','whereupon','wherever','whereverso','whereafter','whereas','whenever','wheneverso','whereever','whereupon','wherever','whereeverso','wherein','whereas','whereupon','wherever','whereeverso','whereafter','whereas','whenever','wheneverso','whereby','whereas','whereupon','wherever','whereeverso','whereafter','whereas','whenever','wheneverso','whereby','whereas','whereupon','wherever','whereeverso','whereafter','whereas','whenever','wheneverso','whereby','whereas','whereupon','wherever','whereeverso','whereafter','whereas','whenever','wheneverso','whereby','whereas','whereupon','wherever','whereeverso']:\n                adverb_pos_list.append(w)\n    return adverb_pos_list\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # The first text variable is the sentence and the second is the last part of the sentence \n    # (adverb) that we want to find and the first is to split the sentence in to words\n    sentence = text\n    words = sentence.split()\n    # we'll store the position of the adverb in a list\n    list_of_positions = []\n    # we'll create a for loop to go over the sentence\n    for x in words:\n        # we'll create an if statement to check if the word is a verb\n        if re.match('^[a-z]+', x):\n            # if the word is a verb, we'll add the position of the word to the list\n            list_of_positions.append(words.index(x))\n            # we'll add the position of the word to the list as a tuple\n    return list_of_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    new_text = text.replace('\\n',' ')\n    r = re.compile('[a-zA-Z]+[\\'][\\w]+[\\']|[\\w]*[\\'][a-zA-Z]+[\\']|[a-zA-Z]+[\\']')\n    r2 = re.compile('[a-zA-Z]+[\\']|[a-zA-Z]+[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]|[a-zA-Z]+[\\'][\\w]|[a-zA-Z]+[\\'][\\w]')\n    r3 = re.compile('[a-zA-Z]+[\\']|[\\w]*[\\']|[a-zA-Z]+[\\']')\n    r4 = re.compile('[a-zA-Z]+[\\']|[a-zA-Z]+[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]|[a-zA-Z]+[\\'][\\w]')\n    r5 = re.compile('[a-zA-Z]+[\\']|[\\w]*[\\']|[a-zA-Z]+[\\']')\n    r6 = re.compile('[a-zA-Z]+[\\']|[a-zA-Z]+[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]|[a-zA-Z]+[\\'][\\w]')\n    r7 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\']|[a-zA-Z]+[\\']')\n    r8 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r9 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r10 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r11 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r12 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r13 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r14 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r15 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r16 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r17 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r18 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r19 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r20 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r21 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r22 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r23 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r24 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r25 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r26 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r27 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r28 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r29 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r30 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r31 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r32 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r33 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r34 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n    r35 = re.compile('[a-zA-Z]+[\\'][\\w]|[\\w]*[\\'][a-zA-Z]|[a-zA-Z]+[\\'][\\w]')\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    facearea = 6\n    return facearea * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    sa = 6 * l**2\n    return sa\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    return 6*l**2\n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube of a given size.\n    '''\n    \n    return l**3\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def fun(x):\n        return x**3\n    def dfun(x):\n        return 3*x**2\n    return fun(l), dfun(l)\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i > 0:\n            pos += 1\n    return float(pos) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            positive_count += 1\n    return positive_count / float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    for num in nums:\n        if num < 0:\n            negative += 1\n        else:\n            positive += 1\n    return positive/float(positive+negative)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for i in nums:\n        if i > 0:\n            pos_count += 1\n    return pos_count/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return 0.0\n    counter = 0\n    for num in nums:\n        if num > 0:\n            counter += 1\n    return float(counter)/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    for i in nums:\n        if i > 0:\n            positive += 1\n        elif i < 0:\n            negative += 1\n    return (positive / len(nums)) * 100\n    \ndef sum_sorted(nums):\n    '''\n    Write a function that takes in an array of integers and returns the sum of the numbers in the array.\n    The array will never be empty.\n    '''\n    sorted_array = sorted(nums)\n    return sum(sorted_array)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count+=1\n    return float(count)/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    for n in nums:\n        if n > 0:\n            positive += 1\n        elif n < 0:\n            negative += 1\n    print(positive/negative)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    pos, neg = 0, 0\n    for i in nums:\n        if i > 0:\n            pos += 1\n        elif i < 0:\n            neg += 1\n    return (pos/float(len(nums)))\ndef subarray_product(nums):\n    '''\n    Write a function that takes in an array of integers and returns the maximum product of a non-empty subarray of the input array. \n    A subarray is a contiguous part of an array.\n    '''\n    if len(nums) == 0:\n        return 0\n    max_product, current_product = nums[0], nums[0]\n    for i in nums[1:]:\n        current_product *= i\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product\ndef check_pangram(sentence):\n    '''\n    Write a function to check whether a string is a pangram or not. \n    A pangram (Greek:\u03c0\u03b1\u03bd \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1, pan gramma, \"every letter\") or pangram \n    word is a word which contains every single letter of the alphabet at least once. \n    For example: \n    \"thequickbrownfoxjumpsoverthelazydog\"\n    \"leetcode\"\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in alphabet:\n        if i not in sentence:\n            return False\n    return True\ndef is_anagram(word1, word2):\n    '''\n    Write a function to check if two words are anagrams of each other.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    counts = {}\n    for i in word1:\n        if i not in counts:\n            counts[i] = 0\n        counts[i] += 1\n    for i in word2:\n        if i not in counts or counts[i] <= 0:\n            return False\n        counts[i] -= 1\n    return True\ndef is_anagram_2(word1, word2):\n    '''\n    Write a function to check if two words are anagrams of each other.\n    '''\n    return sorted(word1) == sorted(word2)\ndef is_permutation(str1, str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    return sorted(str1) == sorted(str2)\ndef frequency_sort(s):\n    '''\n    Write a function to sort the characters of a string in \n    increasing order based on the number of occurrences of each character.\n    '''\n    if len(s) == 0:\n        return ''\n    counts = {}\n    for i in s:\n        if i not in counts:\n            counts[i] = 0\n        counts[i] += 1\n    items = []\n    for key, value in counts.items():\n        items.append((value, key))\n    items.sort(reverse = True)\n    result = ''\n    for i in items:\n        result += i[1]*i[0]\n    return result\ndef two_sum(nums, target):\n    '''\n    Write a function that takes in a non-empty array of integers that are sorted in ascending order \n    and returns a pair of integers in the array that sum to the specified target. \n    Your function should return [-1, -1] if the two numbers do not exist in the array.\n    '''\n    low, high = 0, len(nums)-1\n    while low < high:\n        if nums[low] + nums[high] == target:\n            return [low, high]\n        elif nums[low] + nums[high] > target:\n            high -= 1\n        else:\n            low += 1\n    return [-1, -1]\ndef has_duplicates(s):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether the string contains any duplicate characters. \n    You can assume that there are no spaces in the string.\n    '''\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                return True\n    return False\ndef has_duplicates_2(s):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether the string contains any duplicate characters. \n    You can assume that there are no spaces in the string.\n    '''\n    if len(s) == 0:\n        return False\n    seen = {}\n    for i in s:\n        if i in seen:\n            return True\n        else:\n            seen[i] = True\n    return False\ndef find_first_and_last(s):\n    '''\n    Write a function that takes in a string and that returns a string with all vowels removed and the consonants in the same order as they appear in the input string. \n    For example: \n    \"yummy\" --> \"umco\"\n    '''\n    if len(s) == 0:\n        return ''\n    vowels = \"aeiou\"\n    result = ''\n    for i in s:\n        if i in vowels:\n            continue\n        else:\n            result += i\n    return result\ndef find_first_and_last_2(s):\n    '''\n    Write a function that takes in a string and that returns a string with all vowels removed and the consonants in the same order as they appear in the input string. \n    For example: \n    \"yummy\" --> \"umco\"\n    '''\n    if len(s) == 0:\n        return ''\n    vowels = \"aeiou\"\n    result = ''\n    for i in s:\n        if i in vowels:\n            result += '-'\n        else:\n            result += i\n    return result\ndef xor_strings(s1, s2):\n    '''\n    Write a function that takes in two strings and returns a string that is the result of XORing the two strings together. \n    XOR is the exclusive or operation. \n    In other words, the output string should contain only the characters that are in one of the input strings, but not both. \n    If there are any duplicated characters in the output string, \n    then only return the first instance. \n    For example: \n    \"this is a test!\" --> \"gsrth! - -\"\n    '''\n    if len(s1)!= len(s2):\n        return ''\n    result = ''\n    for i in range(len(s1)):\n        result += chr(ord(s1[i]) ^ ord(s2[i]))\n    return result\ndef hamming_distance(str1, str2):\n    '''\n    Write a function that takes in two non-empty strings and returns the Hamming distance between the strings. \n    The Hamming distance is the number of corresponding symbols that differ between two strings. \n    For example: \n    \"this is a test!\" --> \"gsrth! - -\" --> 2\n    '''\n    if len(str1)!= len(str2):\n        return -1\n    dist = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            dist += 1\n    return dist\ndef binary_search(nums, target):\n    '''\n    Write a function that takes in a sorted array of integers and a target integer and returns the index of the \n    target integer in the array. \n    If the target integer is not in the array, return -1. \n    You can assume that there will only be one pair of numbers in the array that sum to the target integer. \n    '''\n    if len(nums) == 0:\n        return -1\n    low, high = 0, len(nums)-1\n    while low <= high:\n        mid = (low + high) / 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\ndef non_decreasing_array(nums)"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max([n for n in list1 if n < 0])\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(x for x in list1 if x < 0)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -1000000\n    for i in list1: \n        if i < max and i > 0: \n            max = i \n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1 == []:\n        return None\n    max = list1[0]\n    for n in list1:\n        if n < max and n < 0:\n            max = n\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    l=len(list1)\n    for i in range(0,l):\n        for j in range(i+1,l):\n            if list1[i]>list1[j]:\n                list1[i], list1[j] = list1[j], list1[i]\n    return list1[0]\ndef median(list1):\n    '''\n    Write a python function to find the median of the given list\n    '''\n    l=len(list1)\n    if l%2==0:\n        return (list1[l/2-1]+list1[l/2])/2.0\n    else:\n        return list1[l/2]\ndef swap(list1, index1, index2):\n    '''\n    Write a python function to swap the elements of a list at two given indices\n    '''\n    list1[index1], list1[index2] = list1[index2], list1[index1]\ndef partition(list1, begin, end):\n    '''\n    Write a python function to partition the list between the begin and end indices\n    '''\n    i=begin\n    j=end\n    pivot=list1[begin]\n    while i<j:\n        while list1[i]<pivot:\n            i+=1\n        while list1[j]>pivot:\n            j-=1\n        if i<j:\n            list1[i], list1[j] = list1[j], list1[i]\n            i+=1\n            j-=1\n    return j\ndef partition_right(list1, begin, end):\n    '''\n    Write a python function to partition the list between the begin and end indices in a manner such that all the elements less than the pivot are at the left side and all the elements greater than the pivot are at the right side\n    '''\n    i=begin\n    j=end\n    pivot=list1[begin]\n    while i<j:\n        while list1[j]>pivot:\n            j-=1\n        if i<j:\n            list1[i], list1[j] = list1[j], list1[i]\n            i+=1\n            j-=1\n    return j\ndef partition_left(list1, begin, end):\n    '''\n    Write a python function to partition the list between the begin and end indices in a manner such that all the elements less than the pivot are at the left side and all the elements greater than the pivot are at the right side\n    '''\n    i=begin\n    j=end\n    pivot=list1[end]\n    while i<j:\n        while list1[i]<pivot:\n            i+=1\n        if i<j:\n            list1[i], list1[j] = list1[j], list1[i]\n            j-=1\n    return j\ndef quick_sort(list1, begin=0, end=None):\n    '''\n    Write a python function to sort the list according to the given list\n    '''\n    if end is None:\n        end=len(list1)-1\n    if begin>=end:\n        return\n    p=partition(list1, begin, end)\n    quick_sort(list1, begin, p-1)\n    quick_sort(list1, p+1, end)\ndef quick_sort_right(list1, begin=0, end=None):\n    '''\n    Write a python function to sort the list according to the given list\n    '''\n    if end is None:\n        end=len(list1)-1\n    if begin>=end:\n        return\n    p=partition_right(list1, begin, end)\n    quick_sort_right(list1, begin, p-1)\n    quick_sort_right(list1, p+1, end)\ndef quick_sort_left(list1, begin=0, end=None):\n    '''\n    Write a python function to sort the list according to the given list\n    '''\n    if end is None:\n        end=len(list1)-1\n    if begin>=end:\n        return\n    p=partition_left(list1, begin, end)\n    quick_sort_left(list1, begin, p-1)\n    quick_sort_left(list1, p+1, end)\ndef selection_sort(list1):\n    '''\n    Write a python function to sort the list according to the given list\n    '''\n    l=len(list1)\n    for i in range(0, l):\n        min_idx=i\n        for j in range(i+1,l):\n            if list1[min_idx]>list1[j]:\n                min_idx=j\n        list1[i], list1[min_idx] = list1[min_idx], list1[i]\ndef insertion_sort(list1):\n    '''\n    Write a python function to sort the list according to the given list\n    '''\n    l=len(list1)\n    for i in range(1, l):\n        current=list1[i]\n        j=i\n        while j>0 and list1[j-1]>current:\n            list1[j]=list1[j-1]\n            j-=1\n        list1[j]=current\ndef shell_sort(list1):\n    '''\n    Write a python function to sort the list according to the given list\n    '''\n    l=len(list1)\n    gap=1\n    while(gap<l/3):\n        gap=3*gap+1\n    while(gap>0):\n        for i in range(gap, l):\n            current=list1[i]\n            j=i\n            while j>=gap and list1[j-gap]>current:\n                list1[j]=list1[j-gap]\n                j-=gap\n            list1[j]=current\n        gap=int(gap/3)\ndef heap_sort(list1):\n    '''\n    Write a python function to sort the list according to the given list\n    '''\n    l=len(list1)\n    for i in range(0, l):\n        list1[0], list1[l-1]=list1[l-1], list1[0]\n        l-=1\n        sink(list1, 0)\ndef sink(list1, i):\n    '''\n    Write a python function to sink the element at the ith index in the list\n    '''\n    l=len(list1)\n    while 2*i+1<l:\n        j=i\n        if list1[2*i]<list1[2*i+1]:\n            j=2*i\n        if list1[2*i+1]<list1[2*i]:\n            j=2*i+1\n        if j==i:\n            break\n        else:\n            list1[j], list1[i]=list1[i], list1[j]\n            i=j\ndef merge(list1, start1, mid1, end1, list2, start2, end2):\n    '''\n    Write a python function to merge the list between the given indices\n    '''\n    if list1[mid1]>list2[end2]:\n        return\n    else:\n        i=mid1\n        j=end2\n        while start1<=mid1 and start2<=end2:\n            if list1[start1]<list2[start2]:\n                list1[i]=list1[start1]\n                start1+=1\n            else:\n                list1[i]=list2[start2]\n                start2+=1\n            i+=1\n        while start1<=mid1:\n            list1[i]=list1[start1]\n            start1+=1\n            i+=1\n        while start2<=end2:\n            list1[i]=list2[start2]\n            start2+=1\n            i+=1\ndef merge_sort(list1, start1=0, end1=None):\n    '''\n    Write a python function to sort the list according to the given list\n    '''\n    if end1 is None:\n        end1=len(list1)-1\n    if start1>=end1:\n        return\n    mid1=(start1+end1)/2\n    merge_sort(list1, start1, mid1)\n    merge_sort(list"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    if list2:\n        return max(list2)\n    else:\n        return -1\nprint largest_neg([1,2,3,-5,6,7,-1,-10])\nprint largest_neg([1,2,3,-5,6,7,-1,-10])\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    if list2==[]:\n        return \"No negative numbers found\"\n    return max(list2)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    n = len(list1) \n    max = 0\n    for i in range(n): \n        if list1[i] < 0 and list1[i] > max: \n            max = list1[i] \n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(len(list1)): \n        if list1[i] < 0: \n            return list1[i] \n    return None\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    for i in list1: \n        if i < 0: \n            return i \n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    res = []\n    for t in test_list:\n        if t[0] >= K and t[1] <= K:\n            res.append(t)\n    return res\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0:K]\n    \n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(item[0], item[1]) for item in test_list if item[1] % K == 0]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    output_list = []\n    for item in test_list:\n        if len(item) == K:\n            output_list.append(item)\n    return output_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0],x[1][0:K],x[1][K:]) for x in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(i[0],i[1][K:]) for i in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup[0] = tup[0][0:K]\n        tup[1] = tup[1][0:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0], x[1][K:]) for x in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(a[0], a[1][K:]) for a in test_list]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Sorry, the tuples are of different length\"\n    else:\n        return tuple([a*b for a,b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    assert isinstance(test_tup1, tuple)\n    assert isinstance(test_tup2, tuple)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    temp_tup = []\n    for num in range(len(test_tup1)):\n        temp_tup.append(test_tup1[num]*test_tup2[num])\n    return tuple(temp_tup)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mult_tup = ()\n    for i in range(len(test_tup1)):\n        mult_tup = (test_tup1[i] * test_tup2[i], ) + mult_tup\n    return mult_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for index in range(len(test_tup1)):\n        result.append(test_tup1[index] * test_tup2[index])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([el1 * el2 for el1,el2 in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    mult = []\n    for i in range(len(list1)):\n        mult.append(list1[i]*list2[i])\n    return tuple(mult)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([a * b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i] * lst2[i])\n    return tuple(lst3)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = list(tup) \n    c = Counter(lst) \n    print c \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for item in lst:\n        if item in tup:\n            count+=1\n    return count \ndef most_frequent(lst):\n    '''\n    Write a python function to return the most frequent element of a list.\n    '''\n    return max(lst, key=lst.count)\ndef most_common(lst):\n    '''\n    Write a python function to return the most common element of a list.\n    '''\n    return Counter(lst).most_common(1)[0][0]\ndef product_of_all_other_numbers(lst):\n    '''\n    Write a python function to return the product of all the numbers in a list except the number itself.\n    '''\n    product = 1\n    for item in lst:\n        if item!= lst[0]:\n            product*=item\n    return product\ndef count_digits_in_a_number(number):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    num=str(number)\n    count=0\n    while num:\n        count+=1\n        num=num[1:]\n    return count\ndef count_factorial_of_a_number(number):\n    '''\n    Write a python function to return the factorial of a number.\n    '''\n    if number==0 or number==1:\n        return 1\n    else:\n        return number*count_factorial_of_a_number(number-1)\ndef is_prime_number(number):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    for i in range(2,number):\n        if number%i==0:\n            return False\n    return True\ndef is_palindrome(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return string==string[::-1]\ndef is_fibonacci_number(number):\n    '''\n    Write a python function to check if a number is a fibonacci number.\n    '''\n    return count_factorial_of_a_number(5*number*number+4)%100000==0\ndef sum_of_the_squares_of_first_n_numbers(number):\n    '''\n    Write a python function to return the sum of the squares of the first n numbers.\n    '''\n    if number<0:\n        return 0\n    else:\n        return number**2 + sum_of_the_squares_of_first_n_numbers(number-1)\ndef find_the_maximum_and_minimum_in_list(lst):\n    '''\n    Write a python function to find the maximum and minimum in a list.\n    '''\n    maximum=lst[0]\n    minimum=lst[0]\n    for item in lst:\n        if item>maximum:\n            maximum=item\n        elif item<minimum:\n            minimum=item\n    return (maximum, minimum)\ndef is_perfect_number(number):\n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    divisors=[]\n    for i in range(1,number):\n        if number%i==0:\n            divisors.append(i)\n    return sum(divisors)==number\ndef count_occurences_of_a_substring(string, substring):\n    '''\n    Write a python function to count the occurence of a substring in a string.\n    '''\n    count=0\n    for i in range(len(string)):\n        if string[i:i+len(substring)]==substring:\n            count+=1\n    return count\ndef is_member_of_set(number, set_of_numbers):\n    '''\n    Write a python function to check if a number is member of a set of numbers.\n    '''\n    return number in set_of_numbers\ndef is_member_of_list(number, lst):\n    '''\n    Write a python function to check if a number is member of a list.\n    '''\n    return number in lst\ndef number_is_prime(number):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    return is_prime_number(number)\ndef sum_of_digits_of_a_number(number):\n    '''\n    Write a python function to sum all the digits of a number.\n    '''\n    num=str(number)\n    count=0\n    while num:\n        count+=int(num[0])\n        num=num[1:]\n    return count\ndef number_is_perfect(number):\n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    return is_perfect_number(number)\ndef sum_of_the_squares_of_first_n_numbers(number):\n    '''\n    Write a python function to return the sum of the squares of the first n numbers.\n    '''\n    return sum_of_the_squares_of_first_n_numbers(number)\ndef find_the_maximum_and_minimum_in_list(lst):\n    '''\n    Write a python function to find the maximum and minimum in a list.\n    '''\n    maximum=lst[0]\n    minimum=lst[0]\n    for item in lst:\n        if item>maximum:\n            maximum=item\n        elif item<minimum:\n            minimum=item\n    return (maximum, minimum)\ndef is_palindrome(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return string==string[::-1]\ndef count_occurences_of_a_substring(string, substring):\n    '''\n    Write a python function to count the occurence of a substring in a string.\n    '''\n    count=0\n    for i in range(len(string)):\n        if string[i:i+len(substring)]==substring:\n            count+=1\n    return count\ndef number_is_perfect(number):\n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    return is_perfect_number(number)\ndef count_occurences_of_a_substring(string, substring):\n    '''\n    Write a python function to count the occurence of a substring in a string.\n    '''\n    count=0\n    for i in range(len(string)):\n        if string[i:i+len(substring)]==substring:\n            count+=1\n    return count\ndef is_member_of_set(number, set_of_numbers):\n    '''\n    Write a python function to check if a number is member of a set of numbers.\n    '''\n    return number in set_of_numbers\ndef number_is_prime(number):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    return is_prime_number(number)\ndef sum_of_digits_of_a_number(number):\n    '''\n    Write a python function to sum all the digits of a number.\n    '''\n    num=str(number)\n    count=0\n    while num:\n        count+=int(num[0])\n        num=num[1:]\n    return count\ndef number_is_perfect(number):\n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    return is_perfect_number(number)\ndef sum_of_the_squares_of_first_n_numbers(number):\n    '''\n    Write a python function to return the sum of the squares of the first n numbers.\n    '''\n    return sum_of_the_squares_of_first_n_numbers(number)\ndef find_the_maximum_and_minimum_in_list(lst):\n    '''\n    Write a python function to find the maximum and minimum in a list.\n    '''\n    maximum=lst[0]\n    minimum=lst[0]\n    for item in lst:\n        if item>maximum:\n            maximum=item\n        elif item<minimu"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = {}\n    for item in lst:\n        if item not in d:\n            d[item] = 1\n        else:\n            d[item] += 1\n    return d\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tuple(lst.count(x) for x in tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup)[lst] \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    l = []\n    for i in lst:\n        l.append(c.get(i))\n    return l\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) & Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tup.count(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum( tup.count(x) for x in lst)\ndef count_Tuple(tup,lst): \n    '''\n    Write a python function to count the occurenc"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    result = [] \n    for i in tup: \n        if i in lst: \n            result.append(i) \n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i * i * i)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i*i)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [i**3 for i in nums]\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return 0.5 * n * (n + 1) * (2 * n + 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0: return 0\n    return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res = 0\n    for x in range(n+1):\n        if is_perrin(x):\n            res += x\n    return res\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        digit_sum = 0\n        for j in range(1,i):\n            if j!= 1:\n                digit_sum += j\n            if i % j == 0:\n                result += digit_sum\n                result += j\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return cal_sum(n-1) + 2*n + 1\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += (2 * i + 1)**2\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    ans = 0\n    while (n > 0):\n        ans = ans + (n % 10)\n        n = n / 10\n    return ans\n    \n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (i**3 + i**2)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    i = 1\n    while(i <= n):\n        if(cal_perrin(i)):\n            sum += i\n        i+=1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l:\n        str = str.lstrip()\n        ind = str.find('[')\n        if ind == -1:\n            return None\n        str = str[ind+1:]\n        ind = str.find(']')\n        if ind == -1:\n            return None\n        l = int(str[:ind])\n        str = str[ind+1:]\n        ind = str.find(',')\n        if ind == -1:\n            return None\n        ind = str.find(':')\n        if ind == -1:\n            return None\n        str = str[ind+1:]\n        return str[:l]\n    else:\n        return None\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    str_len = len(str)\n    if l > len(str):\n        return None\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for i in range(0,len(str)):\n        output.append(str[i][0:l])\n    return output\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    values = []\n    for s in str:\n        values.append(s[l])\n    return values\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[l:] for str in l]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    results = []\n    for word in l:\n        if len(word) > l:\n            results.append(word[:l])\n        else:\n            results.append(word)\n    return results\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(l) <= 0:\n        return []\n    return [str[i:i+l] for i in range(0, len(l), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = []\n    for i in range(len(l)):\n        s.append(str[l[i]:l[i]+l[-1]])\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in l:\n        if len(i) == l:\n            print i\n        else:\n            pass\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    text2 = re.sub('\\s', '', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','',text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result = \"\"\n    for char in text1:\n        if char!= \" \":\n            result = result + char\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    output = \"\"\n    for word in text1.split():\n        output += word+' '\n    return output\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('[\\s]+','', text1)\n    \ndef count_vowels(text1):\n    '''\n    Write a function to count the number of vowels present in the given string.\n    '''\n    count=0\n    vowels=['a','e','i','o','u']\n    for i in text1:\n        if i.lower() in vowels:\n            count+=1\n    return count\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+', '', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    s = ''.join(text1.split())\n    return s\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\ndef loss_amount_matrix(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return [sale_amount - actual_cost,actual_cost - sale_amount]\n    else:\n        return [0,0]\ndef loss_amount_tuple(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost,actual_cost - sale_amount\n    else:\n        return 0,0\ndef loss_amount_list(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost,actual_cost - sale_amount\n    else:\n        return [0,0]\ndef loss_amount_dict(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost,actual_cost - sale_amount\n    else:\n        return 0,0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\ndef profit_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives profit amount on a sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\ndef total_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives total amount if the given amount has profit and loss else return 0.\n    '''\n    return loss_amount(actual_cost,sale_amount)+profit_amount(actual_cost,sale_amount)\ndef total_cost(actual_cost,sale_amount): \n    '''\n    Write a function that gives total cost if the given amount has profit and loss else return 0.\n    '''\n    return profit_amount(actual_cost,sale_amount)+loss_amount(actual_cost,sale_amount)\ndef check_total_amount(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives total amount if the given amount has profit and loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return loss_amount(actual_cost,sale_amount)+profit_amount(actual_cost,sale_amount)\n    else:\n        return total_amount\ndef total_profit(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives total profit if the given amount has profit and loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return profit_amount(actual_cost,sale_amount)\n    else:\n        return total_amount\ndef profit_on_sale(actual_cost,sale_amount): \n    '''\n    Write a function that gives profit on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return profit_amount(actual_cost,sale_amount)\n    else:\n        return 0\ndef profit_amount_on_sale(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives profit amount on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return profit_amount(actual_cost,sale_amount)\n    else:\n        return total_amount-actual_cost\ndef profit_on_sale_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives profit on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return profit_amount(actual_cost,sale_amount)\n    else:\n        return 0\ndef profit_on_sale_amount(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives profit on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return profit_amount(actual_cost,sale_amount)\n    else:\n        return total_amount-actual_cost\ndef sale_amount_on_sale(actual_cost,sale_amount): \n    '''\n    Write a function that gives sale amount on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return loss_amount(actual_cost,sale_amount)+profit_amount(actual_cost,sale_amount)\n    else:\n        return sale_amount\ndef sale_amount_on_sale_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives sale amount on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return loss_amount(actual_cost,sale_amount)+profit_amount(actual_cost,sale_amount)\n    else:\n        return sale_amount\ndef sale_amount_on_sale_amount(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives sale amount on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return loss_amount(actual_cost,sale_amount)+profit_amount(actual_cost,sale_amount)\n    else:\n        return total_amount-actual_cost\ndef sale_amount_on_sale_amount(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives sale amount on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return loss_amount(actual_cost,sale_amount)+profit_amount(actual_cost,sale_amount)\n    else:\n        return total_amount-actual_cost\ndef profit_on_sale_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives profit on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return profit_amount(actual_cost,sale_amount)\n    else:\n        return 0\ndef profit_on_sale_amount_amount(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives profit on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return profit_amount(actual_cost,sale_amount)\n    else:\n        return total_amount-actual_cost\ndef profit_on_sale_amount_amount(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives profit on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return profit_amount(actual_cost,sale_amount)\n    else:\n        return total_amount-actual_cost\ndef total_amount_on_sale_amount(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives total amount on sale if the given amount has profit and loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return loss_amount(actual_cost,sale_amount)+profit_amount(actual_cost,sale_amount)\n    else:\n        return total_amount\ndef total_amount_on_sale_amount_amount(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives total amount on sale if the given amount has profit and loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return loss_amount(actual_cost,sale_amount)+profit_amount(actual_cost,sale_amount)\n    else:\n        return total_amount\ndef total_amount_on_sale_amount_amount(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives total amount on sale if the given amount has profit and loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return loss_amount(actual_cost,sale_amount)+profit_amount(actual_cost,sale_amount)\n    else:\n        return total_amount\ndef profit_on_sale_on_sale_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives profit on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return profit_amount(actual_cost,sale_amount)\n    else:\n        return 0\ndef profit_on_sale_on_sale_amount_amount(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives profit on sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return profit_amount(actual_cost,sale_amount)\n    else:\n        return total_amount-actual_cost\ndef profit_on_sale_on_sale_amount_amount(actual_cost,sale_amount,total_amount): \n    '''\n    Write a function that gives profit on sale if the given amount has profit else return 0.\n    '''\n    if actual_cos"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n    \ndef sales_report(actual_costs,sales): \n    '''\n    Write a function that gives sales report if actual costs are less than the sales amount else return 0.\n    '''\n    if actual_costs <= sales:\n        return actual_costs - sales\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost - sale_amount > 0 else 0\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([x for x in range(1, n) if n % x == 0 and x % 2 == 0])\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s=0\n    while n%2==0 :\n        s+=2\n        n//=2\n    for i in range(3,int(math.sqrt(n))+1,2) : \n        while n%i==0 : \n            s+=i\n            n//=i\n    if n>2 : \n        s+=n\n    return s \ndef mian(n):\n    a=[]\n    for i in range(1,n+1):\n        if sumofFactors(i)==i:\n            a.append(i)\n    return sum(a)\nprint(mian(5000))"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n <= 0: \n        print(\"Invalid Input\")\n        return\n    if n == 1:\n        return 1\n    sum = 1\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n % i == 0:\n            if n/i == i:\n                sum += i\n            else : \n                sum += i\n                sum += n/i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for x in range(1,n) :\n        if(n % x == 0) :\n            if(x % 2 == 0) :\n                sum += x\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # sum of factors of n is (n - 1) * (n + 1) / 2\n    # n - 1 is divisor of n\n    return (n * (n + 1)) / 2\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    Sum = 0\n    for i in range(1, (n/2)+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                Sum = Sum + i \n    return Sum \ndef isPerfectSquare(x) : \n    '''\n    Write a python function to find if a number is perfect square or not.\n    '''\n    num = x \n    if num < 0 : \n        num = -num \n    sr = math.sqrt(num)\n    return (sr - math.floor(sr)) == 0\ndef getFactors(n) : \n    '''\n    Write a python function to find factors of a number.\n    '''\n    Factors = []\n    for i in range(1, (n/2)+1) : \n        if n % i == 0 : \n            Factors.append(i)\n    Factors.append(n)\n    return Factors\ndef getPrimeFactors(n) : \n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    Factors = []\n    for i in range(2, n) : \n        while n % i == 0 : \n            Factors.append(i)\n            n = n / i\n    Factors.append(n)\n    return Factors\ndef isPrime(n) : \n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2, n) : \n            if (n % i == 0) : \n                return False\n    else : \n        return False\n    return True\ndef isPrimeFactors(n, m) : \n    '''\n    Write a python function to find if a number is prime factor or not.\n    '''\n    Factors = getPrimeFactors(n)\n    if m in Factors : \n        return True\n    else : \n        return False\ndef isPerfectNumber(n) : \n    '''\n    Write a python function to find if a number is perfect number or not.\n    '''\n    Factors = getFactors(n)\n    Sum = sumofFactors(n)\n    if Sum == n : \n        return True\n    else : \n        return False\ndef isPandigital(n) : \n    '''\n    Write a python function to find if a number is pandigital or not.\n    '''\n    Factors = getFactors(n)\n    if len(Factors) == 9 : \n        nstr = str(Factors[0])\n        for i in range(1, len(Factors)) : \n            nstr = nstr + str(Factors[i])\n        return True\n    else : \n        return False\ndef digitFactorial(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    fact = 1\n    if n == 0 or n == 1 : \n        return fact\n    else : \n        for i in range(1, n+1) : \n            fact = fact * i\n    return fact\ndef isPerfectPower(n) : \n    '''\n    Write a python function to find if a number is perfect power or not.\n    '''\n    if n == 1 : \n        return True\n    if n < 1 : \n        return False\n    else : \n        Factors = getPrimeFactors(n)\n        if len(Factors) == 2 : \n            return isPerfectNumber(Factors[0]) and isPerfectNumber(Factors[1])\n        else : \n            return False\ndef isArmstrong(n) : \n    '''\n    Write a python function to find if a number is armstrong or not.\n    '''\n    sum = 0\n    Factors = getPrimeFactors(n)\n    Factors.sort()\n    for i in range(0, len(Factors)) : \n        sum = sum + digitFactorial(Factors[i])**3\n    if sum == n : \n        return True\n    else : \n        return False\ndef getMulFactors(n) : \n    '''\n    Write a python function to find the mulfactors of a number.\n    '''\n    MulFactors = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            MulFactors.append(i)\n    return MulFactors\ndef isAbundant(n) : \n    '''\n    Write a python function to find if a number is abundant or not.\n    '''\n    Factors = getPrimeFactors(n)\n    Sum = sumofFactors(n)\n    if Sum > n : \n        return True\n    else : \n        return False\ndef isAbundantFactors(n, m) : \n    '''\n    Write a python function to find if a number is abundant factor or not.\n    '''\n    Factors = getPrimeFactors(n)\n    if m in Factors : \n        return True\n    else : \n        return False\ndef isPerfectAbundant(n) : \n    '''\n    Write a python function to find if a number is perfect abundant or not.\n    '''\n    Factors = getPrimeFactors(n)\n    if isPerfectNumber(n) and len(Factors) > 2 : \n        return True\n    else : \n        return False\ndef isTransitive(n, m) : \n    '''\n    Write a python function to find if a number is transitive or not.\n    '''\n    if isPerfectNumber(n) and isPerfectNumber(m) : \n        return True\n    else : \n        Factors = getPrimeFactors(n)\n        if isPerfectNumber(m) and len(Factors) > 2 : \n            return True\n        else : \n            return False\ndef isAmicable(n, m) : \n    '''\n    Write a python function to find if a number is amicable or not.\n    '''\n    if isPerfectNumber(n) and isPerfectNumber(m) : \n        return True\n    else : \n        return False\ndef isInRange(n, m, k) : \n    '''\n    Write a python function to find if a number is in range or not.\n    '''\n    if n + m == 2 * k : \n        return True\n    else : \n        return False\ndef isAmicableMixed(n, m) : \n    '''\n    Write a python function to find if a number is amicable mixed or not.\n    '''\n    if isPerfectNumber(n) and isPerfectNumber(m) : \n        return True\n    else : \n        return False\ndef isPentagonal(n) : \n    '''\n    Write a python function to find if a number is pentagonal or not.\n    '''\n    if n < 1 : \n        return False\n    else : \n        Factors = getPrimeFactors(n)\n        if len(Factors) == 3 : \n            if isPerfectNumber(Factors[0]) and isPerfectNumber(Factors[1]) and isPerfectNumber(Factors[2]) : \n                return True\n            else : \n                return False\n        else : \n            return False\ndef isHexagonal(n) : \n    '''\n    Write a python function to find if a number is hexagonal or not.\n    '''\n    if n < 1 : \n        return False\n    else : \n        Factors = getPrimeFactors(n)\n        if len(Factors) == 2 : \n            if isPerfectNumber(Factors[0]) and isPerfectNumber(Factors[1]) : \n                return True\n            else : \n                return False\n        else : \n            return False\ndef isHexagonalMixed(n, m) : \n    '''\n    Write a python function to find if a number is hexagonal mixed or not.\n    '''\n    if isPerfectNumber(n) and isPerfectNumber(m) : \n        return True\n    else : \n        return False\ndef isHexagonalAbundant(n) : \n    '''\n    Write a python function to find if a number is hexagonal abundant or not.\n    '''\n    Factors = getPrimeFactors(n)\n    if len(Factors) == 4 : \n        return True\n    els"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1) :\n        if(n % i == 0) :\n            if (i % 2 == 0) :\n                sum += i\n            else :\n                sum += n//i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            if i%2 == 0 :\n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(factor for factor in range(1,n) if n%factor==0 and factor%2==0)\ndef aat(l,n):\n    '''\n    Write a python function to find the element whose sum of factors is n.\n    '''\n    for i in l:\n        if sumofFactors(i) == n:\n            return i\nl = []\nwhile True:\n    a = int(raw_input(\"Enter the number to be searched for: \"))\n    if a!= 0:\n        l.append(a)\n    else:\n        break\nprint aat(l,22)\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while n % 2 == 0 : \n        sum = sum + 2\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2) : \n        while n % i == 0 : \n            sum = sum + i\n            n = n / i \n    if n > 2 : \n        sum = sum + n \n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    m = re.search(r\"z+\\b\", text)\n    if m:\n        return m.group()\n    else:\n        return None\n    \nprint text_match_wordz(\"myzword\")\nprint text_match_wordz(\"myzkz\")\nprint text_match_wordz(\"myzk\")\nprint text_match_wordz(\"my\")\nprint text_match_wordz(\"myzzword\")\nprint text_match_wordz(\"myzz\")\nprint text_match_wordz(\"myzzzword\")\nprint text_match_wordz(\"myzzzz\")\nprint text_match_wordz(\"myzzzzz\")\nprint text_match_wordz(\"myzzzzzword\")\nprint text_match_wordz(\"myzzzzzz\")\nprint text_match_wordz(\"myzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzword\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")\nprint text_match_wordz(\"myzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(r'\\bz\\b', text):\n        return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.findall(r\"\\b[a-z]*z\\b\",text)\n    return match\n    \ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.findall(r\"\\b[a-z]+\\b\",text)\n    return match\n    \ndef text_match_hyphen(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z]+-\\b\",text)\n    return match\n    \ndef text_match_number(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[0-9]+\\b\",text)\n    return match\n    \ndef text_match_initial_vowel(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z]*[aeiou]{1}[a-z]*\\b\",text)\n    return match\n    \ndef text_match_initial_consonant(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z]*[bcdfghjklmnpqrstvxz]{1}[a-z]*\\b\",text)\n    return match\n    \ndef text_match_all_except_letters(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[^a-z]+\\b\",text)\n    return match\n    \ndef text_match_begin_of_word(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[^a-z]*[a-z]{1}\\b\",text)\n    return match\n    \ndef text_match_between_letters(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z]*[a-z][a-z]*\\b\",text)\n    return match\n    \ndef text_match_ending_vowel(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z]*[a-z][a-z]*[aeiou]\\b\",text)\n    return match\n    \ndef text_match_ending_consonant(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z]*[a-z][a-z]*[bcdfghjklmnpqrstvxz]\\b\",text)\n    return match\n    \ndef text_match_begin_of_sentence(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z]*[\\.?!][a-z]*\\b\",text)\n    return match\n    \ndef text_match_alphanumeric(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z0-9]+\\b\",text)\n    return match\n    \ndef text_match_all(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[^a-z0-9]+\\b\",text)\n    return match\n    \ndef text_match_complex(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z]+[0-9]+[a-z]+\\b\",text)\n    return match\n    \ndef text_match_beginning_of_sentence(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z]+[\\.?!][a-z]*\\b\",text)\n    return match\n    \ndef text_match_all_except_numbers(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[^0-9]+\\b\",text)\n    return match\n    \ndef text_match_all_except_letters_and_numbers(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[^a-z0-9]+\\b\",text)\n    return match\n    \ndef text_match_all_letters_and_digits(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z0-9]+\\b\",text)\n    return match\n    \ndef text_match_all_letters(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z]+\\b\",text)\n    return match\n    \ndef text_match_all_letters_and_digits(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z0-9]+\\b\",text)\n    return match\n    \ndef text_match_all_letters_and_digits_and_symbols(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z0-9@#$%^&*()!]+\\b\",text)\n    return match\n    \ndef text_match_all_letters_and_symbols(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z0-9@#$%^&*()!]+\\b\",text)\n    return match\n    \ndef text_match_all_letters_and_symbols_and_digits(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z0-9@#$%^&*()!]+\\b\",text)\n    return match\n    \ndef text_match_all_letters_and_symbols_and_digits_and_numbers(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z0-9@#$%^&*()!]+\\b\",text)\n    return match\n    \ndef text_match_beginning_of_sentence(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z]+[\\.?!][a-z]*\\b\",text)\n    return match\n    \ndef text_match_letters_and_digits(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z0-9]+\\b\",text)\n    return match\n    \ndef text_match_letters_and_digits_and_symbols(text):\n    '''\n    Write a function that matches a word containing '-'.\n    '''\n    match = re.findall(r\"\\b[a-z0-9@#$%^&*()!]+\\b\",text)\n    return match\n    "
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b([a-zA-Z]+[z]*)\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.findall('[a-zA-Z]+', text)\n    return word\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z_matches = re.search(r'\\b(?:z{1,2})\\b', text, re.I)\n    print z_matches.group(1) if z_matches else None\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz2(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz3(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz4(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz5(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz6(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz7(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz8(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz9(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz10(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz11(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz12(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz13(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz14(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz15(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz16(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz17(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz18(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz19(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz20(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz21(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz22(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz23(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz24(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz25(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz26(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz27(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz28(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz29(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return 'Match found'\n    else:\n        return 'Match not found'\ndef text_match_wordz30(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b\\w*z\\b', text)\n    return match\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"(\\w*z)\"\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.findall(r'\\w*z\\w*', text)\n    return match\n    "
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        print '31'\n    elif monthnum2 in [4, 6, 9, 11]:\n        print '30'\n    else:\n        print '28 or 29'\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    pass\n    # return monthnum2 in {4,6,9,11}\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if check_year_leap(year):\n            return 29\n        else:\n            return 28\n    elif monthnum2 in [4,6,9,11]:\n        return 30\n    else:\n        return 31\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if int(monthnum2) == 1 or int(monthnum2) == 3 or int(monthnum2) == 5 or int(monthnum2) == 7 or int(monthnum2) == 8 or int(monthnum2) == 10 or int(monthnum2) == 12:\n            return True\n        elif int(monthnum2) == 4 or int(monthnum2) == 6 or int(monthnum2) == 9 or int(monthnum2) == 11:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return False\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        print(monthnum2,' has 31 days')\n    elif monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11:\n        print(monthnum2,' has 30 days')\n    else:\n        print('The number should be between 1 to 12')\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        monthnum2 = int(monthnum2)\n    except ValueError:\n        print('Invalid Input')\n        return\n    if monthnum2 > 12 or monthnum2 < 1:\n        print('Invalid Input')\n        return\n    return (monthnum2 > 2 and monthnum2 % 2 == 0 and not(monthnum2 % 4 == 0 or monthnum2 % 100 == 0)) or monthnum2 % 2 == 0 and monthnum2 % 4 == 0\n    \ndef check_monthnumb_number_alternate(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        monthnum3 = int(monthnum3)\n    except ValueError:\n        print('Invalid Input')\n        return\n    if monthnum3 > 12 or monthnum3 < 1:\n        print('Invalid Input')\n        return\n    return (monthnum3 > 2 and monthnum3 % 2 == 0 and not(monthnum3 % 4 == 0 or monthnum3 % 100 == 0)) or monthnum3 % 2 == 0 and monthnum3 % 4 == 0\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    elif monthnum2 == 3:\n        return 31\n    elif monthnum2 == 4:\n        return 30\n    elif monthnum2 == 5:\n        return 31\n    elif monthnum2 == 6:\n        return 30\n    elif monthnum2 == 7:\n        return 31\n    elif monthnum2 == 8:\n        return 31\n    elif monthnum2 == 9:\n        return 30\n    elif monthnum2 == 10:\n        return 31\n    elif monthnum2 == 11:\n        return 30\n    elif monthnum2 == 12:\n        return 31\n    else:\n        return None\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    print 'the number of days in month is %d'%(monthnum2)\n    if (monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n        print '31'\n    else:\n        print '30'\n    print 'finish checking'\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if (monthnum2 == 1) or (monthnum2 == 3) or (monthnum2 == 5) or (monthnum2 == 7) or (monthnum2 == 8) or (monthnum2 == 10) or (monthnum2 == 12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = []\n    for string in stringlist:\n        reversedlist.append(string[::-1])\n    return reversedlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Unpack the string list\n    stringlist = [elem for elem in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # given list of strings\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if not stringlist:\n        return stringlist\n    revlist = []\n    for string in stringlist:\n        revlist.append(string[::-1])\n    return revlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #for i in range(len(stringlist)):\n    #    stringlist[i] = stringlist[i][::-1]\n    return [s[::-1] for s in stringlist]\n    #pass\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i, str in enumerate(stringlist):\n        stringlist[i] = str[::-1]\n    return stringlist\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = lst[0][1]\n    min_list = lst[0]\n    for i in lst:\n        if i[1] < min_len:\n            min_len = i[1]\n            min_list = i\n    return min_list\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    len_list = []\n    for sublist in lst:\n        len_list.append(len(sublist))\n    #print(len_list)\n    #minimum = min(len_list)\n    #print(minimum)\n    minimum = min(len_list)\n    minimum_list = [i for i, j in enumerate(len_list) if j == minimum]\n    return minimum_list\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst)==1:\n        return lst\n    else:\n        return Find_Min([lst[0]]+Find_Min(lst[1:]))\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) == min_length:\n            min_index = i\n        elif len(lst[i]) < min_length:\n            min_index = i\n            min_length = len(lst[i])\n    return min_index, min_length\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    import sys\n    min_len = sys.maxint\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1])<min_len:\n                min_len = len(lst[i:j+1])\n                res = lst[i:j+1]\n    return res\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_list = []\n    for l in lst:\n        if len(l) < min_len:\n            min_list = [l]\n            min_len = len(l)\n        elif len(l) == min_len:\n            min_list.append(l)\n    return min_list\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for elem in lst:\n        if elem!= 0:\n            return elem\n        else:\n            pass\n    return None\n    \ndef Find_Max(lst): \n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    for elem in lst:\n        if elem!= 0:\n            return elem\n        else:\n            pass\n    return None\n    \n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minlen = None\n    index = -1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sub = lst[i:j+1]\n            if minlen is None or len(sub)<len(minlen):\n                minlen = sub\n                index = i\n    return minlen, index\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst: \n        return -1\n    min_index = 0\n    min_len = len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_val = lst[0]\n    for i in lst:\n        if len(i) < len(min_val):\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    \n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l*b\n    return a\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pi = 3.14\n    a = pi*r**2\n    return a\n    \ndef square_area(s):\n    '''\n    Write a function to find the area of a square.\n    '''\n    a = s**2\n    return a\n    \ndef triangle_area(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    a = b*h/2\n    return a\n    \ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi = 3.14\n    v = pi*r**2*h\n    return v\n    \ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.14\n    v = 4/3*pi*r**3\n    return v\n    \ndef cube_volume(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v = l**3\n    return v\n    \ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = 3.14\n    v = 1/3*pi*r**2*h\n    return v\n    \ndef right_triangle_volume(b,h):\n    '''\n    Write a function to find the volume of a right triangle.\n    '''\n    v = b*h/2\n    return v\n    \ndef cuboid_volume(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    v = l*b*h\n    return v\n    \ndef pyramid_volume(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = l*h/2\n    return v\n    \ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = 3.14\n    v = pi*r**2*h/3\n    return v\n    \ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi = 3.14\n    v = pi*r**2*h\n    return v\n    \ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.14\n    v = 4/3*pi*r**3\n    return v\n    \ndef cube_volume(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v = l**3\n    return v\n    \ndef right_triangle_volume(b,h):\n    '''\n    Write a function to find the volume of a right triangle.\n    '''\n    v = b*h/2\n    return v\n    \ndef cuboid_volume(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    v = l*b*h\n    return v\n    \ndef pyramid_volume(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = l*h/2\n    return v\n    \ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = 3.14\n    v = pi*r**2*h/3\n    return v\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    p = 2*(l+b)\n    return p\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    pi = 3.14\n    p = 2*pi*r\n    return p\n    \ndef square_perimeter(s):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    p = 4*s\n    return p\n    \ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    p = b+h+b\n    return p\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    p = 2*(l+b)\n    return p\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    pi = 3.14\n    p = 2*pi*r\n    return p\n    \ndef square_perimeter(s):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    p = 4*s\n    return p\n    \ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    p = b+h+b\n    return p\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    p = 2*(l+b)\n    return p\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    pi = 3.14\n    p = 2*pi*r\n    return p\n    \ndef square_perimeter(s):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    p = 4*s\n    return p\n    \ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    p = b+h+b\n    return p\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    p = 2*(l+b)\n    return p\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    pi = 3.14\n    p = 2*pi*r\n    return p\n    \ndef square_perimeter(s):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    p = 4*s\n    return p\n    \ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    p = b+h+b\n    return p\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    p = 2*(l+b)\n    return p\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    pi = 3.14\n    p = 2*pi*r\n    return p\n    \ndef square_perimeter(s):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    p = 4*s\n    return p\n    \ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    p = b+h+b\n    return p\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    p = 2*(l+b)\n    return p\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    pi = 3.14\n    p = 2*pi*r\n    return p\n    \ndef square_perimeter(s):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    p = 4*s\n    return "
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(None, str1.upper())\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(i for i in str1 if not i.isupper())\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = []\n    for i in str1:\n        if i.islower():\n            str2.append(i)\n    return ''.join(str2)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if(str1[i].isupper()):\n            continue\n        else:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    l = []\n    for i in range(0,len(str1)):\n        if str1[i].isupper():\n            l.append(str1[i])\n    return \"\".join(l)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = str1\n    for i in str1:\n        if i.isupper():\n            res = res.replace(i,'')\n    return res\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n    \ndef test_Extract():\n    lst = [[1,2,3,4,5],[6,7,8,9],[10,11,12,13,14]]\n    assert Extract(lst) == [1, 6, 10]\n    \n    \n    \ndef Largest_3(lst):\n    '''\n    Write a python function to return the largest element of the list.\n    '''\n    return max(lst)\n    \ndef test_Largest_3():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_3(lst) == 10\n    \n    \n    \ndef Largest_4(lst):\n    '''\n    Write a python function to return the second largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-2]\n    \ndef test_Largest_4():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_4(lst) == 7\n    \n    \n    \ndef Largest_5(lst):\n    '''\n    Write a python function to return the third largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-3]\n    \ndef test_Largest_5():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_5(lst) == 8\n    \n    \n    \ndef Largest_6(lst):\n    '''\n    Write a python function to return the fourth largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-4]\n    \ndef test_Largest_6():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_6(lst) == 9\n    \n    \n    \ndef Largest_7(lst):\n    '''\n    Write a python function to return the fifth largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-5]\n    \ndef test_Largest_7():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_7(lst) == 10\n    \n    \n    \ndef Largest_8(lst):\n    '''\n    Write a python function to return the sixth largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-6]\n    \ndef test_Largest_8():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_8(lst) == 11\n    \n    \n    \ndef Largest_9(lst):\n    '''\n    Write a python function to return the seventh largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-7]\n    \ndef test_Largest_9():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_9(lst) == 10\n    \n    \n    \ndef Largest_10(lst):\n    '''\n    Write a python function to return the eighth largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-8]\n    \ndef test_Largest_10():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_10(lst) == 11\n    \n    \n    \ndef Largest_11(lst):\n    '''\n    Write a python function to return the ninth largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-9]\n    \ndef test_Largest_11():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_11(lst) == 11\n    \n    \n    \ndef Largest_12(lst):\n    '''\n    Write a python function to return the tenth largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-10]\n    \ndef test_Largest_12():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_12(lst) == 11\n    \n    \n    \ndef Largest_13(lst):\n    '''\n    Write a python function to return the eleventh largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-11]\n    \ndef test_Largest_13():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_13(lst) == 11\n    \n    \n    \ndef Largest_14(lst):\n    '''\n    Write a python function to return the twelfth largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-12]\n    \ndef test_Largest_14():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_14(lst) == 11\n    \n    \n    \ndef Largest_15(lst):\n    '''\n    Write a python function to return the thirteenth largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-13]\n    \ndef test_Largest_15():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_15(lst) == 11\n    \n    \n    \ndef Largest_16(lst):\n    '''\n    Write a python function to return the fourteenth largest element of the list.\n    '''\n    temp = []\n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n    temp.sort()\n    return temp[-14]\n    \ndef test_Largest_16():\n    lst = [1,2,3,4,5,6,7,8,9,10,11]\n    assert Largest_16(lst) == 11\n    \n    \n    \ndef Largest_17(lst):\n    '''\n    Write a python function to return the fifteenth largest element of the list.\n    '''"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[i][0] for i in range(len(lst))]\n    \n    \ndef main():\n    lst = [['list', 'n', 'c', 'a','s', 'a','s', 'a','s', 't'], \\\n            ['list', 'n', 'c', 'a','s', 'a','s', 'a','s', 't'], \\\n            ['list', 'n', 'c', 'a','s', 'a','s', 'a','s', 't'], \\\n            ['list', 'n', 'c', 'a','s', 'a','s', 'a','s', 't']]\n    print(Extract(lst))\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for x in lst:\n        return x[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    output = []\n    for i in lst:\n        output.append(i[0])\n    return output\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [el[0] for el in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [el[0] for el in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[0])\n    return lst1\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_case = 0\n    for i in str:\n        if i.isupper():\n            upper_case += 1\n    return upper_case\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    i = 0\n    for j in str:\n        if ord(j) >= 65 and ord(j) <= 90:\n            i += 1\n    return i\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for char in str:\n        if char.isupper():\n            upper_ctr+=1\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.islower():\n            count+=1\n    return count\ndef alpha_numeric(str):\n    '''\n    Write a python function to check whether a string is alphanumeric or not.\n    '''\n    flag = 0\n    for i in str:\n        if i.isalnum():\n            flag+=1\n    return flag\ndef alpha_digit(str):\n    '''\n    Write a python function to check whether a string is alphabetical or digit or not.\n    '''\n    flag = 0\n    for i in str:\n        if i.isdigit():\n            flag+=1\n    return flag\ndef alternate_num(num):\n    '''\n    Write a python function to check whether a given number is alternate number or not.\n    '''\n    if int(str(num)[0])%2!=int(str(num)[1])%2:\n        return False\n    else:\n        return True\ndef odd_digits(str):\n    '''\n    Write a python function to check whether a given string contains odd number of digits or not.\n    '''\n    flag = 0\n    for i in str:\n        if i.isdigit():\n            if int(i)%2==1:\n                flag+=1\n    return flag\ndef palindrome(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    flag = 0\n    for i in range(len(str)//2):\n        if str[i]!=str[-i-1]:\n            flag+=1\n    return flag\ndef rotate_90(matrix):\n    '''\n    Write a python function to rotate a given 2D matrix 90 degrees.\n    '''\n    for i in range(len(matrix)//2):\n        for j in range(i,len(matrix)-1-i):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[-j-1][i]\n            matrix[-j-1][i] = matrix[-i-1][-j-1]\n            matrix[-i-1][-j-1] = matrix[j][-i-1]\n            matrix[j][-i-1] = temp\n    return matrix\ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a given 2D matrix by 90 degrees in clockwise direction.\n    '''\n    for i in range(len(matrix)//2):\n        for j in range(i,len(matrix)-1-i):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[-j-1][i]\n            matrix[-j-1][i] = matrix[-i-1][-j-1]\n            matrix[-i-1][-j-1] = matrix[j][-i-1]\n            matrix[j][-i-1] = temp\n    return matrix\ndef rotate_matrix_by_90(matrix):\n    '''\n    Write a python function to rotate a given 2D matrix by 90 degrees in anti-clockwise direction.\n    '''\n    for i in range(len(matrix)//2):\n        for j in range(i,len(matrix)-1-i):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[-j-1][i]\n            matrix[-j-1][i] = matrix[-i-1][-j-1]\n            matrix[-i-1][-j-1] = matrix[j][-i-1]\n            matrix[j][-i-1] = temp\n    return matrix\ndef spiral_matrix(matrix):\n    '''\n    Write a python function to create a spiral matrix of a given matrix.\n    '''\n    left = top = 0\n    right = len(matrix)-1\n    bottom = len(matrix[0])-1\n    direction = 0\n    while left<=right and top<=bottom:\n        if direction==0:\n            for i in range(left,right+1):\n                print(matrix[left][i],end=\" \")\n            left+=1\n            direction=1\n        elif direction==1:\n            for i in range(top,bottom+1):\n                print(matrix[i][right],end=\" \")\n            right-=1\n            direction=2\n        elif direction==2:\n            for i in range(right,left-1,-1):\n                print(matrix[bottom][i],end=\" \")\n            bottom-=1\n            direction=3\n        elif direction==3:\n            for i in range(bottom,top-1,-1):\n                print(matrix[i][left],end=\" \")\n            left+=1\n            direction=0\n    print(\"\")\ndef matrix_multiply(matrix_1,matrix_2):\n    '''\n    Write a python function to multiply two 2D matrix.\n    '''\n    if len(matrix_1[0])!=len(matrix_2):\n        return \"Invalid Input\"\n    result = []\n    for i in range(len(matrix_1)):\n        result.append([])\n        for j in range(len(matrix_2[0])):\n            tmp = 0\n            for k in range(len(matrix_2)):\n                tmp+=matrix_1[i][k]*matrix_2[k][j]\n            result[i].append(tmp)\n    return result\ndef diag_iterative(matrix):\n    '''\n    Write a python function to diagonalize a given matrix.\n    '''\n    if len(matrix)==1:\n        return \"Invalid Input\"\n    if len(matrix)==2:\n        return matrix\n    result = []\n    for i in range(len(matrix)):\n        result.append([])\n        for j in range(len(matrix[0])):\n            if i==j:\n                result[i].append(1)\n            else:\n                result[i].append(0)\n    for i in range(2,len(matrix)):\n        for j in range(len(matrix[0])-i+1):\n            result[j][i] = result[i-1][j-1] + result[j][i-1]\n    return result\ndef matrix_sum(matrix):\n    '''\n    Write a python function to sum up all the elements in a given matrix.\n    '''\n    result = 0\n    for i in matrix:\n        for j in i:\n            result+=j\n    return result\ndef matrix_min(matrix):\n    '''\n    Write a python function to return the minimum element in a given matrix.\n    '''\n    if len(matrix)==0:\n        return \"Invalid Input\"\n    result = []\n    for i in matrix:\n        result.append(min(i))\n    return min(result)\ndef matrix_max(matrix):\n    '''\n    Write a python function to return the maximum element in a given matrix.\n    '''\n    if len(matrix)==0:\n        return \"Invalid Input\"\n    result = []\n    for i in matrix:\n        result.append(max(i))\n    return max(result)\ndef matrix_determinant(matrix):\n    '''\n    Write a python function to return the determinant of a given 2D matrix.\n    '''\n    if len(matrix)!=len(matrix[0]):\n        return \"Invalid Input\"\n    if len(matrix)==1:\n        return matrix[0][0]\n    result = 0\n    if len(matrix)==2:\n        return matrix[0][0]*matrix[1][1]-matrix[0][1]*matrix[1][0]\n    else:\n        for i in range(len(matrix)):\n            tmp = matrix[0][i]\n            matrix[0][i] = matrix[i][0]\n            matrix[i][0] = tmp\n            result+=matrix["
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for x in str:\n        if x.isupper():\n            count+=1\n    print(\"Number of upper case characters in the string is: \", count)\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n    print(\"Number of upper case characters in the given string are: \", count)\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    num_upper = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            num_upper = num_upper + 1\n    return num_upper\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l = len(list1)\n    if l == 0:\n        return []\n    elif l == 1:\n        return [[list1[0]]]\n    else:\n        list2 = []\n        for elem in list1:\n            for sub_list in combinations_list(list1[1:]):\n                list2.append([elem]+sub_list)\n        return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1,2))\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    return list(itertools.combinations(list1,2))\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==1:\n        return [[list1[0]]]\n    if len(list1)==0:\n        return []\n    if len(list1)==2:\n        return [\n            [list1[0], list1[1]],\n            [list1[1], list1[0]]\n        ]\n    res=[]\n    for i in range(1,len(list1)):\n        res+=combinations_list(list1[i:])\n        res+=combinations_list(list1[:i])\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return [[]]\n    solutions = combinations_list(list1[1:])\n    temp = []\n    for solution in solutions:\n        temp.append([list1[0]]+solution)\n    temp.extend(solutions)\n    return temp\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    final_list = []\n    for i in range(1,len(list1)+1):\n        final_list.extend(list(itertools.combinations(list1, i)))\n    return final_list\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #lists = [[]]\n    lists = [[]]\n    for x in list1:\n        for y in lists:\n            lists.append(y+[x])\n    return lists\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    combinations = []\n    \n    for i in range(1, len(list1)):\n        for j in combinations_list(list1[i:]):\n            combinations.append(list1[:i])\n            combinations.append(j)\n    \n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        for i in range(len(list1)):\n            sub = list1[0:i] + list1[i+1:]\n            for p in combinations_list(sub):\n                result.append([list1[i]] + p)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Sliding window\n    max_prod = arr[0]\n    min_prod = arr[0]\n    max_prod_start = 0\n    max_prod_end = 0\n    for i in xrange(len(arr)):\n        if arr[i] < 0:\n            # Here I found out that I need to get the max and min of the subarray that\n            # it covered to find the max product subarray. It is possible that the subarray\n            # is very small. But if the subarray is not small, then it is better to find\n            # the subarray in the larger array.\n            if (arr[max_prod_start] * arr[i]) < min_prod:\n                min_prod = arr[max_prod_start] * arr[i]\n                min_prod_start = i\n                min_prod_end = i\n            if min_prod < arr[i]:\n                min_prod = arr[i]\n            max_prod = max(max_prod, arr[i])\n        else:\n            max_prod = max(max_prod, arr[i])\n    # Find the max_prod_start and max_prod_end\n    if min_prod_start == 0:\n        max_prod_start = 0\n    else:\n        max_prod_start = min_prod_start - (min_prod_end - min_prod_start)\n    if len(arr) - 1 == max_prod_start:\n        max_prod_end = len(arr) - 1\n    else:\n        max_prod_end = max_prod_start + (len(arr) - 1 - max_prod_start)\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in arr[1:]:\n        max_ending_here = max(max_ending_here * i, i)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = arr[0]\n    local_max = 1\n    for x in arr:\n        local_max = max(local_max*x, x)\n        global_max = max(local_max, global_max)\n    return global_max\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def _max_subarray_product(arr, i, j):\n        if i > j:\n            return (0, 0)\n        \n        p1, s1 = _max_subarray_product(arr, i+1, j)\n        p2, s2 = _max_subarray_product(arr, i, j-1)\n        \n        p_curr = arr[i] * arr[i+1] * arr[j] * arr[j-1]\n        s_curr = max(arr[i], arr[i+1]) * max(arr[j], arr[j-1])\n        \n        return (p_curr, max(s_curr, s1, s2, p1, p2))\n    \n    if len(arr) == 0:\n        return 0\n    return _max_subarray_product(arr, 0, len(arr)-1)[0]\n    \n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr)==0:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1,len(arr)):\n        if arr[i]<0:\n            max_ending_here = max(arr[i],max_ending_here*arr[i])\n        else:\n            max_ending_here = max(arr[i],max_ending_here+arr[i])\n        \n        max_so_far = max(max_so_far,max_ending_here)\n    \n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending = 1\n    max_so_far = 1\n    max_start = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_ending *= arr[i]\n            max_ending = max(max_ending, 1)\n            max_so_far = max(max_so_far, max_ending)\n            max_start = i + 1\n        else:\n            max_ending = max(max_ending * arr[i], arr[i])\n            max_so_far = max(max_so_far, max_ending)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending_here = max_so_far = min_ending_here = min_so_far = 1\n    for i in arr:\n        if i > max_ending_here:\n            max_ending_here = i\n        if i < 0:\n            temp = max_ending_here\n            max_ending_here = i\n            max_ending_here *= i\n            min_ending_here = temp * i\n        else:\n            max_ending_here *= i\n            min_ending_here = min(min_ending_here * i, 1)\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if min_so_far > min_ending_here:\n            min_so_far = min_ending_here\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(max(temp * arr[i], arr[i]), arr[i])\n        max_so_far = max(max_ending_here, max_so_far)\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_so_far = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] < 0:\n            max_product = max(max_product * arr[i], arr[i])\n        else:\n            max_product = max(arr[i], max_product * arr[i])\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in dict.values():\n        if x!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(value == dict[n] for value in dict.values())\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_value = dict.values()\n    if len(dict_value) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    else:\n        first = dict.values()[0]\n        return all(value == first for value in dict.values())\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    temp = []\n    for i in dict.values():\n        temp.append(i)\n    if temp.count(temp[0]) == len(temp):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in list(dict1):\n        if not dict1[key]:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if not dict1[i]:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key,value in dict1.items():\n        if not value:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    if not dict1:\n        return None\n    for key, value in dict1.items():\n        if isinstance(value, dict):\n            drop_empty(value)\n        elif value == None:\n            pass\n        else:\n            return dict1\n    return None\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {x:dict1[x] for x in dict1 if dict1[x]}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if dict1:\n        return dict([(k, v) for k, v in dict1.iteritems() if v])\n    else:\n        return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {k:v for k,v in dict1.items() if v}\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for k,v in dict1.items():\n        if v!= None:\n            new_dict[k] = v\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if len(arr) <= 3:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # arr.sort()\n    # max = arr[-1]\n    # for i in range(len(arr)-2, -1, -1):\n    #     max *= arr[i]\n    # return max\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    max_value=arr[0]*arr[1]\n    min_value=arr[0]*arr[1]\n    for i in range(2,len(arr)):\n        if arr[i]>max_value:\n            max_value=arr[i]\n        if arr[i]<min_value:\n            min_value=arr[i]\n    return max_value*min_value\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0] * arr[1], arr[1] * arr[0])\n    else:\n        return max(arr[0] * arr[1] * arr[2], arr[1] * arr[2] * arr[0], arr[2] * arr[0] * arr[1])\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = [int(i) for i in arr.split(' ')]\n    max_prod = arr[0]\n    curr_max = arr[0]\n    curr_min = arr[0]\n    for i in xrange(1,len(arr)):\n        if arr[i] < curr_max:\n            curr_max = arr[i]\n            curr_min = arr[i]\n        else:\n            curr_max = arr[i]\n            curr_min = arr[i]\n        if arr[i] < 0:\n            max_prod = max(max_prod,curr_max*curr_min)\n        else:\n            max_prod = max(max_prod,curr_max)\n    return max_prod\n    \n    \nprint max_product('1 -2 3 -4 5 6'"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    l,h = 0,1\n    res = arr[l] * arr[h]\n    while h < len(arr):\n        if arr[l] * arr[h] > res:\n            res = arr[l] * arr[h]\n        if arr[h] > arr[l]:\n            l = h\n        h += 1\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    res = 1\n    for i in range(len(arr)):\n        res = max(res, max(arr[i], arr[i] * arr[i+1]))\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    t1 = 1\n    t2 = 1\n    for i in arr:\n        temp = t1\n        t1 = max(i, t1 * i)\n        t2 = max(temp, t2 * i)\n    return t2\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # if array is empty or consists of only one number, return it \n    if len(arr)==0 or len(arr)==1:\n        return arr[0]\n    # for any given array, initially we have the maximum product formed by multiplying the first two elements\n    maximum_product = arr[0]*arr[1]\n    # we maintain a running max product so that we can update the max product as we encounter bigger elements\n    running_max = arr[0]\n    for i in xrange(2, len(arr)):\n        running_max = max(arr[i], arr[i]*running_max)\n        maximum_product = max(running_max, maximum_product)\n    return maximum_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    else:\n        arr.sort()\n        return max(arr[0]*arr[1],arr[-1]*arr[-2],arr[-1]*arr[-2]*arr[-3])\n    \n    \ndef max_product_pair(arr):\n    '''\n    Given an array of integers, find the pair of adjacent elements in the array which have the largest product. \n    Return the product of the pair.\n    '''\n    if not arr:\n        return 0\n    elif len(arr)==2:\n        return arr[0]*arr[1]\n    else:\n        arr.sort()\n        product = arr[-1]*arr[-2]\n        left = 0\n        right = len(arr)-1\n        while left<right:\n            if arr[left]*arr[right]>product:\n                product = arr[left]*arr[right]\n            left += 1\n            right -= 1\n        return product\n    \ndef max_product_of_length(arr,n):\n    '''\n    Given an array of length n, return the max product of length k where k is in range 1..n.\n    '''\n    if not arr:\n        return 0\n    elif len(arr)==n:\n        return max(arr)\n    else:\n        arr.sort()\n        product = arr[-1]*arr[-2]\n        left = 0\n        right = len(arr)-1\n        while left<right:\n            if arr[left]*arr[right]>product:\n                product = arr[left]*arr[right]\n            left += 1\n            right -= 1\n        return product\n    \ndef max_product_of_length_two(arr):\n    '''\n    Given an array of length n, find the length of the longest subarray where the product of all elements in the subarray is maximum.\n    '''\n    if not arr:\n        return 0\n    elif len(arr)==2:\n        return arr[0]*arr[1]\n    else:\n        arr.sort()\n        product = arr[0]*arr[1]\n        left = 0\n        right = len(arr)-1\n        while left<right:\n            if arr[left]*arr[right]>product:\n                product = arr[left]*arr[right]\n            if arr[left]>arr[left+1]:\n                left += 1\n            if arr[right]>arr[right-1]:\n                right -= 1\n        return product\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple([a+b for a,b in zip(test_tup[:-1],test_tup[1:])])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return None\n    else:\n        result = (test_tup[0] + test_tup[1])\n        return (result, test_tup[1] + test_tup[2])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def find_pairwise(tup):\n        return tup[0] + tup[1] + tup[2]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    num_str = ''.join([str(x) for x in test_tup])\n    pairwise_sum = [int(num_str[i]) + int(num_str[i+1]) for i in range(len(num_str)-1)]\n    return tuple(pairwise_sum)\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def add(a, b):\n        return a + b\n    \n    return reduce(add, test_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)<2:\n        return ()\n    return tuple(test_tup[i]+test_tup[i+1] for i in range(len(test_tup)-1))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(sum(el) for el in zip(*test_tup))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    ret_val = ()\n    #your code here\n    return ret_val\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # In Python, the + operator can be used to add tuples.\n    # If you try to add two different length tuples, you will get a ValueError.\n    # The length of the tuple is taken care of by the function.\n    return tuple(x + y for x, y in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 'This is not a valid tuple'\n    if len(test_tup) == 1:\n        return 0\n    if len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    return test_tup[0] + test_tup[1] + test_tup[2]\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    left = 1\n    for i in range(len(arr)):\n        left = (left * arr[i]) % n\n    return left\n    \ndef find_divisor(n):\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in arr:\n        mul = (mul * i) % n\n    return mul\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n):\n        prod = (prod * arr[i]) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in range(len(arr)):\n        res = (res*arr[i]) % n\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #arr = [2,3,4,5,6,7,8,9]\n    #n = 11\n    s = 0\n    prod = 1\n    for i in arr:\n        prod *= i\n    prod = prod%n\n    #print prod\n    for i in arr:\n        s = (s + i*prod)%n\n    return s\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr.sort()\n    res = 1\n    for i in arr:\n        res = (res * i)%n\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product(n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    if len(arr) == 0:\n        return 1\n    \n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    \n    return product\n    \ndef find_product("
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr.sort()\n    arr1 = []\n    arr2 = []\n    for i in range(1,n):\n        arr1.append(i)\n        arr2.append(i)\n    arr1.reverse()\n    arr2.reverse()\n    for i in range(len(arr1)):\n        arr1[i] = (arr1[i]*arr[i])%n\n        arr2[i] = (arr2[i]*arr[i])%n\n    for i in range(len(arr1)):\n        if arr1[i]>arr2[i]:\n            return arr1[i]\n        elif arr1[i]<arr2[i]:\n            return arr2[i]\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if (l==[] or len(l)<2):\n        return True\n    for i in range(1,len(l)):\n        if (l[i]!=l[i-1]+1):\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i+1]-l[i]!= 1: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1, len(l)):\n        if l[i] - l[i - 1]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # l = [1,2,3,4,5,6,7,8,9]\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l)==list(range(min(l),max(l)+1))\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method2(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l==l1:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method3(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method4(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method5(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method6(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method7(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method8(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method9(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method10(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method11(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method12(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method13(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method14(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method15(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method16(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else:\n        return False\n    \ndef check_Consecutive_method17(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    \n    #sorting the list in ascending order. \n    l1.sort()\n    \n    #checking if the sorted list is the same as the original list\n    if l1==l:\n        return True\n    else"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    s = [1]*len(l)\n    for i in range(1,len(l)):\n        if (l[i]-l[i-1])!=1:\n            s[i] = 0\n    if sum(s)==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    d={}\n    if len(l)==1:\n        return True\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]==1:\n            d[l[i]]=1\n    if len(d)==len(l)-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True\ndef check_disordered(l):\n    '''\n    Write a python function to check whether the given list contains at least one value that is not in increasing order.\n    '''\n    for i in range(len(l)):\n        if l[i] < l[i+1]:\n            return False\n    return True\ndef check_duplicates(l):\n    '''\n    Write a python function to check whether the given list contains duplicates or not.\n    '''\n    temp = {}\n    for i in l:\n        if i in temp:\n            return True\n        temp[i] = 1\n    return False\ndef check_increasing(l):\n    '''\n    Write a python function to check whether the given list contains increasing values or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] >= l[i+1]:\n            return False\n    return True\ndef check_pallindrome(s):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef check_rotated(l):\n    '''\n    Write a python function to check whether the given list contains a value that is not the last value in the list.\n    '''\n    for i in range(len(l)-1):\n        if l[i]!= l[-1]:\n            return False\n    return True\ndef check_strictly_increasing(l):\n    '''\n    Write a python function to check whether the given list contains strictly increasing values or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] >= l[i+1]:\n            return False\n    return True\ndef check_unique(l):\n    '''\n    Write a python function to check whether the given list contains unique values or not.\n    '''\n    temp = {}\n    for i in l:\n        if i in temp:\n            return False\n        temp[i] = 1\n    return True\ndef check_uniform(l):\n    '''\n    Write a python function to check whether the given list contains all the same values or not.\n    '''\n    for i in l[1:]:\n        if l[0]!= i:\n            return False\n    return True\ndef check_within_range(l,low,high):\n    '''\n    Write a python function to check whether the given list contains all the values between the given range or not.\n    '''\n    for i in l:\n        if i < low or i > high:\n            return False\n    return True\ndef sum_list(l):\n    '''\n    Write a python function to sum all the values in the given list.\n    '''\n    total = 0\n    for i in l:\n        total += i\n    return total\ndef multiply_list(l):\n    '''\n    Write a python function to multiply all the values in the given list.\n    '''\n    total = 1\n    for i in l:\n        total *= i\n    return total\ndef check_prime(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n == 1 or n == 0:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef check_pairs(l):\n    '''\n    Write a python function to check whether the given list contains pairs of adjacent elements or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\ndef check_anagrams(s,t):\n    '''\n    Write a python function to check whether the two strings are anagrams or not.\n    '''\n    if sorted(s) == sorted(t):\n        return True\n    return False\ndef check_permutations(s,t):\n    '''\n    Write a python function to check whether the two strings are permutations of each other or not.\n    '''\n    if len(s)!= len(t):\n        return False\n    temp = {}\n    for i in s:\n        if i in temp:\n            temp[i] += 1\n        else:\n            temp[i] = 1\n    for i in t:\n        if i in temp:\n            temp[i] -= 1\n        else:\n            temp[i] = 1\n    for i in temp:\n        if temp[i]!= 0:\n            return False\n    return True\ndef check_reverse_pairs(l):\n    '''\n    Write a python function to check whether the given list contains reverse pairs or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\ndef check_ordered(l):\n    '''\n    Write a python function to check whether the given list contains all the values in ascending order or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\ndef check_strictly_decreasing(l):\n    '''\n    Write a python function to check whether the given list contains strictly decreasing values or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] <= l[i+1]:\n            return False\n    return True\ndef check_palindrome_with_reversed(s):\n    '''\n    Write a python function to check whether the given string is a palindrome with its reversed string or not.\n    '''\n    return s == s[::-1]\ndef check_consecutive_with_reversed(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers with its reversed list or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] >= l[i+1]:\n            return False\n    return True\ndef check_disordered_with_reversed(l):\n    '''\n    Write a python function to check whether the given list contains at least one value that is not in increasing order with its reversed list or not.\n    '''\n    for i in range(len(l)):\n        if l[i] < l[i+1]:\n            return False\n    return True\ndef check_duplicates_with_reversed(l):\n    '''\n    Write a python function to check whether the given list contains duplicates or not with its reversed list or not.\n    '''\n    temp = {}\n    for i in l:\n        if i in temp:\n            return True\n        temp[i] = 1\n    return False\ndef check_increasing_with_reversed(l):\n    '''\n    Write a python function to check whether the given list contains increasing values with its reversed list or not.\n    '''\n    for i in range(len(l)):\n        if l[i] >= l[i+1]:\n            return False\n    return True\ndef check_pallindrome_with_reversed(s):\n    '''\n    Write a python function to check whether the given string is a palindrome with its reversed string or not.\n    '''\n    return s == s[::-1]\ndef check_rotated_with_reversed(l):\n    '''\n    Write a python function to check whether the given list contains a value that is not the last value in the list with its reversed list or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]!= l[-1]:\n            return False\n    return True\ndef check_strictly_increasing_with_reversed(l):\n    '''\n    Write a python function to check whether the given list contains strictly increasing values with its reversed list or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] <= l[i+1]:\n            return False\n    return True\ndef check_unique_with_reversed(l):\n    '''\n    Write a python function to check whether the given list contains unique values with its reversed list or not.\n    '"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Output: {1: [0, 3], 2: [1, 2], 3: [4, 5]}\n    test_dict = {}\n    for item1 in test_list1:\n        for item2 in test_list2:\n            if item1 == item2:\n                if test_dict.get(item1) is None:\n                    test_dict[item1] = [item1]\n                else:\n                    test_dict[item1].append(item1)\n    return test_dict\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(set(test_list2)))\n    \ndef is_list_even(test_list):\n    '''\n    Write a function to check if a list is even or not.\n    '''\n    return len(test_list) % 2 == 0\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if not isinstance(test_list1, list) and not isinstance(test_list2, list):\n        raise TypeError('test_list1 and test_list2 must be lists')\n    if not test_list1 or not test_list2:\n        raise ValueError('test_list1 or test_list2 cannot be empty')\n    if not isinstance(test_list1[0], tuple) or not isinstance(test_list2[0], tuple):\n        raise TypeError('test_list1 and test_list2 must contain tuples')\n    return [a for a in test_list1 if a in test_list2]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n    \n    \nif __name__ == \"__main__\":\n    print(tuple_intersection([1, 2, 3, 4], [1, 2, 4, 3]))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_set1 = set(test_list1)\n    test_set2 = set(test_list2)\n    return list(test_set1.intersection(test_set2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #return [i for i in test_list1 if i in test_list2]\n    return [i for i in test_list1 if i in test_list2]\n    #return [i for i in test_list2 if i in test_list1]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # test_list1 = ['abc', 'lmn', 'xyz', 'def', 'pqr','stu', 'vwx', 'yz', 'a', 'b', 'c']\n    # test_list2 = ['pqr', 'xyz', 'a', 'lmn','stu', 'vwx', 'yz', 'b', 'def', 'abc', 'pqr', 'vwx']\n    # result = []\n    # for i in test_list1:\n    #     if i in test_list2:\n    #         if i not in result:\n    #             result.append(i)\n    # print(result)\n    # # Return [abc, def, pqr, vwx]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    output = []\n    for elem1 in test_list1:\n        for elem2 in test_list2:\n            if elem1 == elem2:\n                output.append(elem1)\n    return output\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=''\n    for ch in str1:\n        if ch == ch:\n            newstr += newch\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = list(str1)\n    i = 0\n    while i < len(str2):\n        if str2[i] == ch:\n            str2[i] = newch\n        i += 1\n    return ''.join(str2)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for i in range(0,len(str1)):\n        if str1[i]==ch:\n            newstr = newstr+newch\n        else:\n            newstr = newstr+str1[i]\n    return newstr\n    \n    \ndef count_char(str1,ch):\n    '''\n    Write a function that returns the count of a char in a string.\n    '''\n    count = 0\n    for i in range(0,len(str1)):\n        if str1[i]==ch:\n            count = count+1\n    return count\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1_list = list(str1)\n    for i in range(len(str1_list)):\n        if str1_list[i] == ch:\n            str1_list[i] = newch\n    return ''.join(str1_list)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    list1 = list(str1)\n    list1[3] = newch\n    return \"\".join(list1)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    \n    if ch in str1:\n        return str1.replace(ch,newch)\n    else:\n        return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if str1==None or ch == None or newch == None:\n        return None\n    return str1.replace(ch,newch)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    def keyfunc(x):\n        return x[1]\n    c = Counter(dict1)\n    return dict(sorted(c.items(),key=keyfunc,reverse=True))\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    newlist = []\n    newdict = {}\n    for key, value in dict1.items():\n        newlist.append([value,key])\n    newlist.sort(reverse = True)\n    for item in newlist:\n        newdict[item[1]] = item[0]\n    return newdict\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    print(sort_dict)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp = [(k, v) for k, v in dict1.items()]\n    temp.sort(key=lambda x:x[1], reverse=True)\n    return temp\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\ndef sort_dict_by_key(dict1):\n    '''\n    Write a function to sort a dictionary by key.\n    '''\n    return sorted(dict1.keys(), key=lambda x: x)\ndef find_duplicate(list1):\n    '''\n    Write a function to find duplicate elements in a list.\n    '''\n    duplicates = []\n    for item in list1:\n        if list1.count(item) > 1:\n            if item not in duplicates:\n                duplicates.append(item)\n    return duplicates\ndef is_anagram(string1, string2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if string1 == string2:\n        return True\n    list1 = []\n    list2 = []\n    for i in string1:\n        list1.append(i)\n    for i in string2:\n        list2.append(i)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\ndef longest_common_substring(string1, string2):\n    '''\n    Write a function to find the longest common substring between two strings.\n    '''\n    substring = ''\n    for i in range(len(string1)):\n        for j in range(len(string2)):\n            if string1[i] == string2[j] and len(substring) < len(string1[i:i+1]):\n                substring = string1[i:i+1]\n    return substring\ndef are_strings_permutations(string1, string2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for i in string1:\n        if i in dict1.keys():\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for i in string2:\n        if i in dict2.keys():\n            dict2[i] += 1\n        else:\n            dict2[i] = 1\n    if dict1 == dict2:\n        return True\n    else:\n        return False\ndef check_anagram(string1, string2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    list1 = []\n    list2 = []\n    for i in string1:\n        list1.append(i)\n    for i in string2:\n        list2.append(i)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\ndef find_missing_numbers(list1):\n    '''\n    Write a function to find the missing numbers in a list of numbers.\n    '''\n    missing_numbers = []\n    list1.sort()\n    for i in range(1, len(list1)):\n        if list1[i] - list1[i-1] > 1:\n            missing_numbers.append(list1[i-1] + 1)\n    for i in range(1, len(list1)):\n        if list1[i] - list1[i-1] < 0:\n            missing_numbers.append(list1[i-1] + 1)\n    return missing_numbers\ndef find_missing_numbers_counter(list1):\n    '''\n    Write a function to find the missing numbers in a list of numbers.\n    '''\n    missing_numbers = []\n    list1.sort()\n    counter = Counter(list1)\n    for i in range(1, len(list1)):\n        if list1[i] - list1[i-1] > 1:\n            missing_numbers.append(list1[i-1] + 1)\n    for i in range(1, len(list1)):\n        if list1[i] - list1[i-1] < 0:\n            missing_numbers.append(list1[i-1] + 1)\n    return [i for i in range(1, len(list1)+1) if i not in list1]\ndef find_missing_numbers_dict(list1):\n    '''\n    Write a function to find the missing numbers in a list of numbers.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1.keys():\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for i in range(1, len(list1)):\n        if list1[i] - list1[i-1] > 1:\n            dict1[list1[i-1]] -= 1\n    for i in range(1, len(list1)):\n        if list1[i] - list1[i-1] < 0:\n            dict1[list1[i-1]] -= 1\n    missing_numbers = []\n    for i in range(1, len(list1)):\n        if dict1[i] > 0:\n            missing_numbers.append(i)\n    return missing_numbers\ndef find_missing_numbers_dict_counter(list1):\n    '''\n    Write a function to find the missing numbers in a list of numbers.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1.keys():\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for i in range(1, len(list1)):\n        if list1[i] - list1[i-1] > 1:\n            dict1[list1[i-1]] -= 1\n    for i in range(1, len(list1)):\n        if list1[i] - list1[i-1] < 0:\n            dict1[list1[i-1]] -= 1\n    missing_numbers = []\n    for i in range(1, len(list1)):\n        if dict1[i] > 0:\n            missing_numbers.append(i)\n    return [i for i in range(1, len(list1)) if i not in missing_numbers]\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate a matrix by 90 degrees.\n    '''\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n//2):\n        for j in range(m//2):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-1-i][j]\n            matrix[n-1-i][j] = matrix[n-1-j][n-1-i]\n            matrix[n-1-j][n-1-i] = matrix[i][m-1-j]\n            matrix[i][m-1-j] = temp\n    return matrix\ndef rotate_matrix_in_place(matrix):\n    '''\n    Write a function to rotate a matrix by 90 degrees.\n    '''\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n//2):\n        for j in range(m//2):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-1-j][i]\n            matrix[n-1-j][i] = matrix[n-1-i][n-1-j]\n            matrix[n-1-i][n-1-j] = matrix[j][n-1-i]\n            matrix[j][n-1-i] = temp\n    return matrix\ndef rotate_matrix_in_place_counter(matrix):\n    '''\n    Write a function to rotate a matrix by 90 degrees.\n    '''\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n//2):\n        for j in range(m//2):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-1-i][j]\n            matrix[n-1-i][j] = matrix[n-1-"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse = True)\ndef rank_words(words):\n    '''\n    Write a function to return a list of all the words in a dictionary that start with a particular letter.\n    '''\n    dict_letter = {}\n    for word in words:\n        if word[0] not in dict_letter:\n            dict_letter[word[0]] = [word]\n        else:\n            dict_letter[word[0]].append(word)\n    for i in dict_letter:\n        dict_letter[i].sort()\n    return dict_letter\ndef most_common(dic):\n    '''\n    Write a function to return the most common word in a dictionary.\n    '''\n    return Counter(dic).most_common(1)[0][0]\ndef remove_duplicates(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(lst))\ndef common_letters(string1, string2):\n    '''\n    Write a function to return all the common letters in two given strings.\n    '''\n    dict_letter = {}\n    for i in string1:\n        if i not in dict_letter:\n            dict_letter[i] = 1\n        else:\n            dict_letter[i] += 1\n    for i in string2:\n        if i in dict_letter and dict_letter[i] > 0:\n            dict_letter[i] -= 1\n    return list(dict_letter.keys())\ndef check_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    return string == string[::-1]\ndef find_anagrams(string, dictionary):\n    '''\n    Write a function to find all the anagrams of a given word in a dictionary.\n    '''\n    dict_letter = {}\n    for i in string:\n        if i not in dict_letter:\n            dict_letter[i] = 1\n        else:\n            dict_letter[i] += 1\n    dict_letter = sort_counter(dict_letter)\n    dict_anagram = []\n    for word in dictionary:\n        if len(word)!= len(string):\n            continue\n        dict_word = {}\n        for i in word:\n            if i in dict_word:\n                dict_word[i] += 1\n            else:\n                dict_word[i] = 1\n        dict_word = sort_counter(dict_word)\n        if dict_word == dict_letter:\n            dict_anagram.append(word)\n    return dict_anagram\ndef find_anagrams_again(string, dictionary):\n    '''\n    Write a function to find all the anagrams of a given word in a dictionary.\n    '''\n    dict_letter = {}\n    for i in string:\n        if i not in dict_letter:\n            dict_letter[i] = 1\n        else:\n            dict_letter[i] += 1\n    dict_letter = sort_counter(dict_letter)\n    dict_anagram = []\n    for word in dictionary:\n        if len(word)!= len(string):\n            continue\n        dict_word = {}\n        for i in word:\n            if i in dict_word:\n                dict_word[i] += 1\n            else:\n                dict_word[i] = 1\n        dict_word = sort_counter(dict_word)\n        if dict_word == dict_letter:\n            dict_anagram.append(word)\n    return dict_anagram\ndef get_unique_words(string1, string2):\n    '''\n    Write a function to get the unique words from two strings.\n    '''\n    set_string1 = set(string1.split())\n    set_string2 = set(string2.split())\n    return list(set_string1.union(set_string2))\ndef common_letters_again(string1, string2):\n    '''\n    Write a function to get all the common letters from two strings.\n    '''\n    dict_letter = {}\n    for i in string1:\n        if i not in dict_letter:\n            dict_letter[i] = 1\n        else:\n            dict_letter[i] += 1\n    for i in string2:\n        if i in dict_letter and dict_letter[i] > 0:\n            dict_letter[i] -= 1\n    return list(dict_letter.keys())\ndef get_anagram_string(string):\n    '''\n    Write a function to get the anagram string from a string.\n    '''\n    dict_letter = {}\n    for i in string:\n        if i not in dict_letter:\n            dict_letter[i] = 1\n        else:\n            dict_letter[i] += 1\n    dict_letter = sort_counter(dict_letter)\n    string_anagram = ''\n    for i in dict_letter:\n        string_anagram += i * dict_letter[i]\n    return string_anagram\ndef count_digits(string):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count\ndef get_anagram_string_again(string):\n    '''\n    Write a function to get the anagram string from a string.\n    '''\n    dict_letter = {}\n    for i in string:\n        if i not in dict_letter:\n            dict_letter[i] = 1\n        else:\n            dict_letter[i] += 1\n    dict_letter = sort_counter(dict_letter)\n    string_anagram = ''\n    for i in dict_letter:\n        string_anagram += i * dict_letter[i]\n    return string_anagram\ndef remove_duplicate_letters(string):\n    '''\n    Write a function to remove all the duplicate letters in a string.\n    '''\n    string_new = ''\n    for i in string:\n        if i not in string_new:\n            string_new += i\n    return string_new\ndef how_many_vowels(string):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    count = 0\n    for i in string:\n        if i in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\ndef test_sort_counter():\n    dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    assert(sort_counter(dictionary) == [('d', 4), ('c', 3), ('b', 2), ('a', 1), ('e', 5)])\ndef test_rank_words():\n    words = ['cat', 'bat', 'rat', 'art', 'ear', 'ran', 'rat', 'tar', 'car', 'fat', 'rat', 'rat', 'rat']\n    assert(rank_words(words) == [('bat', 2), ('cat', 1), ('ear', 1), ('fat', 1), ('rat', 4), ('ran', 2), ('rat', 2), ('tar', 1), ('car', 1)])\ndef test_most_common():\n    dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    assert(most_common(dictionary) == 'e')\ndef test_remove_duplicates():\n    lst = ['a', 'b', 'a', 'a', 'c', 'b']\n    assert(remove_duplicates(lst) == ['a', 'b', 'c'])\ndef test_common_letters():\n    string1 = 'rat'\n    string2 = 'car'\n    assert(common_letters(string1, string2) == ['t', 'r'])\ndef test_check_palindrome():\n    string = 'rat'\n    assert(check_palindrome(string))\ndef test_find_anagrams():\n    string1 = 'rat'\n    string2 = 'car'\n    assert(find_anagrams(string1, ['car', 'rat', 'art']) == ['car', 'rat'])\n    assert(find_anagrams(string2, ['bat', 'art', 'rat', "
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1 = []\n    for key in dict1:\n        list1.append(dict1[key])\n    list1 = sorted(list1)\n    dict1 = {}\n    for item in list1:\n        for key in dict1:\n            if dict1[key] == item:\n                dict1[key] = key\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = sorted(dict1.items(), key = lambda x: x[1])\n    print(dict2)\n    \ndef find_most_common(dict1):\n    '''\n    Write a function to find the most common value in a dictionary.\n    '''\n    if len(dict1) == 0:\n        return None\n    else:\n        counter = Counter(dict1)\n        return counter.most_common(1)[0][0]\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    \n    for i in range(len(nums)):\n        if max_num < nums[i]:\n            max_num = nums[i]\n        elif min_num > nums[i]:\n            min_num = nums[i]\n            \n    print(max_num, min_num)\n    \n    return max_num + min_num\n    "
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    "
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums)==0:\n        return 0\n    if len(nums)==1:\n        return nums[0]\n    else:\n        return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    if nums!= []:\n        big_num = max(nums)\n        small_num = min(nums)\n        sum = big_num + small_num\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.isupper():\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string == string.lower():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    for letter in string:\n        if letter.islower():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    string=string.strip().lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # print(string.lower())\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if str1 is None or len(str1) == 0:\n        return str1\n    # remove lowercase strings\n    new_str = re.sub('[a-z]+', '', str1)\n    return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-z]',str1):\n        for word in str1.split():\n            if re.search('[A-Z]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m,l\n    else:\n        return str1,None\ndef remove_nonalpha(str1):\n    '''\n    Write a function to remove non-alphabetic substrings from a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-z]',str1):\n        for word in str1.split():\n            if re.search('[a-z]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m,l\n    else:\n        return str1,None\ndef remove_nonnumeric(str1):\n    '''\n    Write a function to remove non-numeric substrings from a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[0-9]',str1):\n        for word in str1.split():\n            if re.search('[0-9]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m,l\n    else:\n        return str1,None\ndef remove_nonalpha_nonnumeric(str1):\n    '''\n    Write a function to remove non-alphabetic, non-numeric substrings from a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-zA-Z0-9]',str1):\n        for word in str1.split():\n            if re.search('[a-zA-Z0-9]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m,l\n    else:\n        return str1,None\ndef remove_multiple_spaces(str1):\n    '''\n    Write a function to remove multiple spaces in a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-zA-Z0-9]',str1):\n        for word in str1.split():\n            if re.search('[a-zA-Z0-9]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m,l\n    else:\n        return str1,None\ndef remove_lowercase_multiple_spaces(str1):\n    '''\n    Write a function to remove lowercase substrings with multiple spaces in a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-z]',str1):\n        for word in str1.split():\n            if re.search('[a-z]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m,l\n    else:\n        return str1,None\ndef remove_nonalpha_multiple_spaces(str1):\n    '''\n    Write a function to remove non-alphabetic substrings with multiple spaces in a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-zA-Z0-9]',str1):\n        for word in str1.split():\n            if re.search('[a-zA-Z0-9]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m,l\n    else:\n        return str1,None\ndef remove_nonnumeric_multiple_spaces(str1):\n    '''\n    Write a function to remove non-numeric substrings with multiple spaces in a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[0-9]',str1):\n        for word in str1.split():\n            if re.search('[0-9]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m,l\n    else:\n        return str1,None\ndef remove_multiple_spaces_from_end(str1):\n    '''\n    Write a function to remove multiple spaces from the end of a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-zA-Z0-9]',str1):\n        for word in str1.split():\n            if re.search('[a-zA-Z0-9]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m,l\n    else:\n        return str1,None\ndef remove_multiple_spaces_from_start(str1):\n    '''\n    Write a function to remove multiple spaces from the start of a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-zA-Z0-9]',str1):\n        for word in str1.split():\n            if re.search('[a-zA-Z0-9]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m[::-1],l\n    else:\n        return str1,None\ndef remove_multiple_spaces_from_start_end(str1):\n    '''\n    Write a function to remove multiple spaces from the start and end of a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-zA-Z0-9]',str1):\n        for word in str1.split():\n            if re.search('[a-zA-Z0-9]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m[::-1]+' ',l\n    else:\n        return str1,None\ndef remove_multiple_spaces_from_end_start(str1):\n    '''\n    Write a function to remove multiple spaces from the end and the start of a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-zA-Z0-9]',str1):\n        for word in str1.split():\n            if re.search('[a-zA-Z0-9]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m,l\n    else:\n        return str1,None\ndef remove_multiple_spaces_from_start_end_multiple(str1):\n    '''\n    Write a function to remove multiple spaces from the start and end of a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-zA-Z0-9]',str1):\n        for word in str1.split():\n            if re.search('[a-zA-Z0-9]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m[::-1]+' '+m,l\n    else:\n        return str1,None\ndef remove_multiple_spaces_from_both_sides(str1):\n    '''\n    Write a function to remove multiple spaces from the start and end of a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-zA-Z0-9]',str1):\n        for word in str1.split():\n            if re.search('[a-zA-Z0-9]',word):\n                l.append(word)\n            else:\n                m+=word+' '\n        return m+' '+m[::-1],l\n    else:\n        return str1,None\ndef remove_multiple_spaces_from_both_sides_single(str1):\n    '''\n    Write a function to remove multiple spaces from the start and end of a given string.\n    '''\n    l=[]\n    m=''\n    if re.search('[a-zA-Z0-9]',str1):\n        for word in str1.split():\n            if re"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    p = re.compile(r'[a-z]+',re.I)\n    return p.sub('',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if(str1==''):\n        return str1\n    elif(str1[0].isupper()):\n        return remove_lowercase(str1[1:])\n    else:\n        return str1[0].lower()+remove_lowercase(str1[1:])\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.compile('[a-z]')\n    lowercase_matched = lowercase.search(str1)\n    while lowercase_matched:\n        start = lowercase_matched.start()\n        end = lowercase_matched.end()\n        str1 = str1[:start] + str1[end:]\n        lowercase_matched = lowercase.search(str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = re.sub(r'[a-z]+', \"\", str1)\n    return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_list=[]\n    for i in range(len(str1)):\n        if str1[i].islower():\n            lowercase_list.append(str1[i])\n    return ''.join(lowercase_list)\ndef remove_numbers(str1):\n    '''\n    Write a function to remove the numbers from a given string.\n    '''\n    num_list=[]\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            num_list.append(str1[i])\n    return ''.join(num_list)\ndef remove_spaces(str1):\n    '''\n    Write a function to remove all the spaces from a given string.\n    '''\n    space_list=[]\n    for i in range(len(str1)):\n        if str1[i]==' ':\n            space_list.append(str1[i])\n    return ''.join(space_list)\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    s_list=[]\n    for i in range(len(str1)):\n        if not str1[i].isdigit() and not str1[i].isalpha():\n            s_list.append(str1[i])\n    return ''.join(s_list)\ndef text_to_lowercase(str1):\n    '''\n    Write a function to convert text to lowercase.\n    '''\n    return str1.lower()\ndef text_to_uppercase(str1):\n    '''\n    Write a function to convert text to uppercase.\n    '''\n    return str1.upper()\ndef text_to_titlecase(str1):\n    '''\n    Write a function to convert text to titlecase.\n    '''\n    new_str=[]\n    for i in range(len(str1)):\n        if i==0:\n            new_str.append(str1[i].upper())\n        else:\n            if str1[i-1].isalpha() and str1[i].isalpha():\n                new_str.append(str1[i].upper())\n            else:\n                new_str.append(str1[i])\n    return ''.join(new_str)\ndef remove_vowels(str1):\n    '''\n    Write a function to remove vowels from a given string.\n    '''\n    vowels_list=['a','e','i','o','u']\n    new_str=[]\n    for i in range(len(str1)):\n        if not str1[i] in vowels_list:\n            new_str.append(str1[i])\n    return ''.join(new_str)\ndef remove_vowels_and_alphabets(str1):\n    '''\n    Write a function to remove vowels and alphabets from a given string.\n    '''\n    new_str=[]\n    for i in range(len(str1)):\n        if str1[i].isdigit() or str1[i].isalpha():\n            new_str.append(str1[i])\n    return ''.join(new_str)\ndef remove_alphabets(str1):\n    '''\n    Write a function to remove alphabets from a given string.\n    '''\n    alphabets_list=[]\n    for i in range(len(str1)):\n        if not str1[i].isdigit():\n            alphabets_list.append(str1[i])\n    return ''.join(alphabets_list)\ndef remove_consonants(str1):\n    '''\n    Write a function to remove consonants from a given string.\n    '''\n    consonants_list=['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    new_str=[]\n    for i in range(len(str1)):\n        if not str1[i] in consonants_list:\n            new_str.append(str1[i])\n    return ''.join(new_str)\ndef remove_consonants_and_alphabets(str1):\n    '''\n    Write a function to remove consonants and alphabets from a given string.\n    '''\n    new_str=[]\n    for i in range(len(str1)):\n        if str1[i].isdigit() or str1[i].isalpha():\n            new_str.append(str1[i])\n    return ''.join(new_str)\ndef remove_spaces_and_alphabets(str1):\n    '''\n    Write a function to remove spaces and alphabets from a given string.\n    '''\n    new_str=[]\n    for i in range(len(str1)):\n        if str1[i].isdigit() or str1[i].isalpha():\n            new_str.append(str1[i])\n    return ''.join(new_str)\ndef text_to_dict(str1):\n    '''\n    Write a function to convert text to dictionary.\n    '''\n    new_dict={}\n    for i in range(len(str1)):\n        if str1[i].isdigit() or str1[i].isalpha():\n            if str1[i] in new_dict:\n                new_dict[str1[i]]+=1\n            else:\n                new_dict[str1[i]]=1\n    return new_dict\ndef remove_spaces_and_numbers(str1):\n    '''\n    Write a function to remove spaces and numbers from a given string.\n    '''\n    new_str=[]\n    for i in range(len(str1)):\n        if not str1[i].isdigit():\n            new_str.append(str1[i])\n    return ''.join(new_str)\ndef remove_special_characters_and_numbers(str1):\n    '''\n    Write a function to remove special characters and numbers from a given string.\n    '''\n    new_str=[]\n    for i in range(len(str1)):\n        if not str1[i].isdigit() and not str1[i].isalpha():\n            new_str.append(str1[i])\n    return ''.join(new_str)\ndef remove_spaces_and_special_characters(str1):\n    '''\n    Write a function to remove spaces and special characters from a given string.\n    '''\n    new_str=[]\n    for i in range(len(str1)):\n        if not str1[i].isdigit() and not str1[i].isalpha():\n            new_str.append(str1[i])\n    return ''.join(new_str)\ndef remove_special_characters_and_numbers(str1):\n    '''\n    Write a function to remove special characters and numbers from a given string.\n    '''\n    new_str=[]\n    for i in range(len(str1)):\n        if not str1[i].isdigit() and not str1[i].isalpha():\n            new_str.append(str1[i])\n    return ''.join(new_str)\ndef remove_numbers_and_spaces(str1):\n    '''\n    Write a function to remove numbers and spaces from a given string.\n    '''\n    new_str=[]\n    for i in range(len(str1)):\n        if not str1[i].isdigit():\n            new_str.append(str1[i])\n    return ''.join(new_str)\ndef remove_numbers_and_alphabets(str1):\n    '''\n    Write a function to remove numbers and alphabets from a given string.\n    '''\n    new_str=[]\n    for i in range(len(str1)):\n        if not str1[i].isdigit() and not str1[i].isalpha():\n            new_str.append(str1[i])\n    return ''.join(new_str)\ndef remove_numbers_and_spaces_and_alphabets(str1):\n    '''\n    Write a function t"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]*','',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]+\",\"\",str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n%10\n    return first_digit\ndef second_Digit(n) :\n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    second_digit = (n%100)//10\n    return second_digit\ndef third_Digit(n) :\n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    third_digit = (n%1000)//100\n    return third_digit\ndef fourth_Digit(n) :\n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    fourth_digit = (n%10000)//1000\n    return fourth_digit\ndef fifth_Digit(n) :\n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    fifth_digit = (n%100000)//10000\n    return fifth_digit\ndef sixth_Digit(n) :\n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    sixth_digit = (n%1000000)//100000\n    return sixth_digit\ndef seventh_Digit(n) :\n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    seventh_digit = (n%10000000)//1000000\n    return seventh_digit\ndef eight_Digit(n) :\n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    eighth_digit = (n%100000000)//10000000\n    return eighth_digit\ndef ninth_Digit(n) :\n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    ninth_digit = (n%1000000000)//100000000\n    return ninth_digit\ndef tenth_Digit(n) :\n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    tenth_digit = (n%1000000000000)//1000000000\n    return tenth_digit\ndef eleventh_Digit(n) :\n    '''\n    Write a python function to find the eleventh digit of a given number.\n    '''\n    eleventh_digit = (n%10000000000000000)//100000000000\n    return eleventh_digit\ndef twelfth_Digit(n) :\n    '''\n    Write a python function to find the twelfth digit of a given number.\n    '''\n    twelfth_digit = (n%1000000000000000000)//1000000000000\n    return twelfth_digit\ndef thirteen_Digit(n) :\n    '''\n    Write a python function to find the thirteen digit of a given number.\n    '''\n    thirteendigit = (n%10000000000000000000)//10000000000000\n    return thirteendigit\ndef fourteen_Digit(n) :\n    '''\n    Write a python function to find the fourteen digit of a given number.\n    '''\n    fourteen_digit = (n%100000000000000000000)//100000000000000\n    return fourteen_digit\ndef fifteenth_Digit(n) :\n    '''\n    Write a python function to find the fifteenth digit of a given number.\n    '''\n    fifteenth_digit = (n%1000000000000000000000)//1000000000000000\n    return fifteenth_digit\ndef sixteenth_Digit(n) :\n    '''\n    Write a python function to find the sixteenth digit of a given number.\n    '''\n    sixteenth_digit = (n%10000000000000000000000)//10000000000000000\n    return sixteenth_digit\ndef seventeenth_Digit(n) :\n    '''\n    Write a python function to find the seventeenth digit of a given number.\n    '''\n    seventeenth_digit = (n%100000000000000000000000)//1000000000000000000\n    return seventeenth_digit\ndef eighteenth_Digit(n) :\n    '''\n    Write a python function to find the eighteenth digit of a given number.\n    '''\n    eighteenth_digit = (n%1000000000000000000000000)//10000000000000000000\n    return eighteenth_digit\ndef nineteenth_Digit(n) :\n    '''\n    Write a python function to find the nineteenth digit of a given number.\n    '''\n    nineteenth_digit = (n%100000000000000000000000000)//100000000000000000000\n    return nineteenth_digit\ndef twentieth_Digit(n) :\n    '''\n    Write a python function to find the twentieth digit of a given number.\n    '''\n    twentyfirst_digit = (n%1000000000000000000000000000)//1000000000000000000000\n    return twentyfirst_digit\ndef eleventeenth_Digit(n) :\n    '''\n    Write a python function to find the eleventeenth digit of a given number.\n    '''\n    eleventeenth_digit = (n%10000000000000000000000000000)//10000000000000000000000\n    return eleventeenth_digit\ndef twentyfirst_Digit(n) :\n    '''\n    Write a python function to find the twentyfirst digit of a given number.\n    '''\n    twentyfirst_digit = (n%100000000000000000000000000000)//100000000000000000000000\n    return twentyfirst_digit\ndef thirteenth_Digit(n) :\n    '''\n    Write a python function to find the thirteenth digit of a given number.\n    '''\n    thirteenth_digit = (n%1000000000000000000000000000000)//1000000000000000000000000\n    return thirteenth_digit\ndef fourteenth_Digit(n) :\n    '''\n    Write a python function to find the fourteenth digit of a given number.\n    '''\n    fourteenth_digit = (n%10000000000000000000000000000000)//100000000000000000000000000\n    return fourteenth_digit\ndef fifteenth_Digit(n) :\n    '''\n    Write a python function to find the fifteenth digit of a given number.\n    '''\n    fifteenth_digit = (n%1000000000000000000000000000000000)//100000000000000000000000000000\n    return fifteenth_digit\ndef sixteenth_Digit(n) :\n    '''\n    Write a python function to find the sixteenth digit of a given number.\n    '''\n    sixteenth_digit = (n%10000000000000000000000000000000)//1000000000000000000000000000000\n    return sixteenth_digit\ndef seventeenth_Digit(n) :\n    '''\n    Write a python function to find the seventeenth digit of a given number.\n    '''\n    seventeenth_digit = (n%1000000000000000000000000000000)//10000000000000000000000000000000\n    return seventeenth_digit\ndef eighteenth_Digit(n) :\n    '''\n    Write a python function to find the eighteenth digit of a given number.\n    '''\n    eighteenth_digit = (n%1000000000000000000000000000000)//1000000000000000000000000000000000\n    return eighteenth_digit\ndef nineteenth_Digit(n) :\n    '''\n    Write a python function to find the nineteenth digit of a given number.\n    '''\n    nineteenth_digit = (n%1000000000000000000000000000000)//1000000000000000000000000000000000\n    return nineteenth_digit\ndef twentysecond_Digit(n) :\n    '''\n    Write a python function to find the twentysecond digit of a given number.\n    '''\n    twentysecond_digit = (n%10000000000000000000000000000000)//1000000000000000000000000000000\n    return twentysecond_digit\ndef fourteenth_Digit(n) :\n    '''\n    Write a python function to find the fourteenth digit of a given number.\n    '''\n    fourteenth_digit = (n%10000000000000000000000000000000)//10000000000000000000000000000000\n    return fourteenth_digit\ndef fiftieth_Digit(n) :\n    '''\n    Write a python function to find the fiftieth digit of a given number.\n    '''\n    fiftieth_digit = (n%10000000000000000000000000000000)//10000000000000000000000000000000\n    return fiftieth_digit\ndef sixtyfirst_Digit(n) :\n    '''\n    Write a python function to find the sixtyfirst digit of a given number.\n    '''\n    sixtyfirst_digit = (n%100000000000000000000000000000000)//100000000000000000000000000000000\n    return sixtyfirst_digit\ndef seventieth_Digit(n) :\n    '''\n    Write a python function to find the seventieth digit of a given number.\n    '''\n    seventieth_digit = (n%10000000000000000000000000000000000000000)//10000000000000000000000000000000000\n    return seventieth_digit\ndef eightyfirst_Digit"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    if n>= 0 :\n        return n%10\n    else :\n        return -(abs(n)%10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digit = 1\n    while (n/digit) > 0 :\n        digit *= 10\n    return digit \n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    a = n%10\n    return a\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if(n>9) :\n        return n/10\n    else :\n        return n\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n / 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n % 10)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the secon"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while(n) :\n        return n%10\n        n = n/10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(0,len(list)):\n        if list[i] % 2!= 0:\n            odd.append(list[i])\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [item for item in list if item%2 == 1]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [item for item in list if item%2!=0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            list1.append(list[i])\n    return list1\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # write your function here\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for element in list:\n        if element%2!= 0:\n            odd_list.append(element)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i%2!= 0:\n            odds.append(i)\n    return odds\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1, n+1)]) - sum([i for i in range(1, n+1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Code here\n    \n    def Sumofcubes(n) :  \n        '''\n        Write a python function to find the sum of the cubes of the first n natural numbers.\n        '''\n        # Code here\n    \n    return Sumofcubes(n) - sum([x**3 for x in range(1,n+1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # if n<0 : n=-1*n\n    n = abs(n)\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1):\n        sum1 += i**3\n        sum2 += i\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    diff = sum(range(1, n+1))**3 - sum(range(1, n+1))**2\n    print(\"Difference = \" + str(diff))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    num = 1\n    summation = 0\n    while num <= n :\n        summation = summation + num**3\n        num = num + 1\n    return summation**3 - summation\n    \ndef is_palindrome(n) :  \n    '''\n    Write a python function to check whether a number is a palindrome or not\n    '''\n    num = n\n    reverse = 0\n    while (num > 0) :\n        reverse = reverse * 10 + (num % 10)\n        num = num // 10\n    return reverse == n\n    \ndef is_armstrong(n) :  \n    '''\n    Write a python function to check whether a number is an Armstrong number or not\n    '''\n    sum = 0\n    temp = n\n    while temp > 0 :\n        digit = temp % 10\n        sum = sum + (digit ** 3)\n        temp = temp // 10\n    return sum == n\n    \ndef is_prime(n) :  \n    '''\n    Write a python function to check whether a number is a prime number or not\n    '''\n    if n <= 1 :\n        return False\n    elif n <= 3 :\n        return True\n    elif n % 2 == 0 or n % 3 == 0 :\n        return False\n    else :\n        i = 5\n        while i * i <= n :\n            if n % i == 0 or n % (i + 2) == 0 :\n                return False\n            i = i + 6\n        return True\n    \ndef is_perfect(n) :  \n    '''\n    Write a python function to check whether a number is a perfect number or not\n    '''\n    sum = 0\n    if (n <= 1) :\n        return False\n    for i in range(1,n) :\n        if (n % i == 0) :\n            sum = sum + i\n    return (sum == n)\n    \ndef is_pandigital(n) :  \n    '''\n    Write a python function to check whether a number is pandigital or not\n    '''\n    num = n\n    s = \"123456789\"\n    for i in range(0,10) :\n        if str(i) not in s :\n            return False\n        while num > 0 :\n            digit = num % 10\n            if digit == 0 :\n                return False\n            num = num // 10\n    return True\n    \ndef fibonacci(n) :  \n    '''\n    Write a python function to find the nth fibonacci number\n    '''\n    if n < 0 :\n        return -1\n    elif n == 0 or n == 1 :\n        return n\n    else :\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    \ndef fibonacci_r(n) :  \n    '''\n    Write a python function to find the nth fibonacci number recursively\n    '''\n    if n < 0 :\n        return -1\n    elif n == 0 or n == 1 :\n        return n\n    else :\n        return fibonacci_r(n - 1) + fibonacci_r(n - 2)\n    \ndef sum_series(n) :  \n    '''\n    Write a python function to find the nth fibonacci number using sum series\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return sum_series(n - 1) + sum_series(n - 2)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n+1) :\n        sum += x**3\n    return sum**3 - sum\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n)]) - sum([i for i in range(1,n+1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (n * (n+1) * (2*n + 1))/6\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        sum = sum + i**3\n    return sum**3 - sum\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum = sum + i*i*i\n    return sum\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs=0\n    for i in xrange(0,N) :\n        for j in xrange(i+1,N) :\n            if A[i]^A[j]&1 :\n                odd_pairs+=1\n    return odd_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    ans = 0\n    for i in range(N-1) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] & 1 :\n                ans += 1\n    return ans\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pairs = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) & 1 == 1 :\n                pairs = pairs + 1\n    return pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N == 1 :\n        return 1\n    else :\n        return find_Odd_Pair(A,N-1) + find_Odd_Pair(A,N-2) + (N-2)*(N-1)\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return sum((A[i] ^ A[i+1]) & 1 for i in range(N-1))\n    \ndef test_find_Odd_Pair() : \n    A = [ 3,1,0,6,5,5,6,1,3,0,4,4,4,2,0,5,4,2,1,1,3,3,3,1,5,5,5,2,3,5,3,5,3,3,5,6,5,5,3,6,6,5,5,6,6,5,5,5,5,5,5,5,6,4,4,6,6,5,5,5,5,5,6,5,5,6,5,6,5,5,5,5,5,6,5,5,5,6,5,5,6,5,5,5,6,5,6,5,6,5,6,5,6,5,5,5,6,5,5,5,5,6,5,6,5,6,5,5,5,5,5,5,5,6,5,6,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,6,5,6,5,6,5,6,5,5,5,6,5,6,5,6,5,6,5,5,6,5,5,6,5,6,5,5,5,5,6,5,5,5,5,6,5,5,5,5,5,5,5,5,5,6,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,6,5,6,5,5,6,5,6,5,5,5,6,5,5,5,5,6,5,5,5,5,5,5,5,5,5,6,5,6,5,5,6,5,5,6,5,5,5,5,5,5,5,5,5,5,6,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,5,6,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,6,5,6,5,5,5,5,6,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in xrange(N):\n        for j in xrange(i+1,N):\n            if (A[i]^A[j] & 1) == 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 0x1) : \n                count += 1\n    return count\ndef find_Odd_Pair(A,N) :"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1,2) :\n        if A[i] ^ A[i+1] & 1 :\n            count = count + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Odd_Pair_Count = 0\n    for i in xrange(0,N) : \n        for j in xrange(i+1,N) : \n            if (A[i]^A[j])%2!= 0 : \n                Odd_Pair_Count += 1\n    return Odd_Pair_Count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) % 2 == 1 :\n                count = count + 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == None:\n        return None\n    if string == '':\n        return ''\n    \n    ret_string = ''\n    for char in string:\n        ret_string += char.swapcase()\n    \n    return ret_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            new_string += string[i].lower()\n        else:\n            new_string += string[i].upper()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char)+32) if char.islower() else chr(ord(char)-32) if char.isupper() else char for char in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) == 0:\n        return string\n    else:\n        return toggle_string(string[1:]) + string[0].swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '': return string\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            new_string += string[i].lower()\n        else:\n            new_string += string[i].upper()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    output = ''\n    for c in string:\n        output += c.swapcase()\n    return output\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(str(n1)[i]) - int(str(n2)[i])) for i in range(len(str(n1))))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    count = 0\n    for i in range(len(n1_str)):\n        d1 = n1_str[i]\n        d2 = n2_str[i]\n        d = int(d1) - int(d2)\n        count += d\n    return count\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    l1 = str(n1)\n    l2 = str(n2)\n    l1 = l1[::-1]\n    l2 = l2[::-1]\n    dist = 0\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            dist = dist + 1\n    return dist\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([int(c1) - int(c2) for c1, c2 in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1==n2:\n        return 0\n    return abs(n1-n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d = abs(n1 - n2)\n    return int(d / (10 ** (len(str(d)) - 1)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(n1)!= len(n2):\n        raise ValueError('Lengths of numbers do not match')\n    return sum(abs(int(n1[i]) - int(n2[i])) for i in range(len(n1)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    if len(str(n1))!= len(str(n2)):\n        return 1\n    else:\n        i = 0\n        digit_diff = 0\n        while i < len(str(n1)):\n            if str(n1)[i] == str(n2)[i]:\n                digit_diff += 1\n            i += 1\n        return digit_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i)-int(j)) for i, j in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    global_max = -sys.maxsize\n    max_so_far = 0\n    for i in range(0,size):\n        max_so_far = max_so_far + a[i]\n        if max_so_far < 0:\n            max_so_far = 0\n        if max_so_far > global_max:\n            global_max = max_so_far\n    return global_max\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = a[0]\n    max_so_far = a[0]\n    for i in xrange(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -1\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    max_ending_here = a[0]\n    max_so_far = a[0]\n    for i in xrange(1, size):\n        max_ending_here = max(a[i], max_ending_here+a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    for i in range(1, size):\n        a[i] = max(a[i-1], 0) + a[i]\n    return max(a)\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    \n    max_ending_here = a[size-1]\n    max_so_far = max_ending_here\n    \n    for i in range(size-2, -1, -1):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    \n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    result = 0\n    max = 0\n    for i in range(0, size):\n        max = max + a[i]\n        if max < 0:\n            max = 0\n        if result < max:\n            result = max\n    return result\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(0, size):\n        sum = 0\n        for j in range(i, size):\n            sum = sum + a[j]\n            if (sum > max_sum):\n                max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -1 * sys.maxint\n    for i in range(size):\n        for j in range(i, size):\n            max_sum = max(max_sum, sum(a[i:j+1]))\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = tuple(sorted(set(test_tup1).union(set(test_tup2))))\n    return new_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n    \ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) & set(test_tup2))\n    \ndef difference_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the difference of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) - set(test_tup2))\n    \ndef symmetric_difference_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the symmetric difference of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) ^ set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set()\n    union_set.update(test_tup1)\n    union_set.update(test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1).union(set(test_tup2)))\n    union_list.sort()\n    return tuple(union_list)\n    \ndef get_intersect_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersect of the elements of two given tuples and output them in sorted order.\n    '''\n    intersect_list = list(set(test_tup1).intersection(set(test_tup2)))\n    intersect_list.sort()\n    return tuple(intersect_list)\n    \ndef get_difference_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the difference of the elements of two given tuples and output them in sorted order.\n    '''\n    difference_list = list(set(test_tup1).difference(set(test_tup2)))\n    difference_list.sort()\n    return tuple(difference_list)\n    \ndef get_symmetric_difference_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the symmetric difference of the elements of two given tuples and output them in sorted order.\n    '''\n    symmetric_difference_list = list(set(test_tup1).symmetric_difference(set(test_tup2)))\n    symmetric_difference_list.sort()\n    return tuple(symmetric_difference_list)\n    \ndef print_menu():\n    print(\"1. Union of two tuples\")\n    print(\"2. Intersection of two tuples\")\n    print(\"3. Difference of two tuples\")\n    print(\"4. Symmetric difference of two tuples\")\n    \ndef main():\n    while True:\n        try:\n            print_menu()\n            choice = int(input(\"Please enter your choice: \"))\n            if choice in range(1,5):\n                print(\"----------------------------------------------\")\n                tuple1 = (input(\"Enter first tuple: \"), input(\"Enter second tuple: \"))\n                tuple2 = (input(\"Enter first tuple: \"), input(\"Enter second tuple: \"))\n                \n                if choice == 1:\n                    print(\"Union of two tuples: \", union_elements(tuple1, tuple2))\n                elif choice == 2:\n                    print(\"Intersection of two tuples: \", get_intersect_elements(tuple1, tuple2))\n                elif choice == 3:\n                    print(\"Difference of two tuples: \", get_difference_elements(tuple1, tuple2))\n                elif choice == 4:\n                    print(\"Symmetric difference of two tuples: \", get_symmetric_difference_elements(tuple1, tuple2))\n            else:\n                print(\"Wrong choice!\")\n                continue\n            \n            cont = input(\"Continue? (y/n): \")\n            if cont == 'n':\n                break\n            else:\n                continue\n        except ValueError as e:\n            print(e)\n            continue\n        except Exception as e:\n            print(e)\n            continue\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code here\n    sorted_list = []\n    for elem in test_tup1:\n        if elem not in sorted_list:\n            sorted_list.append(elem)\n    for elem in test_tup2:\n        if elem not in sorted_list:\n            sorted_list.append(elem)\n    return sorted(sorted_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_tup = tuple(sorted(union_set))\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    union_list = union_list + test_tup1\n    union_list = union_list + test_tup2\n    #union_list = union_list + test_tup1 + test_tup2\n    union_list.sort()\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    union_set = test_set1.union(test_set2)\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup3 = (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    return test_tup3\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    start_idx = 0\n    for i in xrange(len(lst)):\n        length = 0\n        for j in xrange(i, len(lst)):\n            if lst[j] == lst[i]:\n                length += 1\n            else:\n                break\n        if length > max_length:\n            max_length = length\n            start_idx = i\n    return lst[start_idx:start_idx + max_length]\n    \ndef Find_Longest_Sublist_Unique(lst):\n    '''\n    Write a python function to find the longest sublist with unique elements.\n    '''\n    max_length = 0\n    start_idx = 0\n    for i in xrange(len(lst)):\n        length = 1\n        for j in xrange(i, len(lst)):\n            if lst[j] not in lst[i:j]:\n                length += 1\n            else:\n                break\n        if length > max_length:\n            max_length = length\n            start_idx = i\n    return lst[start_idx:start_idx + max_length]\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    import sys\n    max_length=len(lst)\n    \n    for i in range(0,len(lst)):\n        j=i\n        while j<len(lst):\n            if len(lst[i:j+1])>max_length:\n                max_length=len(lst[i:j+1])\n            j=j+1\n    print('The length of the longest sublist is:',max_length)\n    \nFind_Max_Length([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9])"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    temp = list(lst)\n    result = 0\n    for i in range(len(temp)):\n        for j in range(i,len(temp)):\n            result = max(result,sum(temp[i:j+1]))\n    return result\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    if len(lst)==1:\n        return 1\n    max_len=1\n    for i in range(len(lst)):\n        curr_len=1\n        for j in range(i+1,len(lst)):\n            if lst[j]<lst[i]:\n                curr_len+=1\n            else:\n                break\n        if curr_len>max_len:\n            max_len=curr_len\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlen = 0\n    for x in lst:\n        if len(x) > maxlen:\n            maxlen = len(x)\n    return maxlen\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    temp = []\n    for i in lst:\n        temp.append(len(i))\n    return max(temp)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in lst:\n        current_length = 1\n        for j in range(1, len(i)):\n            if i[j] == i[j-1] + 1:\n                current_length = current_length + 1\n            else:\n                if current_length > max_length:\n                    max_length = current_length\n                current_length = 1\n    if current_length > max_length:\n        max_length = current_length\n    return max_length\n    \n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return len(lst[0])\n    else:\n        count_max = 0\n        sublist_length = len(lst[0])\n        for i in range(0,len(lst)):\n            for j in range(i,len(lst)):\n                if lst[j] == lst[i]:\n                    count_max = count_max + 1\n                    if count_max > sublist_length:\n                        sublist_length = count_max\n                else:\n                    break\n        return sublist_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = len(lst)\n    if length == 0:\n        return 0\n    if length == 1:\n        return 1\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile(r'\\\"(.+?)\\\"')\n    match = re.findall(regex, text)\n    print(match)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall('[^\"]+', text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Your code here\n    return re.findall(r'\\\"(.*?)\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # (?<=<)(.*?)(?=>)\n    matches = re.search(\"(?<=<)(.*?)(?=>)\",text)\n    return matches.group(0) if matches else ''\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quotes = re.findall('\\\".*?\\\"', text)\n    values = []\n    for q in quotes:\n        values.append(q.split('\\\"')[1])\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.*)\\\"')\n    result = re.findall(pattern,text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quotes = re.findall(r'\\\"[^\\\"]*\\\"', text)\n    quotes_value = [value[1:-1] for value in quotes]\n    return quotes_value\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall('[\\\"\\']{1}[^\\\"\\']*[\\\"\\']{1}', text)\n    # remove trailing whitespace\n    values = [value.strip() for value in values]\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # -*- coding: utf-8 -*-\n    def find_values(data):\n        matches = re.findall(r'\\\"(.+)\\\"', data)\n        return matches\n    return find_values(text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # split by ',' if present\n    text = re.sub(r'([\\w]+),([\\w]+)', r'\\1 \\2', text)\n    # split by ';' if present\n    text = re.sub(r'([\\w]+;[\\w]+)', r'\\1 \\2', text)\n    # split by ':' if present\n    text = re.sub(r'([\\w]+:([\\w]+)[\\w]+;[\\w]+)', r'\\1 \\2 \\3', text)\n    # split by ':' if present\n    text = re.sub(r'([\\w]+:([\\w]+)[\\w]+)', r'\\1 \\2', text)\n    # split by '-' if present\n    text = re.sub(r'([\\w]+-([\\w]+)-[\\w]+)', r'\\1 \\2', text)\n    # split by '\\n' if present\n    text = re.sub(r'([\\w]+)[\\n]', r'\\1 \\n', text)\n    # split by '\\r' if present\n    text = re.sub(r'([\\w]+)[\\r]', r'\\1 \\r', text)\n    # split by '\\t' if present\n    text = re.sub(r'([\\w]+)[\\t]', r'\\1 \\t', text)\n    # split by '?' if present\n    text = re.sub(r'([\\w]+)[\\?]', r'\\1 \\?', text)\n    # split by '!', '..', '...' if present\n    text = re.sub(r'([\\w]+)[!\\?\\.\\.\\...]', r'\\1 \\!', text)\n    # split by ':' if present\n    text = re.sub(r'([\\w]+)[:]', r'\\1 \\:', text)\n    # split by '\"' if present\n    text = re.sub(r'([\\w]+)[\\\"]', r'\\1 \\\\\"', text)\n    # split by '*' if present\n    text = re.sub(r'([\\w]+)[\\*]', r'\\1 \\*', text)\n    # split by '+' if present\n    text = re.sub(r'([\\w]+)[\\+]', r'\\1 \\+', text)\n    # split by ',' if present\n    text = re.sub(r'([\\w]+)[,]', r'\\1 \\,', text)\n    # split by '.' if present\n    text = re.sub(r'([\\w]+)[.]', r'\\1 \\.', text)\n    # split by ';' if present\n    text = re.sub(r'([\\w]+)[;]', r'\\1 \\;', text)\n    # split by ':' if present\n    text = re.sub(r'([\\w]+)[:]', r'\\1 \\:', text)\n    # split by '<' if present\n    text = re.sub(r'([\\w]+)[<]', r'\\1 \\<', text)\n    # split by '>' if present\n    text = re.sub(r'([\\w]+)[>]', r'\\1 \\>', text)\n    # split by '=' if present\n    text = re.sub(r'([\\w]+)[=]', r'\\1 \\=', text)\n    # split by'' if present\n    text = re.sub(r'([\\w]+)[ ]', r'\\1 \\ ', text)\n    # split by '\\n' if present\n    text = re.sub(r'([\\w]+)[\\n]', r'\\1 \\n', text)\n    # split by '\\r' if present\n    text = re.sub(r'([\\w]+)[\\r]', r'\\1 \\r', text)\n    # split by '\\t' if present\n    text = re.sub(r'([\\w]+)[\\t]', r'\\1 \\t', text)\n    # split by '\\?' if present\n    text = re.sub(r'([\\w]+)[\\?]', r'\\1 \\?', text)\n    # split by '!', '..', '...' if present\n    text = re.sub(r'([\\w]+)[!\\?\\.\\.\\...]', r'\\1 \\!', text)\n    # split by ':' if present\n    text = re.sub(r'([\\w]+)[:]', r'\\1 \\:', text)\n    # split by '\"' if present\n    text = re.sub(r'([\\w]+)[\\\"]', r'\\1 \\\\\"', text)\n    # split by '*' if present\n    text = re.sub(r'([\\w]+)[\\*]', r'\\1 \\*', text)\n    # split by '+' if present\n    text = re.sub(r'([\\w]+)[\\+]', r'\\1 \\+', text)\n    # split by ',' if present\n    text = re.sub(r'([\\w]+)[,]', r'\\1 \\,', text)\n    # split by '.' if present\n    text = re.sub(r'([\\w]+)[.]', r'\\1 \\.', text)\n    # split by ';' if present\n    text = re.sub(r'([\\w]+)[;]', r'\\1 \\;', text)\n    # split by ':' if present\n    text = re.sub(r'([\\w]+)[:]', r'\\1 \\:', text)\n    # split by '<' if present\n    text = re.sub(r'([\\w]+)[<]', r'\\1 \\<', text)\n    # split by '>' if present\n    text = re.sub(r'([\\w]+)[>]', r'\\1 \\>', text)\n    # split by '=' if present\n    text = re.sub(r'([\\w]+)[=]', r'\\1 \\=', text)\n    # split by'' if present\n    text = re.sub(r'([\\w]+)[ ]', r'\\1 \\ ', text)\n    # split by '\\n' if present\n    text = re.sub(r'([\\w]+)[\\n]', r'\\1 \\n', text)\n    # split by '\\r' if present\n    text = re.sub(r'([\\w]+)[\\r]', r'\\1 \\r', text)\n    # split by '\\t' if present\n    text = re.sub(r'([\\w]+)[\\t]', r'\\1 \\t', text)\n    # split by '\\?' if present\n    text = re.sub(r'([\\w]+)[\\?]', r'\\1 \\?', text)\n    # split by '!' if present\n    text = re.sub(r'([\\w]+)[!]', r'\\1 \\!', text)\n    # split by '..' if present\n    text = re.sub(r'([\\w]+)[.]', r'\\1 \\.\\.', text)\n    # split by '...' if present\n    text = re.sub(r'([\\w]+)[.]', r'\\1 \\...', text)\n    # split by ',' if present\n    text = re.sub(r'([\\w]+)[,]', r'\\1 \\,', text)\n    # split by '.' if present\n    text = re.sub(r'([\\w]+)[.]', r'\\1 \\.\\.', text)\n    # split by ';' if present\n    text = re.sub(r'([\\w]+)[;]', r'\\1 \\;', text)\n    # split by ':' if present\n    text = re.sub(r'([\\w]+)[:]', r'\\1 \\:', text)\n    # split by '<' if present\n    text = re.sub(r'([\\w]+)[<]', r'\\1 \\<', text)\n    # split by '>' if present\n    text = re.sub(r'([\\w]+)[>]', r'\\1 \\>', text)\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if (arr[i]!=arr[j]):\n                count = count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # print(arr)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] < arr[j]:\n                count = count+1\n    print(count)\nn = int(input(\"Enter the length of the array: \"))\narr = [int(input()) for x in range(n)]\ncount_Pairs(arr,n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    result = 0\n    for i in xrange(n):\n        for j in xrange(i+1,n):\n            if arr[i]!= arr[j]:\n                result += 1\n    return result\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    arr.sort()\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count +=1\n    print(count)\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d = {}\n    for x in arr:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    \n    pairs = 0\n    for i in d.keys():\n        if d[i] > 1:\n            pairs += d[i]*(d[i] - 1) / 2\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        if arr[0]==0:\n            return 1\n        else:\n            return 0\n    elif n==2:\n        if arr[0]==arr[1]:\n            return 1\n        else:\n            return 0\n    elif arr[n-1]==arr[n-2]:\n        return count_Pairs(arr,n-2)+1\n    else:\n        return count_Pairs(arr,n-1)\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dict = {}\n    for num in arr:\n        if num in dict:\n            dict[num] += 1\n        else:\n            dict[num] = 1\n    result = 0\n    for key in dict:\n        result += (dict[key]-1)*(dict[key]-2)//2\n    return result\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n    \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \ndef letter_count(word):\n    '''\n    Write a python function to count the number of letters in a string.\n    '''\n    return len(word)\n    \ndef digsum(n):\n    '''\n    Write a python function to calculate the sum of digits in a given integer.\n    '''\n    if n < 10:\n        return n\n    return (n % 10) + (digsum(n // 10))\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check whether the number is a palindrome or not.\n    '''\n    t = n\n    rev = 0\n    while n:\n        rev = rev * 10 + n % 10\n        n = n // 10\n    return t == rev\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether the number is a prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef max_num(a, b, c):\n    '''\n    Write a python function to find the max number among three numbers.\n    '''\n    return max(a, b, c)\n    \ndef double_char(word):\n    '''\n    Write a python function to double each character in a string.\n    '''\n    result = ''\n    for i in range(len(word)):\n        result += word[i] * 2\n    return result\n    \ndef count_hi(word):\n    '''\n    Write a python function to count the number of times \"hi\" appears in a string.\n    '''\n    result = 0\n    for i in range(len(word)):\n        if word[i:i+2] == 'hi':\n            result += 1\n    return result\n    \ndef cat_dog(word):\n    '''\n    Write a python function to check whether the string contains the substring \"cat\" and \"dog\" \n    separated by a space.\n    '''\n    if word.find('cat')!= -1 and word.find('dog')!= -1:\n        return True\n    else:\n        return False\n    \ndef count_code(str):\n    '''\n    Write a python function to count the number of times that the string \"code\" appears \n    in the given string, ignoring upper and lower case differences.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+2] == 'co':\n            count += 1\n    return count\n    \ndef end_other(a, b):\n    '''\n    Write a python function to check if one string ends with the other.\n    '''\n    if a[-len(b):] == b:\n        return True\n    elif b[-len(a):] == a:\n        return True\n    else:\n        return False\n    \ndef xyz_there(str):\n    '''\n    Write a python function to check whether the string contains \"xyz\" exactly once.\n    '''\n    if str.find('xyz')!= -1:\n        return True\n    else:\n        return False\n    \ndef count_evens(nums):\n    '''\n    Write a python function to count the number of even numbers in the given list of numbers.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            result += 1\n    return result\n    \ndef big_diff(nums):\n    '''\n    Write a python function to find the difference between the biggest and smallest numbers in a list.\n    '''\n    return max(nums) - min(nums)\n    \ndef centered_average(nums):\n    '''\n    Write a python function to find the average of the numbers in a list, \n    except that ignore sections of numbers starting with a 6 and extending to the next 7 \n    (every 6 will be followed by at least one 7). Return 0 for no numbers.\n    '''\n    result = 0\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        if nums[i]!= 6:\n            result += nums[i]\n            count += 1\n        elif nums[i] == 6 and nums[i+1]!= 7:\n            count -= 1\n    if count > 0:\n        return result / count\n    else:\n        return 0\n    \ndef sum13(nums):\n    '''\n    Write a python function to return the sum of the numbers in the list, \n    except ignore sections of numbers starting with a 13 and extending to the next 17 \n    (every 13 will be followed by at least one 17). Return 0 for no numbers.\n    '''\n    sum = 0\n    n = len(nums)\n    for i in range(n):\n        if nums[i]!= 13:\n            sum += nums[i]\n        elif nums[i] == 13 and nums[i+1]!= 17:\n            sum -= nums[i]\n    return sum\n    \ndef has22(nums):\n    '''\n    Write a python function to return True if the list contains a 2 next to a 2 somewhere.\n    '''\n    for i in range(len(nums) - 1):\n        if nums[i] == 2 and nums[i+1] == 2:\n            return True\n    return False\n    \ndef sum67(nums):\n    '''\n    Write a python function to return the sum of the numbers in the list, \n    except ignore sections of numbers starting with a 6 and extending to the next 7 \n    (every 6 will be followed by at least one 7). Return 0 for no numbers.\n    '''\n    sum = 0\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        if nums[i]!= 6:\n            sum += nums[i]\n            count += 1\n        elif nums[i] == 6 and nums[i+1]!= 7:\n            count -= 1\n    if count > 0:\n        return sum\n    else:\n        return 0\n    \ndef has22(nums):\n    '''\n    Write a python function to return True if the list contains a 2 next to a 2 somewhere.\n    '''\n    for i in range(len(nums) - 1):\n        if nums[i] == 2 and nums[i+1] == 2:\n            return True\n    return False\n    \ndef sum67(nums):\n    '''\n    Write a python function to return the sum of the numbers in the list, \n    except ignore sections of numbers starting with a 6 and extending to the next 7 \n    (every 6 will be followed by at least one 7). Return 0 for no numbers.\n    '''\n    sum = 0\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        if nums[i]!= 6:\n            sum += nums[i]\n            count += 1\n        elif nums[i] == 6 and nums[i+1]!= 7:\n            count -= 1\n    if count > 0:\n        return sum\n    else:\n        return 0\n    \ndef sock_merchant(n, ar):\n    '''\n    Write a python function to find the number of matching pairs of socks \n    with a given number of colors.\n    '''\n    result = 0\n    for i in range(n):\n        if ar[i] % 2 == 0:\n            result += 1\n    return result\n    \ndef make_bricks(small, big, goal):\n    '''\n    Write a python function to check if you can make change for a given amount of money \n    using the coins you have.\n    '''\n    if goal == 0:\n        return True\n    if goal < 0 or small == 0:\n        return False\n    if goal >= small:\n        return True\n    if goal % 5 > small:\n        return False\n    return make_bricks(small, big, goal - small) or make_bricks(small, big, goal)\n    \ndef lone_sum(ar):\n    '''\n    Write a python function to find the sum of the numbers that are lonely in an array of numbers. \n    '''\n    result = 0\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = str(n)\n    return sum([int(x) for x in s])\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Truncate n to prevent overflow\n    n = str(n)\n    return sum([int(x) for x in n])\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    pass\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return sum_digits(n/10) + n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return sum_digits(n // 10) + n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n%10 + sum_digits(n//10)\n    \ndef path_exists(graph, start, end, path=[]):\n    '''\n    Write a function to check if there is a path between two nodes in a graph.\n    '''\n    path = path + [start]\n    if start == end:\n        return True\n    if start not in graph:\n        return False\n    for node in graph[start]:\n        if node not in path:\n            if path_exists(graph, node, end, path):\n                return True\n    return False\n    \ndef find_all_paths(graph, start, end, path=[]):\n    '''\n    Write a function to find all paths between two nodes in a graph.\n    '''\n    path = path + [start]\n    if start == end:\n        return [path]\n    if start not in graph:\n        return []\n    paths = []\n    for node in graph[start]:\n        if node not in path:\n            newpaths = find_all_paths(graph, node, end, path)\n            for newpath in newpaths:\n                paths.append(newpath)\n    return paths\n    \ndef add_intersection(m1, m2):\n    '''\n    Write a function to add two matrices together.\n    '''\n    if m1 is None or m2 is None:\n        return m1\n    if len(m1)!= len(m2):\n        return None\n    n = len(m1)\n    m3 = [None] * n\n    for i in range(n):\n        m3[i] = [None] * n\n    for i in range(n):\n        for j in range(n):\n            m3[i][j] = m1[i][j] + m2[i][j]\n    return m3\n    \ndef sum_matrix(m1, m2):\n    '''\n    Write a function to add two matrices together.\n    '''\n    if m1 is None or m2 is None:\n        return m1\n    if len(m1)!= len(m2):\n        return None\n    n = len(m1)\n    m3 = [None] * n\n    for i in range(n):\n        m3[i] = [None] * n\n    for i in range(n):\n        for j in range(n):\n            m3[i][j] = m1[i][j] + m2[i][j]\n    return m3\n    \ndef subtract_matrix(m1, m2):\n    '''\n    Write a function to subtract two matrices.\n    '''\n    if m1 is None or m2 is None:\n        return m1\n    if len(m1)!= len(m2):\n        return None\n    n = len(m1)\n    m3 = [None] * n\n    for i in range(n):\n        m3[i] = [None] * n\n    for i in range(n):\n        for j in range(n):\n            m3[i][j] = m1[i][j] - m2[i][j]\n    return m3\n    \ndef multiply_matrix(m1, m2):\n    '''\n    Write a function to multiply two matrices.\n    '''\n    if m1 is None or m2 is None:\n        return m1\n    if len(m1[0])!= len(m2):\n        return None\n    n = len(m1)\n    m3 = [None] * n\n    for i in range(n):\n        m3[i] = [None] * n\n    for i in range(n):\n        for j in range(n):\n            m3[i][j] = 0\n            for k in range(n):\n                m3[i][j] += m1[i][k] * m2[k][j]\n    return m3\n    \ndef matrix_chain_order(p):\n    '''\n    Write a function to get the longest path in a matrix.\n    '''\n    n = len(p)\n    m = [None] * n\n    for i in range(n):\n        m[i] = [None] * n\n    for i in range(n):\n        m[i][i] = 0\n    for L in range(2, n):\n        for i in range(1, n - L + 1):\n            j = i + L - 1\n            m[i][j] = float('inf')\n            for k in range(i, j):\n                q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j]\n                if q < m[i][j]:\n                    m[i][j] = q\n    return m[1][n - 1]\n    \ndef matrix_chain_order2(p):\n    '''\n    Write a function to get the longest path in a matrix.\n    '''\n    n = len(p)\n    m = [None] * n\n    for i in range(n):\n        m[i] = [None] * n\n    for i in range(n):\n        m[i][i] = 0\n    s = [None] * n\n    for L in range(2, n):\n        for i in range(1, n - L + 1):\n            j = i + L - 1\n            m[i][j] = float('inf')\n            for k in range(i, j):\n                q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j]\n                if q < m[i][j]:\n                    m[i][j] = q\n                    s[j] = k\n    return m, s\n    \ndef matrix_chain_order3(p):\n    '''\n    Write a function to get the longest path in a matrix.\n    '''\n    n = len(p)\n    m = [None] * n\n    for i in range(n):\n        m[i] = [None] * n\n    for i in range(n):\n        m[i][i] = 0\n    s = [None] * n\n    for L in range(2, n):\n        for i in range(1, n - L + 1):\n            j = i + L - 1\n            m[i][j] = float('inf')\n            for k in range(i, j):\n                q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j]\n                if q < m[i][j]:\n                    m[i][j] = q\n                    s[j] = k\n    return m, s\n    \ndef binary_search(nums, target):\n    '''\n    Write a function to search a target in a sorted array.\n    '''\n    l = 0\n    r = len(nums) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return None\n    \ndef binary_search2(nums, target):\n    '''\n    Write a function to search a target in a sorted array.\n    '''\n    l = 0\n    r = len(nums) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            r = mid - 1\n        else:\n            l = mid + 1\n    if l > r:\n        return None\n    while nums[l] == target:\n        l -= 1\n    return l + 1\n    \ndef find_uniq(s):\n    '''\n    Write a function to find the unique integer in a sorted array.\n    '''\n    l = 0\n    r = len(s) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if s[mid]!= s[mid - 1] and s[mid]!= s[mid + 1]:\n            return s[mid]\n        elif s[mid] == s[mid - "
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total = total + n % 10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = 1\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            flag = 0\n            break\n    if flag == 1:\n        print \"list is sorted\"\n    else:\n        print \"list is not sorted\"\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    length = len(list1)\n    if length <= 1:\n        return True\n    for i in range(0, length - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    elif len(list1) == 0:\n        return True\n    else:\n        if list1[0] < list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sort_list = sorted(list1)\n    if sort_list == list1:\n        print \"List is sorted!\"\n    else:\n        print \"List is not sorted!\"\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if(list1[i]<list1[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        d = {}\n        l.append(d)\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_list_sorted = []\n    for list2 in list1:\n        list2.sort(key = lambda x: x[0])\n        sub_list_sorted.append(list2)\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # empty list to append sorted sublists to\n    sorted_list = []\n    \n    # for each sublist in list1\n    for sublist in list1:\n        # sort sublist\n        sublist.sort()\n        # add sorted sublist to sorted_list\n        sorted_list.append(sublist)\n    \n    # return sorted list\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sort_list = []\n    for sub_list in list1:\n        sub_list.sort()\n        sort_list.append(sub_list)\n    return sort_list\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list2 in list1:\n        list2.sort()\n        print list2\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    return_list = []\n    \n    for sublist in list1:\n        return_list.append(sorted(sublist))\n    \n    return return_list\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1)==0:\n        return list1\n    else:\n        n = len(list1[0])\n        for i in range(n):\n            new_list = []\n            for item in list1:\n                new_list.append(item[i])\n            list1[:] = sorted(new_list)\n        return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for i in range(0, len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    list2=[]\n    for i in range(0, len(list1)):\n        list2.append(sorted(list1[i]))\n    \n    return list2\n    \ndef count_substring(string1, string2):\n    '''\n    Write a function that counts the number of times string1 appears anywhere in string2.\n    '''\n    \n    count = 0\n    for i in range(len(string2)-len(string1)+1):\n        if string2[i:i+len(string1)] == string1:\n            count += 1\n    \n    return count\n    \ndef count_char_substring(string1, string2):\n    '''\n    Write a function that counts the number of times string1 appears anywhere in string2.\n    '''\n    \n    count = 0\n    for i in range(len(string2)-len(string1)+1):\n        if string2[i] == string1[0]:\n            if string2[i:i+len(string1)] == string1:\n                count += 1\n    \n    return count\n    \ndef count_char_substring_1(string1, string2):\n    '''\n    Write a function that counts the number of times string1 appears anywhere in string2.\n    '''\n    \n    count = 0\n    for i in range(len(string2)-len(string1)+1):\n        if string2[i] in string1:\n            if string2[i:i+len(string1)] == string1:\n                count += 1\n    \n    return count\n    \ndef rotate_word(string1, string2):\n    '''\n    Write a function that rotates a string to the right by k units.\n    '''\n    \n    count = 0\n    for i in range(len(string2)-len(string1)+1):\n        if string2[i:i+len(string1)] == string1:\n            count += 1\n    \n    return count\n    \ndef rotate_word_1(string1, string2):\n    '''\n    Write a function that rotates a string to the right by k units.\n    '''\n    \n    count = 0\n    for i in range(len(string2)-len(string1)+1):\n        if string2[i:i+len(string1)] == string1:\n            count += 1\n    \n    return count\n    \ndef reverse_string(string1):\n    '''\n    Write a function that reverses a string.\n    '''\n    \n    new_string = ''\n    for i in range(len(string1)-1, -1, -1):\n        new_string += string1[i]\n        \n    return new_string\n    \ndef permutations(string1):\n    '''\n    Write a function that takes a string as input and returns all the possible permutations of the string.\n    '''\n    \n    count = 0\n    list1 = []\n    \n    for i in range(len(string1)):\n        list1.append(string1[i])\n        list1_2 = list1[:]\n        \n        for j in range(len(list1)):\n            if list1_2.index(list1[j]) > i:\n                list1_2.insert(i, list1[j])\n                list1_2.pop(j+1)\n                \n                if list1_2 not in list1:\n                    count += 1\n                    list1 = list1_2[:]\n        \n    return count\n    \ndef palindrome_permutation(string1):\n    '''\n    Write a function that takes a string as input and returns True if the string is a palindrome and False if it is not.\n    '''\n    \n    count = 0\n    list1 = []\n    \n    for i in range(len(string1)):\n        list1.append(string1[i])\n        list1_2 = list1[:]\n        \n        for j in range(len(list1)):\n            if list1_2.index(list1[j]) > i:\n                list1_2.insert(i, list1[j])\n                list1_2.pop(j+1)\n                \n                if list1_2 == list1_2[::-1]:\n                    return True\n                \n                else:\n                    list1 = list1_2[:]\n    \n    return False\n    \ndef hamming_distance(string1, string2):\n    '''\n    Write a function that computes the hamming distance of two strings.\n    '''\n    \n    distance = 0\n    for i in range(len(string1)):\n        if string1[i]!= string2[i]:\n            distance += 1\n    \n    return distance\n    \ndef longest_common_prefix(string1, string2):\n    '''\n    Write a function that returns the longest common prefix of two strings.\n    '''\n    \n    list1 = []\n    list2 = []\n    \n    for i in range(len(string1)):\n        list1.append(string1[i])\n        list2.append(string2[i])\n    \n    for i in range(len(string1)):\n        if list1[i]!= list2[i]:\n            return list1[:i]\n    \n    return list1\n    \ndef largest_number(list1):\n    '''\n    Write a function that returns the largest number from a list of numbers.\n    '''\n    \n    list2 = []\n    for i in list1:\n        list2.append(int(i))\n    \n    list2.sort(reverse=True)\n    return list2[0]\n    \ndef find_triplets(list1):\n    '''\n    Write a function that returns a list of all triplets that sum to zero.\n    '''\n    \n    list2 = []\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i] + list1[j] == 0:\n                list2.append((list1[i], list1[j]))\n                \n    return list2\n    \ndef find_triplets_1(list1):\n    '''\n    Write a function that returns a list of all triplets that sum to zero.\n    '''\n    \n    list2 = []\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i] + list1[j] == 0:\n                list2.append((list1[i], list1[j]))\n                \n    return list2\n    \ndef find_triplets_2(list1):\n    '''\n    Write a function that returns a list of all triplets that sum to zero.\n    '''\n    \n    list2 = []\n    for i in range(len(list1)-2):\n        for j in range(i+1, len(list1)-1):\n            for k in range(j+1, len(list1)):\n                if list1[i] + list1[j] + list1[k] == 0:\n                    list2.append((list1[i], list1[j], list1[k]))\n                    \n    return list2\n    \ndef check_pangram(string1):\n    '''\n    Write a function that checks if a string is a pangram.\n    '''\n    \n    list1 = list(string1)\n    \n    for i in range(len(list1)):\n        if not list1[i].isalpha():\n            return False\n    \n    return True\n    \ndef check_pangram_1(string1):\n    '''\n    Write a function that checks if a string is a pangram.\n    '''\n    \n    list1 = list(string1)\n    \n    for i in range(len(list1)):\n        if not list1[i].isalpha():\n            return False\n            \n    return True\n    \ndef check_pangram_2(string1):\n    '''\n    Write a function that checks if a string is a pangram.\n    '''\n    \n    list1 = list(string1)\n    \n    for i in range(len(list1)):\n        if list1.count(list1[i]) > 1:\n            return False\n    \n    return True\n    \ndef check_pangram_"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_sorted_list = []\n    for sublist in list1:\n        sublist_sorted_list.append(sorted(sublist))\n    return sublist_sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(nums)\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return len(unique_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_num_list = []\n    for nums_list in nums:\n        for num in nums_list:\n            if num not in unique_num_list:\n                unique_num_list.append(num)\n    return unique_num_list\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            del nums[i]\n            break\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set(nums[0])\n    for i in range(1,len(nums)):\n        unique_nums.update(nums[i])\n    return list(unique_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n    return unique\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for num in nums:\n        if nums.count(num) > 1:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Here we will use set to get the unique values\n    # and then we will get the product of the set\n    set_data = set(list_data)\n    product_of_unique = 1\n    for i in set_data:\n        product_of_unique = product_of_unique * (i)\n    print('The product of the unique numbers is : ', product_of_unique)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x,y:x*y, [int(i) for i in list(set(list_data))])\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    numbers = []\n    for item in list_data:\n        if item not in numbers:\n            numbers.append(item)\n    product = 1\n    for item in numbers:\n        product *= item\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list(list_data)\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dict_data = {}\n    for i in list_data:\n        dict_data[i] = dict_data.get(i,0) + 1\n    dict_data = sorted(dict_data.items())\n    result = 1\n    for i in dict_data:\n        if i[1] == 1:\n            result = result*i[0]\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # unique_numbers = []\n    # for num in list_data:\n    #     if num not in unique_numbers:\n    #         unique_numbers.append(num)\n    # return functools.reduce(lambda x, y: x*y, unique_numbers)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if not list_data:\n        return 1\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    prod = 1\n    for i in list_data:\n        prod *= i\n    return prod\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    for number in list_data:\n        if list_data.count(number) > 1:\n            list_data.remove(number)\n    product = 1\n    for number in list_data:\n        product *= number\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in set(list_data):\n        product *= i\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r + h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * (r**2) + 2 * (pi * r * h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*r*(pi/2) + 2*pi*r*h + 2*pi*r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * (r ** 2) + 2 * (r ** 2) * h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r > 0 and h > 0:\n        return 2 * pi * r * h\n    else:\n        return 0\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #surface area of a cylinder\n    area=pi*r*r+2*pi*r*h+2*pi*h*h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area=2*pi*r*(r+h)\n    return area\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_A = len(A) \n    len_B = len(B)\n    if len_A == len_B:\n        return(A == B)\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) <= len(A):\n        for i in xrange(len(A)):\n            if B[i] not in A:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n=len(A)\n    m=len(B)\n    if(n<m):\n        return False\n    else:\n        for i in range(0,m):\n            if A[i]==B[i]:\n                if i==m-1:\n                    return True\n            else:\n                return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while j<len(B):\n        if B[j]==A[i]:\n            i+=1\n            if i==len(A):\n                return True\n        j+=1\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if B[i] in A:\n            i+=1\n            if i==len(B):\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    a = len(A)\n    b = len(B)\n    if a > b:\n        return 0\n    else:\n        for i in range(b):\n            if A[i] == B[i]:\n                pass\n            else:\n                return 0\n    return 1\n    \ndef is_Array_Sorted(A):\n    '''\n    Write a python function to check whether the list is sorted or not.\n    '''\n    flag = 1\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            flag = 0\n    return flag\n    \ndef is_Array_Reverse(A):\n    '''\n    Write a python function to check whether the list is reverse or not.\n    '''\n    flag = 1\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            pass\n        else:\n            flag = 0\n    return flag\n    \ndef is_Array_Empty(A):\n    '''\n    Write a python function to check whether the list is empty or not.\n    '''\n    if A == []:\n        return 1\n    else:\n        return 0\n    \ndef is_Array_Sum(A,B):\n    '''\n    Write a python function to check whether the list is sum of another list or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        if A[i]+B[i] == B[i]:\n            pass\n        else:\n            flag = 1\n    return flag\n    \ndef is_Array_Sum_Tuple(A,B):\n    '''\n    Write a python function to check whether the list is sum of another list or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        if A[i]+B[i] == B[i]:\n            pass\n        else:\n            flag = 1\n    return flag\n    \ndef is_Array_Sum_Set(A,B):\n    '''\n    Write a python function to check whether the list is sum of another list or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        if A[i]+B[i] == B[i]:\n            pass\n        else:\n            flag = 1\n    return flag\n    \ndef is_Array_Intersect(A,B):\n    '''\n    Write a python function to check whether the list is intersecting or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        if A[i] in B:\n            pass\n        else:\n            flag = 1\n    return flag\n    \ndef is_Array_Difference(A,B):\n    '''\n    Write a python function to check whether the list is a difference of another list or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        if A[i] not in B:\n            pass\n        else:\n            flag = 1\n    return flag\n    \ndef is_Array_Prod(A,B):\n    '''\n    Write a python function to check whether the list is product of another list or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        if A[i]*B[i] == B[i]:\n            pass\n        else:\n            flag = 1\n    return flag\n    \ndef is_Array_Len(A,B):\n    '''\n    Write a python function to check whether the list is length of another list or not.\n    '''\n    flag = 0\n    if len(A) == len(B):\n        pass\n    else:\n        flag = 1\n    return flag\n    \ndef is_Array_Membership(A,B):\n    '''\n    Write a python function to check whether the list is membership of another list or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        if A[i] in B:\n            pass\n        else:\n            flag = 1\n    return flag\n    \ndef is_Array_Subset(A,B):\n    '''\n    Write a python function to check whether the list is subset of another list or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        if A[i] in B:\n            pass\n        else:\n            flag = 1\n    return flag\n    \ndef is_Array_Superset(A,B):\n    '''\n    Write a python function to check whether the list is superset of another list or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        if A[i] not in B:\n            pass\n        else:\n            flag = 1\n    return flag\n    \ndef is_Array_Symmetric(A):\n    '''\n    Write a python function to check whether the list is symmetric or not.\n    '''\n    flag = 1\n    for i in range(len(A)):\n        if A[i]!= A[len(A)-1-i]:\n            flag = 0\n    return flag\n    \ndef is_Array_Symmetric_Tuple(A):\n    '''\n    Write a python function to check whether the list is symmetric or not.\n    '''\n    flag = 1\n    for i in range(len(A)):\n        if A[i]!= A[len(A)-1-i]:\n            flag = 0\n    return flag\n    \ndef is_Array_Symmetric_Set(A):\n    '''\n    Write a python function to check whether the list is symmetric or not.\n    '''\n    flag = 1\n    for i in range(len(A)):\n        if A[i]!= A[len(A)-1-i]:\n            flag = 0\n    return flag\n    \ndef is_Array_Transpose(A):\n    '''\n    Write a python function to check whether the list is transpose of another list or not.\n    '''\n    flag = 1\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[j]!= A[i]:\n                flag = 0\n    return flag\n    \ndef is_Array_Unique(A):\n    '''\n    Write a python function to check whether the list is unique or not.\n    '''\n    flag = 1\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] == A[j]:\n                flag = 0\n    return flag\n    \ndef is_Array_Disjoint(A,B):\n    '''\n    Write a python function to check whether the list is disjoint or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        if A[i] in B:\n            flag = 1\n    return flag\n    \ndef is_Array_Set_A(A,B):\n    '''\n    Write a python function to check whether the list is a set of another list or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        if A[i] in B:\n            pass\n        else:\n            flag = 1\n    return flag\n    \ndef is_Array_Set_B(A,B):\n    '''\n    Write a python function to check whether the list is a set of another list or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        if A[i] in B:\n            pass\n        else:\n            flag = 1\n    return flag\n    \ndef is_Array_Min(A):\n    '''\n    Write a python function to check whether the list is minimun value or not.\n    '''\n    flag = 1\n    for i in range(len(A)):\n        if A[i] < A[i+1]:\n            pass\n        else:\n            flag = 0\n    return flag\n    \ndef is_Array_Max(A):\n    '''\n    Write a python function to check whether the list is maximum value or not.\n    '''\n    flag = 1\n    for i in range(len(A)):\n        if A[i] > A[i+1]:\n            pass\n        else:\n            flag = 0\n    return flag\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # initialising lists\n    if (len(A) > len(B)):\n        maxlen = len(A)\n    else:\n        maxlen = len(B)\n    # initialising flags\n    count = 0\n    flag = 1\n    for i in range(0, maxlen):\n        if (A[i] == B[0]):\n            if(len(B) == 1):\n                return True\n            else:\n                # checking if the list is a sublist of another\n                for j in range(1,len(B)):\n                    if (B[j]!= A[i+j]):\n                        flag = 0\n                        break\n                # resetting the flags\n                if (flag == 1):\n                    return True\n        else:\n            flag = 1\n            \n    return False\n    \ndef is_Sub_List(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # initialising lists\n    if (len(A) > len(B)):\n        maxlen = len(A)\n    else:\n        maxlen = len(B)\n    # initialising flags\n    count = 0\n    flag = 1\n    for i in range(0, maxlen):\n        if (A[i] == B[0]):\n            if(len(B) == 1):\n                return True\n            else:\n                # checking if the list is a sublist of another\n                for j in range(1,len(B)):\n                    if (B[j]!= A[i+j]):\n                        flag = 0\n                        break\n                # resetting the flags\n                if (flag == 1):\n                    return True\n        else:\n            flag = 1\n            \n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return B[0:len(A)]==A\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    B.sort()\n    A.sort()\n    i=0\n    j=0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == 0:\n        return True\n    if len(B) == 0:\n        return False\n    if B[0] == A[0]:\n        return is_Sub_Array(A[1:], B[1:])\n    else:\n        return is_Sub_Array(A, B[1:])\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n:\n        n = n // 10\n    return n\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    temp = n\n    while temp > 1:\n        temp /= 10\n    return temp\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 10\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 100\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 100\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 1000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 1000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 10000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 100000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 100000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 1000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 1000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 10000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 100000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 100000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 1000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 1000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 10000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 100000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 100000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 1000000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 1000000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10000000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 10000000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 100000000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 100000000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 1000000000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 1000000000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10000000000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 10000000000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 1000000000000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 1000000000000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 100000000000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 100000000000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 100000000000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 100000000000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10000000000000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 10000000000000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 100000000000000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 100000000000000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 1000000000000000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 1000000000000000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10000000000000000000000\ndef last_Digit(n): \n    '''\n    Write a python function to find the last digit in a number.\n    '''\n    return n % 10000000000000000000000\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in fac"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    i = 1\n    while i <= n: \n        factorial = factorial * i \n        i = i + 1\n    return factorial%10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 1: \n        return 0 \n    else: \n        return last_Digit_Factorial(n//10) + (n%10)\n    \ndef last_Digit_Power(n,m): \n    '''\n    Write a python function to find the last digit in power of a number.\n    '''\n    if n < 0:\n        return 0\n    else:\n        return last_Digit_Power(n//m,m) + (n%m)\n    \ndef last_Digit_Exponential(n,m): \n    '''\n    Write a python function to find the last digit in exponential of a number.\n    '''\n    if n < 0:\n        return 0\n    else:\n        return last_Digit_Exponential(n//m,m) + (n%m)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(str(math.factorial(n))[-1])\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact*i\n    return fact%10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n\n    else: \n        return last_Digit_Factorial(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_2(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_2(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_3(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_3(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_4(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_4(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_5(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_5(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_6(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_6(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_7(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_7(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_8(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_8(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_9(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_9(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_10(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_10(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_11(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_11(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_12(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_12(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_13(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_13(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_14(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_14(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_15(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_15(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_16(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_16(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_17(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_17(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_18(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_18(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_19(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_19(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_20(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_20(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_21(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_21(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_22(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_22(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_23(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_23(n // 10) + n % 10 \ndef last_Digit_Factorial_Method_24(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 9: \n        return n \n    else: \n        return last_Digit_Factorial_Method_24(n // 1"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    for i in range(1,n+1):\n        if n%i==0:\n            last=i\n    return last\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    f = 1\n    while n > 0:\n        f = f * n % 10\n        n = n // 10\n    return f\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newlist = []\n    for i in range(0,len(list1)):\n        newlist.append(list1[i])\n        newlist.append(list2[i])\n        newlist.append(list3[i])\n    return newlist\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list3 = list1 + list2 + list3\n    return list3\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    list1.sort()\n    for i in range(0, len(list1) - 1):\n        if list1[i] == list1[i+1]:\n            list1.remove(list1[i+1])\n    return list1\n    \ndef find_duplicates(list1):\n    '''\n    Write a function to find duplicates in a list.\n    '''\n    duplicates = []\n    for i in list1:\n        if list1.count(i) > 1:\n            if i not in duplicates:\n                duplicates.append(i)\n    return duplicates\n    \ndef reverse_and_compress(list1):\n    '''\n    Write a function to reverse and compress list1, i.e. to reverse all the elements and to remove all duplicates.\n    '''\n    list1.reverse()\n    remove_duplicates(list1)\n    return list1\n    \ndef find_median(list1):\n    '''\n    Write a function to find the median of a list.\n    '''\n    list1 = sorted(list1)\n    if len(list1) % 2 == 0:\n        return (list1[int(len(list1)/2)] + list1[int(len(list1)/2-1)])/2\n    else:\n        return list1[int(len(list1)/2)]\n    \ndef num_occurences(list1,target):\n    '''\n    Write a function to count how many occurences of target exists in the list1.\n    '''\n    occurences = 0\n    for i in list1:\n        if i == target:\n            occurences += 1\n    return occurences\n    \ndef find_num_occurences(list1,target):\n    '''\n    Write a function to count how many times target occurs in the list1.\n    '''\n    return list1.count(target)\n    \ndef find_missing(list1):\n    '''\n    Write a function to find the missing element in a list.\n    '''\n    return (len(list1) + 1) * (len(list1) + 2) / 2 - sum(list1)\n    \ndef find_duplicates_slow(list1):\n    '''\n    Write a function to find duplicates in a list.\n    '''\n    duplicates = []\n    for i in list1:\n        if list1.count(i) > 1:\n            if i not in duplicates:\n                duplicates.append(i)\n    return duplicates\n    \ndef is_palindrome(string1):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    for i in range(0,len(string1)):\n        if string1[i]!= string1[len(string1)-i-1]:\n            return False\n    return True\n    \ndef is_letter_permutation(string1, string2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    for i in string1:\n        if string1.count(i)!= string2.count(i):\n            return False\n    return True\n    \ndef is_rotation(string1, string2):\n    '''\n    Write a function to check if a string is a rotation of another string.\n    '''\n    if len(string1) == len(string2) and len(string1) > 0:\n        if string1[0] == string2[-1] and string1[0] == string2[0]:\n            return True\n    return False\n    \ndef find_rotation(string1, string2):\n    '''\n    Write a function to find the first element of a string that occurs in string2.\n    '''\n    for i in range(0, len(string1)):\n        if string1[i] == string2[i]:\n            return i\n    return -1\n    \ndef is_substring(string1,string2):\n    '''\n    Write a function to check if string1 is a substring of string2.\n    '''\n    if string1 in string2:\n        return True\n    return False\n    \ndef find_all_rotations(string1):\n    '''\n    Write a function to find all rotations of a string.\n    '''\n    rotations = []\n    for i in range(0,len(string1)):\n        rotations.append(string1[i:] + string1[0:i])\n    return rotations\n    \ndef find_substring(string1,string2):\n    '''\n    Write a function to find all the substrings of string1 which are also substrings of string2.\n    '''\n    substrings = []\n    for i in range(0,len(string1)):\n        for j in range(0,len(string1)):\n            if string1[i:j+1] in string2 and string1[i:j+1] not in substrings:\n                substrings.append(string1[i:j+1])\n    return substrings\n    \ndef find_all_rotations_slow(string1):\n    '''\n    Write a function to find all the rotations of a string.\n    '''\n    rotations = []\n    for i in range(0,len(string1)):\n        rotations.append(string1[i:] + string1[0:i])\n    return rotations\n    \ndef find_all_rotations_in_memory(string1):\n    '''\n    Write a function to find all the rotations of a string, but this time you are limited to only a certain amount of space.\n    '''\n    rotations = []\n    for i in range(0,len(string1)):\n        rotations.append(string1[i:] + string1[0:i])\n    return rotations\n    \ndef is_symmetric(string1):\n    '''\n    Write a function to check whether a string is a symmetrical string.\n    '''\n    if len(string1) % 2 == 0:\n        for i in range(0,int(len(string1)/2)):\n            if string1[i]!= string1[len(string1)-i-1]:\n                return False\n        return True\n    return False\n    \ndef is_symmetric_in_memory(string1):\n    '''\n    Write a function to check whether a string is a symmetrical string, but this time you are limited to only a certain amount of space.\n    '''\n    if len(string1) % 2 == 0:\n        for i in range(0,int(len(string1)/2)):\n            if string1[i]!= string1[len(string1)-i-1]:\n                return False\n        return True\n    return False\n    \ndef all_anagrams(string1):\n    '''\n    Write a function to find all the anagrams of a string.\n    '''\n    anagrams = []\n    for i in range(0,len(string1)):\n        for j in range(0,len(string1)):\n            if is_anagram(string1[i:j+1], string1[j:i+1]) and string1[i:j+1] not in anagrams:\n                anagrams.append(string1[i:j+1])\n    return anagrams\n    \ndef is_anagram(string1, string2):\n    '''\n    Write a function to check whether a string is an anagram of another string.\n    '''\n    if len(string1) == len(string2) and len(string1) > 0:\n        string1 = sorted(string1)\n        string2 = sorted(string2)\n        for i in range(0,len(string1)):\n            if string1[i]!= string2[i]:\n                return False\n        return True\n    return False\n    \ndef is_anagram_in_memory(string1,string2):\n    '''\n    Write a function to check whether a string is an anagram of another string, but this time you are limited to only a certain amount of space.\n    '''\n    if len(strin"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [element for element in zip(list1,list2,list3)]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [i for a in [list1,list2,list3] for i in a]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    n = len(list1)\n    return [list1[i] + list2[i] + list3[i] for i in range(n)]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [a+b+c for a,b,c in zip(list1,list2,list3)]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    outList = []\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('List lengths must be the same to interleave them')\n    for i in range(len(list1)):\n        outList.append(list1[i])\n        outList.append(list2[i])\n        outList.append(list3[i])\n    return outList\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [(item1,item2) for item1 in test_tup1 for item2 in test_tup2 if item1!= item2]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    # First, find the length of the first tuple\n    len1 = len(test_tup1)\n    \n    # Initialize the variable to hold the number of dissimilar elements\n    count = 0\n    \n    # Iterate over the length of the first tuple\n    for i in range(len1):\n        \n        # Check if the element in the first tuple is not equal to the element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            \n            # Increase the count by one\n            count += 1\n    \n    # Return the count\n    return count\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1_arr = []\n    test_tup2_arr = []\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in xrange(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return test_tup1[i], test_tup2[i]\n    return None\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        inter = set(test_tup1).intersection(test_tup2)\n        diff = set(test_tup1).symmetric_difference(test_tup2)\n        return diff, inter\n    else:\n        raise ValueError(\"tuples should have equal number of elements\")\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = test_tup1[0]\n    test_tup2 = test_tup2[0]\n    diff_element = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            diff_element.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            diff_element.append(element)\n    return diff_element\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1[1] == test_tup2[1]:\n        return test_tup1[1]\n    else:\n        return (test_tup1[1], test_tup2[1])\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    dissimilar = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    \n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return \"the two tuples are the same!\"\n    else:\n        return \"the two tuples are not the same!\"\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        if ele1!= ele2:\n            dissimilar.append((ele1, ele2))\n    return dissimilar\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # this function is not quite correct. \n    # use even_ele() to correct that. \n    # You should return a new tuple\n    # \n    # test_tuple = ((3,4,5,6,7,8,9,10),(1,2,3,4,5),(6,7,8,9,10))\n    # \n    # print even_ele(test_tuple, even_ele)\n    # # ((3, 4, 6, 7, 8, 10), (1, 2, 3, 4, 5), (6, 7, 8, 9, 10))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered = []\n    for item in test_tuple:\n        if even_fnc(item):\n            filtered.append(item)\n    return tuple(filtered)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = tuple(filter(even_fnc, test_tuple))\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for index, element in enumerate(test_tuple):\n        if not even_fnc(element):\n            test_tuple = test_tuple[:index] + test_tuple[index+1:]\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        if len(test_tuple)==2:\n            return even_ele(test_tuple[0], even_fnc), even_ele(test_tuple[1], even_fnc)\n        else:\n            return tuple([even_ele(test_tuple[i], even_fnc) for i in range(len(test_tuple))])\n    else:\n        return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    output = []\n    for element in test_tuple:\n        if even_fnc(element):\n            output.append(element)\n    return tuple(output)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n    \nprint even_ele((1,2,3,4,5,6,7), lambda x: x%2==0)"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_list = []\n    for ele in test_tuple:\n        if ele % 2 == 1:\n            odd_list.append(ele)\n    for ele in odd_list:\n        if ele in test_tuple:\n            test_tuple.remove(ele)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    e_lst = []\n    for i in test_tuple:\n        if even_fnc(i):\n            e_lst.append(i)\n    return tuple(e_lst)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa = (b**2)*6+s**2\n    print(sa)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return s*b\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surfaceArea = b*b + (s**2)\n    return surfaceArea\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s*4 + s*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b*s)\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base = b\n    height = s\n    return 2 * (base + height)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s*4 + 2*b*s + 2*b + 4*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #return b*b + b*h + b*h + h*h\n    return 2*(b*b + b*h + h*h)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\n    \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1)==0:\n        print(\"Set is empty\")\n    else:\n        print(\"Set is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\ndef merge_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries\n    '''\n    merge_dict = dict1.update(dict2)\n    return merge_dict\ndef update_dict(dict1):\n    '''\n    Write a function to merge two dictionaries\n    '''\n    if my_dict(dict1):\n        return dict1\n    else:\n        return merge_dict(dict1, {'name':'lalitha'})\n    return merge_dict(dict1, {'name':'lalitha'})\n    return {'name':'lalitha', 'age':31}\n    if my_dict(dict1):\n        return dict1\n    else:\n        return {'name':'lalitha', 'age':31}\ndef build_profile(first, last, **user_info):\n    '''\n    Build a dictionary containing everything we know about a user\n    '''\n    profile = {}\n    profile['first_name'] = first\n    profile['last_name'] = last\n    for key, value in user_info.items():\n        profile[key] = value\n    return profile\ndef function_decorator(func):\n    def wrapper_function(decorator_arg):\n        print 'I am a function decorator'\n        return func(decorator_arg)\n    return wrapper_function\n@function_decorator\ndef function_decorator_2(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_3(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_4(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_5(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_4\n@function_decorator_3\n@function_decorator_2\n@function_decorator_5\ndef function_decorator_6(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_4\n@function_decorator_3\n@function_decorator_2\n@function_decorator_5\ndef function_decorator_7(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_4\n@function_decorator_3\n@function_decorator_2\n@function_decorator_5\ndef function_decorator_8(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_9(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_9\ndef function_decorator_10(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_11(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_11\ndef function_decorator_12(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_13(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_13\ndef function_decorator_14(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_15(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_15\ndef function_decorator_16(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_17(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_17\ndef function_decorator_18(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_19(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_19\ndef function_decorator_20(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_21(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_21\ndef function_decorator_22(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_23(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_23\ndef function_decorator_24(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_25(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_25\ndef function_decorator_26(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_27(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_27\ndef function_decorator_28(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_29(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_29\ndef function_decorator_30(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_31(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_31\ndef function_decorator_32(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_33(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_33\ndef function_decorator_34(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_35(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_35\ndef function_decorator_36(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_37(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_37\ndef function_decorator_38(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_39(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_39\ndef function_decorator_40(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_41(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_41\ndef function_decorator_42(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_43(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_43\ndef function_decorator_44(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_45(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_45\ndef function_decorator_46(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_47(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_47\ndef function_decorator_48(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_49(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_49\ndef function_decorator_50(func):\n    print 'I am a function decorator'\n    return func\ndef function_decorator_51(func):\n    print 'I am a function decorator'\n    return func\n@function_decorator_51\ndef function"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key, value in dict1.items():\n        if value:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print 'Empty dictionary'\n    else:\n        print 'Not empty dictionary'\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    #create a new dictionary\n    new_dict = {}\n    #check if the dictionary is empty\n    if not bool(dict1):\n        print \"Dictionary is empty\"\n    else:\n        print \"Dictionary is not empty\"\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1,1]\n    for i in range(2,num+1):\n        catalan.append(sum(catalan[i-1:i+1]))\n    return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return (2*num-1)*catalan_number(num-1)/num\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan(num,result):\n        if num == 0:\n            return result\n        if num == 1:\n            return result*2\n        else:\n            return result*(2*num-1)/(num+1) + catalan(num-1,result)\n    return catalan(num,1)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 0:\n        return 1\n    elif num < 0:\n        return 0\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    assert num > 0\n    if num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return num * catalan_number(num - 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [0]*(num+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, num+1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[num]\n    \ndef binomial_coefficient(n, k):\n    '''\n    Write a function which returns nCr value.\n    '''\n    binomial_coeff = [0]*(n+1)\n    binomial_coeff[0] = 1\n    binomial_coeff[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            binomial_coeff[i] += binomial_coeff[j] * binomial_coeff[i-j-1]\n    return binomial_coeff[n]//(binomial_coeff[k]*binomial_coeff[n-k])\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    if num == 2:\n        return 1\n    return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = 1\n    for i in xrange(num):\n        catalan = catalan * (2 * i + 1) / (i + 2)\n    return catalan\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    s = re.compile(r'[a-zA-Z]+ly$')\n    s = s.findall(text)\n    # print s[0]\n    return [len(x) for x in s]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'(.*)\\ly$')\n    match = pattern.search(text)\n    if match:\n        return match.group(1) + 'ly'\n    return None\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    string = text.strip()\n    ly_endings = []\n    for i,j in enumerate(string):\n        if j == 'ly':\n            ly_endings.append(i)\n    return ly_endings\ndef find_verb_ending_with_ing(text):\n    '''\n    Write a function to find the first verb ending with ly and its positions in a given string.\n    '''\n    string = text.strip()\n    ly_endings = []\n    for i,j in enumerate(string):\n        if j == 'ly':\n            if string[i-1] == 'n':\n                ly_endings.append(i)\n    return ly_endings\ndef is_int(n):\n    try:\n        int(n)\n        return True\n    except ValueError:\n        return False\ndef get_examples(string, n):\n    '''\n    Find the examples of the given word, given a given ngram length.\n    '''\n    string = string.replace('\\n','').strip()\n    ngrams = []\n    for i in range(len(string) - n + 1):\n        ngrams.append(string[i:i+n])\n    return ngrams\ndef get_pos_tag(pos_tag_dict, pos_tag):\n    return pos_tag_dict[pos_tag]\ndef get_pos_tag_dict():\n    '''\n    Create a dictionary with words as keys and POS tags as values.\n    '''\n    pos_tag_dict = {}\n    pos_tag_dict['ADV'] = 'adverb'\n    pos_tag_dict['VERB'] ='verb'\n    pos_tag_dict['CONJ'] = 'conjunction'\n    pos_tag_dict['ADP'] = 'adjective'\n    pos_tag_dict['DET'] = 'detective'\n    pos_tag_dict['NOUN'] = 'noun'\n    pos_tag_dict['PRT'] = 'particle'\n    pos_tag_dict['NUM'] = 'numeral'\n    pos_tag_dict['X'] = 'other'\n    return pos_tag_dict\ndef extract_pos_tags(pos_tags, pos_tag_dict):\n    '''\n    Extract the POS tags out of the text.\n    '''\n    pos_tags = pos_tags.split(' ')\n    pos_tags = [x for x in pos_tags if x!= '']\n    pos_tags = [pos_tag_dict[x] for x in pos_tags if x in pos_tag_dict]\n    return pos_tags\ndef extract_pos_tags_from_sentence(sentence, pos_tag_dict):\n    '''\n    Extract the POS tags out of the sentence.\n    '''\n    pos_tags = re.findall('(<.*?>)?([\\w]*)', sentence)\n    pos_tags = [x[1] for x in pos_tags]\n    pos_tags = [pos_tag_dict[x] for x in pos_tags if x in pos_tag_dict]\n    return pos_tags\ndef get_new_sentence_text(sentence, pos_tag_dict):\n    '''\n    Create a new sentence with replaced tags.\n    '''\n    sentence = sentence.split(' ')\n    sentence = [x for x in sentence if x!= '']\n    sentence = [pos_tag_dict[x] if x in pos_tag_dict else x for x in sentence]\n    new_sentence =''.join(sentence)\n    return new_sentence\ndef convert_to_lower(sentence):\n    '''\n    Convert a sentence to lower case.\n    '''\n    return sentence.lower()\ndef find_n_grams(sentence, n, lower=True):\n    '''\n    Find the n-grams in the sentence.\n    '''\n    sentence = sentence.split(' ')\n    if lower:\n        sentence = [x.lower() for x in sentence]\n    sentence = ['<s>'] * (n-1) + sentence + ['</s>']\n    sentence =''.join(sentence)\n    n_grams = get_examples(sentence, n)\n    return n_grams\ndef tag_n_grams(sentence, n, lower=True):\n    '''\n    Tag the n-grams in the sentence.\n    '''\n    n_grams = find_n_grams(sentence, n, lower)\n    pos_tags = extract_pos_tags(sentence, get_pos_tag_dict())\n    pos_tags = ['<s>'] * (n-1) + pos_tags + ['</s>']\n    pos_tags =''.join(pos_tags)\n    n_gram_tags = []\n    for i,j in zip(n_grams, pos_tags):\n        n_gram_tags.append(i +'' + j)\n    return n_gram_tags\ndef is_sentence_start(sentence, n_gram, n):\n    '''\n    Check if the n-gram is a sentence start.\n    '''\n    n_gram = n_gram.split(' ')\n    n_gram = n_gram[:n]\n    n_gram =''.join(n_gram)\n    return n_gram == '<s>'\ndef is_sentence_end(sentence, n_gram, n):\n    '''\n    Check if the n-gram is a sentence end.\n    '''\n    n_gram = n_gram.split(' ')\n    n_gram = n_gram[n+1:]\n    n_gram =''.join(n_gram)\n    return n_gram == '</s>'\ndef get_sentence_lengths(sentence):\n    '''\n    Get the lengths of the sentences.\n    '''\n    sentence = sentence.split(' ')\n    sentence = [x for x in sentence if x!= '']\n    return len(sentence)\ndef split_into_sentences(text, n):\n    '''\n    Split the text into sentences.\n    '''\n    sentences = re.split('[\\.\\?!]', text)\n    sentences = [x for x in sentences if x!= '']\n    sentences = [x + '.' for x in sentences]\n    sentences = ['<s>'* (n-1) + sentences[i] +'</s>' for i in range(len(sentences))]\n    return sentences\ndef find_n_grams_with_end_tag(sentence, n, lower=True):\n    '''\n    Find the n-grams with an end tag in the sentence.\n    '''\n    n_grams = find_n_grams(sentence, n, lower)\n    n_gram_tags = tag_n_grams(sentence, n, lower)\n    n_gram_tags = [x.split(' ') for x in n_gram_tags]\n    n_gram_tags = [x[:-1] for x in n_gram_tags]\n    for i,j in zip(n_grams, n_gram_tags):\n        j.insert(0, i)\n    return n_gram_tags\ndef find_n_grams_with_start_tag(sentence, n, lower=True):\n    '''\n    Find the n-grams with a start tag in the sentence.\n    '''\n    n_gram_tags = find_n_grams_with_end_tag(sentence, n, lower)\n    n_gram_tags = [x[1:] for x in n_gram_tags]\n    return n_gram_tags\ndef find_n_grams_with_start_and_end_tag(sentence, n, lower=True):\n    '''\n    Find the n-grams with a start and end tag in the sentence.\n    '''\n    n_gram_tags = find_n_grams_with_end_tag(sentence, n, lower)\n    n_gram_tags = [x[1:-1] for x in n_gram_tags]\n    return n_gram_tags\ndef find_n_grams_with_start_tag_in_sentence(sentence, n, lower=True):\n    '''\n    Find the n-grams with a star"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    m = re.search(r'ly$',text)\n    if m:\n        return m.group()\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+ly')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_verb(text):\n    '''\n    Write a function to find the first verb ending with an 'e' and its positions in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+e')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_consonants(text):\n    '''\n    Write a function to find the first consonant ending with s and its positions in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+s')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_first_char(text):\n    '''\n    Write a function to find the first character in a given string.\n    '''\n    p = re.compile('[a-zA-Z]')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_first_word(text):\n    '''\n    Write a function to find the first word in a given string.\n    '''\n    p = re.compile('[a-zA-Z0-9]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_digit(text):\n    '''\n    Write a function to find the first digit in a given string.\n    '''\n    p = re.compile('[0-9]')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_digit_pos(text):\n    '''\n    Write a function to find the first digit in a given string.\n    '''\n    p = re.compile('[0-9]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_digit_in_string(text):\n    '''\n    Write a function to find the first digit in a given string.\n    '''\n    p = re.compile('[0-9]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_number_in_string(text):\n    '''\n    Write a function to find the first number in a given string.\n    '''\n    p = re.compile('[0-9]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_letter_count(text):\n    '''\n    Write a function to find the count of a letter in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return len(result[0])\n    else:\n        return None\ndef find_number_count(text):\n    '''\n    Write a function to find the count of a number in a given string.\n    '''\n    p = re.compile('[0-9]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return len(result[0])\n    else:\n        return None\ndef find_word_count(text):\n    '''\n    Write a function to find the count of a word in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return len(result[0])\n    else:\n        return None\ndef find_sentence_count(text):\n    '''\n    Write a function to find the count of a word in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return len(result)\n    else:\n        return None\ndef find_all(text):\n    '''\n    Write a function to find all the words in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result\n    else:\n        return None\ndef find_all_words_in_string(text):\n    '''\n    Write a function to find all the words in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result\n    else:\n        return None\ndef find_sentences_in_string(text):\n    '''\n    Write a function to find all the words in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result\n    else:\n        return None\ndef find_first_letter(text):\n    '''\n    Write a function to find the first letter in a given string.\n    '''\n    p = re.compile('[a-zA-Z]')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_first_letter_position(text):\n    '''\n    Write a function to find the first letter in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_last_letter(text):\n    '''\n    Write a function to find the last letter in a given string.\n    '''\n    p = re.compile('[a-zA-Z]')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[-1]\n    else:\n        return None\ndef find_last_letter_position(text):\n    '''\n    Write a function to find the last letter in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[-1]\n    else:\n        return None\ndef find_first_word_pos(text):\n    '''\n    Write a function to find the first word in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_first_word(text):\n    '''\n    Write a function to find the first word in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_first_letter_in_string(text):\n    '''\n    Write a function to find the first letter in a given string.\n    '''\n    p = re.compile('[a-zA-Z]+')\n    result = p.findall(text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return None\ndef find_first_letter_positio"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # SOURCE: https://stackoverflow.com/questions/2024069/find-the-first-occurence-of-a-regex-in-python-re-module\n    reg_ex = re.compile(r'.*ly$')\n    res = [match.start() for match in re.finditer(reg_ex, text)]\n    #print(res)\n    return res\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pat = re.compile(r\"(ly)$\",re.IGNORECASE)\n    return pat.search(text)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # text = \"An apple a day keeps the doctor away\"\n    positions = []\n    for word in text.split():\n        if word.endswith('ly'):\n            positions.append(text.index(word))\n    return positions\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    match = re.search(r'(.*?)ly$',text,re.IGNORECASE)\n    if match:\n        return match.group(1),match.start(1)\n    return None,None\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if(len(text)>0):\n        if(text[-2:]=='ly'):\n            print(text,end=' ')\n    \n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return sorted(items,key=lambda x:x[1])[-n:]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for i in items:\n        heapq.heappush(heap,(i[1],i[0]))\n    i=0\n    while i<n:\n        val = heapq.heappop(heap)\n        i+=1\n    print val[1]\n    return val[1]\ndef insert_sort(arr):\n    for i in range(1,len(arr)):\n        j=i\n        while j>0:\n            if arr[j] < arr[j-1]:\n                arr[j],arr[j-1] = arr[j-1],arr[j]\n            j-=1\n    return arr\ndef insert_sort_improve(arr):\n    for i in range(1,len(arr)):\n        val = arr[i]\n        j = i - 1\n        while j >=0:\n            if val < arr[j]:\n                arr[j+1] = arr[j]\n                arr[j] = val\n            j-=1\n    return arr\ndef insertion_sort(arr):\n    for i in range(1,len(arr)):\n        val = arr[i]\n        j = i - 1\n        while j >=0:\n            if val < arr[j]:\n                arr[j+1] = arr[j]\n                arr[j] = val\n            j-=1\n    return arr\ndef insertion_sort_improve(arr):\n    for i in range(1,len(arr)):\n        val = arr[i]\n        j = i - 1\n        while j >=0:\n            if val < arr[j]:\n                arr[j+1] = arr[j]\n                arr[j] = val\n            j-=1\n    return arr\ndef bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(1,len(arr)):\n            if arr[j] < arr[j-1]:\n                arr[j],arr[j-1] = arr[j-1],arr[j]\n    return arr\ndef bubble_sort_improve(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i,len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i],arr[min_index] = arr[min_index],arr[i]\n    return arr\ndef selection_sort_improve(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i,len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i],arr[min_index] = arr[min_index],arr[i]\n    return arr\ndef shell_sort(arr):\n    interval = len(arr)/2\n    while interval>0:\n        for i in range(interval,len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= interval and arr[j-interval] > temp:\n                arr[j] = arr[j-interval]\n                j -= interval\n            arr[j] = temp\n        interval = interval/2\n    return arr\ndef shell_sort_improve(arr):\n    interval = len(arr)/2\n    while interval>0:\n        for i in range(interval,len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= interval and arr[j-interval] > temp:\n                arr[j] = arr[j-interval]\n                j -= interval\n            arr[j] = temp\n        interval = interval/2\n    return arr\ndef merge_sort(arr):\n    if len(arr) == 1:\n        return arr\n    mid = len(arr)/2\n    left = arr[:mid]\n    right = arr[mid:]\n    return merge(merge_sort(left),merge_sort(right))\ndef merge(left,right):\n    i = 0\n    j = 0\n    arr = []\n    while i<len(left) and j<len(right):\n        if left[i] < right[j]:\n            arr.append(left[i])\n            i += 1\n        else:\n            arr.append(right[j])\n            j += 1\n    while i < len(left):\n        arr.append(left[i])\n        i+=1\n    while j<len(right):\n        arr.append(right[j])\n        j+=1\n    return arr\ndef merge_sort_improve(arr):\n    if len(arr) == 1:\n        return arr\n    mid = len(arr)/2\n    left = arr[:mid]\n    right = arr[mid:]\n    return merge(merge_sort_improve(left),merge_sort_improve(right))\ndef merge_sort_improve2(arr):\n    if len(arr) == 1:\n        return arr\n    mid = len(arr)/2\n    left = arr[:mid]\n    right = arr[mid:]\n    return merge2(merge_sort_improve2(left),merge_sort_improve2(right))\ndef merge2(left,right):\n    i = 0\n    j = 0\n    arr = []\n    while i<len(left) and j<len(right):\n        if left[i] < right[j]:\n            arr.append(left[i])\n            i += 1\n        else:\n            arr.append(right[j])\n            j += 1\n    while i < len(left):\n        arr.append(left[i])\n        i+=1\n    while j<len(right):\n        arr.append(right[j])\n        j+=1\n    return arr\ndef quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in arr[1:]:\n        if i < pivot:\n            left.append(i)\n        else:\n            right.append(i)\n    return quick_sort(left) + [pivot] + quick_sort(right)\ndef quick_sort_improve(arr):\n    if len(arr) < 2:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in arr[1:]:\n        if i < pivot:\n            left.append(i)\n        else:\n            right.append(i)\n    return quick_sort_improve(left) + [pivot] + quick_sort_improve(right)\ndef quick_sort_improve2(arr):\n    if len(arr) < 2:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in arr[1:]:\n        if i < pivot:\n            left.append(i)\n        else:\n            right.append(i)\n    left = quick_sort_improve2(left)\n    right = quick_sort_improve2(right)\n    left.append(pivot)\n    left.extend(right)\n    return left\ndef quick_sort_improve3(arr):\n    if len(arr) < 2:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in arr[1:]:\n        if i < pivot:\n            left.append(i)\n        else:\n            right.append(i)\n    left = quick_sort_improve3(left)\n    right = quick_sort_improve3(right)\n    left.append(pivot)\n    return left + [pivot] + right\ndef quick_sort_improve4(arr):\n    if len(arr) < 2:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in arr[1:]:\n        if i < pivot:\n            left.append(i)\n        else:\n            right.append(i)\n    left = quick"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items) == 0:\n        return []\n    #get first item\n    max_val = items[0]\n    max_list = []\n    heapq.heapify(max_list)\n    for item in items:\n        if item > max_val:\n            heapq.heappush(max_list,item)\n            if len(max_list) > n:\n                heapq.heappop(max_list)\n            max_val = max_list[0]\n    return max_list\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    n=n\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(item[1],item[0]))\n    out = []\n    while n > 0:\n        out.append(heapq.heappop(heap)[1])\n        n-=1\n    return out\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    n_most_expensive=[]\n    if items==[]:\n        return n_most_expensive\n    else:\n        heapq.heappush(n_most_expensive,items[0])\n        for i in range(1,len(items)):\n            if len(n_most_expensive)<n:\n                heapq.heappush(n_most_expensive,items[i])\n            else:\n                if items[i][1]>n_most_expensive[0][1]:\n                    heapq.heappop(n_most_expensive)\n                    heapq.heappush(n_most_expensive,items[i])\n        return n_most_expensive\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for i in items:\n        heapq.heappush(heap,-1*i)\n    return heapq.nlargest(n,heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n    return heapq.nlargest(n,heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda i: i[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # items.sort()\n    # items = items[::-1]\n    # print items\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(item[1],item[0]))\n    ans = []\n    for i in range(n):\n        ans.append(heapq.heappop(heap)[1])\n    return ans\n    # for i in range(n):\n    #     temp = heapq.heappop(heap)\n    #     ans.append(temp[1])\n    # return ans\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n <= 0 or n > len(items):\n        return None\n    res = heapq.nlargest(n, items)\n    return res\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    n = n-1\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # return l[n:] + l[:n]\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.append(l.pop(0))\n    for i in range(0, n):\n        l.append(l.pop(0))\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:None:-1]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    newarr=[]\n    for x in range(0,len(l),n):\n        newarr.append(l[x])\n    newarr.extend(l[(len(l)//n*n):])\n    return newarr\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    n = n-1\n    size = len(l)//n\n    arr = []\n    for i in range(size):\n        arr.append(l[i*n:i*n+n])\n    arr.append(l[size*n:])\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        n = n % len(l)\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:].reverse()\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = []\n    for each in listx:\n        tuple_list.append(tuple(each))\n    return tuple_list\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(\"The result is:\",tuple(listx))\n    return\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    return set(listx)\ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    return dict(listx)\ndef list_dict_tuple(listx):\n    '''\n    Write a function to convert a list of dictionaries to a tuple.\n    '''\n    return tuple(dict(listx))\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    s = sorted(nums)\n    return s[-1] - s[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = -1\n    for i in range(len(nums)):\n        if diff < 0:\n            diff = nums[i] - nums[i]\n        elif diff > nums[i] - nums[i]:\n            diff = nums[i] - nums[i]\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = -1\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] > nums[j]:\n                diff = nums[i] - nums[j]\n    return diff\n    \n    \ndef gcd(x, y):\n    '''\n    Write a python function to find the GCD of two numbers.\n    '''\n    while(y):\n        x, y = y, x % y\n    return x\n    \ndef find_gcd_rec(x, y):\n    '''\n    Write a python function to find the GCD of two numbers.\n    '''\n    if (y == 0):\n        return x\n    else:\n        return find_gcd_rec(y, x % y)\n    \ndef find_gcd_iter(x, y):\n    '''\n    Write a python function to find the GCD of two numbers.\n    '''\n    while(y):\n        x, y = y, x % y\n    return x\n    \ndef lcm(x, y):\n    '''\n    Write a python function to find the LCM of two numbers.\n    '''\n    return (x * y) / find_gcd_rec(x, y)\n    \ndef find_lcm_rec(x, y):\n    '''\n    Write a python function to find the LCM of two numbers.\n    '''\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller + 1):\n        if ((x % i == 0) and (y % i == 0)):\n            lcm = i\n    return lcm\n    \ndef find_lcm_iter(x, y):\n    '''\n    Write a python function to find the LCM of two numbers.\n    '''\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    while(True):\n        if ((x % smaller == 0) and (y % smaller == 0)):\n            lcm = smaller\n            break\n        else:\n            smaller += 1\n    return lcm\n    \ndef is_leap_year(y):\n    '''\n    Write a python function to check whether a given year is a leap year.\n    '''\n    if y % 4 == 0:\n        if y % 100 == 0:\n            if y % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef check_leap_year(y):\n    '''\n    Write a python function to check whether a given year is a leap year.\n    '''\n    if y % 4 == 0:\n        if y % 100 == 0:\n            if y % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef is_leap_year_rec(y):\n    '''\n    Write a python function to check whether a given year is a leap year.\n    '''\n    if y % 4 == 0:\n        if y % 100 == 0:\n            if y % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef check_leap_year_rec(y):\n    '''\n    Write a python function to check whether a given year is a leap year.\n    '''\n    if y % 4 == 0:\n        if y % 100 == 0:\n            if y % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef is_leap_year_iter(y):\n    '''\n    Write a python function to check whether a given year is a leap year.\n    '''\n    if y % 4 == 0:\n        if y % 100 == 0:\n            if y % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef check_leap_year_iter(y):\n    '''\n    Write a python function to check whether a given year is a leap year.\n    '''\n    if y % 4 == 0:\n        if y % 100 == 0:\n            if y % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef fib_rec(n):\n    '''\n    Write a python function to compute the nth Fibonacci number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib_rec(n - 1) + fib_rec(n - 2)\n    \ndef fib_iter(n):\n    '''\n    Write a python function to compute the nth Fibonacci number.\n    '''\n    a = 0\n    b = 1\n    if n == 1:\n        return a\n    elif n == 2:\n        return b\n    else:\n        for i in range(n - 2):\n            c = a + b\n            a = b\n            b = c\n        return b\n    \ndef fib_memo(n, cache):\n    '''\n    Write a python function to compute the nth Fibonacci number using memoization.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        if n in cache:\n            return cache[n]\n        else:\n            result = fib_memo(n - 1, cache) + fib_memo(n - 2, cache)\n            cache[n] = result\n            return result\n            \ndef fib_tab(n):\n    '''\n    Write a python function to compute the nth Fibonacci number using tabulation.\n    '''\n    tab = [0] * (n + 1)\n    tab[1] = 1\n    for i in range(2, n + 1):\n        tab[i] = tab[i - 1] + tab[i - 2]\n    return tab[n]\n    \ndef fib_tab_rec(n):\n    '''\n    Write a python function to compute the nth Fibonacci number using tabulation.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib_tab_rec(n - 1) + fib_tab_rec(n - 2)\n    \ndef fib_tab_memo(n, cache):\n    '''\n    Write a python function to compute the nth Fibonacci number using tabulation.\n    '''\n    if n == 0 or n == 1:\n        return n\n    elif n in cache:\n        return cache[n]\n    else:\n        result = fib_tab_memo(n - 1, cache) + fib_tab_memo(n - 2, cache)\n        cache[n] = result\n        return result\n    \ndef fib_tab_memo_opt(n):\n    '''\n    Write a python function to compute the nth Fibonacci number using tabulation.\n    '''\n    tab = [0] * (n + 1)\n    tab[1] = 1\n    for i in range(2, n + 1):\n        if i < 4:\n            tab[i] = 1\n        else:\n            tab[i] = tab[i - 1] + tab[i - 2]\n    return tab[n]\n    \ndef is_palindrome(word):\n    '''\n    Write a python function to check whether a given word is a palindrome.\n    '''\n    if word == word[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_rec(word):\n    '''\n    Write a python function to check whether a given word is a palindrome.\n    '''\n    if len(word) == 0:\n        return True\n    elif word[0]!= word[-1]:\n        return False\n    else:\n        return is_palindrome_rec(word[1:-1])\n    \ndef is_palindrome_iter(word):\n    '''\n    Write a python function to check whether a given word is a palindrome.\n    '''\n    for "
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = -1\n    for i in nums:\n        if i > diff:\n            diff = i\n    for i in nums:\n        if i < diff:\n            diff = i\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # return max(nums) - min(nums)\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # return [num ** 2 for num in range(a, b + 1) if num ** 2 in range(a, b + 1)]\n    ans = []\n    for num in range(a, b + 1):\n        sq = num ** 0.5\n        if sq == int(sq):\n            ans.append(num ** 2)\n    return ans\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for x in range(a, b+1):\n        if math.sqrt(x) % 1 == 0:\n            squares.append(x)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a >= b:\n        return []\n    else:\n        perfect_squares = []\n        for i in range(a, b):\n            if i ** 0.5 == int(i ** 0.5):\n                perfect_squares.append(i)\n        return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b + 1):\n        if i * i <= b:\n            result.append(i * i)\n        else:\n            break\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sqr_lst = []\n    for i in range(a, b + 1):\n        if i * i <= b:\n            sqr_lst.append(i * i)\n        else:\n            break\n    return sqr_lst\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a, b = min(a, b), max(a, b)\n    return [x*x for x in xrange(a, b+1) if not x*x > b]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return [a]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for x in range(a, b+1):\n        if x ** 0.5 == int(x ** 0.5):\n            result.append(x ** 2)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    print(a**2, b**2)\n    return sum(a**2 for a in range(max(1, int(math.sqrt(a))), int(math.sqrt(b))+1) if a**2 > b**2)\n    \ndef perfect_squares_2(a, b):\n    '''\n    Find the sum of all the perfect square numbers less than or equal to the square root of b.\n    '''\n    return sum(i**2 for i in range(max(1, int(math.sqrt(b))), int(math.sqrt(b))+1) if i**2 <= b)\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for n in xrange(a, b+1):\n        if n*n >= a:\n            squares.append(n)\n    return squares\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    real_num = x*cmath.cos(y)\n    imag_num = x*cmath.sin(y)\n    return real_num, imag_num\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.sqrt(x**2+y**2)\n    angle=cmath.atan(y/x)\n    return (r,angle)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = x\n    r = y\n    # print(theta,r)\n    x = r * cos(theta)\n    y = r * sin(theta)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import cmath\n    x = complex(x)\n    y = complex(y)\n    #get angle\n    angle = cmath.phase(y)\n    #get magnitude\n    mag = abs(y)\n    if mag < 1e-6:\n        mag = 1e-6\n    #get real and imaginary components\n    xreal = x.real/mag\n    ximag = x.imag/mag\n    yreal = y.real/mag\n    yimag = y.imag/mag\n    #compute new coordinates\n    return (xreal, yreal, angle)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.atan2(y,x)\n    return r, theta\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x*x + y*y\n    return r,math.atan2(y,x)\n    \ndef cart_rect(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = r*math.cos(theta)\n    y = r*math.sin(theta)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.atan(y/x)\n    return (r,theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = cmath.polar(complex(x,y))\n    x1 = r*math.cos(theta)\n    y1 = r*math.sin(theta)\n    return x1,y1\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x == 0 and y == 0:\n        return [x,y]\n    elif x == 0:\n        return [x,0]\n    elif y == 0:\n        return [0,y]\n    elif x > 0 and y > 0:\n        return [x,y]\n    elif x < 0 and y > 0:\n        return [x,y]\n    elif x < 0 and y < 0:\n        return [x,-y]\n    elif x > 0 and y < 0:\n        return [x,-y]\n    else:\n        return [0,0]\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = abs(x)\n    y = abs(y)\n    if x>y:\n        a = x\n        b = y\n    else:\n        a = y\n        b = x\n    angle = cmath.phase(complex(x,y))\n    if x<0 and y<0:\n        angle = cmath.phase(complex(y,x))\n    if angle<0:\n        angle = 360 + angle\n    if a<b:\n        angle = 180 - angle\n    if angle>90 and a>b:\n        angle = 180 - angle\n    angle = int(angle)\n    angle = (angle/90)*180\n    #angle = cmath.rect(x,y)\n    #angle = cmath.degrees(angle)\n    #angle = int(angle)\n    #print(angle)\n    return [a,b,angle]\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0] = newList[-1]\n    newList[-1] = newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    x = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = x\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    elif len(newList) == 2:\n        return [newList[1], newList[0]]\n    else:\n        newList.append(newList.pop(0))\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return [newList[-1]] + newList[:-1]\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int((factorial(n)) / (factorial(k) * factorial(n - k)))\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k): \n        res = res * (n - i)\n        res = res // (i + 1)\n    return res \n    \ndef catalan(n): \n    '''\n    Write a python function to find the Catalan numbers in a list.\n    '''\n    catalan_numbers = [1]\n    if n == 0:\n        return catalan_numbers[0]\n    else:\n        for i in range(n):\n            catalan_numbers.append(binomial_Coeff(n, i) * catalan_numbers[i] * catalan_numbers[n - i - 1])\n        return catalan_numbers\n    \ndef decimalToOctal(n): \n    '''\n    Write a python function to convert decimal numbers to octal numbers.\n    '''\n    octal_num = []\n    if n == 0:\n        return 0\n    while n:\n        octal_num.append(n % 8)\n        n /= 8\n    return octal_num[::-1]\n    \ndef factorial(n): \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    factorial = 1\n    if n == 0 or n == 1:\n        return 1\n    else:\n        for i in range(2, n + 1):\n            factorial *= i\n    return factorial\n    \ndef fibonacci(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    if k > n:\n        return 0\n    elif k==0:\n        return 1\n    else:\n        for i in range(1,k+1):\n            res = res * (n-i+1)//i\n        return res\n    \ndef binomial_coefficient(n,k):\n    '''\n    Write a python function to find the binomial coefficient.\n    '''\n    res = 1\n    if k > n:\n        return 0\n    elif k==0:\n        return 1\n    else:\n        for i in range(1,k+1):\n            res = res * (n-i+1)//i\n        return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    p = 1\n    for i in range(1, k+1):\n        p = p * (n - i + 1) // i\n    return p\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [0 for i in range(k+1)] \n    C[0] = 1 \n    for i in range(1, n+1): \n        j = min(i, k) \n        while j>=1: \n            C[j] += C[j-1] \n            j -= 1\n    return C[k] \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff = 1\n    for i in range(1,k):\n        binomial_coeff = binomial_coeff * (n - i + 1) // i\n    return binomial_coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    temp=1\n    for i in range(k):\n        temp=(temp*(n-i))//(i+1)\n    return temp\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in xrange(k+1)] for x in xrange(n+1)] \n    for i in xrange(n+1): \n        for j in xrange(min(i,k)+1): \n            if j == 0 or j == i: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k] \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k):\n        res = res * (n - i)\n        res = res / (i + 1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 1\n    for i in range(min(k, n-k)):\n        c = c * (n - i) // (i + 1)\n    return c\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0*',r'',ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    for i in range(4):\n        if ip[i]=='0':\n            ip=ip[1:]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_addr = int(ip)\n    return int(ip_addr & 0xFFFF)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('[0-9]*', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not isinstance(ip, str):\n        return 0\n    elif ip == \"\":\n        return 0\n    elif ip == \"0\":\n        return 0\n    elif ip == \"255\":\n        return 0\n    elif ip == \"0.0.0.0\":\n        return 0\n    elif ip == \"255.255.255.255\":\n        return 0\n    elif ip == \"0.0.0.0/0\":\n        return 0\n    elif ip == \"0.0.0.0/24\":\n        return 0\n    elif ip == \"0.0.0.0/8\":\n        return 0\n    elif ip == \"0.0.0.0/16\":\n        return 0\n    elif ip == \"0.0.0.0/17\":\n        return 0\n    elif ip == \"0.0.0.0/18\":\n        return 0\n    elif ip == \"0.0.0.0/19\":\n        return 0\n    elif ip == \"0.0.0.0/20\":\n        return 0\n    elif ip == \"0.0.0.0/21\":\n        return 0\n    elif ip == \"0.0.0.0/22\":\n        return 0\n    elif ip == \"0.0.0.0/23\":\n        return 0\n    elif ip == \"0.0.0.0/24\":\n        return 0\n    elif ip == \"0.0.0.0/25\":\n        return 0\n    elif ip == \"0.0.0.0/26\":\n        return 0\n    elif ip == \"0.0.0.0/27\":\n        return 0\n    elif ip == \"0.0.0.0/28\":\n        return 0\n    elif ip == \"0.0.0.0/29\":\n        return 0\n    elif ip == \"0.0.0.0/30\":\n        return 0\n    elif ip == \"0.0.0.0/31\":\n        return 0\n    elif ip == \"0.0.0.0/32\":\n        return 0\n    elif ip == \"0.0.0.0/33\":\n        return 0\n    elif ip == \"0.0.0.0/34\":\n        return 0\n    elif ip == \"0.0.0.0/35\":\n        return 0\n    elif ip == \"0.0.0.0/36\":\n        return 0\n    elif ip == \"0.0.0.0/37\":\n        return 0\n    elif ip == \"0.0.0.0/38\":\n        return 0\n    elif ip == \"0.0.0.0/39\":\n        return 0\n    elif ip == \"0.0.0.0/40\":\n        return 0\n    elif ip == \"0.0.0.0/41\":\n        return 0\n    elif ip == \"0.0.0.0/42\":\n        return 0\n    elif ip == \"0.0.0.0/43\":\n        return 0\n    elif ip == \"0.0.0.0/44\":\n        return 0\n    elif ip == \"0.0.0.0/45\":\n        return 0\n    elif ip == \"0.0.0.0/46\":\n        return 0\n    elif ip == \"0.0.0.0/47\":\n        return 0\n    elif ip == \"0.0.0.0/48\":\n        return 0\n    elif ip == \"0.0.0.0/49\":\n        return 0\n    elif ip == \"0.0.0.0/50\":\n        return 0\n    elif ip == \"0.0.0.0/51\":\n        return 0\n    elif ip == \"0.0.0.0/52\":\n        return 0\n    elif ip == \"0.0.0.0/53\":\n        return 0\n    elif ip == \"0.0.0.0/54\":\n        return 0\n    elif ip == \"0.0.0.0/55\":\n        return 0\n    elif ip == \"0.0.0.0/56\":\n        return 0\n    elif ip == \"0.0.0.0/57\":\n        return 0\n    elif ip == \"0.0.0.0/58\":\n        return 0\n    elif ip == \"0.0.0.0/59\":\n        return 0\n    elif ip == \"0.0.0.0/60\":\n        return 0\n    elif ip == \"0.0.0.0/61\":\n        return 0\n    elif ip == \"0.0.0.0/62\":\n        return 0\n    elif ip == \"0.0.0.0/63\":\n        return 0\n    elif ip == \"0.0.0.0/64\":\n        return 0\n    elif ip == \"0.0.0.0/65\":\n        return 0\n    elif ip == \"0.0.0.0/66\":\n        return 0\n    elif ip == \"0.0.0.0/67\":\n        return 0\n    elif ip == \"0.0.0.0/68\":\n        return 0\n    elif ip == \"0.0.0.0/69\":\n        return 0\n    elif ip == \"0.0.0.0/70\":\n        return 0\n    elif ip == \"0.0.0.0/71\":\n        return 0\n    elif ip == \"0.0.0.0/72\":\n        return 0\n    elif ip == \"0.0.0.0/73\":\n        return 0\n    elif ip == \"0.0.0.0/74\":\n        return 0\n    elif ip == \"0.0.0.0/75\":\n        return 0\n    elif ip == \"0.0.0.0/76\":\n        return 0\n    elif ip == \"0.0.0.0/77\":\n        return 0\n    elif ip == \"0.0.0.0/78\":\n        return 0\n    elif ip == \"0.0.0.0/79\":\n        return 0\n    elif ip == \"0.0.0.0/80\":\n        return 0\n    elif ip == \"0.0.0.0/81\":\n        return 0\n    elif ip == \"0.0.0.0/82\":\n        return 0\n    elif ip == \"0.0.0.0/83\":\n        return 0\n    elif ip == \"0.0.0.0/84\":\n        return 0\n    elif ip == \"0.0.0.0/85\":\n        return 0\n    elif ip == \"0.0.0.0/86\":\n        return 0\n    elif ip == \"0.0.0.0/87\":\n        return 0\n    elif ip == \"0.0.0.0/88\":\n        return 0\n    elif ip == \"0.0.0.0/89\":\n        return 0\n    elif ip == \"0.0.0.0/90\":\n        return 0\n    elif ip == \"0.0.0.0/91\":\n        return 0\n    elif ip == \"0.0.0.0/92\":\n        return 0\n    elif ip == \"0.0.0.0/93\":\n        return 0\n    elif ip == \"0.0.0.0/94\":\n        return 0\n    elif ip == \"0.0.0.0/95\":\n        return 0\n    elif ip == \"0.0.0.0/96\":\n        return 0\n    elif ip == \"0.0.0.0/97\":\n        return 0\n    elif ip == \"0.0.0.0/98\":\n        return 0\n    elif ip == \"0.0.0.0/99\":\n        return 0\n    elif ip == \"0.0.0.0/100\":\n        return 0\n    elif ip == \"0.0.0.0/101\":\n        return 0\n    elif ip == \"0.0.0.0/102\":\n        return 0\n    elif ip == \"0.0.0.0/103\":\n        return 0\n    elif ip == \"0.0"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.startswith('0.'):\n        ip = ip.replace('0.','',1)\n        return removezero_ip(ip)\n    else:\n        return ip\ndef removezero_netmask(netmask):\n    '''\n    Write a function to remove leading zeroes from a netmask.\n    '''\n    if netmask.startswith('0.'):\n        netmask = netmask.replace('0.','',1)\n        return removezero_netmask(netmask)\n    else:\n        return netmask\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.startswith('0.'):\n        ip = ip.replace('0.','',1)\n        return removezero_ip(ip)\n    else:\n        return ip\ndef removezero_netmask(netmask):\n    '''\n    Write a function to remove leading zeroes from a netmask.\n    '''\n    if netmask.startswith('0.'):\n        netmask = netmask.replace('0.','',1)\n        return removezero_netmask(netmask)\n    else:\n        return netmask\ndef check_ip(ip, mask):\n    '''\n    Check if the IP and netmask passed to it are valid.\n    '''\n    ip_list = ip.split('.')\n    mask_list = mask.split('.')\n    ip_list = [int(ip_list[0]), int(ip_list[1]), int(ip_list[2]), int(ip_list[3])]\n    mask_list = [int(mask_list[0]), int(mask_list[1]), int(mask_list[2]), int(mask_list[3])]\n    for item in ip_list:\n        if item > 255:\n            return False\n    for item in mask_list:\n        if item > 255:\n            return False\n    return True\ndef ip_net_mask(ip, mask):\n    '''\n    Write a function to check if a network address is valid.\n    '''\n    if not check_ip(ip, mask):\n        return False\n    ip_list = ip.split('.')\n    mask_list = mask.split('.')\n    ip_list = [int(ip_list[0]), int(ip_list[1]), int(ip_list[2]), int(ip_list[3])]\n    mask_list = [int(mask_list[0]), int(mask_list[1]), int(mask_list[2]), int(mask_list[3])]\n    ip_list = [ip_list[0] & mask_list[0], ip_list[1] & mask_list[1], ip_list[2] & mask_list[2], ip_list[3] & mask_list[3]]\n    return '.'.join([str(item) for item in ip_list])\ndef ip_net_mask_wildcard(ip, mask):\n    '''\n    Write a function to check if a network address is valid.\n    '''\n    if not check_ip(ip, mask):\n        return False\n    ip_list = ip.split('.')\n    mask_list = mask.split('.')\n    ip_list = [int(ip_list[0]), int(ip_list[1]), int(ip_list[2]), int(ip_list[3])]\n    mask_list = [int(mask_list[0]), int(mask_list[1]), int(mask_list[2]), int(mask_list[3])]\n    ip_list = [ip_list[0] & mask_list[0], ip_list[1] & mask_list[1], ip_list[2] & mask_list[2], ip_list[3] & mask_list[3]]\n    mask_wildcard = ['0', '0', '0', '0']\n    for item in ip_list:\n        if item > 255:\n            mask_wildcard[ip_list.index(item)] = '255'\n        else:\n            mask_wildcard[ip_list.index(item)] = str(item)\n    return '.'.join([mask_wildcard[0], mask_wildcard[1], mask_wildcard[2], mask_wildcard[3]])\ndef ip_wildcard(ip, mask):\n    '''\n    Write a function to check if a network address is valid.\n    '''\n    if not check_ip(ip, mask):\n        return False\n    ip_list = ip.split('.')\n    mask_list = mask.split('.')\n    ip_list = [int(ip_list[0]), int(ip_list[1]), int(ip_list[2]), int(ip_list[3])]\n    mask_list = [int(mask_list[0]), int(mask_list[1]), int(mask_list[2]), int(mask_list[3])]\n    ip_wildcard = ['0', '0', '0', '0']\n    for item in ip_list:\n        if item > 255:\n            ip_wildcard[ip_list.index(item)] = '255'\n        else:\n            ip_wildcard[ip_list.index(item)] = str(item)\n    for item in mask_list:\n        if item > 255:\n            ip_wildcard[mask_list.index(item)] = '255'\n        else:\n            ip_wildcard[mask_list.index(item)] = str(item)\n    return '.'.join([ip_wildcard[0], ip_wildcard[1], ip_wildcard[2], ip_wildcard[3]])\ndef convert_to_ip(octets):\n    '''\n    Write a function to convert a binary number to an ip address.\n    '''\n    octets = octets.split('.')\n    ip_list = [str(int(octets[0],2)), str(int(octets[1],2)), str(int(octets[2],2)), str(int(octets[3],2))]\n    return '.'.join(ip_list)\ndef convert_to_bin(ip):\n    '''\n    Write a function to convert an ip address to a binary number.\n    '''\n    octets = ip.split('.')\n    octets = [str(int(octets[0])), str(int(octets[1])), str(int(octets[2])), str(int(octets[3]))]\n    binary = [bin(int(octets[0])), bin(int(octets[1])), bin(int(octets[2])), bin(int(octets[3]))]\n    return ''.join(binary)\ndef convert_to_bin_wildcard(ip):\n    '''\n    Write a function to convert an ip address to a binary number.\n    '''\n    octets = ip.split('.')\n    octets = [str(int(octets[0])), str(int(octets[1])), str(int(octets[2])), str(int(octets[3]))]\n    binary = [bin(int(octets[0])), bin(int(octets[1])), bin(int(octets[2])), bin(int(octets[3]))]\n    for i in range(4):\n        binary[i] = binary[i][2:]\n        if len(binary[i]) < 8:\n            for j in range(8 - len(binary[i])):\n                binary[i] = '0' + binary[i]\n    return ''.join(binary)\ndef convert_to_netmask(binary):\n    '''\n    Write a function to convert a binary number to a netmask.\n    '''\n    binary = binary.split('.')\n    binary = [bin(int(binary[0])), bin(int(binary[1])), bin(int(binary[2])), bin(int(binary[3]))]\n    for i in range(4):\n        binary[i] = binary[i][2:]\n        if len(binary[i]) < 8:\n            for j in range(8 - len(binary[i])):\n                binary[i] = '0' + binary[i]\n    return '.'.join(binary)\ndef convert_to_wildcard(binary):\n    '''\n    Write a functio"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    if ':' in ip:\n        ip_list = ip.split(':')\n    else:\n        ip_list = ip.split('.')\n    for i, val in enumerate(ip_list):\n        ip_list[i] = val.lstrip('0')\n        if not ip_list[i]:\n            ip_list[i] = '0'\n    if ':' in ip:\n        ip = ':'.join(ip_list)\n    else:\n        ip = '.'.join(ip_list)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 1:\n        return ip\n    elif len(ip) == 2:\n        if re.match('^0+', ip) == None:\n            return ip\n    elif len(ip) == 3:\n        if re.match('^0+', ip) == None:\n            return ip\n    elif len(ip) == 4:\n        if re.match('^0+', ip) == None:\n            return ip\n    elif len(ip) == 5:\n        if re.match('^0+', ip) == None:\n            return ip\n    elif len(ip) == 6:\n        if re.match('^0+', ip) == None:\n            return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 4:\n        if int(ip[0])!= 0:\n            return ip\n        elif int(ip[1])!= 0:\n            return ip[1:]\n        elif int(ip[2])!= 0:\n            return ip[2:]\n        elif int(ip[3])!= 0:\n            return ip[3:]\n        else:\n            return ''\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 0:\n        return None\n    index = 0\n    while (ip[index] == '0') and (index < 4):\n        index += 1\n    return ip[index:]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[-1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd_diff = []\n    if len(list1) <= 0:\n        return even_odd_diff\n    else:\n        for i in range(len(list1)):\n            if i % 2 == 0:\n                even_odd_diff.append(list1[i] - list1[i-1])\n            else:\n                even_odd_diff.append(list1[i] - list1[i-1])\n        return even_odd_diff\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # list1 = [1, 2, 3, 4, 5, 6]\n    # result = [2, 4]\n    # 1-2\n    # 2-3\n    # 3-4\n    # 4-5\n    # 5-6\n    # result = 4 - 2 = 2\n    # 1-4\n    # 4-5\n    # 5-6\n    # result = 5 - 1 = 4\n    # 1-6\n    # 6-7\n    # 7-8\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = list1[1] - list1[0]\n    return diff\n    \ndef diff_bigger_smaller(list1, list2):\n    '''\n    Write a function to find the first number which is bigger than the second number.\n    '''\n    for i in range(len(list1)):\n        if list1[i] > list2[i]:\n            return list1[i]\n        if list2[i] > list1[i]:\n            return list2[i]\n        if list1[i] == list2[i]:\n            return \"Two numbers are equal\"\n            \ndef diff_sum_sub(list1, list2):\n    '''\n    Write a function to find the sum of the first and last number of a given list, and the difference of the first and second number of a given list.\n    '''\n    sum1 = list1[0] + list1[-1]\n    diff = list1[1] - list1[0]\n    return sum1, diff\n    \ndef palindrome(list1):\n    '''\n    Write a function to find whether a given list is a palindrome.\n    '''\n    list2 = list1[::-1]\n    if list1 == list2:\n        return True\n    else:\n        return False\n        \ndef insertion_sort(list1):\n    '''\n    Write a function to sort a list by using insertion sort.\n    '''\n    for i in range(len(list1)):\n        j = i\n        while j > 0 and list1[j] < list1[j-1]:\n            list1[j], list1[j-1] = list1[j-1], list1[j]\n            j = j - 1\n    return list1\n    \ndef bubble_sort(list1):\n    '''\n    Write a function to sort a list by using bubble sort.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] > list1[j]:\n                list1[i], list1[j] = list1[j], list1[i]\n    return list1\n    \ndef sort_descending(list1):\n    '''\n    Write a function to sort a list in descending order.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] < list1[j]:\n                list1[i], list1[j] = list1[j], list1[i]\n    return list1\n    \ndef sort_ascending(list1):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] > list1[j]:\n                list1[i], list1[j] = list1[j], list1[i]\n    return list1\n    \ndef quicksort_in_place(list1):\n    '''\n    Write a function to sort a list by using quicksort in-place.\n    '''\n    if len(list1) <= 1:\n        return list1\n    else:\n        pivot = list1[0]\n        less = [i for i in list1[1:] if i <= pivot]\n        greater = [i for i in list1[1:] if i > pivot]\n        return quicksort_in_place(less) + [pivot] + quicksort_in_place(greater)\n    \ndef quicksort(list1, start, end):\n    '''\n    Write a function to sort a list by using quicksort.\n    '''\n    if start < end:\n        pivot = list1[start]\n        less = [i for i in list1[start+1:end] if i <= pivot]\n        greater = [i for i in list1[start+1:end] if i > pivot]\n        list1[start] = quicksort(less, 0, len(less))\n        list1[start+1:end] = quicksort(greater, 0, len(greater))\n        return list1\n    else:\n        return list1\n        \ndef merge_sort(list1):\n    '''\n    Write a function to sort a list by using merge sort.\n    '''\n    if len(list1) > 1:\n        mid = len(list1) / 2\n        left = list1[:mid]\n        right = list1[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                list1[k] = left[i]\n                i += 1\n            else:\n                list1[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            list1[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            list1[k] = right[j]\n            j += 1\n            k += 1\n    return list1\n    \ndef counting_sort(list1, max_num):\n    '''\n    Write a function to sort a list using counting sort.\n    '''\n    count_array = [0] * (max_num+1)\n    for num in list1:\n        count_array[num] += 1\n    \n    i = 0\n    for index, count in enumerate(count_array):\n        while count > 0:\n            list1[i] = index\n            i += 1\n            count -= 1\n    return list1\n    \ndef radix_sort(list1):\n    '''\n    Write a function to sort a list by using radix sort.\n    '''\n    max_num = max(list1)\n    temp_list = [0] * (max_num + 1)\n    for num in list1:\n        temp_list[num] += 1\n    \n    i = 0\n    for index, count in enumerate(temp_list):\n        while count > 0:\n            list1[i] = index\n            i += 1\n            count -= 1\n    return list1\n    \ndef bucket_sort(list1):\n    '''\n    Write a function to sort a list by using bucket sort.\n    '''\n    max_num = max(list1)\n    temp_list = [0] * (max_num + 1)\n    for num in list1:\n        temp_list[num] += 1\n    \n    i = 0\n    for index, count in enumerate(temp_list):\n        while count > 0:\n            list1[i] = index\n            i += 1\n            count -= 1\n    return list1\n    \ndef counting_sort_2d(list1):\n    '''\n    Write a function to sort a 2-dimensional list by using counting sort.\n    '''\n    rows, cols = len(list1), len(list1[0])\n    temp_list = [([0] * cols) for _ in range(rows)]\n    for row in range(rows):\n        for col in range(cols):\n            temp_list[row][col] = list1[row][col]\n    \n    max_num = max(max(row) for row in list1)\n    count_array = [([0] * cols) for _ in range(max_num + 1)]\n    for row in range(rows):\n        for col in range(cols):\n            count_array[temp_list[row][col]][col] += 1\n    \n    i = 0\n    for index, count in enumerate(count_array):\n        while count > 0:\n            list1[i][cols-1] = index\n            i += 1\n            count -= 1\n    return list1\n    \ndef bucket_sort_2d(list1):\n    '''\n    Write a function to sort a 2-dimensional list by using bucket sort.\n    '''\n    rows, cols = len(list1), len(list1[0])\n    temp_list = [([0] * cols) for _ in range(rows)]\n    for row in range(rows):\n    "
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = list1[0] - list1[1]\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # firstEven=sorted(filter(lambda x: x%2==0,list1),key=int)\n    # firstOdd=sorted(filter(lambda x: x%2==1,list1),key=int)\n    # return abs(firstEven[0]-firstOdd[0])\n    return abs(sum(filter(lambda x: x%2==0,list1)) - sum(filter(lambda x: x%2==1,list1)))\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1_len = len(list1)\n    if list1_len <= 1:\n        return 0\n    else:\n        for index in range(list1_len):\n            if index == 0:\n                if (list1[index] % 2) == 0:\n                    even_num = list1[index]\n                else:\n                    odd_num = list1[index]\n            else:\n                if (list1[index] % 2) == 0:\n                    odd_num = list1[index]\n                else:\n                    even_num = list1[index]\n    return abs(even_num - odd_num)\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            odd = list1[i]\n            break\n    for i in range(len(list1)):\n        if list1[i]%2==1:\n            even = list1[i]\n            break\n    return even-odd\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i%2==0:\n            list2.append(i)\n    difference = list2[0] - list2[1]\n    return difference\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[1]\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    '''\n    Create a dictionary of each binary number as key and count as value.\n    '''\n    \n    d = {}\n    for i in range(0,len(str1)) : \n        d[str1[i]] = 1\n    \n    for i in range(0,len(str2)) : \n        if str2[i] in d.keys() : \n            d[str2[i]] = d[str2[i]]+1\n    \n    '''\n    Calculate number of swaps required to convert each bit from'str1' to'str2'.\n    '''\n    \n    S = 0\n    for key in d.keys() : \n        if d[key] % 2!= 0 : \n            S = S+1\n    return S\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    str1 = list(str1)\n    str2 = list(str2)\n    \n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            if str1[i] == '0' and str2[i] == '1' :\n                str1[i] = '1'\n                str2[i] = '0'\n                count += 1\n            elif str1[i] == '1' and str2[i] == '0' :\n                str1[i] = '0'\n                str2[i] = '1'\n                count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Base Case\n    if str1 == str2 : \n        return 0\n    # if both strings are empty\n    elif len(str1) == 0 or len(str2) == 0 : \n        return max(len(str1),len(str2))\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps=0\n    for i in xrange(len(str1)):\n        if str1[i]!=str2[i]:\n            str1=str1[:i]+str2[i]+str1[i+1:]\n            str2=str2[:i]+str1[i]+str2[i+1:]\n            swaps+=1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) : \n        return -1 \n    else : \n        cnt = 0 \n        for i in range(0,len(str1)) : \n            if str1[i]!= str2[i] : \n                cnt += 1 \n        return cnt \n    \nif __name__ == '__main__':\n    str1 = '10010'\n    str2 = '10011'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10010'\n    str2 = '10010'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10010'\n    str2 = '10001'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10010'\n    str2 = '100001'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10010'\n    str2 = '01100'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10010'\n    str2 = '01100'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10010'\n    str2 = '00100'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10010'\n    str2 = '00100'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10010'\n    str2 = '10100'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10010'\n    str2 = '10100'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10010'\n    str2 = '10101'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10010'\n    str2 = '10101'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10101'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10101'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10101'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10101'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10110'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 = '10110'\n    str2 = '10111'\n    print min_Swaps(str1,str2)\n    \n    str1 "
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    s = 0\n    for i in range(n) :\n        if str1[i]!= str2[i] :\n            s += 1\n            str1 = str1[:i] + str(1-int(str1[i])) + str1[i+1:]\n            str2 = str2[:i] + str(1-int(str2[i])) + str2[i+1:]\n    return s\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = str1.strip()\n    str2 = str2.strip()\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i = 0\n    \n    l1 = list(str1)\n    l2 = list(str2)\n    \n    while i < len(l1) :\n        if l1[i]!= l2[i] :\n            l2[i],l2[l1.index(l2[i])] = l2[l1.index(l2[i])],l2[i]\n            i = i + 1\n        else :\n            i = i + 1\n        \n    return len(l1) - l1.count('0')\n    \n    \nprint min_Swaps(\"0110\", \"0101\")\nprint min_Swaps(\"1010\", \"1011\")\nprint min_Swaps(\"000101001\", \"000101011\")\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Assigning initially both the string to \"\"\n    str1 = \"\"\n    str2 = \"\"\n    # converting the given string into the binary number using list\n    str1 = str1.join(bin(int(i))[2:].zfill(len(str1)))\n    str2 = str2.join(bin(int(i))[2:].zfill(len(str2)))\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    i=0\n    j=0\n    for x in tuple_list:\n        i=i+sys.getsizeof(x)\n        j=j+1\n    return i,j\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #List operations on a tuple are not allowed, hence the extra list conversion.\n    #Tuple operations require a list conversion to be performed. \n    size = sys.getsizeof(tuple(tuple_list))\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # if we have a string of length 2, return the length of the string\n    # else return the length of the list\n    if (isinstance(tuple_list,str)):\n        return len(tuple_list)\n    elif (isinstance(tuple_list,list)):\n        return len(tuple_list)\n    else:\n        return 0\ndef sort_list_of_tuples(tuple_list):\n    '''\n    Write a function to sort a list of tuples on a given index\n    return the sorted list\n    '''\n    # create a new empty list\n    new_list = []\n    # iterate through the list\n    for tuple in tuple_list:\n        # store the item at the given index\n        item = tuple[1]\n        # add the item to the new list\n        new_list.append(item)\n    # sort the new list\n    new_list.sort()\n    # return the new list\n    return new_list\ndef extract_all_strings(tuple_list):\n    '''\n    Write a function to extract all strings from a list of tuples\n    '''\n    # create an empty list\n    new_list = []\n    # iterate through the list\n    for tuple in tuple_list:\n        # store the item at the given index\n        item = tuple[1]\n        # add the item to the new list\n        new_list.append(item)\n    # extract all strings from the new list\n    return [str(i) for i in new_list]\ndef get_file_name(file_path):\n    '''\n    Write a function to extract the file name from a given file path\n    '''\n    # get the file name\n    file_name = file_path.split('/')[-1]\n    # get the file extension\n    file_ext = file_name.split('.')[1]\n    # return the file name\n    return file_name\ndef get_file_ext(file_path):\n    '''\n    Write a function to extract the file extension from a given file path\n    '''\n    # get the file name\n    file_name = file_path.split('/')[-1]\n    # get the file extension\n    file_ext = file_name.split('.')[1]\n    # return the file extension\n    return file_ext\ndef get_file_name_ext(file_path):\n    '''\n    Write a function to extract the file name and extension from a given file path\n    '''\n    # get the file name\n    file_name = file_path.split('/')[-1]\n    # get the file extension\n    file_ext = file_name.split('.')[1]\n    # return the file name and extension\n    return file_name, file_ext\ndef get_file_dir(file_path):\n    '''\n    Write a function to extract the file directory from a given file path\n    '''\n    # get the file directory\n    file_dir = file_path.split('/')[0]\n    # return the file directory\n    return file_dir\ndef get_file_size(file_path):\n    '''\n    Write a function to extract the file size from a given file path\n    '''\n    # get the file size\n    file_size = os.path.getsize(file_path)\n    # return the file size\n    return file_size\ndef get_file_size_format(file_path):\n    '''\n    Write a function to extract the file size from a given file path\n    '''\n    # get the file size\n    file_size = os.path.getsize(file_path)\n    # get the file size in bytes\n    file_size_b = file_size/1024\n    # get the file size in KB\n    file_size_kb = file_size_b/1024\n    # get the file size in MB\n    file_size_mb = file_size_kb/1024\n    # get the file size in GB\n    file_size_gb = file_size_mb/1024\n    # get the file size in TB\n    file_size_tb = file_size_gb/1024\n    # get the file size in PB\n    file_size_pb = file_size_tb/1024\n    # return the file size in KB, MB, GB, TB, and PB\n    return file_size_kb, file_size_mb, file_size_gb, file_size_tb, file_size_pb\ndef get_file_modified_time(file_path):\n    '''\n    Write a function to extract the file modified time from a given file path\n    '''\n    # get the file modified time\n    file_modified_time = os.path.getmtime(file_path)\n    # get the file modified time in seconds\n    file_modified_time_s = time.time() - file_modified_time\n    # get the file modified time in minutes\n    file_modified_time_m = file_modified_time_s/60\n    # get the file modified time in hours\n    file_modified_time_h = file_modified_time_m/60\n    # get the file modified time in days\n    file_modified_time_d = file_modified_time_h/24\n    # return the file modified time in days\n    return file_modified_time_d\ndef get_file_created_time(file_path):\n    '''\n    Write a function to extract the file created time from a given file path\n    '''\n    # get the file created time\n    file_created_time = os.path.getctime(file_path)\n    # get the file created time in seconds\n    file_created_time_s = time.time() - file_created_time\n    # get the file created time in minutes\n    file_created_time_m = file_created_time_s/60\n    # get the file created time in hours\n    file_created_time_h = file_created_time_m/60\n    # get the file created time in days\n    file_created_time_d = file_created_time_h/24\n    # return the file created time in days\n    return file_created_time_d\ndef convert_bytes_to_megabytes(file_size_b):\n    '''\n    Write a function to convert bytes to megabytes\n    '''\n    # get the file size in megabytes\n    file_size_mb = file_size_b/1024\n    # return the file size in megabytes\n    return file_size_mb\ndef convert_bytes_to_megabtyes(file_size_b):\n    '''\n    Write a function to convert bytes to megabytes\n    '''\n    # get the file size in megabytes\n    file_size_mb = file_size_b/1024\n    # return the file size in megabytes\n    return file_size_mb\ndef convert_bytes_to_gigabytes(file_size_b):\n    '''\n    Write a function to convert bytes to gigabytes\n    '''\n    # get the file size in gigabytes\n    file_size_gb = file_size_b/1024/1024\n    # return the file size in gigabytes\n    return file_size_gb\ndef convert_bytes_to_gigabytes(file_size_b):\n    '''\n    Write a function to convert bytes to gigabytes\n    '''\n    # get the file size in gigabytes\n    file_size_gb = file_size_b/1024/1024\n    # return the file size in gigabytes\n    return file_size_gb\ndef convert_bytes_to_terabytes(file_size_b):\n    '''\n    Write a function to convert bytes to terabytes\n    '''\n    # get the file size in terabytes\n    file_size_tb = file_size_b/1024/1024/1024\n    # return the file size in terabytes\n    return file_size_tb\ndef convert_bytes_to_terabytes(file_size_b):\n    '''\n    Write a function to convert bytes to terabytes\n    '''\n    # get the file size in terabytes\n    file_size_tb = file_size_b/1024/1024/1024\n    # return the file size in terabytes\n    return file_size_tb\ndef convert_bytes_to_petabytes(file_size_b):\n    '''\n    Write a function to convert bytes to petabytes\n    '''\n    # get the file size in petabytes\n    file_siz"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if len(tuple_list)==1:\n        return sys.getsizeof(tuple_list[0])\n    else:\n        return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    i = 0\n    for ele in tuple_list:\n        i = i + sys.getsizeof(ele)\n    return i\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size=0\n    for i in range(0,len(tuple_list)):\n        size = size + sys.getsizeof(tuple_list[i])\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = sys.getsizeof(tuple_list)\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_byte=0\n    for tuple in tuple_list:\n        size_byte+=sys.getsizeof(tuple)\n    return size_byte\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    a = sys.getsizeof(tuple_list)\n    print a\n    \ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    b = sys.getsizeof(list_list)\n    print b\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) + len(arr2) <= k:\n        return arr1[k - len(arr1) - len(arr2)]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def kth_element(arr1, arr2, k):\n        if len(arr1) == 0:\n            return arr2[k-1]\n        if len(arr2) == 0:\n            return arr1[k-1]\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        if k == len(arr1) + len(arr2):\n            return max(arr1[-1], arr2[-1])\n        if k < len(arr1):\n            return kth_element(arr1, arr2[1:], k)\n        else:\n            return kth_element(arr1[1:], arr2, k - len(arr1) - 1)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1 = 0\n    idx2 = 0\n    while True:\n        if idx1 == len(arr1):\n            return arr2[idx2 + k - 1]\n        if idx2 == len(arr2):\n            return arr1[idx1 + k - 1]\n        if k == 1:\n            return min(arr1[idx1], arr2[idx2])\n        elif k > 1:\n            if arr1[idx1] < arr2[idx2]:\n                k -= 1\n                idx1 += 1\n            elif arr1[idx1] > arr2[idx2]:\n                k -= 1\n                idx2 += 1\n            else:\n                idx1 += 1\n                idx2 += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 and len(arr2) == 0:\n        return None\n    \n    m = len(arr1)\n    n = len(arr2)\n    \n    if m == 0 and n == 0:\n        return None\n    \n    if k > m + n:\n        return None\n    \n    if m == 0:\n        return arr2[k-1]\n    \n    if n == 0:\n        return arr1[k-1]\n    \n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    mid1 = m / 2\n    mid2 = n / 2\n    \n    if arr1[mid1] > arr2[mid2]:\n        arr1, arr2 = arr2, arr1\n        mid1, mid2 = mid2, mid1\n    \n    if arr1[mid1-1] == arr2[mid2]:\n        return arr2[mid2]\n    \n    if arr1[mid1] < arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[mid1:], arr2[:mid2], k-mid1)\n        else:\n            return find_kth(arr1[:mid1], arr2[mid2:], k-mid2)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[mid1:], arr2[mid2:], k-mid2)\n        else:\n            return find_kth(arr1[:mid1], arr2[:mid2], k-mid1)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # We are required to return value from the end of the array\n    # But the given problem only require us to find the element before index K\n    # So our solution is to do this\n    # a) Find the length of the array\n    n = len(arr1) + len(arr2)\n    if n == 0:\n        return -1\n    # b) Find the middle index\n    if n % 2 == 0:\n        middle = n // 2\n    else:\n        middle = n // 2 + 1\n    # c) If K is equal to middle index, return the value\n    if k == middle:\n        return arr1[middle - 1]\n    # d) If k is smaller than middle index, then the required element would be in the first array\n    elif k < middle:\n        return find_kth(arr1, arr2, k)\n    # e) If k is greater than middle index, then the required element would be in the second array\n    else:\n        return find_kth(arr1, arr2, k - (middle - 1))\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pos1, pos2 = 0, 0\n    while True:\n        if pos1 == len(arr1):\n            return arr2[pos2 + k - 1]\n        if pos2 == len(arr2):\n            return arr1[pos1 + k - 1]\n        if k == 1:\n            return min(arr1[pos1], arr2[pos2])\n        if k > 1:\n            if arr1[pos1] < arr2[pos2]:\n                k -= 1\n            elif arr1[pos1] > arr2[pos2]:\n                pos2 += 1\n            else:\n                pos1 += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n    if l1 == l2:\n        if k > l1:\n            return None\n        return arr1[k]\n    if l1 > l2:\n        return find_kth(arr2, arr1, k)\n    if l1 == 0:\n        return arr2[k]\n    i = 0\n    j = 0\n    m = l1 // 2\n    n = l2 // 2\n    while i < m and j < n:\n        if arr1[i] > arr2[j]:\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            i += 1\n            j += 1\n    if i > m:\n        return find_kth(arr2, arr1[m:], k-m)\n    if j > n:\n        return find_kth(arr1, arr2[n:], k-n)\n    if i == m:\n        return arr2[j]\n    if j == n:\n        return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # merge the two sorted arrays into one\n    sorted_arr = merge_arrays(arr1, arr2)\n    # find the kth element\n    return sorted_arr[k]\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return len(str(number)) == len(str(number**3))\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    result = 0\n    while n:\n        result += n % 10\n        n //= 10\n    return result == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # checking if the given number is a palindrome\n    temp = number\n    palindrome = 0\n    while temp > 0:\n        palindrome = palindrome * 10 + temp%10\n        temp /= 10\n    if number == palindrome:\n        return True\n    \n    sum = 0\n    while number > 0:\n        sum += (number%10)**3\n        number /= 10\n    \n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s=str(number)\n    n=len(s)\n    sum=0\n    for i in s:\n        sum=sum+(int(i)**n)\n    if number==sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit_length = len(str(number))\n    #print digit_length\n    sum = 0\n    temp_number = number\n    while temp_number:\n        remainder = temp_number % 10\n        sum += remainder ** digit_length\n        temp_number /= 10\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    armstrong_number_list = []\n    for num in range(number + 1):\n        sum = 0\n        num = str(num)\n        for digit in num:\n            sum += int(digit) ** 3\n        if sum == int(num):\n            armstrong_number_list.append(num)\n    return armstrong_number_list\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    str_num = str(number)\n    sum = 0\n    for char in str_num:\n        sum += int(char) ** 3\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_string = str(number)\n    number_length = len(number_string)\n    number_sum = 0\n    for i in range(number_length):\n        number_sum = number_sum + (int(number_string[i]) ** number_length)\n    if number_sum == number:\n        print('{} is a armstrong number'.format(number))\n    else:\n        print('{} is not a armstrong number'.format(number))\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # 1 is a special case\n    if number == 1:\n        return True\n    # calculate the sum of the cube of the digits\n    s = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        s += digit ** 3\n        temp //= 10\n    # check if it is the same as the number\n    return s == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_digit = sum([int(i) ** 3 for i in str(number)])\n    return sum_digit == number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #if(number <= 0):\n    #    print(\"Enter a natural number greater than 0\")\n    #    return\n    \n    #sum = 0\n    #average = 0\n    \n    #for i in range(1,number+1):\n    #    sum = sum + i\n    #    average = sum / i\n    \n    #print(sum)\n    #print(average)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number)!= int:\n        return \"Invalid Input\"\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = float(sum / number)\n    return sum, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        total = total + i\n    average = total / number\n    return (total, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1, number + 1):\n        result += i\n    return result / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    for i in range(number):\n        sum_ += i\n    average = float(sum_) / number\n    return sum_, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    i = 0\n    average = 0\n    while i < number:\n        total += i\n        i += 1\n    average = total / i\n    return (total, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number) == int:\n        return int(number)\n    else:\n        return 0\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    count = 1\n    while count <= number:\n        sum_of_numbers += count\n        count += 1\n    average = sum_of_numbers / number\n    return sum_of_numbers, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(number+1):\n        sum += i\n    average = sum / number\n    print(sum)\n    print(average)\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n%2 == 0)\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True \n    else : \n        return False\ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 1 : \n        return False \n    else : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False \n        return True\ndef is_Palidrome(n) : \n    '''\n    Write a python function to check whether the given number is palidrome or not.\n    '''\n    l = len(str(n))\n    if l == 1 : \n        return True \n    else : \n        if str(n)[0] == str(n)[l-1] : \n            return is_Palidrome(int(str(n)[1:l-1]))\n        else : \n            return False\ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    if n == 1 : \n        return True \n    else : \n        s = 0 \n        for i in range(1,n) : \n            if n%i == 0 : \n                s += i \n        if s == n : \n            return True \n        else : \n            return False\ndef is_Armstrong(n) : \n    '''\n    Write a python function to check whether the given number is armstrong or not.\n    '''\n    l = len(str(n))\n    s = 0\n    for i in range(l) : \n        s += int(str(n)[i])**l\n    if s == n : \n        return True \n    else : \n        return False\ndef is_Pan(n) : \n    '''\n    Write a python function to check whether the given number is pan number or not.\n    '''\n    if is_Armstrong(n) and is_Perfect(n) : \n        return True \n    else : \n        return False\ndef is_Armstrong_nopan(n) : \n    '''\n    Write a python function to check whether the given number is armstrong number or not.\n    '''\n    if is_Armstrong(n) : \n        return True \n    else : \n        return False\ndef is_Happy_number(n) : \n    '''\n    Write a python function to check whether the given number is happy number or not.\n    '''\n    s = set()\n    while True : \n        s.add(n)\n        l = len(str(n))\n        n = 0\n        for i in range(l) : \n            n += int(str(n)[i])**2\n        if n == 1 : \n            break\n    return len(s) == 1\ndef is_Happy_number_nopan(n) : \n    '''\n    Write a python function to check whether the given number is happy number or not.\n    '''\n    if is_Happy_number(n) : \n        return True \n    else : \n        return False\ndef is_Pseudo_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is pseudo palindrome or not.\n    '''\n    l = len(str(n))\n    s = str(n)\n    if s[0]!= s[l-1] : \n        return False \n    else : \n        return is_Pseudo_Palindrome(int(s[1:l-1]))\ndef is_Pseudo_Palindrome_nopan(n) : \n    '''\n    Write a python function to check whether the given number is pseudo palindrome or not.\n    '''\n    if is_Pseudo_Palindrome(n) : \n        return True \n    else : \n        return False\ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    l = len(str(n))\n    s = str(n)\n    if s[0]!= s[l-1] : \n        return False \n    else : \n        return True\ndef is_Palindrome_nopan(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if is_Palindrome(n) : \n        return True \n    else : \n        return False\ndef is_Consecutive(n) : \n    '''\n    Write a python function to check whether the given number is consecutive or not.\n    '''\n    s = set()\n    while True : \n        s.add(n)\n        l = len(str(n))\n        n = 0\n        for i in range(l) : \n            n += int(str(n)[i])\n        if n == 1 : \n            break\n    return len(s) == 1\ndef is_Consecutive_nopan(n) : \n    '''\n    Write a python function to check whether the given number is consecutive or not.\n    '''\n    if is_Consecutive(n) : \n        return True \n    else : \n        return False\ndef is_Perfect_Square(n) : \n    '''\n    Write a python function to check whether the given number is perfect square or not.\n    '''\n    if n**0.5 == int(n**0.5) : \n        return True \n    else : \n        return False\ndef is_Perfect_Square_nopan(n) : \n    '''\n    Write a python function to check whether the given number is perfect square or not.\n    '''\n    if is_Perfect_Square(n) : \n        return True \n    else : \n        return False\ndef is_Perfect_Number(n) : \n    '''\n    Write a python function to check whether the given number is perfect number or not.\n    '''\n    if is_Perfect_Square(n) and is_Perfect_Square_nopan(n) : \n        return True \n    else : \n        return False\ndef is_Perfect_Number_nopan(n) : \n    '''\n    Write a python function to check whether the given number is perfect number or not.\n    '''\n    if is_Perfect_Number(n) : \n        return True \n    else : \n        return False\ndef is_Prime_nopan(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 1 : \n        return False \n    if n%2 == 0 : \n        return False \n    for i in range(3,n) : \n        if n%i == 0 : \n            return False \n    return True \ndef is_Sqrt_number_nopan(n) : \n    '''\n    Write a python function to check whether the given number is sqrt number or not.\n    '''\n    if is_Palidrome_nopan(n) : \n        return True \n    else : \n        return False\ndef is_Perfect_Cube_nopan(n) : \n    '''\n    Write a python function to check whether the given number is perfect cube or not.\n    '''\n    if is_Perfect_Square_nopan(n) : \n        return True \n    else : \n        return False\ndef is_Power_of_10(n) : \n    '''\n    Write a python function to check whether the given number is power of 10 or not.\n    '''\n    if n!= 0 : \n        while n%10 == 0 : \n            n /= 10\n        return n == 1 \n    else : \n        return True\ndef is_Power_of_10_nopan(n) : \n    '''\n    Write a python function to check whether the given number is power of 10 or not.\n    '''\n    if is_Power_of_10(n) : \n        return True \n    else : \n        return False\ndef is_Power_of_2(n) : \n    '''\n    Write a python function to check whether the given number is powe"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n%2 == 0)\ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if (n == 2 or n == 3) : \n        return True\n    elif (n < 2 or n % 2 == 0) : \n        return False\n    else : \n        for i in range(3,int(n**0.5 + 1), 2) : \n            if (n % i == 0) : \n                return False\n        return True\ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    s = str(n)\n    l = len(s)\n    for i in range(0,l/2) : \n        if (s[i]!= s[l-1-i]) : \n            return False\n    return True\ndef is_Armstrong(n) : \n    '''\n    Write a python function to check whether the given number is an armstrong or not.\n    '''\n    s = str(n)\n    l = len(s)\n    i = 0\n    total = 0\n    while (i < l) : \n        total += (int(s[i])**l)\n        i += 1\n    if (total == n) : \n        return True\n    else : \n        return False\ndef getSum(n) : \n    '''\n    Write a python function to get the sum of all the digits of the given number.\n    '''\n    s = str(n)\n    l = len(s)\n    i = 0\n    total = 0\n    while (i < l) : \n        total += (int(s[i]))\n        i += 1\n    return total\ndef is_SuperPrime(n) : \n    '''\n    Write a python function to check whether the given number is a super prime or not.\n    '''\n    if (is_Prime(n) and getSum(n) > 1) : \n        return True\n    else : \n        return False\ndef getDigits(n) : \n    '''\n    Write a python function to return all the digits of the given number.\n    '''\n    s = str(n)\n    l = len(s)\n    d = []\n    i = 0\n    while (i < l) : \n        d.append(int(s[i]))\n        i += 1\n    return d\ndef is_Lychrel(n) : \n    '''\n    Write a python function to check whether the given number is a Lychrel number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    total = 0\n    for i in range(0,l) : \n        total += int(s[i])\n    n = total + int(s)\n    if (n == int(s)) : \n        return True\n    else : \n        return False\ndef is_Armstrong_2(n) : \n    '''\n    Write a python function to check whether the given number is an armstrong number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    i = 0\n    total = 0\n    while (i < l) : \n        total += (int(s[i])**l)\n        i += 1\n    if (total == n) : \n        return True\n    else : \n        return False\ndef is_Pentagonal(n) : \n    '''\n    Write a python function to check whether the given number is a pentagonal number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    i = 0\n    total = 0\n    while (i < l) : \n        total += (int(s[i])**(l-1))\n        i += 1\n    if (total == n) : \n        return True\n    else : \n        return False\ndef getFactors(n) : \n    '''\n    Write a python function to get all the factors of a given number.\n    '''\n    s = str(n)\n    l = len(s)\n    i = 0\n    d = []\n    while (i < l) : \n        j = 1\n        while (j*j < n) : \n            if (n%j == 0) : \n                d.append(j)\n                d.append(n/j)\n            j += 1\n        i += 1\n    return d\ndef is_Pentagonal_2(n) : \n    '''\n    Write a python function to check whether the given number is a pentagonal number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    i = 0\n    total = 0\n    while (i < l) : \n        total += (int(s[i])**(l-1))\n        i += 1\n    if (total == n) : \n        return True\n    else : \n        return False\ndef is_Harshad(n) : \n    '''\n    Write a python function to check whether the given number is a harshad number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    total = 0\n    i = 0\n    while (i < l) : \n        total += (int(s[i])**l)\n        i += 1\n    if (total == n) : \n        return True\n    else : \n        return False\ndef is_Harshad_2(n) : \n    '''\n    Write a python function to check whether the given number is a harshad number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    i = 0\n    total = 0\n    while (i < l) : \n        total += (int(s[i])**l)\n        i += 1\n    if (total == n) : \n        return True\n    else : \n        return False\ndef is_Harshad_3(n) : \n    '''\n    Write a python function to check whether the given number is a harshad number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    i = 0\n    total = 0\n    while (i < l) : \n        total += (int(s[i])**l)\n        i += 1\n    if (total == n) : \n        return True\n    else : \n        return False\ndef getDigits_2(n) : \n    '''\n    Write a python function to return all the digits of the given number.\n    '''\n    s = str(n)\n    l = len(s)\n    d = []\n    i = 0\n    while (i < l) : \n        d.append(int(s[i]))\n        i += 1\n    return d\ndef is_Harshad_4(n) : \n    '''\n    Write a python function to check whether the given number is a harshad number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    i = 0\n    total = 0\n    while (i < l) : \n        total += (int(s[i])**l)\n        i += 1\n    if (total == n) : \n        return True\n    else : \n        return False\ndef is_Harshad_5(n) : \n    '''\n    Write a python function to check whether the given number is a harshad number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    i = 0\n    total = 0\n    while (i < l) : \n        total += (int(s[i])**l)\n        i += 1\n    if (total == n) : \n        return True\n    else : \n        return False\ndef is_Harshad_6(n) : \n    '''\n    Write a python function to check whether the given number is a harshad number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    i = 0\n    total = 0\n    while (i < l) : \n        total += (int(s[i])**l)\n        i += 1\n    if (total == n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # return True if n is even, else return False\n    if n%2 == 0 : \n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    count = 0 \n    for i in range(2,n) : \n        if n % i == 0 : \n            count = count + 1\n    if count == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0) :\n        return True\n    else :\n        return False\n        \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if (n%2!= 0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first = ''\n    for c in str1:\n        if str1.count(c) > 1:\n            first = c\n            break\n    return first\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for s in str1:\n        if s in char_dict:\n            return s\n        char_dict[s] = True\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i in dict1:\n            return i\n        else:\n            dict1[i] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return -1\n    seen = {}\n    for char in str1:\n        if char not in seen:\n            seen[char] = 1\n        else:\n            return char\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for letter in str1:\n        if letter not in dict1.keys():\n            dict1[letter] = 1\n        else:\n            dict1[letter] += 1\n    for letter in str1:\n        if dict1[letter] > 1:\n            return letter\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    unique_chars = set(str1)\n    for char in unique_chars:\n        count = str1.count(char)\n        if count > 1:\n            return char\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # str1 = 'geeksforgeeks'\n    # # output: 'e'\n    # # str1 = 'hello'\n    # # output: 'e'\n    # # str1 = 'aaaaa'\n    # # output: 'a'\n    # # str1 = 'aabb'\n    # # output: None\n    # str1 = 'aba'\n    # # output: 'a'\n    # str1 = 'aabbb'\n    # # output: 'b'\n    # str1 = 'abcdefgh'\n    # # output: 'f'\n    # str1 = 'abcd'\n    # # output: None\n    # str1 = 'abcdefghi'\n    # # output: 'f'\n    # str1 = 'abcdefghij'\n    # # output: 'j'\n    # str1 = 'abcdefghijklmnop'\n    # # output: 'k'\n    # str1 = 'abcdefghijklmnopqrstuvwxyz'\n    # # output: 'z'\n    # str1 = 'abcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char = {}\n    for i in str1:\n        if i in char:\n            return i\n        else:\n            char[i] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return None\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 1:\n        return [n]\n    if n == 2:\n        return [1, 2]\n    if n > 2:\n        return get_ludic(n - 1) + [n**2]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    ludic_nums = [1,2,4,8]\n    for i in range(1,n):\n        ludic_nums.append(ludic_nums[i-1]*ludic_nums[i-1]*10 + 1)\n        ludic_nums.append(ludic_nums[i-1]*ludic_nums[i-1]*2 + 2)\n        ludic_nums.append(ludic_nums[i-1]*ludic_nums[i-1] + 4)\n        ludic_nums.append(ludic_nums[i-1]*ludic_nums[i-1] + 6)\n        ludic_nums.append(ludic_nums[i-1]*ludic_nums[i-1] + 8)\n    return ludic_nums\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    a = 1\n    b = 1\n    l = []\n    while a <= n:\n        b = a*3\n        if b <= n:\n            l.append(b)\n        a = b\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    import math\n    def is_lucid(n):\n        n = str(n)\n        if n == n[::-1]:\n            return True\n        return False\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = []\n    for i in xrange(1, n + 1):\n        s = str(i)\n        l = len(s)\n        if s == s[::-1] and int(s + s[::-1]) <= n:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    ludic = [1]\n    temp = [1, 2, 4]\n    while len(ludic) < n:\n        if len(temp) == 0:\n            return []\n        temp_l = []\n        for t in temp:\n            if len(str(t)) == len(str(t*2)) and str(t*2) in ludic:\n                continue\n            if len(str(t)) == len(str(t*3)) and str(t*3) in ludic:\n                continue\n            if len(str(t)) == len(str(t*4)) and str(t*4) in ludic:\n                continue\n            temp_l.append(t)\n        temp = temp_l\n        ludic = ludic + temp\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n==1:\n        return [1]\n    l = [1,2]\n    for i in range(3,n+1):\n        if i%2==0:\n            l.append(l[i-1]+l[i-2])\n        else:\n            l.append(l[i-1])\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    i = 1\n    while len(l) < n:\n        if i % 3 == 0:\n            l.append(i)\n        i += 1\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in xrange(2, n + 1):\n        if (i**0.5) % 1 == 0:\n            lucids.append(i)\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(n-1, -1, -1) if is_lucid(i)]\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #turn the string into a list\n    s = list(s)\n    #rebuild the string\n    s.reverse()\n    #get the index of the last space\n    ind = s.index(' ')\n    #reverse the words\n    for i in range(ind, len(s)):\n        s[i], s[i-1] = s[i-1], s[i]\n    #insert the spaces\n    s = [' '] + s[:ind] + s[ind:]\n    #turn the list back into a string\n    return ''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    # Two pointer method\n    \n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left] =='':\n            while left < right:\n                s[left], s[right] = s[right], s[left]\n                left += 1\n                right -= 1\n        else:\n            left += 1\n            \n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    output = ''\n    word = ''\n    s = s.split(' ')\n    for w in s:\n        word = w[::-1]\n        output = output +'' + word\n    return output\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return s\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split()\n    l = l[::-1]\n    return''.join(l)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime_num_list = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    if num not in prime_num_list:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    for i in xrange(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num > 1 and num % 2 == 0:\n        return False\n    for i in range(3, num, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        # Only odd numbers are examined\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n            \n    return True\n    \n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num % 2 == 0:\n        return num == 2\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, num, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    #Check if the given number is divisible by any of the number between 2 and itself\n    for i in range(2,int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for n in range(2,num):\n        if num%n == 0:\n            return False\n    return True\n    \ndef first_n_primes(n):\n    '''\n    Write a function to return the first n prime numbers.\n    '''\n    num = 2\n    while n > 0:\n        if prime_num(num):\n            n -= 1\n            yield num\n        num += 1\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    # if num <= 3:\n    #     return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num) + 1), 6):\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180.0\ndef radian_degree_equal(degree1,degree2):\n    '''\n    Write a function to test if two radians are equal to each other.\n    '''\n    return (degree1-degree2)<1e-12\ndef get_list(path):\n    '''\n    Write a function to read a text file and convert each line into a list element.\n    '''\n    return open(path).readlines()\ndef get_degree(latitude,longitude):\n    '''\n    Write a function to convert the WGS84 Datum to an OSGB Datum.\n    The OSGB Datum is defined by an origin at (0,0) and a prime meridian of\n    Greenwich, Edinburgh, which has longitude of 0.\n    '''\n    R = 6371009.0\n    #(latitude, longitude)\n    lat_radian = radian_degree(latitude)\n    lon_radian = radian_degree(longitude)\n    N = R / math.sqrt(1-math.pow(math.sin(lat_radian),2))\n    X = (N + 1)*math.cos(lat_radian)\n    Y = (N + 1)*math.sin(lat_radian)\n    return (X,Y)\ndef get_distance(point1,point2):\n    '''\n    Write a function to calculate the distance between two points on the WGS84 Datum.\n    '''\n    (X1,Y1)=get_degree(*point1)\n    (X2,Y2)=get_degree(*point2)\n    return math.sqrt(math.pow(X1-X2,2)+math.pow(Y1-Y2,2))\ndef get_middle_point(point1,point2):\n    '''\n    Write a function to calculate the middle point between two points on the WGS84 Datum.\n    '''\n    (X1,Y1)=get_degree(*point1)\n    (X2,Y2)=get_degree(*point2)\n    return (X1+X2)/2,(Y1+Y2)/2\ndef get_direction(point1,point2):\n    '''\n    Write a function to calculate the direction between two points on the WGS84 Datum.\n    '''\n    return math.atan2(point1[1]-point2[1],point1[0]-point2[0])\ndef get_distance_on_direction(point1,point2,direction):\n    '''\n    Write a function to calculate the distance on a direction on the WGS84 Datum.\n    '''\n    return math.sqrt(math.pow(point1[1]-point2[1],2)+math.pow(point1[0]-point2[0],2))*math.cos(direction)\ndef get_distance_on_direction_on_sphere(point1,point2,direction):\n    '''\n    Write a function to calculate the distance on a direction on the WGS84 Datum.\n    '''\n    return math.sqrt(math.pow(point1[1]-point2[1],2)+math.pow(point1[0]-point2[0],2))*math.sin(direction)\ndef get_distance_on_sphere(point1,point2):\n    '''\n    Write a function to calculate the distance on the WGS84 Datum.\n    '''\n    return math.sqrt(math.pow(point1[1]-point2[1],2)+math.pow(point1[0]-point2[0],2))\ndef get_middle_point_on_direction(point1,point2,direction):\n    '''\n    Write a function to calculate the middle point on a direction on the WGS84 Datum.\n    '''\n    return (point1[0]+point2[0])/2,(point1[1]+point2[1])/2\ndef get_middle_point_on_sphere(point1,point2):\n    '''\n    Write a function to calculate the middle point on the WGS84 Datum.\n    '''\n    return (point1[0]+point2[0])/2,(point1[1]+point2[1])/2\ndef get_middle_point_on_sphere_on_direction(point1,point2,direction):\n    '''\n    Write a function to calculate the middle point on the WGS84 Datum.\n    '''\n    return (point1[0]+point2[0])/2,(point1[1]+point2[1])/2+get_distance_on_direction(point1,point2,direction)/2\ndef get_distance_in_direction_on_sphere(point1,point2,direction):\n    '''\n    Write a function to calculate the distance in a direction on the WGS84 Datum.\n    '''\n    return get_distance_on_direction_on_sphere(point1,point2,direction)+get_distance_on_sphere(point1,point2)\ndef get_distance_in_direction_on_sphere_on_direction(point1,point2,direction):\n    '''\n    Write a function to calculate the distance in a direction on the WGS84 Datum.\n    '''\n    return get_distance_on_direction_on_sphere_on_direction(point1,point2,direction)+get_distance_on_sphere(point1,point2)\ndef get_distance_in_direction_on_sphere_on_direction_on_sphere(point1,point2,direction):\n    '''\n    Write a function to calculate the distance in a direction on the WGS84 Datum.\n    '''\n    return get_distance_on_direction_on_sphere_on_direction_on_sphere(point1,point2,direction)+get_distance_on_sphere(point1,point2)\ndef get_distance_in_direction_on_sphere_on_direction_on_sphere_on_sphere(point1,point2,direction):\n    '''\n    Write a function to calculate the distance in a direction on the WGS84 Datum.\n    '''\n    return get_distance_on_direction_on_sphere_on_direction_on_sphere_on_sphere(point1,point2,direction)+get_distance_on_sphere(point1,point2)\ndef get_distance_on_sphere_on_direction_on_sphere(point1,point2,direction):\n    '''\n    Write a function to calculate the distance on a direction on the WGS84 Datum.\n    '''\n    return math.sqrt(math.pow(point1[1]-point2[1],2)+math.pow(point1[0]-point2[0],2))*math.sin(direction)\ndef get_distance_on_sphere_on_direction_on_sphere(point1,point2,direction):\n    '''\n    Write a function to calculate the distance on a direction on the WGS84 Datum.\n    '''\n    return math.sqrt(math.pow(point1[1]-point2[1],2)+math.pow(point1[0]-point2[0],2))*math.cos(direction)\ndef get_distance_on_sphere_on_direction_on_sphere(point1,point2,direction):\n    '''\n    Write a function to calculate the distance on a direction on the WGS84 Datum.\n    '''\n    return math.sqrt(math.pow(point1[1]-point2[1],2)+math.pow(point1[0]-point2[0],2))*math.sin(direction)\ndef get_distance_on_sphere_on_direction_on_sphere_on_sphere(point1,point2,direction):\n    '''\n    Write a function to calculate the distance on a direction on the WGS84 Datum.\n    '''\n    return math.sqrt(math.pow(point1[1]-point2[1],2)+math.pow(point1[0]-point2[0],2))*math.sin(direction)\ndef get_distance_in_direction_on_sphere_on_direction_on_sphere(point1,point2,direction):\n    '''\n    Write a function to calculate the distance in a direction on the WGS84 Datum.\n    '''\n    return ge"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef radian_degree2(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree * (180 / math.pi)\ndef radian_degree3(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree / 180) * math.pi\ndef distance(lati, longi, latitude, longitude):\n    '''\n    Write a function that takes the latitude and longitude of two points and \n    calculate the distance between them. The formula for distance is as follows:\n    D = R * cos(lat2) * sin(long2 - long1) + R * cos(lat1) * sin(lat2) * \n    (cos(long2 - long1))\n    '''\n    earth_radius = 6371.0088\n    \n    lat1 = radian_degree(latitude)\n    lat2 = radian_degree(latitude)\n    long1 = radian_degree(longitude)\n    long2 = radian_degree(longitude)\n    dlat = (lat2 - lat1)\n    dlong = (long2 - long1)\n    a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(lat1) * math.cos(lat2) * math.sin(dlong/2) * math.sin(dlong/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = earth_radius * c\n    return d\ndef vector_magnitude(x, y, z):\n    '''\n    Write a function to calculate the magnitude of a vector given three\n    components (x, y, z).\n    '''\n    return math.sqrt(x**2 + y**2 + z**2)\ndef vector_add(x, y, z):\n    '''\n    Write a function to compute the vector addition of two vectors given \n    three components.\n    '''\n    return x + y + z\ndef vector_subtract(x, y, z):\n    '''\n    Write a function to compute the vector subtraction of two vectors given \n    three components.\n    '''\n    return x - y - z\ndef vector_scalar_multiply(c, x, y, z):\n    '''\n    Write a function to compute the scalar multiplication of a vector given \n    three components.\n    '''\n    return c * x, c * y, c * z\ndef vector_scalar_division(c, x, y, z):\n    '''\n    Write a function to compute the scalar division of a vector given three \n    components.\n    '''\n    return c * x / (x**2 + y**2 + z**2)**0.5, c * y / (x**2 + y**2 + z**2)**0.5, c * z / (x**2 + y**2 + z**2)**0.5\ndef vector_dot(x, y, z):\n    '''\n    Write a function to compute the dot product of two vectors given three\n    components.\n    '''\n    return x * y + x * z + y * z\ndef vector_cross(x, y, z):\n    '''\n    Write a function to compute the cross product of two vectors given three\n    components.\n    '''\n    return x * y - x * z, x * z - y * z, y * z - x * z\ndef vector_normalize(x, y, z):\n    '''\n    Write a function to compute the normalize of a vector given three components.\n    '''\n    magnitude = vector_magnitude(x, y, z)\n    return x / magnitude, y / magnitude, z / magnitude\ndef cart2sph(x, y, z):\n    '''\n    Write a function to convert cartesian coordinates to spherical coordinates.\n    '''\n    \n    a = math.sqrt(x**2 + y**2 + z**2)\n    e = math.sqrt(x**2 + y**2)\n    p = math.atan2(e, a)\n    \n    return (p, math.acos(z/a), math.atan2(y, x))\ndef sph2cart(p, theta, rho):\n    '''\n    Write a function to convert spherical coordinates to cartesian coordinates.\n    '''\n    x = rho * math.sin(theta) * math.cos(p)\n    y = rho * math.sin(theta) * math.sin(p)\n    z = rho * math.cos(theta)\n    return x, y, z\ndef vector_normalize(x, y, z):\n    '''\n    Write a function to compute the normalize of a vector given three components.\n    '''\n    magnitude = vector_magnitude(x, y, z)\n    return x / magnitude, y / magnitude, z / magnitude\ndef vector_magnitude(x, y, z):\n    '''\n    Write a function to calculate the magnitude of a vector given three\n    components.\n    '''\n    return math.sqrt(x**2 + y**2 + z**2)\ndef vector_add(x, y, z):\n    '''\n    Write a function to compute the vector addition of two vectors given three\n    components.\n    '''\n    return x + y + z\ndef vector_subtract(x, y, z):\n    '''\n    Write a function to compute the vector subtraction of two vectors given \n    three components.\n    '''\n    return x - y - z\ndef vector_scalar_multiply(c, x, y, z):\n    '''\n    Write a function to compute the scalar multiplication of a vector given \n    three components.\n    '''\n    return c * x, c * y, c * z\ndef vector_scalar_division(c, x, y, z):\n    '''\n    Write a function to compute the scalar division of a vector given three \n    components.\n    '''\n    return c * x / (x**2 + y**2 + z**2)**0.5, c * y / (x**2 + y**2 + z**2)**0.5, c * z / (x**2 + y**2 + z**2)**0.5\ndef vector_dot(x, y, z):\n    '''\n    Write a function to compute the dot product of two vectors given three\n    components.\n    '''\n    return x * y + x * z + y * z\ndef vector_cross(x, y, z):\n    '''\n    Write a function to compute the cross product of two vectors given three\n    components.\n    '''\n    return x * y - x * z, x * z - y * z, y * z - x * z\ndef vector_normalize(x, y, z):\n    '''\n    Write a function to compute the normalize of a vector given three components.\n    '''\n    magnitude = vector_magnitude(x, y, z)\n    return x / magnitude, y / magnitude, z / magnitude\ndef cart2sph(x, y, z):\n    '''\n    Write a function to convert cartesian coordinates to spherical coordinates.\n    '''\n    \n    a = math.sqrt(x**2 + y**2 + z**2)\n    e = math.sqrt(x**2 + y**2)\n    p = math.atan2(e, a)\n    \n    return (p, math.acos(z/a), math.atan2(y, x))\ndef sph2cart(p, theta, rho):\n    '''\n    Write a function to convert spherical coordinates to cartesian coordinates.\n    '''\n    x = rho * math.sin(theta) * math.cos(p)\n    y = rho * math.sin(theta) * math.sin(p)\n    z = rho * math.cos(theta)\n    return x, y, z\ndef vector_normalize(x, y, z):\n    '''\n    Write a function to compute the normalize of a vector given three components.\n    '''\n    magnitude = vector_magnitude(x, y, z)\n    return x / magnitude, y / magnitude, z / magnitude\ndef vector_magnitude(x, y, z):\n    '''\n    Write a function to calculate the magnitude of a vector given three\n    components.\n    '''\n    return math.sqrt(x**2 + y**2 + z**2)\ndef vector_add(x, y, z):\n    '''"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_error(r_d):\n    '''\n    Write a function to calculate the angle error between r_d1 and r_d2.\n    '''\n    return abs(r_d1-r_d2)\ndef unit_vector(vector):\n    '''\n    Write a function to calculate the unit vector.\n    '''\n    length = (vector[0]**2+vector[1]**2)**0.5\n    return vector/length\ndef dot_product(vector1,vector2):\n    '''\n    Write a function to calculate the dot product of two vectors.\n    '''\n    return vector1[0]*vector2[0]+vector1[1]*vector2[1]\ndef angle_between(vector1,vector2):\n    '''\n    Write a function to calculate the angle between two vectors.\n    '''\n    return math.acos(dot_product(vector1,vector2)/(vector1[0]**2+vector1[1]**2)**0.5/(vector2[0]**2+vector2[1]**2)**0.5)\ndef find_angle(vector1,vector2):\n    '''\n    Write a function to find the angle between vector1 and vector2.\n    '''\n    return math.acos(dot_product(vector1,vector2)/(vector1[0]**2+vector1[1]**2)**0.5/(vector2[0]**2+vector2[1]**2)**0.5)\ndef rotate_point(point,angle,vector):\n    '''\n    Write a function to rotate a point around a vector by an angle.\n    '''\n    angle_r = angle_between(vector,point)\n    r_point = [point[0]*math.cos(angle_r)+point[1]*math.sin(angle_r),-point[0]*math.sin(angle_r)+point[1]*math.cos(angle_r)]\n    return r_point\ndef move_point(point,dis,vector):\n    '''\n    Write a function to move a point by a vector.\n    '''\n    r_point = [point[0]+dis*vector[0],point[1]+dis*vector[1]]\n    return r_point\ndef check_collision(point1,point2,r):\n    '''\n    Write a function to check if two points are colliding.\n    '''\n    if point1[0]==point2[0] and point1[1]==point2[1]:\n        return False\n    return (point1[0]-point2[0])**2+(point1[1]-point2[1])**2<(r**2)\ndef check_intersection(point1,point2,r,r1,r2):\n    '''\n    Write a function to check if two circles are intersecting.\n    '''\n    if point1[0]==point2[0] and point1[1]==point2[1]:\n        return False\n    return ((point1[0]-point2[0])**2+(point1[1]-point2[1])**2)**0.5+((r1+r2)**2-(r1-r2)**2)>=(r1+r2)**2\ndef point_in_circle(point,circle):\n    '''\n    Write a function to check if a point is in a circle.\n    '''\n    return point[0]**2+point[1]**2<=(circle[2])**2\ndef point_in_rectangle(point,rectangle):\n    '''\n    Write a function to check if a point is in a rectangle.\n    '''\n    if point[0]<rectangle[0] or point[0]>rectangle[2] or point[1]<rectangle[1] or point[1]>rectangle[3]:\n        return False\n    return True\ndef point_in_triangle(point,triangle):\n    '''\n    Write a function to check if a point is in a triangle.\n    '''\n    if point[0]<triangle[0] or point[0]>triangle[2] or point[1]<triangle[1] or point[1]>triangle[3]:\n        return False\n    if point[0]<triangle[0] and point[1]<triangle[1] and point[1]>triangle[1] or point[0]>triangle[2] and point[1]>triangle[1] and point[1]<triangle[3] or point[0]<triangle[0] and point[1]<triangle[1] and point[1]>triangle[3]:\n        return False\n    return True\ndef point_in_parallelogram(point,rectangle):\n    '''\n    Write a function to check if a point is in a parallelogram.\n    '''\n    if point[0]<rectangle[0] or point[0]>rectangle[2] or point[1]<rectangle[1] or point[1]>rectangle[3]:\n        return False\n    if point[0]<rectangle[0] and point[1]<rectangle[1] and point[1]>rectangle[1] or point[0]>rectangle[2] and point[1]>rectangle[1] and point[1]<rectangle[3] or point[0]<rectangle[0] and point[1]<rectangle[1] and point[1]>rectangle[3]:\n        return False\n    return True\ndef point_in_ellipse(point,ellipse):\n    '''\n    Write a function to check if a point is in an ellipse.\n    '''\n    a = ellipse[0]\n    b = ellipse[1]\n    return ((point[0]**2)+(point[1]**2))/(a**2)+(point[0]**2)/(b**2)<=1\ndef point_in_hyperbola(point,hyperbola):\n    '''\n    Write a function to check if a point is in a hyperbola.\n    '''\n    a = hyperbola[0]\n    b = hyperbola[1]\n    c = hyperbola[2]\n    d = (point[0]**2)/(a**2)+(point[1]**2)/(b**2)+(point[0]**2)/(c**2)\n    return d<=1\ndef point_in_sector(point,sector):\n    '''\n    Write a function to check if a point is in a sector.\n    '''\n    a = sector[0]\n    b = sector[1]\n    angle = sector[2]\n    r = (a**2+b**2)**0.5\n    r1 = (a**2+b**2+2*r**2)**0.5\n    if point_in_circle(point,(a,b,r)):\n        return True\n    if point_in_circle(point,(a,b,r1)):\n        return False\n    if point_in_rectangle(point,(a,b,a,b)):\n        return True\n    if point_in_triangle(point,(a,b,a,b)):\n        return True\n    if point_in_parallelogram(point,(a,b,a,b)):\n        return True\n    if point_in_ellipse(point,(a,b,a,b)):\n        return True\n    if point_in_hyperbola(point,(a,b,a,b)):\n        return True\n    if point_in_rectangle(point,(a,b,a,b)):\n        return True\n    if point_in_triangle(point,(a,b,a,b)):\n        return True\n    if point_in_sector(point,(a,b,angle)):\n        return True\n    return False\ndef vector_length(vector):\n    '''\n    Write a function to calculate the length of a vector.\n    '''\n    return (vector[0]**2+vector[1]**2)**0.5\ndef vector_angle(vecto"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef get_bearing(lat1, lon1, lat2, lon2):\n    '''\n    Write a function that takes two latitude and longitude coordinates and returns the bearing between them.\n    '''\n    rad_lat1 = radian_degree(lat1)\n    rad_lat2 = radian_degree(lat2)\n    rad_lon1 = radian_degree(lon1)\n    rad_lon2 = radian_degree(lon2)\n    y = math.sin(rad_lat2) * math.cos(rad_lon2)\n    x = math.cos(rad_lat1) * math.sin(rad_lon2) - math.sin(rad_lat1) * math.cos(rad_lon2) * math.cos(rad_lat2)\n    brng = math.atan2(y, x)\n    brng = math.degrees(brng)\n    brng = (brng + 360) % 360\n    return brng\ndef get_distance_and_bearing(lat1, lon1, lat2, lon2):\n    '''\n    Write a function that takes two latitude and longitude coordinates and returns the distance and bearing between them.\n    '''\n    rad_lat1 = radian_degree(lat1)\n    rad_lat2 = radian_degree(lat2)\n    rad_lon1 = radian_degree(lon1)\n    rad_lon2 = radian_degree(lon2)\n    y = math.sin(rad_lat2) * math.cos(rad_lon2)\n    x = math.cos(rad_lat1) * math.sin(rad_lon2) - math.sin(rad_lat1) * math.cos(rad_lon2) * math.cos(rad_lat2)\n    d = math.sqrt(y * y + x * x)\n    brng = math.atan2(y, x)\n    brng = math.degrees(brng)\n    brng = (brng + 360) % 360\n    return d, brng\ndef get_distance(lat1, lon1, lat2, lon2):\n    '''\n    Write a function that takes two latitude and longitude coordinates and returns the distance between them.\n    '''\n    rad_lat1 = radian_degree(lat1)\n    rad_lat2 = radian_degree(lat2)\n    rad_lon1 = radian_degree(lon1)\n    rad_lon2 = radian_degree(lon2)\n    y = math.sin(rad_lat2) * math.cos(rad_lon2)\n    x = math.cos(rad_lat1) * math.sin(rad_lon2) - math.sin(rad_lat1) * math.cos(rad_lon2) * math.cos(rad_lat2)\n    d = math.sqrt(y * y + x * x)\n    return d\ndef get_time_of_day(lat1, lon1, lat2, lon2):\n    '''\n    Write a function that takes two latitude and longitude coordinates and returns the time of day between them.\n    '''\n    def hours(degree):\n        return degree / 15\n    def minutes(degree):\n        return degree % 15\n    def seconds(minute):\n        return minute / 60\n    def hr(hours):\n        return hours * 60\n    def mi(minutes):\n        return minutes * 60\n    def sec(seconds):\n        return seconds * 60\n    def hm(hours, minutes):\n        return hr(hours) + mi(minutes)\n    def hms(hours, minutes, seconds):\n        return sec(seconds) + hm(hours, minutes)\n    def convert_to_12_hours(time):\n        hours = hours(time)\n        if hours > 12:\n            return hours - 12\n        return hours\n    def convert_to_24_hours(time):\n        if time > 12:\n            return time - 12\n        return time\n    def convert_to_12_hours(time):\n        if time > 12:\n            return time - 12\n        return time\n    def convert_to_24_hours(time):\n        if time > 12:\n            return time - 12\n        return time\n    def convert_to_12_hours(time):\n        if time > 12:\n            return time - 12\n        return time\n    def convert_to_24_hours(time):\n        if time > 12:\n            return time - 12\n        return time\n    time1 = get_time_of_day(lat1, lon1, lat2, lon2)\n    time2 = get_time_of_day(lat2, lon2, lat1, lon1)\n    time1 = convert_to_24_hours(time1)\n    time2 = convert_to_24_hours(time2)\n    return time2 - time1\ndef get_distance_and_bearing_using_radians(rad_lat1, rad_lon1, rad_lat2, rad_lon2):\n    '''\n    Write a function that takes two latitude and longitude coordinates and returns the distance and bearing between them.\n    '''\n    y = math.sin(rad_lat2) * math.cos(rad_lon2)\n    x = math.cos(rad_lat1) * math.sin(rad_lon2) - math.sin(rad_lat1) * math.cos(rad_lon2) * math.cos(rad_lat2)\n    d = math.sqrt(y * y + x * x)\n    brng = math.atan2(y, x)\n    brng = math.degrees(brng)\n    brng = (brng + 360) % 360\n    return d, brng\ndef get_distance_and_bearing(lat1, lon1, lat2, lon2):\n    '''\n    Write a function that takes two latitude and longitude coordinates and returns the distance and bearing between them.\n    '''\n    rad_lat1 = radian_degree(lat1)\n    rad_lat2 = radian_degree(lat2)\n    rad_lon1 = radian_degree(lon1)\n    rad_lon2 = radian_degree(lon2)\n    y = math.sin(rad_lat2) * math.cos(rad_lon2)\n    x = math.cos(rad_lat1) * math.sin(rad_lon2) - math.sin(rad_lat1) * math.cos(rad_lon2) * math.cos(rad_lat2)\n    d = math.sqrt(y * y + x * x)\n    brng = math.atan2(y, x)\n    brng = math.degrees(brng)\n    brng = (brng + 360) % 360\n    return d, brng\ndef get_speed(distance, time):\n    '''\n    Write a function that takes two distance and time coordinates and returns the speed.\n    '''\n    return distance / time\ndef get_speed_and_time(distance, lat1, lon1, lat2, lon2):\n    '''\n    Write a function that takes two latitude and longitude coordinates and returns the speed and time between them.\n    '''\n    lat1 = radian_degree(lat1)\n    lat2 = radian_degree(lat2)\n    lon1 = radian_degree(lon1)\n    lon2 = radian_degree(lon2)\n    y = math.sin(lat2) * math.cos(lon2)\n    x = math.cos(lat1) * math.sin(lon2) - math.sin(lat1) * math.cos(lon2) * math.cos(lat2)\n    d = math.sqrt(y * y + x * x)\n    brng = math.atan2(y, x)\n    brng = math.degrees(brng)\n    brng = (brng + 360) % 360\n    time = get_time_of_day(lat1, lon1, lat2, lon2)\n    return d, time\ndef get_speed_using_radians(rad_distance, rad_time):\n    '''\n    Write a function that takes two distance and time coordinates and returns the speed.\n    '''\n    y = math.sin(rad_time) * math.cos(rad_distance)\n    x = math.cos(rad_time) * math.sin(rad_distance)\n    d = math.sqrt"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree/180)*math.pi\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    index = re.search(pattern, text)\n    if index is not None:\n        start, end = index.span()\n        return text[start:end], start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    start_index = m.start()\n    end_index = m.end()\n    return m, start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = []\n    matches = re.finditer(pattern, text)\n    return matches\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #text = \"A telephone number is 111-222-3333\"\n    #pattern = \"111-[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        print(match.group())\n        print(start)\n        print(end)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return text.find(pattern), len(pattern), text.rfind(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # first case\n    if re.search(pattern, text):\n        return re.search(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if text == '' or pattern == '':\n        return None\n    if type(pattern)!= type(re.compile('')):\n        pattern = re.compile(pattern)\n    lit_start = 0\n    lit_end = 0\n    m = pattern.search(text)\n    if m:\n        lit_start = m.start()\n        lit_end = m.end()\n    return lit_start, lit_end\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result is None:\n        return (None, None, None)\n    else:\n        return (result.group(), result.start(), result.end())\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    results = list()\n    m = re.findall(pattern, text)\n    for match in m:\n        results.append((match, match.start(), match.end()))\n    return results\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    b = [0] * (n+1)\n    b[0] = 1\n    for i in range(1, n+1):\n        for j in range(i, 0, -1):\n            b[j] += b[j-1]\n    return b[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in xrange(n):\n        bell = bell * (i + 1)\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # finding factorial of n\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def factorial(n):\n        if n < 0:\n            return 0\n        elif n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    return factorial(n) / (factorial(n - 1) * factorial(n - 2))\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    return ((1 + (5 ** 0.5)) ** n - 1) / (2 ** 0.5)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bell(n):\n        if n == 0:\n            return 1\n        else:\n            return bell(n - 1) + n\n    return bell(n)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    bell = 1\n    for i in range(1,n+1):\n        bell = bell * (i+1)\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    # for nth bell number,  (n-1)th bell number is (n-2)th bell number\n    # and (n-2)th bell number is (n-3)th bell number\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 0\n    bell[1][1] = 1\n    \n    # nth bell number = (n-1)th bell number + (n-2)th bell number\n    for i in range(2,n+1): \n        for j in range(n,i-1,-1): \n            bell[i][j] = bell[i-1][j-1] + bell[i-1][j] \n            \n    return bell[n][n] \n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    else:\n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + bell_Number(n-1)\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]+list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i == L:\n            continue\n        new_list.append(list1[i])\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Inputs: list1, L\n    # Outputs: List with L removed from the k'th element\n    # remove the k'th element and return the list\n    \n    if L > len(list1):\n        return None\n    else:\n        return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    i = 0\n    while i < L:\n        list1.remove(list1[i])\n        i = i + 1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n    \n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    a = [x for x in list1 if x!= list1[k-1]]\n    return a\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1[:L] + list1[L + 1:]\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return list1\n    else:\n        list1 = list1[0:L-1] + list1[L:]\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Approach-1\n    # if L <= len(list1):\n    #     print(list1[L-1])\n    #     list1.pop(L-1)\n    #     print(list1)\n    # else:\n    #     print('K is out of range')\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    answer = []\n    for i in range(len(test_list)):\n        answer.append(max(test_list[i][N-1]))\n    return answer\n    \n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(zip(*test_list)[N])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    assert len(test_list) >= N\n    return max([max(test_list[i]) for i in range(0, len(test_list), N)])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    res = []\n    for i in range(0, len(test_list)):\n        res.append(max(test_list[i][N]))\n    return max(res)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(lambda x: x[N], test_list))\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    m = []\n    for i in test_list:\n        m.append(i[N])\n    return max(m)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # To help with the matrix size calculation, we will keep track of the length of each list.\n    max_length = len(test_list[0])\n    \n    # We will also keep track of the number of lists in our list.\n    number_of_lists = len(test_list)\n    \n    # In order to calculate the max of then'th column, we will loop through then'th column.\n    for i in range(1, max_length):\n        \n        # We will also need to keep track of the number of lists in our matrix.\n        if len(test_list[i]) == number_of_lists:\n            \n            # We will also keep track of the number of times we need to loop through the list.\n            loop_number = 0\n            \n            # We will also need to keep track of the max in then'th column.\n            max_nth_column = 0\n            \n            # To help with the loop, we will need to keep track of the current max in then'th column.\n            current_max = 0\n            \n            # We will also need to keep track of the current maximum in then'th column.\n            current_max_nth = 0\n            \n            # We will also need to keep track of the current max's value.\n            current_max_nth_value = 0\n            \n            # We will also need to keep track of the current max's position.\n            current_max_nth_position = 0\n            \n            # We will also need to keep track of the current max's length.\n            current_max_nth_length = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height = 0\n            \n            # We will also need to keep track of the current max's width.\n            current_max_nth_width = 0\n            \n            # We will also need to keep track of the current max's width.\n            current_max_nth_width_height = 0\n            \n            # We will also need to keep track of the current max's width.\n            current_max_nth_width_height_length = 0\n            \n            # We will also need to keep track of the current max's width.\n            current_max_nth_width_height_length_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height = 0\n            \n            # We will also need to keep track of the current max's width.\n            current_max_nth_width_height_length_height_length_height_length_height_height = 0\n            \n            # We will also need to keep track of the current max's width.\n            current_max_nth_width_height_length_height_length_height_length_height_height = 0\n            \n            # We will also need to keep track of the current max's width.\n            current_max_nth_width_height_length_height_length_height_length_height_height = 0\n            \n            # We will also need to keep track of the current max's width.\n            current_max_nth_width_height_length_height_length_height_length_height_height_height = 0\n            \n            # We will also need to keep track of the current max's width.\n            current_max_nth_width_height_length_height_length_height_length_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height_height_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height_height_height_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height_height_height_height_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height_height_height_height_height_height_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height = 0\n            \n            # We will also need to keep track of the current max's height.\n            current_max_nth_height_length_height_length_height_length_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_height_heigh"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth_col = []\n    for row in test_list:\n        max_of_nth_col.append(row[N-1])\n    return max(max_of_nth_col)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(max, test_list[N-1]))\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        lst1.append(i[0])\n        lst2.append(i[1])\n    return [lst1, lst2]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst2 = []\n    for i in range(len(lst)):\n        lst2.append([lst[i][0],lst[i][1]])\n    return lst2\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in lst:\n        for j in i:\n            new_lst.append(j)\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [list(x) for x in zip(*lst)]\n    return result\n    \n    \n    \ndef custom_sort(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the list sorted in ascending order.\n    '''\n    lst.sort()\n    return lst\n    \n    \n    \ndef custom_sort_desc(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the list sorted in descending order.\n    '''\n    lst.sort(reverse=True)\n    return lst\n    \n    \n    \ndef custom_reverse(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the list reversed.\n    '''\n    lst.reverse()\n    return lst\n    \n    \n    \ndef custom_remove(lst):  \n    '''\n    Write a python function which takes a list of integers, removes all duplicate values, and returns a list with no duplicates.\n    '''\n    lst2 = []\n    for x in lst:\n        if x not in lst2:\n            lst2.append(x)\n    return lst2\n    \n    \n    \ndef custom_remove_duplicate(lst):  \n    '''\n    Write a python function which takes a list of strings, returns a list without any duplicate values.\n    '''\n    lst2 = []\n    for x in lst:\n        if x not in lst2:\n            lst2.append(x)\n    return lst2\n    \n    \n    \ndef custom_sum(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the sum of all integers in the list.\n    '''\n    s = 0\n    for x in lst:\n        s = s + x\n    return s\n    \n    \n    \ndef custom_sum_desc(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the sum of all integers in the list, descending.\n    '''\n    s = 0\n    for x in lst:\n        s = s + x\n    s = s * -1\n    return s\n    \n    \n    \ndef custom_mean(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the mean of all integers in the list.\n    '''\n    s = 0\n    for x in lst:\n        s = s + x\n    m = s / len(lst)\n    return m\n    \n    \n    \ndef custom_mean_desc(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the mean of all integers in the list, descending.\n    '''\n    s = 0\n    for x in lst:\n        s = s + x\n    m = s / len(lst)\n    m = m * -1\n    return m\n    \n    \n    \ndef custom_median(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the median of all integers in the list.\n    '''\n    lst.sort()\n    if len(lst) % 2 == 0:\n        return (lst[len(lst)//2] + lst[len(lst)//2 - 1]) / 2\n    else:\n        return lst[len(lst)//2]\n    \n    \n    \ndef custom_median_desc(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the median of all integers in the list, descending.\n    '''\n    lst.sort(reverse=True)\n    if len(lst) % 2 == 0:\n        return (lst[len(lst)//2] + lst[len(lst)//2 - 1]) / 2\n    else:\n        return lst[len(lst)//2]\n    \n    \n    \ndef custom_median_low(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the lower median of all integers in the list.\n    '''\n    lst.sort()\n    if len(lst) % 2 == 0:\n        return (lst[len(lst)//2])\n    else:\n        return lst[len(lst)//2 - 1]\n    \n    \n    \ndef custom_median_high(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the higher median of all integers in the list.\n    '''\n    lst.sort()\n    if len(lst) % 2 == 0:\n        return (lst[len(lst)//2])\n    else:\n        return lst[len(lst)//2]\n    \n    \n    \ndef custom_median_low_desc(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the lower median of all integers in the list, descending.\n    '''\n    lst.sort(reverse=True)\n    if len(lst) % 2 == 0:\n        return (lst[len(lst)//2])\n    else:\n        return lst[len(lst)//2 - 1]\n    \n    \n    \ndef custom_median_high_desc(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the higher median of all integers in the list, descending.\n    '''\n    lst.sort(reverse=True)\n    if len(lst) % 2 == 0:\n        return (lst[len(lst)//2])\n    else:\n        return lst[len(lst)//2]\n    \n    \n    \ndef custom_quartiles(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the three quartiles of all integers in the list.\n    '''\n    lst.sort()\n    if len(lst) % 2 == 0:\n        if len(lst) % 4 == 0:\n            return (lst[len(lst)//2 - 1], lst[len(lst)//2], lst[len(lst)//4])\n        else:\n            return (lst[len(lst)//2 - 1], lst[len(lst)//2], lst[len(lst)//4 - 1])\n    else:\n        if len(lst) % 4 == 0:\n            return (lst[len(lst)//2], lst[len(lst)//2 - 1], lst[len(lst)//4])\n        else:\n            return (lst[len(lst)//2], lst[len(lst)//2 - 1], lst[len(lst)//4 - 1])\n    \n    \n    \ndef custom_quartiles_desc(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the three quartiles of all integers in the list, descending.\n    '''\n    lst.sort(reverse=True)\n    if len(lst) % 2 == 0:\n        if len(lst) % 4 == 0:\n            return (lst[len(lst)//2 - 1], lst[len(lst)//2], lst[len(lst)//4])\n        else:\n            return (lst[len(lst)//2 - 1], lst[len(lst)//2], lst[len(lst)//4 - 1])\n    else:\n        if len(lst) % 4 == 0:\n            return (lst[len(lst)//2], lst[len(lst)//2 - 1], lst[len(lst)//4])\n        else:\n            return (lst[len(lst)//2], lst[len(lst)//2 - 1], lst[len(lst)//4 - 1])\n    \n    \n    \ndef custom_quartiles_high(lst):  \n    '''\n    Write a python function which takes a list of integers, returns the two quartiles of all integers in the list.\n    '''\n    ls"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for element in lst:\n        result.append([element[0], element[1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    newList = []\n    for sublist in lst:\n        newList.append([sublist[0], sublist[1]])\n    return newList\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return zip(*lst)\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return []\n    soln = [0]\n    for item in test_list:\n        soln.append(soln[-1] + item)\n    return soln\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return reduce(lambda x,y:x+y, test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumul_sum = []\n    if len(test_list) <= 1:\n        return sum(test_list)\n    else:\n        cumul_sum.append(test_list[0])\n        cumul_sum.append(test_list[1])\n        for i in xrange(2, len(test_list)):\n            cumul_sum.append(test_list[i] + cumul_sum[i-2])\n        return cumul_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in range(len(test_list)):\n        cum_sum.append(sum(test_list[:i+1]))\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [(index, sum(test_list[:index + 1])) for index, value in enumerate(test_list)]\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in range(len(test_list)):\n        cum_sum.append(sum(test_list[:i+1]))\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = sorted(test_list, key=float)\n    result = 0\n    \n    for i in test_list:\n        result += i\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in range(len(test_list)):\n        # Cumulative sum of all the values in the list\n        cum_sum.append(sum(test_list[0:i+1]))\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [(index, sum(test_list[:index+1])) for index in range(len(test_list))]\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = [0]\n    for num in test_list:\n        cumulative_sum.append(cumulative_sum[-1] + num)\n    return cumulative_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums)/len(nums) for nums in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    results = []\n    for item in nums:\n        results.append(sum(item)/len(item))\n    return results\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums[0])/len(nums[0]), sum(nums[1])/len(nums[1]), sum(nums[2])/len(nums[2])]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums = list(nums)\n    return [(sum(x)/len(x)) for x in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(x)/len(x)) for x in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in nums:\n        avg_list.append(float(sum(i)) / len(i))\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        averages.append(sum(tup)/len(tup))\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(x)/len(x)) for x in zip(*nums)]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    new_tup = []\n    \n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] % test_tup2[i])\n    \n    return tuple(new_tup)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = tuple(int(tup1) % int(tup2) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return modulo_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"ERROR: Tuple lengths don't match!\")\n    else:\n        res = ()\n        for i in range(len(test_tup1)):\n            res += (test_tup1[i] % test_tup2[i],)\n        print(res)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup_mod = ()\n    for (i,j) in zip(test_tup1, test_tup2):\n        tup_mod += (i%j,)\n    return tup_mod\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Tuples are of different length')\n        return\n    \n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] % test_tup2[i])\n    return tuple(res)\n    "
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # return list(map(lambda x,y:x%y, test_tup1, test_tup2))\n    return [x%y for x,y in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for (t1, t2) in zip(test_tup1, test_tup2):\n        result += (t1 % t2,)\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i]%test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 1\n    if d == 1:\n        return steps\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    visited = [False] * len(steps)\n    if steps[d] == 0:\n        return float('inf')\n    count = 0\n    jumps = [d]\n    visited[d] = True\n    while len(jumps) > 0:\n        count += 1\n        while len(jumps) > 0 and steps[jumps[0]] == 0:\n            jumps.pop(0)\n        if len(jumps) > 0:\n            count += 1\n            step = jumps.pop(0)\n            visited[step] = True\n            new_steps = steps[step+1:]\n            if new_steps[0] > 0:\n                jumps.append(new_steps[0])\n            if new_steps[len(new_steps)-1] > 0:\n                jumps.append(new_steps[len(new_steps)-1])\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps == 0):\n        return 0\n    result = 0\n    if (steps > d):\n        result = result + min_Jumps(steps - d, d)\n    else:\n        for i in range(1, d + 1):\n            result = result + min_Jumps(steps - i, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d > steps:\n        return -1\n    if steps == 1:\n        return 1\n    return min_Jumps(steps - 1, d - 1) + min_Jumps(steps - 2, d - 2) + min_Jumps(steps - 3, d - 3)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1:\n        return 0\n    elif steps == 2:\n        return 1 if d == 0 or d == 1 else 2\n    else:\n        if d == 0 or d == 1:\n            return min_Jumps(steps - 1, 0) + min_Jumps(steps - 2, d)\n        else:\n            return min_Jumps(steps - 1, 1) + min_Jumps(steps - 2, d - 1) + min_Jumps(steps - 3, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: return 0\n    \n    def min_Jumps(d, i, j, steps):\n        if i < 0 or j < 0:\n            return float('inf')\n        elif d == 0 and i == 0 and j == 0:\n            return 1\n        elif d > 0 and i == 0 and j == 0:\n            return float('inf')\n        elif d == 0 and i == 0:\n            return float('inf')\n        else:\n            return min(min_Jumps(d, i-1, j, steps) + 1, min_Jumps(d, i, j-1, steps) + 1, min_Jumps(d, i-1, j-1, steps) + 1)\n    \n    return min_Jumps(d, len(steps)-1, len(steps[0])-1, steps)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = [0]\n    for i in range(1, len(steps)):\n        jumps.append(float('inf'))\n        for j in range(1, min(i, d) + 1):\n            if steps[i] - steps[i - j] <= j:\n                jumps[i] = min(jumps[i], jumps[i - j] + 1)\n    return jumps[-1]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    #print n\n    dp = [float(\"inf\") for i in range(n)]\n    dp[0] = 0\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d < 0 or steps < 0:\n        return -1\n    if steps == 0:\n        return -1\n    if d == 1:\n        return 1\n    count = min_Jumps(steps-1, d-1)\n    if d >= 2 and steps >= 2:\n        count = min(count, 1 + min_Jumps(steps-2, d-2))\n    if d >= 3 and steps >= 3:\n        count = min(count, 1 + min_Jumps(steps-3, d-3))\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (d == 0):\n        return 0\n    if (d < 0):\n        return -1\n    if (steps == 0):\n        return -1\n    min = sys.maxint - 1\n    for i in xrange(1, steps + 1):\n        if (i + d < steps):\n            if (min > min_Jumps(steps - i, d - 1) + 1):\n                min = min_Jumps(steps - i, d - 1) + 1\n    return min\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)<len(nums2):\n        min_len=len(nums1)\n        max_len=len(nums2)\n    else:\n        min_len=len(nums2)\n        max_len=len(nums1)\n    result=[]\n    for i in range(0,min_len):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1 = list(nums1)\n    nums2 = list(nums2)\n    ans = []\n    for i in range(len(nums1)):\n        ans.append(nums1[i] / nums2[i])\n    return ans\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [float(a)/b for a,b in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    i,j = 0,0\n    result = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            i += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            result.append(nums1[i])\n            i += 1\n            j += 1\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i] / nums2[i])\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]/nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # find len of the lists\n    len1 = len(nums1)\n    len2 = len(nums2)\n    # if len1 == len2:\n    #     return sum([num1/num2 for num1, num2 in zip(nums1,nums2)])\n    # elif len1 > len2:\n    #     return sum([num1/num2 for num1, num2 in zip(nums1[:len2],nums2)])\n    # elif len1 < len2:\n    #     return sum([num1/num2 for num1, num2 in zip(nums1,nums2[:len1])])\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]/nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    for x,y in zip(nums1,nums2):\n        res.append(x/y)\n    return res\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # result = ''\n    # for i in test_str:\n    #     if i.isdigit():\n    #         result = result + i\n    # return result + ''.join(sorted(test_str.replace('',''),reverse=True))\n    return ''.join(sorted(test_str, key = lambda x: x.isdigit()))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    try:\n        test_str = str(test_str)\n        res = ''.join(sorted(filter(lambda x: x.isdigit(), test_str)))\n    except:\n        res = 'Error'\n    return res\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    start_str = ''\n    start_num = ''\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            start_num += test_str[i]\n        else:\n            start_str += test_str[i]\n    start_num = int(start_num)\n    start_str = start_str + str(start_num)\n    return start_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    res_str = []\n    for i in test_str:\n        if i.isdigit():\n            res_str.append(i)\n    return ''.join(res_str)+''.join(sorted(set(test_str).difference(set(res_str))))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = list(filter(lambda x:x.isdigit(), test_str))\n    return ''.join(sorted(num_list)+list(filter(lambda x:not x.isdigit(),test_str)))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return test_str\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].isdigit():\n            count += 1\n    return test_str[count:] + test_str[:count]\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    start = 0\n    while start < len(test_str):\n        if test_str[start].isalpha():\n            start += 1\n        else:\n            end = start + 1\n            while test_str[end].isalpha():\n                end += 1\n            # move the string to end\n            for i in range(start, end):\n                test_str = test_str[:i] + test_str[i+1:] + test_str[i]\n            start = end\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_list = list(test_str)\n    start_index = 0\n    end_index = len(str_list) - 1\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = []\n    num = '0123456789'\n    for char in test_str:\n        if char in num:\n            result.append(char)\n    for char in test_str:\n        if char not in num:\n            result.append(char)\n    return ''.join(result)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return ''\n    char_list = list(test_str)\n    num_list = [c for c in char_list if c.isdigit()]\n    str_list = [c for c in char_list if not c.isdigit()]\n    return ''.join(num_list) + ''.join(str_list)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    d = {}\n    s = {}\n    for i in a:\n        d[i] = 1\n    for i in a:\n        s[i] = 1\n    for i in a:\n        for j in a:\n            if i!= j and i % j == 0 and d[j] == 1:\n                d[j] = 0\n                s[j] += s[i]\n    return max(s.values())\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    output = [0]*n\n    smallest_divisor = 0\n    for i in range(n):\n        output[i] = smallest_divisor\n        if a[i]%smallest_divisor == 0:\n            smallest_divisor = a[i]\n        else:\n            if a[i] > smallest_divisor:\n                smallest_divisor = a[i]\n    for i in range(n-1, -1, -1):\n        if smallest_divisor == a[i]:\n            output[i] = i\n        else:\n            output[i] = n-1\n    return output\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    if len(a) <= 1:\n        return len(a)\n    if len(a) == 2:\n        if a[0] % a[1] == 0:\n            return 2\n        else:\n            return 1\n    if len(a) == 3:\n        if a[0] % a[1] == 0 and a[1] % a[2] == 0:\n            return 3\n        elif a[0] % a[1] == 0:\n            return 2\n        elif a[0] % a[2] == 0:\n            return 2\n        elif a[1] % a[2] == 0:\n            return 2\n        else:\n            return 1\n    if len(a) == 4:\n        if a[0] % a[1] == 0 and a[1] % a[2] == 0 and a[2] % a[3] == 0:\n            return 4\n        elif a[0] % a[1] == 0 and a[1] % a[2] == 0:\n            return 3\n        elif a[0] % a[1] == 0:\n            return 2\n        elif a[0] % a[2] == 0 and a[2] % a[3] == 0:\n            return 3\n        elif a[0] % a[3] == 0 and a[3] % a[2] == 0:\n            return 3\n        elif a[0] % a[3] == 0:\n            return 2\n        elif a[1] % a[2] == 0 and a[2] % a[3] == 0:\n            return 3\n        elif a[1] % a[3] == 0 and a[3] % a[2] == 0:\n            return 3\n        elif a[1] % a[3] == 0:\n            return 2\n        elif a[2] % a[3] == 0 and a[3] % a[2] == 0:\n            return 3\n        elif a[2] % a[3] == 0:\n            return 2\n        else:\n            return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subset = set()\n    for number in a:\n        if number % 2 == 0:\n            subset.add(number)\n    return len(subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    dp = [0 for i in range(len(a))]\n    for i in range(1, len(a)):\n        for j in range(0, i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    from collections import Counter\n    def is_divisible(a, b):\n        '''\n        Check if a and b are divisible by the same number\n        '''\n        return (a%b == 0) or (b%a == 0)\n    \n    def largest_subset_helper(a, b, s):\n        '''\n        Recursive function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n        '''\n        if not a:\n            return s\n        if is_divisible(a[0], b[0]):\n            s += 1\n            return largest_subset_helper(a[1:], b[1:], s)\n        else:\n            s = largest_subset_helper(a[1:], b[1:], s)\n            return largest_subset_helper(a[1:], b, s)\n    \n    c = Counter(a)\n    return largest_subset_helper(a, [b for b in c if b > 1], 0)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = set(a)\n    max_length = len(a)//2\n    while len(s) > max_length:\n        t = a[:]\n        for i in range(len(a)//2):\n            if (a[i] % a[len(a) - i - 1])!= 0:\n                break\n            if i == len(a)//2 - 1:\n                s.add(a[i])\n        a = t[:]\n    return len(s)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    d = {}\n    for i in a:\n        d[i] = d.get(i,0) + 1\n    n = len(a)\n    s = 0\n    for i in range(1,n+1):\n        if i in d and (i+1) in d:\n            s = max(s,d[i] + d[i+1])\n    return s\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    d = {}\n    result = 0\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    for i in d:\n        d[i] -= 1\n        if d[i] >= 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0] if len(arr1) > len(arr2) else arr2[0]\n    n1 = len(arr1)\n    n2 = len(arr2)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2!= 0:\n        return arr1[n/2]\n    else:\n        return (arr1[n/2 - 1] + arr1[n/2]) / 2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m, n = len(arr1), len(arr2)\n    if m > n:\n        arr1, arr2 = arr2, arr1\n        m, n = n, m\n    if m == 0:\n        return -1\n    if m == 1:\n        return (arr1[0]+arr2[n//2])/2\n    if n == 1:\n        return (arr1[m//2]+arr2[0])/2\n    imin, imax, half_len = 0, m, (m+n+1)//2\n    while imin <= imax:\n        i = (imin+imax)//2\n        j = half_len - i\n        if i < m and arr2[j-1] > arr1[i]:\n            imin = i+1\n        elif i > 0 and arr1[i-1] > arr2[j]:\n            imax = i-1\n        else:\n            if i == 0:\n                max_of_left = arr2[j-1]\n            elif j == 0:\n                max_of_left = arr1[i-1]\n            else:\n                max_of_left = max(arr1[i-1], arr2[j-1])\n            if (m+n) % 2 == 1:\n                return max_of_left\n            if i == m:\n                min_of_right = arr2[j]\n            elif j == n:\n                min_of_right = arr1[i]\n            else:\n                min_of_right = min(arr1[i], arr2[j])\n            return (max_of_left+min_of_right)/2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # make sure that both arrays are of same length\n    if n == 1:\n        return float(max(arr1[0], arr2[0]))\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    else:\n        arr1 = arr1[n//2:]\n        arr2 = arr2[n//2:]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n / 2] + arr2[n / 2 - 1]) / 2\n    else:\n        return arr1[n / 2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    arr = arr1 + arr2\n    arr.sort()\n    mid = n // 2\n    if n % 2:\n        return arr[mid]\n    else:\n        return (arr[mid] + arr[mid - 1]) / 2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        arr1_mid = n/2\n        arr2_mid = (n/2) - 1\n        return (get_median(arr1, arr1_mid, n/2) + get_median(arr2, arr2_mid, n/2)) / 2\n    else:\n        arr1_mid = (n/2)\n        arr2_mid = arr1_mid\n        return (get_median(arr1, arr1_mid, n/2) + get_median(arr2, arr2_mid, n/2)) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # The minimum number of elements in the merged array\n    min_len = (n + 1) // 2\n    \n    # If there are odd elements, get the median of the middle two elements\n    if (n % 2) == 1:\n        return arr1[min_len - 1] if arr1[min_len - 1] < arr2[min_len - 1] else arr2[min_len - 1]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    # your code here\n    return nums ** n\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    import operator\n    return map(operator.pow,nums,itertools.repeat(n))\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num**n)\n    return results\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(n):\n        for j in range(len(nums)):\n            nums[j] = nums[j]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \ndef is_prime(n):\n    '''\n    This function is a program to check if a given number is prime or not.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2,int(n**0.5)+1):\n            if n%i == 0:\n                return False\n        return True\n    \ndef binary_search(nums,target,start,end):\n    '''\n    This function is to implement binary search.\n    '''\n    if start > end:\n        return -1\n    mid = (start+end)//2\n    if nums[mid] == target:\n        return mid\n    elif target > nums[mid]:\n        return binary_search(nums,target,mid+1,end)\n    elif target < nums[mid]:\n        return binary_search(nums,target,start,mid-1)\n    \ndef remove_duplicates(nums):\n    '''\n    This function is to remove duplicates from a list.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return len(nums)\n    else:\n        j = 1\n        for i in range(1,len(nums)):\n            if nums[i]!= nums[j-1]:\n                nums[j] = nums[i]\n                j += 1\n        return j\n    \ndef search(nums,target):\n    '''\n    This function is to search for a number in a list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n    \ndef merge_sort(nums):\n    '''\n    This function is to implement merge sort.\n    '''\n    if len(nums) < 2:\n        return nums\n    mid = len(nums)//2\n    left = merge_sort(nums[:mid])\n    right = merge_sort(nums[mid:])\n    return merge(left,right)\n    \ndef merge(left,right):\n    '''\n    This function is to merge two lists.\n    '''\n    if len(left) == 0:\n        return right\n    elif len(right) == 0:\n        return left\n    elif left[0] < right[0]:\n        return [left[0]] + merge(left[1:],right)\n    else:\n        return [right[0]] + merge(left,right[1:])\n    \ndef shell_sort(nums):\n    '''\n    This function is to implement shell sort.\n    '''\n    if len(nums) < 2:\n        return nums\n    gap = len(nums)//2\n    while gap > 0:\n        for i in range(gap,len(nums)):\n            temp = nums[i]\n            j = i\n            while j >= gap and temp < nums[j-gap]:\n                nums[j] = nums[j-gap]\n                j -= gap\n            nums[j] = temp\n        gap = gap//2\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\ndef is_lower(string):\n    '''\n    Write a python function to convert a given string to lowercase.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for i in string:\n        if i.isupper():\n            return True\n    return False\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.append(newList.pop(0))\n    return newList\n    \ndef Sum_List(List):\n    '''\n    Write a python function to sum the elements of a list.\n    '''\n    Sum = 0\n    for element in List:\n        Sum = Sum + element\n    return Sum\n    \ndef Factorial(number):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1,number + 1):\n        fact = fact * i\n    return fact\n    \ndef Reverse(List):\n    '''\n    Write a python function to reverse a list.\n    '''\n    for i in range(len(List)/2):\n        List[i], List[-i-1] = List[-i-1], List[i]\n    return List\n    \ndef Remove_Duplicates(List):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    List2 = []\n    for element in List:\n        if element not in List2:\n            List2.append(element)\n    return List2\n    \ndef Print_List(List):\n    '''\n    Write a python function to print a list.\n    '''\n    for element in List:\n        print element,\n        \ndef Bubble_Sort(List):\n    '''\n    Write a python function to sort a list using bubble sort.\n    '''\n    for i in range(len(List)):\n        for j in range(len(List) - i - 1):\n            if List[j] > List[j+1]:\n                List[j],List[j+1] = List[j+1],List[j]\n    return List\n    \ndef Find_Index(List,element):\n    '''\n    Write a python function to find the index of an element in a list.\n    '''\n    for i in range(len(List)):\n        if List[i] == element:\n            return i\n    return -1\n    \ndef Insert(List,element,index):\n    '''\n    Write a python function to insert an element in a list at a given index.\n    '''\n    if len(List) == 0:\n        List.append(element)\n    elif index == 0:\n        List.insert(0,element)\n    else:\n        List.insert(index,element)\n    return List\n    \ndef Remove(List,element):\n    '''\n    Write a python function to remove an element from a list.\n    '''\n    List.remove(element)\n    return List\n    \ndef Maximum(List):\n    '''\n    Write a python function to find the maximum element of a list.\n    '''\n    maximum = List[0]\n    for element in List:\n        if element > maximum:\n            maximum = element\n    return maximum\n    \ndef Minimum(List):\n    '''\n    Write a python function to find the minimum element of a list.\n    '''\n    minimum = List[0]\n    for element in List:\n        if element < minimum:\n            minimum = element\n    return minimum\n    \ndef BinarySearch(List,element):\n    '''\n    Write a python function to find the index of an element in a sorted list using binary search.\n    '''\n    low = 0\n    high = len(List) - 1\n    while low <= high:\n        mid = (high + low) / 2\n        if List[mid] < element:\n            low = mid + 1\n        elif List[mid] > element:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n    \ndef Merge(List1,List2):\n    '''\n    Write a python function to merge two sorted lists into a new one.\n    '''\n    List = []\n    i = 0\n    j = 0\n    while i < len(List1) and j < len(List2):\n        if List1[i] < List2[j]:\n            List.append(List1[i])\n            i = i + 1\n        elif List1[i] > List2[j]:\n            List.append(List2[j])\n            j = j + 1\n        else:\n            List.append(List1[i])\n            i = i + 1\n            List.append(List2[j])\n            j = j + 1\n    while i < len(List1):\n        List.append(List1[i])\n        i = i + 1\n    while j < len(List2):\n        List.append(List2[j])\n        j = j + 1\n    return List\n    \ndef Quick_Sort(List):\n    '''\n    Write a python function to sort a list using quick sort.\n    '''\n    if len(List) <= 1:\n        return List\n    else:\n        pivot = List[0]\n        left = [i for i in List[1:] if i <= pivot]\n        right = [i for i in List[1:] if i > pivot]\n    return Quick_Sort(left) + [pivot] + Quick_Sort(right)\n    \ndef Counting_Sort(List,k):\n    '''\n    Write a python function to count sort a list using counting sort.\n    '''\n    count = [0] * k\n    for element in List:\n        count[element] = count[element] + 1\n    List2 = [0] * len(List)\n    for i in range(k):\n        count[i] = count[i] * i\n    for j in range(len(List)):\n        List2[count[List[j]] - 1] = List[j]\n        count[List[j]] = count[List[j]] - 1\n    return List2\n    \ndef Radix_Sort(List):\n    '''\n    Write a python function to sort a list using radix sort.\n    '''\n    Max = max(List)\n    place = 1\n    while Max / place > 0:\n        Counting_Sort(List,place)\n        place = place * 10\n    return List\n    \ndef Selection_Sort(List):\n    '''\n    Write a python function to sort a list using selection sort.\n    '''\n    for i in range(len(List)):\n        min_i = i\n        for j in range(i+1,len(List)):\n            if List[min_i] > List[j]:\n                min_i = j\n        List[i],List[min_i] = List[min_i],List[i]\n    return List\n    \ndef Insertion_Sort(List):\n    '''\n    Write a python function to sort a list using insertion sort.\n    '''\n    for i in range(1,len(List)):\n        temp = List[i]\n        j = i - 1\n        while j >= 0 and temp < List[j]:\n            List[j + 1] = List[j]\n            j = j - 1\n        List[j + 1] = temp\n    return List\n    \ndef Shell_Sort(List):\n    '''\n    Write a python function to sort a list using shell sort.\n    '''\n    h = 1\n    while h < len(List):\n        h = 3 * h + 1\n    while h >= 1:\n        for i in range(h,len(List)):\n            temp = List[i]\n            j = i\n            while j >= h and temp < List[j-h]:\n                List[j] = List[j-h]\n                j = j - h\n            List[j] = temp\n        h = h/3\n    return List\n    \ndef Heap_Sort(List):\n    '''\n    Write a python function to sort a list using heap sort.\n    '''\n    for i in range(len(List) / 2, -1, -1):\n        Heapify(List,i,len(List))\n    for i in range(len(List) - 1, 0, -1):\n        List[0], List[i] = List[i], List[0]\n        Heapify(List,0,i)\n    return List\n    \ndef Heapify(List,i,n):\n    '''\n    Write a python function to heapify a list.\n    '''\n    temp = List[i]\n    j = 2 * i + 1\n    while j < n:\n        if j+1 < n and List[j] < List[j+1]:"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    "
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # newList = list(newList)\n    # newList[0],newList[-1] = newList[-1],newList[0]\n    # return newList\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # make a copy of the list\n    newListCopy = newList[:]\n    \n    # assign the first element to the last element\n    newListCopy[0], newListCopy[-1] = newListCopy[-1], newListCopy[0]\n    \n    return newListCopy\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    newList.remove(newList[0])\n    newList.append(first)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[-1] = first\n    newList[0] = last\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3**(1/2) * r**2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3*pi*(r**2)\n    \n    \nprint \"The area of the largest triangle inscribed in a semicircle with radius 3 is %s\" %triangle_area(3)\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Definition of variables\n    a,b,c,r = [float(x) for x in input().split()]\n    s = (a+b+c)/2\n    area = sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3 * math.sqrt(r**2 * (1-r))\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = pi * r**2/4\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = math.pi * r**2/4\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if (r < 0) :\n        print \"Invalid Radius\"\n    else :\n        r_1 = r\n        r_2 = 2*r\n        area = 2*r_1*r_1/5 - r_2*r_2/5\n        print \"Area of the largest triangle inscribed in a semicircle with radius \", r, \" is \", area \n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math \n    if r < 0 :\n        return 'The radius must be positive'\n    else :\n        return 1/2 * math.pi * r**2 \n        \ndef binary_search(sorted_list, x) :\n    '''\n    Write a python function that returns the index of the element that is closest to a given input value.\n    \n    The list must be sorted in ascending order.\n    \n    Input : - sorted_list : a sorted list of numbers\n    \n    Input : - x : a number\n    \n    Output : - index : the index of the element that is closest to x.\n    \n    Example :\n    \n    Input : - sorted_list = [0,1,2,3,4,5]\n    \n    Input : - x = 3\n    \n    Output : - 3\n    '''\n    low = 0\n    high = len(sorted_list)-1\n    \n    while high >= low :\n        mid = (high + low) // 2\n        if sorted_list[mid] == x :\n            return mid\n        elif sorted_list[mid] < x :\n            low = mid + 1\n        else :\n            high = mid - 1\n            \n    return low \n    \ndef is_prime(num) :\n    '''\n    Write a python function that returns True if a given number is a prime number, False otherwise.\n    \n    A prime number is a positive integer greater than 1 that has no positive divisors other than 1 and itself.\n    '''\n    if num > 1 :\n        for i in range(2,num) :\n            if num % i == 0 :\n                return False\n        return True \n    else :\n        return False\n        \ndef is_palindrome(s) :\n    '''\n    Write a python function that returns True if a given string is a palindrome, False otherwise.\n    \n    A string is a palindrome if it reads the same forwards and backwards.\n    '''\n    if len(s) % 2 == 0 :\n        return s[0:len(s)//2] == s[len(s)-1:len(s)-1-len(s)//2:-1]\n    else :\n        return s[0:len(s)//2] == s[len(s)-1-len(s)//2:-1]\n        \ndef is_anagram(s, t) :\n    '''\n    Write a python function that returns True if two given strings are anagrams of each other, False otherwise.\n    \n    Two strings are anagrams if they contain the same letters but in a different order.\n    \n    For example, 'abcd' and 'dabc' are anagrams.\n    \n    However, 'abcd' and 'badc' are not anagrams.\n    '''\n    if len(s)!= len(t) :\n        return False\n    s_char = list(s)\n    t_char = list(t)\n    for i in s_char :\n        if i in t_char :\n            t_char.remove(i)\n        else :\n            return False \n    return True\n    \ndef is_anagram_in_trie(t, s) :\n    '''\n    Write a python function that returns True if a given string is an anagram of a string in a trie structure, False otherwise.\n    \n    A trie is a kind of tree, where each node has at most 3 children.\n    \n    Each node in the trie can store a character, a string, or an integer.\n    \n    The node containing the given string is called the root node.\n    \n    A string is an anagram of a string if it can be rearranged to form the string, and the rearrangement equals the original string.\n    \n    For example, 'abc' is an anagram of 'cba', while 'bad' is not.\n    \n    Example :\n    \n    Input : - t : a trie structure\n    \n    Input : - s : a string\n    \n    Output : - True if the string s is an anagram of a string in the trie structure t, False otherwise.\n    \n    Example :\n    \n    Input : - t : {'a':{'b':{'c':{'d':{'e':'d', 'f':{'g':{'h':{'i':{'j':{'k':'i', 'l':'h'}}}}}\n    \n    Input : - s : 'kajfdljkiad'\n    \n    Output : - True\n    '''\n    from collections import deque\n    if len(t) == 0 :\n        return False\n    s_char = list(s)\n    t_char = deque()\n    for i in s :\n        t_char.append(i)\n    for i in t :\n        if t[i] :\n            if i in t_char :\n                t_char.popleft()\n            else :\n                return False\n    return True\n    \ndef nth_row_pascal(n) :\n    '''\n    Write a python function that returns the n-th row of the Pascal's triangle.\n    \n    Example :\n    \n    Input : - n = 0\n    \n    Output : - [1]\n    \n    Input : - n = 1\n    \n    Output : - [1, 1]\n    \n    Input : - n = 2\n    \n    Output : - [1, 2, 1]\n    \n    Input : - n = 3\n    \n    Output : - [1, 3, 3, 1]\n    '''\n    from copy import deepcopy\n    \n    if n == 0 :\n        return [1]\n    else :\n        t = [1, 1]\n        for i in range(n-1) :\n            a = deepcopy(t)\n            for j in range(len(t)-1) :\n                t[j] = t[j] + t[j+1]\n            t.append(1)\n        return t\n        \ndef generate_all_sublists(s) :\n    '''\n    Write a python function that returns a list containing all the sublists of a given list.\n    \n    Example :\n    \n    Input : - s = [1,2,3]\n    \n    Output : - [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n    \n    Input : - s = [1]\n    \n    Output : - [[],[1]]\n    \n    Input : - s = []\n    \n    Output : - []\n    '''\n    if len(s) == 0 :\n        return [[]]\n    else :\n        l = generate_all_sublists(s[1:])\n        return [[s[0]] + i for i in l] + l\n        \ndef find_duplicate_number(arr) :\n    '''\n    Write a python function that returns the duplicate number of an array, if there is one.\n    \n    If the array contains more than one duplicate number, you must return the smallest one.\n    \n    If the array contains no duplicate number, you must return None.\n    \n    Example :\n    \n    Input : - arr = [1,2,3,4,3,5]\n    \n    Output : - 3\n    '''\n    l = len(arr)\n    for i in range(l) :\n        if arr[i]!= i+1 :\n            if arr[arr[i]-1] == arr[i] :\n                return arr[i]\n            else :\n                arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n    return None\n        \ndef coin_change(s) :\n    '''\n    Write a python function that returns the minimum number of coins that you need to make a change from coins of given denominations.\n    \n    Input : - s = [1, 2, 3]\n    \n    Output : - 3\n    \n    Input : - s = [2, 1, 3]\n    \n    Output : - 4\n    '''\n    l = len(s)\n    t = [i for i in range(l)]\n    for i in range(l) :\n        for j in range(i) :\n            if s[j]!= s[i] :\n                if s[j]+s[i] < s[i] :\n                    t[i] = min(t[i], 1+t[j])\n    return t[l-1]\n        \nde"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (r**2) * (3 / 2)\n    return round(a, 2)\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math \n    n = math.ceil(r)\n    S = 0 \n    for i in range(n) :\n        s = r*(i+1)/2\n        S = S + s*(s - 1)*3.14159265358979/4\n    return S\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start > end:\n        return None\n    if end - start == 1:\n        if array[end] == end + 1:\n            return end + 1\n        else:\n            return start\n    if array[start]!= start:\n        return start\n    mid = start + ((end - start) / 2)\n    if array[mid] == mid:\n        return find_First_Missing(array,mid + 1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    # We will use the binary search to find the starting index of the smallest missing number.\n    # This is the index of the first missing number after the starting index.\n    # If the array is sorted, then the first missing number is the first element which is\n    # greater than the element on its right, and the element on its left is less than or equal to\n    # the element on its right.\n    # If the array is not sorted, then we will find the index of the first missing number.\n    # This is the index of the first missing number after the starting index.\n    # If the array is sorted, then the first missing number is the first element which is\n    # greater than the element on its right, and the element on its left is less than or equal to\n    # the element on its right.\n    # If the array is not sorted, then we will find the index of the first missing number.\n    # This is the index of the first missing number after the starting index.\n    # We will do this recursively, until we find the smallest missing number.\n    if end-start == 1:\n        # The list is of size 1, then we cannot find a missing number.\n        return -1\n    # We will find the mid index.\n    mid = start+end//2\n    # If the mid index is the first missing number, then the mid index is the smallest missing number.\n    if array[mid] - array[start] == 1:\n        return array[start]\n    # If the mid index is greater than the first missing number, then the smallest missing number\n    # is between the mid index and the end index.\n    if array[mid] - array[start] > 1:\n        return find_First_Missing(array,start,mid)\n    # If the mid index is less than the first missing number, then the smallest missing number\n    # is between the start index and the mid index.\n    else:\n        return find_First_Missing(array,mid,end)\n    \n    \ndef main():\n    array = [2,3,4,6,7,8,9]\n    array = [3,4,5,6,7,8]\n    array = [0,1,2,3]\n    array = [0,1,2]\n    array = [1,3,5,7]\n    array = [1,2,3,4,5,6,7,8,9]\n    array = [1,2,3,4,5,6,7,8]\n    array = [1,2,3,4,5,6,7,8,9,10]\n    array = [1,2,3,4,5,6,7,8,9]\n    array = [1,2,3,4,5,6,7,8,9,10]\n    array = [1,2,3,4,5,6,7,8,9]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n    array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,2"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start < end:\n        mid = (start + end) // 2\n        if (mid == array[mid] and mid == array[mid - 1]):\n            return find_First_Missing(array,mid + 1, end)\n        elif mid > array[mid]:\n            return find_First_Missing(array,start,mid)\n        else:\n            return find_First_Missing(array,mid + 1, end)\n    else:\n        return start\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #array=[0,1,2,3,4]\n    #start=0\n    #end=None\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return -1\n    elif start==end:\n        if array[start]!=start+1:\n            return start+1\n        else:\n            return start+2\n    elif array[start]!=start+1:\n        return start+1\n    elif array[end]!=end+1:\n        return end+1\n    else:\n        mid=(start+end)/2\n        if array[mid]!=mid+1:\n            return mid+1\n        else:\n            return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>=end:\n        return 1\n    if array[start]!=start+1:\n        return start+1\n    return find_First_Missing(array,start+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    # If the list is empty then the smallest missing number is none\n    if end == 0:\n        return None\n    \n    # If the element is less than the start of the array then it is the smallest missing number\n    if array[start] > array[end-1]:\n        return array[start]\n    \n    # If the element is greater than the end of the array then it is the smallest missing number\n    if array[start] < array[end-1]:\n        return array[end-1] + 1\n    \n    # Once we find the first element that is not greater than the array then it is the smallest missing number\n    return find_First_Missing(array, start+1, end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start > end:\n        return None\n    mid = (end+start)//2\n    if array[mid]==mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if array[mid] - mid - 1 < 0:\n        return mid + 1\n    elif array[mid] - mid - 1 > 0:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    if start > end:\n        return 0\n    elif start == end:\n        if array[start] is None:\n            return start + 1\n        else:\n            return array[start] + 1\n    else:\n        mid = (start + end) // 2\n        if array[mid] > mid:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \ndef convert_to_base(decimal_number, base):\n    '''\n    Write a function to convert a given number into a string in a given base.\n    '''\n    converted_string = []\n    while decimal_number > 0:\n        remainder = decimal_number % base\n        converted_string.insert(0, str(remainder))\n        decimal_number = decimal_number // base\n    return ''.join(converted_string)\n    \ndef sort_anagrams(list_of_strings):\n    '''\n    Write a function that sorts a list of anagrams by length.\n    '''\n    return sorted(list_of_strings, key=len)\n    \ndef is_rotation(string_a, string_b):\n    '''\n    Write a function to check if one word is a rotation of another word.\n    '''\n    return string_a in string_b + string_b\n    \ndef is_permutation(string_a, string_b):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(string_a)!= len(string_b):\n        return False\n    string_a = ''.join(sorted(string_a))\n    string_b = ''.join(sorted(string_b))\n    if string_a == string_b:\n        return True\n    return False\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    string_length = len(string)\n    sub_string_length = len(sub_string)\n    occurrences = 0\n    for i in range(0, string_length - sub_string_length + 1):\n        if string[i:i + sub_string_length] == sub_string:\n            occurrences += 1\n    return occurrences\n    \ndef palindrome_permutation(string):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n    is_odd = False\n    for count in char_count.values():\n        if count % 2!= 0:\n            if is_odd:\n                return False\n            else:\n                is_odd = True\n    return True\n    \ndef roman_to_integer(string):\n    '''\n    Write a function to convert a roman numeral to an integer.\n    '''\n    roman_numeral_map = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n    }\n    if not string or len(string) <= 0:\n        return 0\n    current_char = string[0]\n    sum = roman_numeral_map[current_char]\n    for i in range(1, len(string)):\n        previous_char = current_char\n        current_char = string[i]\n        if roman_numeral_map[previous_char] < roman_numeral_map[current_char]:\n            sum -= roman_numeral_map[previous_char]\n        else:\n            sum += roman_numeral_map[current_char]\n    return sum\n    \ndef find_missing_letter(letters, string):\n    '''\n    Write a function to find the missing letter in a string.\n    '''\n    for letter in string:\n        if letter not in letters:\n            return letter\n    return \"\"\n    \ndef is_letter_only(string):\n    '''\n    Write a function to check if a string is made up of only letters.\n    '''\n    if not string or len(string) == 0:\n        return False\n    for char in string:\n        if not char.isalpha():\n            return False\n    return True\n    \ndef is_number_only(string):\n    '''\n    Write a function to check if a string is made up of only numbers.\n    '''\n    if not string or len(string) == 0:\n        return False\n    for char in string:\n        if not char.isdigit():\n            return False\n    return True\n    \ndef is_number_lower_than_ten(string):\n    '''\n    Write a function to check if a string is made up of numbers in the range [0, 10].\n    '''\n    if not string or len(string) == 0:\n        return False\n    for char in string:\n        if not char.isdigit():\n            return False\n    return True\n    \ndef find_missing_number(numbers, string):\n    '''\n    Write a function to find the missing number in a string of digits.\n    '''\n    numbers_list = list(map(int, numbers))\n    string_list = list(map(int, string))\n    difference_sum = 0\n    for number in string_list:\n        difference_sum += number\n    for number in numbers_list:\n        difference_sum -= number\n    return difference_sum\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string) <= 1:\n        return True\n    mid = len(string) // 2\n    if len(string) % 2 == 0:\n        left = string[0:mid]\n        right = string[mid:]\n        return left == right[::-1]\n    else:\n        left = string[0:mid]\n        right = string[mid + 1:]\n        return left == right[::-1]\n    \ndef is_first_last_same(string):\n    '''\n    Write a function to check if the first and last characters are the same.\n    '''\n    return string[0] == string[-1]\n    \ndef is_substring(string, sub_string):\n    '''\n    Write a function to check if a string is a substring.\n    '''\n    return sub_string in string\n    \ndef is_permutation_of_string(string_a, string_b):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(string_a)!= len(string_b):\n        return False\n    string_a = ''.join(sorted(string_a))\n    string_b = ''.join(sorted(string_b))\n    if string_a == string_b:\n        return True\n    return False\n    \ndef is_anagram(string_a, string_b):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(string_a)!= len(string_b):\n        return False\n    string_a = ''.join(sorted(string_a))\n    string_b = ''.join(sorted(string_b))\n    if string_a == string_b:\n        return True\n    return False\n    \ndef count_occurences(string, sub_string):\n    '''\n    Write a function to count the number of occurences of a substring in a string.\n    '''\n    occurences = 0\n    string_length = len(string)\n    sub_string_length = len(sub_string)\n    for i in range(0, string_length - sub_string_length + 1):\n        if string[i:i + sub_string_length] == sub_string:\n            occurences += 1\n    return occurences\n    \ndef split_to_substrings(string, delimiter):\n    '''\n    Write a function to split a string into substrings based on a delimiter.\n    '''\n    if not string or len(string) == 0:\n        return []\n    result = []\n    start = 0\n    end = len(string)\n    while start < len(string):\n        end = string.find(delimiter, start)\n        if end == -1:\n            result.append(string[start:])\n            break\n        result.append(string[start:end])\n        start = end + 1\n    return resul"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if not string:\n        return string\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    list1 = []\n    for char in string:\n        if char =='':\n            list1.append('%20')\n        else:\n            list1.append(char)\n    return ''.join(list1)\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join([s if s!='' else '%20' for s in string])\n    \n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(['%20' if c =='' else c for c in string])\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    #list = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    list2 = []\n    for i in list:\n        if i % 2 == 0:\n            list2.append(i)\n    print(\"Even numbers: \" + str(list2))\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list2=[]\n    for i in list:\n        if i%2==0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    evenlist = []\n    for num in list:\n        if num % 2 == 0:\n            evenlist.append(num)\n    print evenlist\n    return evenlist\n    \n    \ndef CountUnique(string):\n    '''\n    Write a python function to find all the unique letters in a string.\n    '''\n    \n    #use a set to count the occurence of each character in a string\n    unique_set = set(string)\n    #return a list of characters that are in the string\n    return list(unique_set)\n    \n    \ndef CompareString(str1,str2):\n    '''\n    Write a python function to compare the two strings, return -1 if str1 < str2, 1 if str1 > str2, and 0 if equal\n    '''\n    \n    if str1 < str2:\n        return -1\n    elif str1 > str2:\n        return 1\n    else:\n        return 0\n    \n    \ndef DetectCapitalUse(string):\n    '''\n    Write a python function to detect the use of capitals in a string\n    '''\n    \n    #this list will keep track of whether the first letter is upper or not\n    first_upper = []\n    #this list will keep track of whether the last letter is upper or not\n    last_upper = []\n    \n    #this for loop will go through the list and determine if the first letter is upper\n    for letter in string:\n        if letter.isupper():\n            first_upper.append(True)\n        else:\n            first_upper.append(False)\n    \n    #this for loop will go through the list and determine if the last letter is upper\n    for letter in string[::-1]:\n        if letter.isupper():\n            last_upper.append(True)\n        else:\n            last_upper.append(False)\n    \n    #this for loop will print out the results of the above if statements\n    for i in range(len(string)):\n        if first_upper[i] == True and last_upper[i] == True:\n            print \"The string\",string,\"has both first and last letters as uppercase!\"\n            break\n        elif first_upper[i] == True and last_upper[i] == False:\n            print \"The string\",string,\"has the first letter as uppercase but the last letter is not!\"\n            break\n        elif first_upper[i] == False and last_upper[i] == True:\n            print \"The string\",string,\"has the last letter as uppercase but the first letter is not!\"\n            break\n        else:\n            print \"The string\",string,\"does not have any uppercase!\"\n            break\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for item in list:\n        if item % 2 == 0:\n            even_nums.append(item)\n    return even_nums\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [i for i in list if i%2==0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    lst = []\n    for i in list:\n        if i%2 == 0:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenList = []\n    for num in list:\n        if num % 2 == 0:\n            evenList.append(num)\n    return evenList\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list = [2, 4, 6, 8, 10, 12]\n    return [x for x in list if x % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    odds = []\n    for i in list:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return (evens, odds)\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even = []\n    odd = []\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+i, ele[1]+j) for i in range(-1,2) for j in range(-1,2) if not (i == 0 and j == 0)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+i, ele[1]+j) for i in range(-1,2) for j in range(-1,2)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub = [ele]\n    else:\n        sub.append(ele)\n    \n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in ele:\n        for j in range(i-1,i+2):\n            adj.append((j,ele[1]))\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n    if ele[0] > 0:\n        adjac( (ele[0]-1,ele[1]), sub)\n    if ele[0] < N-1:\n        adjac( (ele[0]+1,ele[1]), sub)\n    if ele[1] > 0:\n        adjac( (ele[0],ele[1]-1), sub)\n    if ele[1] < N-1:\n        adjac( (ele[0],ele[1]+1), sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    import itertools\n    return [(ele[0] + x, ele[1] + y) for x, y in itertools.product(range(-1, 2), range(-1, 2)) if (x, y)!= (0, 0)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    from copy import deepcopy\n    return deepcopy(list(filter(lambda x: (x[0] - ele[0])**2 + (x[1] - ele[1])**2 <= 15, [x for x in sub])))\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #make an array of adjacent coordinates\n    adjacent = []\n    for i in range(len(ele)):\n        if i == 0:\n            adjacent.append(ele[0])\n        elif i == len(ele) -1:\n            adjacent.append(ele[i])\n        else:\n            adjacent.append(ele[i])\n            adjacent.append(ele[i-1])\n    return adjacent\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    return [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0] + x, ele[1] + y) for x, y in sub]\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    a = list(text)\n    for i in range(len(a)):\n        if a[i] =='':\n            a[i] = '_'\n        else:\n            a[i] =''\n    return \"\".join(a)\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    a = text.split()\n    b = '_'\n    c =''\n    for i in a:\n        if i =='':\n            b += '_'\n        else:\n            b += i\n    return b\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    #replace whitespace with '_'\n    text = text.replace(' ','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # print(text)\n    s = text.replace('_',' ')\n    s = s.replace(' ', '_')\n    # print(s)\n    return s\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n    \ndef test_replace_spaces():\n    assert(replace_spaces('hello world') == 'hello_world')\n    assert(replace_spaces('hello_world') == 'hello world')\n    assert(replace_spaces('_hello_world') == '_hello_world')\n    assert(replace_spaces('hello_world_') == 'hello world')\n    assert(replace_spaces('hello_world_1') == 'hello_world_1')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text is None:\n        return None\n    if text == '':\n        return ''\n    spaces =''\n    underscore = '_'\n    if spaces in text:\n        text = text.replace(spaces, underscore)\n    elif underscore in text:\n        text = text.replace(underscore, spaces)\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if type(text)!= str:\n        return \"Not a string\"\n    else:\n        return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list == []:\n        return []\n    else:\n        #if all(i == 0 for i in num_list):\n            #return num_list\n        #else:\n        #    if num_list.count(0) > 0:\n        #        index_of_zero = num_list.index(0)\n        #        num_list.pop(index_of_zero)\n        #        num_list.append(0)\n        #        return move_zero(num_list)\n        #    else:\n        #        return move_zero(num_list)\n        while True:\n            index_of_zero = num_list.index(0)\n            num_list.pop(index_of_zero)\n            num_list.append(0)\n            if all(i == 0 for i in num_list):\n                return num_list\n            else:\n                continue\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num == 0:\n            continue\n        else:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    for i in range(n):\n        for j in range(n):\n            if num_list[j] == 0:\n                num_list[j], num_list[i] = num_list[i], num_list[j]\n                break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if isinstance(num_list, list):\n        num_list.sort()\n        num_list.reverse()\n        return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Moving all the zeroes to the end of the list\n    # If the num is 0, just pass\n    # If the num is not 0, swap the value with the last element\n    # Then, return the updated list\n    # If the num is not 0 and the last element is 0, just return the list\n    # You can use the while loop, but we will be using the for loop\n    # If we are using while loop, we should write the function without changing the original list\n    # We will keep the original list, while replacing with the updated list\n    num_list_copy = num_list[:] # we do not want to modify the original list\n    for i in range(len(num_list)):\n        if num_list_copy[i] == 0:\n            num_list_copy[i] = num_list_copy[-1]\n            num_list_copy[-1] = 0\n    return num_list_copy\n    \n    \ndef remove_all_elements(list_1, list_2):\n    '''\n    Write a function to remove all elements in list_2 from list_1\n    '''\n    # Use two while loop to modify the list_1, so we can use the whole list_1\n    # First, copy the list_2 into a new list\n    # Second, use a for loop to remove the element from the original list_1\n    # Third, use the while loop to remove the element from the new list\n    list_2_copy = list_2[:]\n    for i in list_2:\n        list_1.remove(i)\n    while True:\n        try:\n            list_1.remove(list_2_copy[0])\n        except ValueError:\n            break\n    return list_1\n    \n    \ndef move_zeroes(num_list):\n    '''\n    Write a function to move all zeroes to the end of the given list\n    '''\n    # Move all the zeroes to the end of the list\n    # If the num is 0, just pass\n    # If the num is not 0, swap the value with the last element\n    # Then, return the updated list\n    # If the num is not 0 and the last element is 0, just return the list\n    # You can use the while loop, but we will be using the for loop\n    # We will keep the original list, while replacing with the updated list\n    num_list_copy = num_list[:] # we do not want to modify the original list\n    for i in range(len(num_list)):\n        if num_list_copy[i] == 0:\n            num_list_copy[i] = num_list_copy[-1]\n            num_list_copy[-1] = 0\n    return num_list_copy\n    \n    \ndef two_sum(num_list, target):\n    '''\n    Write a function to find if there are any two numbers in the list that add up to the target\n    '''\n    # Use two for loops to check if the num in the list is equal to the target\n    # If the two num are equal, return True, else return False\n    # Don't use the in operator, we will be using the for loop\n    # Don't use the index operator, since we will not be creating a new list\n    for i in range(len(num_list)):\n        for j in range(len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n    \n    \ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate a matrix 90 degrees clockwise\n    '''\n    # We will rotate the matrix 90 degrees\n    # First, we need to check if the matrix is a square matrix\n    # If it is not, we will return False\n    # If it is, we will check if the matrix is a list of lists\n    # If the matrix is not a list of lists, we will return False\n    if len(matrix) == 0:\n        return False\n    for i in matrix:\n        if type(i)!= list:\n            return False\n    # Now, we check if the matrix is a square matrix\n    for i in range(len(matrix)):\n        if len(matrix)!= len(matrix[i]):\n            return False\n    # We have now passed all the test, so we can rotate the matrix\n    # We will keep a counter to keep track of the number of rotations\n    rotations = 0\n    # We will use a while loop to do the rotation\n    # First, we will use a while loop to rotate the matrix clockwise\n    # We will create a new matrix, while preserving the original matrix\n    # Then, we will do the operation on the new matrix, and update the original matrix\n    # We will keep doing this until the counter equals the number of rotations\n    # After we rotate the matrix, we will update the counter\n    # We will use the original matrix as our new matrix, and then update the new matrix\n    # we will increment the rotations counter, and when it is equal to the number of rotations, we will return the matrix\n    new_matrix = [[0 for i in range(len(matrix))] for j in range(len(matrix))]\n    while rotations < len(matrix):\n        for i in range(len(matrix)):\n            for j in range(len(matrix)):\n                new_matrix[i][j] = matrix[len(matrix) - 1 - j][i]\n        for i in range(len(matrix)):\n            for j in range(len(matrix)):\n                matrix[i][j] = new_matrix[i][j]\n        rotations += 1\n    return matrix\n    \n    \ndef move_zeroes(num_list):\n    '''\n    Write a function to move all zeroes to the end of the given list\n    '''\n    # Move all the zeroes to the end of the list\n    # If the num is 0, just pass\n    # If the num is not 0, swap the value with the last element\n    # Then, return the updated list\n    # If the num is not 0 and the last element is 0, just return the list\n    # You can use the while loop, but we will be using the for loop\n    # We will keep the original list, while replacing with the updated list\n    num_list_copy = num_list[:] # we do not want to modify the original list\n    for i in range(len(num_list)):\n        if num_list_copy[i] == 0:\n            num_list_copy[i] = num_list_copy[-1]\n            num_list_copy[-1] = 0\n    return num_list_copy\n    \n    \ndef largest_odd_times(num_list):\n    '''\n    Write a function to find the maximum of the largest element, and the second largest element, etc.\n    '''\n    # Use two while loop to find the largest and second largest element\n    # If the first num is larger than the second num, then store the first num\n    # If the first num is equal to the second num, then store the first num\n    # If the first num is less than the second num, then store the second num\n    # After we do this for all the numbers, we will return the largest and second largest element\n    # Since we will store two numbers, we will check if the first num is larger than the second num\n    # If the first num is larger than the second num, we will store the first num\n    # If the first num is equal to the second num, we will store the first num\n    # If the first num is less than the second num, we will store the second num\n    # After we do this for all the numbers, we will return the largest and second largest element\n    max_list = []\n    for i in range(len(num_list)):\n        if len(max_list) == 0:\n            max_list.append(num_list[i])\n            max_list.append(num_list[i])\n        else:\n            if num_list[i] > max_list[0]:\n                max_list[0] = num_list[i]\n            elif num_list[i] == max_list[0]:\n                max_list.append(num_list[i])\n            else:\n                max_list[1] = num_list[i]\n    return max_list\n    \n    \ndef smallest_odd_times(num_list):\n    '''\n    Write a function to find the smallest of th"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.sort()\n    for i in range(len(num_list) - 1, -1, -1):\n        if num_list[i] == 0:\n            del num_list[i]\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count_zero = 0\n    num_list_len = len(num_list)\n    for i in range(num_list_len):\n        if num_list[i] == 0:\n            num_list[i], num_list[count_zero] = num_list[count_zero], num_list[i]\n            count_zero += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list is None:\n        return None\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    for j in range(len(num_list) - len(new_list)):\n        new_list.append(0)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = 0\n    for i in num_list:\n        if i == 0:\n            zeroes += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    non_zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[non_zero_index], num_list[i] = num_list[i], num_list[non_zero_index]\n            non_zero_index += 1\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            sum += arr[i] ^ arr[j]\n    return sum \n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    from functools import reduce\n    return reduce(lambda x,y : x ^ y,arr)\n    \ndef pair_xor_Sum_2(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return reduce(lambda x,y : x ^ y,arr)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # code here\n    arr.sort()\n    arr = arr[::-1]\n    xor = arr[0]\n    for i in range(1,n) : \n        xor ^= arr[i]\n    return xor\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total=0\n    for i in range(len(arr)) : \n        for j in range(i+1,len(arr)) : \n            total+=arr[i]^arr[j]\n    return total\n    \ndef pair_xor_Sum_dictionary(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list using a dictionary.\n    '''\n    total=0\n    mydict={}\n    for i in range(len(arr)) : \n        total+=arr[i]\n        if i in mydict : \n            mydict[i]+=arr[i]\n        else : \n            mydict[i]=arr[i]\n    for i in range(len(arr)) : \n        total+=mydict[i]\n    return total\n    \ndef xor_number(arr,n) : \n    '''\n    Write a python function to find the XOR of all numbers in the given array.\n    '''\n    total=0\n    for i in range(len(arr)) : \n        total^=arr[i]\n    return total\n    \ndef xor_number_dictionary(arr,n) : \n    '''\n    Write a python function to find the XOR of all numbers in the given array using a dictionary.\n    '''\n    total=0\n    mydict={}\n    for i in range(len(arr)) : \n        total^=arr[i]\n        if i in mydict : \n            mydict[i]^=arr[i]\n        else : \n            mydict[i]=arr[i]\n    for i in range(len(arr)) : \n        total^=mydict[i]\n    return total\n    \ndef first_non_repeating_letter(s) : \n    '''\n    Write a python function to find the first non-repeating character in a string.\n    '''\n    d={}\n    for i in s : \n        if i in d : \n            d[i]+=1\n        else : \n            d[i]=1\n    for i in s : \n        if d[i]==1 : \n            return i\n    return '_'\n    \ndef first_non_repeating_letter_dictionary(s) : \n    '''\n    Write a python function to find the first non-repeating character in a string using a dictionary.\n    '''\n    d={}\n    for i in s : \n        if i in d : \n            d[i]+=1\n        else : \n            d[i]=1\n    for i in s : \n        if d[i]==1 : \n            return i\n    return '_'\n    \ndef max_palin(arr,n) : \n    '''\n    Write a python function to find the maximum palindrome for a string of numbers.\n    '''\n    mydict={}\n    for i in range(len(arr)) : \n        mydict[arr[i]]=arr[i]\n    mydict[arr[-1]]=arr[-1]\n    for i in range(len(arr)-2,-1,-1) : \n        mydict[arr[i]]=arr[i]\n    for i in arr : \n        if mydict[i]==i : \n            continue\n        if mydict[i]==mydict[mydict[i]] : \n            return mydict[i]\n    return mydict[arr[0]]\n    \ndef max_palin_dictionary(arr,n) : \n    '''\n    Write a python function to find the maximum palindrome for a string of numbers using a dictionary.\n    '''\n    mydict={}\n    for i in range(len(arr)) : \n        mydict[arr[i]]=arr[i]\n    mydict[arr[-1]]=arr[-1]\n    for i in range(len(arr)-2,-1,-1) : \n        mydict[arr[i]]=arr[i]\n    for i in arr : \n        if mydict[i]==i : \n            continue\n        if mydict[i]==mydict[mydict[i]] : \n            return mydict[i]\n    return mydict[arr[0]]\n    \ndef move_zeros(arr,n) : \n    '''\n    Write a python function to move zeros to the end of a given array.\n    '''\n    count=0\n    for i in range(len(arr)) : \n        if arr[i]!=0 : \n            arr[count],arr[i]=arr[i],arr[count]\n            count+=1\n    return arr\n    \ndef move_zeros_dictionary(arr,n) : \n    '''\n    Write a python function to move zeros to the end of a given array using a dictionary.\n    '''\n    count=0\n    mydict={}\n    for i in range(len(arr)) : \n        if arr[i]!=0 : \n            arr[count],arr[i]=arr[i],arr[count]\n            count+=1\n            mydict[arr[i]]=arr[i]\n    for i in range(len(arr)) : \n        if arr[i]==0 : \n            arr[count]=mydict[arr[i]]\n            count+=1\n    return arr\n    \ndef count_valleys(arr,n) : \n    '''\n    Write a python function to count the number of valleys in a staircase.\n    '''\n    count=0\n    mydict={}\n    for i in range(len(arr)) : \n        if arr[i]=='D' : \n            if i>0 and arr[i-1]=='U' : \n                count+=1\n            mydict[arr[i]]=count\n    return mydict\n    \ndef count_valleys_dictionary(arr,n) : \n    '''\n    Write a python function to count the number of valleys in a staircase using a dictionary.\n    '''\n    count=0\n    mydict={}\n    for i in range(len(arr)) : \n        if arr[i]=='D' : \n            if i>0 and arr[i-1]=='U' : \n                count+=1\n            mydict[arr[i]]=count\n    return mydict\n    \ndef word_pattern(arr,n) : \n    '''\n    Write a python function to check if a string contains the same pairs of words in the same order as given.\n    '''\n    mydict={}\n    for i in range(len(arr)) : \n        if arr[i] in mydict : \n            mydict[arr[i]].append(i)\n        else : \n            mydict[arr[i]]=[i]\n    for i in range(len(arr)) : \n        if len(mydict[arr[i]])!=2 : \n            return False\n    return True\n    \ndef word_pattern_dictionary(arr,n) : \n    '''\n    Write a python function to check if a string contains the same pairs of words in the same order as given using a dictionary.\n    '''\n    mydict={}\n    for i in range(len(arr)) : \n        if arr[i] in mydict : \n            mydict[arr[i]].append(i)\n        else : \n            mydict[arr[i]]=[i]\n    for i in range(len(arr)) : \n        if len(mydict[arr[i]])!=2 : \n            return False\n    return True\n    \ndef perm_unique(arr,n) : \n    '''\n    Write a python function to check if a string contains all the characters of a given string in the same order with all the characters of another string.\n    '''\n    mydict={}\n    for i in range(len(arr)) : \n        if arr[i] in mydict : \n            mydict[arr[i]]+=1\n        else : \n            mydict[arr[i]]=1\n    for i in range(len(arr)) : \n        if arr[i] not in mydict : \n            return False\n    return True\n    \ndef perm_unique_dictionary(arr,n) : \n    '''\n    Write a python function to check i"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return n*(n-1)/2\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            s += arr[i] ^ arr[j]\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr = sorted(arr)\n    i = 0\n    j = n-1\n    sum = 0\n    while (i<j) : \n        sum = arr[i] ^ arr[j]\n        i+=1\n        j-=1\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n-1) : \n        for j in range(i+1,n) :\n            res += arr[i] ^ arr[j]\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res = res ^ (arr[i] ^ arr[j])\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    total = 0\n    for i in range(len(arr)) : \n        for j in range(i+1,len(arr)) : \n            total += arr[i] ^ arr[j]\n    return total \n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for n in iterable:\n        hq.heappush(heap, n)\n    return [hq.heappop(heap) for i in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for v in iterable:\n        hq.heappush(h, v)\n    for i in xrange(len(h)):\n        hq.heappop(h)\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = []\n    for i in iterable:\n        hq.heappush(l,i)\n    return [hq.heappop(l) for i in range(len(l))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in xrange(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef kth_smallest(iterable, k):\n    '''\n    Given an unsorted array, find the kth smallest element in it.\n    '''\n    smallest = []\n    for i in iterable:\n        hq.heappush(smallest, i)\n        if len(smallest) > k:\n            hq.heappop(smallest)\n    return smallest[0]\ndef kth_largest(iterable, k):\n    '''\n    Given an unsorted array, find the kth largest element in it.\n    '''\n    largest = []\n    for i in iterable:\n        hq.heappush(largest, i)\n        if len(largest) > k:\n            hq.heappop(largest)\n    return largest[0]\ndef find_median(iterable):\n    '''\n    Given an unsorted array, find the median of it.\n    '''\n    median = []\n    for i in iterable:\n        hq.heappush(median, i)\n        if len(median) > 1:\n            hq.heappop(median)\n            hq.heappop(median)\n    return median[0]\ndef find_mode(iterable):\n    '''\n    Given an unsorted array, find the mode of it.\n    '''\n    mode = []\n    for i in iterable:\n        hq.heappush(mode, i)\n        if len(mode) > 1:\n            hq.heappop(mode)\n            hq.heappop(mode)\n    return mode[0]\ndef find_range(iterable):\n    '''\n    Given an unsorted array, find the range of it.\n    '''\n    minimum = []\n    maximum = []\n    for i in iterable:\n        hq.heappush(minimum, i)\n        hq.heappush(maximum, i)\n        if len(minimum) > 1:\n            hq.heappop(minimum)\n            hq.heappop(minimum)\n        if len(maximum) > 1:\n            hq.heappop(maximum)\n            hq.heappop(maximum)\n    return [minimum[0], maximum[0]]\ndef find_quartile(iterable, q):\n    '''\n    Given an unsorted array, find the qth quartile of it.\n    '''\n    n = len(iterable)\n    iterable = sorted(iterable)\n    if q == 1:\n        return iterable[n // 4]\n    elif q == 3:\n        return iterable[n // 4 * 3]\n    else:\n        return None\ndef find_median_low(iterable):\n    '''\n    Given an unsorted array, find the median of the lower half of it.\n    '''\n    median = []\n    for i in iterable:\n        hq.heappush(median, i)\n        if len(median) > 1:\n            hq.heappop(median)\n            hq.heappop(median)\n    return median[0]\ndef find_median_high(iterable):\n    '''\n    Given an unsorted array, find the median of the higher half of it.\n    '''\n    median = []\n    for i in iterable:\n        hq.heappush(median, i)\n        if len(median) > 1:\n            hq.heappop(median)\n            hq.heappop(median)\n    return median[0]\ndef find_mode_low(iterable):\n    '''\n    Given an unsorted array, find the mode of the lower half of it.\n    '''\n    mode = []\n    for i in iterable:\n        hq.heappush(mode, i)\n        if len(mode) > 1:\n            hq.heappop(mode)\n            hq.heappop(mode)\n    return mode[0]\ndef find_mode_high(iterable):\n    '''\n    Given an unsorted array, find the mode of the higher half of it.\n    '''\n    mode = []\n    for i in iterable:\n        hq.heappush(mode, i)\n        if len(mode) > 1:\n            hq.heappop(mode)\n            hq.heappop(mode)\n    return mode[0]\ndef find_median_group(iterable):\n    '''\n    Given an unsorted array, find the median of the group it belongs to.\n    '''\n    median = []\n    for i in iterable:\n        hq.heappush(median, i)\n        if len(median) > 1:\n            hq.heappop(median)\n            hq.heappop(median)\n    return median[0]\ndef find_median_group_low(iterable):\n    '''\n    Given an unsorted array, find the median of the group it belongs to\n    which is in the lower half.\n    '''\n    median = []\n    for i in iterable:\n        hq.heappush(median, i)\n        if len(median) > 1:\n            hq.heappop(median)\n            hq.heappop(median)\n    return median[0]\ndef find_median_group_high(iterable):\n    '''\n    Given an unsorted array, find the median of the group it belongs to\n    which is in the higher half.\n    '''\n    median = []\n    for i in iterable:\n        hq.heappush(median, i)\n        if len(median) > 1:\n            hq.heappop(median)\n            hq.heappop(median)\n    return median[0]\ndef find_mean(iterable):\n    '''\n    Given an unsorted array, find the mean of it.\n    '''\n    s = 0\n    n = len(iterable)\n    for i in iterable:\n        s += i\n    return (s / n)\ndef find_variance(iterable):\n    '''\n    Given an unsorted array, find the variance of it.\n    '''\n    mean = find_mean(iterable)\n    s = 0\n    n = len(iterable)\n    for i in iterable:\n        s += (i - mean)**2\n    return (s / n)\ndef find_stdev(iterable):\n    '''\n    Given an unsorted array, find the standard deviation of it.\n    '''\n    return (find_variance(iterable)**0.5)\ndef find_skewness(iterable):\n    '''\n    Given an unsorted array, find the skewness of it.\n    '''\n    return (find_variance(iterable)**0.5) / (find_stdev(iterable)**0.5)\ndef find_kurtosis(iterable):\n    '''\n    Given an unsorted array, find the kurtosis of it.\n    '''\n    return ((find_variance(iterable)**2) / (find_stdev(iterable)**4)) - 3\ndef find_minimum(iterable):\n    '''\n    Given an unsorted array, find the minimum of it.\n    '''\n    minimum = []\n    for i in iterable:\n        hq.heappush(minimum, i)\n        if len(minimum) > 1:\n            hq.heappop(minimum)\n            hq.heappop(minimum)\n    return minimum[0]\ndef find_maximum(iterable):\n    '''\n    Given an unsorted array, find the maximum of it.\n    '''\n    maximum = []\n    for i in iterable:\n        hq.heappush(maximum, i)\n        if len(maximum) > 1:\n            hq.heappop(maximum)\n            hq.heappop(maximum)\n    return maximum[0]\ndef find_median_group(iterable):\n    '''\n    Given an unsorted array, find the median of the group it belongs to.\n    '''\n    median = []\n    for i in iterabl"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l=[]\n    for item in iterable:\n        hq.heappush(l,item)\n    return [hq.heappop(l) for i in range(len(l))]\ndef radixsort(iterable,base=10):\n    '''\n    Write a function to sort the given list using radix sort.\n    '''\n    l=[]\n    base=base\n    for item in iterable:\n        hq.heappush(l,(item,0))\n    while len(l)>1:\n        l=[]\n        buckets=[]\n        for i in range(base):\n            buckets.append([])\n        for item,digit in l:\n            buckets[item%base].append((item,digit))\n        l=[]\n        for bucket in buckets:\n            l.extend(bucket)\n    return [hq.heappop(l)[0] for i in range(len(l))]\ndef bucket_sort(iterable,base=10):\n    '''\n    Write a function to sort the given list using bucket sort.\n    '''\n    l=[]\n    for item in iterable:\n        hq.heappush(l,item)\n    buckets=[[] for i in range(base)]\n    for item in l:\n        buckets[item%base].append(item)\n    l=[]\n    for bucket in buckets:\n        l.extend(bucket)\n    return l\ndef counting_sort(iterable,base=10,max_count=None):\n    '''\n    Write a function to sort the given list using counting sort.\n    '''\n    l=[]\n    for item in iterable:\n        hq.heappush(l,(item,0))\n    if max_count==None:\n        max_count=hq.heappop(l)[1]+1\n    count=[0 for i in range(max_count)]\n    for item,digit in l:\n        count[item%max_count]+=1\n    for i in range(1,max_count):\n        count[i]+=count[i-1]\n    l=[]\n    for item,digit in l:\n        l.extend([item]*count[digit])\n    return l\ndef interval_sort(intervals):\n    '''\n    Write a function to sort the given list of intervals.\n    '''\n    l=[]\n    for interval in intervals:\n        l.append([interval.start,interval.end])\n    l=sorted(l,key=lambda x:x[0])\n    return [hq.heappop(l) for i in range(len(l))]\ndef intersection_intervals(intervals):\n    '''\n    Write a function to compute the intersection of two given lists of\n    intervals.\n    '''\n    l=[]\n    intervals.sort(key=lambda x:x.start)\n    for interval in intervals:\n        hq.heappush(l,interval)\n    res=hq.heappop(l)\n    while len(l)>0:\n        if res.end<=l[0].start:\n            res=hq.heappop(l)\n        elif res.end>=l[0].start:\n            if res.end<=l[0].end:\n                res.end=l[0].end\n            hq.heappop(l)\n    return res\ndef merge(iterable,key=lambda x:x):\n    '''\n    Write a function to merge the given lists of intervals.\n    '''\n    l=[]\n    for item in iterable:\n        hq.heappush(l,(key(item),item))\n    res=[]\n    while len(l)>0:\n        k,item=hq.heappop(l)\n        if len(res)==0:\n            res.append(item)\n        elif k<=res[-1].end:\n            res[-1].end=max(res[-1].end,item.end)\n        else:\n            res.append(item)\n    return res\ndef merge_intervals(intervals):\n    '''\n    Write a function to compute the intersection of two given lists of\n    intervals.\n    '''\n    l=[]\n    for interval in intervals:\n        l.append([interval.start,interval.end])\n    l=sorted(l,key=lambda x:x[0])\n    res=[]\n    for interval in l:\n        if len(res)==0:\n            res.append(interval)\n        elif res[-1][1]>=interval[0]:\n            res[-1][1]=max(res[-1][1],interval[1])\n        else:\n            res.append(interval)\n    return res\ndef select_sort(iterable,key=lambda x:x):\n    '''\n    Write a function to sort the given list using select sort.\n    '''\n    l=[]\n    for item in iterable:\n        hq.heappush(l,(key(item),item))\n    res=[]\n    while len(l)>0:\n        res.append(hq.heappop(l)[1])\n    return res\ndef heap_insert(l,item):\n    hq.heappush(l,(item,item))\ndef heap_delete(l,item):\n    l=[(item,item) if item[0]>=l[0][0] else x for x in l]\n    hq.heapify(l)\ndef heap_get(l,item):\n    for i in range(len(l)):\n        if l[i][1]==item:\n            return l[i][0]\n    return -1\ndef heap_replace(l,item):\n    for i in range(len(l)):\n        if l[i][0]==item:\n            l[i]=item\n            break\n    hq.heapify(l)\ndef heap_find(l,item):\n    for i in range(len(l)):\n        if l[i][0]==item:\n            return i\n    return -1\ndef heap_insort(l,item):\n    hq.heappush(l,(item,item))\ndef heap_pop(l):\n    return hq.heappop(l)[1]\ndef heap_extract(l):\n    return hq.heappop(l)[1]\ndef heap_insert_pop(l,item):\n    hq.heappush(l,(item,item))\n    return hq.heappop(l)[1]\ndef heap_interval(intervals):\n    l=[]\n    for interval in intervals:\n        hq.heappush(l,interval)\n    res=[]\n    while len(l)>0:\n        res.append(hq.heappop(l))\n    return res\ndef heap_merge(intervals):\n    l=[]\n    for interval in intervals:\n        hq.heappush(l,interval)\n    res=[]\n    while len(l)>0:\n        res.append(hq.heappop(l))\n    return res\ndef heap_slice(l,start,end):\n    return l[start:end]\ndef heap_sort_slice(l,start,end):\n    l=l[start:end]\n    hq.heapify(l)\n    return l\ndef heap_sort_merge(l,start,end):\n    l1=l[start:end]\n    l2=[]\n    hq.heapify(l1)\n    while len(l1)>0:\n        l2.append(hq.heappop(l1))\n    return l1+l2\ndef heap_sort_merge_slice(l,start,end):\n    l1=l[start:end]\n    l2=[]\n    hq.heapify(l1)\n    while len(l1)>0:\n        l2.append(hq.heappop(l1))\n    return l1+l2\ndef heap_sort_sliding(l,window):\n    l=l[-window:]\n    hq.heapify(l)\n    return l\ndef heap_max(l):\n    return max(l"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    res = []\n    for i in iterable:\n        hq.heappush(res, i)\n    return [i for i in res]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef reverse_iter(iterable):\n    '''\n    Write a generator to reverse the given list.\n    '''\n    for i in range(len(iterable)-1, -1, -1):\n        yield iterable[i]\ndef sort_para(para, iterable):\n    '''\n    Write a function to sort the given list, sorted in the order of given parameter.\n    '''\n    for i, val in enumerate(sorted(iterable, key=para)):\n        yield val, i\ndef sort_para_last(para, iterable):\n    '''\n    Write a function to sort the given list, sorted in the order of given parameter.\n    '''\n    for i, val in enumerate(sorted(iterable, key=para, reverse=True)):\n        yield val, i\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        print \"The amount has no profit and no loss\"\n    elif actual_cost == sale_amount:\n        print \"The amount has profit and no loss\"\n    elif actual_cost > sale_amount:\n        print \"The amount has no profit and no loss\"\n    return \n    \ndef noprofit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost > sale_amount:\n        print \"The amount has profit and loss\"\n    elif actual_cost == sale_amount:\n        print \"The amount has profit and no loss\"\n    elif actual_cost < sale_amount:\n        print \"The amount has profit and loss\"\n    return \n    \ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        print \"The amount has profit and no loss\"\n    elif actual_cost == sale_amount:\n        print \"The amount has profit and no loss\"\n    elif actual_cost > sale_amount:\n        print \"The amount has profit and loss\"\n    return \n    \ndef profit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost > sale_amount:\n        print \"The amount has profit and loss\"\n    elif actual_cost == sale_amount:\n        print \"The amount has profit and no loss\"\n    elif actual_cost < sale_amount:\n        print \"The amount has profit and loss\"\n    return \n    \ndef maximum_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has maximum loss\n    '''\n    if actual_cost < sale_amount:\n        if actual_cost < 0:\n            print \"The amount has maximum loss\"\n    elif actual_cost == sale_amount:\n        print \"The amount has profit and no loss\"\n    elif actual_cost > sale_amount:\n        if actual_cost > 0:\n            print \"The amount has maximum loss\"\n    return \n    \ndef minimum_profit(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has minimum profit\n    '''\n    if actual_cost > sale_amount:\n        if actual_cost > 0:\n            print \"The amount has minimum profit\"\n    elif actual_cost == sale_amount:\n        print \"The amount has profit and no loss\"\n    elif actual_cost < sale_amount:\n        if actual_cost < 0:\n            print \"The amount has minimum profit\"\n    return \n    \ndef profit_and_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost > sale_amount:\n        if actual_cost > 0:\n            print \"The amount has profit and loss\"\n    elif actual_cost == sale_amount:\n        print \"The amount has profit and no loss\"\n    elif actual_cost < sale_amount:\n        if actual_cost < 0:\n            print \"The amount has profit and loss\"\n    return \n    \ndef count_total(actual_cost,sale_amount): \n    '''\n    Write a function to count the total amount\n    '''\n    if actual_cost < sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost == sale_amount:\n        print \"The total amount is : 0\"\n    elif actual_cost > sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    return \n    \ndef count_total_both(actual_cost,sale_amount): \n    '''\n    Write a function to count the total amount\n    '''\n    if actual_cost > sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost < sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost == sale_amount:\n        print \"The total amount is : 0\"\n    return \n    \ndef count_total_profit(actual_cost,sale_amount): \n    '''\n    Write a function to count the total amount\n    '''\n    if actual_cost < sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost > sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost == sale_amount:\n        print \"The total amount is : 0\"\n    return \n    \ndef count_total_loss(actual_cost,sale_amount): \n    '''\n    Write a function to count the total amount\n    '''\n    if actual_cost > sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost < sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost == sale_amount:\n        print \"The total amount is : 0\"\n    return \n    \ndef count_total_profit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to count the total amount\n    '''\n    if actual_cost > sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost < sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost == sale_amount:\n        print \"The total amount is : 0\"\n    return \n    \ndef count_total_profit_loss_both(actual_cost,sale_amount): \n    '''\n    Write a function to count the total amount\n    '''\n    if actual_cost > sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost < sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost == sale_amount:\n        print \"The total amount is : 0\"\n    return \n    \ndef count_total_profit_loss_both(actual_cost,sale_amount): \n    '''\n    Write a function to count the total amount\n    '''\n    if actual_cost > sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost < sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost == sale_amount:\n        print \"The total amount is : 0\"\n    return \n    \ndef count_total_profit_loss_both(actual_cost,sale_amount): \n    '''\n    Write a function to count the total amount\n    '''\n    if actual_cost > sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost < sale_amount:\n        if actual_cost > 0:\n            print \"The total amount is : \" + str(sale_amount - actual_cost)\n    elif actual_cost == sale_amount:\n        print \"The total amount is : 0\"\n    return \n    \nde"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return sale_amount == actual_cost\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    def no_profit_no_loss(actual_cost,sale_amount):\n        if (actual_cost == 0) or (sale_amount == 0):\n            return True\n        else:\n            return False\n    return no_profit_no_loss(actual_cost,sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount>actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #The amount has a profit but no loss\n    if (actual_cost < sale_amount):\n        return False\n    #The amount has no profit but has a loss\n    elif (actual_cost > sale_amount):\n        return True\n    #The amount has no profit and no loss\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for i in range(len(actual_cost)):\n        if (actual_cost[i] - sale_amount[i]) > 0:\n            return False\n        else:\n            return True\ndef profit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    for i in range(len(actual_cost)):\n        if (sale_amount[i] - actual_cost[i]) < 0:\n            return False\n        else:\n            return True\ndef max_profit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    profit = 0\n    for i in range(len(actual_cost)):\n        if profit < sale_amount[i] - actual_cost[i]:\n            profit = sale_amount[i] - actual_cost[i]\n    return profit\ndef max_loss_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    loss = 0\n    for i in range(len(actual_cost)):\n        if loss < actual_cost[i] - sale_amount[i]:\n            loss = actual_cost[i] - sale_amount[i]\n    return loss\ndef max_profit_loss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    profit = 0\n    loss = 0\n    for i in range(len(actual_cost)):\n        if profit < sale_amount[i] - actual_cost[i]:\n            profit = sale_amount[i] - actual_cost[i]\n        if loss < actual_cost[i] - sale_amount[i]:\n            loss = actual_cost[i] - sale_amount[i]\n    return profit, loss\ndef max_profit_noloss_range(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    profit_list = []\n    loss_list = []\n    for i in range(len(actual_cost)):\n        if profit_list == []:\n            profit_list.append(sale_amount[i] - actual_cost[i])\n        else:\n            if profit_list[-1] < sale_amount[i] - actual_cost[i]:\n                profit_list.append(sale_amount[i] - actual_cost[i])\n            else:\n                loss_list.append(actual_cost[i] - sale_amount[i])\n    return profit_list,loss_list\ndef max_profit_noloss_avg(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    profit_sum = 0\n    for i in range(len(actual_cost)):\n        profit_sum = profit_sum + (sale_amount[i] - actual_cost[i])\n    return profit_sum/len(actual_cost)\ndef max_profit_noloss_avg_two(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    profit_sum = 0\n    for i in range(len(actual_cost)):\n        if profit_sum < sale_amount[i] - actual_cost[i]:\n            profit_sum = sale_amount[i] - actual_cost[i]\n    return profit_sum/len(actual_cost)\ndef max_profit_noloss_range_two(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    profit_list = []\n    loss_list = []\n    for i in range(len(actual_cost)):\n        if profit_list == []:\n            profit_list.append(sale_amount[i] - actual_cost[i])\n        else:\n            if profit_list[-1] < sale_amount[i] - actual_cost[i]:\n                profit_list.append(sale_amount[i] - actual_cost[i])\n            else:\n                loss_list.append(actual_cost[i] - sale_amount[i])\n    return profit_list,loss_list\ndef max_profit_noloss_range_three(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    profit_list = []\n    loss_list = []\n    for i in range(len(actual_cost)):\n        if profit_list == []:\n            profit_list.append(sale_amount[i] - actual_cost[i])\n        else:\n            if profit_list[-1] < sale_amount[i] - actual_cost[i]:\n                profit_list.append(sale_amount[i] - actual_cost[i])\n            else:\n                loss_list.append(actual_cost[i] - sale_amount[i])\n    return profit_list,loss_list\ndef max_profit_noloss_range_four(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    profit_list = []\n    loss_list = []\n    for i in range(len(actual_cost)):\n        if profit_list == []:\n            profit_list.append(sale_amount[i] - actual_cost[i])\n        else:\n            if profit_list[-1] < sale_amount[i] - actual_cost[i]:\n                profit_list.append(sale_amount[i] - actual_cost[i])\n            else:\n                loss_list.append(actual_cost[i] - sale_amount[i])\n    return profit_list,loss_list\ndef max_profit_noloss_range_five(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    profit_list = []\n    loss_list = []\n    for i in range(len(actual_cost)):\n        if profit_list == []:\n            profit_list.append(sale_amount[i] - actual_cost[i])\n        else:\n            if profit_list[-1] < sale_amount[i] - actual_cost[i]:\n                profit_list.append(sale_amount[i] - actual_cost[i])\n            else:\n                loss_list.append(actual_cost[i] - sale_amount[i])\n    return profit_list,loss_list\ndef max_profit_noloss_range_six(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    profit_list = []\n    loss_list = []\n    for i in range(len(actual_cost)):\n        if profit_list == []:\n            profit_list.append(sale_amount[i] - actual_cost[i])\n        else:\n            if profit_list[-1] < sale_amount[i] - actual_cost[i]:\n                profit_list.append(sale_amount[i] - actual_cost[i])\n            else:\n                loss_list.append(actual_cost[i] - sale_amount[i])\n    return profit_list,loss_list\ndef max_profit_noloss_range_seven(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    profit_list = []\n    loss_list = []\n    for i in range(len(actual_cost)):\n        if profit_list == []:\n            profit_list.append(sale_amount[i] - actual_cost[i])\n        else:\n            if profit_list[-1] < sale_amount[i] - actual_cost[i]:\n                profit_list.append(sale_amount[i] - actual_cost[i])\n            else:\n                loss_list.append(actual_cost["
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    cost = float(actual_cost)\n    sale = float(sale_amount)\n    if cost > sale:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # approximate formula\n    v = float(v)\n    t = float(t)\n    ws = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(v,0.16)\n    # round it to the next integer\n    ws = math.floor(ws)\n    # return the rounded ws\n    return ws\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    if t < 80:\n        f = 0.5\n        a = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(v,0.16)\n        return int(round(a,0))\n    else:\n        f = 3.15 * t - (35.75 * t - 59.65) * math.pow(v,0.16)\n        return int(round(f,0))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = t / 10.0\n    v = v * 0.5\n    if t < 80.0:\n        result = 13.12 + (13.5 * t) + (0.6215 * t * v) - (11.37 * math.pow(v, 0.16)) + (0.3965 * t * math.pow(v, 0.16))\n    else:\n        result = 22.0 + (40.0 * t) - (35.0 * math.pow(t, 0.16)) + (0.4275 * t * math.pow(v, 0.16)) - (0.22 * math.pow(v, 0.16))\n    result = round(result, 2)\n    return result\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # constants\n    R = 461.5\n    V = 3.6\n    T = t + 273.15\n    # return math.ceil(34.375 + 0.6215 * t - 35.75 * math.pow(v,0.16) + 0.4275 * t * math.pow(v,0.16))\n    return math.ceil(13.12 + 0.6215 * T - math.pow(v,0.16) + 0.4275 * T * math.pow(v,0.16))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round((35.74 + 0.6215*t - 35.75*math.pow(v,0.16) + 0.4275*t*math.pow(v,0.16) - 0.4475*math.pow(t,2) + 0.75*math.pow(t,3) - 0.3965*math.pow(v,3) + 0.16*math.pow(v,4))*10)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 3:\n        return (35.74 + 0.6215 * t)\n    else:\n        return (35.74 + 0.6215 * t + (0.4275 * t - 35.75) * (v**0.16))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = int(v)\n    t = int(t)\n    if t > 50 and v > 60:\n        v = 60\n    elif t < -10 and v > 60:\n        v = 60\n    elif t < -10 and v < 2:\n        v = 2\n    elif t > 50 and v < 2:\n        v = 2\n    else:\n        v = v\n    if t < -10:\n        t = -10\n    elif t > 50:\n        t = 50\n    wci = 35.74 + 0.6215*t + (0.4275*t - 35.75)*v**0.16\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    #Takes the temperature in Celsius and converts to Fahrenheit and rounds the result to the next integer.\n    t=t*9/5+32\n    \n    #Take the wind speed and multiply by the square of the wind velocity (called \"wind chill\")\n    wci=35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(v, 0.16)\n    \n    #Round the wind chill to the nearest integer\n    wci = round(wci)\n    \n    #Return the wind chill rounded to the nearest integer\n    return wci\n    \n    \ndef k_to_mph(k):\n    '''\n    Write a function that converts kph (km/h) to mph (m/s) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the kph and divide by conversion factor\n    return round(k*(3600/1.61))\n    \ndef mph_to_kph(m):\n    '''\n    Write a function that converts mph (m/s) to kph (km/h) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the mph and multiply by conversion factor\n    return round(m*(1.61/3600))\n    \ndef lb_to_kg(lb):\n    '''\n    Write a function that converts lb (pounds) to kg (kilograms) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the lb and multiply by conversion factor\n    return round(lb*0.45359237)\n    \ndef kg_to_lb(kg):\n    '''\n    Write a function that converts kg (kilograms) to lb (pounds) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the kg and multiply by conversion factor\n    return round(kg*2.20462)\n    \ndef inch_to_cm(inch):\n    '''\n    Write a function that converts inch (inches) to cm (centimeters) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the inch and divide by conversion factor\n    return round(inch*2.54)\n    \ndef cm_to_inch(cm):\n    '''\n    Write a function that converts cm (centimeters) to inch (inches) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the cm and divide by conversion factor\n    return round(cm/2.54)\n    \ndef cm_to_m(cm):\n    '''\n    Write a function that converts cm (centimeters) to m (meters) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the cm and divide by conversion factor\n    return round(cm/100)\n    \ndef m_to_cm(m):\n    '''\n    Write a function that converts m (meters) to cm (centimeters) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the m and divide by conversion factor\n    return round(m*100)\n    \ndef ft_to_m(ft):\n    '''\n    Write a function that converts ft (feet) to m (meters) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the ft and divide by conversion factor\n    return round(ft*0.3048)\n    \ndef m_to_ft(m):\n    '''\n    Write a function that converts m (meters) to ft (feet) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the m and divide by conversion factor\n    return round(m*3.2808399)\n    \ndef inches_to_miles(inches):\n    '''\n    Write a function that converts inches to miles and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the inches and divide by conversion factor\n    return round(inches*0.000621371)\n    \ndef miles_to_inches(miles):\n    '''\n    Write a function that converts miles to inches and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the miles and divide by conversion factor\n    return round(miles*39370)\n    \ndef miles_to_km(miles):\n    '''\n    Write a function that converts miles to km and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the miles and divide by conversion factor\n    return round(miles*1.60934)\n    \ndef km_to_miles(km):\n    '''\n    Write a function that converts km to miles and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the km and divide by conversion factor\n    return round(km*0.621371)\n    \ndef yards_to_miles(yards):\n    '''\n    Write a function that converts yards to miles and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the yards and divide by conversion factor\n    return round(yards*0.0009144)\n    \ndef miles_to_yards(miles):\n    '''\n    Write a function that converts miles to yards and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the miles and divide by conversion factor\n    return round(miles*1760)\n    \ndef gs_to_kg(gs):\n    '''\n    Write a function that converts gs (gigagrams) to kg (kilograms) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the gs and divide by conversion factor\n    return round(gs/1000)\n    \ndef kg_to_gs(kg):\n    '''\n    Write a function that converts kg (kilograms) to gs (gigagrams) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the kg and divide by conversion factor\n    return round(kg*1000)\n    \ndef lb_to_oz(lb):\n    '''\n    Write a function that converts lb (pounds) to oz (ounces) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the lb and divide by conversion factor\n    return round(lb*16)\n    \ndef oz_to_lb(oz):\n    '''\n    Write a function that converts oz (ounces) to lb (pounds) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the oz and divide by conversion factor\n    return round(oz*28.349523125)\n    \ndef in_to_oz(inch):\n    '''\n    Write a function that converts in (inches) to oz (ounces) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the in and divide by conversion factor\n    return round(inch*0.0393701)\n    \ndef oz_to_in(oz):\n    '''\n    Write a function that converts oz (ounces) to in (inches) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the oz and divide by conversion factor\n    return round(oz*28.349523125)\n    \ndef lb_to_kg(lb):\n    '''\n    Write a function that converts lb (pounds) to kg (kilograms) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the lb and divide by conversion factor\n    return round(lb*0.45359237)\n    \ndef kg_to_lb(kg):\n    '''\n    Write a function that converts kg (kilograms) to lb (pounds) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the kg and divide by conversion factor\n    return round(kg*2.20462)\n    \ndef m_to_cm(m):\n    '''\n    Write a function that converts m (meters) to cm (centimeters) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the m and divide by conversion factor\n    return round(m*100)\n    \ndef cm_to_m(cm):\n    '''\n    Write a function that converts cm (centimeters) to m (meters) and returns the result rounded to the nearest integer.\n    '''\n    \n    #Take the cm and divide by conversion factor\n    return round"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * (v ** 0.16)\n    return round(wc)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + 0.6215 * t + (35.75 * math.pow(v,0.16)) - (0.4275 * t) * (v * v) + (0.05 * t) * (v * v) * (v * v)\n    return wci\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum=0\n    for name in sample_names:\n        if name[0].isupper()==False:\n            sum+=len(name)\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(n) for n in sample_names if n[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_sample_names = []\n    for sample_name in sample_names:\n        if sample_name[0].isupper():\n            new_sample_names.append(sample_name)\n    return sum([len(sample_name) for sample_name in new_sample_names])\n    \n    \nif __name__ == '__main__':\n    sample_names = ['William', 'Oliver', 'Jack', 'Isabella', 'Charlie']\n    print sample_nam(sample_names)\n    \n    sample_names = ['Oliver', 'Isabella', 'Charlie']\n    print sample_nam(sample_names)\n    \n    sample_names = ['Oliver', 'Isabella', 'Charlie', 'Jack', 'Sophia', 'Mia', 'Lily', 'William', 'Ethan', 'Ava', 'Ava', 'Ava', 'Lily', 'Lily', 'William', 'Jack', 'Emily', 'Sophia', 'Isabella', 'Mia', 'Mia', 'Ethan', 'Ava', 'Ava', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'Mia', 'Ava', 'Ava', 'Charlotte', 'Emily', 'Mia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', 'Emily', 'Charlotte', 'Sophia', 'Ethan', 'Lily', 'William', 'Jack', "
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    l=[]\n    for i in sample_names:\n        if i[0].islower():\n            l.append(i)\n    l1=0\n    for i in l:\n        l1=l1+len(i)\n    print l1\n    return l1\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # return sum([len(name) for name in sample_names if name[0] == name[0].lower()])\n    # or\n    return sum([len(name) for name in sample_names if not name[0].lower()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for i in sample_names:\n        if i[0].isalpha() == True:\n            print(i)\n            sample_names.remove(i)\n    return sum(len(i) for i in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].islower()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_len += len(name)\n    return sum_len\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # my solution\n    return sum(len(name) for name in sample_names if name[0].isupper())\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #return sum(len(name) for name in sample_names if name[0].isupper())\n    return sum(len(name) for name in sample_names if name[0].lower() == name[0])\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 0:\n        return 'Invalid input'\n    else:\n        return items[0] + remove_parenthesis(items[1:])\n    \ndef first_word(sentence):\n    '''\n    Write a function to get the first word from a string of words.\n    '''\n    return sentence.split()[0]\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while (True):\n        items = re.sub(r'\\([^)]*\\)', '', items)\n        if (items == items):\n            break\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if isinstance(items,str):\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_dollars(items):\n    '''\n    Write a function that replaces all the dollar sign ($) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('$','')\n    return items\ndef replace_percent(items):\n    '''\n    Write a function that replaces all the % sign (%) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('%','')\n    return items\ndef replace_slash(items):\n    '''\n    Write a function that replaces all the / sign (/), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('/','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_comma(items):\n    '''\n    Write a function that replaces all the, in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace(',','')\n    return items\ndef replace_colon(items):\n    '''\n    Write a function that replaces all the : in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace(':','')\n    return items\ndef replace_semicolon(items):\n    '''\n    Write a function that replaces all the ; in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace(';','')\n    return items\ndef replace_slash(items):\n    '''\n    Write a function that replaces all the / sign (/), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('/','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_equal(items):\n    '''\n    Write a function that replaces all the = sign (=), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('=','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_exclamation(items):\n    '''\n    Write a function that replaces all the! sign (!), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('!','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_star(items):\n    '''\n    Write a function that replaces all the * sign (*), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('*','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_question(items):\n    '''\n    Write a function that replaces all the? sign (?), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('?','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_at(items):\n    '''\n    Write a function that replaces all the @ sign (@), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('@','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_apostrophe(items):\n    '''\n    Write a function that replaces all the'apostrophes (', '), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('\\'','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_dollar(items):\n    '''\n    Write a function that replaces all the $ sign ($) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('$','')\n    return items\ndef replace_percent(items):\n    '''\n    Write a function that replaces all the % sign (%) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('%','')\n    return items\ndef replace_slash(items):\n    '''\n    Write a function that replaces all the / sign (/), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('/','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_comma(items):\n    '''\n    Write a function that replaces all the, in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace(',','')\n    return items\ndef replace_colon(items):\n    '''\n    Write a function that replaces all the : in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace(':','')\n    return items\ndef replace_semicolon(items):\n    '''\n    Write a function that replaces all the : in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace(';','')\n    return items\ndef replace_slash(items):\n    '''\n    Write a function that replaces all the / sign (/), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('/','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_equal(items):\n    '''\n    Write a function that replaces all the = sign (=), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('=','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_exclamation(items):\n    '''\n    Write a function that replaces all the = sign (!), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('!','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_star(items):\n    '''\n    Write a function that replaces all the = sign (*), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('*','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_question(items):\n    '''\n    Write a function that replaces all the? sign (?), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('?','')\n        items=items.replace('(','')\n        items=items.replace(')','')\n    return items\ndef replace_at(items):\n    '''\n    Write a function that replaces all the @ sign (@), (, ), and ) in a given string with a #\n    '''\n    if isinstance(items,str):\n        items=items.replace('@','')\n        items=items.replace('(','')\n    "
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_str = items.replace('(','')\n    new_str = new_str.replace(')','')\n    return new_str\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # newlist=[]\n    # for each in items:\n    #     if each==\"(\":\n    #         continue\n    #     elif each==\")\":\n    #         continue\n    #     else:\n    #         newlist.append(each)\n    # return \"\".join(newlist)\n    for i in range(len(items)):\n        if items[i]==\"(\":\n            i+=1\n            while items[i]!=\")\":\n                if items[i]==\")\":\n                    break\n                i+=1\n            items=items[:i]+items[i+1:]\n    return items\ndef is_pos_neg(items):\n    '''\n    Write a function to check if a string has both positive and negative numbers.\n    '''\n    count=0\n    for i in items:\n        if i==\"+\" or i==\"-\":\n            count+=1\n            if count>1:\n                return False\n    return True\ndef is_all_upper(items):\n    '''\n    Write a function to check if a string is all upper case.\n    '''\n    for i in items:\n        if i.isupper()==False:\n            return False\n    return True\ndef is_letter_num(items):\n    '''\n    Write a function to check if a string has at least one letter and one number.\n    '''\n    for i in items:\n        if i.isdigit()==True or i.isalpha()==True:\n            return True\n    return False\ndef check_paren_brackets(items):\n    '''\n    Write a function to check if a string has any non-alphanumeric characters.\n    '''\n    items = items.lower()\n    # if re.search(\"[^a-zA-Z0-9]\", items):\n    #     return True\n    # else:\n    #     return False\n    for each in items:\n        if each.isalnum()==False:\n            return True\n    return False\ndef remove_multiple_spaces(items):\n    '''\n    Write a function to remove the multiple spaces from a string.\n    '''\n    items=items.replace(\" \",\"\")\n    return items\ndef count_words(items):\n    '''\n    Write a function to count the words in a string.\n    '''\n    return len(items.split(\" \"))\ndef check_for_a_letter(items, key):\n    '''\n    Write a function to check if a string contains a letter.\n    '''\n    for each in items:\n        if each.isalpha()==True:\n            if each.lower()==key:\n                return True\n    return False\ndef change_num(items, num):\n    '''\n    Write a function to change the given number to a string.\n    '''\n    items=str(num)\n    return items\ndef get_num(items):\n    '''\n    Write a function to get the first number from a string.\n    '''\n    num=''\n    for each in items:\n        if each.isdigit()==True:\n            num+=each\n    return int(num)\ndef split_str(items, key):\n    '''\n    Write a function to split a string into two strings based on a given key.\n    '''\n    split_str=items.split(key)\n    return split_str[0], split_str[1]\ndef is_a_num(items):\n    '''\n    Write a function to check if a string is a number or not.\n    '''\n    try:\n        int(items)\n        return True\n    except ValueError:\n        return False\ndef get_middle(items):\n    '''\n    Write a function to get the middle letter from a string.\n    '''\n    if len(items)%2==0:\n        return items[len(items)/2-1:len(items)/2+1]\n    else:\n        return items[len(items)/2]\ndef get_word_count(items):\n    '''\n    Write a function to get the word count from a string.\n    '''\n    return len(items.split(\" \"))\ndef is_palindrome(items):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if items==items[::-1]:\n        return True\n    else:\n        return False\ndef check_for_nums(items, num1, num2):\n    '''\n    Write a function to check if two numbers are in a given string.\n    '''\n    items=items.split(\" \")\n    for each in items:\n        if each.isdigit()==True:\n            if int(each) in range(num1, num2+1):\n                return True\n    return False\ndef word_pattern(items):\n    '''\n    Write a function to check if a string follows the word pattern.\n    '''\n    items=items.split(\" \")\n    new_items=[]\n    for each in items:\n        new_items.append(each[0])\n    if len(set(new_items))!=len(new_items):\n        return False\n    for i in range(len(items)):\n        if items[i] in new_items:\n            continue\n        else:\n            return False\n    return True\ndef double_char(items):\n    '''\n    Write a function to check if a string has the same number of occurrences of two or more characters.\n    '''\n    for i in range(len(items)):\n        if items.count(items[i])>1:\n            return True\n    return False\ndef is_there_anagram(items, key):\n    '''\n    Write a function to check if a string is an anagram of another string.\n    '''\n    new_items=remove_parenthesis(items)\n    new_items=remove_multiple_spaces(new_items)\n    if check_for_a_letter(new_items, key)==True:\n        return False\n    elif check_for_a_letter(new_items, key.lower())==True:\n        return False\n    if count_words(new_items)==1:\n        return False\n    else:\n        return True\ndef count_letters(items):\n    '''\n    Write a function to count the number of letters in a string.\n    '''\n    return len(items.replace(\" \", \"\"))\ndef first_second(items):\n    '''\n    Write a function to get the first and second letters of a string.\n    '''\n    return items[0], items[1]\ndef test_punctuation(items):\n    '''\n    Write a function to test if a string has punctuation in it.\n    '''\n    for each in items:\n        if each in [\",\", \".\", \";\", \"!\", \"?\"]:\n            return True\n    return False\ndef get_items_other_than_first_letter(items, key):\n    '''\n    Write a function to get all the items other than the first letter of a string.\n    '''\n    new_items=items[1:]\n    new_items=new_items.lower()\n    for each in new_items:\n        if each.isalpha()==False:\n            if each==key:\n                return True\n    return False\ndef get_items_other_than_last_letter(items, key):\n    '''\n    Write a function to get all the items other than the last letter of a string.\n    '''\n    new_items=items[:-1]\n    new_items=new_items.lower()\n    for each in new_items:\n        if each.isalpha()==False:\n            if each==key:\n                return True\n    return False\ndef get_items_all_upper(items):\n    '''\n    Write a function to get all the items other than the last letter of a string.\n    '''\n    new_items=items.lower()\n    for each in new_items:\n        if each.isalpha()==False:\n            if each==key:\n                return True\n    return False\ndef count_lower(items):\n    '''\n    Write a function to count the number of lower case characters in a string.\n    '''\n    new_items=items.lower()\n    count=0\n    for each in new_items:\n        if each.isalpha()==False:\n            continue\n        else:\n        "
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = '\\(.*?\\)'\n    while len(items) > 0:\n        items = re.sub(regex,'',items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items=[]\n    for item in items:\n        new_item=item.lstrip('(').rstrip(')')\n        new_items.append(new_item)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while '(' in items:\n        first = items.find('(')\n        second = items.find(')')\n        items = items[0:first] + items[second+1:]\n    return items\ndef replace_letter(items):\n    '''\n    Write a function to replace a letter in a string with another letter.\n    '''\n    new_items = items[:]\n    while 'a' in new_items:\n        first = new_items.find('a')\n        second = new_items.find('a', first+1)\n        new_items = new_items[0:first] + 'e' + new_items[second+1:]\n    return new_items\ndef palindrome_permutation(items):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    if len(items) == 0:\n        return True\n    elif len(items) == 1:\n        return True\n    else:\n        first = items[0]\n        second = items[1]\n        if first!= second:\n            return False\n        return palindrome_permutation(items[2:])\ndef make_list(items):\n    '''\n    Write a function to create a list of words from a string.\n    '''\n    item_list = []\n    while'' in items:\n        first = items.find(' ')\n        second = items.find(' ', first+1)\n        item_list.append(items[:second])\n        items = items[second+1:]\n    item_list.append(items)\n    return item_list\ndef print_formatted(number):\n    '''\n    Write a function that takes a positive integer and returns the Roman Numeral\n    representation of that integer.\n    '''\n    #create a dictionary of roman numerals\n    roman_numerals = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n    item_list = []\n    #go through each roman numeral\n    for roman_numeral in roman_numerals:\n        #find the number of digits that the roman numeral would make\n        num_of_digits = roman_numerals[roman_numeral]\n        #create a list of integers between 1 and the number of roman numeral\n        for index in range(1, num_of_digits+1):\n            item_list.append(index)\n        #print out each item in the list\n        for item in item_list:\n            print(item, end='')\n            #if the item is one, add a space to the end\n            if item == 1:\n                print(' ', end='')\n        #add a period to the end\n        print('.', end='')\n        #add the roman numeral to the end\n        print(roman_numerals[roman_numeral], end='')\n        #empty the list of integers and print a new line\n        item_list = []\n        print()\ndef print_upper(string):\n    '''\n    Write a function that takes a string of lowercase letters and prints them in \n    uppercase.\n    '''\n    for letter in string:\n        print(letter.upper(), end='')\n    print()\ndef is_pangram(string):\n    '''\n    Write a function to check if a string is a pangram or not. A pangram is a sentence \n    that uses every letter of the alphabet at least once.\n    '''\n    #create a list of the letters in the alphabet\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    #create a list of the letters in the string\n    string_letters = []\n    #go through each letter in the string\n    for letter in string:\n        #if the letter is not a space, add it to the string_letters list\n        if letter!='':\n            string_letters.append(letter)\n    #go through each letter in the alphabet\n    for letter in letters:\n        #if the letter is not in the string_letters list, return False\n        if letter not in string_letters:\n            return False\n    return True\ndef parse_int(items):\n    '''\n    Write a function that takes a string and returns the number that it represents.\n    '''\n    num = 0\n    #create a list of numbers in the string\n    numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    #go through each letter in the string\n    for letter in items:\n        #if the letter is a number in the numbers list, add it to the running sum\n        if letter in numbers:\n            num += int(letter)\n    return num\ndef count_unique(items):\n    '''\n    Write a function that takes a string and counts how many unique characters are in it.\n    '''\n    count = 0\n    unique = []\n    #go through each letter in the string\n    for letter in items:\n        #if the letter is not in unique, add it to unique\n        if letter not in unique:\n            unique.append(letter)\n            count += 1\n    return count\ndef count_letters(items):\n    '''\n    Write a function that takes a string and returns the number of letters that it contains.\n    '''\n    count = 0\n    #go through each letter in the string\n    for letter in items:\n        count += 1\n    return count\ndef multiply(items):\n    '''\n    Write a function that takes a string and multiplies each letter with the number \n    that follows it.\n    '''\n    #create a list of letters in the string\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    #create a list of numbers in the string\n    numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n    #create a list of letters in the string\n    string = ''\n    #go through each letter in the string\n    for letter in items:\n        #if the letter is a letter in the letters list, add it to string\n        if letter in letters:\n            string += letter\n        #if the letter is a number in the numbers list, add it to string\n        if letter in numbers:\n            string += str(int(letter)*int(items[items.find(letter)+1]))\n    return string\ndef is_prime(items):\n    '''\n    Write a function that takes a string and returns True if the string is a prime \n    number and False if it is not.\n    '''\n    #create a list of numbers between 1 and the length of the string\n    numbers = []\n    for index in range(1, len(items)):\n        numbers.append(index)\n    #go through each number in the list\n    for number in numbers:\n        #check if the number is prime\n        if number!= 1:\n            divide = 2\n            #go through each number between 1 and the number that is being divided by\n            while divide < number:\n                #if the number is divisible by the number that is being divided by\n                if number % divide == 0:\n                    return False\n                #add the number to the divide\n                divide += 1\n    return True\ndef is_palindrome(items):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome \n    and False if it is not.\n    '''\n    #go through the string backwards\n    for index in range(len(items)-1, 0, -1):\n        #if the letters are not the same, return False\n        if items[index]!= items[index-1]:\n            return False\n    return True\ndef reverse(items):\n    '''\n    Writ"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_list = []\n    for i in items:\n        if i not in '()':\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\(.*?\\)', \"\", items)\n    \ndef rotate_key(key, n):\n    '''\n    Given a key and a rotation value, rotate the key\n    '''\n    return key[n:] + key[:n]\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    \n    if (n == 1): \n        return 1\n    if (n == 2): \n        return 3\n    if (n == 3): \n        return 3\n    if (n == 4): \n        return 5\n    if (n == 5): \n        return 5\n    if (n == 6): \n        return 7\n    if (n == 7): \n        return 9\n    if (n == 8): \n        return 11\n    if (n == 9): \n        return 11\n    if (n == 10): \n        return 13\n    if (n == 11): \n        return 15\n    if (n == 12): \n        return 17\n    if (n == 13): \n        return 19\n    if (n == 14): \n        return 21\n    if (n == 15): \n        return 22\n    if (n == 16): \n        return 25\n    if (n == 17): \n        return 27\n    if (n == 18): \n        return 29\n    if (n == 19): \n        return 31\n    if (n == 20): \n        return 33\n    if (n == 21): \n        return 35\n    if (n == 22): \n        return 37\n    if (n == 23): \n        return 39\n    if (n == 24): \n        return 41\n    if (n == 25): \n        return 43\n    if (n == 26): \n        return 45\n    if (n == 27): \n        return 47\n    if (n == 28): \n        return 49\n    if (n == 29): \n        return 51\n    if (n == 30): \n        return 53\n    if (n == 31): \n        return 55\n    if (n == 32): \n        return 57\n    if (n == 33): \n        return 59\n    if (n == 34): \n        return 61\n    if (n == 35): \n        return 63\n    if (n == 36): \n        return 65\n    if (n == 37): \n        return 67\n    if (n == 38): \n        return 69\n    if (n == 39): \n        return 71\n    if (n == 40): \n        return 73\n    if (n == 41): \n        return 75\n    if (n == 42): \n        return 77\n    if (n == 43): \n        return 79\n    if (n == 44): \n        return 81\n    if (n == 45): \n        return 83\n    if (n == 46): \n        return 85\n    if (n == 47): \n        return 87\n    if (n == 48): \n        return 89\n    if (n == 49): \n        return 91\n    if (n == 50): \n        return 93\n    if (n == 51): \n        return 95\n    if (n == 52): \n        return 97\n    if (n == 53): \n        return 99\n    if (n == 54): \n        return 101\n    if (n == 55): \n        return 103\n    if (n == 56): \n        return 105\n    if (n == 57): \n        return 107\n    if (n == 58): \n        return 109\n    if (n == 59): \n        return 111\n    if (n == 60): \n        return 113\n    if (n == 61): \n        return 115\n    if (n == 62): \n        return 117\n    if (n == 63): \n        return 119\n    if (n == 64): \n        return 121\n    if (n == 65): \n        return 123\n    if (n == 66): \n        return 125\n    if (n == 67): \n        return 127\n    if (n == 68): \n        return 129\n    if (n == 69): \n        return 131\n    if (n == 70): \n        return 133\n    if (n == 71): \n        return 135\n    if (n == 72): \n        return 137\n    if (n == 73): \n        return 139\n    if (n == 74): \n        return 141\n    if (n == 75): \n        return 143\n    if (n == 76): \n        return 145\n    if (n == 77): \n        return 147\n    if (n == 78): \n        return 149\n    if (n == 79): \n        return 151\n    if (n == 80): \n        return 153\n    if (n == 81): \n        return 155\n    if (n == 82): \n        return 157\n    if (n == 83): \n        return 159\n    if (n == 84): \n        return 161\n    if (n == 85): \n        return 163\n    if (n == 86): \n        return 165\n    if (n == 87): \n        return 167\n    if (n == 88): \n        return 169\n    if (n == 89): \n        return 171\n    if (n == 90): \n        return 173\n    if (n == 91): \n        return 175\n    if (n == 92): \n        return 177\n    if (n == 93): \n        return 179\n    if (n == 94): \n        return 181\n    if (n == 95): \n        return 183\n    if (n == 96): \n        return 185\n    if (n == 97): \n        return 187\n    if (n == 98): \n        return 189\n    if (n == 99): \n        return 191\n    if (n == 100): \n        return 193\n    if (n == 101): \n        return 195\n    if (n == 102): \n        return 197\n    if (n == 103): \n        return 199\n    if (n == 104): \n        return 201\n    if (n == 105): \n        return 203\n    if (n == 106): \n        return 205\n    if (n == 107): \n        return 207\n    if (n == 108): \n        return 209\n    if (n == 109): \n        return 211\n    if (n == 110): \n        return 213\n    if (n == 111): \n        return 215\n    if (n == 112): \n        return 217\n    if (n == 113): \n        return 219\n    if (n == 114): \n        return 221\n    if (n == 115): \n        return 223\n    if (n == 116): \n        return 225\n    if (n == 117): \n        return 227\n    if (n == 118): \n        return 229\n    if (n == 119): \n        return 231\n    if (n == 120): \n        return 233\n    if (n == 121): \n        return 235\n    if (n == 122): \n        return 237\n    if (n == 123): \n        return 239\n    if (n == 124): \n        return 241\n    if (n == 125): \n        return 243\n    if (n == 126): \n        return 245\n    if (n == 127): \n        return 247\n    if (n == 128): \n        return 249\n    if (n == 129): \n        return 251\n    if (n == 130): \n        return 253\n    if (n == 131): \n        return 255\n    if (n == 132): \n        return 257\n    if (n == 133): \n        return 259\n    if (n == 134): \n        return 261\n    if (n == 135): \n        return 263\n    if (n == 136): \n        return 265\n    if (n == 137): \n        return 267\n    if (n == 138): \n        return 269\n    if (n == 139): \n        return 271\n    if (n == 140): \n        return 273\n    if (n == 141): \n        return 275\n    if (n == 142): \n        return 277\n    if (n == 143): \n        return 279\n    if (n == 144): \n        return 281\n    if (n == 145): \n        return 283\n    if (n == 146): \n        return 285\n    if (n == 147): \n        return 287\n    if (n == 148): \n        return 289\n    if (n == 149): \n        return 291\n    if (n == 150): \n        return 293\n    if (n == 151): \n        return 295\n    if (n == 152): \n        return 297\n    if (n == 153): \n        return 299\n    if (n == 154): \n        return 301\n    if (n == 155): \n    "
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (n + 1) / 2 - 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 4 == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n + 1) * (n + 2) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n*(n + 1)/2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    d = 1\n    a = 0\n    b = 1\n    n -= 1\n    while n!= 0:\n        a, b = b, a + b\n        d += 1\n        n -= d\n    return a\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return n * (n + 1) // 2\n        \n    \ndef main():\n    \n    non_list = []\n    \n    for i in range(10):\n        non_list.append(is_nonagonal(i))\n    \n    print(non_list)\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    #initialize the counter\n    count = 1\n    #initialize the storage array\n    storage = []\n    #we need to generate the first nonagonal number\n    storage.append(1)\n    #while we have not generated the nth nonagonal\n    while count <= n:\n        #we have to store the previous two values\n        prev = storage[-1]\n        prev_prev = storage[-2]\n        #get the next number\n        next_num = prev_prev + prev\n        #add it to the storage\n        storage.append(next_num)\n        #increment the counter\n        count += 1\n    #return the last value of the storage array\n    return storage[-1]\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'z', text) and re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_first_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last character of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_2_first_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last two characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the middle character of the word is 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_all_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last three characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last four characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_1_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last five characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_2_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last six characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_3_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last seven characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_4_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last eight characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_5_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last nine characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_6_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last ten characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_7_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last eleven characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_8_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last twelve characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_9_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last thirteen characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_10_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last fourteen characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_11_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last fifteen characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_12_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last sixteen characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_13_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last seventeen characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_14_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last eighteen characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_15_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last nineteen characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_16_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last twenty characters of the word are 'z'.\n    '''\n    if re.search(r'z$', text) and re.search(r'^z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_17_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', and the first and last twenty-one characters of the word are 'z'.\n    '"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle16(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle17(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle18(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle19(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle20(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle21(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle22(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle23(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'.*[z].*[z].*', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle24(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    ''"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use the re module to find the first and last 'z' in the text\n    z_start = re.search(r'[a-z]+[z]+', text)\n    z_end = re.search(r'[z]+[a-z]*', text)\n    # if the 'z' is in the start or end of a word, return False\n    if z_start:\n        return False\n    elif z_end:\n        return False\n    else:\n        return True\n    \ndef text_match_wordz_middle1(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use the re module to find the first and last 'z' in the text\n    z_start = re.search(r'[a-z]+[z]+', text)\n    z_end = re.search(r'[z]+[a-z]*', text)\n    # if the 'z' is in the start or end of a word, return False\n    if z_start and z_end:\n        return True\n    else:\n        return False\n    \n    \ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use the re module to find the first and last 'z' in the text\n    z_start = re.search(r'[a-z]+[z]+', text)\n    z_end = re.search(r'[z]+[a-z]*', text)\n    # if the 'z' is in the start or end of a word, return False\n    if z_start and z_end:\n        return True\n    elif z_start:\n        return True\n    elif z_end:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_middle3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use the re module to find the first and last 'z' in the text\n    z_start = re.search(r'[a-z]+[z]+', text)\n    z_end = re.search(r'[z]+[a-z]*', text)\n    # if the 'z' is in the start or end of a word, return False\n    if z_start and z_end:\n        return True\n    elif z_start:\n        return True\n    elif z_end:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_middle4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use the re module to find the first and last 'z' in the text\n    z_start = re.search(r'[a-z]+[z]+', text)\n    z_end = re.search(r'[z]+[a-z]*', text)\n    # if the 'z' is in the start or end of a word, return False\n    if z_start and z_end:\n        return True\n    elif z_start:\n        return True\n    elif z_end:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_middle5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use the re module to find the first and last 'z' in the text\n    z_start = re.search(r'[a-z]+[z]+', text)\n    z_end = re.search(r'[z]+[a-z]*', text)\n    # if the 'z' is in the start or end of a word, return False\n    if z_start and z_end:\n        return True\n    elif z_start:\n        return True\n    elif z_end:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_middle6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use the re module to find the first and last 'z' in the text\n    z_start = re.search(r'[a-z]+[z]+', text)\n    z_end = re.search(r'[z]+[a-z]*', text)\n    # if the 'z' is in the start or end of a word, return False\n    if z_start and z_end:\n        return True\n    elif z_start:\n        return True\n    elif z_end:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_middle7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use the re module to find the first and last 'z' in the text\n    z_start = re.search(r'[a-z]+[z]+', text)\n    z_end = re.search(r'[z]+[a-z]*', text)\n    # if the 'z' is in the start or end of a word, return False\n    if z_start and z_end:\n        return True\n    elif z_start:\n        return True\n    elif z_end:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_middle8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use the re module to find the first and last 'z' in the text\n    z_start = re.search(r'[a-z]+[z]+', text)\n    z_end = re.search(r'[z]+[a-z]*', text)\n    # if the 'z' is in the start or end of a word, return False\n    if z_start and z_end:\n        return True\n    elif z_start:\n        return True\n    elif z_end:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_middle9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use the re module to find the first and last 'z' in the text\n    z_start = re.search(r'[a-z]+[z]+', text)\n    z_end = re.search(r'[z]+[a-z]*', text)\n    # if the 'z' is in the start or end of a word, return False\n    if z_start and z_end:\n        return True\n    elif z_start:\n        return True\n    elif z_end:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_middle10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use the re module to find the first and last 'z' in the text\n    z_start = re.search(r'[a-z]+[z]+', text)\n    z_end = re.search(r'[z]+[a-z]*', text)\n    # if the 'z' is in the start or end of a word, return False\n    if z_start and z_end:\n        return True\n    elif z_start:\n        return True\n    elif z_end:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_middle11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use the re module to find the first and last 'z' in the text\n    z_start = re.search(r'[a-z]+[z]+', text)\n    z_end "
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[0] or 'z' in text[-1]:\n        return False\n    elif 'z' in text:\n        return True\n    else:\n        return False\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', only at the start of the word.\n    '''\n    if 'z' in text[0]:\n        return True\n    else:\n        return False\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', only at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[0:len(text)-1] and 'z' in text[1:len(text)]:\n        return True\n    else:\n        return False\ndef text_match_wordz_start2(text):\n    '''\n    Write a function that checks if a strings contains 'z', only at the start of the word.\n    '''\n    if 'z' in text[0:len(text)] and not 'z' in text[1:len(text)]:\n        return True\n    else:\n        return False\ndef text_match_wordz_end2(text):\n    '''\n    Write a function that checks if a strings contains 'z', only at the end of the word.\n    '''\n    if 'z' in text[-1:len(text)] and not 'z' in text[0:len(text)-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text == 'z':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[1:-1]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[2:-2]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[3:-3]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[4:-4]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[5:-5]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[6:-6]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[7:-7]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[8:-8]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[9:-9]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[10:-10]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[11:-11]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[12:-12]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[13:-13]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[14:-14]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[15:-15]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle16(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[16:-16]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle17(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[17:-17]:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle18(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    if text[0]!= 'z':\n        return False\n    if text[-1]!= 'z':\n        return False\n    if 'z' in text[18:-18]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return text.count('z')-text.count('z',0,len(text))-text.count('z',-len(text),0) == 0\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(re.search(r'(^z|z$)', text)):\n        return False\n    return True\ndef text_match_wordz_middle_2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(re.search(r'(^z|z$)', text)):\n        return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search('z(.*z)*', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.endswith('z')\ndef text_match_wordz_begin(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z')\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_begin_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_begin_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_exactly(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_not(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_no(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_some(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_none(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_1(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text and not text.startswith('z') and not text.endswith('z')\ndef text_match_wordz_16(text):\n    '''"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    for word in text:\n        if word == 'z' and re.search('z.+z', text):\n            return True\n    return False\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input) - 1\n    while (start < end):\n        if start < k:\n            temp = input[start]\n            input[start] = input[end]\n            input[end] = temp\n            start = start + 1\n            end = end - 1\n        else:\n            start = start + 1\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = k\n    while start <= end:\n        temp = input[start]\n        input[start] = input[end]\n        input[end] = temp\n        start += 1\n        end -= 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    i = 0\n    while i < k:\n        input[i], input[l-1] = input[l-1], input[i]\n        i += 1\n        l -= 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0:\n        return input\n    else:\n        return reverse_Array_Upto_K(input[k:], len(input)-k) + input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0:\n        return input\n    elif len(input) == 1:\n        return input\n    else:\n        return reverse_Array_Upto_K(input[1:k+1], len(input)-k-1) + [input[0]]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l=len(input)\n    for i in range(0,k/2):\n        temp=input[i]\n        input[i]=input[l-1-i]\n        input[l-1-i]=temp\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k <= 0:\n        return input\n    else:\n        return reverse_Array_Upto_K(input[k:], len(input[k:])) + input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k<=0:\n        return input\n    else:\n        return reverse_Array_Upto_K(input[k:],len(input)-k) + input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) <= k:\n        return input[::-1]\n    else:\n        return input[k:len(input)] + input[0:k]\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup_new = test_tup + tuple(test_dict.values())\n    return tup_new\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    assert type(test_tup) == tuple\n    assert type(test_dict) == dict\n    return tuple(test_tup + tuple(test_dict.items()))\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup[0],) + (test_dict,) + test_tup[1:]\n    return new_tup\n    \ndef get_text_from_dict(dict):\n    '''\n    Write a function to get the text value from a dictionary.\n    '''\n    return dict['text']\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += test_dict\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.items())\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    keys = test_dict.keys()\n    val = test_dict.values()\n    return tup + tuple(val)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return_tup = tuple()\n    return_tup += test_tup\n    return_tup += test_dict\n    return return_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    for i in xrange(n):\n        for j in xrange(n):\n            if i==0 or j==0:\n                cost[i][j] = cost[i][j]\n            else:\n                cost[i][j] += max(cost[i-1][j], cost[i][j-1])\n    print cost\n    return cost[n-1][n-1]/float(n)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialize numpy array for storing solution\n    max_average = float(\"-inf\")\n    res = [[0 for i in range(len(cost[0]))] for j in range(len(cost))]\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i==0 and j==0:\n                res[i][j] = cost[i][j]\n            elif i==0:\n                res[i][j] = cost[i][j] + res[i][j-1]\n            elif j==0:\n                res[i][j] = cost[i][j] + res[i-1][j]\n            else:\n                res[i][j] = cost[i][j] + max(res[i-1][j], res[i][j-1])\n            if res[i][j] > max_average:\n                max_average = res[i][j]\n    return max_average\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    #dp = [[0 for j in range(cols)] for i in range(rows)]\n    dp = [0] * (rows * cols)\n    max = -1\n    for i in range(rows):\n        for j in range(cols):\n            dp[i * cols + j] = max(dp[i * cols + j], maxAverage(cost, dp, i, j, rows, cols))\n            max = max(dp[i * cols + j], max)\n    return max\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = cost[0][j] + dp[0][j - 1]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i - 1][j], dp[i][j - 1])\n    #print dp\n    print dp[N - 1][N - 1]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def getMaxAverage(n,m,cost):\n        \n        r,c = n,m\n        max_ = -float('inf')\n        dp = [[0]*(c+1) for _ in range(r+1)]\n        for i in range(1,r+1):\n            for j in range(1,c+1):\n                dp[i][j] = cost[i-1][j-1] + max(dp[i-1][j],dp[i][j-1])\n                max_ = max(max_,dp[i][j])\n        return max_\n    \n    \n    return getMaxAverage(len(cost),len(cost[0]),cost)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m, n = len(cost), len(cost[0])\n    for i in xrange(m):\n        for j in xrange(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                cost[i][j] = cost[i][j-1] + cost[i][j]\n            elif j == 0:\n                cost[i][j] = cost[i-1][j] + cost[i][j]\n            else:\n                cost[i][j] = cost[i-1][j] + cost[i][j]\n    maxAvg = 0\n    for i in xrange(m-1, -1, -1):\n        for j in xrange(n-1, -1, -1):\n            if i == m-1 and j == n-1:\n                maxAvg = max(maxAvg, cost[i][j])\n            else:\n                maxAvg = max(maxAvg, cost[i][j] - min(cost[i+1][j], cost[i][j+1]))\n    return maxAvg\n    \nprint maxAverageOfPath([[0, 1, 1, 0, 0, 0],\n                        [0, 0, 0, 0, 0, 0],\n                        [0, 0, 0, 0, 0, 0],\n                        [0, 0, 0, 0, 0, 0],\n                        [0, 0, 0, 0, 0, 0],\n                        [0, 0, 0, 0, 0, 0]])\n                        "
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    m = len(cost)\n    n = len(cost[0])\n    for i in xrange(m):\n        for j in xrange(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                cost[i][j] += cost[i][j - 1]\n            elif j == 0:\n                cost[i][j] += cost[i - 1][j]\n            else:\n                cost[i][j] += max(cost[i - 1][j], cost[i][j - 1])\n    return cost[m - 1][n - 1] / float(n * m)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    import copy\n    max_average = -1\n    rows, cols = len(cost), len(cost[0])\n    for i in xrange(rows):\n        for j in xrange(cols):\n            temp = copy.deepcopy(cost)\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                temp[i][j] = cost[i][j - 1] + cost[i][j]\n            elif j == 0:\n                temp[i][j] = cost[i - 1][j] + cost[i][j]\n            else:\n                temp[i][j] = cost[i - 1][j] + cost[i][j] + temp[i][j - 1] - temp[i - 1][j - 1]\n            if max_average < temp[i][j]:\n                max_average = temp[i][j]\n    return max_average\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    '''\n    :type cost: List[List[int]]\n    :rtype: int\n    '''\n    if not cost:\n        return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    import numpy\n    if not cost:\n        return 0\n    if not cost[0]:\n        return 0\n    max_cost = cost[0][0]\n    height, width = len(cost), len(cost[0])\n    if width == 1:\n        return cost[0][0]\n    cost = numpy.array(cost)\n    for i in xrange(height):\n        cost[i][0] += cost[i-1][0]\n    for i in xrange(1, width):\n        cost[0][i] += cost[0][i-1]\n    for i in xrange(1, height):\n        for j in xrange(1, width):\n            cost[i][j] += min(cost[i-1][j], cost[i][j-1])\n            max_cost = max(cost[i][j], max_cost)\n    return max_cost / float(width*height)\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name : (height,weight) for (name,(height,weight)) in students.items() if height > h and weight > w}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for student in students.keys():\n        if students[student][0]>=h and students[student][1]>=w:\n            filtered_data[student] = students[student]\n    return filtered_data\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for key in students.keys():\n        if students[key][0] > h and students[key][1] > w:\n            new_students[key] = students[key]\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # return [\n    #     [student, student_height, student_weight] for student, student_height, student_weight in students if student_height > h and student_weight > w\n    # ]\n    return [\n        [student, student_height, student_weight] for student, student_height, student_weight in students if student_height > h or student_weight > w\n    ]\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students={}\n    for student in students:\n        if students[student][0]>=h and students[student][1]>=w:\n            new_students[student]=students[student]\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for student in students:\n        if students[student][0]>=h and students[student][1]>=w:\n            new_students[student] = students[student]\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student, value in students.items():\n        if value[0] > h and value[1] > w:\n            result[student] = value\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {key:value for key,value in students.items() if value[0] > h and value[1] > w}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {x:y for x,y in students.iteritems() if (y[0] > h and y[1] > w)}\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    res = 0\n    for i, j in zip(nums1, nums2):\n        if i == j:\n            res += 1\n    return res\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    index_list = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            index_list.append(i)\n    return len(index_list)\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    d = {}\n    for i in range(len(nums1)):\n        if nums1[i] in d:\n            d[nums1[i]].append(i)\n        else:\n            d[nums1[i]] = [i]\n    count = 0\n    for i in range(len(nums2)):\n        if nums2[i] in d:\n            for j in d[nums2[i]]:\n                if j > i:\n                    count += 1\n    return count\ndef reverse_str(str1):\n    '''\n    Write a function to reverse a string\n    '''\n    return str1[::-1]\ndef longest_word(s):\n    '''\n    Write a function to find the longest word in a string\n    '''\n    s = s.split()\n    return max(s, key=len)\ndef is_palindrome(s):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    s = s.lower()\n    for i in range(len(s)/2):\n        if s[i]!= s[-i-1]:\n            return False\n    return True\ndef count_numbers(string):\n    '''\n    Write a function to count the number of integers in a given string.\n    '''\n    return len([i for i in string if i.isdigit()])\ndef find_numbers(string):\n    '''\n    Write a function to find all the numbers in a given string\n    '''\n    return [i for i in string if i.isdigit()]\ndef find_characters(string):\n    '''\n    Write a function to find all the characters in a given string\n    '''\n    return [i for i in string if i.isalpha()]\ndef find_string_numbers(string):\n    '''\n    Write a function to find all the numbers in a given string\n    '''\n    numbers = find_numbers(string)\n    numbers = [int(i) for i in numbers]\n    return numbers\ndef count_words(string):\n    '''\n    Write a function to count the number of words in a given string\n    '''\n    return len(string.split())\ndef check_strings(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams of each other\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if sorted(str1) == sorted(str2):\n        return True\n    return False\ndef find_anagrams(s1, s2):\n    '''\n    Write a function to find all the anagrams of a word in a given string.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i] not in s2:\n            return False\n    return True\ndef is_there_anagrams(str1, str2):\n    '''\n    Write a function to find if there are anagrams of a word in a given string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if sorted(str1)!= sorted(str2):\n        return False\n    return True\ndef find_anagram_of_word(word, string):\n    '''\n    Write a function to find the anagram of a word in a given string\n    '''\n    d = {}\n    for i in word:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    count = 0\n    for i in string:\n        if i in d:\n            d[i] -= 1\n            if d[i] == 0:\n                count += 1\n        if count == len(word):\n            return True\n    return False\ndef is_there_anagram_of_word(word, string):\n    '''\n    Write a function to find the anagram of a word in a given string\n    '''\n    d = {}\n    for i in word:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in string:\n        if i in d:\n            d[i] -= 1\n            if d[i] == 0:\n                return True\n    return False\ndef is_palindrome_permutation(s1, s2):\n    '''\n    Write a function to check if a string is a permutation of a palindrome\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = s1.lower()\n    s2 = s2.lower()\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            if s1.count(s1[i]) == s2.count(s2[i]):\n                return True\n            else:\n                return False\n    return True\ndef is_permutation_of_palindrome(s1, s2):\n    '''\n    Write a function to check if a string is a permutation of a palindrome\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = s1.lower()\n    s2 = s2.lower()\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            if s1.count(s1[i]) == s2.count(s2[i]):\n                return True\n            else:\n                return False\n    return True\ndef find_nth_occurrence(s, sub, n):\n    '''\n    Write a function to find the nth occurrence of a sub string in a string\n    '''\n    i = 0\n    count = 0\n    while i < len(s):\n        if s[i:i+len(sub)] == sub:\n            count += 1\n            i += len(sub)\n        else:\n            i += 1\n        if count == n:\n            return i-len(sub)\n    return -1\ndef find_nth_occurrence_of_words(string, words):\n    '''\n    Write a function to find the nth occurrence of a sub string in a string\n    '''\n    for word in words:\n        if string.find(word) == -1:\n            return -1\n    for word in words:\n        if string.find(word)!= -1:\n            return string.find(word)\ndef find_sub_string(string, sub):\n    '''\n    Write a function to find the sub string in a string\n    '''\n    return string.find(sub)\ndef substring_of_string(string, sub):\n    '''\n    Write a function to find the substring in a string\n    '''\n    return string.find(sub)!= -1\ndef is_substring(string, sub):\n    '''\n    Write a function to check if a string is a substring of another string\n    '''\n    if string.find(sub)!= -1:\n        return True\n    return False\ndef is_substring_of_string(string, sub):\n    '''\n    Write a function to check if a string is a substring of another string\n    '''\n    if string.find(sub)!= -1:\n        return True\n    return False\ndef is_substring_of_substring(string, sub):\n    '''\n    Write a function to check if a string is a substring of another string\n    '''\n    if string.find(sub)!= -1:\n        return True\n    return False\ndef is_substring_of_substring_of_string(string, sub):\n    '''\n    Write a function to check if a string is a substring of another string\n    '''\n    if string.find(sub)!= -1:\n        return True\n    return False\ndef is_substring_of_string_of_string(string, sub):\n    '''\n    Write a function to check if a string is a substring of another string\n    '''\n    if string.find(sub)!= -1:\n        return True\n    return False\ndef is_substring_of_string_of_string_of_string(string"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same = 0\n    for i, num1 in enumerate(nums1):\n        for j, num2 in enumerate(nums2):\n            if num1 == num2 and i!= j:\n                same += 1\n    return same\ndef roman_to_int(s):\n    '''\n    Given a roman numeral, convert it to an integer.\n    '''\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    if s == '':\n        return 0\n    if len(s) > 1:\n        if s[-1] == 'M' and s[-2] == 'C':\n            return d[s[-2]] * 1000 + d[s[-1]]\n        if s[-1] == 'M' and s[-2] == 'D':\n            return d[s[-2]] * 1000\n        if s[-1] == 'C' and s[-2] == 'D':\n            return d[s[-2]] * 100\n    return d[s[-1]]\ndef non_recursive_roman_to_int(s):\n    '''\n    Given a roman numeral, convert it to an integer.\n    '''\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    if s == '':\n        return 0\n    n = len(s)\n    if n == 1:\n        return d[s[0]]\n    if n == 2:\n        if s[0] == 'I':\n            if s[1] == 'V' or s[1] == 'X':\n                return d[s[0]] * 10\n            if s[1] == 'L' or s[1] == 'C':\n                return d[s[0]] * 100\n            return d[s[0]]\n        if s[0] == 'X':\n            if s[1] == 'L' or s[1] == 'C':\n                return d[s[0]] * 10\n            if s[1] == 'D':\n                return d[s[0]] * 10\n        if s[0] == 'C':\n            if s[1] == 'D':\n                return d[s[0]] * 10\n        return d[s[0]]\n    if n == 3:\n        if s[1] == 'C' and s[2] == 'M':\n            return d[s[0]] * 1000\n        if s[1] == 'D' and s[2] == 'C':\n            return d[s[0]] * 100\n        if s[1] == 'M' and s[2] == 'C':\n            return d[s[0]] * 1000\n        return d[s[0]] * d[s[1]]\n    if n == 4:\n        if s[1] == 'C' and s[3] == 'D':\n            return d[s[0]] * 100\n        if s[1] == 'D' and s[3] == 'C':\n            return d[s[0]] * 100\n        if s[1] == 'D' and s[3] == 'M':\n            return d[s[0]] * 1000\n        return d[s[0]] * d[s[1]] * d[s[2]]\n    if n == 5:\n        if s[1] == 'C' and s[4] == 'M':\n            return d[s[0]] * 1000\n        if s[1] == 'D' and s[4] == 'C':\n            return d[s[0]] * 100\n        if s[1] == 'M' and s[4] == 'C':\n            return d[s[0]] * 1000\n        return d[s[0]] * d[s[1]] * d[s[2]] * d[s[3]]\n    if n == 6:\n        if s[1] == 'C' and s[5] == 'M':\n            return d[s[0]] * 1000\n        if s[1] == 'D' and s[5] == 'C':\n            return d[s[0]] * 100\n        if s[1] == 'M' and s[5] == 'C':\n            return d[s[0]] * 1000\n        return d[s[0]] * d[s[1]] * d[s[2]] * d[s[3]] * d[s[4]]\n    if n == 7:\n        if s[1] == 'C' and s[6] == 'M':\n            return d[s[0]] * 1000\n        if s[1] == 'D' and s[6] == 'C':\n            return d[s[0]] * 100\n        if s[1] == 'M' and s[6] == 'C':\n            return d[s[0]] * 1000\n        return d[s[0]] * d[s[1]] * d[s[2]] * d[s[3]] * d[s[4]] * d[s[5]]\n    if n == 8:\n        if s[1] == 'C' and s[7] == 'M':\n            return d[s[0]] * 1000\n        if s[1] == 'D' and s[7] == 'C':\n            return d[s[0]] * 100\n        if s[1] == 'M' and s[7] == 'C':\n            return d[s[0]] * 1000\n        return d[s[0]] * d[s[1]] * d[s[2]] * d[s[3]] * d[s[4]] * d[s[5]] * d[s[6]]\n    if n == 9:\n        if s[1] == 'C' and s[8] == 'M':\n            return d[s[0]] * 1000\n        if s[1] == 'D' and s[8] == 'C':\n            return d[s[0]] * 100\n        if s[1] == 'M' and s[8] == 'C':\n            return d[s[0]] * 1000\n        return d[s[0]] * d[s[1]] * d[s[2]] * d[s[3]] * d[s[4]] * d[s[5]] * d[s[6]] * d[s[7]]\n    if n == 10:\n        if s[1] == 'C' and s[9] == 'M':\n            return d[s[0]] * 1000\n        if s[1] == 'D' and s[9] == 'C':\n            return d[s[0]] * 100\n        if s[1] == 'M' and s[9] == 'C':\n            return d[s[0]] * 1000\n        return d[s[0]] * d[s[1]] * d[s[2]] * d[s[3]] * d[s[4]] * d[s[5]] * d[s[6]] * d[s[7]] * d[s[8]]\n    return d[s[0]] * d[s[1]] * d[s[2]] * d[s[3]] * d[s[4]] * d[s[5]] * d[s[6]] * d[s[7]] * d[s[8]] * d[s[9]]\ndef count_non_recursive_roman_to_int(s):\n    '''\n    Given a roman numeral, convert it to an integer.\n    '''\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    if s == '':\n        return 0\n    n = len(s)\n    if n == 1:\n        return d[s[0]]\n    if n == 2:\n        if s[0] == 'I':\n            if s[1] == 'V' or s[1] == 'X':\n                return d[s[0]] * 10\n            if s[1] == 'L' or s[1] == 'C':\n                return d[s[0]] * 100\n            return d[s[0]]\n        if s[0] == 'X':"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    answer = 0\n    for index, value in enumerate(nums1):\n        if nums1[index] == nums2[index]:\n            answer += 1\n    return answer\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    d = {}\n    for i, val in enumerate(nums1):\n        if val not in d.keys():\n            d[val] = [i]\n        else:\n            d[val].append(i)\n    cnt = 0\n    for i, val in enumerate(nums2):\n        if val in d.keys():\n            if len(d[val]) > 1:\n                cnt += 1\n            elif len(d[val]) == 1:\n                cnt += i - d[val][0] + 1\n    return cnt\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    res = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            res += 1\n    return res\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    i = 0\n    count = 0\n    while i < len(nums1):\n        if nums1[i] == nums2[i]:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i)**power for i in str(base)])\n    \ndef test_power_base_sum():\n    assert power_base_sum(10, 3) == 1\n    assert power_base_sum(2, 5) == 2\n    assert power_base_sum(10, 10) == 1\n    assert power_base_sum(5, 0) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, 3) == 1\n    assert power_base_sum(4, 3) == 3\n    assert power_base_sum(3, 10) == 3\n    assert power_base_sum(99, 99) == 2\n    assert power_base_sum(8, 4) == 4\n    assert power_base_sum(8, 10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -1) == 1\n    assert power_base_sum(10, -2) == 1\n    assert power_base_sum(16, -3) == 1\n    assert power_base_sum(3, -10) == 3\n    assert power_base_sum(99, -99) == 2\n    assert power_base_sum(8, -4) == 4\n    assert power_base_sum(8, -10) == 8\n    assert power_base_sum(2, -"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return 0\n    elif power == 0:\n        return 1\n    else:\n        return base * power_base_sum(base, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    # print \"base: \", base, \" power: \", power\n    if power == 0:\n        return 1\n    if power == 1:\n        return base\n    if power < 0:\n        print(\"Error. Number cannot be negative.\")\n        return None\n    for i in range(0, power):\n        total += int(base)\n        base = int(base)\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(digit)**power for digit in str(base))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(c) ** power for c in str(base))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # base = int(base)\n    # power = int(power)\n    # digit_sum = 0\n    # while power:\n    #     digit_sum += base ** power % 10\n    #     power -= 1\n    # return digit_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for num in str(base**power):\n        total += int(num)\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    total = 0\n    \n    for i in range(power + 1):\n        total += int(str(base)[i])\n    \n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) ** power for i in str(base)])\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    data = re.findall(r'\"(.*?)\"', text1)\n    return data\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2=re.findall(\"\\\"(.+?)\\\"\",text1)\n    print (text2)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_mark = '\"'\n    text = text1\n    text_list = re.findall(r'[^\\\"]*'+quotation_mark+'[^\\\"]*', text)\n    #print 'text_list :',text_list\n    list = []\n    for i in text_list:\n        if quotation_mark in i:\n            list.append(i[1:-1])\n    return list\n    \n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print(text1)\n    if not text1:\n        return None\n    if text1[0] == text1[-1] and text1[0] in ['\\\"', \"'\"]:\n        return text1[1:-1]\n    else:\n        return None\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # text1 = \"We get money through plays like baseball and basketball and ice cream.\"\n    # text1 = '\"I like the name, I think it suits me.\" he said. \"If you like it, then maybe it suits you too?\"'\n    \n    # Using regular expressions\n    \n    # Extracting the values between quotation marks and space\n    text2 = re.findall(r'[\\\"](.*?)[\\\"]', text1)\n    # print text2\n    \n    # Removing the values between quotation marks\n    for val in text2:\n        text1 = text1.replace(val, \"\")\n        \n    print text1\n    \n    # Removing the inner quotation marks\n    text1 = re.sub('\\\"', '', text1)\n    text1 = re.sub('\\'', '', text1)\n    \n    print text1\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if not text1:\n        return []\n    if not text1[0].isalpha():\n        if text1[0]=='\"':\n            return [text1[0]]+ extract_quotation(text1[1:])\n        elif text1[0]=='\\'':\n            return [text1[0]]+ extract_quotation(text1[1:])\n        else:\n            return extract_quotation(text1[1:])\n    else:\n        return [text1[0]]+ extract_quotation(text1[1:])\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r\"\\\"(.*?)\\\"\", text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    match_quote = r\"(?<=['\\\"])([^'\\\"]+)(?=['\\\"])\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_identifier(text1):\n    '''\n    Write a function to extract values between identifier's of the given string.\n    '''\n    match_quote = r\"(?<=\\w)([^\\w\\d]+)(?=\\w)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_words(text1):\n    '''\n    Write a function to extract values between word's of the given string.\n    '''\n    match_quote = r\"(?<=\\w)([^\\w]+)(?=\\w)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_words_comma(text1):\n    '''\n    Write a function to extract values between words and commas of the given string.\n    '''\n    match_quote = r\"(?<=\\w+)([^\\w\\s]+)(?=,?\\s?\\w+)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_words_comma_space(text1):\n    '''\n    Write a function to extract values between words and commas of the given string.\n    '''\n    match_quote = r\"(?<=\\w+)([^\\w\\s]+)(?=,?\\s?\\w+)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_dates(text1):\n    '''\n    Write a function to extract dates (e.g. \"23 March 2003\", \"1 January 2000\") of the given string.\n    '''\n    match_quote = r\"(?<=\\d{1,2})([A-Za-z]+ )?([A-Za-z]+)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_dates_spaces(text1):\n    '''\n    Write a function to extract dates (e.g. \"23 March 2003\", \"1 January 2000\") of the given string.\n    '''\n    match_quote = r\"(?<=\\d{1,2})([A-Za-z]+ )?([A-Za-z]+)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_dates_nospace(text1):\n    '''\n    Write a function to extract dates (e.g. \"23 March 2003\", \"1 January 2000\") of the given string.\n    '''\n    match_quote = r\"(?<=\\d{1,2})([A-Za-z]+ )?([A-Za-z]+)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_numbers(text1):\n    '''\n    Write a function to extract numbers (e.g. \"23 March 2003\", \"1 January 2000\") of the given string.\n    '''\n    match_quote = r\"(?<=\\d{1,2})([A-Za-z]+ )?([0-9]+)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_numbers_spaces(text1):\n    '''\n    Write a function to extract numbers (e.g. \"23 March 2003\", \"1 January 2000\") of the given string.\n    '''\n    match_quote = r\"(?<=\\d{1,2})([A-Za-z]+ )?([0-9]+)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_numbers_nospace(text1):\n    '''\n    Write a function to extract numbers (e.g. \"23 March 2003\", \"1 January 2000\") of the given string.\n    '''\n    match_quote = r\"(?<=\\d{1,2})([A-Za-z]+ )?([0-9]+)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_sentences(text1):\n    '''\n    Write a function to extract sentences of the given string.\n    '''\n    match_quote = r\"(?<=\\w.{2,}?\\w|\\w.{2,}?$)([A-Za-z\\w]+.)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_sentences_spaces(text1):\n    '''\n    Write a function to extract sentences of the given string.\n    '''\n    match_quote = r\"(?<=\\w.{2,}?\\w|\\w.{2,}?$)([A-Za-z\\w]+.)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_sentences_nospace(text1):\n    '''\n    Write a function to extract sentences of the given string.\n    '''\n    match_quote = r\"(?<=\\w.{2,}?\\w|\\w.{2,}?$)([A-Za-z\\w]+.)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_sentences_comma(text1):\n    '''\n    Write a function to extract sentences of the given string.\n    '''\n    match_quote = r\"(?<=\\w.{2,}?\\w|\\w.{2,}?$)([A-Za-z\\w,]+.)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_sentences_comma_space(text1):\n    '''\n    Write a function to extract sentences of the given string.\n    '''\n    match_quote = r\"(?<=\\w.{2,}?\\w|\\w.{2,}?$)([A-Za-z\\w,]+.)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_sentences_comma_space_space(text1):\n    '''\n    Write a function to extract sentences of the given string.\n    '''\n    match_quote = r\"(?<=\\w.{2,}?\\w|\\w.{2,}?$)([A-Za-z\\w,]+.)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_words_comma(text1):\n    '''\n    Write a function to extract values between words and commas of the given string.\n    '''\n    match_quote = r\"(?<=\\w+)([^\\w\\s]+)(?=\\s?\\w+)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_words_comma_space(text1):\n    '''\n    Write a function to extract values between words and commas of the given string.\n    '''\n    match_quote = r\"(?<=\\w+)([^\\w\\s]+)(?=\\s?\\w+)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_words_comma_space_space(text1):\n    '''\n    Write a function to extract values between words and commas of the given string.\n    '''\n    match_quote = r\"(?<=\\w+)([^\\w\\s]+)(?=\\s?\\w+)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_words_comma_space_comma(text1):\n    '''\n    Write a function to extract values between words and commas of the given string.\n    '''\n    match_quote = r\"(?<=\\w+)([^\\w\\s]+)(?=,?\\s?\\w+)\"\n    matches = re.findall(match_quote, text1)\n    return matches\ndef extract_words"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1 = re.findall('\\\"(.+?)\\\"', text1)\n    #print text1\n    #return text1\n    #return [s.strip('\"') for s in text1]\n    #return re.findall('\\\"(.+?)\\\"', text1)\n    return re.findall('\"(.+?)\"', text1)\ndef extract_names(text):\n    '''\n    Write a function to extract all the names from a text block.\n    '''\n    #text = re.sub('[^a-zA-Z0-9\\s]+','', text)\n    #text = re.sub('^[^a-zA-Z0-9]+','', text)\n    #text = re.sub('[^a-zA-Z0-9]+$','', text)\n    #text = re.sub('\\s+','', text)\n    text = re.sub('^[^a-zA-Z0-9]+','', text)\n    text = re.sub('[^a-zA-Z0-9]+$','', text)\n    text = re.sub('\\s+','', text)\n    return text.split()\ndef extract_time(text):\n    '''\n    Write a function to extract time in the format hh:mm:ss\n    '''\n    #return re.findall('(?<=\\:)([0-9]{2})(?=\\:)', text)\n    return re.findall('(?<=\\:)[0-9]{2}(?=\\:)', text)\ndef extract_county(text):\n    '''\n    Write a function to extract the county name from the text\n    '''\n    #return re.findall('(?<=\\:)\\s([^,\\s]+)(?=\\:)', text)\n    return re.findall('(?<=\\:)\\s([^,\\s]+)(?=\\:)', text)\ndef extract_zip(text):\n    '''\n    Write a function to extract the zipcode from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[0-9]{5}(?=\\:)', text)\n    return re.findall('(?<=\\:)[0-9]{5}(?=\\:)', text)\ndef extract_injured(text):\n    '''\n    Write a function to extract the number of injured people from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[0-9]+', text)\n    return re.findall('(?<=\\:)[0-9]+(?=\\:)', text)\ndef extract_killed(text):\n    '''\n    Write a function to extract the number of killed people from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[0-9]+', text)\n    return re.findall('(?<=\\:)[0-9]+(?=\\:)', text)\ndef extract_miles(text):\n    '''\n    Write a function to extract the distance travelled in miles from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[0-9]+\\s(?=miles)', text)\n    return re.findall('(?<=\\:)\\s[0-9]+\\smiles(?=\\:)', text)\ndef extract_age(text):\n    '''\n    Write a function to extract the age from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[0-9]+\\s(?=yrs)', text)\n    return re.findall('(?<=\\:)\\s[0-9]+\\syrs(?=\\:)', text)\ndef extract_gender(text):\n    '''\n    Write a function to extract the gender from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[^\\s]+', text)\n    return re.findall('(?<=\\:)\\s([^\\s]+)(?=\\:)', text)\ndef extract_condition(text):\n    '''\n    Write a function to extract the condition from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[^\\s]+', text)\n    return re.findall('(?<=\\:)\\s([^\\s]+)(?=\\:)', text)\ndef extract_location(text):\n    '''\n    Write a function to extract the location from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[^\\s]+', text)\n    return re.findall('(?<=\\:)\\s([^\\s]+)(?=\\:)', text)\ndef extract_died(text):\n    '''\n    Write a function to extract the date of death from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[0-9]+\\s(?=yrs)', text)\n    return re.findall('(?<=\\:)\\s[0-9]+\\syrs(?=\\:)', text)\ndef extract_date(text):\n    '''\n    Write a function to extract the date of birth from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[0-9]+\\s(?=yrs)', text)\n    return re.findall('(?<=\\:)\\s[0-9]+\\syrs(?=\\:)', text)\ndef extract_race(text):\n    '''\n    Write a function to extract the race from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[^\\s]+', text)\n    return re.findall('(?<=\\:)\\s([^\\s]+)(?=\\:)', text)\ndef extract_lang(text):\n    '''\n    Write a function to extract the language from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[^\\s]+', text)\n    return re.findall('(?<=\\:)\\s([^\\s]+)(?=\\:)', text)\ndef extract_city(text):\n    '''\n    Write a function to extract the city from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[^\\s]+', text)\n    return re.findall('(?<=\\:)\\s([^\\s]+)(?=\\:)', text)\ndef extract_address(text):\n    '''\n    Write a function to extract the address from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[^\\s]+', text)\n    return re.findall('(?<=\\:)\\s([^\\s]+)(?=\\:)', text)\ndef extract_state(text):\n    '''\n    Write a function to extract the state from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[^\\s]+', text)\n    return re.findall('(?<=\\:)\\s([^\\s]+)(?=\\:)', text)\ndef extract_county(text):\n    '''\n    Write a function to extract the county from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[^\\s]+', text)\n    return re.findall('(?<=\\:)\\s([^\\s]+)(?=\\:)', text)\ndef extract_congress(text):\n    '''\n    Write a function to extract the congress from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[^\\s]+', text)\n    return re.findall('(?<=\\:)\\s([^\\s]+)(?=\\:)', text)\ndef extract_party(text):\n    '''\n    Write a function to extract the party from the text\n    '''\n    #return re.findall('(?<=\\:)\\s[^\\s]+', tex"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    output=[]\n    new_text=\"\"\n    if text1[0]!='\"' or text1[-1]!='\"':\n        return \"The quotation marks should be double\"\n    for i in range(1,len(text1)-1):\n        if text1[i]!='\"':\n            new_text+=text1[i]\n        else:\n            break\n    if new_text[-1]!='\"':\n        return \"There is no ending quotation\"\n    for i in range(len(new_text)-1,-1,-1):\n        if new_text[i]!='\"':\n            new_text=new_text[:i]+' '+new_text[i+1:]\n    new_text=new_text.strip()\n    if new_text[-1]==' ':\n        new_text=new_text[:-1]\n    for i in new_text.split():\n        if i[0]=='\\\"' and i[-1]=='\\\"':\n            output.append(i[1:-1])\n    return output\n    \ndef extract_word(text1):\n    '''\n    Write a function to extract words from the given string.\n    '''\n    output=[]\n    new_text=\"\"\n    if text1[0]!='\"' or text1[-1]!='\"':\n        return \"The quotation marks should be double\"\n    for i in range(1,len(text1)-1):\n        if text1[i]!='\"':\n            new_text+=text1[i]\n        else:\n            break\n    if new_text[-1]!='\"':\n        return \"There is no ending quotation\"\n    for i in range(len(new_text)-1,-1,-1):\n        if new_text[i]!='\"':\n            new_text=new_text[:i]+' '+new_text[i+1:]\n    new_text=new_text.strip()\n    if new_text[-1]==' ':\n        new_text=new_text[:-1]\n    for i in new_text.split():\n        if i[0]!='\\\"':\n            output.append(i)\n    return output\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(a*b for a,b in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = tuple([i*j for i,j in zip(test_tup,test_tup[1:])])\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    def multiply_elements(test_tup):\n        multiplied_tup = tuple()\n        for i in range(len(test_tup) - 1):\n            multiplied_tup = (multiplied_tup + (test_tup[i+1],))\n        return multiplied_tup\n    return multiply_elements(test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #if not test_tup:\n    #    return None\n    #t = list(test_tup)\n    #for i in range(len(t)-1):\n    #    t[i] = t[i+1] * t[i]\n    #return tuple(t)\n    \n    return tuple(x*y for x,y in zip(test_tup[0:], test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x * y for x, y in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x * y for x, y in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t*(t+1) for t in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    i = 0\n    while i < len(test_tup) - 1:\n        test_tup[i] *= test_tup[i+1]\n        i += 1\n    return test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    answer = ()\n    for index, value in enumerate(test_tup):\n        if index == len(test_tup) - 1:\n            answer = answer + (value,)\n        else:\n            answer = answer + (value * test_tup[index + 1],)\n    return answer\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(0, len(test_tup), 2):\n        new_tup += (test_tup[i]*test_tup[i+1],)\n    return new_tup\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_sum = []\n    for i in range(len(lst1)):\n        lst_sum.append(lst1[i]+lst2[i])\n    return lst_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    n = len(lst1)\n    return [lst1[i] + lst2[i] for i in range(n)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return None\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert isinstance(lst1,list)\n    assert isinstance(lst2,list)\n    assert isinstance(lst1[0],list)\n    assert isinstance(lst2[0],list)\n    assert isinstance(lst1[0][0],int)\n    assert isinstance(lst2[0][0],int)\n    assert len(lst1) == len(lst2)\n    assert len(lst1[0]) == len(lst2[0])\n    for i in range(len(lst1)):\n        for j in range(len(lst1[i])):\n            lst1[i][j] = lst1[i][j] + lst2[i][j]\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==0:\n        return lst2\n    if len(lst2)==0:\n        return lst1\n    else:\n        return lst1 + lst2\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for (k, _) in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for k, g in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    a = [list(g) for k, g in groupby(nums)]\n    b = []\n    for i in a:\n        if len(i) > 1:\n            b.append(i[0])\n    return b\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]\n    \ndef long_word(sentence):\n    '''\n    Write a function to find the longest word in a sentence.\n    '''\n    return max(sentence.split(' '), key=len)\n    \ndef max_index(L):\n    '''\n    Write a function to find the index of the largest number in a list.\n    '''\n    return L.index(max(L))\n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return ''.join(reversed(s))\n    \ndef three_odd_numbers(nums):\n    '''\n    Write a function to check if a list has three consecutive odd numbers.\n    '''\n    return sum(i % 2 for i in nums) == 3\n    \ndef unique_in_order(iterable):\n    '''\n    Write a function to check if a list has all unique characters,\n    assuming that the list contains no nulls.\n    '''\n    return len(set(iterable)) == len(iterable)\n    \ndef count_vowels(sentence):\n    '''\n    Write a function to count the number of vowels in a sentence.\n    '''\n    return sum(s in 'aeiouAEIOU' for s in sentence)\n    \ndef match_ends(words):\n    '''\n    Write a function to check if all words in a list start and end with the same letter.\n    '''\n    return all(w[0] == w[-1] for w in words)\n    \ndef splitter(string):\n    '''\n    Write a function to split a string on spaces,\n    except for the first space.\n    '''\n    return [s.strip() for s in string.split(' ', 1)]\n    \ndef check_palidrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef count_factors(num):\n    '''\n    Write a function to count the number of factors a number has\n    '''\n    return sum(1 for i in range(1, int(num**0.5) + 1) if num % i == 0)\n    \ndef find_highest_factor(num):\n    '''\n    Write a function to find the highest factor of a number.\n    '''\n    return max(i for i in range(1, int(num**0.5) + 1) if num % i == 0)\n    \ndef prime_factors(num):\n    '''\n    Write a function to find the prime factors of a number.\n    '''\n    factors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            factors.append(i)\n            factors.append(num // i)\n    return sorted(factors)\n    \ndef word_split(phrase, list_of_words, output=None):\n    '''\n    Write a function to check if a phrase can be segmented into words in a list.\n    '''\n    if output is None:\n        output = []\n    if not phrase:\n        return True\n    if phrase[0] not in list_of_words:\n        return False\n    for word in list_of_words:\n        if word == phrase[:len(word)]:\n            word_split(phrase[len(word):], list_of_words, output + [word])\n    return True if output else False\n    \ndef is_abecedarian(word):\n    '''\n    Write a function to check if a word is abecedarian.\n    A word is abecedarian if the letters of the word appear in descending order.\n    '''\n    return word == ''.join(sorted(word, reverse=True))\n    \ndef is_anagram(word1, word2):\n    '''\n    Write a function to check if two words are anagrams.\n    '''\n    return sorted(word1) == sorted(word2)\n    \ndef find_the_duplicate(nums):\n    '''\n    Write a function to find a duplicate number in an array of integers.\n    '''\n    nums = set(nums)\n    for i in nums:\n        if nums.count(i) > 1:\n            return i\n    \ndef find_all_duplicates(nums):\n    '''\n    Write a function to find all duplicates in an array of integers.\n    '''\n    return [k for k, g in groupby(nums)]\n    \ndef find_missing_numbers(nums):\n    '''\n    Write a function to find all missing numbers in an array of integers.\n    '''\n    return [x for x in range(len(nums) + 1) if x not in nums]\n    \ndef find_smallest_missing_positive(nums):\n    '''\n    Write a function to find the smallest missing positive integer in an array of integers.\n    '''\n    return min(set(range(1, len(nums) + 1)).difference(nums))\n    \ndef find_rotation_point(words):\n    '''\n    Write a function to find the index of the rotation point in a string.\n    '''\n    return min(range(1, len(words)), key=lambda i: words[i:] + words[:i])\n    \ndef find_rotation_point2(words):\n    '''\n    Write a function to find the index of the rotation point in a string.\n    '''\n    for i in range(len(words)):\n        if words[i:] + words[:i] == words:\n            return i\n    return None\n    \ndef is_in_order(words):\n    '''\n    Write a function to check if words are in alphabetical order.\n    '''\n    return all(w1 <= w2 for w1, w2 in zip(words, words[1:]))\n    \ndef is_in_order2(words):\n    '''\n    Write a function to check if words are in alphabetical order.\n    '''\n    return all(w1 <= w2 for w1, w2 in zip(words, words[1:])) if len(words) > 1 else True\n    \ndef is_in_order3(words, word_list):\n    '''\n    Write a function to check if words are in alphabetical order.\n    '''\n    return all(w1 <= w2 for w1, w2 in zip(words, word_list))\n    \ndef is_anagram2(w1, w2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    return sorted(w1) == sorted(w2)\n    \ndef is_anagram3(w1, w2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    return sorted(w1) == sorted(w2) if len(w1) == len(w2) else False\n    \ndef has_duplicate(nums):\n    '''\n    Write a function to find if a list has duplicate items.\n    '''\n    return len(nums)!= len(set(nums))\n    \ndef merge_intervals(intervals):\n    '''\n    Write a function to merge a list of intervals into a new list of intervals.\n    '''\n    merged = []\n    for interval in sorted(intervals, key=lambda x: x[0]):\n        if not merged or merged[-1][1] < interval[0]:\n            merged.append(interval)\n        else:\n            merged[-1][1] = max(merged[-1][1], interval[1])\n    return merged\n    \ndef insert_into_array(nums, target):\n    '''\n    Write a function to insert a new number into a sorted array.\n    '''\n    left, right = 0, len(nums)\n    while left!= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            left = mid + 1\n        elif nums[mid] > target:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n    \ndef find_max_average("
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(enumerate(nums), lambda x:x[0] - x[1]):\n        result.append(list(map(lambda x: x[1], g)))\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for i,j in groupby(nums) if len(list(j)) > 1]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(j) for i, j in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n    result = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i]!= nums[i-1]:\n            result.append(nums[i])\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def remove_duplicates(nums):\n        if len(nums) <= 1:\n            return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for k, g in groupby(nums):\n        res.append(len(list(g)))\n    return res\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=r\n    h=h\n    #radius = r\n    #height = h\n    a = math.pi*(r**2)\n    A = ((math.pi*(r**2))/4)*(h**2)\n    print(\"The area of a cone with radius %r and height %r is %r\" %(r,h,a))\n    print(\"The area of a cone with radius %r and height %r is %r\" %(r,h,A))\n    \nlateralsurface_cone(2.0,2.0)\nlateralsurface_cone(4.0,3.0)\nlateralsurface_cone(8.0,5.0)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area_per_circumference = 3.14159265359 * (r**2)\n    surface_area = 2 * area_per_circumference * h\n    return surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    assert type(r) is float or type(r) is int, \"r must be a number\"\n    assert type(h) is float or type(h) is int, \"h must be a number\"\n    assert r > 0, \"r must be positive\"\n    assert h > 0, \"h must be positive\"\n    return 3.14 * r**2 * (h/3)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2 + math.pi*(r**2 - h**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi=math.pi\n    r=float(r)\n    h=float(h)\n    S=(pi/4)*(r**2)+(r*h)\n    return S\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    R=r\n    H=h\n    S= math.pi*R*R*2+math.pi*R*H+math.pi*H*H\n    print(\"The lateral surface area of a cone with radius %f and height %f is %f\"%(R,H,S))\n    return S\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #here's the formula\n    return math.pi * (r**2) + (math.pi * (r**2))/3 + (math.pi * (r**2) * math.cos(math.pi * h/r))/2\ndef cube(a):\n    '''\n    Write a function to find the volume of a cube given length a.\n    '''\n    #here's the formula\n    return a**3\ndef spigot(a,b,c):\n    '''\n    Write a function to find the volume of a spigot given the dimensions a,b,c.\n    '''\n    #here's the formula\n    return ((a**2)*b*c)\ndef rightangled_triangle(a,b):\n    '''\n    Write a function to find the volume of a right angled triangle given the dimensions a,b.\n    '''\n    #here's the formula\n    return 0.5 * a * b\ndef cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given the radius r and height h.\n    '''\n    #here's the formula\n    return math.pi * (r**2) * h\ndef rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle given the dimensions a,b.\n    '''\n    #here's the formula\n    return a * b\ndef rhombus(a,b):\n    '''\n    Write a function to find the volume of a rhombus given the dimensions a,b.\n    '''\n    #here's the formula\n    return (a * b) / 2\ndef sphere(r):\n    '''\n    Write a function to find the volume of a sphere given the radius r.\n    '''\n    #here's the formula\n    return (4/3) * math.pi * (r**3)\ndef torus(r,r2):\n    '''\n    Write a function to find the volume of a torus given the dimensions a,b.\n    '''\n    #here's the formula\n    return math.pi * (r**2) * 2 * math.pi * (r2)\ndef pentagon(a):\n    '''\n    Write a function to find the volume of a pentagon given the side length a.\n    '''\n    #here's the formula\n    return (5/4) * math.pi * (a**2)\ndef hexagon(a):\n    '''\n    Write a function to find the volume of a hexagon given the side length a.\n    '''\n    #here's the formula\n    return (6/5) * math.pi * (a**2)\ndef triangle(a,b):\n    '''\n    Write a function to find the volume of a triangle given the dimensions a,b.\n    '''\n    #here's the formula\n    return (a * b) / 2\ndef hexagon_surface_area(a):\n    '''\n    Write a function to find the surface area of a hexagon given the side length a.\n    '''\n    #here's the formula\n    return 6 * math.sqrt(3) * a\ndef rhombus_surface_area(a):\n    '''\n    Write a function to find the surface area of a rhombus given the side length a.\n    '''\n    #here's the formula\n    return 4 * math.sqrt(3) * a\ndef square(a):\n    '''\n    Write a function to find the surface area of a square given the side length a.\n    '''\n    #here's the formula\n    return 4 * a\ndef pentagon_surface_area(a):\n    '''\n    Write a function to find the surface area of a pentagon given the side length a.\n    '''\n    #here's the formula\n    return 5 * math.sqrt(3) * a\ndef circle(r):\n    '''\n    Write a function to find the surface area of a circle given the radius r.\n    '''\n    #here's the formula\n    return 2 * math.pi * r\ndef cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given the radius r and height h.\n    '''\n    #here's the formula\n    return 2 * math.pi * (r**2) + 2 * math.pi * (r**2) * math.sin(math.pi * h/r)\ndef triangle_surface_area(a,b):\n    '''\n    Write a function to find the surface area of a triangle given the dimensions a,b.\n    '''\n    #here's the formula\n    return (a * b) / 2\ndef rectangle_surface_area(a,b):\n    '''\n    Write a function to find the surface area of a rectangle given the dimensions a,b.\n    '''\n    #here's the formula\n    return (a * b)\ndef rhombus_surface_area(a,b):\n    '''\n    Write a function to find the surface area of a rhombus given the dimensions a,b.\n    '''\n    #here's the formula\n    return (a * b)\ndef rhombus_volume(a,b):\n    '''\n    Write a function to find the volume of a rhombus given the dimensions a,b.\n    '''\n    #here's the formula\n    return (a**2) * (b**2) / 4\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder given the radius r and height h.\n    '''\n    #here's the formula\n    return math.pi * (r**2) * h\ndef square_volume(a):\n    '''\n    Write a function to find the volume of a square given the side length a.\n    '''\n    #here's the formula\n    return a**2\ndef pentagon_volume(a):\n    '''\n    Write a function to find the volume of a pentagon given the side length a.\n    '''\n    #here's the formula\n    return (5/4) * math.pi * (a**2)\ndef hexagon_volume(a):\n    '''\n    Write a function to find the volume of a hexagon given the side length a.\n    '''\n    #here's the formula\n    return (6/5) * math.pi * (a**2)\ndef circle_volume(r):\n    '''\n    Write a function to find the volume of a circle given the radius r.\n    '''\n    #here's the formula\n    return math.pi * (r**2)\ndef hexagon_surface_area(a):\n    '''\n    Write a function to find the surface area of a hexagon given the side length a.\n    '''\n    #here's the formula\n    return 6 * math.sqrt(3) * a\ndef square_surface_area(a):\n    '''\n    Write a function to find the surface area of a square given the side length a.\n    '''\n    #here's the formula\n    return 4 * a\ndef pentagon_surface_area(a):\n    '''\n    Write a function to find the surface area of a pentagon given the side length a.\n    '''\n    #here's the formula\n    return 5 * math.sqrt(3) * a\ndef triangle_volume(a,b):\n    '''\n    Write a function to find the volume of a triangle given the dimensions a,b.\n    '''\n    #here's the formula\n    return (a * b) / 2\ndef rectangle_volume(a,b):\n    '''\n    Write a function to find the volume of a rectangle given the dimensions a,b.\n    '''\n    #here's the formula\n    return a * b\ndef rhombus_volume(a,b):\n    '''\n    Write a function to find the volume of a rhombus given the dimensions a,b.\n    '''\n    #here's the formula\n    return (a**2) * (b**2) / 4\ndef triangle_surface_area(a,b):\n    '''\n    Write a function to find the surface area of a triangle given the dimensions a,b.\n    '''\n    #here's the formula\n    return (a * b)\ndef rhombus_surface_area(a,b):\n    '''\n    Write a function to find the surface area of a rhombus given the dimensions a,b.\n    '''\n    #here's the formula\n    return "
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #pi is imported for use\n    import math\n    #The area of a cone is pi*r^2*(height/2)\n    #The total lateral surface area of a cone is 2*pi*(r^2+(r*height/2)^2)\n    area = pi*r**2*(h/2)\n    total_lateral = 2*pi*(r**2+(r*h/2)**2)\n    #The total lateral surface area is returned\n    return total_lateral\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # radius r is defined in the exercise description as the radius of the bottom side of the cone\n    # h is defined in the exercise description as the height of the cone\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 1/3 * math.pi * r**2 * (r + math.sqrt((r**2) + (h**2)))\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[\\s|,|.]\", \":\", text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\",\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use \".\" instead of \" \" or \",\" to replace a space\n    text = re.sub(r\"([A-Za-z])\", r\" \\1\", text)\n    # Use \":\" instead of \" \" or \",\" to replace a comma\n    text = re.sub(r\"([A-Za-z])\", r\":\\1\", text)\n    # Use \":\" instead of \" \" or \",\" to replace a dot\n    text = re.sub(r\"([A-Za-z])\", r\":\\1\", text)\n    # Use \":\" instead of \" \" or \",\" to replace a comma\n    text = re.sub(r\"([A-Za-z])\", r\":\\1\", text)\n    # Use \":\" instead of \" \" or \",\" to replace a space\n    text = re.sub(r\"([A-Za-z])\", r\":\\1\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[ |,|.]',':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\w\\s,.]')\n    return re.sub(pattern,'',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #remove spaces\n    text=re.sub(r'[\\s]','',text)\n    #replace commas with colons\n    text=re.sub(r'[,]','',text)\n    #replace dots with colons\n    text=re.sub(r'[.]','',text)\n    #replace spaces with colons\n    text=re.sub(r'[ ]','',text)\n    #replace all other characters with colons\n    text=re.sub(r'[^\\w\\s]','',text)\n    return text\ndef replace_all_characters(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #remove spaces\n    text=re.sub(r'[\\s]','',text)\n    #replace commas with colons\n    text=re.sub(r'[,]','',text)\n    #replace dots with colons\n    text=re.sub(r'[.]','',text)\n    #replace spaces with colons\n    text=re.sub(r'[ ]','',text)\n    #replace all other characters with colons\n    text=re.sub(r'[^\\w\\s]','',text)\n    return text\ndef remove_digits(text):\n    '''\n    Write a function to remove all digits from a text.\n    '''\n    #remove spaces\n    text=re.sub(r'[\\s]','',text)\n    #remove commas\n    text=re.sub(r'[,]','',text)\n    #remove dots\n    text=re.sub(r'[.]','',text)\n    #remove spaces\n    text=re.sub(r'[ ]','',text)\n    #remove all characters except alphabets\n    text=re.sub(r'[^\\w\\s]','',text)\n    #remove all digits\n    text=re.sub(r'[0-9]','',text)\n    return text\ndef remove_all_characters(text):\n    '''\n    Write a function to remove all characters from a text.\n    '''\n    #remove spaces\n    text=re.sub(r'[\\s]','',text)\n    #remove commas\n    text=re.sub(r'[,]','',text)\n    #remove dots\n    text=re.sub(r'[.]','',text)\n    #remove spaces\n    text=re.sub(r'[ ]','',text)\n    #remove all characters except alphabets\n    text=re.sub(r'[^\\w\\s]','',text)\n    #remove all characters\n    text=re.sub(r'[^\\w\\s]','',text)\n    return text\ndef remove_space_before_punctuation(text):\n    '''\n    Write a function to remove all space before punctuation characters.\n    '''\n    #remove spaces\n    text=re.sub(r'[\\s]','',text)\n    #remove commas\n    text=re.sub(r'[,]','',text)\n    #remove dots\n    text=re.sub(r'[.]','',text)\n    #remove spaces\n    text=re.sub(r'[ ]','',text)\n    #remove all characters except alphabets\n    text=re.sub(r'[^\\w\\s]','',text)\n    #remove space before punctuation\n    text=re.sub(r'[^\\w\\s.,]','',text)\n    return text\ndef remove_all_space_before_punctuation(text):\n    '''\n    Write a function to remove all space before punctuation characters.\n    '''\n    #remove spaces\n    text=re.sub(r'[\\s]','',text)\n    #remove commas\n    text=re.sub(r'[,]','',text)\n    #remove dots\n    text=re.sub(r'[.]','',text)\n    #remove spaces\n    text=re.sub(r'[ ]','',text)\n    #remove all characters except alphabets\n    text=re.sub(r'[^\\w\\s]','',text)\n    #remove space before punctuation\n    text=re.sub(r'[^\\w\\s.,]','',text)\n    return text\ndef remove_all_space_after_punctuation(text):\n    '''\n    Write a function to remove all space after punctuation characters.\n    '''\n    #remove spaces\n    text=re.sub(r'[\\s]','',text)\n    #remove commas\n    text=re.sub(r'[,]','',text)\n    #remove dots\n    text=re.sub(r'[.]','',text)\n    #remove spaces\n    text=re.sub(r'[ ]','',text)\n    #remove all characters except alphabets\n    text=re.sub(r'[^\\w\\s]','',text)\n    #remove space after punctuation\n    text=re.sub(r'[^\\w\\s.,]','',text)\n    return text\ndef remove_all_space_after_punctuation(text):\n    '''\n    Write a function to remove all space after punctuation characters.\n    '''\n    #remove spaces\n    text=re.sub(r'[\\s]','',text)\n    #remove commas\n    text=re.sub(r'[,]','',text)\n    #remove dots\n    text=re.sub(r'[.]','',text)\n    #remove spaces\n    text=re.sub(r'[ ]','',text)\n    #remove all characters except alphabets\n    text=re.sub(r'[^\\w\\s]','',text)\n    #remove space after punctuation\n    text=re.sub(r'[^\\w\\s.,]','',text)\n    return text\ndef remove_all_space_before_digit(text):\n    '''\n    Write a function to remove all space before digit characters.\n    '''\n    #remove spaces\n    text=re.sub(r'[\\s]','',text)\n    #remove commas\n    text=re.sub(r'[,]','',text)\n    #remove dots\n    text=re.sub(r'[.]','',text)\n    #remove spaces\n    text=re.sub(r'[ ]','',text)\n    #remove all characters except alphabets\n    text=re.sub(r'[^\\w\\s]','',text)\n    #remove space before digit\n    text=re.sub(r'[^\\w\\s.,0-9]','',text)\n    return text\ndef remove_all_space_after_digit(text):\n    '''\n    Write a function to remove all space after digit characters.\n    '''\n    #remove spaces\n    text=re.sub(r'[\\s]','',text)\n    #remove commas\n    text=re.sub(r'[,]','',text)\n    #remove dots\n    text=re.sub(r'[.]','',text)\n    #remove spaces\n    text=re.sub(r'[ ]','',text)\n    #remove all characters except alphabets\n    text=re.sub(r'[^\\w\\s]','',text)\n    #remove space after digit\n    text=re.sub(r'[^\\w\\s.,0-9]','',text)\n    return text\ndef remove_all_space_before_digit(text):\n    '''\n    Write a function to remove all space before digit characters.\n    '''\n    #remove spaces\n    text=re.sub(r'[\\s]','',text)\n    #remove commas\n    text=re.sub(r'[,]','',text)\n    #remove dots\n    text=re.sub(r'[.]','',text)\n    #remove spaces\n    text=re.sub(r'[ ]','',text)\n    #remove all characters except alphabets\n    text=re.sub(r'[^\\w\\s]','',text)\n    #remove space before digit\n    text=re.sub(r'[^\\w\\s.,0-9]','',text)\n    return text\ndef remov"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"\\.\", \":\", text)\n    text = re.sub(r\"\\,\", \":\", text)\n    text = re.sub(r\"\\s\", \"\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'([ |,|.|!])', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub(' ', ':', text)\n    new_text = re.sub('\\.|,', ':', new_text)\n    return new_text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    char = ','\n    text = re.sub('[ ]+',char,text)\n    text = re.sub('[ ]+','',text)\n    text = re.sub('[.]+','',text)\n    return text\ndef count_words(text):\n    '''\n    Write a function that takes a text as its argument, and returns a dictionary that counts how many times each word is used in the text.\n    '''\n    text = replace_specialchar(text)\n    text = text.split()\n    text = set(text)\n    wordcount = {i:text.count(i) for i in text}\n    return wordcount\ndef count_letters(text):\n    '''\n    Write a function that takes a text as its argument, and returns a dictionary that counts how many times each letter is used in the text.\n    '''\n    text = replace_specialchar(text)\n    text = text.lower()\n    text = text.split()\n    text = [i for i in text if i.isalpha()]\n    text = ''.join(text)\n    count = {i:text.count(i) for i in text}\n    return count\ndef count_punctuation(text):\n    '''\n    Write a function that takes a text as its argument, and returns a dictionary that counts how many times each punctuation mark is used in the text.\n    '''\n    text = replace_specialchar(text)\n    text = text.split()\n    text = [i for i in text if i.isalpha()]\n    text = ''.join(text)\n    count = {i:text.count(i) for i in text}\n    return count\ndef count_sentences(text):\n    '''\n    Write a function that takes a text as its argument, and returns the number of sentences in the text.\n    '''\n    text = replace_specialchar(text)\n    text = text.split('.')\n    return len(text)\ndef count_letters_sentence(text):\n    '''\n    Write a function that takes a text as its argument, and returns a dictionary that counts how many times each letter is used in each sentence.\n    '''\n    text = replace_specialchar(text)\n    text = text.split('.')\n    text = [i.split() for i in text]\n    text = [[i for i in j if i.isalpha()] for j in text]\n    text = [''.join(i) for i in text]\n    text = [i.lower() for i in text]\n    text = [i for i in text if i!= '']\n    count = {i:text.count(i) for i in text}\n    return count\ndef longest_words(text):\n    '''\n    Write a function that takes a text as its argument, and returns the longest word in the text as a tuple consisting of the word and its length.\n    '''\n    text = replace_specialchar(text)\n    text = text.split()\n    text = [i for i in text if i.isalpha()]\n    text = [i for i in text if len(i)>5]\n    text = [i for i in text if len(i)<16]\n    if text == []:\n        return (None,0)\n    else:\n        return (max(text,key=len),len(max(text,key=len)))\ndef longest_words_sentence(text):\n    '''\n    Write a function that takes a text as its argument, and returns the longest word in the text as a tuple consisting of the word and its length.\n    '''\n    text = replace_specialchar(text)\n    text = text.split()\n    text = [i for i in text if i.isalpha()]\n    text = [i for i in text if len(i)>5]\n    text = [i for i in text if len(i)<16]\n    if text == []:\n        return (None,0)\n    else:\n        return (max(text,key=len),len(max(text,key=len)))\ndef longest_words_sentence_count(text):\n    '''\n    Write a function that takes a text as its argument, and returns the count of the longest word in the text as a tuple consisting of the word and its length.\n    '''\n    text = replace_specialchar(text)\n    text = text.split()\n    text = [i for i in text if i.isalpha()]\n    text = [i for i in text if len(i)>5]\n    text = [i for i in text if len(i)<16]\n    if text == []:\n        return (None,0)\n    else:\n        return (len(max(text,key=len)),len(max(text,key=len)))\ndef count_upper_lower(text):\n    '''\n    Write a function that takes a text as its argument, and returns a dictionary that counts how many upper and lower case letters are used in the text.\n    '''\n    text = replace_specialchar(text)\n    text = text.split()\n    text = [i for i in text if i.isalpha()]\n    text = [''.join(i) for i in text]\n    text = [i for i in text if i.isalpha()]\n    upper,lower = [i.isupper() for i in text], [i.islower() for i in text]\n    upper,lower = sum(upper),sum(lower)\n    return {'upper':upper,'lower':lower}\ndef count_numerical(text):\n    '''\n    Write a function that takes a text as its argument, and returns a dictionary that counts how many numerical values are used in the text.\n    '''\n    text = replace_specialchar(text)\n    text = text.split()\n    text = [i for i in text if i.isalpha()]\n    text = [''.join(i) for i in text]\n    text = [i for i in text if i.isalpha()]\n    text = [i for i in text if i.isdigit()]\n    return len(text)\ndef count_punctuation_word(text):\n    '''\n    Write a function that takes a text as its argument, and returns a dictionary that counts how many punctuation marks are used in the text.\n    '''\n    text = replace_specialchar(text)\n    text = text.split()\n    text = [i for i in text if i.isalpha()]\n    text = [''.join(i) for i in text]\n    text = [i for i in text if i.isalpha()]\n    text = [i for i in text if i in string.punctuation]\n    return len(text)\ndef count_punctuation_sentence(text):\n    '''\n    Write a function that takes a text as its argument, and returns the number of punctuation marks used in each sentence.\n    '''\n    text = replace_specialchar(text)\n    text = text.split()\n    text = [i for i in text if i.isalpha()]\n    text = [''.join(i) for i in text]\n    text = [i for i in text if i.isalpha()]\n    text = [i for i in text if i in string.punctuation]\n    return len(text)\ndef count_punctuation_letter(text):\n    '''\n    Write a function that takes a text as its argument, and returns a dictionary that counts how many punctuation marks are used in each letter of the text.\n    '''\n    text = replace_specialchar(text)\n    text = text.split()\n    text = [i for i in text if i.isalpha()]\n    text = [''.join(i) for i in text]\n    text = [i for i in text if i.isalpha()]\n    text = [i for i in text if i in string.punctuation]\n    count = {i:text.count(i) for i in text}\n    return count\ndef count_punctuation_char(text):\n    '''\n    Write a function that takes a text as its argument, and returns a dictionary that counts how many punctuation marks are used in each character of the text.\n    '''\n    text = replace_specialchar(text)\n    text = text.split()\n    text = [i for i in text if i.isalpha()]\n    text = [''.join(i) for i in text]\n    text = [i for i in text if i.isalph"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return binary_search(A, x, 0, len(A) - 1)\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A)-1\n    while l <= r:\n        mid = (l+r)//2\n        if A[mid] > x:\n            r = mid-1\n        elif A[mid] < x:\n            l = mid+1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                r = mid-1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if x > A[mid]:\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if A[mid-1]!= A[mid]:\n                return mid\n            else:\n                right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n        \n    return None\n    \nif __name__ == '__main__':\n    A = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    #find the first occurence of x by finding the index of the first occurence of x on the right side of its first occurrence\n    first_occurence = -1\n    right = 0\n    left = len(A) - 1\n    \n    #find the first occurrence of x by comparing the x's value to the value of the next item in the array\n    while left - right >= 0:\n        #the value of the first occurence is found in the middle of the subarray\n        middle = (left + right) / 2\n        if A[middle] == x:\n            #the value is found, so update the first occurence\n            first_occurence = middle\n            #return the index of the first occurence\n            return first_occurence\n        #the value is not in the middle of the array, so check the middle right and middle left\n        if x < A[middle]:\n            #the value is on the left, so move the right side of the array to the middle\n            right = middle\n        else:\n            #the value is on the right, so move the left side of the array to the middle\n            left = middle\n        \n    #the value is not in the array, so the index is -1\n    return -1\n    \n    \ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    #find the last occurence of x by finding the index of the first occurence of x on the left side of its last occurrence\n    first_occurence = -1\n    right = 0\n    left = len(A) - 1\n    \n    #find the last occurence of x by comparing the x's value to the value of the next item in the array\n    while left - right >= 0:\n        #the value of the last occurence is found in the middle of the subarray\n        middle = (left + right) / 2\n        if A[middle] == x:\n            #the value is found, so update the first occurence\n            first_occurence = middle\n            #return the index of the first occurence\n            return first_occurence\n        #the value is not in the middle of the array, so check the middle right and middle left\n        if x < A[middle]:\n            #the value is on the left, so move the right side of the array to the middle\n            right = middle\n        else:\n            #the value is on the right, so move the left side of the array to the middle\n            left = middle\n        \n    #the value is not in the array, so the index is -1\n    return -1\n    \n    \ndef count_occurences(A, x):\n    '''\n    Write a function to count the number of occurrences of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return 0\n    \n    #find the first occurence of x by finding the index of the first occurence of x on the right side of its first occurrence\n    first_occurence = -1\n    right = 0\n    left = len(A) - 1\n    \n    #find the first occurence of x by comparing the x's value to the value of the next item in the array\n    while left - right >= 0:\n        #the value of the first occurence is found in the middle of the subarray\n        middle = (left + right) / 2\n        if A[middle] == x:\n            #the value is found, so update the first occurence\n            first_occurence = middle\n            #return the index of the first occurence\n            return 1\n        #the value is not in the middle of the array, so check the middle right and middle left\n        if x < A[middle]:\n            #the value is on the left, so move the right side of the array to the middle\n            right = middle\n        else:\n            #the value is on the right, so move the left side of the array to the middle\n            left = middle\n        \n    #the value is not in the array, so the index is -1\n    return 0\n    \n    \ndef find_max_min(A):\n    '''\n    Write a function to find the max and min values of an array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    #find the max value by finding the maximum value in the array\n    max = A[0]\n    for item in A:\n        if item > max:\n            max = item\n    \n    #find the min value by finding the minimum value in the array\n    min = A[0]\n    for item in A:\n        if item < min:\n            min = item\n    \n    return [max, min]\n    \n    \ndef find_max_index(A):\n    '''\n    Write a function to find the index of the maximum value in an array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    #find the index of the max value by finding the first index of the max value in the array\n    max = A[0]\n    max_index = 0\n    for i in range(len(A)):\n        if A[i] > max:\n            max = A[i]\n            max_index = i\n    \n    return max_index\n    \n    \ndef find_min_index(A):\n    '''\n    Write a function to find the index of the minimum value in an array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    #find the index of the min value by finding the first index of the min value in the array\n    min = A[0]\n    min_index = 0\n    for i in range(len(A)):\n        if A[i] < min:\n            min = A[i]\n            min_index = i\n    \n    return min_index\n    \n    \ndef find_max_second_min(A):\n    '''\n    Write a function to find the index of the second maximum value in an array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    #find the index of the second max value by finding the first index of the max value in the array\n    max_index = find_max_index(A)\n    \n    #find the index of the second max value by finding the first index of the max value in the array\n    second_max_index = find_max_index(A[:max_index] + A[max_index + 1:])\n    \n    return second_max_index\n    \n    \ndef find_max_second_min_2(A):\n    '''\n    Write a function to find the index of the second maximum value in an array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    #find the index of the second max value by finding the first index of the max value in the array\n    max_index = find_max_index(A)\n    \n    #find the index of the second max value by finding the first index of the max value in the array\n    second_max_index = find_max_index(A[max_index + 1:])\n    \n    return second_max_index\n    \n    \ndef find_min_second_max(A):\n    '''\n    Write a function to find the index of the second minimum value in an array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    #find the index of the second min value by finding the first index of the min value in the array\n    min_index = find_min_index(A)\n    \n    #find the index of the second min value by finding the first index of the min value in the array\n    second_min_index = find_min_index(A[min_index + 1:])\n    \n    return second_min_index\n    \n    \ndef find_max_third_min(A):\n    '''\n    Write a function to find the index of the third maximum value in an array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    #find the index of the third max value by finding the first index of the max value in the array\n    max_index = find_max_index(A)\n    \n    #find th"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # I don't think this is possible in the interview, but I'm not sure\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def binary_search(A, x):\n        '''\n        Return the index of first occurrence of x in A\n        '''\n        l, r = 0, len(A)\n        while l < r:\n            mid = (l+r)//2\n            if x < A[mid]:\n                r = mid\n            elif x > A[mid]:\n                l = mid + 1\n            else:\n                return mid\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = len(A)\n    if l == 0:\n        return -1\n    r = l - 1\n    m = (l + r) // 2\n    while m!= -1 and A[m]!= x:\n        if x > A[m]:\n            r = m - 1\n        else:\n            l = m + 1\n        m = (l + r) // 2\n    if m == -1:\n        return -1\n    return m\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = arr[i]\n    for d in xrange(1, n):\n        for i in xrange(n - d):\n            j = i + d\n            if d == 1:\n                dp[i][j] = arr[i] * arr[j]\n            else:\n                dp[i][j] = max(arr[i] * arr[j] + dp[i + 1][j - 1], arr[i] * arr[j] + dp[i][j - 1])\n    return dp[0][n - 1]\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_prod = 0\n    if len(arr) == 0:\n        return 0\n    for i in xrange(len(arr)):\n        for j in xrange(i+1, len(arr)+1):\n            # print arr[i:j]\n            sum_prod += prod(arr[i:j])\n    return sum_prod\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    soln = [[0 for x in arr]]\n    soln[0][0] = arr[0]\n    for i in xrange(1,len(arr)):\n        soln.append([0 for x in arr])\n        soln[i][0] = arr[i]\n        for j in xrange(1,i+1):\n            soln[i][j] = arr[i] * soln[i-1][j-1]\n    return sum(soln[len(arr)-1])\n    \n    \ndef Ternary_Search(arr, low, high, x):\n    '''\n    Write a function to search x in arr[low..high] using ternary search\n    '''\n    if low > high:\n        return False\n    if high == low:\n        return arr[low] == x\n    mid = low + ((high-low) /3)\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return Ternary_Search(arr, low, mid-1, x)\n    else:\n        return Ternary_Search(arr, mid+1, high, x)\n    \ndef Binary_Search(arr, low, high, x):\n    '''\n    Write a function to search x in arr[low..high] using binary search\n    '''\n    if low > high:\n        return False\n    mid = low + (high-low)/2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return Binary_Search(arr, low, mid-1, x)\n    else:\n        return Binary_Search(arr, mid+1, high, x)\n    \ndef Two_Sum_I(arr, target):\n    '''\n    Write a function to find the pair that sums to a target\n    '''\n    if len(arr) <= 1:\n        return []\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == target:\n                return [i,j]\n                \ndef Two_Sum_II(arr, target):\n    '''\n    Write a function to find the pair that sums to a target\n    '''\n    if len(arr) <= 1:\n        return []\n    seen = {}\n    for i in arr:\n        if i in seen:\n            return [seen[i],i]\n        else:\n            seen[target-i] = i\n    return []\n    \ndef One_Sum_II(arr, target):\n    '''\n    Write a function to find the pair that sums to a target\n    '''\n    if len(arr) <= 1:\n        return []\n    seen = {}\n    for i in arr:\n        if target-i in seen:\n            return [seen[target-i],i]\n        else:\n            seen[i] = i\n    return []\n    \ndef One_Sum_III(arr, target):\n    '''\n    Write a function to find the pair that sums to a target\n    '''\n    if len(arr) <= 1:\n        return []\n    seen = {}\n    for i in arr:\n        if target-i in seen:\n            return [seen[target-i],i]\n        else:\n            seen[i] = i\n    return []\n    \ndef One_Sum_IV(arr, target):\n    '''\n    Write a function to find the pair that sums to a target\n    '''\n    if len(arr) <= 1:\n        return []\n    seen = {}\n    for i in arr:\n        if target-i in seen:\n            return [seen[target-i],i]\n        else:\n            seen[i] = i\n    return []\n    \ndef Three_Sum(arr, target):\n    '''\n    Write a function to find the triplet that sums to a target\n    '''\n    if len(arr) <= 2:\n        return []\n    arr.sort()\n    for i in range(len(arr)-2):\n        l = i+1\n        r = len(arr)-1\n        while l < r:\n            if arr[i] + arr[l] + arr[r] == target:\n                return [arr[i],arr[l],arr[r]]\n            elif arr[i] + arr[l] + arr[r] > target:\n                r = r - 1\n            else:\n                l = l + 1\n    return []\n    \ndef Two_Sum_T(arr, target):\n    '''\n    Write a function to find the pair that sums to a target\n    '''\n    if len(arr) <= 1:\n        return []\n    arr.sort()\n    for i in range(len(arr)-1):\n        l = i + 1\n        r = len(arr)-1\n        while l < r:\n            if arr[i] + arr[l] == target:\n                return [i,l]\n            elif arr[i] + arr[l] > target:\n                r = r - 1\n            else:\n                l = l + 1\n    return []\n    \ndef Two_Sum_T(arr, target):\n    '''\n    Write a function to find the pair that sums to a target\n    '''\n    if len(arr) <= 1:\n        return []\n    arr.sort()\n    for i in range(len(arr)-1):\n        l = i + 1\n        r = len(arr)-1\n        while l < r:\n            if arr[i] + arr[l] == target:\n                return [i,l]\n            elif arr[i] + arr[l] > target:\n                r = r - 1\n            else:\n                l = l + 1\n    return []\n    \ndef Two_Sum_T_I(arr, target):\n    '''\n    Write a function to find the pair that sums to a target\n    '''\n    if len(arr) <= 1:\n        return []\n    arr.sort()\n    for i in range(len(arr)-1):\n        l = i + 1\n        r = len(arr)-1\n        while l < r:\n            if arr[i] + arr[l] == target:\n                return [i,l]\n            elif arr[i] + arr[l] > target:\n                r = r - 1\n            else:\n                l = l + 1\n    return []\n    \ndef Multi_Sum(arr, target):\n    '''\n    Write a function to find the sum of all the multiples of a target in the array\n    '''\n    if len(arr) <= 1:\n        return []\n    arr.sort()\n    start = arr[0]\n    i = 0\n    while i < len(arr):\n        if start % arr[i] == 0:\n            start += arr[i]\n            i += 1\n        else:\n            i += 1\n    return start\n    \ndef Sort_Max(arr):\n    '''\n    Write a function to sort the array such that all elements with the same index are consecutive\n    '''\n    if len(arr) <= 1:\n        return arr\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n    \ndef Sort_Max_II(arr):\n    '''\n    Write a function to sort the array such that all elements with the same index are consecutive\n    '''\n    if len(arr) <= 1:\n        return arr\n    for i in range(len(arr) - 1):\n        swapped = False\n        for j in range(len(arr) - 1 - i):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                swapped = True\n        if not swapped:\n            break\n    return arr\n    \ndef Find_Pairs(arr, target):\n    '''\n    Write a function to find the pair that sums to a target\n    '''\n    if len(arr) <= 1:\n        return []\n    arr.sort()\n    for i i"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l = len(arr)\n    m = len(arr)\n    if l == 0:\n        return 0\n    elif l == 1:\n        return arr[0]\n    else:\n        return arr[0] + sum_Of_Subarray_Prod(arr[1:])\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # base case\n    if len(arr) == 0:\n        return 0\n    \n    # final list\n    l = []\n    \n    # recursion\n    l.append(arr[0])\n    l.append(arr[0]*arr[1])\n    l.append(arr[1]*arr[2])\n    l.append(arr[0]*arr[1]*arr[2])\n    \n    # recurse with reduced array\n    return sum_Of_Subarray_Prod(arr[1:]) + sum(l)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod_arr = [1 for _ in range(len(arr))]\n    subarr_product = 1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            subarr_product = arr[i] * arr[j]\n            prod_arr[j] = subarr_product * prod_arr[j]\n    return sum(prod_arr)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if arr == []:\n        return None\n    n = len(arr)\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr)==1:\n        return arr[0]\n    if len(arr)==2:\n        return arr[0]*arr[1]\n    else:\n        return arr[0]*arr[1] + sum_Of_Subarray_Prod(arr[1:])\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            print prod\n    return \n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n    for i in xrange(n):\n        prod *= arr[i]\n    print prod\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n & 1)\n    n = n & ~1\n    n = n ^ (n & 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n ^ (n >> 1)) + (n & 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0xFFFFFFFFFFFFFFFFL\n    mask = mask ^ (1 << (n.bit_length() - 1)) - 1\n    return (n ^ mask)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)\n    n = n ^ (n >> 2)\n    n = n ^ (n >> 4)\n    n = n ^ (n >> 8)\n    n = n ^ (n >> 16)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = n ^ (n >> 1)\n    y = x ^ (x >> 1)\n    return y\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n^(n>>1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if not n:\n        return 0\n    if n & 1 == 1:\n        return (n+1)^(n+1)\n    return n^(n+1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit_num = 1 << n \n    mask = ~(bit_num - 1)\n    return (bit_num & mask) | (bit_num >> 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0x1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mask <<= 1\n    mas"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n>>1)\n    n = n ^ (n>>2)\n    n = n ^ (n>>4)\n    n = n ^ (n>>8)\n    n = n ^ (n>>16)\n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if n==0:\n        return 0\n    i = 0\n    j = n\n    while i<j:\n        mid = (i+j)//2\n        if a[mid]==x:\n            i = mid\n            return mid\n        elif a[mid]>x:\n            j = mid\n        else:\n            i = mid + 1\n    if a[i]<x:\n        return i+1\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] > x:\n        a.insert(0,x)\n        return a\n    for i in range(1,len(a)):\n        if a[i-1] < x < a[i]:\n            a.insert(i,x)\n            return a\n        elif a[i] < x and a[i-1] > x:\n            a.insert(i,x)\n            return a\n    return a\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if a[i] == x:\n        return i\n    elif a[i-1] < x:\n        return i\n    elif a[i-1] == x:\n        return i-1\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a,x)\n    if i == n or a[i]!= x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    if pos > 0:\n        return pos - 1\n    else:\n        return None\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if a[index]!= x:\n        return index + 1\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index - 1] == x:\n        return index\n    return -1\ndef left_insertion_bisect(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index - 1] == x:\n        return index\n    return -1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    return -1\ndef right_insertion_bisect(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    return -1\ndef left_insertion_binary(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        elif a[mid] > x:\n            hi = mid\n        else:\n            return mid\n    return -1\ndef left_insertion_binary_bisect(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\ndef right_insertion_binary(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        elif a[mid] > x:\n            hi = mid\n        else:\n            return mid\n    return -1\ndef right_insertion_binary_bisect(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\ndef insert_ordered_recursive(a, x, lo, hi):\n    '''\n    Write a function to insert a new value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if lo > hi:\n        a.insert(lo, x)\n        return lo\n    mid = (lo + hi) // 2\n    if x < a[mid]:\n        return insert_ordered_recursive(a, x, lo, mid - 1)\n    else:\n        return insert_ordered_recursive(a, x, mid + 1, hi)\ndef insert_ordered_iterative(a, x):\n    '''\n    Write a function to insert a new value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    a.insert(lo, x)\n    return lo\ndef insert_ordered_binary(a, x, lo, hi):\n    '''\n    Write a function to insert a new value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    mid = (lo + hi) // 2\n    if x < a[mid]:\n        return insert_ordered_binary(a, x, lo, mid - 1)\n    elif x > a[mid]:\n        return insert_ordered_binary(a, x, mid + 1, hi)\n    else:\n        return mid\ndef swap(a, x, y):\n    '''\n    Write a function to swap two numbers in a list in O(1) time. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a[x], a[y] = a[y], a[x]\ndef sort(a):\n    '''\n    Write a function to sort a list using O(n) time and O(1) space. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) <= 1:\n        return\n    pivot = a[0]\n    left = [x for x in a if x < pivot]\n    right = [x for x in a if x > pivot]\n    sort(left)\n    sort(right)\n    a[:] = left + [pivot] + right\ndef sort_list(a):\n    '''\n    Write a function to sort a list using O(n) time and O(1) space. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) <= 1:\n        return\n    pivot = a[0]\n    left = []\n    right = []\n    for x in a:\n        if x < pivot:\n            left.append(x)\n        else:\n            right.append(x)\n    sort_list(left)\n    sort_list(right)\n    a[:] = left + [pivot] + right\ndef insert_ordered(a, x):\n    '''\n    Write a function to insert a new value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    #FIND = re.compile(regex)\n    #return FIND.match(string)\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match: \n        print(\"String starting with vowel\")\n    else: \n        print(\"String starting with consonant\")\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex,string)):\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print \"String starts with a vowel\"\n    else:\n        print \"String doesn't start with a vowel\"\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    global regex\n    if re.match(regex,string):\n        return 'Vowel'\n    else:\n        return 'Consonant'\nprint check_str(\"apple\")\nprint check_str(\"is_this_a_Vowel\")\nprint check_str(\"asdfasdf\")\nprint check_str(\"is_this_a_consonant\")\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex,string))\nprint(check_str('Apple'))\nprint(check_str('Apple1'))\nprint(check_str('aa1'))\nprint(check_str('a'))\nprint(check_str('1')"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = re.findall(regex,string)\n    return string\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string): \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # result = re.match(regex, string)\n    # if result:\n    #     print \"True\"\n    # else:\n    #     print \"False\"\n    # return result\n    result = re.search(regex, string)\n    if result:\n        print \"True\"\n    else:\n        print \"False\"\n    return result\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n    \ndef check_str2(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using re.match.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return (1/n) * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return (1/n)*geometric_sum(n-1)\n    return 1/(n+1)*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return (1 / n) * (geometric_sum(n - 1) + 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    return geometric_sum(n-1) * n\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return geometric_sum(n-1)*n\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(1+n-1)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (1 / n) * ((1 + (1 / n)) ** n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return 1/float(n-1) + geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    n=math.ceil(math.log(n,10))+1\n    return int('1'+'0'*(n-1)+'1',2)\ndef find_digit(n):\n    '''\n    Write a python function to find the digit at which the triangular number with n digits is split. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    n=math.ceil(math.log(n,10))+1\n    return math.ceil((n*(n+1))/2)\ndef find_triangular_number_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    n=math.ceil(math.log(n,10))+1\n    n=int('1'+'0'*(n-1)+'1',2)\n    return n\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return (int(math.ceil((math.pow(10, n) - 1) / 9.0)) + 1) * (n + 1) + n \n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l=int(math.pow(10,n))\n    n_1=int(math.pow(10,n-1))\n    sum=0\n    for i in range(1,l):\n        #print(i)\n        sum = sum + i\n        #print(sum)\n    return sum\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 3\n    if n == 3: \n        return 6\n    \n    n = n - 1\n    s = 0\n    for i in range(1, n + 1): \n        s = s + i * (10 ** i)\n    return s\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers =[]\n    for i in range(1, n):\n        triangular_numbers.append(int(i*(i+1)/2))\n    return triangular_numbers.index(n)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n == 1):\n        return 0\n    k = int(math.ceil(math.sqrt(n)))\n    return int((n - 1) * (k * (k + 1)) / 2) + 1\ndef solve(n): \n    '''\n    Write a python function to find the number of distinct triangular numbers with n digits. https://www.geeksforgeeks.org/number-of-distinct-triangular-numbers-with-n-digits/\n    '''\n    res = 0\n    n = int(n)\n    while(1):\n        i = find_Index(n)\n        if(len(str(i)) == n):\n            res += 1\n        if(len(str(i))!= n):\n            break\n        n += 1\n    return res\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n<1:\n        print \"Invalid input\"\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return (int(math.ceil(n/2.0)))\ndef next_triangular(num):\n    '''\n    Write a python function to find the next triangular number with the same number of digits. https://www.geeksforgeeks.org/next-triangular-number/\n    '''\n    if num==0:\n        return 1\n    else:\n        return num+1\ndef test_find_Index():\n    num=3\n    assert(find_Index(num)==2)\n    num=6\n    assert(find_Index(num)==4)\n    num=5\n    assert(find_Index(num)==3)\n    num=8\n    assert(find_Index(num)==6)\ndef test_next_triangular():\n    num=0\n    assert(next_triangular(num)==1)\n    num=1\n    assert(next_triangular(num)==2)\n    num=2\n    assert(next_triangular(num)==3)\n    num=3\n    assert(next_triangular(num)==4)\n    num=4\n    assert(next_triangular(num)==5)\n    num=5\n    assert(next_triangular(num)==6)\n    num=6\n    assert(next_triangular(num)==7)\n    num=7\n    assert(next_triangular(num)==8)\ndef test_find_Index():\n    num=4\n    assert(find_Index(num)==3)\n    num=5\n    assert(find_Index(num)==4)\n    num=6\n    assert(find_Index(num)==5)\n    num=7\n    assert(find_Index(num)==6)\ndef is_palindrome(n):\n    '''\n    Write a python function to determine whether the given number is a palindrome number. https://www.geeksforgeeks.org/palindrome-number/\n    '''\n    if n<0:\n        return 0\n    num=n\n    num_str=str(num)\n    num_len=len(num_str)\n    if num_len==1:\n        return 1\n    else:\n        mid_index=num_len/2\n        for i in range(mid_index):\n            if num_str[i]!=num_str[num_len-i-1]:\n                return 0\n        return 1\ndef test_is_palindrome():\n    num=123\n    assert(is_palindrome(num)==1)\n    num=234\n    assert(is_palindrome(num)==1)\n    num=333\n    assert(is_palindrome(num)==1)\n    num=12345\n    assert(is_palindrome(num)==1)\n    num=-12345\n    assert(is_palindrome(num)==0)\ndef is_nth_palindrome(n):\n    '''\n    Write a python function to determine whether the given number is a palindrome number or not. https://www.geeksforgeeks.org/palindrome-number/\n    '''\n    if n<0:\n        return 0\n    num=n\n    num_str=str(num)\n    num_len=len(num_str)\n    if num_len==1:\n        return 1\n    else:\n        mid_index=num_len/2\n        for i in range(mid_index):\n            if num_str[i]!=num_str[num_len-i-1]:\n                return 0\n        return 1\ndef test_is_nth_palindrome():\n    num=12\n    assert(is_nth_palindrome(num)==1)\n    num=1234\n    assert(is_nth_palindrome(num)==1)\n    num=12345\n    assert(is_nth_palindrome(num)==1)\n    num=-12345\n    assert(is_nth_palindrome(num)==0)\ndef is_prime(n):\n    '''\n    Write a python function to determine whether the given number is a prime number. https://www.geeksforgeeks.org/prime-number/\n    '''\n    if n<0:\n        return 0\n    num=n\n    if num==1:\n        return 0\n    else:\n        for i in range(2,int(math.ceil(math.sqrt(num)))+1):\n            if num%i==0:\n                return 0\n        return 1\ndef test_is_prime():\n    num=12\n    assert(is_prime(num)==0)\n    num=15\n    assert(is_prime(num)==1)\n    num=17\n    assert(is_prime(num)==1)\n    num=19\n    assert(is_prime(num)==1)\n    num=23\n    assert(is_prime(num)==1)\ndef is_perfect(n):\n    '''\n    Write a python function to determine whether the given number is a perfect number. https://www.geeksforgeeks.org/perfect-number/\n    '''\n    if n<0:\n        return 0\n    num=n\n    sum=0\n    for i in range(1,num):\n        if num%i==0:\n            sum=sum+i\n    if sum==num:\n        return 1\n    else:\n        return 0\ndef test_is_perfect():\n    num=6\n    assert(is_perfect(num)==1)\n    num=8\n    assert(is_perfect(num)==0)\n    num=12\n    assert(is_perfect(num)==1)\ndef is_super_perfect(n):\n    '''\n    Write a python function to determine whether the given number is a superperfect number. https://www.geeksforgeeks.org/superperfect-number/\n    '''\n    if n<0:\n        return 0\n    num=n\n    sum=0\n    for i in range(1,num):\n        if num%i==0:\n            sum=sum+i\n    if sum<num:\n        return 0\n    else:\n        return 1\ndef test_is_super_perfect():\n    num=6\n    assert(is_super_perfect(num)==0)\n    num=9\n    assert(is_super_perfect(num)==0)\n    num=15\n    assert(is_super_perfect(num)==1)\n    num=19\n    assert(is_super_perfect(num)==1)\ndef is_happy(n):\n    '''\n    Write a python function to determine whether the given number is a happy number. https://www.geeksforgeeks.org/happy-number/\n    '''\n    if n<0:\n        return 0\n    num=n\n    sum=0\n    while num:\n        r=num%10\n        sum=sum+r*r\n        num=num/10\n    if sum==1:\n        return 1\n    else:\n        return 0\ndef test_is_happy():\n    num=12\n    assert(is_happy(num)==1)\n    num=19\n    assert(is_happy(num)==1)\n    num=21\n    assert(is_happy(num)==0)\ndef find_next_super_perfect(num):\n    '''\n    Write a python function to find the next superperfect number with the same number of digits. https://www.geeksforgeeks.org/next-superperfect-number/\n    '''\n    if num==0:\n        return 1\n    else:\n        return num+1\ndef test_find_next_super_perfect():\n    num=6\n    assert(find_next_super_perfect(num)==7)\n    num=5\n    assert(find_next_super_perfect(num)==6)\n    num=8\n    assert(find_next_super_perfect(num)==9)\n    num=9\n    assert(find_next_super_perfect(num)==10)\n    num=10\n    assert(find_next_supe"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1):\n        j = i*(i+1)//2\n        if j >= n:\n            return i - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    x = int(math.ceil(n/2))\n    return n*(n+1)/2 - x*(x+1)/2\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in xrange(len(test_tup)):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tuple_dict = {}\n    for i in range(len(test_tup)):\n        tuple_dict[test_tup[i-1]] = test_tup[i]\n    return tuple_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res_dict = {}\n    for i in range(len(test_tup)):\n        res_dict[test_tup[i-1]] = test_tup[i]\n    return res_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    #return dict(zip(test_tup[::2], test_tup[1::2]))\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    output_dict = {}\n    for i in range(0,len(test_tup),2):\n        output_dict[test_tup[i]] = test_tup[i+1]\n    return output_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    try:\n        return dict(zip(test_tup[0::2],test_tup[1::2]))\n    except Exception as e:\n        return e\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    l=len(test_tup)\n    dict1={}\n    for i in range(0,l,2):\n        dict1[test_tup[i]]=test_tup[i+1]\n    return dict1\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]:test_tup[i+1] for i in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    flag = 1\n    for i in s :\n        if s.count(i) > 1 :\n            flag = 0\n            break\n    if flag == 1 :\n        print \"All characters are same\"\n    else :\n        print \"Not all characters are same\"\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if i!= s[0] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l=list(s)\n    d=dict()\n    for i in l :\n        if i in d :\n            d[i]=d[i]+1\n        else :\n            d[i]=1\n    for i in d :\n        if d[i]>1 :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    flag = True\n    for i in s :\n        if i!= s[0] :\n            flag = False\n            break\n    if flag == True :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = s.lower()\n    if s.count(s[0]) == len(s) :\n        return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if (len(s) == 1) :\n        return True\n    if (s[0]!= s[1]) :\n        return False\n    return all_Characters_Same(s[1:])\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    temp=s[0]\n    for i in s :\n        if i!=temp :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in s :\n        if i == s[0] :\n            count += 1\n        else :\n            return \"NO\"\n    if count == len(s) :\n        return \"YES\"\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3 * math.sqrt(3) / 4) * side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)/3.0\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2 * (3.0/4.0)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/4) * side ** 2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3 ** 0.5) / 4\n    return (side ** 2) * s\ndef volume_tetrahedron(side):\n    s = (3 ** 0.5) / 4\n    return (side ** 3) / 12 * s\ndef area_trapezium(base, top, height):\n    return 0.5 * base * height + 0.5 * top * height\ndef volume_trapezium(base, top, height):\n    return (base + top) * height / 3\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_triangle(side):\n    return 0.5 * side * side\ndef volume_triangle(side):\n    return 0.5 * side * side * side\ndef area_square(side):\n    return side * side\ndef volume_square(side):\n    return side * side * side\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_circle(radius):\n    return math.pi * radius * radius\ndef volume_circle(radius):\n    return math.pi * radius ** 2 * radius\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_square(side):\n    return side * side\ndef volume_square(side):\n    return side * side * side\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_circle(radius):\n    return math.pi * radius * radius\ndef volume_circle(radius):\n    return math.pi * radius ** 2 * radius\ndef area_tetrahedron(side):\n    return 0.5 * (3 ** 0.5) * side * side\ndef volume_tetrahedron(side):\n    return 0.5 * (3 ** 0.5) * side * side * side\ndef area_trapezium(base, top, height):\n    return 0.5 * base * height + 0.5 * top * height\ndef volume_trapezium(base, top, height):\n    return (base + top) * height / 3\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_square(side):\n    return side * side\ndef volume_square(side):\n    return side * side * side\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_circle(radius):\n    return math.pi * radius * radius\ndef volume_circle(radius):\n    return math.pi * radius ** 2 * radius\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_square(side):\n    return side * side\ndef volume_square(side):\n    return side * side * side\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_circle(radius):\n    return math.pi * radius * radius\ndef volume_circle(radius):\n    return math.pi * radius ** 2 * radius\ndef area_tetrahedron(side):\n    return 0.5 * (3 ** 0.5) * side * side\ndef volume_tetrahedron(side):\n    return 0.5 * (3 ** 0.5) * side * side * side\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_square(side):\n    return side * side\ndef volume_square(side):\n    return side * side * side\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_circle(radius):\n    return math.pi * radius * radius\ndef volume_circle(radius):\n    return math.pi * radius ** 2 * radius\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_square(side):\n    return side * side\ndef volume_square(side):\n    return side * side * side\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_circle(radius):\n    return math.pi * radius * radius\ndef volume_circle(radius):\n    return math.pi * radius ** 2 * radius\ndef area_tetrahedron(side):\n    return 0.5 * (3 ** 0.5) * side * side\ndef volume_tetrahedron(side):\n    return 0.5 * (3 ** 0.5) * side * side * side\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_square(side):\n    return side * side\ndef volume_square(side):\n    return side * side * side\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_circle(radius):\n    return math.pi * radius * radius\ndef volume_circle(radius):\n    return math.pi * radius ** 2 * radius\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_square(side):\n    return side * side\ndef volume_square(side):\n    return side * side * side\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_circle(radius):\n    return math.pi * radius * radius\ndef volume_circle(radius):\n    return math.pi * radius ** 2 * radius\ndef area_tetrahedron(side):\n    return 0.5 * (3 ** 0.5) * side * side\ndef volume_tetrahedron(side):\n    return 0.5 * (3 ** 0.5) * side * side * side\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_square(side):\n    return side * side\ndef volume_square(side):\n    return side * side * side\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_triangle(side):\n    return side * side\ndef volume_triangle(side):\n    return side * side * side\ndef area_circle(radius):\n    return math.pi * radius * radius\ndef volume_circle(radius):\n    return math.pi * radius ** 2 * radius\ndef area_rectangle(length, width):\n    return length * width\ndef volume_rectangle(length, width):\n    return length * width\ndef area_triangl"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*(math.sqrt(3)))/4*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.375 * side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3**0.5)*math.sqrt(3)*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*math.sqrt(3))/4\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/4 * side ** 2\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0 or m == 1:\n        return list\n    if m > len(list):\n        return list\n    list = list[-m:] + list[:-m]\n    return list\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    if m == 0 or m == 1:\n        return list\n    if m > len(list):\n        return list\n    list = list[m:] + list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list/\n    '''\n    return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # First check for invalid input\n    if type(list)!= list or type(m)!= int:\n        return None\n    \n    # Create a temporary list to store the new items\n    temp = []\n    \n    # Perform the rotation\n    for i in range(m, len(list)):\n        temp.append(list[i])\n    for i in range(0, m):\n        temp.append(list[i])\n    \n    # Return the result\n    return temp\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    elif m < 0:\n        return rotate_right(list[::-1], -m)[::-1]\n    else:\n        return rotate_right(list, m-1)\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m % len(list)\n    list.extend(list[:m])\n    list[:m] = []\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:]+list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[m:] + list[:m]\n    return temp\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list = list[m:] + list[:m]\n    return list\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        print 'It is none'\n    else:\n        print 'There is no none'\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        print \"Tuple does have None value.\"\n    else:\n        print \"Tuple does not have None value.\"\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] == None:\n        return False\n    elif test_tup[1] == None:\n        return False\n    elif test_tup[2] == None:\n        return False\n    elif test_tup[3] == None:\n        return False\n    else:\n        return True\n    \ndef update_interval(test_tup, interval):\n    '''\n    Given a tuple, the function will iterate through the tuple and replace all the Nones with the given interval\n    '''\n    if check_none(test_tup) == False:\n        return test_tup\n    else:\n        for i in range(len(test_tup)):\n            if test_tup[i] == None:\n                test_tup[i] = interval\n        return test_tup\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    num_list = []\n    for i in range(startnum, endnum):\n        if divisible_by_digits_lambda(i):\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: len(str(x)) == len(filter(lambda y: x % y == 0, [int(i) for i in str(x)])), range(startnum, endnum))\n    # divisible_by_digits(10,20)\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum+1) if all([num % int(x) == 0 for x in str(num)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum+1) if num > 0 and all(num%digit == 0 for digit in map(int, str(num)))]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numlist = [x for x in range(startnum, endnum+1) if x%11 == 0]\n    return numlist\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    div_nums = []\n    for i in range(startnum, endnum):\n        if i % (i / 10) == 0:\n            div_nums.append(i)\n    return div_nums\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: x % int(str(x)[0]) == 0 and x % int(str(x)[1]) == 0 and x % int(str(x)[2]) == 0 and x % int(str(x)[3]) == 0, range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    newnumlist = []\n    for n in range(startnum, endnum):\n        if all([int(i)%int(i) == 0 for i in str(n)]):\n            newnumlist.append(n)\n    return newnumlist\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for i in range(startnum, endnum+1):\n        if i % 10 == 0:\n            result.append(i)\n    return result\n    \n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum) if all(int(i) for i in str(x))]\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    try:\n        a = float(a)\n    except ValueError:\n        return None\n    if a > 360.0:\n        return None\n    return (3.1415926535897932 / 4) * (r ** 2) * a\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return a*r*r*math.pi/360\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0:\n        a = 360 + a\n    if a > 360:\n        return None\n    if a == 0:\n        a = 360\n    return math.pi * r**2 * (a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r <= 0 or a <= 0 or a >= 360:\n        return None\n    else:\n        return math.pi*(r**2)*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360 or a < 0:\n        print 'This is invalid angle'\n        return\n    area = math.pi*r**2*(a/360)\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (3.14159)*(r**2)*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*(1-(math.sin(math.pi*a/180)/math.sin(math.pi)))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r*r*(1-math.cos(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return math.pi*r**2*(1.0+math.cos(a))/4.0\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]):\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n    \n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n    return L[m][n][o] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    def LCS(X, Y, m, n):\n        if m==0 or n == 0:\n            return 0\n        elif X[m-1] == Y[n-1]:\n            return 1 + LCS(X, Y, m-1, n-1)\n        else:\n            return max(LCS(X, Y, m, n-1), LCS(X, Y, m-1, n))\n    \n    return LCS(X, Y, len(X), len(Y))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[None]*(o+1) for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i==0 or j==0 or k==0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Find the length of strings\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    n = len(X) \n    m = len(Y) \n    L = [[[0 for i in range(m + 1)] for j in range(n + 1)] for k in range(3)] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lenX = len(X) \n    lenY = len(Y) \n    lenZ = len(Z) \n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #str1 = 'This is a test text'\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1)\n    #str2 = re.sub(r'[A-Z]', lambda x:'' + x.group(0) +'', str1, re.I)\n    #str2 = re.sub(r'[A-Z][a-z]*\\s', lambda x: x.group(0).title(), str1"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    replaced = re.sub(r'\\b([A-Z])', r' \\1', str1)\n    return replaced\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    i=0\n    n=len(str1)\n    s=\"\"\n    if n==0:\n        return s\n    while i<n:\n        if str1[i]>='A' and str1[i]<='Z':\n            s+=\" \"+str1[i]\n            i+=1\n        elif str1[i]>='a' and str1[i]<='z':\n            s+=\" \"+str1[i]\n            i+=1\n        else:\n            s+=str1[i]\n            i+=1\n    return s\ndef count_double_char(str1):\n    '''\n    Write a function that counts the number of characters that appear more than once in a string.\n    '''\n    i=0\n    n=len(str1)\n    if n==0:\n        return 0\n    else:\n        while i<n:\n            if str1[i]>='a' and str1[i]<='z':\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                i+=1\n            else:\n                j=i\n                while j<n:\n                    if str1[j]>='a' and str1[j]<='z':\n                        j+=1\n                    elif str1[j]>='A' and str1[j]<='Z':\n                        j+=1\n                    elif str1[j]>='0' and str1[j]<='9':\n                        j+=1\n                    else:\n                        count=j-i\n                        return count\n                i=j\n        return 0\ndef to_jaden_case(str1):\n    '''\n    Write a function to convert a given string to lowercase string in which words start with a capital letter and the rest of the letters are lowercase.\n    '''\n    i=0\n    n=len(str1)\n    if n==0:\n        return \"\"\n    else:\n        while i<n:\n            if str1[i]>='a' and str1[i]<='z':\n                str1=str1[0:i]+str1[i].lower()+str1[i+1:n]\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                str1=str1[0:i]+str1[i].lower()+str1[i+1:n]\n                i+=1\n            else:\n                i+=1\n        return str1\ndef no_of_words(str1):\n    '''\n    Write a function to calculate the number of words in a string.\n    '''\n    i=0\n    n=len(str1)\n    if n==0:\n        return 0\n    else:\n        count=1\n        while i<n:\n            if str1[i]>='a' and str1[i]<='z':\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                count+=1\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                count+=1\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                count+=1\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                count+=1\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                count+=1\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                count+=1\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                count+=1\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                count+=1\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                count+=1\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                count+=1\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                count+=1\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                count+=1\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                count+=1\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                count+=1\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                count+=1\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                count+=1\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                count+=1\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                count+=1\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                count+=1\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                count+=1\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                count+=1\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                count+=1\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n                i+=1\n            elif str1[i]>='A' and str1[i]<='Z':\n                count+=1\n                i+=1\n            elif str1[i]>='0' and str1[i]<='9':\n                count+=1\n                i+=1\n            elif str1[i]>='a' and str1[i]<='z':\n                count+=1\n            "
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern=r'^[a-zA-Z][a-zA-Z0-9]+'\n    result = re.findall(pattern,str1)\n    for i in result:\n        print i\n        print''\n        print i.title()\n        print''\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.findall('[A-Z]{1}[a-z]+', str1)\n    str2 = \" \".join(str1)\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = \"\"\n    for word in str1.split(\" \"):\n        if word[0].isupper():\n            result += \" \" + word + \" \"\n        else:\n            result += word + \" \"\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if len(str1)==0:\n        return ''\n    else:\n        str1=str1.split()\n        for i in range(len(str1)):\n            if str1[i][0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n                str1[i]=' '+str1[i]+' '\n        return ''.join(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r\"([A-Z][a-z]+)\", r\" \\1\", str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z])', r' \\1', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2=re.sub('(.)([A-Z][a-z]+)',r'\\1 \\2',str1)\n    return str2\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    new_nums = []\n    for n in nums_str:\n        n = int(n)\n        new_nums.append(n)\n    new_nums.sort()\n    new_nums = [str(n) for n in new_nums]\n    return new_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # Approach:\n    # 1. Convert each string to a list of integers (using map function)\n    # 2. Sort the list\n    \n    nums_str = list(map(int, nums_str))\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = [num.strip() for num in nums_str]\n    nums = []\n    for num in nums_str:\n        try:\n            num = int(num)\n        except ValueError:\n            num = float(num)\n        nums.append(num)\n    nums.sort()\n    return [str(num) for num in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def atoi(val):\n        return int(val) if val.isdigit() else val\n    def natural_keys(text):\n        return [ atoi(c) for c in re.split('(\\d+)', text) ]\n    return sorted(nums_str, key=natural_keys)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # set of unique strings\n    # loop through nums_str\n    #     make a new list of each char\n    #     append to new list\n    #     sort new list\n    #     append to final list\n    # return final list\n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    "
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def convert_to_int(string):\n        return [int(x) for x in string]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(n) for n in nums_str]\n    nums.sort()\n    return [str(n) for n in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x.replace('-', '')))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(n) for n in nums_str]\n    nums.sort()\n    return [str(n) for n in nums]\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # if the list is empty, then insert the tuple\n    if len(test_list) == 0:\n        test_list.append(test_tup)\n        return\n    # loop through the list, checking if the tuple is less than the last one\n    # if so, insert the tuple at that index\n    for i in range(len(test_list)):\n        if test_tup[0] < test_list[i][0]:\n            test_list.insert(i, test_tup)\n            return\n    # if the tuple is larger than the last tuple in the list, then append the tuple\n    if test_list[len(test_list) - 1][0] < test_tup[0]:\n        test_list.append(test_tup)\n        return\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \n    \ndef is_permutation(a, b):\n    '''\n    Return True if and only if a and b are permutations of each other.\n    '''\n    return sorted(a) == sorted(b)\n    \n    \ndef test_is_permutation():\n    '''\n    Test the is_permutation function.\n    '''\n    a = [1, 2, 3]\n    b = [1, 2, 4]\n    c = [1, 2, 3]\n    d = [1, 2, 3]\n    \n    assert(is_permutation(a, b) == False)\n    assert(is_permutation(c, d) == True)\n    \n    \ndef is_anagram(a, b):\n    '''\n    Return True if and only if a and b are anagrams of each other.\n    '''\n    return sorted(a) == sorted(b)\n    \n    \ndef test_is_anagram():\n    '''\n    Test the is_anagram function.\n    '''\n    a = 'elephant'\n    b = 'leopard'\n    c = 'elephant'\n    d = 'leopard'\n    \n    assert(is_anagram(a, b) == False)\n    assert(is_anagram(c, d) == True)\n    \n    \ndef is_anagram2(a, b):\n    '''\n    Return True if and only if a and b are anagrams of each other.\n    '''\n    return set(a) == set(b)\n    \n    \ndef test_is_anagram2():\n    '''\n    Test the is_anagram function.\n    '''\n    a = 'elephant'\n    b = 'leopard'\n    c = 'elephant'\n    d = 'leopard'\n    \n    assert(is_anagram2(a, b) == False)\n    assert(is_anagram2(c, d) == True)\n    \n    \ndef is_anagram3(a, b):\n    '''\n    Return True if and only if a and b are anagrams of each other.\n    '''\n    return sorted(a) == sorted(b)\n    \n    \ndef test_is_anagram3():\n    '''\n    Test the is_anagram function.\n    '''\n    a = 'elephant'\n    b = 'leopard'\n    c = 'elephant'\n    d = 'leopard'\n    \n    assert(is_anagram3(a, b) == False)\n    assert(is_anagram3(c, d) == True)\n    \n    \ndef is_anagram4(a, b):\n    '''\n    Return True if and only if a and b are anagrams of each other.\n    '''\n    return len(a) == len(b) and sorted(a) == sorted(b)\n    \n    \ndef test_is_anagram4():\n    '''\n    Test the is_anagram function.\n    '''\n    a = 'elephant'\n    b = 'leopard'\n    c = 'elephant'\n    d = 'leopard'\n    \n    assert(is_anagram4(a, b) == False)\n    assert(is_anagram4(c, d) == True)\n    \n    \ndef is_anagram5(a, b):\n    '''\n    Return True if and only if a and b are anagrams of each other.\n    '''\n    return len(a) == len(b) and sorted(a) == sorted(b)\n    \n    \ndef test_is_anagram5():\n    '''\n    Test the is_anagram function.\n    '''\n    a = 'elephant'\n    b = 'leopard'\n    c = 'elephant'\n    d = 'leopard'\n    \n    assert(is_anagram5(a, b) == False)\n    assert(is_anagram5(c, d) == True)\n    \n    \ndef is_anagram6(a, b):\n    '''\n    Return True if and only if a and b are anagrams of each other.\n    '''\n    return len(a) == len(b) and set(a) == set(b)\n    \n    \ndef test_is_anagram6():\n    '''\n    Test the is_anagram function.\n    '''\n    a = 'elephant'\n    b = 'leopard'\n    c = 'elephant'\n    d = 'leopard'\n    \n    assert(is_anagram6(a, b) == False)\n    assert(is_anagram6(c, d) == True)\n    \n    \ndef is_anagram7(a, b):\n    '''\n    Return True if and only if a and b are anagrams of each other.\n    '''\n    return len(a) == len(b) and set(a) == set(b)\n    \n    \ndef test_is_anagram7():\n    '''\n    Test the is_anagram function.\n    '''\n    a = 'elephant'\n    b = 'leopard'\n    c = 'elephant'\n    d = 'leopard'\n    \n    assert(is_anagram7(a, b) == False)\n    assert(is_anagram7(c, d) == True)\n    \n    \ndef is_anagram8(a, b):\n    '''\n    Return True if and only if a and b are anagrams of each other.\n    '''\n    return len(a) == len(b) and sorted(a) == sorted(b)\n    \n    \ndef test_is_anagram8():\n    '''\n    Test the is_anagram function.\n    '''\n    a = 'elephant'\n    b = 'leopard'\n    c = 'elephant'\n    d = 'leopard'\n    \n    assert(is_anagram8(a, b) == False)\n    assert(is_anagram8(c, d) == True)\n    \n    \ndef is_anagram9(a, b):\n    '''\n    Return True if and only if a and b are anagrams of each other.\n    '''\n    return len(a) == len(b) and sorted(a) == sorted(b)\n    \n    \ndef test_is_anagram9():\n    '''\n    Test the is_anagram function.\n    '''\n    a = 'elephant'\n    b = 'leopard'\n    c = 'elephant'\n    d = 'leopard'\n    \n    assert(is_anagram9(a, b) == False)\n    assert(is_anagram9(c, d) == True)\n    \n    \ndef is_anagram10(a, b):\n    '''\n    Return True if and only if a and b are anagrams of each other.\n    '''\n    return len(a) == len(b) and sorted(a) == sorted(b)\n    \n    \ndef test_is_anagram10():\n    '''\n    Test the is_anagram function.\n    '''\n    a = 'elephant'\n    b = 'leopard'\n    c = 'elephant'\n    d = 'leopard'\n    \n    assert(is_anagram10(a, b) == False)\n    assert(is_anagram10(c, d) == True)\n    \n    \ndef is_anagram11(a, b):\n    '''\n    Return True if and only if a and b are anagrams of each other.\n    '''\n    return len(a) == len(b) and sorted(a) == sorted(b)\n    \n    \ndef test_is_anagram11():\n    '''\n    Test the is_anagram function.\n    '''\n    a = 'elephant'\n    b = 'leopard'\n    c = 'elephant'\n    d = 'leopard'\n    \n    assert(is_anagram11(a, b) == False)\n    assert(is_anagram11(c, d) == True)\n    \n    \ndef is_anagram12(a, b):\n    '''\n    Return True if and only if a and b are anagrams of each other.\n    '''\n    return len(a) == len("
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # return test_list.append(test_tup)\n    return test_list.extend(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < (len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i + 1)\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left >= len(arr):\n        return True\n    else:\n        return arr[i] <= min(arr[left], arr[right])\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # The minheap property is satisfied if the parent is less than the children\n    if i == 0:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if arr[i] is greater than arr[(i-1)/2] then arr[i] is greater than it's parent\n    if arr[i] > arr[(i-1)/2]:\n        return False\n    else:\n        # if parent is greater than left child or right child\n        if arr[(i-1)/2] > arr[(i-2)/2]:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = len(arr)\n    if i >= l:\n        return True\n    else:\n        if arr[i] > arr[2*i + 1] and arr[i] > arr[2*i + 2]:\n            return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n        else:\n            return False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] < arr[2*i]:\n        return False\n    if arr[i] < arr[2*i+1]:\n        return False\n    return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_index = 2*i+1\n    right_index = 2*i+2\n    if left_index < arr_len and arr[left_index] < arr[i]:\n        return False\n    if right_index < arr_len and arr[right_index] < arr[i]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i+1\n    right = 2*i+2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0: \n        print(\"Jacobi number is defined only for non-negative integers\") \n        return\n    elif n == 0: \n        return 0 \n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n    \ndef jacobsthal_list(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return jacobsthal_list(n - 1) + [jacobsthal_list(n - 1)[-1] + jacobsthal_list(n - 2)[-1]]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 1:\n        return n\n    \n    l1 = 1\n    l2 = 1\n    \n    for i in xrange(n-1):\n        l1, l2 = l2, l1 + l2\n    \n    return l2\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = [0, 1, 1]\n    for i in range(3, n+1):\n        j.append(sum(j[-2:]))\n    return j[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n    \ndef jacobsthal_den(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        return jacobsthal_den(n-1) + jacobsthal_den(n-2)\n    \ndef jacobsthal_rec(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        return jacobsthal_rec(n-1) + jacobsthal_rec(n-2)\n    \ndef jacobsthal_iter(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        l1 = 1\n        l2 = 1\n        i = 3\n        while i <= n:\n            l1, l2 = l2, l1 + l2\n            i += 1\n        return l2\n    \ndef jacobsthal_rec_2(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        return jacobsthal_rec_2(n-1) + jacobsthal_rec_2(n-2)\n    \ndef jacobsthal_iter_2(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        l1 = 1\n        l2 = 1\n        i = 3\n        while i <= n:\n            l1, l2 = l2, l1 + l2\n            i += 1\n        return l2\n    \ndef jacobsthal_rec_3(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        return jacobsthal_rec_3(n-1) + jacobsthal_rec_3(n-2)\n    \ndef jacobsthal_iter_3(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        l1 = 1\n        l2 = 1\n        i = 3\n        while i <= n:\n            l1, l2 = l2, l1 + l2\n            i += 1\n        return l2\n    \ndef jacobsthal_rec_4(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        return jacobsthal_rec_4(n-1) + jacobsthal_rec_4(n-2)\n    \ndef jacobsthal_iter_4(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        l1 = 1\n        l2 = 1\n        i = 3\n        while i <= n:\n            l1, l2 = l2, l1 + l2\n            i += 1\n        return l2\n    \ndef jacobsthal_rec_5(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        return jacobsthal_rec_5(n-1) + jacobsthal_rec_5(n-2)\n    \ndef jacobsthal_iter_5(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        l1 = 1\n        l2 = 1\n        i = 3\n        while i <= n:\n            l1, l2 = l2, l1 + l2\n            i += 1\n        return l2\n    \ndef jacobsthal_rec_6(n):\n    '''\n    Write a function to find the nth jacobsthal numbe"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n    \ndef jacobsthal_lucas(n):\n    '''\n    Write a function to find the nth jacobsthal number using lucas numbers. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        return jacobsthal_lucas(n-1) + jacobsthal_lucas(n-2)\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_prime(n-1)\n    \ndef rec_factorial(n):\n    '''\n    Write a recursive function to find the factorial of a number. https://www.hackerrank.com/challenges/recursive-factorials\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * rec_factorial(n-1)\n    \ndef gcd(x, y):\n    '''\n    Write a function to find the gcd of two numbers using Euclid's Algorithm. https://www.geeksforgeeks.org/write-a-program-to-find-gcd-using-euclid's-algorithm/\n    '''\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n    \ndef lcm(x, y):\n    '''\n    Write a function to find the lcm of two numbers using the GCD. https://www.geeksforgeeks.org/write-a-program-to-find-lcm-using-gcd/\n    '''\n    return (x*y) // gcd(x,y)\n    \ndef fib(n):\n    '''\n    Write a recursive function to find nth fibonacci number. https://www.hackerrank.com/challenges/fibonacci-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef is_palin(n):\n    '''\n    Write a recursive function to check whether a number is a palindrome or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    else:\n        if n % 10 == n // 10 % 10:\n            return is_palin(n // 10)\n        else:\n            return False\n        \ndef is_palin_rec(n):\n    '''\n    Write a recursive function to check whether a number is a palindrome or not using the built-in reversed function.\n    '''\n    if n == 0:\n        return True\n    else:\n        return is_palin(n) and is_palin_rec(n // 10)\n    \ndef is_palin_iter(n):\n    '''\n    Write a function to check whether a number is a palindrome or not using iteration.\n    '''\n    if n == 0:\n        return True\n    else:\n        t, f = 0, 0\n        while n:\n            t, f = t * 10 + n % 10, f * 10 + n // 10\n            n //= 10\n            if t!= n:\n                return False\n        return True\n    \ndef sum_palin(n):\n    '''\n    Write a recursive function to find the sum of all the palindrome numbers below n. https://www.hackerrank.com/challenges/ctci-array-left-rotation\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10 + sum_palin(n // 10)) % 10\n    \ndef sum_palin_rec(n):\n    '''\n    Write a recursive function to find the sum of all the palindrome numbers below n using iteration.\n    '''\n    if n == 0:\n        return 0\n    else:\n        t, f = 0, 0\n        while n:\n            t, f = t * 10 + n % 10, f * 10 + n // 10\n            n //= 10\n            if t!= n:\n                break\n        return (t + sum_palin_rec(n)) % 10\n    \ndef is_uniq(n):\n    '''\n    Write a recursive function to check whether a number is unique or not.\n    '''\n    if n == 1:\n        return True\n    elif n % 10 == n // 10 % 10:\n        return is_uniq(n // 10)\n    else:\n        return False\n    \ndef is_uniq_rec(n):\n    '''\n    Write a recursive function to check whether a number is unique or not using the built-in set.\n    '''\n    if n == 1:\n        return True\n    else:\n        return is_uniq(n) and is_uniq_rec(n // 10)\n    \ndef is_uniq_iter(n):\n    '''\n    Write a function to check whether a number is unique or not using iteration.\n    '''\n    if n == 1:\n        return True\n    else:\n        t, f = 0, 0\n        while n:\n            t, f = t * 10 + n % 10, f * 10 + n // 10\n            n //= 10\n            if t!= n:\n                return False\n        return True\n    \ndef is_uniq_rec_comp(n):\n    '''\n    Write a recursive function to check whether a number is unique or not using the built-in set.\n    '''\n    if n == 1:\n        return True\n    else:\n        t, f = set(), set()\n        t.add(n)\n        f.add(n)\n        return is_uniq_rec(n) and (t in f)\n    \ndef is_uniq_iter_comp(n):\n    '''\n    Write a function to check whether a number is unique or not using iteration.\n    '''\n    if n == 1:\n        return True\n    else:\n        t, f = set(), set()\n        t.add(n)\n        return is_uniq_iter(n) and (t in f)\n    \ndef is_uniq_rec_iter(n):\n    '''\n    Write a recursive function to check whether a number is unique or not using iteration.\n    '''\n    if n == 1:\n        return True\n    else:\n        t, f = set(), set()\n        t.add(n)\n        f.add(n)\n        return is_uniq_rec_iter(n) and (t in f)\n    \ndef is_uniq_iter_iter(n):\n    '''\n    Write a function to check whether a number is unique or not using iteration.\n    '''\n    if n == 1:\n        return True\n    else:\n        t, f = 0, 0\n        while n:\n            t, f = t * 10 + n % 10, f * 10 + n // 10\n            n //= 10\n            if t!= n:\n                return False\n        return True\n    \ndef print_fib(n):\n    '''\n    Write a recursive function to print nth fibonacci number using iteration.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return print_fib(n-1) + print_fib(n-2)\n    \ndef sum_fib(n):\n    '''\n    Write a recursive function to print nth fibonacci number using iteration.\n    '''\n    i"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    a, b, c, d, e, f = 0, 1, 1, 3, 2, 0\n    for _ in range(n-3):\n        a, b, c, d, e, f = b, c, d, f, a+b+c, b+d+e\n    return f\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return []\n    elif K == 1:\n        return [min(test_list, key = lambda x: x[1])]\n    else:\n        min_test_list = min_k(test_list[:len(test_list)//2], K)\n        if len(test_list) % 2 == 0:\n            return min_k(test_list[len(test_list)//2:], K-len(min_test_list))\n        else:\n            return min_k(test_list[len(test_list)//2+1:], K-len(min_test_list))\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_list = []\n    for i in range(K):\n        min_k_list.append(test_list[i])\n    min_k_list.sort(key=lambda x: x[1])\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key=lambda x: x[K])\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    m = len(test_list)\n    if m == 0:\n        return []\n    if m <= K:\n        return test_list\n    if m == 1:\n        return [test_list[0]]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort list\n    # get first K elements of list\n    # get all the elements\n    # get smallest K elements\n    # get all the elements and sort them\n    # get smallest K elements\n    # print smallest K elements\n    return\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_record_list = list()\n    for i in range(len(test_list)):\n        min_record_list.append(min(test_list[i][:K]))\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list)<K:\n            min_list.append(test_list[i])\n        else:\n            # print 'len', len(min_list)\n            # print 'i', i\n            if test_list[i][1]<min_list[0][1]:\n                min_list[0] = test_list[i]\n    # print'min_list', min_list\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return\n    if K == 1:\n        return min(test_list, key = lambda x: x[2])\n    min_dist = float('inf')\n    for i in range(len(test_list) - K + 1):\n        temp = test_list[i]\n        for j in range(1, K):\n            temp = min(temp, test_list[i+j], key = lambda x: x[2])\n        if temp[2] < min_dist:\n            min_dist = temp[2]\n            result = temp\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0 or len(test_list[0]) == 0 or K > len(test_list[0]):\n        return None\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return 'Incorrect input'\n    else:\n        # The following sorted() function will sort the list based on the second element of the tuple.\n        # The list is sorted based on the second element of the tuple i.e. the date.\n        # If we want to sort in ascending order, then the second element needs to be compared in reverse order.\n        # If we want to sort in descending order, then the second element needs to be compared in forward order.\n        # The sorted() function does not modify the list, it returns a new sorted list.\n        return sorted(test_list, key=operator.itemgetter(1), reverse=False)[:K]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_dict = {}\n    \n    for idx in l1:\n        index_dict[idx] = 0\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k] and i not in l:\n                    l.append(i)\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1).intersection(set(l2)).intersection(set(l3)))\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    i = 0\n    while i < len(l1):\n        if l1[i] in l2 and l1[i] in l3:\n            l.append(l1[i])\n        i += 1\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    new_l = []\n    l = zip(l1, l2, l3)\n    for i, j, k in l:\n        if i == j == k:\n            new_l.append(i)\n    return new_l\n    \n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    d = {}\n    for i in l1:\n        d[i] = d.get(i,0) + 1\n    for i in l2:\n        d[i] = d.get(i,0) + 1\n    for i in l3:\n        d[i] = d.get(i,0) + 1\n    l = []\n    for i in d:\n        if d[i] == 3:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l2[j] == l1[i]:\n                l.append(l2[j])\n                break\n    for i in range(len(l3)):\n        if l3[i] in l:\n            pass\n        else:\n            l.append(l3[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i == j == k:\n                    result.append(i)\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    out = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            out.append(l1[i])\n    return out\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first_smallest = None\n    second_smallest = None\n    for num in numbers:\n        if first_smallest is None or num < first_smallest:\n            second_smallest = first_smallest\n            first_smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    first = second = None\n    for num in numbers:\n        if not first:\n            first = num\n        elif num < first:\n            second = first\n            first = num\n        elif num < second:\n            second = num\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    min_n = None\n    second_min_n = None\n    for n in numbers:\n        if not min_n or n < min_n:\n            second_min_n = min_n\n            min_n = n\n        elif not second_min_n or n < second_min_n:\n            second_min_n = n\n    return second_min_n\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min1 = float('inf')\n    min2 = float('inf')\n    for i in numbers:\n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2 and i!= min1:\n            min2 = i\n    return min2\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n    numbers.sort()\n    second_smallest = numbers[1]\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    first = second = None\n    for i in range(len(numbers)):\n        if numbers[i] < numbers[0]:\n            first = numbers[i]\n            second = numbers[0]\n            break\n    for i in range(len(numbers)):\n        if numbers[i] < first and numbers[i] > second:\n            second = numbers[i]\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # n = len(numbers)\n    # if n <= 1:\n    #     return None\n    # if n == 2:\n    #     return min(numbers)\n    # n = len(numbers)\n    # for i in range(n):\n    #     if i == 0:\n    #         numbers[i] = max(numbers[i], numbers[i+1])\n    #     elif i == n - 1:\n    #         numbers[i] = max(numbers[i], numbers[i-1])\n    #     else:\n    #         numbers[i] = max(numbers[i], numbers[i-1], numbers[i+1])\n    # return min(numbers)\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #if the list is empty\n    if len(numbers) == 0:\n        return None\n    \n    #if the list has only one element\n    elif len(numbers) == 1:\n        return numbers[0]\n    \n    #if the list has more than one element\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for number in numbers:\n            if number < smallest:\n                second_smallest = smallest\n                smallest = number\n            elif number < second_smallest:\n                second_smallest = number\n    \n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest(numbers[1:])\n    if smallest == None:\n        return numbers[0]\n    return min(numbers[0], smallest)\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    if len(numbers) <= 1:\n        return None\n    return numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_zero_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_one_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_n_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_zero_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_n_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_n_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_n_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_n_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_n_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_n_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-20.php\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a+b')\n    if pattern.match(text) is not None:\n        print('Found a match')\n    else:\n        print('No match')\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match_one = re.findall(r'\\ba+', text)\n    return match_one\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    match_zero_or_one = re.findall(r'\\ba+', text)\n    return match_zero_or_one\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    match_one_or_more = re.findall(r'\\ba+', text)\n    return match_one_or_more\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    match_zero_or_more = re.findall(r'\\ba+', text)\n    return match_zero_or_more\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    match_zero_or_one = re.findall(r'\\ba+', text)\n    return match_zero_or_one\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    match_one_or_more = re.findall(r'\\ba+', text)\n    return match_one_or_more\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    match_zero_or_one = re.findall(r'\\ba+', text)\n    return match_zero_or_one\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    match_one_or_more = re.findall(r'\\ba+', text)\n    return match_one_or_more\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    match_zero_or_more = re.findall(r'\\ba+', text)\n    return match_zero_or_more\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    match_zero_or_one = re.findall(r'\\ba+', text)\n    return match_zero_or_one\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    match_one_or_more = re.findall(r'\\ba+', text)\n    return match_one_or_more\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    match_zero_or_one = re.findall(r'\\ba+', text)\n    return match_zero_or_one\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    match_one_or_more = re.findall(r'\\ba+', text)\n    return match_one_or_more\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    match_zero_or_one = re.findall(r'\\ba+', text)\n    return match_zero_or_one\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    match_one_or_more = re.findall(r'\\ba+', text)\n    return match_one_or_more\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    match_zero_or_one = re.findall(r'\\ba+', text)\n    return match_zero_or_one\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    match_one_or_more = re.findall(r'\\ba+', text)\n    return match_one_or_more\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-20.php\n    '''\n    match_zero_or_one = re.findall(r'\\ba+', text)\n    return match_zero_or_one\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-21.php\n    '''\n    match_one_or_more = re.findall(r'\\ba+', text)\n    return match_one_or_more\ndef text_match_zero_or_one(text):\n    '''\n    Write a functio"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a*b')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n    \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a+b')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.match('^a.+b$',text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'a+b',text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'.*[ab]+', text)\n    # return re.match(r'.*?[ab]+', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    p = re.compile(r'\\ba\\b')\n    m = p.search(text)\n    if m:\n        print m.group()\n    else:\n        print m\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    print re.search('a+b', text)\n    print re.search('a+b', 'ab')\n    print re.search('a+b', 'a')\n    print re.search('a+b', 'abb')\n    print re.search('a+b', 'b')\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    if pattern.match(text):\n        print \"Found: %s\" %pattern.match(text)\n    else:\n        print \"Not found\"\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if not test_list:\n        return 0\n    if len(test_list) == 1:\n        return 0\n    return count_reverse_pairs(test_list[1:]) + count_reverse_pairs(test_list[:-1])\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    length = len(test_list)\n    for i in range(0, length):\n        for j in range(i + 1, length):\n            if (test_list[i][::-1] == test_list[j][::-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    reverse_pairs = 0\n    for word in test_list:\n        word = word[::-1]\n        for next_word in test_list:\n            if next_word == word:\n                reverse_pairs += 1\n    return reverse_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #length = len(test_list)\n    #return count_reverse_pairs_helper(0, length-1, test_list)\n    return count_reverse_pairs_helper(0, len(test_list) - 1, test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                result += 1\n    return result\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    results = {}\n    for i in list1:\n        # convert list to tuple so that it is hashable\n        temp = tuple(i)\n        if temp in results.keys():\n            results[temp] += 1\n        else:\n            results[temp] = 1\n    return results\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_list = dict()\n    for list in list1:\n        if len(list) not in count_list:\n            count_list[len(list)] = 1\n        else:\n            count_list[len(list)] += 1\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    my_dict = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) in my_dict:\n            my_dict[tuple(list1[i])] += 1\n        else:\n            my_dict[tuple(list1[i])] = 1\n    return my_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    count = 0\n    for i in range(len(list1)):\n        dict.update({list1[i]: count})\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #make list of sublists\n    newlist = []\n    for i in range(len(list1)):\n        newlist.append(list1[i][:])\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result_dict = {}\n    for item in list1:\n        if tuple(item) not in result_dict.keys():\n            result_dict[tuple(item)] = 1\n        else:\n            result_dict[tuple(item)] += 1\n    return result_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for l in list1:\n        if type(l) == list:\n            l = tuple(l)\n            if l not in unique_dict:\n                unique_dict[l] = 1\n            else:\n                unique_dict[l] += 1\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for l in list1:\n        if l not in list2:\n            list2.append(l)\n    dictionary = {}\n    for l in list2:\n        count = 0\n        for i in list1:\n            if l == i:\n                count += 1\n        dictionary[tuple(l)] = count\n    return dictionary\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_items = {}\n    for i in list1:\n        if type(i) == type([]):\n            temp = tuple(i)\n            unique_items[temp] = unique_items.get(temp, 0) + 1\n    return unique_items\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(k):list1.count(k) for k in list1}\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) == 0:\n        return False\n    if num[0] == '-':\n        num = num[1:]\n    for i in range(len(num)):\n        if num[i] not in '0123456789.+-':\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.')>1:\n        return False\n    elif num.count('.')==0:\n        return True\n    else:\n        d1 = num.index('.')\n        d2 = num.index('.', d1+1)\n        if d2-d1==2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.startswith('0'):\n        return False\n    return abs(int(num) - float(num)) < 0.000001\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # import decimal\n    # decimal.getcontext().prec = 2\n    # if num == decimal.Decimal(num):\n    #     return True\n    # else:\n    #     return False\n    \n    # The best solution:\n    import re\n    return re.match('^[-+]?\\d*\\.\\d*$', num) is not None\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, int) or isinstance(num, float):\n        return True\n    elif isinstance(num, str):\n        try:\n            float(num)\n            return True\n        except:\n            return False\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = float(num)\n    return True if num == int(num) else False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return bool(re.match(r'\\d+\\.\\d+', num))\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return re.match(r'^-?\\d+\\.\\d{2}$', num)\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # prec is the precision of the decimal point\n    # num_digits is the number of digits in the number\n    # num is the number to be checked\n    prec = 2\n    num_digits = len(num)\n    for i in range(num_digits):\n        if num[i] not in '0123456789.':\n            return False\n    if num_digits > 1:\n        if num[num_digits-1] == '.':\n            return False\n    for i in range(num_digits):\n        if num[i] == '.':\n            break\n    decimal_point = i + prec\n    if i == num_digits-1:\n        return True\n    # find the first non-decimal point\n    for i in range(decimal_point, num_digits):\n        if num[i] not in '0123456789.':\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for x in arr:\n        if x in seen:\n            return False\n        seen.add(x)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    if arr[0]!=arr[1]:\n        return arr[0]\n    else:\n        return arr[2]\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            if arr[i] == arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = sorted(arr)\n    if len(arr) == 1:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    counts = {}\n    for num in arr:\n        if num not in counts:\n            counts[num] = 0\n        counts[num] += 1\n    for num in counts:\n        if counts[num] == 1:\n            return num\n    return -1\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        print('All the numbers are distinct')\n    else:\n        print('There is at least one duplicate')\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) > len(set(arr)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return '30'\n    elif monthnum3 in [4, 6, 9, 11]:\n        return '31'\n    else:\n        return '28'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 == 2):\n        return True\n    elif (monthnum3 in [1, 3, 5, 7, 8, 10, 12]):\n        return True\n    else:\n        return False\ndef check_valid_date(monthnum2, date2):\n    '''\n    Write a function to check whether the given date is valid or not. Dates are given in the form of DD/MM/YYYY.\n    '''\n    if (date2 > 31):\n        return False\n    elif ((check_monthnumber_number(date2)) and (date2 < 32)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        print \"Error: Month number is not valid\"\n        return 0\n    else:\n        if monthnum3 == 1:\n            print \"Month number is: January\"\n            return 1\n        elif monthnum3 == 2:\n            print \"Month number is: February\"\n            return 2\n        elif monthnum3 == 3:\n            print \"Month number is: March\"\n            return 3\n        elif monthnum3 == 4:\n            print \"Month number is: April\"\n            return 4\n        elif monthnum3 == 5:\n            print \"Month number is: May\"\n            return 5\n        elif monthnum3 == 6:\n            print \"Month number is: June\"\n            return 6\n        elif monthnum3 == 7:\n            print \"Month number is: July\"\n            return 7\n        elif monthnum3 == 8:\n            print \"Month number is: August\"\n            return 8\n        elif monthnum3 == 9:\n            print \"Month number is: September\"\n            return 9\n        elif monthnum3 == 10:\n            print \"Month number is: October\"\n            return 10\n        elif monthnum3 == 11:\n            print \"Month number is: November\"\n            return 11\n        elif monthnum3 == 12:\n            print \"Month number is: December\"\n            return 12\n    return 1\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print 'Its a 31 day month'\n    elif monthnum3 == 2:\n        print 'Its a 29 day month'\n    else:\n        print 'Its a 30 day month'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4) == 0:\n            if (year % 100) == 0:\n                if (year % 400) == 0:\n                    return 29\n                else:\n                    return 28\n            else:\n                return 29\n        else:\n            return 28\n    else:\n        return 31\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"It's a leap year\")\n    else:\n        print(\"It's not a leap year\")\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    print monthnum3\n    if (monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12):\n        print '30 days'\n    else:\n        print '28 days'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return True\n    elif monthnum3 == 3:\n        return True\n    elif monthnum3 == 5:\n        return True\n    elif monthnum3 == 7:\n        return True\n    elif monthnum3 == 8:\n        return True\n    elif monthnum3 == 10:\n        return True\n    elif monthnum3 == 12:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return False\ndef check_daynumber_number(daynum):\n    '''\n    Write a function to check whether the given day number is from 1 to 30 or not. Days are given as number from 1 to 31.\n    '''\n    if daynum in range(1, 32):\n        return True\n    else:\n        return False\ndef check_leapyear(yearnum):\n    '''\n    Write a function to check whether the given year is leap year or not. A leap year is divisible by 4 and not divisible by 100.\n    '''\n    if (yearnum % 4 == 0 and yearnum % 100!= 0):\n        return True\n    else:\n        return False\ndef convert_month_to_day(monthnum, yearnum):\n    '''\n    Write a function to convert the given month number into day number.\n    '''\n    days = 0\n    if check_leapyear(yearnum) == True:\n        if check_monthnumber_number(monthnum) == True:\n            days = 31\n        elif check_monthnumber_number(monthnum) == False:\n            if monthnum in (4, 6, 9, 11):\n                days = 30\n            else:\n                days = 29\n    else:\n        if check_monthnumber_number(monthnum) == True:\n            days = 31\n        elif check_monthnumber_number(monthnum) == False:\n            if monthnum in (4, 6, 9, 11):\n                days = 30\n            else:\n                days = 28\n    return days\ndef convert_year_to_date(yearnum, monthnum, daynum):\n    '''\n    Write a function to convert the given year number, month number and day number into date.\n    '''\n    date = str(daynum) + '/' + str(monthnum) + '/' + str(yearnum)\n    return date\ndef is_date_valid(yearnum, monthnum, daynum):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (check_daynumber_number(daynum) == False):\n        return False\n    elif (check_monthnumber_number(monthnum) == False):\n        return False\n    elif (check_yearnumber_number(yearnum) == False):\n        return False\n    else:\n        return True\ndef main():\n    yearnum = int(raw_input('Enter the year number: '))\n    monthnum = int(raw_input('Enter the month number: '))\n    daynum = int(raw_input('Enter the day number: '))\n    if is_date_valid(yearnum, monthnum, daynum) == True:\n        print convert_year_to_date(yearnum, monthnum, daynum)\n    else:\n        print 'Error: Date is invalid'\nmain()"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff_arr = []\n    for i in range(0,n): \n        for j in range(i+1,n):\n            diff_arr.append(abs(arr[i]-arr[j]))\n    print(min(diff_arr))\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    n = len(arr)\n    min_diff = arr[0]\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] < arr[j]:\n                min_diff = min(min_diff,arr[j]-arr[i])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    global_min = arr[0]\n    for i in range(1,n):\n        if arr[i] < global_min:\n            global_min = arr[i]\n    \n    arr2 = sorted(arr)\n    i = n-1\n    j = 0\n    while j < n:\n        diff = abs(arr2[i]-arr2[j])\n        if diff < global_min:\n            global_min = diff\n        if j < n-1:\n            j += 1\n        else:\n            break\n    return global_min\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    res = arr[n-1] - arr[0]\n    for i in range(1, n):\n        res = min(res, arr[i] - arr[i-1])\n    return res\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    #print(arr)\n    min_diff=arr[n-1]-arr[0]\n    for i in range(1,n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = sys.maxint\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = abs(arr[0]-arr[1])\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(arr[i]-arr[j]) < min_diff:\n                min_diff = abs(arr[i]-arr[j])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff=999999999\n    for i in range(1,n):\n        diff=arr[i]-arr[i-1]\n        if diff<min_diff:\n            min_diff=diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    result = 2**32-1\n    for i in range(n-1): \n        for j in range(i+1,n): \n            result = min(result,arr[j]-arr[i]) \n    return result \n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==1: return 0\n    arr.sort()\n    left = 0\n    right = n-1\n    mini = arr[right]-arr[left]\n    while right-left>1:\n        curr = arr[right]-arr[left]\n        if curr<mini:\n            mini = curr\n        if curr==0: return 0\n        if curr<0: right-=1\n        else: left+=1\n    return mini\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - str.count(' ')\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    return sum(str.count(c) for c in set(str))\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num=0\n    for c in str:\n        if c.isdigit():\n            num+=1\n    return num\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    length=len(str)\n    if str==None:\n        return 0\n    if length<10:\n        return 1\n    return 1+number_ctr(str[1:])\n    \nprint number_ctr('43245623')\nprint number_ctr('123456789')\nprint number_ctr('')\nprint number_ctr('1')\nprint number_ctr('0')\nprint number_ctr('abcd')"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    print(\"The number of digits in the string is : \"+str(count))\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n    "
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count=count+1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\ndef vowels(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.lower() in 'aeiou':\n            count += 1\n    return count\ndef maximum(list):\n    '''\n    Write a python function to find the maximum element in a list.\n    '''\n    if list == []:\n        return None\n    if list == [None]:\n        return None\n    elif len(list) == 1:\n        return list[0]\n    return max(list)\ndef minimum(list):\n    '''\n    Write a python function to find the minimum element in a list.\n    '''\n    if list == []:\n        return None\n    elif list == [None]:\n        return None\n    elif len(list) == 1:\n        return list[0]\n    return min(list)\ndef partition(arr, left, right):\n    '''\n    Write a python function to partition a list.\n    '''\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[right] = arr[right], arr[i+1]\n    return i+1\ndef merge(left, right):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    while i < len(left):\n        result.append(left[i])\n        i += 1\n    while j < len(right):\n        result.append(right[j])\n        j += 1\n    return result\ndef find_element(arr, left, right, element):\n    '''\n    Write a python function to find the index of an element in a sorted array.\n    '''\n    while left <= right:\n        mid = (left + right)//2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\ndef find_element_second_method(arr, element):\n    '''\n    Write a python function to find the index of an element in a sorted array.\n    '''\n    return binary_search(arr, 0, len(arr)-1, element)\ndef binary_search(arr, left, right, element):\n    if left > right:\n        return -1\n    mid = (left+right)//2\n    if arr[mid] == element:\n        return mid\n    elif arr[mid] < element:\n        return binary_search(arr, mid+1, right, element)\n    else:\n        return binary_search(arr, left, mid-1, element)\ndef find_element_third_method(arr, element):\n    '''\n    Write a python function to find the index of an element in a sorted array.\n    '''\n    return binary_search_iterative(arr, 0, len(arr)-1, element)\ndef binary_search_iterative(arr, left, right, element):\n    while left <= right:\n        mid = (left + right)//2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\ndef check_permutation(str1, str2):\n    '''\n    Write a python function to check whether two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in str2:\n        if i not in d:\n            return False\n        else:\n            d[i] -= 1\n            if d[i] == 0:\n                del d[i]\n    if d!= {}:\n        return False\n    return True\ndef counting_sort(arr, max_e):\n    '''\n    Write a python function to sort an array using counting sort.\n    '''\n    n = len(arr)\n    count = [0] * (max_e + 1)\n    for i in range(n):\n        count[arr[i]] += 1\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    sorted_arr = [0] * n\n    for i in range(n-1, -1, -1):\n        sorted_arr[count[arr[i]]] = arr[i]\n        count[arr[i]] -= 1\n    return sorted_arr\ndef radix_sort(arr):\n    '''\n    Write a python function to sort an array using radix sort.\n    '''\n    max_e = max(arr)\n    buckets = [0] * 10\n    for i in range(10):\n        buckets[i] = []\n    for i in range(len(arr)):\n        buckets[(arr[i]/10**(len(str(max_e))-1)) % 10].append(arr[i])\n    for i in range(10):\n        buckets[i].sort()\n    k = len(arr) - 1\n    while k >= 0:\n        for i in range(10):\n            for j in range(len(buckets[i])):\n                arr[k] = buckets[i][j]\n                k -= 1\ndef find_k_th_smallest(arr, k):\n    '''\n    Write a python function to find the kth smallest element in an array.\n    '''\n    if arr == []:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    pivot = arr[0]\n    i = 1\n    j = len(arr) - 1\n    while i <= j:\n        if arr[i] > pivot:\n            arr[j] = arr[i]\n            j -= 1\n        elif arr[j] < pivot:\n            arr[i] = arr[j]\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    arr[i-1] = pivot\n    if i > k:\n        return find_k_th_smallest(arr[:i-1], k)\n    elif i < k:\n        return find_k_th_smallest(arr[i:], k-i)\n    else:\n        return arr[i-1]\ndef two_strings(str1, str2):\n    '''\n    Write a python function to compare two strings.\n    '''\n    if len(str1) == 0 and len(str2) == 0:\n        return True\n    elif len(str1) == 0 and len(str2)!= 0:\n        return False\n    elif len(str1)!= 0 and len(str2) == 0:\n        return False\n    if str1[0]!= str2[0]:\n        return False\n    return two_strings(str1[1:], str2[1:])\ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check if two strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in str2:\n        if i not in d:\n            return False\n        else:\n            d[i] -= 1\n    for i in d:\n        if d[i]!= 0:\n            return False\n    return True\ndef palindrome(str):\n    '''\n    Write a python function t"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Prime numbers\n    # list of prime numbers\n    # not pythonic, but works\n    n = abs(n)\n    prime_nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: \n        return 3\n    elif n==2: \n        return 5\n    elif n==3: \n        return 7\n    else: \n        return (n*(n+1))/2\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n%2 == 0:\n        return False\n    count = 1\n    n = n//2\n    fact = [0]*(n+1)\n    fact[0] = 1\n    for i in range(1, n+1):\n        fact[i] = fact[i-1]*i\n    print(fact)\n    def pol(n):\n        if n==1:\n            return 1\n        elif n%2 == 0:\n            return n//2*(pol(n//2)+1)\n        else:\n            return n*(pol(n-1)+1)\n    #print(pol(n))\n    return pol(n)\ndef longest_sequence(n):\n    '''\n    Write a function to find the length of the longest sequence of non-consecutive integers ending with a given number n.\n    Examples:\n    Input : n = 3\n    Output : 3 (Longest sequence is 0,1,2)\n    Input : n = 8\n    Output : 4 (Longest sequence is 0,1,2,3,4,5,6,7)\n    '''\n    if n<=1:\n        return n\n    dp = [0]*(n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        if i%3 == 0:\n            dp[i] = min(dp[i//3]+1, dp[i//2]+1, dp[i-1]+1)\n        elif i%2 == 0:\n            dp[i] = min(dp[i//2]+1, dp[i-1]+1)\n        else:\n            dp[i] = dp[i-1]+1\n    return dp[n]\ndef binary_search(arr, target):\n    '''\n    Write a function to find the index of the smallest element in an array that is larger than target.\n    Example:\n    Input : arr = [1, 3, 5, 6, 7, 8, 9]\n    Target : 9\n    Output : 6\n    '''\n    if len(arr) == 1:\n        if arr[0] > target:\n            return 0\n        return -1\n    mid = len(arr)//2\n    if target < arr[mid]:\n        return binary_search(arr[:mid], target)\n    elif target > arr[mid]:\n        return mid + binary_search(arr[mid:], target)\n    else:\n        return mid\ndef longest_substring(s):\n    '''\n    Write a function that accepts a string and returns the length of the longest substring without repeating characters.\n    Example:\n    Input : s = 'abcabcbb'\n    Output : 3\n    '''\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    dp = [0]*(len(s)+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, len(s)+1):\n        if s[i-1] not in s[:i-1]:\n            dp[i] = dp[i-1] + 1\n        else:\n            index = binary_search(s[:i-1], s[i-1])\n            dp[i] = dp[index]\n    return max(dp)\ndef trapping_rain(arr):\n    '''\n    Write a function to compute the number of ways to trap rain water in a given row of n height.\n    Examples:\n    Input : arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\n    Output : 6\n    Input : arr = [0, 2, 1, 0, 1]\n    Output : 0\n    '''\n    if len(arr) == 0:\n        return 0\n    n = len(arr)\n    left = [0]*n\n    right = [0]*n\n    left[0] = arr[0]\n    for i in range(1, n):\n        left[i] = max(left[i-1], arr[i])\n    right[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right[i] = max(right[i+1], arr[i])\n    total = 0\n    for i in range(1, n-1):\n        total += min(left[i], right[i]) - arr[i]\n    return total\ndef can_construct(s, t):\n    '''\n    Write a function to determine if a string can be constructed from its characters using other characters.\n    Example:\n    Input : s = 'abc', t = 'ahbgdc'\n    Output : True\n    '''\n    if len(t) < len(s):\n        return False\n    else:\n        if len(s) == 0:\n            return True\n        dp = [0]*(len(t)+1)\n        dp[0] = 1\n        for i in range(1, len(t)+1):\n            if t[i-1] not in s:\n                dp[i] = 0\n            else:\n                index = binary_search(s, t[i-1])\n                dp[i] = dp[index]\n        return dp[-1] == 1\ndef insertion_sort(arr):\n    '''\n    Write a function to sort an array using insertion sort.\n    '''\n    if len(arr) == 0:\n        return arr\n    for i in range(1, len(arr)):\n        key = arr[i]\n        index = i\n        while index > 0 and key < arr[index-1]:\n            arr[index] = arr[index-1]\n            index -= 1\n        arr[index] = key\n    return arr\ndef selection_sort(arr):\n    '''\n    Write a function to sort an array using selection sort.\n    '''\n    if len(arr) == 0:\n        return arr\n    for i in range(len(arr)-1):\n        min_index = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index!= i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\ndef binary_search(arr, target):\n    '''\n    Write a function to find the index of the smallest element in an array that is larger than target.\n    Example:\n    Input : arr = [1, 3, 5, 6, 7, 8, 9]\n    Target : 9\n    Output : 6\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        if arr[0] > target:\n            return 0\n        return -1\n    mid = len(arr)//2\n    if target < arr[mid]:\n        return binary_search(arr[:mid], target)\n    elif target > arr[mid]:\n        return mid + binary_search(arr[mid:], target)\n    else:\n        return mid\ndef remove_duplicates(arr):\n    '''\n    Write a function to remove duplicates from an unsorted array.\n    Examples:\n    Input : arr = [1, 2, 2, 3, 3]\n    Output : [1, 2, 3]\n    Input : arr = [2, 2, 2, 2]\n    Output : [2]\n    '''\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return arr\n    curr = arr[0]\n    dp = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] == curr:\n            continue\n        else:\n            dp.append(arr[i])\n            curr = arr[i]\n    return dp\ndef matrix_multiply(arr1, arr2):\n    '''\n    Write a function to multiply two matrices.\n    Examples:\n    Input : arr1 = [[1, 2], [3, 4]]\n          arr2 = [[1, 2, 3], [3, 4, 5]]\n    Output : [[15, 17], [21, 22]]\n    '''\n    if len(arr1) == 0 or len(arr2) ="
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n+=1\n    i = 1\n    count = 1\n    while True:\n        i += 1\n        temp = n + i\n        while temp%2 == 0:\n            temp /= 2\n        while temp%3 == 0:\n            temp /= 3\n        while temp%5 == 0:\n            temp /= 5\n        while temp%7 == 0:\n            temp /= 7\n        if temp == 1:\n            break\n        count += 1\n    if n == count:\n        return True\n    return False\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return 1 + sum(is_polite(i) for i in range(2,n))\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return sum(map(lambda x: int(x)**2, str(n))) \ndef is_polite_new(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return sum(map(lambda x: x**2, [int(i) for i in str(n)])) \ndef is_polite_new2(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n%sum(map(lambda x: x**2, [int(i) for i in str(n)])) == 0\ndef is_polite2(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite3(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite4(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite5(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite6(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite7(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite8(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite9(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite10(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite11(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite12(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite13(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite14(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite15(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite16(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite17(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite18(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite19(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite20(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite21(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite22(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite23(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is_polite24(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    return sum(map(lambda x: int(x)**2, s)) == int(s)\ndef is"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 4\n    i = 1\n    while i < n:\n        num = num + 2 * (2 * num -1)\n        i = i + 1\n    return num\ndef is_polite2(n):\n    num = 4\n    i = 1\n    while i < n:\n        num = num + 2 * (2 * num -1)\n        i = i + 1\n    return num\ndef nth_polite(n):\n    num = 4\n    i = 1\n    while i < n:\n        num = num + 2 * (2 * num -1)\n        i = i + 1\n    return num\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    res = 0\n    \n    # Iterate till we reach the nth number \n    for i in range(1, n): \n        # For every i, we keep a count of how many times we have\n        # divided the previous number by i. If it is divisible by\n        # i, then we add the powers of i to the result.\n        res += i\n        \n        if res % i == 0: \n            res += (i * i)\n    \n    # We know the nth number is the result as we iterated upto n.\n    return res\n    \n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [3, 7, 11, 13, 17]\n    count = 0\n    while count!= n:\n        i = 1\n        num = []\n        while i < 100000:\n            num.append(i)\n            i = i + 1\n        num.sort()\n        for i in range(0, len(num) - 1):\n            if num[i] + 1 == num[i + 1]:\n                pass\n            else:\n                num.pop(i)\n        numbers.append(num[-1])\n        count += 1\n    return numbers[n]\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [3, 7, 11, 13, 17]\n    count = 0\n    while count!= n:\n        i = 1\n        num = []\n        while i < 100000:\n            num.append(i)\n            i = i + 1\n        num.sort()\n        for i in range(0, len(num) - 1):\n            if num[i] + 1 == num[i + 1]:\n                pass\n            else:\n                num.pop(i)\n        numbers.append(num[-1])\n        count += 1\n    return numbers[n]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_array = []\n    polite_array.append(0)\n    polite_array.append(1)\n    for i in range(2,n+1):\n        if i%2 == 0:\n            polite_array.append(1)\n        else:\n            polite_array.append(0)\n    return polite_array[n]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [(l1[0], l1[0])]\n    elif n == 2:\n        return [(l1[0], l1[1]), (l1[1], l1[0])]\n    else:\n        return [(l1[i], l1[i+1]) for i in range(n-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    new_list = []\n    for i in range(len(l1)-1):\n        pair = [l1[i],l1[i+1]]\n        new_list.append(pair)\n    return new_list\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(0, len(l1) - 1):\n        pairs.append([l1[i], l1[i + 1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    try:\n        if l1:\n            return zip(l1,l1[1:])\n        else:\n            return []\n    except:\n        return []\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    newlist=[]\n    for i in range(len(l1)-1):\n        newlist.append([l1[i],l1[i+1]])\n    return newlist\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    prev_item = None\n    prev_prev_item = None\n    pair_list = []\n    for item in l1:\n        if prev_item and (item - prev_item) == 1:\n            pair_list.append((prev_item, item))\n        prev_item = item\n    return pair_list\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1.sort()\n    n = len(l1)\n    i = 0\n    while i < n:\n        j = i+1\n        while j < n:\n            if l1[j]-l1[i] == 1:\n                print(l1[i], l1[j])\n                j += 1\n            else:\n                break\n        i += 1\n    return\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = sorted(l1)\n    return zip(l1, l1[1:])\n    \nprint(pair_wise([1,2,3,4]))\n    \n    "
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(0, len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    output = []\n    for i in range(len(l1)-1):\n        output.append([l1[i], l1[i+1]])\n    return output\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    '''\n    e.g.\n    Input:\n    arr = [1, 2, 3, 4, 5]\n    sum = 5\n    Output:\n    4\n    '''\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    d = [0] * (sum + 1)\n    for i in range(0, n):\n        for j in range(0, sum + 1):\n            if j == arr[i]:\n                d[j] += 1\n            elif j > arr[i]:\n                d[j] += d[j - arr[i]]\n    return d[sum]\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        if arr[i] == sum - arr[i]:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    dp = [[0 for i in range(sum+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, sum+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j - arr[i-1]] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[-1][-1]\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if arr==[] or len(arr)<2:\n        return 0\n    pairs_count=0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j]==sum:\n                pairs_count+=1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dp = [[0 for x in range(sum + 1)] for y in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        for j in range(sum + 1):\n            if i == 0:\n                dp[i][j] = 0\n            elif j == 0:\n                dp[i][j] = 1\n            elif j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n    return dp[len(arr)][sum]\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                result += 1\n    return result\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #list 1\n    if not li1:\n        return li2\n    #list 2\n    if not li2:\n        return li1\n    #list 1 < list 2\n    if li1 < li2:\n        return li2-li1\n    #list 1 > list 2\n    else:\n        return li1-li2\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=[]\n    for x in li1:\n        if x not in li2:\n            li_dif.append(x)\n    for y in li2:\n        if y not in li1:\n            li_dif.append(y)\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \nli1=[1,2,3,4,5,6,7,8,9]\nli2=[1,2,3,4,5,6,7,8,9]\nprint Diff(li1,li2)\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #return list(set(li1) - set(li2))\n    return list(set(li1) - set(li2))\n    \ndef Union(li1,li2):\n    '''\n    Write a python function to get the union of two lists.\n    '''\n    return list(set(li1) | set(li2))\n    \ndef Inner(li1,li2):\n    '''\n    Write a python function to get the common items between two lists.\n    '''\n    return list(set(li1) & set(li2))\n    \ndef main():\n    list1 = [1,2,3,4]\n    list2 = [2,3,4,5]\n    li1 = ['a','b','c']\n    li2 = ['c','d','e']\n    print \"The difference between the two lists is: \",Diff(li1,li2)\n    print \"The union of the two lists is: \",Union(li1,li2)\n    print \"The common items between the two lists is: \",Inner(li1,li2)\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if (n < 0) : \n        print (\"Enter a positive number\")\n    else : \n        sum = (n * (n + 1) * (2 * n + 1)) / 6\n        return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(x**4 for x in range(1,n+1,2) if x%2!= 0)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(i**4 for i in range(1, n+1) if i%2)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 1 :\n        return 1\n    else :\n        return n*n*n*n + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total_sum = 0 \n    for i in range(1,n+1) :\n        if i % 2!= 0 : \n            total_sum += i**4 \n    return total_sum \n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n<=0 : \n        return 0 \n    else : \n        return n**4 + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(n) :\n        if i%2!= 0 :\n            s = s + i**4\n    return s\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(x**4 for x in range(1, n, 2) if x%2!= 0)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # n = int(input(\"Enter n : \"))\n    sum = 0\n    for i in range(1,n+1,2) :\n        sum += i**4\n    print(sum)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0 \n    i = 1\n    while i <= n : \n        total += i ** 4\n        i += 2\n    return total \n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s=[]\n    for i in exp:\n        if i=='(':\n            s.append(i)\n        elif i==')':\n            if len(s)==0:\n                return False\n            elif s[-1]=='(':\n                s.pop()\n            else:\n                return False\n    return True if len(s)==0 else False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for item in exp:\n        if item == '(':\n            stack.append(item)\n        elif item == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for el in exp:\n        if el in '{([':\n            stack.append(el)\n        elif el in '})]':\n            if len(stack) == 0 or el == '}' and stack.pop()!= '{' or el == ')' and stack.pop()!= '(' or el == ']' and stack.pop()!= '[':\n                return False\n    return not len(stack)\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i in \"([{\":\n            stack.append(i)\n        elif i in \")]}\":\n            if len(stack) == 0:\n                return False\n            ch = stack.pop()\n            if not matches(ch, i):\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    bracket = {'{': '}', '[': ']', '(': ')', '<': '>'}\n    stack = deque()\n    for i in exp:\n        if i in bracket:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            if bracket[stack.pop()]!= i:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # stack to keep track of opening brackets.\n    stack = []\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp)%2!=0: return False\n    stack=deque()\n    for c in exp:\n        if c=='(': stack.append(c)\n        elif c==')':\n            if len(stack)>0 and stack.pop()=='(':\n                continue\n            else:\n                return False\n    if len(stack)==0: return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack)==0 or stack.pop()!= '(':\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stk = []\n    for i in exp:\n        if i == '(':\n            stk.append(i)\n        elif i == ')':\n            if len(stk) == 0:\n                return False\n            stk.pop()\n    if len(stk) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    openers = ['(', '{', '[']\n    closers = [')', '}', ']']\n    stack = []\n    for c in exp:\n        if c in openers:\n            stack.append(c)\n        elif c in closers:\n            pos = closers.index(c)\n            if not stack or openers[pos]!= stack[-1]:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    lst=test_str.split()\n    new_lst=[]\n    for word in lst:\n        if len(word)==K:\n            pass\n        else:\n            new_lst.append(word)\n    return''.join(new_lst)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word = test_str.split()\n    for i in range(len(word)):\n        if len(word[i]) == K:\n            word[i] = ''\n    final =''.join(word)\n    return final\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = []\n    for i in xrange(len(test_str) - K):\n        if test_str[i]!='':\n            result.append(test_str[i])\n        else:\n            continue\n    return ''.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K < 1:\n        return test_str\n    split_str = test_str.split(\" \")\n    res = \"\"\n    for s in split_str:\n        if len(s)!= K:\n            res += s + \" \"\n    return res[:-1]\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    l = len(test_str)\n    for i in xrange(l):\n        if i+K < l:\n            tmp = test_str[i:i+K]\n            if len(tmp) == K:\n                res.append(tmp)\n    return''.join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_arr = test_str.split()\n    ans = []\n    for word in str_arr:\n        if len(word) == K:\n            ans.append(word)\n    return ans\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    word_list = test_str.split(' ')\n    for word in word_list:\n        if len(word)!= K:\n            new_str += word +''\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Use pythonic way\n    # return''.join([word for word in test_str.split() if len(word)!= K])\n    # Use for loop\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)\n    \ndef test_remove_length():\n    assert remove_length('How much wood would a woodchuck chuck if a woodchuck could chuck wood?', 4) == 'How much wood would a woodchuck chuck?'\n    assert remove_length('How much wood would a woodchuck chuck if a woodchuck could chuck wood?', 6) == 'How much wood would a woodchuck chuck?'\n    assert remove_length('How much wood would a woodchuck chuck if a woodchuck could chuck wood?', 7) == 'How much wood would a woodchuck chuck?'\n    assert remove_length('Hello', 0) == ''\n    assert remove_length('Hello', 1) == 'o'\n    assert remove_length('Hello', 2) == 'll'\n    assert remove_length('Hello', 3) == 'lo'\n    assert remove_length('Hello', 4) == 'lo'\n    assert remove_length('Hello', 5) == ''\n    assert remove_length('Hello', 6) == ''\n    assert remove_length('Hello', 7) == ''\n    assert remove_length('Hello', 8) == ''\n    assert remove_length('Hello', 9) == 'Hello'\n    print('Passed!')\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(' ')\n    for word in words:\n        if len(word) == K:\n            test_str = test_str.replace(word, '')\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    result = []\n    for i in test_str:\n        if len(i)!= K:\n            result.append(i)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    result = regex.search(text)\n    if result:\n        return result.group()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    positions = []\n    occurances = re.finditer(pattern,text)\n    for position in occurances:\n        positions.append(position.start())\n    return positions\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    if pattern not in text:\n        return None\n    else:\n        substring_count = text.count(pattern)\n        start_index = 0\n        for i in range(substring_count):\n            start_index = text.find(pattern,start_index)\n            print(start_index)\n            start_index += 1\n        return start_index\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    r = re.search(pattern,text)\n    if r:\n        print r.start()\n    else:\n        print None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=[]\n    # print(re.findall(pattern,text))\n    for m in re.finditer(pattern,text):\n        # print(m.start(0),m.end(0),m.group(0))\n        occurance.append([m.start(0),m.end(0),m.group(0)])\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos = 0\n    count = 0\n    while True:\n        start = text.find(pattern,pos)\n        if start == -1:\n            break\n        count = count + 1\n        pos = start + 1\n    return count\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.sub(pattern,repl,text)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_list = []\n    for i in range(len(text)):\n        if re.search(pattern,text[i:i+len(pattern)]):\n            occurance_list.append(i+1)\n    return occurance_list\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pass\n    pass\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_occurance = re.findall(pattern, text)\n    if pattern_occurance:\n        print pattern_occurance\n        return pattern_occurance\n    else:\n        print \"No Match Found\"\n        return None\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in xrange(1,len(nums),2):\n        if nums[i]%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return sum(nums[1::2]) % 2!= 0\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if type(nums)!= list:\n        raise TypeError('Need a list!')\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odds = []\n    if len(nums) < 1:\n        return False\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            odds.append(nums[i])\n    return odds\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if i % 2 == 1 and nums[i] % 2!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if nums[i]%2==1 and nums[i]%2!=0:\n            return True\n    return False\n    \ndef list_of_lists(string):\n    '''\n    Write a python function to remove duplicates from a given list of lists.\n    '''\n    \n    newlist = []\n    for sublist in string:\n        newlist+=sublist\n    return newlist\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    \n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_anagram(string1, string2):\n    '''\n    Write a python function to check whether two strings are anagram of each other.\n    '''\n    \n    if sorted(string1)==sorted(string2):\n        return True\n    else:\n        return False\n    \ndef is_member_of_sublist(string, sublist):\n    '''\n    Write a python function to check whether a given string is a member of a given sublist.\n    '''\n    \n    if string in sublist:\n        return True\n    else:\n        return False\n    \ndef count_vowels(string):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in string:\n        if i in vowels:\n            count+=1\n    return count\n    \ndef list_of_lists(string):\n    '''\n    Write a python function to split a string into a list of lists of equal length.\n    '''\n    \n    newlist = []\n    count = 0\n    for i in string:\n        newlist.append(string[count:count+len(string)/len(string)])\n        count+=1\n    return newlist\n    \ndef palindrome_substrings(string):\n    '''\n    Write a python function to find all the palindrome substrings in a given string.\n    '''\n    \n    palindrome_substrings = []\n    for i in range(len(string)):\n        for j in range(i,len(string)):\n            if is_palindrome(string[i:j+1]):\n                palindrome_substrings.append(string[i:j+1])\n    return palindrome_substrings\n    \ndef palindrome_of_substring(string):\n    '''\n    Write a python function to find the longest palindrome substring in a given string.\n    '''\n    \n    longest = 0\n    for i in range(len(string)):\n        for j in range(i,len(string)):\n            if is_palindrome(string[i:j+1]) and len(string[i:j+1])>longest:\n                longest = len(string[i:j+1])\n    return longest\n    \ndef all_palindromes_of_substring(string):\n    '''\n    Write a python function to find all the palindromes of all substrings of a given string.\n    '''\n    \n    newlist = []\n    for i in range(len(string)):\n        for j in range(i,len(string)):\n            if is_palindrome(string[i:j+1]):\n                newlist.append(string[i:j+1])\n    return newlist\n    \ndef index_of_substring(string, substring):\n    '''\n    Write a python function to find the index of a given substring in a given string.\n    '''\n    \n    indices = []\n    for i in range(len(string)):\n        if string[i:i+len(substring)]==substring:\n            indices.append(i)\n    return indices\n    \ndef all_substrings(string):\n    '''\n    Write a python function to find all the substrings of a given string.\n    '''\n    \n    substrings = []\n    for i in range(len(string)):\n        substrings.append(string[i:])\n    return substrings\n    \ndef longest_common_substring(string1, string2):\n    '''\n    Write a python function to find the longest common substring in two given strings.\n    '''\n    \n    max = 0\n    for i in range(len(string1)):\n        for j in range(len(string2)):\n            if string1[i:i+len(string2)] == string2[j:j+len(string2)]:\n                if max < len(string1[i:i+len(string2)]):\n                    max = len(string1[i:i+len(string2)])\n    return max\n    \ndef longest_common_substring_of_all(strings):\n    '''\n    Write a python function to find the longest common substring among a list of strings.\n    '''\n    \n    substring = ''\n    for i in range(len(strings[0])):\n        for j in range(len(strings[0])-len(strings[1])+1):\n            if strings[0][i:i+len(strings[1])] == strings[1]:\n                if len(substring) < len(strings[0][i:i+len(strings[1])]):\n                    substring = strings[0][i:i+len(strings[1])]\n    return substring\n    \ndef reverse_string(string):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    \n    reversed = ''\n    for i in range(len(string)):\n        reversed = string[i] + reversed\n    return reversed\n    \ndef substring_of_list(list, string):\n    '''\n    Write a python function to find the substring of a given string that is also a member of a given list.\n    '''\n    \n    for i in range(len(list)):\n        if string in list[i]:\n            return string\n    return False\n    \ndef count_substring(string, substring):\n    '''\n    Write a python function to count the number of occurrences of a given substring in a given string.\n    '''\n    \n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef all_substrings_of_list(list):\n    '''\n    Write a python function to find all the substrings of a given list.\n    '''\n    \n    substrings = []\n    for i in range(len(list)):\n        for j in range(i,len(list)):\n            substrings.append(list[i:j+1])\n    return substrings\n    \ndef all_substrings_of_list_of_lists(list):\n    '''\n    Write a python function to find all the substrings of a given list of lists.\n    '''\n    \n    substrings = []\n    for i in range(len(list)):\n        for j in range(i,len(list)):\n            substrings.append(list[i:j+1])\n    return substrings\n    \ndef all_substrings_of_list_of_lists_with_duplicates(list):\n    '''\n    Write a python function to find all the substrings of a given list of lists with duplicates.\n    '''\n    \n    substrings = []\n    for i in range(len(list)):\n        for j in range(i,len(list)):\n            for k in range(len(list[i])):\n                if list[i][k:k+len(list[j])] == list[j]:\n                    substrings.append(list[i][k:k+len(list[j])])\n    return substrings\n    \ndef all_substrings_of_list_of_lists_no_duplicates(list):\n    '''\n    Write a python function to find all the substrings of a given list of lists with no duplicates.\n    '''\n    \n    substrings = []\n    for i in range(len(list)):\n        fo"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) % 2!= 0:\n        for i in range(1, len(nums), 2):\n            if i % 2!= 0:\n                if nums[i] % 2!= 0:\n                    return False\n        return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in xrange(1, len(nums), 2):\n        if nums[index] % 2:\n            return False\n    return True\n    \n    \n    "
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_dict = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    vowel_count = 0\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_counter = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            if i+1 < len(test_str) and test_str[i+1] not in ['a', 'e', 'i', 'o', 'u']:\n                vowel_counter += 1\n            elif i == len(test_str)-1:\n                vowel_counter += 1\n    return vowel_counter\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Count vowels\n    vowel_count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i] in ('a', 'e', 'i', 'o', 'u'):\n            if test_str[i-1] in ('a', 'e', 'i', 'o', 'u'):\n                if test_str[i+1] in ('a', 'e', 'i', 'o', 'u'):\n                    vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for i in range(len(test_str)):\n        if test_str[i-1] in vowels and test_str[i] in vowels:\n            vowel_count += 1\n        elif test_str[i-1] not in vowels and test_str[i] not in vowels:\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    vowel_count = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] in vowels:\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    char_array = ['a', 'e', 'i', 'o', 'u']\n    str_array = list(test_str)\n    counter = 0\n    for i in range(len(str_array)):\n        for j in range(len(char_array)):\n            if char_array[j] == str_array[i]:\n                if str_array[i-1] == char_array[j-1] or str_array[i+1] == char_array[j-1]:\n                    counter += 1\n    print(counter)\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    total_vowels = 0\n    if len(test_str) == 0:\n        return 0\n    if len(test_str) == 1:\n        if test_str[0] in \"aeiou\":\n            total_vowels += 1\n        return total_vowels\n    prev_char = test_str[0]\n    if prev_char in \"aeiou\":\n        total_vowels += 1\n    for i in range(1, len(test_str)):\n        if test_str[i] in \"aeiou\":\n            total_vowels += 1\n        if test_str[i]!= test_str[i-1]:\n            if test_str[i-1] in \"aeiou\":\n                total_vowels -= 1\n    return total_vowels\n    \nprint(count_vowels(\"my name is sathish\")) #0\nprint(count_vowels(\"my name is james\")) #2\nprint(count_vowels(\"my name is sathish james\")) #3\nprint(count_vowels(\"krishna\")) #2\nprint(count_vowels(\"krishna is my name\")) #2\nprint(count_vowels(\"krishna is my name is krishna\")) #3\nprint(count_vowels(\"krishna is my name is krishna is my name\")) #4\nprint(count_vowels(\"my name is krishna\")) #2\nprint(count_vowels(\"my name is krishna is my name is krishna\")) #4\nprint(count_vowels(\"my name is krishna is my name is krishna is my name\")) #5\nprint(count_vowels(\"my name is krishna is my name is krishna is my name is krishna\")) #6\nprint(count_vowels(\"\")) #0\nprint(count_vowels(\"my name is krishna is my name is krishna is my name is krishna is my name\")) #6\nprint(count_vowels(\"my name is krishna is my name is krishna is my name is krishna is my name is krishna\")) #8\nprint(count_vowels(\"my name is krishna is my name is krishna is my name is krishna is my name is krishna is krishna is my name\")) #10\nprint(count_vowels(\"my name is krishna is my name is krishna is my name is krishna is my name is krishna is krishna is krishna is my name is krishna is krishna is my name is krishna\")) #11\nprint(count_vowels(\"krishna is my name is krishna is my name is krishna is my name is krishna is my name is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna is krishna i"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    if len(test_str) > 1:\n        for i in range(len(test_str)):\n            if test_str[i] in vowels:\n                count += 1\n            if test_str[i] == test_str[i-1]:\n                count -= 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            if test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u':\n                vowel_count = vowel_count + 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in 'aeiou':\n            if test_str[i + 1] in 'aeiou':\n                vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_elements = []\n    for i in arr:\n        if i not in non_repeated_elements:\n            non_repeated_elements.append(i)\n    return sum(non_repeated_elements)\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = set(arr)\n    non_repeated_arr = []\n    for i in unique_arr:\n        if arr.count(i) == 1:\n            non_repeated_arr.append(i)\n    total = 0\n    for i in non_repeated_arr:\n        total = total + i\n    print(total)\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i)==1:\n            sum += i\n    print \"Sum of non repeated elements is:\",sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            s += i\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count_dict = {}\n    arr = list(arr)\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    length = len(arr)\n    sum = 0\n    for i in range(length):\n        if arr[i] not in arr[:i]:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([x for x in arr if arr.count(x) == 1])\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if arr == []:\n        return 0\n    return arr[0] + find_sum(arr[1:])\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(val) for key, val in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = [(k, len(list(g))) for k, g in groupby(list1)]\n    print groups\n    # for k, g in groupby(list1):\n    #     count = 0\n    #     group = []\n    #     for k1, g1 in groupby(list(g)):\n    #         group.append(list(g1))\n    #     print group\n    #     for item in group:\n    #         count += 1\n    #     print count\n    #     print \n    return groups\n    \ndef remove_consecutive_duplicates(list1):\n    list2 = []\n    for item in list1:\n        if item not in list2:\n            list2.append(item)\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k for k, g in groupby(l)] for l in list1]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # list1 = [1,1,2,3,3,4,4,5,5,5]\n    # output = [[1,1], [2,3], [4,4], [5,5]]\n    # break each group into sublist\n    # return list\n    if not list1:\n        return list1\n    output = []\n    for k,g in groupby(list1):\n        output.append(list(g))\n    return output\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    return [[x]*len(list(g)) for x,g in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k for i, j in group] for k, v in groupby(list1) for i in (v,)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sortedlist = sorted(list1)\n    for key, group in groupby(sortedlist):\n        yield key, list(group)\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda (i, x): i-x):\n        group = map(itemgetter(1), g)\n        result.append(group)\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # count = 0\n    # list2 = []\n    # for i in list1:\n    #     if i == count:\n    #         count += 1\n    #         list2.append(i)\n    #     else:\n    #         list2.append(list2)\n    #         count = 1\n    #         list2.append(i)\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    lists = {}\n    for i in range(len(list1)):\n        sub = []\n        for j in range(len(list1)):\n            if i!= j:\n                sub.append(list1[j])\n        if sub not in lists:\n            lists[sub] = 1\n        else:\n            lists[sub] += 1\n    return lists\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    x = {}\n    for i in range(len(list1)):\n        if list1[i] in x.keys():\n            x[list1[i]] += 1\n        else:\n            x[list1[i]] = 1\n    return x\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if len(list1) == 0:\n        return {tuple(list1):1}\n    elif len(list1) == 1:\n        return {tuple(list1):1, list1[0]:1}\n    else:\n        return {tuple(list1[:i]) : unique_sublists(list1[i:]) for i in range(1, len(list1))}\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return [list(set(sublist)) for sublist in itertools.combinations(list1, len(list1))]\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if not list1:\n        return {}\n    d = {}\n    def unique_sublists_helper(list1, list2):\n        if len(list1) == 0:\n            return 0\n        key = tuple(list1)\n        if key not in d:\n            d[key] = 0\n        d[key] += 1\n        return unique_sublists_helper(list1[1:], list2) + unique_sublists_helper(list1[1:], list2)\n    unique_sublists_helper(list1, list1)\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist = []\n    #for i in range(len(list1)):\n    #    for j in range(i+1,len(list1)):\n    #        sublist.append(tuple(list1[i:j]))\n    #return sublist\n    return [tuple(list1[i:j]) for i in range(len(list1)) for j in range(i+1,len(list1))]\n    \n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in list1:\n        d[i] = list1.count(i)\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for x in list1:\n        d[tuple(x)] += 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for list_length in range(1, len(list1) + 1):\n        list_dict[list_length] = list_dict.get(list_length, 0)\n        for i in range(len(list1) - list_length + 1):\n            temp_list = tuple(list1[i:i + list_length])\n            list_dict[temp_list] = list_dict.get(temp_list, 0) + 1\n    return list_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def unique_sublists(list1):\n        dict = {}\n        for x in list1:\n            for y in list1:\n                if tuple(x)!= tuple(y):\n                    if tuple(x) in dict:\n                        dict[tuple(x)] += 1\n                    else:\n                        dict[tuple(x)] = 1\n        return dict\n    return unique_sublists(list1)\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    i = 0\n    j = 1\n    k = 2\n    combi = []\n    while j < len(test_list):\n        if test_list[i][k] == test_list[j][k]:\n            combi.append([test_list[i][j], test_list[i][k]])\n            i = i + 1\n            j = j + 1\n        elif test_list[i][k] < test_list[j][k]:\n            i = i + 1\n        else:\n            j = j + 1\n    return combi\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    for i in range(1, len(test_list)+1):\n        final_list += list(combinations(test_list, i))\n    final_list = [list(i) for i in final_list]\n    final_list = [i for i in final_list if sum(i) == 150]\n    for i in final_list:\n        i.sort()\n    final_list.sort()\n    return final_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if not test_list:\n        return None\n    elif len(test_list) == 1:\n        return [(test_list[0],)]\n    else:\n        return combinations(test_list, 2)\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #Solution\n    length = len(test_list)\n    if length == 0:\n        return []\n    if length == 1:\n        return [tuple([test_list[0][0]])]\n    if length == 2:\n        if test_list[1][0] + test_list[0][0] == test_list[0][1]:\n            return [tuple([test_list[0][0], test_list[1][0]])]\n        else:\n            return [tuple([test_list[0][0], test_list[1][0]]), tuple([test_list[1][0], test_list[0][0]])]\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = []\n    for i in range(1, len(test_list)+1):\n        comb_list.append(list(combinations(test_list, i)))\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = list()\n    for (tuples, elements) in test_list:\n        temp = list()\n        for i in range(1, len(tuples)+1):\n            for item in combinations(tuples, i):\n                temp.append(sum(item))\n        results.append(temp)\n    return results\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    from itertools import combinations\n    result = []\n    for num_of_tuple in range(1, len(test_list)):\n        for item in combinations(test_list, num_of_tuple):\n            result.append(sum(item))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = list()\n    for i in range(len(test_list)):\n        tup_list = list()\n        for j in combinations(test_list[i], i):\n            tup_list.append(j)\n        for k in tup_list:\n            final_list.append(k)\n    return final_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in test_list:\n        for j in test_list:\n            if i[0]==j[0]:\n                continue\n            else:\n                yield (i,j)\n                \n    \ndef get_combination_count(test_list):\n    '''\n    Write a function to get the count of combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    list_len=len(test_list)\n    if list_len<2:\n        return 0\n    else:\n        for i in test_list:\n            for j in test_list:\n                if i[0]==j[0]:\n                    continue\n                else:\n                    list_len-=1\n        return list_len\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sorted_list = sorted(test_list)\n    sum_list = list()\n    for i in range(1, len(sorted_list)):\n        for j in range(len(sorted_list)-i):\n            sum_list.append(sorted_list[j]+sorted_list[j+i])\n    return sum_list\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor = 1\n    count = 0\n    while divisor <= n / 2 : \n        if (n % divisor == 0) : \n            count = count + 1\n        divisor = divisor + 1\n    if count % 2 == 0 : \n        print (str(n) +'has an even number of divisors')\n    else : \n        print (str(n) +'has an odd number of divisors')\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt = 0\n    i = 1\n    while i < n :\n        if n % i == 0 :\n            cnt = cnt + 1\n        i = i + 1\n    if cnt % 2 == 0 :\n        print \"Even\"\n    else :\n        print \"Odd\"\n    return cnt \n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for x in range(1, math.ceil(math.sqrt(n)) + 1):\n        if n % x == 0:\n            divisors += 2\n    return divisors \n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    i = 1\n    while i <= int(math.sqrt(n)) :\n        if n % i == 0 :\n            if i == n / i :\n                divisors = divisors + 1\n            else :\n                divisors = divisors + 2\n        i = i + 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    i = 2\n    while i <= math.sqrt(n) :\n        if n % i == 0 :\n            divisors = divisors + 1\n        i = i + 1\n    if divisors % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return sum([1 for x in range(1, int(math.sqrt(n))+1) if n % x == 0])\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                count += 1\n            else:\n                count += 2\n        i += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 0:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1) : \n        return 0\n    elif (n == 2) : \n        return 1\n    else : \n        cnt = 0\n        for i in range(1, int(math.sqrt(n)) + 1) : \n            if (n % i == 0) : \n                if (n/i == i) : \n                    cnt = cnt + 1\n                else : \n                    cnt = cnt + 2\n        return cnt \n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count = count + 1\n    return count\n    \ndef prime(n):\n    if (n>1):\n        for i in range(2,n):\n            if (n % i) == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] + odd_length_sum(arr[1:])\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) % 2 == 1:\n        return arr[0] + odd_length_sum(arr[1:])\n    else:\n        return arr[0] + odd_length_sum(arr[1:])\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total += sum(arr[i:j+1])\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) <= 1:\n        return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2:\n                sum = sum + sum(arr[i:j+1])\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += (len(arr) - i) * arr[i]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(arr[i:i+3]) for i in range(len(arr)) if len(arr[i:i+3])%2 == 1])\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr),2):\n            res += sum(arr[i:j+1])\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        for j in range(0, i + 1):\n            if j % 2!= 0:\n                odd_sum += sum(arr[j:i + 1])\n    return odd_sum\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    # hue\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax-cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g-b)/delta % 6\n    elif cmax == g:\n        h = (b-r)/delta + 2\n    else:\n        h = (r-g)/delta + 4\n    # saturation\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta/cmax\n    # value\n    v = cmax\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    MAX_RGB_VALUE = 255\n    MIN_RGB_VALUE = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # initialize h, s, and v values\n    h = 0.0\n    s = 0.0\n    v = 0.0\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    delta = c_max - c_min\n    if delta == 0:\n        h = 0\n    elif c_max == r:\n        h = (g - b)/delta\n    elif c_max == g:\n        h = 2 + (b - r)/delta\n    elif c_max == b:\n        h = 4 + (r - g)/delta\n    h *= 60\n    if h < 0:\n        h += 360\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    high = max(r,g,b)\n    low = min(r,g,b)\n    # now, from high and low, we can find the value of hue and saturation\n    hue = 0\n    if high == low:\n        # if the color is pure, hue = 0, sat = 0\n        hue = 0\n        sat = high\n    elif high == r and high == g:\n        # if color is gray, hue = 0, sat = 1\n        hue = 0\n        sat = 1\n    else:\n        hue = 60 * (g - b) / (high - low)\n        if high == r:\n            sat = (high - low) / (high - low)\n        elif high == b:\n            sat = (high - low) / (high - low)\n        else:\n            sat = (high - low) / (high - low)\n    return hue, sat*100, high\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    m = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/m) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/m) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/m) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = m / mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Red color\n    if r == 255:\n        h = 0\n        s = 0\n        v = 0\n    else:\n        h = 60 * ((g-b) / (255-abs(r-g)) if r!= g else 0)\n        s = 0 if r == g else (1 - abs(r - b) / (255 - abs(r - g))) * 255\n        v = 255\n    # Green color\n    if g == 255:\n        h = 120\n        s = 0\n        v = 0\n    else:\n        h = 60 * ((b-r) / (255-abs(g-b)) if g!= b else 0)\n        s = 0 if g == r else (1 - abs(g - b) / (255 - abs(g - b))) * 255\n        v = 255\n    # Blue color\n    if b == 255:\n        h = 240\n        s = 0\n        v = 0\n    else:\n        h = 60 * ((r-g) / (255-abs(b-g)) if g!= b else 0)\n        s = 0 if g == r else (1 - abs(g - b) / (255 - abs(g - b))) * 255\n        v = 255\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    MAX = float(max(r, g, b))\n    MIN = float(min(r, g, b))\n    H = 0\n    if MAX!= MIN:\n        if MAX == r:\n            H = (g - b) / (MAX - MIN)\n        elif MAX == g:\n            H = 2.0 + (b - r) / (MAX - MIN)\n        else:\n            H = 4.0 + (r - g) / (MAX - MIN)\n        S = 0\n        if MAX!= 0:\n            S = (MAX - MIN) / MAX\n        else:\n            S = 0\n    else:\n        H = 0\n        S = 0\n    V = MAX\n    return H, S, V\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # define color map\n    color_map = {'red': {'lower': np.array([0, 100, 100]), 'upper': np.array([10, 255, 255])},\n                 'green': {'lower': np.array([36, 100, 100]), 'upper': np.array([86, 255, 255])},\n                 'blue': {'lower': np.array([110, 100, 100]), 'upper': np.array([130, 255, 255])}}\n    \n    rgb = np.uint8([[[r,g,b]]])\n    hsv = cv2.cvtColor(rgb, cv2.COLOR_RGB2HSV)\n    hsv = hsv[0][0]\n    \n    for key, value in color_map.items():\n        if (np.all(hsv >= value['lower']) and np.all(hsv <= value['upper'])):\n            return key\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_ = max(r, g, b)\n    min_ = min(r, g, b)\n    delta = max_-min_\n    v = max_\n    if delta > 0:\n        s = delta/v\n    else:\n        s = 0\n    if max_ == r:\n        h = (g-b)/delta%6\n    elif max_ == g:\n        h = (b-r)/delta+2\n    elif max_ == b:\n        h = (r-g)/delta+4\n    if h < 0:\n        h += 6\n    return (h,s,v)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    high = max(r, g, b)\n    low = min(r, g, b)\n    diff = high - low\n    if diff == 0:\n        h = 0\n    elif high == r:\n        h = (g - b) / diff\n    elif high == g:\n        h = 2 + (b - r) / diff\n    elif high == b:\n        h = 4 + (r - g) / diff\n    h *= 60\n    if h < 0:\n        h += 360\n    s = 0 if high == 0 else diff / high\n    v = high\n    return [h, s, v]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    def product(list1):\n        total = 1\n        for i in list1:\n            total = total * i\n        return total\n    \n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    \n    if len(even_list) == 0 or len(odd_list) == 0:\n        return None\n    \n    product_even = product(even_list)\n    product_odd = product(odd_list)\n    \n    return product_even * product_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i % 2 == 0:\n            result = result * i\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for number in list1:\n        if number%2==0:\n            product *= number\n        else:\n            product *= (number*-1)\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if list1 == []:\n        return 0\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum_even = 1\n    sum_odd = 1\n    for i in list1:\n        if i%2 == 0:\n            sum_even = sum_even*i\n        else:\n            sum_odd = sum_odd*i\n    return sum_even, sum_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) < 2:\n        raise ValueError(\"Not enough elements in list\")\n    even_product = 1\n    odd_product = 1\n    for elem in list1:\n        if elem % 2 == 0:\n            even_product *= elem\n        else:\n            odd_product *= elem\n    return [even_product, odd_product]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # the simplest way to do this is to loop through and multiply each even number by 2 and odd by 1\n    # not necessary to use a list but here for ease of understanding\n    # what I do is to make a new list and multiply all even values by 2\n    # then multiply all odd values by 1\n    # then multiply the two\n    # and return the product\n    # using a list would also be a lot of code but I want to be clear\n    \n    even_list = []\n    odd_list = []\n    product_list = []\n    \n    for x in list1:\n        if x % 2 == 0:\n            even_list.append(x)\n        else:\n            odd_list.append(x)\n    \n    for x in even_list:\n        product_list.append(x * 2)\n    \n    for x in odd_list:\n        product_list.append(x * 1)\n    \n    return product_list\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return (even,odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    n = len(list1)\n    even, odd = 0, 0\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum_even = 0\n    sum_odd = 0\n    for element in list1:\n        if element%2 == 0:\n            sum_even = sum_even + element\n        else:\n            sum_odd = sum_odd + element\n    print sum_even, sum_odd\n    return (sum_even*sum_odd)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    out_list = []\n    for ch in test_str:\n        out_list.append(int(ch))\n    return tuple(out_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str[1:-1]\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace('),(', '),(')\n    return tuple(map(int, test_str.split(',')))\n    \ndef convert_to_binary(x, length):\n    '''\n    Write a function that takes a decimal number (x) and returns the corresponding binary string.\n    '''\n    bits = []\n    while x > 0:\n        bits.append(x%2)\n        x = x/2\n    bits.append(0)\n    while len(bits) < length:\n        bits.append(0)\n    return bits\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if isinstance(test_str, str):\n        if ',' in test_str:\n            int_tuple = tuple(int(i) for i in test_str.split(','))\n        else:\n            int_tuple = int(test_str)\n    elif isinstance(test_str, int):\n        int_tuple = test_str\n    else:\n        int_tuple = None\n    return int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # your code here\n    return tuple(int(x) for x in test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(i) for i in test_str.split(' ')])\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str[1:-1].split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not test_str:\n        return None\n    return list(map(int, test_str[1:-1].split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.strip('()').split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str)!= tuple:\n        return None\n    l = [int(x) for x in test_str.split(',')]\n    return tuple(l)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # result = bisect.bisect(a, x)\n    # print(result)\n    \n    a.append(x)\n    result = bisect.bisect_left(a, x)\n    # print(result)\n    del a[-1]\n    return result\n    \ndef right_insertion_2(a, x):\n    result = bisect.bisect_right(a, x)\n    # print(result)\n    return result\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # note that there can be duplicates\n    # insert x into sorted array a, so that the sorted array remains ascending order\n    # print(a, x, bisect.bisect_right(a, x))\n    bisect.insort_right(a, x)\n    return a\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx == len(a):\n        return -1\n    else:\n        if a[idx]!= x:\n            return idx\n        else:\n            return idx+1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\ndef main():\n    a = [1,3,5,6,7,7,8,9,9,10]\n    print(right_insertion(a, 5))\n    print(left_insertion(a, 5))\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == len(a) or a[i] > x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    i = bisect.bisect(a, x)\n    if i == l:\n        a.append(x)\n    else:\n        a.insert(i, x)\n    return a\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a)==0:\n        return 0\n    for i in range(len(a)):\n        if a[i]<x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'a.*b'\n    pattern = 'a(.*)b'\n    # pattern = 'a(.*)b'\n    # pattern = 'a(.*)b'\n    # pattern = '(.*)a.*b'\n    # pattern = '(.*)a(.*)b'\n    # pattern = '(.*)a(.*)b'\n    # pattern = '(.*)a(.*)b'\n    # pattern = '(.*)a(.*)b'\n    print(re.match(pattern, text))\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('ab{3}',text):\n        return True\n    return False\ndef text_match_3_or_more_a(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_2(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_3(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_4(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_5(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_6(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_7(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_8(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_9(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_10(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_11(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_12(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_13(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_14(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_15(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_16(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_17(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_18(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_19(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_20(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_21(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_22(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_23(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_24(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_25(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_26(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_27(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('a(?=ab{3,})',text):\n        return True\n    return False\ndef text_match_3_or_more_a_28(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # return re.match(r'^a.{3}b$',text)\n    return re.match(r'a.{3}b',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matcher = re.findall(r'ab{3}',text)\n    print(matcher)\n    return matcher\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.search(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'a(.*)\\b\\b\\b\\b',text)\n    if result:\n        return result.group()\n    else:\n        return \"\"\n    \n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    result = re.search(r'a(.*)\\b\\b\\b\\b',text)\n    if result:\n        return result.group()\n    else:\n        return \"\"\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    p = re.compile(r'a(.)b{3}')\n    m = p.search(text)\n    if m:\n        return m.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    pattern = re.compile(r'a{3}b')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(.*?)(b+b+b)'\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"ab{3}\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # check for string\n    if isinstance(test_str, str):\n        # check for empty string\n        if test_str == '':\n            return test_list\n        else:\n            test_list.append(test_str)\n    else:\n        print(\"Error: string not entered\")\n    return test_list\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_str[0] == '(' and test_str[-1] == ')':\n        test_list.append(eval(test_str[1:-1]))\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    assert type(test_list) == list and type(test_str) == str\n    test_list.append(test_str)\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # return tuple(test_list[0:index] + test_str + test_list[index:])\n    return test_list[0:index] + test_str + test_list[index:]\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if isinstance(test_list, list) and isinstance(test_str, str):\n        if len(test_list)==2:\n            return tuple(test_list + [test_str])\n        else:\n            return \"Please provide 2 elements in the list.\"\n    else:\n        return \"Please provide a list and a string in the list.\"\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = []\n    for i in test_list:\n        if i == test_str:\n            new_tuple.append(i)\n        else:\n            pass\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # function\n    return tuple(test_list) + tuple(test_str)\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if (len(nums) % 2)!= 0:\n        return False\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for x in range(0, len(nums), 2):\n        if nums[x] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    list_length = len(nums)\n    list_index = 0\n    result = True\n    for num in nums:\n        if (list_index % 2) == 0:\n            if (num % 2)!= 0:\n                result = False\n                break\n        list_index += 1\n    return result\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i-1] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in xrange(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = []\n    for i in range(0,len(nums),2):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                result.append(nums[i])\n    return result\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i+1)%2 == 0:\n            if nums[i]%2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    out = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            out = out + (remove_nested(i),)\n        else:\n            out = out + (i,)\n    return out\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(list(set(test_tup))[0])\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return remove_nested(test_tup[0])\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # first change all tuples to lists\n    temp = []\n    for i in test_tup:\n        temp.append(list(i))\n    # now remove all empty lists\n    while temp:\n        if len(temp[0]) == 0:\n            temp.pop(0)\n        else:\n            break\n    return tuple(temp)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    if(len(test_tup) == 0):\n        return None\n    elif(len(test_tup) == 1):\n        return test_tup[0]\n    else:\n        return tuple([test_tup[0]] + remove_nested(test_tup[1:]))\n    \n    \n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested = (3, 4, [5, (3, 4)])\n    return tuple(remove_nested(nested))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if test_tup is None:\n        return None\n    # test_tup = test_tup.split(',')\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(x) for x in test_tup)\n    else:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = list(test_tup)\n    for x in test_list:\n        if type(x) == tuple:\n            test_list.remove(x)\n    return tuple(test_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for sub_tup in test_tup:\n        if isinstance(sub_tup, tuple):\n            remove_nested(sub_tup)\n        else:\n            test_tup.remove(sub_tup)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(set(test_tup))\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if type(input_list)==list:\n        return 1+sum(count_list(i) for i in input_list)\n    else:\n        return 0\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    number_of_lists = input_list.count([])\n    return number_of_lists\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in input_list:\n        if isinstance(i, list):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    input_list = [input_list]\n    return len(input_list)\n    \ndef main():\n    input_list = []\n    for line in sys.stdin:\n        input_list.append(line)\n    print count_list(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for index, value in enumerate(input_list): \n        if type(value) is list: \n            count += 1 \n    return count \n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list: \n        return 1 + count_list(input_list[1:])\n    return 0\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #Initialize variables\n    first=0\n    last=len(arr)-1\n    #Start loop\n    while first<=last:\n        #Find midpoint\n        mid=(first+last)/2\n        #Check if element is in middle\n        if arr[mid]==x:\n            #If so, check if it is the last element\n            if mid==len(arr)-1:\n                return mid\n            #If not, then we know it is the last element so return mid\n            else:\n                return mid\n        #If element is not in middle, check if it is the first element\n        elif arr[mid]>x:\n            last=mid-1\n        #If element is not in middle, check if it is the last element\n        else:\n            first=mid+1\n    #If we have reached here, then the element is not in the array\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    low=0\n    high=n-1\n    mid=0\n    while low<=high:\n        mid=(low+high)//2\n        if x==arr[mid]:\n            high=mid-1\n        elif x<arr[mid]:\n            high=mid-1\n        else:\n            low=mid+1\n    if low>=n:\n        return -1\n    else:\n        return mid\n    \ndef search(arr,x):\n    '''\n    Write a python function to search a value in a sorted array.\n    '''\n    n=len(arr)\n    low=0\n    high=n-1\n    mid=0\n    while low<=high:\n        mid=(low+high)//2\n        if x==arr[mid]:\n            return mid\n        elif x<arr[mid]:\n            high=mid-1\n        else:\n            low=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr == None or len(arr) == 0:\n        return -1\n    \n    low = 0\n    high = len(arr)\n    while low<=high:\n        mid = (low + high) // 2\n        if arr[mid]==x:\n            return mid\n        if arr[mid]<x:\n            low = mid +1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr2=arr[::-1]\n    return arr2.index(x)+len(arr)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    last = -1\n    for i in range(len(arr)):\n        if arr[i]>x:\n            last = i\n    return last\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    if arr[n-1]==x:\n        return n-1\n    i = n-1\n    while i>=0:\n        if arr[i]>=x:\n            return i\n        i-=1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    try:\n        return arr.index(x)\n    except ValueError:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # arr = sorted(arr)\n    # i = 0\n    # j = len(arr) -1\n    # while i < j:\n    #     mid = (i + j) /2\n    #     if arr[mid] == x:\n    #         return mid\n    #     elif arr[mid] > x:\n    #         j = mid -1\n    #     else:\n    #         i = mid + 1\n    # return -1\n    # return arr.index(x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i >=0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    try:\n        return len(arr) - list(reversed(arr)).index(x) - 1\n    except ValueError:\n        return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[a-zA-Z]+b$')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    if pattern.match(text):\n        return 'Found a match'\n    return 'Not matched'\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search(r'a.*b$', text):\n        return re.match(r'a.*b$', text)\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\ba+\\b')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*?b')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.+b$'\n    if re.match(pattern,text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*b$',re.MULTILINE)\n    result = pattern.search(text)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    result = re.search(pattern,text)\n    if result:\n        print('The starting and ending index for the text is :', result.start(), result.end())\n    else:\n        print('The pattern does not match')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab*')\n    return pattern.match(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.items():\n        total += item[1]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    result = 0\n    for item in dict:\n        result += dict[item]\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k, v in dict.items():\n        sum = sum + v\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<1:\n        return 0\n    return n + sum_odd(n-2)\n    \ndef sum_odd_recursive(n,i):\n    if i==0:\n        return n\n    return sum_odd_recursive(n,i-1) + 2*n\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(n+1) if x%2!=0)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 1: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return n + sum_odd(n-2)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if (n % 2 == 1):\n        return n\n    else:\n        while(n > 0):\n            sum = sum + n\n            n = n - 2\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total=0\n    for i in range(n):\n        if i%2!=0:\n            total+=i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #define the function here\n    total = 0\n    for i in range(l, r+1): \n        if i % 2!= 0:\n            total += i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(n+1)[1::2])\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    assert (isinstance(n,int)),\"n must be an integer\"\n    assert (n >= 0),\"n must be positive\"\n    s = 0\n    if n % 2 == 0:\n        return s\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            s += i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(n+1) if x%2!= 0)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n    \ndef _product(arr):\n    '''\n    Write a python function to find the product of an array.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    return product\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return reduce(lambda x, y: x + y, arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for x in arr:\n        s+=x\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \ndef _mean(arr):\n    '''\n    Write a python function to find the mean of an array.\n    '''\n    return sum(arr) / len(arr)\n    \ndef _median(arr):\n    '''\n    Write a python function to find the median of an array.\n    '''\n    arr = sorted(arr)\n    length = len(arr)\n    if length % 2 == 0:\n        return (arr[length//2 - 1] + arr[length//2]) / 2\n    else:\n        return arr[length//2]\n    \ndef _mode(arr):\n    '''\n    Write a python function to find the mode of an array.\n    '''\n    arr = sorted(arr)\n    mode = {}\n    for i in arr:\n        if i in mode:\n            mode[i] += 1\n        else:\n            mode[i] = 1\n    mode = sorted(mode.items(), key = operator.itemgetter(1), reverse = True)\n    return mode[0]\n    \ndef _variance(arr):\n    '''\n    Write a python function to find the variance of an array.\n    '''\n    arr = sorted(arr)\n    mean = _mean(arr)\n    variance = 0\n    for i in arr:\n        variance += (i - mean) ** 2\n    variance /= len(arr)\n    return variance\n    \ndef _standard_deviation(arr):\n    '''\n    Write a python function to find the standard deviation of an array.\n    '''\n    return sqrt(_variance(arr))\n    \ndef _range(arr):\n    '''\n    Write a python function to find the range of an array.\n    '''\n    return max(arr) - min(arr)\n    \ndef _min(arr):\n    '''\n    Write a python function to find the min of an array.\n    '''\n    return min(arr)\n    \ndef _max(arr):\n    '''\n    Write a python function to find the max of an array.\n    '''\n    return max(arr)\n    \ndef _total(arr):\n    '''\n    Write a python function to find the total of an array.\n    '''\n    return sum(arr)\n    \ndef _sum_squares(arr):\n    '''\n    Write a python function to find the sum of squares of an array.\n    '''\n    return sum([i ** 2 for i in arr])\n    \ndef _population_correlation(arr_x, arr_y):\n    '''\n    Write a python function to find the population correlation of two arrays.\n    '''\n    mean_x = _mean(arr_x)\n    mean_y = _mean(arr_y)\n    n = len(arr_x)\n    return sum([(arr_x[i] - mean_x) * (arr_y[i] - mean_y) for i in range(n)]) / ((_standard_deviation(arr_x) * _standard_deviation(arr_y)) ** 0.5)\n    \ndef _population_covariance(arr_x, arr_y):\n    '''\n    Write a python function to find the population covariance of two arrays.\n    '''\n    return _population_correlation(arr_x, arr_y)\n    \ndef _pearson_correlation(arr_x, arr_y):\n    '''\n    Write a python function to find the pearson correlation of two arrays.\n    '''\n    mean_x = _mean(arr_x)\n    mean_y = _mean(arr_y)\n    n = len(arr_x)\n    return sum([(arr_x[i] - mean_x) * (arr_y[i] - mean_y) for i in range(n)]) / ((_standard_deviation(arr_x) * _standard_deviation(arr_y)) ** 0.5)\n    \ndef _spearman_correlation(arr_x, arr_y):\n    '''\n    Write a python function to find the spearman correlation of two arrays.\n    '''\n    mean_x = _mean(arr_x)\n    mean_y = _mean(arr_y)\n    n = len(arr_x)\n    \n    x = sorted(arr_x)\n    y = sorted(arr_y)\n    \n    sums = 0\n    for i in range(n):\n        sums += (x[i] - mean_x) * (y[i] - mean_y)\n    return sums / ((_standard_deviation(arr_x) * _standard_deviation(arr_y)) ** 0.5)\n    \ndef _kendall_correlation(arr_x, arr_y):\n    '''\n    Write a python function to find the kendall correlation of two arrays.\n    '''\n    mean_x = _mean(arr_x)\n    mean_y = _mean(arr_y)\n    n = len(arr_x)\n    \n    x = sorted(arr_x)\n    y = sorted(arr_y)\n    \n    sums = 0\n    for i in range(n):\n        sums += (x[i] - mean_x) * (y[i] - mean_y)\n    return sums / ((_standard_deviation(arr_x) * _standard_deviation(arr_y)) ** 0.5)\n    \ndef _skewness(arr):\n    '''\n    Write a python function to find the skewness of an array.\n    '''\n    mean = _mean(arr)\n    n = len(arr)\n    variance = _variance(arr)\n    return (sum([(i - mean) ** 3 for i in arr]) / (n * variance ** 1.5))\n    \ndef _curtosis(arr):\n    '''\n    Write a python function to find the curtosis of an array.\n    '''\n    mean = _mean(arr)\n    n = len(arr)\n    variance = _variance(arr)\n    return (sum([(i - mean) ** 4 for i in arr]) / (n * variance ** 2))\n    \ndef _sum_average(arr):\n    '''\n    Write a python function to find the sum average of an array.\n    '''\n    return _total(arr) / len(arr)\n    \ndef _sum_deviation(arr):\n    '''\n    Write a python function to find the sum deviation of an array.\n    '''\n    return _total(arr) / _sum(arr)\n    \ndef _sum_variance(arr):\n    '''\n    Write a python function to find the sum variance of an array.\n    '''\n    return _sum_deviation(arr) ** 2\n    \ndef _sum_deviation_squared(arr):\n    '''\n    Write a python function to find the sum deviation squared of an array.\n    '''\n    return _sum(arr) * _sum(arr)\n    \ndef _stdev(arr):\n    '''\n    Write a python function to find the standard deviation of an array.\n    '''\n    return sqrt(_variance(arr))\n    \ndef _stdev_squared(arr):\n    '''\n    Write a python function to find the standard deviation squared of an array.\n    '''\n    return _variance(arr)\n    \ndef _sum_deviation_average(arr):\n    '''\n    Write a python function to find the sum deviation average of an array.\n    '''\n    return (_sum(arr) * _sum(arr)) / len(arr)\n    \ndef _sum_deviation_deviation(arr):\n    '''\n    Write a python function to find the sum deviation deviation of an array.\n    '''\n    return (_sum(arr) ** 2) / len(arr)\n    \ndef _skewness_deviation(arr):\n    '''\n    Write a python function to find the skewness deviation of an array.\n    '''\n    mean = _mean(arr)\n    n = len(arr)\n    variance = _variance(arr)\n    return (sum([(i - mean) ** 3 for i in arr]) / (n * variance ** 1.5))\n    \ndef _skewness_average(arr):\n    '''\n    Write a python function to find the skewness average of an array.\n    '''\n    mean = _mean(arr)"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for x in arr:\n        total += x\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert n < 2**32\n    assert n > -2**32\n    assert d < 32\n    assert d > -32\n    \n    res = n << d\n    return res&0xFFFFFFFF\n    \n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert n < 2**32\n    assert n > -2**32\n    assert d < 32\n    assert d > -32\n    \n    res = n >> d\n    return res&0xFFFFFFFF\n    \n    \ndef get_message_bits(message):\n    '''\n    Write a function to convert an message to a list of bits. We assume that the message is 32 bit.\n    '''\n    assert message < 2**32\n    assert message > -2**32\n    \n    res = [0] * 32\n    for i in xrange(32):\n        bit_pos = 31 - i\n        bit_val = message & 1\n        res[bit_pos] = bit_val\n        message = message >> 1\n    return res\n    \n    \ndef bits_to_message(bits):\n    '''\n    Write a function to convert a list of bits to an message. We assume that the message is 32 bit.\n    '''\n    assert len(bits) == 32\n    res = 0\n    for bit_pos,bit in enumerate(bits):\n        res = res | (bit << bit_pos)\n    return res\n    \n    \ndef xor_message(message1,message2):\n    '''\n    Write a function to compute the XOR of two messages. We assume that the messages are 32 bit.\n    '''\n    assert len(message1) == 32\n    assert len(message2) == 32\n    res = [0] * 32\n    for i in xrange(32):\n        res[i] = message1[i] ^ message2[i]\n    return res\n    \n    \ndef add_message(message1,message2):\n    '''\n    Write a function to compute the XOR of two messages. We assume that the messages are 32 bit.\n    '''\n    assert len(message1) == 32\n    assert len(message2) == 32\n    res = [0] * 32\n    for i in xrange(32):\n        res[i] = message1[i] + message2[i]\n    return res\n    \n    \ndef AND_message(message1,message2):\n    '''\n    Write a function to compute the XOR of two messages. We assume that the messages are 32 bit.\n    '''\n    assert len(message1) == 32\n    assert len(message2) == 32\n    res = [0] * 32\n    for i in xrange(32):\n        res[i] = message1[i] & message2[i]\n    return res\n    \n    \ndef add_bit(bit,number):\n    '''\n    Write a function to add a bit to a number.\n    '''\n    assert bit < 2\n    assert bit > -2\n    assert number < 2**32\n    assert number > -2**32\n    \n    return number + bit\n    \n    \ndef left_shift_bit(bit,number):\n    '''\n    Write a function to shift a bit left by a given number.\n    '''\n    assert bit < 2\n    assert bit > -2\n    assert number < 2**32\n    assert number > -2**32\n    \n    return (number << 1) | bit\n    \n    \ndef right_shift_bit(bit,number):\n    '''\n    Write a function to shift a bit right by a given number.\n    '''\n    assert bit < 2\n    assert bit > -2\n    assert number < 2**32\n    assert number > -2**32\n    \n    return (number >> 1) | (bit << 31)\n    \n    \ndef is_power_of_2(number):\n    '''\n    Write a function to check if a given number is a power of 2.\n    '''\n    assert number < 2**32\n    assert number > -2**32\n    \n    res = 1\n    for i in xrange(32):\n        res = res << 1\n        if res == number:\n            return True\n        if res > number:\n            return False\n    return False\n    \n    \ndef count_bits_set(message):\n    '''\n    Write a function to count the number of bits set in a given number.\n    '''\n    assert message < 2**32\n    assert message > -2**32\n    \n    res = 0\n    for i in xrange(32):\n        bit_pos = 31 - i\n        bit_val = message & 1\n        res += bit_val\n        message = message >> 1\n    return res\n    \n    \ndef count_bits_set_rec(message,bit_pos):\n    '''\n    Write a function to count the number of bits set in a given number. We assume that the number is 32 bit.\n    '''\n    assert message < 2**32\n    assert message > -2**32\n    assert bit_pos < 32\n    assert bit_pos > -32\n    \n    if message == 0:\n        return 0\n    \n    bit_val = message & 1\n    return 1 + count_bits_set_rec(message >> 1,bit_pos - 1)\n    \n    \ndef count_bits_set_iter(message):\n    '''\n    Write a function to count the number of bits set in a given number. We assume that the number is 32 bit.\n    '''\n    assert message < 2**32\n    assert message > -2**32\n    \n    res = 0\n    bit_pos = 31\n    while message:\n        bit_val = message & 1\n        res += bit_val\n        message = message >> 1\n        bit_pos -= 1\n    return res\n    \n    \ndef count_bits_set_rec_iter(message,bit_pos):\n    '''\n    Write a function to count the number of bits set in a given number. We assume that the number is 32 bit.\n    '''\n    assert message < 2**32\n    assert message > -2**32\n    assert bit_pos < 32\n    assert bit_pos > -32\n    \n    if message == 0:\n        return 0\n    \n    bit_val = message & 1\n    bit_pos_count = bit_pos - 1\n    return 1 + count_bits_set_rec_iter(message >> 1,bit_pos_count)\n    \n    \ndef count_bits_set_rec_xor(message,bit_pos):\n    '''\n    Write a function to count the number of bits set in a given number. We assume that the number is 32 bit.\n    '''\n    assert message < 2**32\n    assert message > -2**32\n    assert bit_pos < 32\n    assert bit_pos > -32\n    \n    if message == 0:\n        return 0\n    \n    bit_val = message & 1\n    bit_pos_count = bit_pos - 1\n    return 1 + count_bits_set_rec_xor(message >> 1,bit_pos_count) ^ bit_val\n    \n    \ndef count_bits_set_iter_xor(message,bit_pos):\n    '''\n    Write a function to count the number of bits set in a given number. We assume that the number is 32 bit.\n    '''\n    assert message < 2**32\n    assert message > -2**32\n    assert bit_pos < 32\n    assert bit_pos > -32\n    \n    res = 0\n    bit_pos_count = bit_pos - 1\n    while message:\n        bit_val = message & 1\n        res += bit_val\n        message = message >> 1\n        bit_pos_count -= 1\n    return res\n    \n    \ndef count_bits_set_rec_iter_xor(message,bit_pos):\n    '''\n    Write a function to count the number of bits set in a given number. We assume that the number is 32 bit.\n    '''\n    assert message < 2**32\n    assert message > -2**32\n    assert bit_pos < 32\n    assert bit_pos > -32\n    \n    if message == 0:\n        return 0\n    \n    bit_val = message & 1\n    bit_pos_count = bit_pos - 1\n    return 1 + count_bits_set_rec_ite"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | n >> 32 - d\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | ((n & 0xffffffff) >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 2 ** d - 1\n    return (n << d | n >> (32 - d)) & mask\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 32:\n        return n\n    mask = (2**d)-1\n    return ((n << d) & mask) | (n >> (32-d))\n    \ndef right_rotate(n,d):  \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 32:\n        return n\n    mask = (2**d)-1\n    return ((n >> d) & mask) | ((n << (32-d)) & mask)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    bit = (1<<d) - 1\n    mask = ~bit\n    return ((n & mask) | ((n<<d) & mask))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    new_bits = (n<<d)|(n>>(32-d))\n    return new_bits\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) -1\n    return (n << d) | ((n & mask) >> (32 - d))\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    new_text = text.strip()\n    return new_text\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text_without_spaces = re.sub(r'\\s+', '', text)\n    return text_without_spaces\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    result = text.replace(' ', '')\n    return result\ndef first_two(text):\n    '''\n    Write a function that returns the first two characters of a string.\n    '''\n    return text[0:2]\ndef last_five(text):\n    '''\n    Write a function that returns the last five characters of a string.\n    '''\n    return text[-5:]\ndef middle(text):\n    '''\n    Write a function that returns the middle characters of a string.\n    '''\n    return text[3:5]\ndef repeat(text, n):\n    '''\n    Write a function that returns a string with the same characters repeated n times.\n    '''\n    return text * n\ndef change_char(text, old, new):\n    '''\n    Write a function that changes all occurrences of old to new in a string.\n    '''\n    return text.replace(old, new)\ndef is_lower(text):\n    '''\n    Write a function that returns true if the string is lowercase and false otherwise.\n    '''\n    return text.islower()\ndef is_numeric(text):\n    '''\n    Write a function that returns true if the string is numeric and false otherwise.\n    '''\n    return text.isnumeric()\ndef count_vowels(text):\n    '''\n    Write a function that counts the number of vowels in a string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in text:\n        if char in vowels:\n            count = count + 1\n    return count\ndef count_consonants(text):\n    '''\n    Write a function that counts the number of consonants in a string.\n    '''\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n    count = 0\n    for char in text:\n        if char in consonants:\n            count = count + 1\n    return count\ndef get_vowels(text):\n    '''\n    Write a function that returns all vowels in a string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return [char for char in text if char in vowels]\ndef get_consonants(text):\n    '''\n    Write a function that returns all consonants in a string.\n    '''\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n    return [char for char in text if char in consonants]\ndef get_string_length(text):\n    '''\n    Write a function that returns the length of a string.\n    '''\n    return len(text)\ndef reverse(text):\n    '''\n    Write a function that returns the reverse of a string.\n    '''\n    return text[::-1]\ndef add_exclamation(text):\n    '''\n    Write a function that returns a string with an exclamation mark at the end of the word.\n    '''\n    return text + '!'\ndef count_exclamation(text):\n    '''\n    Write a function that returns the number of exclamation marks in a string.\n    '''\n    return text.count('!')\ndef palindrome(text):\n    '''\n    Write a function that returns true if the string is a palindrome and false otherwise.\n    '''\n    return text == text[::-1]\ndef is_palindrome(text):\n    '''\n    Write a function that returns true if the string is a palindrome and false otherwise.\n    '''\n    return text == text[::-1]\ndef only_vowels(text):\n    '''\n    Write a function that returns a string with only the vowels of a string.\n    '''\n    return ''.join(get_vowels(text))\ndef only_consonants(text):\n    '''\n    Write a function that returns a string with only the consonants of a string.\n    '''\n    return ''.join(get_consonants(text))\ndef only_letter(text):\n    '''\n    Write a function that returns a string with only the letter of a string.\n    '''\n    return ''.join(filter(lambda x: x.isalpha(), text))\ndef remove_vowels(text):\n    '''\n    Write a function that removes the vowels of a string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([char for char in text if char not in vowels])\ndef remove_consonants(text):\n    '''\n    Write a function that removes the consonants of a string.\n    '''\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n    return ''.join([char for char in text if char not in consonants])\ndef add_space(text):\n    '''\n    Write a function that adds a space between each of the words of a string.\n    '''\n    return''.join(text.split())\ndef print_lines(text):\n    '''\n    Write a function that prints out a number of lines of a string.\n    '''\n    print(text)\ndef print_lines_by_words(text):\n    '''\n    Write a function that prints out a number of lines of a string based on the number of words in each line.\n    '''\n    words = text.split(' ')\n    line_count = len(words) / 3\n    for line in range(line_count):\n        print(words[3*line:3*line+3])\ndef to_lower(text):\n    '''\n    Write a function that returns a string in lowercase.\n    '''\n    return text.lower()\ndef to_lower_case(text):\n    '''\n    Write a function that returns a string in lowercase.\n    '''\n    return text.lower()\ndef to_upper(text):\n    '''\n    Write a function that returns a string in uppercase.\n    '''\n    return text.upper()\ndef to_upper_case(text):\n    '''\n    Write a function that returns a string in uppercase.\n    '''\n    return text.upper()\ndef swap_characters(text, index1, index2):\n    '''\n    Write a function that returns a string with the two characters at the specified indices swapped.\n    '''\n    return text[:index1] + text[index2] + text[index1+1:index2] + text[index1] + text[index2+1:]\ndef swap_case(text):\n    '''\n    Write a function that returns a string with the upper and lower case swapped.\n    '''\n    return text.swapcase()\ndef swap_num(text, index1, index2):\n    '''\n    Write a function that returns a string with the two characters at the specified indices swapped.\n    '''\n    char1 = text[index1]\n    char2 = text[index2]\n    text = text.replace(char1, '1')\n    text = text.replace(char2, '2')\n    text = text.replace('1', char1)\n    text = text.replace('2', char2)\n    return text\ndef remove_char(text, index):\n    '''\n    Write a function that returns a string with the character at the specified index removed.\n    '''\n    return text.replace(text[index], '')\ndef remove_chars(text, chars):\n    '''\n    Write a function that returns a string with all the characters in the specified list removed.\n    '''\n    return ''.join([char for char in text if char not in chars])\ndef replace_char(text, index, new_char):\n    '''\n    Write a function that returns a string with all the characters in the specified list replace"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x==y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or x==z or y==z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or x==z or y==z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return(x==y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(i+1, y+1):\n            if i == j:\n                count += 1\n    for i in range(x, z+1):\n        for j in range(i+1, z+1):\n            if i == j:\n                count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # print \"x\",x\n    # print \"y\",y\n    # print \"z\",z\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or z == x:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return len([x,y,z]) - len(set([x,y,z]))\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    for i in x:\n        for j in y:\n            for k in z:\n                if i==j==k:\n                    count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y==z\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert (x == y and x == z)\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if not arr or len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Start with all elements as sorted\n    count = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    mid = n/2\n    i = 0\n    while i < mid:\n        if arr[mid] < arr[i]:\n            return i+1\n        i += 1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    low = 0\n    high = len(arr) - 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return len(arr)-1-arr[::-1].index(min(arr))\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    \n    if n == 1:\n        return 0\n    \n    min_index = arr.index(min(arr))\n    \n    if min_index == 0:\n        return 0\n    \n    if arr[-1] <= arr[0]:\n        return 0\n    \n    if min_index == n - 1:\n        return 1\n    \n    i = min_index\n    j = i + 1\n    \n    while j < n - 1:\n        if arr[j] >= arr[i]:\n            return 0\n        \n        j += 1\n        \n    return 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    if arr == sorted(arr):\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # If there is only one element, no rotation is needed\n    if n < 2:\n        return 0\n    # Find the minimum element of the array.\n    # We can find the minimum element in O(n) time\n    min_element = min(arr)\n    # Find the index of the minimum element\n    # We can find the index in O(1) time using the formula\n    min_index = arr.index(min_element)\n    # Now we are left with an array where all elements\n    # are greater than the minimum element\n    arr_after_min = arr[min_index+1:]\n    # Now we traverse the array after the minimum element\n    for i in range(len(arr_after_min)):\n        # There is no rotation needed\n        if arr[i] <= min_element:\n            return i\n    return i+1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 1\n    n = len(arr)\n    \n    if n == 1:\n        return 0\n        \n    for i in range(1,n):\n        if arr[i-1] < arr[i]:\n            count = count + 1\n    return count\n    \n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # final array would be arr[left:] + arr[:right]\n    # range(len(arr)) is the same as range(len(arr)-1, -1, -1)\n    # reversed(arr) is the same as arr[::-1]\n    for i in range(len(arr)):\n        if arr[i] > arr[(i+1)%len(arr)]:\n            return (i+1)%len(arr)\n    return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    from math import sqrt\n    return (sqrt(n) - int(sqrt(n))) == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n == pow(n, 1/2)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True\n    if n == 68:\n        return True\n    if n == 69:\n        return True\n    if n == 70:\n        return True\n    if n == 71:\n        return True\n    if n == 72:\n        return True\n    if n == 73:\n        return True\n    if n == 74:\n        return True\n    if n == 75:\n        return True\n    if n == 76:\n        return True\n    if n == 77:\n        return True\n    if n == 78:\n        return True\n    if n == 79:\n        return True\n    if n == 80:\n        return True\n    if n == 81:\n        return True\n    if n == 82:\n        return True\n    if n == 83:\n        return True\n    if n == 84:\n        return True\n    if n == 85:\n        return True\n    if n == 86:\n        return True\n    if n == 87:\n        return True\n    if n == 88:\n        return True\n    if n == 89:\n        return True\n    if n == 90:\n        return True\n    if n == 91:\n        return True\n    if n == 92:\n        return True\n    if n == 93:\n        return True\n    if n == 94:\n        return True\n    if n == 95:\n        return True\n    if n == 96:\n        return True\n    if n == 97:\n        return True\n    if n == 98:\n        return True\n    if n == 99:\n        return True\n    if n == 100:\n        return True\n    if n == 101:\n        return True\n    if n == 102:\n        return True\n    if n == 103:\n        return True\n    if n == 104:\n        return True\n    if n == 105:\n        return True\n    if n == 106:\n        return True\n    if n == 107:\n        return True\n    if n == 108:\n        return True\n    if n == 109:\n        return True\n    if n == 110:\n        return True\n    if n == 111:\n        return True\n    if n == 112:\n        return True\n    if n == 113:\n        return True\n    if n == 114:\n        return True\n    if n == 115:\n        return True\n    if n == 116:\n        return True\n    if n == 117:\n        return True\n    if n == 118:\n        return True\n    if n == 119:\n        return True\n    if n == 120:\n        return True\n    if n == 121:\n        return True\n    if n == 122:\n        return True\n    if n == 123:\n        return True\n    if n == 124:\n        return True\n    if n == 125:\n        return True\n    if n == 126:\n        return True\n    if n == 127:\n        return True\n    if n == 128:\n        return True\n    if n == 129:\n        return True\n    if n == 130:\n        return True\n    if n == 131:\n        return True\n    if n == 132:\n        return True\n    if n == 133:\n        return True\n    if n == 134:\n        return True\n    if n == 135:\n        return True\n    if n == 136:\n        return True\n    if n == 137:\n        return True\n    if n == 138:\n        return True\n    if n == 139:\n        return True\n    if n == 140:\n        return True\n    if n == 141:\n        return True\n    if n == 142:\n        return True\n    if n == 143:\n        return True\n    if n == 144:\n        return True\n    if n == 145:\n        return True\n    if n == 146:\n        return True\n    if n == 147:\n        return True\n    if n == 148:\n        return True\n    if n == 149:\n        return True\n    if n == 150:\n        return True\n    if n == 151:\n        return True\n    if n == 152:\n        return True\n    if n == 153:\n        return True\n    if n == 154:\n        return True\n    if n == 155:\n        return True\n    if n == 156:\n        return True\n    if n == 157:\n        return True\n    if n == 158:\n        return True\n    if n == 159:\n        return True\n    if n == 160:\n        return True\n    if n == 161:\n        return True\n    if n == 162:\n        return True\n    if n == 163:\n        return True\n    if n == 164:\n        return True\n    if n == 165:\n        return True\n    if n == 166:\n        return True\n    if n == 167:\n        return True\n    if n == 168:\n        return True\n    if n == 169:\n        return True\n    if n == 170:\n        return True\n    if n == 171:\n        return True\n    if n == 172:\n        return True\n    if n == 173:\n        return True\n    if n == 174:\n        return True\n    if n == 175:\n        return True\n    if n == 176:\n        return True\n    if n == 177:\n        return True\n    if n == 178:\n        return True\n    if n == 179:\n        return True\n    if n == 180:\n        return True\n    i"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return sqrt(n) == int(sqrt(n))\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n & (n - 1)) == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0) :\n        return True\n    i = 1\n    while (i * i < n) :\n        i += 1\n    if (i * i == n) :\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #check whether n is a perfect square or not\n    #iterative, O(n) time\n    if n==1 : return 1\n    low = 0\n    high = n\n    while low <= high :\n        mid = (low + high) // 2\n        if mid**2 == n :\n            return 1\n        elif mid**2 < n :\n            low = mid + 1\n        else :\n            high = mid - 1\n    return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    # Check if the number is in power of 2\n    #  -> How to check?\n    #  -> Not necessary but easy to code\n    if n & (n-1) == 0 :\n        return True\n    \n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return int(n ** 0.5) ** 2 == n\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Iterate through the list\n    for num in arr:\n        \n        # Get the product of the current number and the current iteration\n        product = num * arr[arr.index(num) + 1]\n        \n        # If the product is even, return True\n        if product % 2 == 0:\n            return True\n    \n    # If none of the numbers is even, return False\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x * y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    #O(n)\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef is_product_even2(arr):\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef is_product_even3(arr):\n    #O(n)\n    return reduce(lambda x,y: x*y, arr)%2 == 0\n    \ndef is_product_even4(arr):\n    return len(arr)%2 == 0 and reduce(lambda x,y: x*y, arr)%2 == 0\n    \ndef is_product_even5(arr):\n    #O(n)\n    return any(reduce(lambda x,y: x*y, arr)%2 == 0)\n    "
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr: \n        product = product * i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    temp = 1\n    for number in arr:\n        temp *= number\n    \n    if temp%2 == 0:\n        return True\n    else:\n        return False\n        \ndef get_sum(arr): \n    '''\n    Write a function to get the sum of the numbers in a list.\n    '''\n    \n    temp = 0\n    for number in arr:\n        temp += number\n    \n    return temp\n    \ndef get_product(arr): \n    '''\n    Write a function to get the product of the numbers in a list.\n    '''\n    \n    temp = 1\n    for number in arr:\n        temp *= number\n    \n    return temp\n    \ndef get_odd_numbers(arr): \n    '''\n    Write a function to get the odd numbers in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number%2!= 0:\n            temp.append(number)\n    \n    return temp\n    \ndef get_even_numbers(arr): \n    '''\n    Write a function to get the even numbers in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number%2 == 0:\n            temp.append(number)\n    \n    return temp\n    \ndef remove_duplicates(arr): \n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number not in temp:\n            temp.append(number)\n    \n    return temp\n    \ndef get_min_max_diff(arr): \n    '''\n    Write a function to get the min and max difference of the numbers in a list.\n    '''\n    \n    arr.sort()\n    return arr[-1]-arr[0]\n    \ndef get_unique_numbers(arr): \n    '''\n    Write a function to get the unique numbers in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number not in temp:\n            temp.append(number)\n    \n    return temp\n    \ndef get_sum_of_digits(num): \n    '''\n    Write a function to get the sum of the digits of a number.\n    '''\n    \n    total = 0\n    num_str = str(num)\n    for digit in num_str:\n        total += int(digit)\n    \n    return total\n    \ndef get_nth_fibonacci(n): \n    '''\n    Write a function to get the nth number of the fibonacci series.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_nth_fibonacci(n-1) + get_nth_fibonacci(n-2)\n    \ndef get_power(num, power): \n    '''\n    Write a function to get the power of a number.\n    '''\n    \n    return num**power\n    \ndef get_max_number(arr): \n    '''\n    Write a function to get the maximum number in a list.\n    '''\n    \n    temp = 0\n    for number in arr:\n        if number > temp:\n            temp = number\n    \n    return temp\n    \ndef get_min_number(arr): \n    '''\n    Write a function to get the minimum number in a list.\n    '''\n    \n    temp = arr[0]\n    for number in arr:\n        if number < temp:\n            temp = number\n    \n    return temp\n    \ndef get_max_freq(arr): \n    '''\n    Write a function to get the most frequent number in a list.\n    '''\n    \n    temp = 0\n    for number in arr:\n        if arr.count(number) > temp:\n            temp = number\n    \n    return temp\n    \ndef get_min_freq(arr): \n    '''\n    Write a function to get the least frequent number in a list.\n    '''\n    \n    temp = arr[0]\n    for number in arr:\n        if arr.count(number) < temp:\n            temp = number\n    \n    return temp\n    \ndef get_count_of_letters(string): \n    '''\n    Write a function to get the number of times a letter occurs in a string.\n    '''\n    \n    count = 0\n    for letter in string:\n        if letter == 'a':\n            count += 1\n    \n    return count\n    \ndef get_count_of_words(string): \n    '''\n    Write a function to get the number of times a word occurs in a string.\n    '''\n    \n    count = 0\n    for word in string.split():\n        count += 1\n    \n    return count\n    \ndef get_list_of_odds(arr): \n    '''\n    Write a function to get the list of odd numbers in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number%2!= 0:\n            temp.append(number)\n    \n    return temp\n    \ndef get_list_of_evens(arr): \n    '''\n    Write a function to get the list of even numbers in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number%2 == 0:\n            temp.append(number)\n    \n    return temp\n    \ndef get_list_of_even_squares(arr): \n    '''\n    Write a function to get the list of the even squares in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number%2 == 0 and number**2%2 == 0:\n            temp.append(number)\n    \n    return temp\n    \ndef get_list_of_squares(arr): \n    '''\n    Write a function to get the list of the squares in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number%2 == 0 and number**2%2!= 0:\n            temp.append(number)\n    \n    return temp\n    \ndef get_list_of_odd_squares(arr): \n    '''\n    Write a function to get the list of the odd squares in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number%2!= 0 and number**2%2!= 0:\n            temp.append(number)\n    \n    return temp\n    \ndef get_list_of_odd_numbers(arr): \n    '''\n    Write a function to get the list of the odd numbers in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number%2!= 0:\n            temp.append(number)\n    \n    return temp\n    \ndef get_list_of_even_numbers(arr): \n    '''\n    Write a function to get the list of the even numbers in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number%2 == 0:\n            temp.append(number)\n    \n    return temp\n    \ndef get_list_of_odd_numbers(arr): \n    '''\n    Write a function to get the list of the odd numbers in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number%2!= 0:\n            temp.append(number)\n    \n    return temp\n    \ndef get_list_of_negative_numbers(arr): \n    '''\n    Write a function to get the list of the negative numbers in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number < 0:\n            temp.append(number)\n    \n    return temp\n    \ndef get_list_of_positive_numbers(arr): \n    '''\n    Write a function to get the list of the positive numbers in a list.\n    '''\n    \n    temp = []\n    for number in arr:\n        if number > 0:\n            temp.append(number)\n    \n    return temp\n    \ndef get_list_of_negative_squares(arr): \n    '''\n    Write a function to ge"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for num in arr:\n        prod *= num\n    if prod % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    if prod % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) > 0: \n        return arr[0] % 2 == 0\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    return reduce(lambda x,y:x*y, arr) % 2 == 0\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    temp = []\n    for x in lists:\n        temp.append(sum(x))\n    return [x for x in lists if sum(x)==max(temp)][0]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n    # Your Code Here\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def sum_list(list):\n        sum = 0\n        for i in list:\n            sum += i\n        return sum\n    max_sum = -1\n    max_list = []\n    for i in lists:\n        sum = sum_list(i)\n        if sum > max_sum:\n            max_sum = sum\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for sub_list in lists:\n        if sum(sub_list) > max_sum:\n            max_sum = sum(sub_list)\n            max_list = sub_list\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #def max_sum_list(lst):\n    #    if lst == []:\n    #        return 0\n    #    return max(lst[0] + max_sum_list(lst[1:]), max_sum_list(lst[1:]))\n    #print max_sum_list([[1, 3, 5], [4, 5, 1], [1, 2, 1, 5]])\n    \n    #def max_sum_list(lst):\n    #    if lst == []:\n    #        return 0\n    #    return max(lst[0] + max_sum_list(lst[1:]), max_sum_list(lst[1:]))\n    #print max_sum_list([[1, 3, 5], [4, 5, 1], [1, 2, 1, 5]])\n    \n    #def max_sum_list(lst):\n    #    if lst == []:\n    #        return 0\n    #    return max(lst[0] + max_sum_list(lst[1:]), max_sum_list(lst[1:]))\n    #print max_sum_list([[1, 3, 5], [4, 5, 1], [1, 2, 1, 5]])\n    \n    def max_sum_list(lst):\n        if lst == []:\n            return 0\n        return max(lst[0] + max_sum_list(lst[1:]), max_sum_list(lst[1:]))\n    print max_sum_list([[1, 3, 5], [4, 5, 1], [1, 2, 1, 5]])\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    #Write your code here\n    \n    return max(lists, key=sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for list in lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n            max_list = list\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def sum_list(list):\n        total = 0\n        for elem in list:\n            total += elem\n        return total\n    \n    max_sum = 0\n    max_list = []\n    for list in lists:\n        list_sum = sum_list(list)\n        if list_sum > max_sum:\n            max_sum = list_sum\n            max_list = list\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # list_length = len(lists)\n    # max_sum = 0\n    # for x in lists:\n    #     list_length -= 1\n    #     max_sum += sum(x)\n    # if max_sum == 0:\n    #     return []\n    # for x in lists:\n    #     for i in xrange(list_length):\n    #         x[i] = x[i]/max_sum\n    # return lists\n    max_sum = sum(lists[0])\n    list_length = len(lists[0])\n    for x in lists:\n        list_length -= 1\n        if sum(x) > max_sum:\n            max_sum = sum(x)\n    if max_sum == 0:\n        return []\n    for x in lists:\n        for i in xrange(list_length):\n            x[i] = x[i]/max_sum\n    return lists\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        current_run = 1\n        if i == len(test_str) - 1:\n            return max_run\n        if test_str[i] == test_str[i + 1]:\n            current_run += 1\n            i += 1\n        else:\n            if test_str[i].isupper():\n                while i < len(test_str) - 1 and test_str[i].isupper():\n                    current_run += 1\n                    i += 1\n                max_run = max(max_run, current_run)\n                current_run = 1\n            else:\n                continue\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    max_result = 0\n    for i in range(len(test_str)):\n        j = i\n        count = 0\n        while j < len(test_str) and test_str[j].isupper():\n            j += 1\n            count += 1\n        if count > max_result:\n            max_result = count\n            result = i\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i, s in enumerate(test_str):\n        if s.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    temp = 0\n    for i in test_str:\n        if i.isupper():\n            temp += 1\n        else:\n            result = max(temp,result)\n            temp = 0\n    result = max(temp,result)\n    return result\n    \n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    cur_count = 0\n    for i in test_str:\n        if i.isupper():\n            cur_count += 1\n        else:\n            max_count = max(max_count, cur_count)\n            cur_count = 0\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run=0\n    for i in range(len(test_str)):\n        run=0\n        for j in range(i,len(test_str)):\n            if test_str[j].isupper():\n                run+=1\n            else:\n                break\n        if run > max_run:\n            max_run=run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i] >= 'A':\n            max_run += 1\n            i += 1\n        else:\n            max_run = 0\n            i += 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    n = len(test_str)\n    max_run = 0\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            if test_str[j] > 'Z':\n                break\n            if test_str[j] >= 'A':\n                count += 1\n        if count > max_run:\n            max_run = count\n    return max_run\n    \n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            max_run = max(max_run, curr_run)\n            curr_run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    if len(test_str) == 0:\n        return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n        return \"No odd number found\"\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n%2:\n            return n\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return next((i for i in nums if i % 2 == 1), None)\n    \ndef make_shuffled(string):\n    '''\n    Write a python function to shuffle a given string.\n    '''\n    return ''.join(random.sample(string, len(string)))\n    \ndef read_from_console(string):\n    '''\n    Write a python function to read and return the largest number from the console.\n    '''\n    return int(raw_input(string))\n    \ndef make_matrix(n, m):\n    '''\n    Write a python function to create and return an n X m matrix.\n    '''\n    return [[0 for i in range(m)] for j in range(n)]\n    \ndef two_matrixes(m1, m2):\n    '''\n    Write a python function to sum two matrices.\n    '''\n    return [[sum(x) for x in zip(m1[i], m2[i])] for i in range(len(m1))]\n    \ndef get_stacks(stacks):\n    '''\n    Write a python function to count the number of stacks in a list of tuples.\n    '''\n    return sum(len(s) for s in stacks)\n    \ndef get_dict(key, value):\n    '''\n    Write a python function to return the value corresponding to a key in a dictionary.\n    '''\n    return value[key]\n    \ndef to_list(x):\n    '''\n    Write a python function to convert a string to a list of characters.\n    '''\n    return list(x)\n    \ndef reverse_list(x):\n    '''\n    Write a python function to reverse a list of characters.\n    '''\n    return list(reversed(x))\n    \ndef rotate_matrix(matrix, n):\n    '''\n    Write a python function to rotate a n x n matrix.\n    '''\n    return [[matrix[(x + n - 1) % n][(y + n - 1) % n] for y in range(n)] for x in range(n)]\n    \ndef fib(n):\n    '''\n    Write a python function to return the nth Fibonacci number.\n    '''\n    fib_nums = [0,1]\n    for i in range(2, n + 1):\n        fib_nums.append(fib_nums[-1] + fib_nums[-2])\n    return fib_nums[-1]\n    \ndef index_of_first_even(nums):\n    '''\n    Write a python function to return the index of the first even number in a given list of numbers.\n    '''\n    return next((i for i, num in enumerate(nums) if num % 2 == 0), None)\n    \ndef generate_list(n):\n    '''\n    Write a python function to return a list of n random numbers.\n    '''\n    return [random.random() for i in range(n)]\n    \ndef generate_matrix(n, m):\n    '''\n    Write a python function to return an n X m matrix with random numbers.\n    '''\n    return [[random.random() for j in range(m)] for i in range(n)]\n    \ndef get_largest_item(items):\n    '''\n    Write a python function to return the largest item in a given list of items.\n    '''\n    return max(items)\n    \ndef get_smallest_item(items):\n    '''\n    Write a python function to return the smallest item in a given list of items.\n    '''\n    return min(items)\n    \ndef get_largest_items(items, n):\n    '''\n    Write a python function to return a list of the n largest items in a given list of items.\n    '''\n    return sorted(items, reverse = True)[:n]\n    \ndef get_smallest_items(items, n):\n    '''\n    Write a python function to return a list of the n smallest items in a given list of items.\n    '''\n    return sorted(items)[:n]\n    \ndef get_item_position(items, item):\n    '''\n    Write a python function to return the position of the given item in a given list of items.\n    '''\n    return items.index(item)\n    \ndef is_divisible_by_x(x, n):\n    '''\n    Write a python function to return true if n is divisible by x.\n    '''\n    return n % x == 0\n    \ndef to_string(n):\n    '''\n    Write a python function to return a string representation of a given integer.\n    '''\n    return str(n)\n    \ndef to_string_list(strings):\n    '''\n    Write a python function to return a string representation of a given list of strings.\n    '''\n    return''.join(strings)\n    \ndef to_string_matrix(matrix):\n    '''\n    Write a python function to return a string representation of a given matrix.\n    '''\n    return '\\n'.join(''.join(str(e) for e in row) for row in matrix)\n    \ndef to_string_list_matrix(matrix):\n    '''\n    Write a python function to return a string representation of a given list of matrices.\n    '''\n    return '\\n\\n'.join(to_string_matrix(m) for m in matrix)\n    \ndef make_matrix_zeros(n, m):\n    '''\n    Write a python function to return a matrix with all elements set to 0.\n    '''\n    return [[0 for j in range(m)] for i in range(n)]\n    \ndef get_odd_numbers(nums):\n    '''\n    Write a python function to return a list of the odd numbers in a given list of numbers.\n    '''\n    return [i for i in nums if i % 2 == 1]\n    \ndef get_first_odd(nums):\n    '''\n    Write a python function to return the first odd number in a given list of numbers.\n    '''\n    return next((i for i in nums if i % 2 == 1), None)\n    \ndef replace_first(nums):\n    '''\n    Write a python function to return a list with the first item replaced with the given number.\n    '''\n    return nums[1:] + [nums[0]]\n    \ndef replace_last(nums):\n    '''\n    Write a python function to return a list with the last item replaced with the given number.\n    '''\n    return nums[:-1] + [nums[-1]]\n    \ndef multiply_matrix_by_num(matrix, num):\n    '''\n    Write a python function to multiply a matrix by a given number.\n    '''\n    return [[x * num for x in row] for row in matrix]\n    \ndef nth_element(nums, i):\n    '''\n    Write a python function to return the nth element in a list.\n    '''\n    return nums[i]\n    \ndef rotate_list(x, n):\n    '''\n    Write a python function to rotate a list of items by a given number.\n    '''\n    return x[n:] + x[:n]\n    \ndef get_combinations(choices, n):\n    '''\n    Write a python function to return a list of all combinations of n items from a given list of items.\n    '''\n    return list(itertools.combinations(choices, n))\n    \ndef get_permutations(choices, n):\n    '''\n    Write a python function to return a list of all permutations of n items from a given list of items.\n    '''\n    return list(itertools.permutations(choices, n))\n    \ndef get_nth_permutation(permutations, n):\n    '''\n    Write a python function to return the nth permutation in a given list of permutations.\n    '''\n    return permutations[n - 1]\n    \ndef get_nth_combination(combinations, n):\n    '''\n    Write a python function to return the nth combination in a given list of combinations.\n    '''\n    return combinations[n - 1]\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if a given string is a pa"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in nums:\n        if x%2!=0:\n            return x\n            break\n    else:\n        return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!=0:\n            return num\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup, num = test_tup\n    if num in tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tuple_1 = test_tup[0]\n    tuple_2 = test_tup[1]\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup) == K\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # your code here\n    if test_tup[0] in K:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    a,b,c=test_tup\n    for i in K:\n        if c[i]==0:\n            return 0\n    return 1\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # sort the k list in ascending order and then extract the kth tuple\n    sorted_k = sorted(test_tup[1])\n    k_tup = sorted_k[K]\n    \n    # check if the kth tuple is equal to the extracted tuple\n    if test_tup[0] == k_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for t in test_tup:\n        if t[1] == K:\n            return 1\n    return 0\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K < 0:\n        print 'K should be a non-negative integer'\n    elif K > len(test_tup):\n        print 'K should be smaller than the length of tuples'\n    else:\n        print test_tup[:K], '...', test_tup[-K:], 'are the top k tuples'\n        \ndef find_k_tuples(test_tup, K):\n    '''\n    Write a function to find all k tuples in a given list of tuples.\n    '''\n    if K < 0:\n        print 'K should be a non-negative integer'\n    elif K > len(test_tup):\n        print 'K should be smaller than the length of tuples'\n    else:\n        print test_tup[:K], '...', test_tup[-K:], 'are the top k tuples'\n        \ndef find_k_tuples_using_hashtable(test_tup, K):\n    '''\n    Write a function to find all k tuples in a given list of tuples.\n    The output should be a list of tuples.\n    '''\n    if K < 0:\n        print 'K should be a non-negative integer'\n    elif K > len(test_tup):\n        print 'K should be smaller than the length of tuples'\n    else:\n        temp = []\n        hashtable = {}\n        for tup in test_tup:\n            hashtable[tuple(tup)] = 1\n        for tup in test_tup:\n            if len(hashtable) > K:\n                hashtable.pop(tup)\n            else:\n                temp.append(tup)\n        print temp[:K], '...', temp[-K:], 'are the top k tuples'\n    \ndef find_k_tuples_using_binary_search(test_tup, K):\n    '''\n    Write a function to find all k tuples in a given list of tuples.\n    The output should be a list of tuples.\n    '''\n    if K < 0:\n        print 'K should be a non-negative integer'\n    elif K > len(test_tup):\n        print 'K should be smaller than the length of tuples'\n    else:\n        temp = []\n        test_tup = sorted(test_tup)\n        for tup in test_tup:\n            if len(temp) > K:\n                temp.pop(0)\n            else:\n                temp.append(tup)\n        print temp[:K], '...', temp[-K:], 'are the top k tuples'\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return (test_tup[0] == K) or (test_tup[1] == K)\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if K not in i:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    check = []\n    for index in range(len(test_tup1)):\n        if test_tup1[index] < test_tup2[index]:\n            check.append(True)\n        else:\n            check.append(False)\n    return check\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0, len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            print(\"False\")\n            return False\n    print(\"True\")\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    flag = True\n    for i in range(len(test_tup1)):\n        if(test_tup1[i] > test_tup2[i]):\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0] or (test_tup1[0] == test_tup2[0] and test_tup1[1] > test_tup2[1]):\n        return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_list1 = test_tup1[1]\n    test_list2 = test_tup2[1]\n    return all(test_list1[i] < test_list2[i] for i in range(len(test_list1)))\n"
    }
]