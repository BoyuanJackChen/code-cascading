[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    if not test_tup1 or not test_tup2:\n        return False\n    return set(test_tup1) & set(test_tup2)\n    \ndef union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements in the two given lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    if not test_tup1 or not test_tup2:\n        return False\n    return set(test_tup1) | set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            test_tup2.append(test_tup1[i])\n    return test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for item in test_tup1:\n        if item in test_tup2:\n            return True\n    return False\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    new_list = []\n    for tup in zip(test_tup1, test_tup2):\n        if tup[0] == tup[1]:\n            new_list.append(tup[0])\n    return new_list\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_items = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        if tup1 == tup2:\n            shared_items.append(tup1)\n    return shared_items\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return (set1.intersection(set2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # If given number is less than\n    # or equal to 1, it is not prime\n    if n <= 1:\n        return False\n    # If given number is even, it is not\n    # prime\n    if n % 2 == 0:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\ndef prime_factor(n):\n    '''\n    Write a python function to identify prime number in a number\n    '''\n    l = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and is_not_prime(i):\n            l.append(i)\n    return l\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2==0:\n        return False\n    i = 3\n    while i*i <= n:\n        if n%i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return False\n    if n == 2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n<=1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_fibonacci(n):\n    '''\n    Write a python function to identify if a number is fibonacci or not.\n    '''\n    if n<=2:\n        return True\n    if n == 3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    for i in range(5,n**0.5,6):\n        if n%i==0 or n%(i+2)==0:\n            return False\n    return True\ndef is_perfect_square(n):\n    '''\n    Write a python function to check if a number is perfect square or not.\n    '''\n    x = int(math.sqrt(n))\n    return x*x == n\ndef is_perfect(n):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum += i\n    if sum == n:\n        return True\n    return False\ndef is_perfect_square_root(n):\n    '''\n    Write a python function to check if a number is perfect square root or not.\n    '''\n    x = int(math.sqrt(n))\n    return x*x == n\ndef is_perfect_square_root_optimized(n):\n    '''\n    Write a python function to check if a number is perfect square root or not.\n    '''\n    x = math.sqrt(n)\n    return x*x == n\ndef is_power(n):\n    '''\n    Write a python function to check if a number is power or not.\n    '''\n    x = 2\n    y = int(math.sqrt(n))\n    while(x<=y):\n        if x*x == n:\n            return True\n        x+=1\n    return False\ndef is_power_optimized(n):\n    '''\n    Write a python function to check if a number is power or not.\n    '''\n    x = 2\n    while(n%x!=0):\n        x+=1\n    return x==n\ndef is_perfect_power(n):\n    '''\n    Write a python function to check if a number is perfect power or not.\n    '''\n    x = 2\n    while(n%x==0):\n        if x**x==n:\n            return True\n        x+=1\n    return False\ndef is_perfect_power_optimized(n):\n    '''\n    Write a python function to check if a number is perfect power or not.\n    '''\n    x = 2\n    while(n%x==0):\n        if x**(n/x) == n:\n            return True\n        x+=1\n    return False\ndef is_abundant(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i==0:\n            sum += i\n    if sum > n:\n        return True\n    return False\ndef is_abundant_optimized(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))):\n        if n%i==0:\n            sum += i\n            if i>1 and i*i!=n:\n                sum += n/i\n    if sum > n:\n        return True\n    return False\ndef is_abundant_optimized_2(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if n<=12:\n        return [False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,True][n-1]\n    sum = 0\n    for i in range(1,int(math.sqrt(n))):\n        if n%i==0:\n            sum += i\n            if i>1 and i*i!=n:\n                sum += n/i\n    return sum > n\ndef is_abundant_optimized_3(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if n<=12:\n        return [False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,True][n-1]\n    sum = 0\n    for i in range(1,int(math.sqrt(n))):\n        if n%i==0:\n            sum += i\n            if i>1 and i*i!=n:\n                sum += n/i\n    return sum > n\ndef is_abundant_optimized_4(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    for i in range(1,int(math.sqrt(n))):\n        if n%i==0:\n            sum = i\n            if i>1 and i*i!=n:\n                sum += n/i\n    return sum > n\ndef is_abundant_optimized_5(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))):\n        if n%i==0:\n            sum += i\n            if i>1 and i*i!=n:\n                sum += n/i\n    return sum > n\ndef is_abundant_optimized_6(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i==0]) > n\ndef is_abundant_optimized_7(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    return sum(i for i in range(1,int(math.sqrt(n))+1) if n%i==0) > n\ndef is_abundant_optimized_8(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))):\n        if n%i==0:\n            sum += i\n            if i>1 and i*i!=n:\n                sum += n/i\n    return sum > n\ndef is_abundant_optimized_9(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i==0]) > n\ndef is_abundant_optimized_10(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    return sum(i for i in range(1,int(math.sqrt(n))+1) if n%i==0) > n\ndef is_abundant_optimized_11(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    return sum(i for i in range(1,int(math.sqrt(n))"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # if n==0 or n==1:\n    #     return False\n    # else:\n    #     for i in range(2,n):\n    #         if n%i==0:\n    #             return False\n    #     return True\n    return n>1 and all(n%i for i in islice(count(2), int(math.sqrt(n)-1)))\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for d in range(3, 1 + max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums = sorted(nums,reverse=True)\n    print(nums)\n    return nums[:n]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    nums = sorted(nums)\n    return nums[:n]\ndef find_maximum_product(arr):\n    '''\n    You are given an array A of non-negative integers. The array is composed of \n    at most five non-empty parts, and the size of an part is either one or two. \n    Your goal is to choose four non-empty parts, so that after \n    splitting, the sum of the numbers in those parts is maximum. \n    Return the maximum sum.\n    '''\n    if len(arr)<4:\n        return None\n    arr1 = arr[:len(arr)//2]\n    arr2 = arr[len(arr)//2:]\n    arr2.reverse()\n    arr = arr1+arr2\n    m = len(arr)\n    s = sum(arr)\n    if s<0:\n        return None\n    if m <4:\n        return None\n    i = m-4\n    s1,s2,s3,s4 = 0,0,0,0\n    while i>=0:\n        s1 += arr[i]\n        i-=1\n    i = m-3\n    while i>=0:\n        s2 += arr[i]\n        i-=1\n    i = m-2\n    while i>=0:\n        s3 += arr[i]\n        i-=1\n    i = m-1\n    while i>=0:\n        s4 += arr[i]\n        i-=1\n    arr.sort()\n    return max(s1,s2,s3,s4)\ndef find_pairs_2d(arr,k):\n    '''\n    Given an array arr[] of integers and an integer K, find all pairs of integers in the array whose sum is equal to K.\n    '''\n    if len(arr)<2:\n        return None\n    arr.sort()\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    ans = set()\n    for i in arr:\n        if k-i in d:\n            ans.add((i,k-i))\n    return list(ans)\ndef find_pairs(arr,k):\n    '''\n    Given an array arr[] of integers and an integer K, find all pairs of integers in the array whose sum is equal to K.\n    '''\n    if len(arr)<2:\n        return None\n    arr.sort()\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    ans = set()\n    for i in arr:\n        if k-i in d:\n            ans.add((i,k-i))\n    return list(ans)\ndef find_largest_index(arr,k):\n    '''\n    Given a sorted array arr[] of distinct integers and an integer k, find and return the index of k if it is present in arr[], otherwise return -1\n    '''\n    i = 0\n    j = len(arr)-1\n    while i<=j:\n        m = (i+j)//2\n        if arr[m]<k:\n            i = m+1\n        elif arr[m]>k:\n            j = m-1\n        else:\n            return m\n    return -1\ndef find_max_index(arr,k):\n    '''\n    Given a sorted array arr[] of distinct integers and an integer k, find and return the index of k if it is present in arr[], otherwise return -1\n    '''\n    i = 0\n    j = len(arr)-1\n    while i<=j:\n        m = (i+j)//2\n        if arr[m]<k:\n            i = m+1\n        elif arr[m]>k:\n            j = m-1\n        else:\n            return m\n    return -1\ndef is_equal(arr,k):\n    '''\n    Given a sorted array arr[] of distinct integers and an integer K, find and return the index of K if it is present in arr[], otherwise return -1\n    '''\n    i = 0\n    j = len(arr)-1\n    while i<=j:\n        m = (i+j)//2\n        if arr[m]<k:\n            i = m+1\n        elif arr[m]>k:\n            j = m-1\n        else:\n            return True\n    return False\ndef find_duplicate_number(arr,k):\n    '''\n    Given an array arr[] of N integers and an integer K, find and return the first index of K, if it is present in arr[], otherwise return -1\n    '''\n    i = 0\n    j = len(arr)-1\n    while i<=j:\n        m = (i+j)//2\n        if arr[m]<k:\n            i = m+1\n        elif arr[m]>k:\n            j = m-1\n        else:\n            return m\n    return -1\ndef find_max_index(arr):\n    '''\n    Given an array arr[] of integers, find and return the index of the maximum element of the array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i<=j:\n        m = (i+j)//2\n        if arr[m]>arr[j]:\n            j = m\n        elif arr[m]<arr[j]:\n            i = m+1\n        else:\n            i+=1\n    return j\ndef find_max_index_2d(arr):\n    '''\n    Given an array arr[] of size Nx2, find and return the index of the maximum element of the array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i<=j:\n        m = (i+j)//2\n        if arr[m][1]>arr[j][1]:\n            j = m\n        elif arr[m][1]<arr[j][1]:\n            i = m+1\n        else:\n            j-=1\n    return j\ndef find_max_index_3d(arr):\n    '''\n    Given an array arr[] of size Nx3, find and return the index of the maximum element of the array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i<=j:\n        m = (i+j)//2\n        if arr[m][1]>arr[j][1]:\n            j = m\n        elif arr[m][1]<arr[j][1]:\n            i = m+1\n        else:\n            j-=1\n    return j\ndef find_max_index_3d_2(arr):\n    '''\n    Given an array arr[] of size Nx3, find and return the index of the maximum element of the array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i<=j:\n        m = (i+j)//2\n        if arr[m][1]<arr[j][1]:\n            j = m\n        elif arr[m][1]>arr[j][1]:\n            i = m+1\n        else:\n            j-=1\n    return j\ndef find_max_index_3d_3(arr):\n    '''\n    Given an array arr[] of size Nx3, find and return the index of the maximum element of the array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i<=j:\n        m = (i+j)//2\n        if arr[m][2]>arr[j][2]:\n            j = m\n        elif arr[m][2]<arr[j][2]:\n            i = m+1\n        else:\n            j-=1\n    return j\ndef find_max_index_3d_4(arr):"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    if not nums:\n        return None\n    for i in nums:\n        hq.heappush(h,i)\n        if len(h)>n:\n            hq.heappop(h)\n    return h\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h=[]\n    if not nums:\n        return None\n    for i in nums:\n        hq.heappush(h,-i)\n        if len(h)>n:\n            hq.heappop(h)\n    return h\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    return [hq.heappop(h) for i in range(n)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h=[]\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    return [hq.heappop(h) for i in range(n)]\ndef max_heapify(a, i, heap_size):\n    l = 2*i + 1\n    r = 2*i + 2\n    if l < heap_size and a[l] > a[i]:\n        largest = l\n    else:\n        largest = i\n    if r < heap_size and a[r] > a[largest]:\n        largest = r\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pq=[]\n    for i in nums:\n        hq.heappush(pq,i)\n        if len(pq)>n:\n            hq.heappop(pq)\n    res=[hq.heappop(pq) for i in range(n)]\n    return res[::-1]\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pq=[]\n    for i in nums:\n        hq.heappush(pq,-i)\n        if len(pq)>n:\n            hq.heappop(pq)\n    res=[hq.heappop(pq) for i in range(n)]\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for n in nums:\n        hq.heappush(heap,-1*n)\n    \n    for i in range(n):\n        result = -1*hq.heappop(heap)\n    return result\n    \n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for n in nums:\n        hq.heappush(heap,n)\n    \n    for i in range(n):\n        result = hq.heappop(heap)\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)==0:\n        return []\n    hp=[]\n    for i in range(n):\n        hq.heappush(hp,(-nums[i],nums[i]))\n    for i in range(n,len(nums)):\n        if nums[i]>hp[0][1]:\n            hq.heappushpop(hp,(-nums[i],nums[i]))\n    return [hp[0][1] for i in range(n)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums)==0:\n        return []\n    hp=[]\n    for i in range(n):\n        hq.heappush(hp,(nums[i],nums[i]))\n    for i in range(n,len(nums)):\n        if nums[i]<hp[0][1]:\n            hq.heappushpop(hp,(nums[i],nums[i]))\n    return [hp[0][1] for i in range(n)]\ndef radix_sort(nums):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list of integers using the radix sort algorithm.\n    '''\n    max_num=max(nums)\n    buckets=[[] for i in range(10)]\n    for i in nums:\n        buckets[i%10].append(i)\n    result=[]\n    for i in range(10):\n        buckets[i].sort()\n        result.extend(buckets[i])\n    return result\ndef radix_sort_optimised(nums):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list of integers using the radix sort algorithm.\n    '''\n    buckets=[[] for i in range(10)]\n    for i in nums:\n        buckets[i%10].append(i)\n    for i in range(1,10):\n        buckets[i].sort()\n    result=[]\n    for i in range(10):\n        result.extend(buckets[i])\n    return result\ndef radix_sort_rev(nums):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list of integers using the radix sort algorithm.\n    '''\n    buckets=[[] for i in range(10)]\n    for i in nums:\n        buckets[i%10].append(i)\n    for i in range(1,10):\n        buckets[i].sort(reverse=True)\n    result=[]\n    for i in range(10):\n        result.extend(buckets[i])\n    return result\ndef bucket_sort(nums):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list of integers using the bucket sort algorithm.\n    '''\n    max_num=max(nums)\n    buckets=[[] for i in range(max_num+1)]\n    for i in nums:\n        buckets[i].append(i)\n    for i in range(1,max_num+1):\n        buckets[i].sort()\n    result=[]\n    for i in range(1,max_num+1):\n        result.extend(buckets[i])\n    return result\ndef bucket_sort_optimised(nums):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list of integers using the bucket sort algorithm.\n    '''\n    buckets=[[] for i in range(10)]\n    for i in nums:\n        buckets[i%10].append(i)\n    for i in range(1,10):\n        buckets[i].sort()\n    result=[]\n    for i in range(10):\n        result.extend(buckets[i])\n    return result\ndef partition(nums,left,right):\n    pivot=nums[right]\n    i=left-1\n    for j in range(left,right):\n        if nums[j]<=pivot:\n            i+=1\n            nums[i],nums[j]=nums[j],nums[i]\n    nums[i+1],nums[right]=nums[right],nums[i+1]\n    return i+1\ndef quick_sort(nums,left,right):\n    if left>=right:\n        return\n    pivot=partition(nums,left,right)\n    quick_sort(nums,left,pivot-1)\n    quick_sort(nums,pivot+1,right)\ndef quick_sort_optimised(nums,left,right):\n    if left>=right:\n        return\n    pivot=partition(nums,left,right)\n    quick_sort_optimised(nums,left,pivot-1)\n    quick_sort_optimised(nums,pivot+1,right)\ndef randomized_partition(nums,left,right):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list of integers using the randomized partition algorithm.\n    '''\n    nums[left],nums[right]=nums[right],nums[left]\n    pivot=nums[left]\n    i=left+1\n    for j in range(left+1,right+1):\n        if nums[j]<=pivot:\n            nums[i],nums[j]=nums[j],nums[i]\n            i+=1\n    nums[left],nums[i-1]=nums[i-1],nums[left]\n    return i-1\ndef randomized_partition_optimised(nums,left,right):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list of integers using the randomized partition algorithm.\n    '''\n    nums[left],nums[right]=nums[right],nums[left]\n    pivot=nums[left]\n    i=left+1\n    for j in range(left+1,right+1):\n        if nums[j]<=pivot:\n            nums[i],nums[j]=nums[j],nums[i]\n            i+=1\n    nums[left],nums[i-1]=nums[i-1],nums[left]\n    return i-1\ndef count_sort(nums):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list of integers using the count sort algorithm.\n    '''\n    max_num=max(nums)\n    count=[0 for i in range(max_num+1)]\n    for i in nums:\n        count[i]+=1\n    result=[0 for i in range(len(nums))]\n    for i in range(1,max_num+1):\n        count[i]+=count[i-1]\n    for i in range(len(nums)-1,-1,-1):\n        result[count[nums[i]]-1]=nums[i]\n        count[nums[i]]-=1\n    return result\ndef count_sort_optimised(nums):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list of integers using the count sort algorithm.\n    '''\n    count=[0 for i in range(10)]\n    for i in nums:\n        count[i%10]+=1\n    result=[0 for i in range(len(nums))]\n    for i in range(1,10):\n        count[i]+=count[i-1]\n    for i in range(len(nums)-1,-1,-1):\n        result[count[nums[i]%10]-1]=nums[i]\n        count[nums[i]%10]-=1\n    return result\ndef main():\n    nums=[4,9,8,7,1,2,5,6,3]\n    print(bucket_sort(nums))\n    nums=[4,9,8,7,1,2,5,6,3]\n    print(bucket_sort"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)==1:\n        return nums\n    if n>len(nums):\n        return nums\n    h = []\n    for i in nums:\n        hq.heappush(h,-1*i)\n    for i in xrange(n):\n        res = -1 * hq.heappop(h)\n        print res\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] > hq[0]:\n            hq[0] = nums[i]\n            hq.sort(reverse = True)\n    return hq[0:n]\ndef get_largest_n(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return [hq.heappop(heap) for i in range(n)]\ndef get_smallest_n(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return [hq.heappop(heap) for i in range(n)]\ndef get_smallest_n_from_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return [-hq.heappop(heap) for i in range(n)]\ndef is_sorted(nums):\n    '''\n    Write a function to determine whether a list is sorted or not, return true if it is sorted, otherwise false.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True\ndef rotate_array(nums,k):\n    '''\n    Write a function to rotate an array to the right by k steps.\n    '''\n    for i in range(k):\n        nums.insert(0,nums.pop())\n    return nums\ndef remove_element(nums,n):\n    '''\n    Write a function to remove an element from a given array.\n    '''\n    for i in range(n):\n        if nums[i] == n:\n            nums[i] = None\n    return [i for i in nums if i is not None]\ndef remove_element_from_end(nums,n):\n    '''\n    Write a function to remove an element from the end of the given array.\n    '''\n    for i in range(n):\n        if nums[len(nums)-i-1] == n:\n            nums[len(nums)-i-1] = None\n    return [i for i in nums if i is not None]\ndef remove_element_from_start(nums,n):\n    '''\n    Write a function to remove an element from the start of the given array.\n    '''\n    for i in range(n):\n        if nums[i] == n:\n            nums[i] = None\n    return [i for i in nums if i is not None]\ndef remove_element_from_end_with_pop(nums,n):\n    '''\n    Write a function to remove an element from the end of the given array.\n    '''\n    for i in range(n):\n        nums.pop()\n    return nums\ndef remove_element_from_start_with_pop(nums,n):\n    '''\n    Write a function to remove an element from the start of the given array.\n    '''\n    for i in range(n):\n        nums.pop(0)\n    return nums\ndef find_element_index(nums,n):\n    '''\n    Write a function to find the index of an element in an array.\n    '''\n    for i in range(len(nums)):\n        if nums[i] == n:\n            return i\n    return -1\ndef remove_element_index(nums,n):\n    '''\n    Write a function to remove an element from the array.\n    '''\n    for i in range(n):\n        nums.pop(n)\n    return nums\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from an unsorted array.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            nums[i] = None\n    return [i for i in nums if i is not None]\ndef find_duplicates(nums):\n    '''\n    Write a function to find all duplicates in an array.\n    '''\n    seen = {}\n    dups = []\n    for i in nums:\n        if i in seen:\n            dups.append(i)\n        else:\n            seen[i] = 1\n    return dups\ndef find_element_index_with_binary_search(nums,n):\n    '''\n    Write a function to find the index of an element in an array using binary search.\n    '''\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if nums[mid] == n:\n            return mid\n        elif nums[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\ndef find_element_index_with_binary_search_2(nums,n):\n    '''\n    Write a function to find the index of an element in an array using binary search.\n    '''\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if nums[mid] == n:\n            return mid\n        elif nums[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\ndef merge_sorted_arrays(nums1,nums2):\n    '''\n    Write a function to merge two sorted arrays.\n    '''\n    return sorted(nums1+nums2)\ndef swap_nodes(nums,n):\n    '''\n    Write a function to swap elements in a sorted array.\n    '''\n    nums[n],nums[n-1] = nums[n-1],nums[n]\n    return nums\ndef remove_duplicates_with_set(nums):\n    '''\n    Write a function to remove duplicates in an array without using extra space.\n    '''\n    seen = set()\n    dups = []\n    for i in nums:\n        if i in seen:\n            dups.append(i)\n        else:\n            seen.add(i)\n    return dups\ndef remove_duplicates_with_sort(nums):\n    '''\n    Write a function to remove duplicates in an array without using extra space.\n    '''\n    nums.sort()\n    return [nums[i] for i in range(len(nums)-1) if nums[i]!= nums[i+1]]\ndef remove_duplicates_with_sort_2(nums):\n    '''\n    Write a function to remove duplicates in an array without using extra space.\n    '''\n    return [nums[i] for i in range(len(nums)-1) if nums[i]!= nums[i+1] or i == len(nums)-2]\ndef find_closest_num(nums,n):\n    '''\n    Write a function to find the closest number in an array to a given number.\n    '''\n    index = 0\n    while index < len(nums) and nums[index] < n:\n        index += 1\n    if index == len(nums):\n        return nums[0]\n    return nums[index]\ndef find_closest_num_2(nums,n):\n    '''\n    Write a function to find the closest number in an array to a given number.\n    '''\n    diff = float("
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n,nums)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    return heapq.nsmallest(n,nums)\ndef heap_priority_queue_n(nums,n):\n    '''\n    Write a function to find the top n largest elements from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n,nums)\ndef heap_priority_queue_n(nums,n):\n    '''\n    Write a function to find the top n smallest elements from a given list of numbers, returned in ascending order.\n    '''\n    return heapq.nsmallest(n,nums)\ndef heap_heapify(nums):\n    '''\n    Write a function to convert a list of numbers into a heap.\n    '''\n    heapq.heapify(nums)\ndef heap_push(nums,item):\n    '''\n    Write a function to push a new item into a heap.\n    '''\n    heapq.heappush(nums,item)\ndef heap_pop(nums):\n    '''\n    Write a function to pop the smallest item from a heap.\n    '''\n    return heapq.heappop(nums)\ndef heap_increase_key(nums,item,new_item):\n    '''\n    Write a function to increase the value of a given key.\n    '''\n    for i,j in enumerate(nums):\n        if j[0] == item:\n            nums[i] = (new_item,j[1])\n            break\ndef heap_decrease_key(nums,item,new_item):\n    '''\n    Write a function to decrease the value of a given key.\n    '''\n    for i,j in enumerate(nums):\n        if j[0] == item:\n            nums[i] = (j[0],new_item)\n            break\ndef heap_update_key(nums,item,new_item):\n    '''\n    Write a function to decrease the value of a given key.\n    '''\n    for i,j in enumerate(nums):\n        if j[0] == item:\n            nums[i] = (j[0],new_item)\n            break\ndef heap_heapreplace(nums,item):\n    '''\n    Write a function to replace the top item with a new item.\n    '''\n    nums[0] = (item,nums[0][1])\ndef heap_del_key(nums,item):\n    '''\n    Write a function to delete a key from the heap.\n    '''\n    for i,j in enumerate(nums):\n        if j[0] == item:\n            del nums[i]\n            break\ndef heap_build_max_heap(nums):\n    '''\n    Write a function to build a max heap from a given list of numbers.\n    '''\n    hq.heapify(nums)\ndef heap_heap_sort(nums):\n    '''\n    Write a function to sort a list of numbers using a max heap.\n    '''\n    return hq.nlargest(len(nums),nums)\ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of numbers using a min heap.\n    '''\n    return hq.nsmallest(len(nums),nums)\ndef heap_merge_lists(lists):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    return heapq.merge(*lists)\ndef heap_nlargest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n,nums)\ndef heap_nsmallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    return heapq.nsmallest(n,nums)\ndef heap_priority_queue_n(nums,n):\n    '''\n    Write a function to find the top n largest elements from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n,nums)\ndef heap_priority_queue_n(nums,n):\n    '''\n    Write a function to find the top n smallest elements from a given list of numbers, returned in ascending order.\n    '''\n    return heapq.nsmallest(n,nums)\ndef heap_heapify(nums):\n    '''\n    Write a function to convert a list of numbers into a heap.\n    '''\n    heapq.heapify(nums)\ndef heap_push(nums,item):\n    '''\n    Write a function to push a new item into a heap.\n    '''\n    heapq.heappush(nums,item)\ndef heap_pop(nums):\n    '''\n    Write a function to pop the smallest item from a heap.\n    '''\n    return heapq.heappop(nums)\ndef heap_increase_key(nums,item,new_item):\n    '''\n    Write a function to increase the value of a given key.\n    '''\n    for i,j in enumerate(nums):\n        if j[0] == item:\n            nums[i] = (new_item,j[1])\n            break\ndef heap_decrease_key(nums,item,new_item):\n    '''\n    Write a function to decrease the value of a given key.\n    '''\n    for i,j in enumerate(nums):\n        if j[0] == item:\n            nums[i] = (j[0],new_item)\n            break\ndef heap_update_key(nums,item,new_item):\n    '''\n    Write a function to decrease the value of a given key.\n    '''\n    for i,j in enumerate(nums):\n        if j[0] == item:\n            nums[i] = (j[0],new_item)\n            break\ndef heap_heapreplace(nums,item):\n    '''\n    Write a function to replace the top item with a new item.\n    '''\n    nums[0] = (item,nums[0][1])\ndef heap_del_key(nums,item):\n    '''\n    Write a function to delete a key from the heap.\n    '''\n    for i,j in enumerate(nums):\n        if j[0] == item:\n            del nums[i]\n            break\ndef heap_build_max_heap(nums):\n    '''\n    Write a function to build a max heap from a given list of numbers.\n    '''\n    hq.heapify(nums)\ndef heap_heap_sort(nums):\n    '''\n    Write a function to sort a list of numbers using a max heap.\n    '''\n    return hq.nlargest(len(nums),nums)\ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of numbers using a min heap.\n    '''\n    return hq.nsmallest(len(nums),nums)\ndef heap_merge_lists(lists):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    return heapq.merge(*lists)\ndef heap_nlargest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n,nums)\ndef heap_nsmallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    return heapq.nsmallest(n,nums)\ndef heap_priority_queue_n(nums,n):\n    '''\n    Write a function to find the top n largest elements from a give"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return 0\n    while x > 1:\n        if x & 1 == 1:\n            return 0\n        x = x >> 1\n    return 1\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x&(x-1) == 0)\n    #return (x&(x-1)!= 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0 \n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = int(x)\n    if x == 0:\n        return False\n    elif x == 1:\n        return False\n    elif x & (x - 1) == 0:\n        return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x&(x-1))==0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        return True\n    if x == 2 or x == 3:\n        return False\n    return is_Power_Of_Two(x/2)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_of_words = re.findall(\"[a-zA-Z0-9]+\", text)\n    return [x for x in list_of_words if len(x) >= 4]\n    \ndef find_nth_word(text, n):\n    '''\n    Write a function to find the nth word in a string.\n    '''\n    list_of_words = re.findall(\"[a-zA-Z0-9]+\", text)\n    if n > len(list_of_words):\n        return None\n    return list_of_words[n-1]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    result = pattern.findall(text)\n    return result\n    \n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    #return re.findall(r'\\b\\w{4,}\\b',text)\n    \n    #mycode\n    lst = re.findall(r'\\w{4,}',text)\n    return lst\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    new_text = re.findall(r'\\w{4,}', text)\n    return new_text\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if text == \"\":\n        return \"\"\n    return re.findall(r'\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if not text:\n        return []\n    chars = [char for char in text]\n    candidate_words = ['']\n    for c in chars:\n        new_candidate_words = []\n        for word in candidate_words:\n            new_candidate_words.append(word + c)\n        candidate_words += new_candidate_words\n    return list(set([word for word in candidate_words if len(word) >= 4]))\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z]+',text)\n    return [word for word in words if len(word)>=4]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}',text)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    # Instead of defining a new list, use map to directly update the original list\n    # The function is called once per element\n    return map(lambda num: num**2, nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    k = 0\n    while k <= n:\n        new_str = str[k:]+str[:k]\n        if new_str == str:\n            return n - k\n        else:\n            k+=1\n    return 0\ndef find_Rotations_v2(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    k = 0\n    while k <= n:\n        new_str = str[k:]+str[:k]\n        if new_str == str:\n            return n - k\n        else:\n            k+=1\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    length = len(str)\n    for i in range(length - 1):\n        if str[i]!= str[i + 1]:\n            count += 1\n            if str[i + 1] == str[i]:\n                count += 1\n            if str[i] == str[i + 2]:\n                count += 1\n    if count == 0:\n        print(\"No rotations\")\n    elif count == 1:\n        print(\"Only one rotation\")\n    else:\n        print(\"%d rotations\" % count)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str1 = str\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        temp = str1[i:] + str1[:i]\n        if temp == str1:\n            count = count + 1\n    if count == 0:\n        return -1\n    else:\n        return count\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str==str[::-1]:\n        return 0\n    else:\n        count=0\n        for i in range(0,len(str)):\n            if str[i:len(str)]==str[i:len(str):-1]:\n                count+=1\n        return count\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def isRotated(str1,str2):\n        if (len(str1)!= len(str2)):\n            return False\n        return (str1 in str2 + str2)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str)\n    if length == 1:\n        return 0\n    min_rotations = length + 1\n    for i in range(length):\n        first = str[i]\n        last = str[length - 1]\n        next = str[i + 1:length - i]\n        if first == last and len(next)!= 0:\n            min_rotations = min(min_rotations, find_rotations(next) + 1)\n    return min_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = str + str \n    res = 0\n    for i in range(0, len(str)):\n        temp = str[i:]+str[:i]\n        if temp == str:\n            res = i\n            break\n    return res\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == str[::-1]:\n        return 0\n    else:\n        for i in xrange(1, len(str)):\n            if str[i:] == str[i:][::-1]:\n                return i\n        else:\n            return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - len(str.lstrip(str[0]))\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str)\n    if length < 2:\n        return 0\n    elif length == 2:\n        if str[0]!= str[1]:\n            return 1\n        else:\n            return 0\n    else:\n        rotations = 0\n        if str[0] == str[length-1]:\n            return rotations\n        for i in range(1,length):\n            if str[i] == str[0]:\n                str_new = str[i:] + str[:i]\n                rotations += find_Rotations(str_new)\n        return rotations + 1\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.find(ch)].rstrip(ch) + s[s.rfind(ch)+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.index(ch)] + s[s.rindex(ch)+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)==-1:\n        print(\"No occurance of \"+ch+\" found\")\n    else:\n        s1=s[:s.find(ch)]\n        s2=s[s.find(ch)+1:]\n        s=s1+s2\n        print(s)\n    \nremove_Occ(\"abcabcd\",\"b\")"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    try:\n        s_new = s[0:s.index(ch)] + s[s.index(ch)+1:]\n        return s_new\n    except ValueError:\n        print(\"The given character is not present in the string\")\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    try:\n        s1=s.replace(ch, '',1)\n        s1=s1.replace(ch,'',1)\n    except:\n        s1=''\n    return s1\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    string_list = list(s)\n    string_list.remove(ch)\n    string_list.remove(ch)\n    return ''.join(string_list)\n    \ndef remove_all_occurrence_of_a_char(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    string_list = list(s)\n    while string_list.count(ch)>1:\n        string_list.remove(ch)\n        string_list.remove(ch)\n    return ''.join(string_list)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch, '', 1)\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)==-1:\n        return s\n    else:\n        if s.find(ch)==0:\n            return remove_Occ(s[1:],ch)\n        else:\n            return remove_Occ(s[:s.find(ch)],ch)+s[s.find(ch):]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=lambda row: sum(row))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n    for i in range(len(M)):\n        row_sum = 0\n        for j in range(len(M[i])):\n            row_sum += M[i][j]\n        sorted_matrix.append(row_sum)\n    sorted_matrix.sort()\n    print(sorted_matrix)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n - i - 1):\n            if M[j][n-i-1] < M[j+1][n-i-1]:\n                M[j], M[j+1] = M[j+1], M[j]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # For each row, sort the column based on the sum of each row\n    for i in range(len(M)):\n        M[i].sort(key = lambda x: x[1])\n    # For each row, take the highest sum index and sort the row based on the index of highest sum\n    for i in range(len(M)):\n        M[i].sort(key = lambda x: x[0])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in xrange(n):\n        M[i].sort()\n    sums = [sum(M[i]) for i in xrange(n)]\n    print sums\n    for i in xrange(n):\n        for j in xrange(n):\n            M[i][j] = sums[i] - M[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Brute force solution\n    # Time: O(n^3)\n    # Space: O(1)\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if sum(M[i]) < sum(M[j+i+1]):\n                M[i], M[j+i+1] = M[j+i+1], M[i]\n    \n    return M\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row = len(M)\n    col = len(M[0])\n    sort_matrix = []\n    for i in range(row):\n        sum_row = 0\n        for j in range(col):\n            sum_row += M[i][j]\n        sort_matrix.append(sum_row)\n    for i in range(row):\n        for j in range(i, row):\n            if sort_matrix[i] > sort_matrix[j]:\n                temp = sort_matrix[i]\n                sort_matrix[i] = sort_matrix[j]\n                sort_matrix[j] = temp\n    return sort_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for j in range(1,len(M)):\n        key = M[j][0]\n        i = j-1\n        while i>=0 and M[i][0]+M[i][1]>key:\n            M[i+1][0] = M[i][0]\n            M[i+1][1] = M[i][1]\n            i-=1\n        M[i+1][0] = key\n        M[i+1][1] = M[j][1]\n    for i in range(len(M)-1,0,-1):\n        for j in range(i-1,0,-1):\n            if M[j][0]+M[j][1]>M[j+1][0]+M[j+1][1]:\n                M[j],M[j+1] = M[j+1],M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows, cols = len(M), len(M[0])\n    for row in range(rows):\n        for col in range(cols):\n            min_idx = row\n            for i in range(row, rows):\n                if M[min_idx][col] > M[i][col]:\n                    min_idx = i\n            M[min_idx], M[row] = M[row], M[min_idx]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row = len(M)\n    col = len(M[0])\n    S = [0] * row\n    result = [[0 for j in range(col)] for i in range(row)]\n    for i in range(row):\n        for j in range(col):\n            S[i] += M[i][j]\n    S, j = list(enumerate(S)), 0\n    for i in range(row):\n        for j in range(row):\n            if S[j][1] > S[i][1]:\n                temp = S[j]\n                S[j] = S[i]\n                S[i] = temp\n    for i in range(row):\n        for j in range(col):\n            result[i][j] = M[S[i][0]][j]\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (b*h)/3.0\n    "
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    def find_Area(l,b,h) :\n        '''\n        Write a python function to find the Area of a Rectangular Prism.\n        '''\n        Area = l*b\n        return Area\n    \n    def find_Volume(l,b,h) :\n        '''\n        Write a python function to find the volume of a triangular prism.\n        '''\n        Volume = (1/3)*b*h\n        return Volume\n    \n    def find_Area(l,b,h) :\n        '''\n        Write a python function to find the Area of a Rectangular Prism.\n        '''\n        Area = (l*b)+((l*b)*h)\n        return Area\n    \n    \n    Volume = find_Volume(l,b,h)\n    Area = find_Area(l,b,h)\n    return [Volume, Area]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/6\n    print \"The volume of a triangular prism is %.2f\" %volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(l)\n    b = float(b)\n    h = float(h)\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    if l <= 0:\n        return 0\n    elif b <= 0:\n        return 0\n    elif h <= 0:\n        return 0\n    else:\n        return l*b*h/3\n    \n    \nprint(find_Volume(6,4,5))"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V=1/6*(b*h)**2*l \n    return V\ndef find_Surface_area(l,b,h) : \n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    A=1/2*b*h*(l+b)\n    return A\ndef find_Base_area(l,b,h) : \n    '''\n    Write a python function to find the base area of a triangular prism.\n    '''\n    A=1/2*b*h*l\n    return A\ndef find_Volume_Surface_Ratio(l,b,h) : \n    '''\n    Write a python function to find the volume to surface ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    S=find_Surface_area(l,b,h)\n    ratio=V/S\n    return ratio\ndef find_Base_Surface_Ratio(l,b,h) : \n    '''\n    Write a python function to find the base to surface ratio of a triangular prism.\n    '''\n    A=find_Base_area(l,b,h)\n    S=find_Surface_area(l,b,h)\n    ratio=A/S\n    return ratio\ndef find_Volume_Base_Ratio(l,b,h) : \n    '''\n    Write a python function to find the base to volume ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    A=find_Base_area(l,b,h)\n    ratio=V/A\n    return ratio\ndef find_Volume_Ratio(l,b,h) : \n    '''\n    Write a python function to find the volume to surface ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    S=find_Surface_area(l,b,h)\n    ratio=V/S\n    return ratio\ndef find_Surface_to_Volume_Ratio(l,b,h) : \n    '''\n    Write a python function to find the surface to volume ratio of a triangular prism.\n    '''\n    A=find_Surface_area(l,b,h)\n    V=find_Volume(l,b,h)\n    ratio=A/V\n    return ratio\ndef find_Volume_Surface_Area_Ratio(l,b,h) : \n    '''\n    Write a python function to find the volume to surface area ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    S=find_Surface_area(l,b,h)\n    ratio=V/S\n    return ratio\ndef find_Volume_Surface_to_Base_Ratio(l,b,h) : \n    '''\n    Write a python function to find the volume to base ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    A=find_Base_area(l,b,h)\n    ratio=V/A\n    return ratio\ndef find_Volume_Surface_to_Base_to_Surface_Ratio(l,b,h) : \n    '''\n    Write a python function to find the volume to base to surface ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    A=find_Base_area(l,b,h)\n    ratio=V/A\n    return ratio\ndef find_Volume_Surface_to_Base_to_Volume_Ratio(l,b,h) : \n    '''\n    Write a python function to find the volume to base to volume ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    A=find_Base_area(l,b,h)\n    ratio=V/A\n    return ratio\ndef find_Volume_to_Volume_Ratio(l,b,h) : \n    '''\n    Write a python function to find the volume to volume ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    V1=find_Volume(l,b,h)\n    ratio=V/V1\n    return ratio\ndef find_Volume_Surface_Ratio_List(l,b,h) : \n    '''\n    Write a python function to find the volume to surface ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    S=find_Surface_area(l,b,h)\n    ratio=V/S\n    return ratio\ndef find_Surface_to_Volume_Ratio_List(l,b,h) : \n    '''\n    Write a python function to find the surface to volume ratio of a triangular prism.\n    '''\n    A=find_Surface_area(l,b,h)\n    V=find_Volume(l,b,h)\n    ratio=A/V\n    return ratio\ndef find_Volume_Surface_Area_Ratio_List(l,b,h) : \n    '''\n    Write a python function to find the volume to surface area ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    S=find_Surface_area(l,b,h)\n    ratio=V/S\n    return ratio\ndef find_Volume_Surface_to_Base_Ratio_List(l,b,h) : \n    '''\n    Write a python function to find the volume to base ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    A=find_Base_area(l,b,h)\n    ratio=V/A\n    return ratio\ndef find_Volume_Surface_to_Base_to_Surface_Ratio_List(l,b,h) : \n    '''\n    Write a python function to find the volume to base to surface ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    A=find_Base_area(l,b,h)\n    ratio=V/A\n    return ratio\ndef find_Volume_Surface_to_Base_to_Volume_Ratio_List(l,b,h) : \n    '''\n    Write a python function to find the volume to base to volume ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    A=find_Base_area(l,b,h)\n    ratio=V/A\n    return ratio\ndef find_Volume_to_Volume_Ratio_List(l,b,h) : \n    '''\n    Write a python function to find the volume to volume ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    V1=find_Volume(l,b,h)\n    ratio=V/V1\n    return ratio\ndef find_Volume_Surface_Area_Ratio_List(l,b,h) : \n    '''\n    Write a python function to find the volume to surface area ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    S=find_Surface_area(l,b,h)\n    ratio=V/S\n    return ratio\ndef find_Volume_Surface_to_Base_Ratio_List(l,b,h) : \n    '''\n    Write a python function to find the volume to base ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    A=find_Base_area(l,b,h)\n    ratio=V/A\n    return ratio\ndef find_Volume_Surface_to_Base_to_Surface_Ratio_List(l,b,h) : \n    '''\n    Write a python function to find the volume to base to surface ratio of a triangular prism.\n    '''\n    V=find_Volume(l,b,h)\n    A=find_Base_area(l,b,h)\n    ratio=V/A\n    return ratio\ndef find"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (b*h)/3\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    print text.lower().islower()\n    return text.lower().islower()\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.lower().replace(\" \", \"_\").isalpha()\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('^[a-z]+_[a-z]+$', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile(r'[a-z]+_[a-z]+')\n    if regex.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return any(x.islower() for x in text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # your code here\n    result = re.search(r'[a-z]+_[a-z]+', text)\n    if result:\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_+[a-z]', text)) > 0\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+',text)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_char = list(string)\n    list_of_char.sort(reverse=True)\n    return list_of_char\ndef ascii_value(list_of_char):\n    '''\n    Write a function to return a list of all the ascii values of the characters in the first string.\n    '''\n    list_of_ASCII_values = []\n    for i in list_of_char:\n        list_of_ASCII_values.append(ord(i))\n    return list_of_ASCII_values\ndef shift_values(list_of_char, shift):\n    '''\n    Write a function to return the list of the ascii values of the characters after a shift of shift.\n    '''\n    list_of_ASCII_values = []\n    for i in list_of_char:\n        list_of_ASCII_values.append(ord(i)+shift)\n    return list_of_ASCII_values\ndef ascii_to_char(list_of_char):\n    '''\n    Write a function to convert the list of ASCII values to the corresponding characters.\n    '''\n    list_of_char = ascii_to_char(list_of_char)\n    return list_of_char\ndef char_to_ascii(list_of_char):\n    '''\n    Write a function to convert the list of ASCII values to the corresponding characters.\n    '''\n    list_of_char = char_to_ascii(list_of_char)\n    return list_of_char\ndef is_string_present(list_of_char, string):\n    '''\n    Write a function to check if the list of characters is present in the second string.\n    '''\n    if string in list_of_char:\n        return True\n    else:\n        return False\ndef is_string_present_in_ascii(list_of_char, string):\n    '''\n    Write a function to check if the list of characters is present in the second string.\n    '''\n    if string in list_of_char:\n        return True\n    else:\n        return False\ndef ascii_value_to_char(list_of_char):\n    '''\n    Write a function to convert the list of ASCII values to the corresponding characters.\n    '''\n    list_of_char = ascii_value_to_char(list_of_char)\n    return list_of_char\ndef char_to_ascii_value(list_of_char):\n    '''\n    Write a function to convert the list of ASCII values to the corresponding characters.\n    '''\n    list_of_char = char_to_ascii_value(list_of_char)\n    return list_of_char\ndef substring(string, start, end):\n    '''\n    Write a function to return the substring from the start index upto the end index.\n    '''\n    sub_str = string[start:end]\n    return sub_str\ndef remove_substring(string, start, end):\n    '''\n    Write a function to return the substring from the start index upto the end index.\n    '''\n    return string[:start] + string[end:]\ndef find_substring(string, substring):\n    '''\n    Write a function to return the index of the substring.\n    '''\n    return string.find(substring)\ndef find_substring_in_ascii(string, substring):\n    '''\n    Write a function to return the index of the substring.\n    '''\n    return string.find(substring)\ndef replace_substring(string, start, end, new_substring):\n    '''\n    Write a function to replace the substring in the given string from the start index upto the end index with the new substring.\n    '''\n    return string[:start] + new_substring + string[end:]\ndef replace_substring_in_ascii(string, start, end, new_substring):\n    '''\n    Write a function to replace the substring in the given string from the start index upto the end index with the new substring.\n    '''\n    return string[:start] + new_substring + string[end:]\ndef first_non_repeating_char(string):\n    '''\n    Write a function to return the first non repeating character in the string.\n    '''\n    dict_of_char_and_freq = {}\n    for i in string:\n        if i in dict_of_char_and_freq:\n            dict_of_char_and_freq[i] += 1\n        else:\n            dict_of_char_and_freq[i] = 1\n    for i in string:\n        if dict_of_char_and_freq[i] == 1:\n            return i\n    return None\ndef first_non_repeating_char_in_ascii(string):\n    '''\n    Write a function to return the first non repeating character in the string.\n    '''\n    dict_of_char_and_freq = {}\n    for i in string:\n        if i in dict_of_char_and_freq:\n            dict_of_char_and_freq[i] += 1\n        else:\n            dict_of_char_and_freq[i] = 1\n    for i in string:\n        if dict_of_char_and_freq[i] == 1:\n            return i\n    return None\ndef count_repetition(string):\n    '''\n    Write a function to return the count of repetition of the string.\n    '''\n    dict_of_char_and_freq = {}\n    for i in string:\n        if i in dict_of_char_and_freq:\n            dict_of_char_and_freq[i] += 1\n        else:\n            dict_of_char_and_freq[i] = 1\n    count = 0\n    for i in string:\n        if dict_of_char_and_freq[i] > 1:\n            count += 1\n    return count\ndef count_repetition_in_ascii(string):\n    '''\n    Write a function to return the count of repetition of the string.\n    '''\n    dict_of_char_and_freq = {}\n    for i in string:\n        if i in dict_of_char_and_freq:\n            dict_of_char_and_freq[i] += 1\n        else:\n            dict_of_char_and_freq[i] = 1\n    count = 0\n    for i in string:\n        if dict_of_char_and_freq[i] > 1:\n            count += 1\n    return count\ndef count_unique_characters(string):\n    '''\n    Write a function to return the count of the unique characters in the string.\n    '''\n    unique_characters = []\n    for i in string:\n        if i in unique_characters:\n            pass\n        else:\n            unique_characters.append(i)\n    return len(unique_characters)\ndef count_unique_characters_in_ascii(string):\n    '''\n    Write a function to return the count of the unique characters in the string.\n    '''\n    unique_characters = []\n    for i in string:\n        if i in unique_characters:\n            pass\n        else:\n            unique_characters.append(i)\n    return len(unique_characters)\ndef unique_characters(string):\n    '''\n    Write a function to return the unique characters in the string.\n    '''\n    unique_characters = []\n    for i in string:\n        if i in unique_characters:\n            pass\n        else:\n            unique_characters.append(i)\n    return unique_characters\ndef unique_characters_in_ascii(string):\n    '''\n    Write a function to return the unique characters in the string.\n    '''\n    unique_characters = []\n    for i in string:\n        if i in unique_characters:\n            pass\n        else:\n            unique_characters.append(i)\n    return unique_characters\ndef sum_of_unique_characters(string):\n    '''\n    Write a function to return the sum of the unique characters in th"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for item in string:\n        if item not in list1:\n            list1.append(item)\n    for item in list1:\n        if item not in list2:\n            list2.append(item)\n    return list2\n    \ndef count_inversion(str1):\n    count = 0\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] > str1[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    ans = []\n    for i in range(0, len(string)):\n        if string[i] not in string[:i]:\n            ans.append(string[i])\n    return ans\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return [string]\n    l1 = []\n    for i in range(len(string)):\n        if string[i] not in string[:i]:\n            l1.append(string[i])\n    l2 = []\n    for i in range(len(l1)):\n        l2.append(l1[i])\n    l2.sort()\n    if len(l1) == len(l2):\n        return l2\n    for i in range(len(l1)):\n        l2.append(l1[i])\n    l2.sort()\n    return l2\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # write your code here\n    str1, str2 = string[0], string[1:]\n    return [str1] + list(str2)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [None]*len(string)\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i] == string[j] and i!= j:\n                break\n        if i == j:\n            list1[i] = string[i]\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for x in string:\n        if x not in list1:\n            list1.append(x)\n    return list1\ndef list_to_str(list1):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for x in list1:\n        string += x\n    return string\ndef is_alpha(c):\n    '''\n    Write a function to check whether a given string is alphabet or not.\n    '''\n    return (c >= 'a' and c <= 'z') or (c >= 'A' and c <= 'Z')\ndef is_digit(c):\n    '''\n    Write a function to check whether a given string is digit or not.\n    '''\n    return (c >= '0' and c <= '9')\ndef is_lower(c):\n    '''\n    Write a function to check whether a given string is lower or not.\n    '''\n    return (c >= 'a' and c <= 'z')\ndef is_upper(c):\n    '''\n    Write a function to check whether a given string is upper or not.\n    '''\n    return (c >= 'A' and c <= 'Z')\ndef is_punctuation(c):\n    '''\n    Write a function to check whether a given string is punctuation or not.\n    '''\n    return (c == '!') or (c == '?') or (c == ';') or (c == ':') or (c == ',')\ndef is_whitespace(c):\n    '''\n    Write a function to check whether a given string is whitespace or not.\n    '''\n    return (c =='') or (c == '\\t') or (c == '\\n')\ndef is_space(c):\n    '''\n    Write a function to check whether a given string is space or not.\n    '''\n    return (c =='') or (c == '\\t') or (c == '\\n')\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range_tuple(a,b):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b)\ndef is_in_range_tuple(a,b):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef get_chars_in_range(a,b):\n    '''\n    Write a function to get the characters of a string in a range.\n    '''\n    return chr(a) + chr(b)\ndef get_chars_in_range_tuple(a,b):\n    '''\n    Write a function to get the characters of a string in a range.\n    '''\n    return a,b\ndef get_chars_in_range_tuple(a,b):\n    '''\n    Write a function to get the characters of a string in a range.\n    '''\n    return a,b\ndef get_chars_in_range_tuple(a,b):\n    '''\n    Write a function to get the characters of a string in a range.\n    '''\n    return a,b\ndef get_chars_in_range(a,b):\n    '''\n    Write a function to get the characters of a string in a range.\n    '''\n    return a,b\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a,b,c):\n    '''\n    Write a function to check whether a given string is in range or not.\n    '''\n    return (a <= b) and (b <= c)\ndef is_in_range(a"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for j in string:\n        list2.append(j)\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    for i in list2:\n        print i\n        \nstr_to_list('HelloWorld')\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for j in range(len(list1)):\n        if list1[j] not in list2:\n            list2.append(list1[j])\n    return list2\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = []\n    str2 = []\n    for i in string:\n        str1.append(i)\n    for i in string:\n        if i not in str1:\n            str2.append(i)\n    return str2\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    d = {}\n    for x in arraynums:\n        if x in d:\n            return True\n        d[x] = 1\n    return False\n    \ndef test_duplicate_2():\n    array = [1,1,1,2,3,4,5]\n    print(test_duplicate(array))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    counts = dict()\n    for num in arraynums:\n        if num not in counts:\n            counts[num] = 1\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def contains_duplicate(array):\n        store = {}\n        for i in array:\n            if i in store.keys():\n                return True\n            store[i] = 1\n        return False\n    return contains_duplicate(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    dic = {}\n    for num in arraynums:\n        if num not in dic:\n            dic[num] = 1\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    else:\n        for i in range(0,len(arraynums)):\n            for j in range(0,len(arraynums)):\n                if i!= j and arraynums[i] == arraynums[j]:\n                    return True\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # loop through array\n    for i in arraynums:\n        # find current index\n        curr = arraynums.index(i)\n        # if duplicates exist, return true\n        if curr < len(arraynums)-1 and i == arraynums[curr+1]:\n            return True\n    # return false if no duplicates\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    s = set()\n    for i in arraynums:\n        if i in s:\n            return True\n        else:\n            s.add(i)\n    return False\n    \n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    def is_divisible(x, a, b, c):\n        if x == a or x == b or x == c:\n            return True\n        elif x % a == 0 or x % b == 0 or x % c == 0:\n            return True\n        return False\n    if is_divisible(x, 2, 3, 5):\n        return False\n    elif is_divisible(x, 3, 5, 7):\n        return False\n    elif is_divisible(x, 11, 13, 17):\n        return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(1, 11):\n        if x % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    return (x >= 1 and x <= 99) and all(int(str(x)[idx]) * 2 == int(str(x)[idx-1]) + int(str(x)[idx+1]) for idx in range(1,len(str(x))))\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import re\n    return re.search(\"(13|15|17|19|21|23|25|27|29|31|33|35|37|39|41|43|45|47|49|51|53|55|57|59|61|63|65|67|69|71|73|75|77|79|81|83|85|87|89|91|93|95|97|99)\", x)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    l1=list(str(x))\n    l2=list(str(x))\n    l3=list(str(x))\n    for i in l1:\n        if i=='6':\n            l1.remove(i)\n    for i in l2:\n        if i=='9':\n            l2.remove(i)\n    for i in l3:\n        if i=='0':\n            l3.remove(i)\n    if l1==l2==l3:\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x)) == 6 and str(x)[0] == str(x)[1] and str(x)[1] == str(x)[2] and str(x)[2] == str(x)[3] and str(x)[3] == str(x)[4] and str(x)[4] == str(x)[5]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x == \"woodball\"):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    a = set(str(x))\n    if len(a)==6:\n        b = set(['0','1','2','3','4','5','6','7','8','9'])\n        return (set(str(x)) & b) == b\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if len(str(x)) == 6:\n        if (str(x)[0:3] == '318') or (str(x)[0:3] == '979') or (str(x)[0:3] == '389'):\n            return True\n    elif len(str(x)) == 7:\n        if (str(x)[0:2] == '30') or (str(x)[0:2] == '31') or (str(x)[0:2] == '32') or (str(x)[0:2] == '33') or (str(x)[0:2] == '34') or (str(x)[0:2] == '35') or (str(x)[0:2] == '36') or (str(x)[0:2] == '37') or (str(x)[0:2] == '38') or (str(x)[0:2] == '39'):\n            return True\n    elif len(str(x)) == 8:\n        if (str(x)[0:3] == '148') or (str(x)[0:3] == '039') or (str(x)[0:3] == '310') or (str(x)[0:3] == '281') or (str(x)[0:3] == '376') or (str(x)[0:3] == '679') or (str(x)[0:3] == '749') or (str(x)[0:3] == '800') or (str(x)[0:3] == '939') or (str(x)[0:3] == '988') or (str(x)[0:3] == '979') or (str(x)[0:3] == '980') or (str(x)[0:3] == '981') or (str(x)[0:3] == '982') or (str(x)[0:3] == '983') or (str(x)[0:3] == '984') or (str(x)[0:3] == '985') or (str(x)[0:3] == '986'):\n            return True\n    elif len(str(x)) == 9:\n        if (str(x)[0:2] == '37') or (str(x)[0:2] == '38') or (str(x)[0:2] == '39'):\n            return True\n    elif len(str(x)) == 10:\n        if (str(x)[0:2] == '32') or (str(x)[0:2] == '36'):\n            return True\n    elif len(str(x)) == 11:\n        if (str(x)[0:3] == '3185') or (str(x)[0:3] == '3190') or (str(x)[0:3] == '3195') or (str(x)[0:3] == '3200') or (str(x)[0:3] == '3236') or (str(x)[0:3] == '3235') or (str(x)[0:3] == '3240') or (str(x)[0:3] == '3245') or (str(x)[0:3] == '3290') or (str(x)[0:3] == '3285') or (str(x)[0:3] == '3296') or (str(x)[0:3] == '3289') or (str(x)[0:3] == '3297') or (str(x)[0:3] == '3298') or (str(x)[0:3] == '3299') or (str(x)[0:3] == '3300') or (str(x)[0:3] == '3301') or (str(x)[0:3] == '3302') or (str(x)[0:3] == '3303') or (str(x)[0:3] == '3304') or (str(x)[0:3] == '3305') or (str(x)[0:3] == '3306') or (str(x)[0:3] == '3307') or (str(x)[0:3] == '3308') or (str(x)[0:3] == '3309') or (str(x)[0:3] == '330A') or (str(x)[0:3] == '330B') or (str(x)[0:3] == '330C') or (str(x)[0:3] == '330D') or (str(x)[0:3] == '330E') or (str(x)[0:3] == '330F') or (str(x)[0:3] == '3310') or (str(x)[0:3] == '3311') or (str(x)[0:3] == '3312') or (str(x)[0:3] == '3313') or (str(x)[0:3] == '3314') or (str(x)[0:3] == '3315') or (str(x)[0:3] == '3316') or (str(x)[0:3] == '3317') or (str(x)[0:3] == '3318') or (str(x)[0:3] == '3319') or (str(x)[0:3] == '3320') or (str(x)[0:3] == '3321') or (str(x)[0:3] == '3322') or (str(x)[0:3] == '3323') or (str(x)[0:3] == '3324') or (str(x)[0:3] == '3325') or (str(x)[0:3] == '3326') or (str(x)[0:3] == '3327') or (str(x)[0:3] == '3328') or (str(x)[0:3] == '3329') or (str(x)[0:3] == '333A') or (str(x)[0:3] == '333B') or (str(x)[0:3] == '333C') or (str(x)[0:3] == '333D') or (str(x)[0:3] == '333E') or (str(x)[0:3] == '333F') or (str(x)[0:3] == '3330') or (str(x)[0:3] == '3331') or (str(x)[0:3] == '3332') or (str(x)[0:3] == '3333') or (str(x)[0:3] == '3334') or (str(x)[0:3] == '3335') or (str(x)[0:3] == '3336') or (str(x)[0:3] == '3337') or (str(x)[0:3] == '3338') or (str(x)[0:3] == '3339') or (str(x)[0:3] == '333A') or (str(x)[0:3] == '333B') or (str(x)[0:3] == '333C') or (str(x)[0:3] == '333D') or (str(x)[0:3] == '333E') or (str(x)[0:3] == '333F'):\n            return True\n    elif len(str(x)) == 12:\n        if (str(x)[0:2] == '3185') or (str(x)[0:2] == '3190') or (str(x)[0:2] == '3195') or (str(x)[0:2] == '3200') or (str(x)[0:2] == '3236') or (str(x)[0:2] == '3235') or (str(x)[0:2] == '3240') or (str(x)[0:2] == '3245') or (str(x)[0:2] == '3290') or (str(x)[0:2] == '3285') or (str(x)[0:2] == '3296') or (str(x)[0:2] == '3289') or (str(x)[0:2] == '3297') or (str(x)[0:2] == '3298') or (str(x)[0:2] == '3299') or (str(x)[0:2] == '3300') or (str(x)[0:2] == '3301') or (str(x)[0:2] == '3302'"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x))==1: \n        return False\n    elif len(str(x))>1:\n        if int(str(x)[0])*len(str(x))==x: \n            return True\n        else: \n            return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_rev = 0\n    while (num>0):\n        dig = num%10\n        num_rev = num_rev*10 + dig\n        num = num/10\n    return num_rev == (num_rev*2) - 1\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == (int(str(num)[::-1]) * 2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return False\n    elif num == 1:\n        return True\n    else:\n        if (num % 10) == (num // 10) % 10:\n            return True\n        else:\n            return False\ndef isPalindrome(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False\ndef swap(num1, num2):\n    '''\n    Write a python function to swap two numbers.\n    '''\n    return num2, num1\ndef rotate(num1, num2):\n    '''\n    Write a python function to rotate a number by k digits\n    '''\n    if len(str(num1)) == len(str(num2)):\n        return num2\n    elif len(str(num1)) < len(str(num2)):\n        count = len(str(num2)) - len(str(num1))\n        count = count * count\n        return int(str(num1 * count) + str(num2))\n    else:\n        count = len(str(num1)) - len(str(num2))\n        count = count * count\n        return int(str(num2 * count) + str(num1))\ndef is_pandigital(num):\n    '''\n    Write a python function to check if a given number is a pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '1234567890':\n        return True\n    else:\n        return False\ndef is_super_pandigital(num):\n    '''\n    Write a python function to check if a given number is a super pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '123456789123456789':\n        return True\n    else:\n        return False\ndef is_super_pandigital(num):\n    '''\n    Write a python function to check if a given number is a super pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '123456789123456789':\n        return True\n    else:\n        return False\ndef is_pandigital(num):\n    '''\n    Write a python function to check if a given number is a pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '1234567890':\n        return True\n    else:\n        return False\ndef is_super_pandigital(num):\n    '''\n    Write a python function to check if a given number is a super pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '123456789123456789':\n        return True\n    else:\n        return False\ndef is_pandigital(num):\n    '''\n    Write a python function to check if a given number is a pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '1234567890':\n        return True\n    else:\n        return False\ndef is_super_pandigital(num):\n    '''\n    Write a python function to check if a given number is a super pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '123456789123456789':\n        return True\n    else:\n        return False\ndef is_pandigital(num):\n    '''\n    Write a python function to check if a given number is a pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '1234567890':\n        return True\n    else:\n        return False\ndef is_super_pandigital(num):\n    '''\n    Write a python function to check if a given number is a super pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '123456789123456789':\n        return True\n    else:\n        return False\ndef is_pandigital(num):\n    '''\n    Write a python function to check if a given number is a pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '1234567890':\n        return True\n    else:\n        return False\ndef is_super_pandigital(num):\n    '''\n    Write a python function to check if a given number is a super pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '123456789123456789':\n        return True\n    else:\n        return False\ndef is_pandigital(num):\n    '''\n    Write a python function to check if a given number is a pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '1234567890':\n        return True\n    else:\n        return False\ndef is_super_pandigital(num):\n    '''\n    Write a python function to check if a given number is a super pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '123456789123456789':\n        return True\n    else:\n        return False\ndef is_pandigital(num):\n    '''\n    Write a python function to check if a given number is a pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '1234567890':\n        return True\n    else:\n        return False\ndef is_super_pandigital(num):\n    '''\n    Write a python function to check if a given number is a super pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '123456789123456789':\n        return True\n    else:\n        return False\ndef is_pandigital(num):\n    '''\n    Write a python function to check if a given number is a pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '1234567890':\n        return True\n    else:\n        return False\ndef is_super_pandigital(num):\n    '''\n    Write a python function to check if a given number is a super pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '123456789123456789':\n        return True\n    else:\n        return False\ndef is_pandigital(num):\n    '''\n    Write a python function to check if a given number is a pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '1234567890':\n        return True\n    else:\n        return False\ndef is_super_pandigital(num):\n    '''\n    Write a python function to check if a given number is a super pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '123456789123456789':\n        return True\n    else:\n        return False\ndef is_pandigital(num):\n    '''\n    Write a python function to check if a given number is a pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '1234567890':\n        return True\n    else:\n        return False\ndef is_super_pandigital(num):\n    '''\n    Write a python function to check if a given number is a super pandigital number\n    '''\n    num = str(num)\n    if ''.join(sorted(num)) == '123456789123456789':\n        return True\n    else:\n        return False\ndef is_pandigital(num):\n    '''\n    Writ"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = (rev * 10) + (num % 10)\n        num = num // 10\n    return rev\n    \ndef is_palindrome(num):\n    return num == rev(num)\n    \ndef main():\n    pal = 0\n    for i in range(1,1000000):\n        if is_palindrome(i) and is_palindrome(rev(i)):\n            pal += i\n    print(pal)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==int(str(num)[::-1])-2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #base case \n    if num == 0:\n        return 1\n    #if num is less than 0, then it is a sign of negation\n    elif num < 0:\n        return 0\n    elif num % 10 == 0:\n        return 0\n    else:\n        return 1 + (rev(num/10)*10)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1]) - 2\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num:\n        rev_num *= 10\n        rev_num += num%10\n        num //= 10\n    return (rev_num == (num*2))\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 2*int(str(num)[::-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if not arr : \n        return\n    elif len(arr) == 1 : \n        return arr[0]\n    else : \n        a = arr[0]\n        b = arr[1]\n        if a > b : \n            return a\n        else : \n            return b\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    res = 0\n    for ele in arr:\n        if ele > res:\n            res = ele\n    return res\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr == [] :\n        return 0\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in arr[1:] : \n        if i > max_num : \n            max_num = i\n    return max_num \n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n=len(arr)\n    if n==0 :\n        return 0\n    res=0\n    for i in range(1,n) :\n        res=max(res,arr[i]*arr[i-1])\n    return res\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def helper(arr, res, i, n):\n        if i >= n:\n            res.append(arr)\n            return\n        if arr[i] == '0':\n            helper(arr, res, i+1, n)\n        else:\n            helper(arr, res, i+1, n)\n            helper(arr, res, i+1, n)\n    res = []\n    helper(arr, res, 0, len(arr))\n    return res\ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    def helper(n, i, x):\n        if i == x:\n            return True\n        if n % i == 0:\n            return False\n        return helper(n, i+1, x)\n    return helper(n, 1, n//2)\ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    s = 0\n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\ndef find_Sum_of_Divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of a given number.\n    '''\n    res = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            res += i\n        i += 1\n    return res\ndef distinct_Prime_Factors(n) : \n    '''\n    Write a python function to find the distinct prime factors of a given number.\n    '''\n    res = []\n    def helper(n, res, x):\n        if n % x == 0:\n            if x not in res:\n                res.append(x)\n            helper(n, res, x)\n    helper(n, res, 2)\n    return len(res)\ndef Factorial(n) : \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    res = 1\n    for i in range(1, n+1):\n        res = res * i\n    return res\ndef fibonacci(n) : \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\ndef reverse(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    res = 0\n    while n > 0:\n        res = res * 10 + n % 10\n        n //= 10\n    return res\ndef find_Multiply_Sum_of_Digits(n) : \n    '''\n    Write a python function to find the sum of multiply of the digits of a given number.\n    '''\n    res = 0\n    while n > 0:\n        res += n % 10\n        n //= 10\n    return res\ndef Power(n) : \n    '''\n    Write a python function to find the power of a number.\n    '''\n    return n**2\ndef Permutation(n) : \n    '''\n    Write a python function to find the permutation of a given number.\n    '''\n    return pow(n, n, 1000000007)\ndef Product(n) : \n    '''\n    Write a python function to find the product of all the digits of a given number.\n    '''\n    res = 1\n    while n > 0:\n        res *= n % 10\n        n //= 10\n    return res\ndef Alternate_Permutation(n) : \n    '''\n    Write a python function to find the alternate permutation of a given number.\n    '''\n    res = 0\n    while n > 0:\n        res += (n % 10) * pow(2, n - 1, 1000000007)\n        n //= 10\n    return res\ndef Is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    return n == reverse(n)\ndef Fractional_Part(n) : \n    '''\n    Write a python function to find the fractional part of a given number.\n    '''\n    res = 0\n    for i in range(1, n):\n        if n % i == 0:\n            res += i\n    return n - res\ndef Ceil_Divide(n, x) : \n    '''\n    Write a python function to find the ceiling division of two numbers.\n    '''\n    res = 0\n    while n % x == 0:\n        res += 1\n        n //= x\n    return res\ndef GCD(n, x) : \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if x == 0:\n        return n\n    return GCD(x, n % x)\ndef LCM(n, x) : \n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if x == 0:\n        return n\n    return (n // GCD(n, x)) * x\ndef is_Equivalent(n, m) : \n    '''\n    Write a python function to check whether the two given numbers are equivalent or not.\n    '''\n    return GCD(n, m) == 1\ndef is_Krishnamurthy(n) : \n    '''\n    Write a python function to check whether the given number is krishnamurthy or not.\n    '''\n    n = n % 10\n    if n == 0 or n == 5 or n == 6 or n == 7 or n == 8:\n        return False\n    return n % 2 == 0\ndef is_Strongly_Equal(n) : \n    '''\n    Write a python function to check whether the two given numbers are strongly equal or not.\n    '''\n    return n == pow(n, 2, 1000000007)\ndef Binary_Search(l, x) : \n    '''\n    Write a python function to find the index of a given number in a sorted list using binary search.\n    '''\n    start = 0\n    end = len(l) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if x == l[mid]:\n            return mid\n        if x < l[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\ndef Palindrome_Recursive(s) : \n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    return s[0] == s[-1] and Palindrome_Recursive(s[1:-1])\ndef Power_Recursive(n, x) : \n    '''\n    Write a python function to find the power of a number using recursion.\n    '''\n    if x == 0:\n        return 1\n    return n * Power_Recursive(n, x - 1)\ndef Power_Iterative(n, x) : \n    '''\n    Write a python function to find the power of a number using iteration.\n    '''\n    res = 1\n    while x > 0:\n        res *= n\n        x -= 1\n    return res\ndef Product_of_Array_Except_Self(n) : \n    '''\n    Write a python function to find the product of the elements of a given array except the array's self.\n    '''\n    res = 1\n    for i in range(0, len(n)):\n        res *= n[i]\n    return res\ndef Difference_of_Arrays(n, m) : \n    '''\n    Write a python function to find the difference between the largest and smallest number in the given array.\n    '''\n    return max(n) - min(m)\ndef Sum_of_Reverse_Numbers(n) : \n    '''\n    Write a python function to find the sum of the digits of a given number reversed.\n    '''\n    res = 0\n    while n > 0:\n        res += n % 10\n        n //= 10\n    return res\ndef Power"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n    \n    \ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[0]\n    \ndef count_Unique(arr) : \n    '''\n    Write a python function to count the number of unique elements in a given array.\n    '''\n    return len(list(set(arr)))\n    \n    \ndef find_Largest_Sub(arr,start,end) : \n    '''\n    Write a python function to find the largest contiguous subarray sum in the given array.\n    '''\n    if start == end :\n        return arr[start]\n    else :\n        max_sum = arr[start]\n        for i in range(start+1,end) :\n            if max_sum > arr[i] + arr[start] :\n                max_sum = arr[i] + arr[start]\n        return max_sum\n        \ndef find_Smallest_Sub(arr,start,end) : \n    '''\n    Write a python function to find the smallest contiguous subarray sum in the given array.\n    '''\n    if start == end :\n        return arr[start]\n    else :\n        min_sum = arr[start]\n        for i in range(start+1,end) :\n            if min_sum > arr[i] + arr[start] :\n                min_sum = arr[i] + arr[start]\n        return min_sum\n        \ndef sort_by_length(arr) : \n    '''\n    Write a python function to sort the given array by the number of characters.\n    '''\n    arr.sort(key = lambda x : len(x))\n    return arr\n    \ndef sort_by_length2(arr) : \n    '''\n    Write a python function to sort the given array by the number of characters.\n    '''\n    return sorted(arr,key = lambda x : len(x))\n    \ndef get_largest_element(arr) : \n    '''\n    Write a python function to get the largest element in the given array.\n    '''\n    return max(arr)\n    \ndef get_smallest_element(arr) : \n    '''\n    Write a python function to get the smallest element in the given array.\n    '''\n    return min(arr)\n    \ndef reverse_string(string) : \n    '''\n    Write a python function to reverse the given string.\n    '''\n    return string[::-1]\n    \ndef reverse_string2(string) : \n    '''\n    Write a python function to reverse the given string.\n    '''\n    return ''.join(reversed(string))\n    \ndef is_anagram(str1,str2) : \n    '''\n    Write a python function to check whether the two strings are anagram or not.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef is_anagram2(str1,str2) : \n    '''\n    Write a python function to check whether the two strings are anagram or not.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef is_palindrome(string) : \n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return string[::-1] == string\n    \ndef is_palindrome2(string) : \n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return string[::-1] == string\n    \ndef rotate_matrix(matrix) : \n    '''\n    Write a python function to rotate the given matrix by 90 degrees.\n    '''\n    return list(zip(*matrix[::-1]))\n    \ndef rotate_matrix2(matrix) : \n    '''\n    Write a python function to rotate the given matrix by 90 degrees.\n    '''\n    return [list(reversed(x)) for x in zip(*matrix)]\n    \ndef rotate_matrix3(matrix) : \n    '''\n    Write a python function to rotate the given matrix by 90 degrees.\n    '''\n    result = []\n    for i in range(len(matrix)) :\n        for j in range(i,len(matrix)) :\n            result.append(matrix[j][i])\n    return result\n    \ndef rotate_matrix4(matrix) : \n    '''\n    Write a python function to rotate the given matrix by 90 degrees.\n    '''\n    return list(zip(*matrix[::-1]))[::-1]\n    \ndef rotate_matrix5(matrix) : \n    '''\n    Write a python function to rotate the given matrix by 90 degrees.\n    '''\n    return [list(reversed(x)) for x in zip(*matrix)][::-1]\n    \ndef rotate_matrix6(matrix) : \n    '''\n    Write a python function to rotate the given matrix by 90 degrees.\n    '''\n    result = []\n    for i in range(len(matrix)) :\n        for j in range(len(matrix[i])) :\n            result.append(matrix[len(matrix)-1-j][i])\n    return result\n    \ndef rotate_matrix7(matrix) : \n    '''\n    Write a python function to rotate the given matrix by 90 degrees.\n    '''\n    return list(zip(*matrix[::-1]))[::-1]\n    \ndef rotate_matrix8(matrix) : \n    '''\n    Write a python function to rotate the given matrix by 90 degrees.\n    '''\n    return [list(reversed(x)) for x in zip(*matrix)]\n    \ndef rotate_matrix9(matrix) : \n    '''\n    Write a python function to rotate the given matrix by 90 degrees.\n    '''\n    return [list(reversed(x)) for x in zip(*matrix[::-1])]\n    \ndef sort_by_vowels(string) : \n    '''\n    Write a python function to sort the given string by the number of vowels.\n    '''\n    return sorted(string,key = lambda x : len(re.findall('[aeiou]',x)))\n    \ndef sort_by_vowels2(string) : \n    '''\n    Write a python function to sort the given string by the number of vowels.\n    '''\n    vowels = 'aeiou'\n    return sorted(string,key = lambda x : sum(c in vowels for c in x))\n    \ndef find_all_substrings(string,substring) : \n    '''\n    Write a python function to find all the substrings in the given string.\n    '''\n    return [x[0:i] + x[i+1:] for i in range(len(string)) for x in [string[0:i],string[i+1:]] if substring in x]\n    \ndef find_all_substrings2(string,substring) : \n    '''\n    Write a python function to find all the substrings in the given string.\n    '''\n    return list(map(lambda x : x + substring,filter(lambda x : substring in x,string)))\n    \ndef find_all_substrings3(string,substring) : \n    '''\n    Write a python function to find all the substrings in the given string.\n    '''\n    return [x for x in range(len(string)-len(substring)+1) if string[x:x+len(substring)] == substring]\n    \ndef find_all_substrings4(string,substring) : \n    '''\n    Write a python function to find all the substrings in the given string.\n    '''\n    return list(map(lambda x : x + substring,filter(lambda x : substring in x,string)))\n    \ndef find_all_substrings5(string,substring) : \n    '''\n    Write a python function to find all the substrings in the given string.\n    '''\n    return [string[x:x+len(substring)] for "
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse = True)\n    return arr[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Your code here\n    \n    n=len(arr)\n    res=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=0:\n                res=max(res,arr[i]*arr[j])\n    return res\n    \ndef find_max_sub_array(arr):\n    '''\n    Write a python function to find the contiguous subarray within an array (containing at least one number) \n    which has the largest product.\n    '''\n    # Your code here\n    arr = [3, 0, -2, 0, -3, 2, 0]\n    res = 0\n    for i in range(len(arr)):\n        res = max(res, arr[i])\n        if res*arr[i]<0:\n            res=0\n    return res\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -999999999\n    for i in range(len(arr)) : \n        for j in range(len(arr)) : \n            if arr[i] == 0 or arr[j] == 0 : \n                continue \n            \n            temp = int(arr[i]) * int(arr[j])\n            if temp > max_num : \n                max_num = temp \n            \n    return max_num \n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y >= 0) or (x >= 0 and y < 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # if x<0 and y<0:\n    #     print True\n    # else:\n    #     print False\n    return x<0 and y<0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\ndef right_Trangle(a,b,c):\n    '''\n    Write a python function to check whether the given three integers are Right angled or not.\n    '''\n    opposite_Signs(a,b)\n    opposite_Signs(a,c)\n    opposite_Signs(b,c)\n    return ((a*a+b*b==c*c) or (b*b+c*c==a*a) or (a*a+c*c==b*b))\ndef same_Side(a,b,c):\n    '''\n    Write a python function to check whether three integers have same sides or not.\n    '''\n    return ((a*a+b*b==c*c) or (b*b+c*c==a*a) or (a*a+c*c==b*b))\ndef is_Pentagonal(n):\n    '''\n    Write a python function to check whether the given number is a pentagonal number or not.\n    '''\n    return (((3*n*n-2*n)/2==n*n) or ((3*n*n-n)/2==n*n))\ndef is_Hexagonal(n):\n    '''\n    Write a python function to check whether the given number is a hexagonal number or not.\n    '''\n    return (((2*n*n-n)/2==n*n) or ((2*n*n-2*n)/2==n*n))\ndef is_Hexagonal_Alternative(n):\n    '''\n    Write a python function to check whether the given number is a hexagonal number or not.\n    '''\n    return (((n*n-n)/2==n*n) or ((n*n-2*n)/2==n*n))\ndef is_Triangular(n):\n    '''\n    Write a python function to check whether the given number is a triangular number or not.\n    '''\n    return ((n*(n+1))/2==n*(n+1))\ndef is_Quadratic(a,b,c):\n    '''\n    Write a python function to check whether the given three integers are a quadratic number or not.\n    '''\n    opposite_Signs(a,b)\n    opposite_Signs(a,c)\n    opposite_Signs(b,c)\n    return ((a*a+b*b==c*c) or (b*b+c*c==a*a) or (a*a+c*c==b*b))\ndef check_isPrime(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_Prime(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_Permuted(a,b):\n    '''\n    Write a python function to check whether the given two strings are Permuted or not.\n    '''\n    for i in a:\n        if i not in b:\n            return False\n    for i in b:\n        if i not in a:\n            return False\n    return True\ndef is_Palindrome(s):\n    '''\n    Write a python function to check whether the given string is a Palindrome or not.\n    '''\n    for i in range(len(s)):\n        if s[i]!=s[len(s)-i-1]:\n            return False\n    return True\ndef is_Strobogrammatic(n):\n    '''\n    Write a python function to check whether the given number is a Strobogrammatic number or not.\n    '''\n    s=n\n    n=str(n)\n    if n==n[::-1]:\n        return True\n    if n[0]=='0' and len(n)>1:\n        return False\n    if n[-1]=='0' and len(n)>1:\n        return False\n    a=''\n    b=''\n    for i in range(len(n)):\n        a+=n[i]\n        b+=n[len(n)-i-1]\n    if a==s or b==s:\n        return True\n    return False\ndef is_Binary(n):\n    '''\n    Write a python function to check whether the given number is a binary number or not.\n    '''\n    return len(bin(n))-2==len(str(n))\ndef is_Strictly_Decreasing(a,b,c):\n    '''\n    Write a python function to check whether the given three numbers are Strictly Decreasing or not.\n    '''\n    return a<b<c\ndef is_Strictly_Increasing(a,b,c):\n    '''\n    Write a python function to check whether the given three numbers are Strictly Increasing or not.\n    '''\n    return a>b>c\ndef is_Rectangle(a,b,c):\n    '''\n    Write a python function to check whether the given three numbers are Rectangles or not.\n    '''\n    return (a==b and b==c) or (a==c and b==a) or (b==c and a==b)\ndef is_Triangle(a,b,c):\n    '''\n    Write a python function to check whether the given three numbers are Triangle or not.\n    '''\n    return (a+b>c) and (a+c>b) and (b+c>a)\ndef is_Pentagonal_Triangle(a,b,c):\n    '''\n    Write a python function to check whether the given three numbers are a Pentagonal or Triangle or not.\n    '''\n    return (is_Pentagonal(a) and is_Pentagonal(b) and is_Pentagonal(c)) or (is_Triangle(a,b,c))\ndef is_Hexagonal_Triangle(a,b,c):\n    '''\n    Write a python function to check whether the given three numbers are a Hexagonal or Triangle or not.\n    '''\n    return (is_Hexagonal(a) and is_Hexagonal(b) and is_Hexagonal(c)) or (is_Triangle(a,b,c))\ndef is_Pentagonal_Pentagon(a,b,c):\n    '''\n    Write a python function to check whether the given three numbers are a Pentagonal or Pentagonal or not.\n    '''\n    return (is_Pentagonal(a) and is_Pentagonal(b) and is_Pentagonal(c)) or (is_Pentagonal_Triangle(a,b,c))\ndef is_Hexagonal_Pentagonal_Triangle(a,b,c):\n    '''\n    Write a python function to check whether the given three numbers are a Hexagonal or Pentagonal or Triangle or not.\n    '''\n    return (is_Hexagonal(a) and is_Pentagonal(b) and is_Pentagonal(c)) or (is_Hexagonal_Triangle(a,b,c))\ndef is_Hexagonal_Hexagonal(a,b,c):\n    '''\n    Write a python function to check whether the given three numbers are a Hexagonal or Hexagonal or not.\n    '''\n    return (is_Hexagonal(a) and is_Hexagonal(b) and is_Hexagonal(c)) or (is_Hexagonal_Triangle(a,b,c))\ndef is_Right_Angled_Triangle(a,b,c):\n    '''\n    Write a python function to check whether the given three numbers are a Right Angled Triangle or not.\n    '''\n    return (is_Pentagonal(a) and is_Pentagonal(b) and is_Pentagonal(c)) or (is_Triangle(a,b,c))\ndef is_Right_Angled_Pentagon(a,b,c):\n    '''\n    Write a python function to check whethe"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        print \"False\"\n    elif x<0 and y>0:\n        print \"True\"\n    else:\n        print \"Neither\"\nopposite_Signs(3,4)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y >= 0:\n        return True\n    if x > 0 and y <= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y<0) or (x>0 and y>0)\n    \ndef to_add_next_digit(x): \n    '''\n    Write a python function to return the next digit of the given integer.\n    '''\n    return int(str(x)[0]) + int(str(x)[1])\n    \ndef can_we_afford_this_sum(arr1,arr2):\n    '''\n    Write a python function to check whether the sum of given two arrays can be formed from the digits of the two arrays.\n    '''\n    arr1.sort()\n    arr2.sort()\n    \n    for i in arr1:\n        if not opposite_Signs(i,arr2[0]):\n            return False\n        \n        arr2 = [to_add_next_digit(arr2[0])] + arr2[1:]\n        \n    return True\n    \ndef test_can_we_afford_this_sum():\n    assert can_we_afford_this_sum([3,5,6],[7,8,9]) == True\n    assert can_we_afford_this_sum([5,7,9],[7,8,9]) == True\n    assert can_we_afford_this_sum([5,7,9],[7,8,9,1]) == False\n    assert can_we_afford_this_sum([5,7,9],[7,8,9,1,4,6]) == True\n    assert can_we_afford_this_sum([5,7,9],[1,8,9,4,6]) == False\n    \n    \ndef string_contains_str(string,substring):\n    '''\n    Write a python function to check whether the given string contains the substring.\n    '''\n    return substring in string\n    \ndef string_contains_str_as_array(string,substring_arr):\n    '''\n    Write a python function to check whether the given string contains the substring as an array.\n    '''\n    for substring in substring_arr:\n        if not string_contains_str(string,substring):\n            return False\n    return True\n    \ndef test_string_contains_str():\n    assert string_contains_str('hello world','world') == True\n    assert string_contains_str('hello world','x') == False\n    assert string_contains_str('','x') == False\n    assert string_contains_str('hello world','x ') == False\n    assert string_contains_str('hello world','x') == False\n    assert string_contains_str('hello','x') == False\n    \ndef get_even_substrings(string):\n    '''\n    Write a python function to return the even substrings of the given string.\n    '''\n    return [string[i:i+2] for i in range(0,len(string),2)]\n    \ndef test_get_even_substrings():\n    assert get_even_substrings('abcd') == ['ab','cd']\n    assert get_even_substrings('abca') == ['ab','cd']\n    assert get_even_substrings('abcdabc') == ['abcd','abc']\n    assert get_even_substrings('abcdabcdabc') == ['abcd','abc']\n    assert get_even_substrings('abcdabca') == ['abcd','abc']\n    \ndef get_all_even_substrings(string):\n    '''\n    Write a python function to return the all even substrings of the given string.\n    '''\n    return [string[i:i+2] for i in range(0,len(string),2) if i%2==0]\n    \ndef test_get_all_even_substrings():\n    assert get_all_even_substrings('abcd') == ['ab','cd']\n    assert get_all_even_substrings('abca') == ['ab','cd']\n    assert get_all_even_substrings('abcdabcdabc') == ['abcd','abc']\n    assert get_all_even_substrings('abcdabca') == ['abcd','abc']\n    assert get_all_even_substrings('abcdabca') == ['abcd','abc']\n    \ndef get_all_even_substrings_as_array(string):\n    '''\n    Write a python function to return the all even substrings of the given string as an array.\n    '''\n    return [string[i:i+2] for i in range(0,len(string),2) if i%2==0]\n    \ndef test_get_all_even_substrings():\n    assert get_all_even_substrings_as_array('abcd') == ['ab','cd']\n    assert get_all_even_substrings_as_array('abca') == ['ab','cd']\n    assert get_all_even_substrings_as_array('abcdabcdabc') == ['abcd','abc']\n    assert get_all_even_substrings_as_array('abcdabca') == ['abcd','abc']\n    assert get_all_even_substrings_as_array('abcdabca') == ['abcd','abc']\n    \ndef all_equal_to_substring(arr,substring):\n    '''\n    Write a python function to check whether all the elements of the given array are equal to the given substring.\n    '''\n    return all(substring == arr[i] for i in range(len(arr)))\n    \ndef test_all_equal_to_substring():\n    assert all_equal_to_substring([1,2,3,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],1) == True\n    assert all_equal_to_substring([1,2,3,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],5) == False\n    assert all_equal_to_substring([1,2,3,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],1) == True\n    assert all_equal_to_substring([1,2,3,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],1) == True\n    assert all_equal_to_substring([1,2,3,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],1) == True\n    assert all_equal_to_substring([1,2,3,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],1) == True\n    assert all_equal_to_substring([1,2,3,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],5) == False\n    \ndef test_all_equal_to_substring():\n    assert all_equal_to_substring_as_array([1,2,3,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n    \ndef transform(x,y):\n    '''\n    Write a python function to calculate the transformed coordinate of two input coordinates\n    using (x-y)^2 = (x+y)^2 + 2xy\n    '''\n    return (x+y)**2 + 2*(x*y)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y>0) or (x<0 and y<0):\n        return True\n    else:\n        return False\n    \n    \ndef armstrong_number(x):\n    '''\n    Write a python function to check whether the given number is an armstrong number or not.\n    '''\n    number_of_digits = len(str(x))\n    temp = x\n    sum = 0\n    while temp > 0:\n        rem = temp % 10\n        sum = sum + rem**number_of_digits\n        temp = temp / 10\n    if x == sum:\n        return True\n    else:\n        return False\n    \ndef sum_of_digits(x):\n    '''\n    Write a python function to compute the sum of the digits of the given number.\n    '''\n    number_of_digits = len(str(x))\n    temp = x\n    sum = 0\n    while temp > 0:\n        rem = temp % 10\n        sum = sum + rem\n        temp = temp / 10\n    return sum\n    \ndef get_factors(x):\n    '''\n    Write a python function to compute all the factors of a given number.\n    '''\n    number_of_digits = len(str(x))\n    temp = x\n    factors = []\n    for i in range(1,temp+1):\n        if temp%i == 0:\n            factors.append(i)\n    return factors\n    \ndef check_perfect_square(x):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    temp = x\n    if temp < 0:\n        return False\n    while temp > 0:\n        temp = temp / 10\n        if temp == 1:\n            return True\n    return False\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    result = 1\n    a = 1\n    while a < n:\n        result += 1\n        a += 1\n    return result * "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 1\n    while(True):\n        nth_octagon = count*(3*count-1)//2\n        if n == nth_octagon:\n            return True\n        elif n < nth_octagon:\n            return False\n        count += 1\n        \ndef is_sosu(n):\n    '''\n    Write a function to find all primes less than n\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (n + 1) * (2 * n + 1)) / 6\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    return (n**2 - (n-1)**2) // 2 == n**2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    sq_root = int(n ** 0.5)\n    return n**2 + sq_root**2 == 2*sq_root*(sq_root + 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = (n ** 2 + n) / 2\n    return x == int(x)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    total = 0\n    total = total + (n*(n*n-1)/2)\n    return total\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct = [1]\n    while len(oct) < n:\n        oct += [sum(oct[-3:])]\n    return oct[n-1]\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in xrange(len(s)):\n        for j in xrange(len(s)-i+1):\n            if sum([int(a) for a in s[j:j+j+1]]) == j+1:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    D = defaultdict(int)\n    for i in xrange(len(s)):\n        D[s[i]] += 1\n    count = 0\n    for i in xrange(len(s)):\n        if (D[i] * i) == len(s):\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    c = 0\n    for i in xrange(n):\n        for j in xrange(i,n):\n            l = len(s[i:j+1])\n            if l==j-i+1:\n                if s[i:j+1].isdigit():\n                    c+=1\n    return c\ndef count_Sum_Digits(n):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    def helper(n,s):\n        if n==0:\n            d[s]+=1\n        else:\n            helper(n-1,s)\n            helper(n-1,s+n%10)\n    helper(n,0)\n    return d\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i,n):\n            ans+=1 if sum([int(i) for i in s[i:j+1]]) == j+1 else 0\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    d = defaultdict(lambda: 0)\n    for i in range(l):\n        d[i] = 1\n        for j in range(i):\n            if s[j]+s[i] == s[i]:\n                d[i] += d[j]\n    return d[l-1]\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    return sum([1 for i in range(len(s)) for j in range(len(s)-i+1) if sum(map(int, s[i:i+j])) == j])\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # ans=0\n    # for i in range(len(s)):\n    #     if s[i]!=' ':\n    #         ans+=1\n    #     else:\n    #         ans+=len(s[i+1:])\n    # return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if i+1 < len(s):\n            if int(s[i]) + int(s[i+1]) == len(s[i:i+2]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dict_ = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i,n):\n            dict_[j-i] += 1\n    return dict_[n-1]\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d=defaultdict(int)\n    l=len(s)\n    for i in xrange(l):\n        for j in xrange(i,l):\n            s1=s[i:j+1]\n            d[s1]=d[s1]+1\n    return d\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    if xs == []:\n        return None\n    else:\n        min = xs[0]\n        for num in xs:\n            if num < min:\n                min = num\n        return min\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num2(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min(i for i in xs if i>0)\n    \ndef smallest_num3(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min(i for i in xs if i>0)\n    \ndef smallest_num4(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num5(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num6(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num7(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num8(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num9(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num10(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num11(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num12(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num13(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num14(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num15(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num16(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num17(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num18(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num19(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num20(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num21(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num22(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num23(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num24(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num25(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num26(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num27(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num28(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num29(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num30(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num31(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num32(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num33(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num34(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num35(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0])\n    \ndef smallest_num36(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min([i for i in xs if i>0]"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None or x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Take the first element as the smallest\n    smallest = xs[0]\n    # Now find the smallest element in the remaining list\n    for num in xs[1:]:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    max_diff = 0\n    for i in range(0, len(test_list) - 1):\n        max_diff = max(max_diff, test_list[i] - test_list[i + 1])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n    length = len(test_list)\n    test_list = sorted(test_list)\n    max_diff = test_list[length-1] - test_list[0]\n    for i in xrange(length-1):\n        max_diff = max(max_diff, test_list[i+1] - test_list[i])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    else:\n        return max(abs(a-b) for a in test_list for b in test_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        raise ValueError(\"List length must be greater than 1.\")\n    return max(abs(test_list[i] - test_list[i+1]) for i in range(len(test_list) - 1))\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return None\n    \n    temp_list = test_list[1:]\n    temp_list.sort()\n    return temp_list[-1] - temp_list[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    test_list = test_list[:]\n    test_list.sort()\n    n = len(test_list)\n    m = n-1\n    \n    if n<2:\n        return None\n    \n    max_diff = test_list[m]-test_list[0]\n    \n    for i in range(n-1):\n        if test_list[i+1]-test_list[i]>max_diff:\n            max_diff = test_list[i+1]-test_list[i]\n    \n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return 0\n    min_diff = 1000000\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) < min_diff:\n                min_diff = abs(test_list[i] - test_list[j])\n    return min_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    res = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            res = max(res, abs(test_list[i] - test_list[j]))\n    return res\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff_list.append(abs(test_list[i]-test_list[j]))\n    return max(diff_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l = []\n    for sub in subjectmarks:\n        l.append((sub[1],sub[0]))\n    l.sort()\n    return l\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda tup: tup[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    output = sorted(subjectmarks, key=lambda x: x[1])\n    return output\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x:x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks,key=lambda x:x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks,key = lambda x:x[1])\n    print sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) is not list:\n        return data_list\n    else:\n        return sum(recursive_list_sum(data_list[0])) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list)==1:\n        return data_list[0]\n    else:\n        return data_list[0]+recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if type(data_list) is not list:\n        return data_list\n    for i in range(len(data_list)):\n        if type(data_list[i]) is list:\n            total += recursive_list_sum(data_list[i])\n        else:\n            total += data_list[i]\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) > 0:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for num in list:\n        if num > 0:\n            count+=1\n    print count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    return len([x for x in list if x > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    if type(list)!= list:\n        raise TypeError(\"The input argument is not of type list.\")\n    count = 0\n    for element in list:\n        if element > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n    \ndef get_factors(n):\n    '''\n    Write a function to find the number of prime factors of a positive integer\n    '''\n    factors = []\n    for i in range(2,n+1):\n        while n%i == 0:\n            n /= i\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<0:\n        return 0\n    elif n<=1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    l = [0,1]\n    for i in range(2, n+1):\n        l.append(l[-2] + l[-1])\n    return l[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    n = len(A)\n    for i in xrange(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            if A[i] <= A[i-1]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[0] <= A[1]:\n        for i in range(2, len(A)):\n            if A[i - 1] >= A[i]:\n                return False\n            elif A[i - 1] < A[i]:\n                return True\n    elif A[0] >= A[1]:\n        for i in range(2, len(A)):\n            if A[i - 1] <= A[i]:\n                return False\n            elif A[i - 1] > A[i]:\n                return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #Compare first and last elements\n    if A[0]<=A[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0]<A[1] and A[1]<A[2]:\n        for i in range(1,len(A)):\n            if A[i-1]>A[i]:\n                return False\n    elif A[0]>A[1] and A[1]>A[2]:\n        for i in range(1,len(A)):\n            if A[i-1]<A[i]:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return A[0] <= A[1] and A[-1] >= A[-2] and A[1] <= A[2] and A[-2] >= A[-3] and A[2] <= A[3] and A[-3] >= A[-4] and A[3] <= A[4] and A[-4] >= A[-5]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (A == sorted(A) or A == sorted(A,reverse=True))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # This function should return True if the array is monotonic, else return False.\n    # A = [1,1,2,3,3,3,3,3,3,3,3,4]\n    # A = [1,2,3,4]\n    # A = [1,2,3,4]\n    # A = [1,1,1,1,1]\n    # A = [1,2,1,1,1]\n    # A = [1,2,3,4,5]\n    # A = [1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,1,1,1,1,1,1,1,1,1,1,1]\n    # A = [1,"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    flag = True\n    for i in range(1,len(A)):\n        if A[i-1] < A[i]:\n            pass\n        else:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if l[i] == s[0]:\n            flag = True\n            for j in range(1, len(s)):\n                if l[i + j]!= s[j]:\n                    flag = False\n                    break\n            if flag:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    def helper(l1, l2):\n        if not l1:\n            return True\n        elif not l2:\n            return False\n        elif l1[0] == l2[0]:\n            return helper(l1[1:], l2[1:])\n        else:\n            return helper(l1, l2[1:])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    else:\n        if s[0] in l:\n            return is_sublist(l[l.index(s[0]) + 1:], s[1:])\n        else:\n            return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l: return False\n    if len(l) > len(s): return False\n    return any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    for i in range(len(l)):\n        if len(s) == 1 and l[i] == s[0]:\n            return True\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s==[]:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if s[0]==l[i]:\n            if s[-1]==l[i]:\n                return is_sublist(l[i+1:], s[1:])\n            else:\n                return is_sublist(l[i+1:], s)\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s_length = len(s)\n    for i in xrange(len(l)):\n        if l[i:i+s_length] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return True\n    else:\n        return (l[0] == s[0] and is_sublist(l[1:], s[1:]))\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l or not s:\n        return False\n    for i in range(len(l) - len(s) + 1):\n        for j in range(len(s)):\n            if l[i+j]!= s[j]:\n                break\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    \n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for j in range(0,len(Input)):\n        if len(Input[j])==len(Input[0]):\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def is_equal_tuple(tuple1, tuple2):\n        return len(tuple1) == len(tuple2)\n    Output = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if is_equal_tuple(Input[i], Input[j]):\n                Output.append(Input[i])\n                break\n    return Output\n    \ndef find_equal_tuple_from_user(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                Output.append(Input[i])\n                break\n    return Output\n    \ndef find_prime(n):\n    '''\n    Write a function to find whether a given integer is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #Your code here\n    Output = []\n    Input_sorted = sorted(Input)\n    for i in range(0, len(Input)-1):\n        Output.append(len(Input[i]) == len(Input[i+1]))\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_list = []\n    for i in Input:\n        tuple_list.append(len(i))\n    if len(tuple_list)== len(set(tuple_list)):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #for i in Input:\n    #    if len(i)!=len(Input[0]):\n    #        return False\n    return len(set(map(len,Input)))==1\n    \nif __name__==\"__main__\":\n    Input=[(4,5),(3,4),(1,1),(5,5)]\n    print(find_equal_tuple(Input))"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return Input[0] == Input[1:]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_dict = {}\n    for i in Input:\n        length_dict[len(i)] = length_dict.get(len(i),0) + 1\n    if len(length_dict) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Tuple = {}\n    Length = len(Input)\n    for i in range(0, Length):\n        Tuple[i] = Input[i]\n    for i in range(0, Length):\n        for j in range(i+1, Length):\n            if Tuple[i]!= Tuple[j]:\n                return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    h = len(nums)\n    swapped = True\n    while h > 1 and swapped:\n        swapped = False\n        for i in range(1, h):\n            if nums[i-1] > nums[i]:\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        swapped = False\n        for j in range(0, i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                swapped = True\n        if not swapped:\n            break\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return []\n    l = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(0, l-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in xrange(len(nums)):\n        temp = nums[i]\n        pos = i\n        while pos > 0 and nums[pos - 1] > temp:\n            nums[pos] = nums[pos - 1]\n            pos -= 1\n        nums[pos] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get the length of the list\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in xrange(n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        for i in range(len(nums)):\n            min_index = i\n            for j in range(i, len(nums)):\n                if nums[j] < nums[min_index]:\n                    min_index = j\n            if min_index!= i:\n                nums[i], nums[min_index] = nums[min_index], nums[i]\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    gap = int(l/2)\n    if gap == 0:\n        return nums\n    swap = True\n    while gap > 0 and swap:\n        swap = False\n        for i in range(l - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swap = True\n        gap = int(gap/2)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = 0\n    b = 0\n    while a**2 <= n: \n        b = n - a**2\n        if b**2 == n: \n            return True\n        a += 1\n    return False\n    \ndef dif_Square_v2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return True\n        i += 1\n    return False\n    \n    \ndef search_square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \n    \ndef search_square_v2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v3(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v4(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v5(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v6(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v7(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v8(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v9(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v10(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v11(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v12(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v13(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v14(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v15(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v16(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v17(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v18(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v19(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v20(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v21(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v22(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n: \n        if i**2 == n: \n            return i\n        i += 1\n    return False\n    \ndef search_square_v23(n): \n    '''\n    Writ"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a,b=0,0\n    while n>0:\n        a,b=b,a+b\n        n-=1\n    return a==b\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # if n < 0:\n    #     print('NO')\n    #     return \n    # square = [1]\n    # while n > 0:\n    #     n, b = divmod(n, 4)\n    #     square.append(b)\n    # for i in range(len(square)):\n    #     if (square[i]!= 0) and ((2**(square[i] + 1)) - 1)**2 < n:\n    #         print('NO')\n    #         return\n    # print('YES')\n    # return\n    if n < 0:\n        print('NO')\n        return\n    if n == 0:\n        print('YES')\n        return\n    l = list()\n    i = 1\n    while i*i <= n:\n        l.append(i*i)\n        i += 1\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if l[i] + l[j] == n:\n                print('YES')\n                return\n    print('NO')\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return int(math.sqrt(n))**2 == n\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i < n:\n        if n-i*i == i*i:\n            return True\n        i+=1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    square1 = math.floor(math.sqrt(n))\n    square2 = math.sqrt(n - square1 ** 2)\n    if(square1 ** 2 == n):\n        return True\n    if(square2 ** 2 == n):\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if i*i == n:\n            return True\n        elif i*i < n:\n            return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # if (n/2)**2 == n :\n    #     return True\n    # elif (n/2)**2 > n :\n    #     return False\n    # else :\n    #     return True\n    for i in range(int(sqrt(n)),0,-1) :\n        if n == (i**2) + ((n-i**2)%i) :\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    temp = []\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            temp.append(i*i + j*j)\n    return n in temp\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n,int((n**0.5)**2),-1):\n        for j in range(n,int((n**0.5)**2),-1):\n            if i**2 - j**2 == n:\n                print(\"%s = %s + %s\" % (n,i,j))\n                return True\n            elif i**2 - j**2 > n:\n                break\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    print(colors)\n    print(patterns)\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(0, len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for i in xrange(len(colors)):\n        if not is_pattern_match(colors[i], patterns[i]):\n            return False\n    return True\n    \ndef is_pattern_match(pattern, colors):\n    '''\n    Write a function to check whether the pattern is a subset of the array\n    '''\n    for color in pattern:\n        if color not in colors:\n            return False\n    return True\n    \ndef remove_color(colors, color):\n    '''\n    Write a function to remove a color from a given array.\n    '''\n    return [col for col in colors if col!= color]\n    \ndef pattern_completion(colors):\n    '''\n    Write a function to find the pattern completion\n    '''\n    num_colors = len(colors)\n    patterns = [[],[],[],[]]\n    for i in xrange(0, num_colors):\n        patterns[i%4].append(colors[i])\n    \n    for i in xrange(1, num_colors):\n        for j in xrange(i, num_colors):\n            if is_samepatterns(colors[i:j+1], patterns):\n                return patterns[i%4]\n                \n    return None\n    \ndef replace_colors(colors, patterns, replacement):\n    '''\n    Write a function to replace colors according to the sequence given in the patterns array.\n    '''\n    for i in xrange(len(colors)):\n        if patterns[i] is not None:\n            colors[i] = replacement[i]\n    return colors\n    \ndef solution(colors):\n    '''\n    Write a function to find the solution of the given array with the given pattern.\n    '''\n    pattern_completion_index = len(colors) - 1\n    pattern = pattern_completion(colors)\n    \n    if pattern is None:\n        return colors\n    \n    replacement = [None for i in xrange(len(colors))]\n    for i in xrange(len(pattern)):\n        replacement[pattern_completion_index] = pattern[i]\n        pattern_completion_index -= 1\n    \n    return replacement\n    \nassert solution(['b', 'b', 'b', 'b', 'b', 'b', 'b', 'r', 'b', 'r', 'b', 'b', 'r', 'r', 'r', 'b', 'b', 'b', 'b', 'b', 'r', 'r', 'r', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'r', 'r', 'r', 'r', 'r', 'r', 'b', 'b', 'r', 'r', 'r', 'b', 'r', 'r', 'r', 'r', 'r', 'b', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'b', 'b', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'b', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'b', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'b', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r'"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_samepattern(colors, pattern):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    d = {}\n    for i in range(len(colors)):\n        if colors[i] not in d:\n            d[colors[i]] = [patterns[i]]\n        else:\n            d[colors[i]].append(patterns[i])\n    return d\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def is_increasing(colors):\n        for i in range(len(colors) - 1):\n            if colors[i] >= colors[i + 1]:\n                return False\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        for i in range(len(colors)):\n            if colors[i:i+len(pattern)] == pattern:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        c = colors[i]\n        if i < len(patterns):\n            p = patterns[i]\n            if c == p:\n                pass\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return [colors[i] == patterns[i] for i in range(len(colors))]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        for j in range(len(patterns[i])):\n            if patterns[i][j] == 'b' and colors[j]!= 'b':\n                return False\n            elif patterns[i][j] == 'r' and colors[j]!= 'r':\n                return False\n            elif patterns[i][j] == 'g' and colors[j]!= 'g':\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for item in test_list:\n        if all(element % K == 0 for element in item):\n            count += 1\n    return count\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # iterate through list of tuples and return the list of tuples with divisible elements\n    return_list = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            return_list.append(tup)\n    return return_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if t[0] % K == 0 and t[1] % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(item%K==0 for item in tuple):\n            result.append(tuple)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            count += 1\n    return count\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    final_list = []\n    for each in test_list:\n        if each[0] % K == 0 and each[1] % K == 0:\n            final_list.append(each)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return filter(lambda x: all(x[i] % K == 0 for i in range(len(x))), test_list)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(a,b,c) for a,b,c in test_list if not (a%K or b%K or c%K)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            tuples.append(t)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(a,b,a%K,b%K) for (a,b) in test_list if a%K==b%K]\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    return False\n    \ndef find_Diff_in_List(list1, list2):\n    '''\n    Write a python function to find the difference between the elements of two lists.\n    '''\n    list3 = []\n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    for i in list2:\n        if i in list1:\n            list3.append(i)\n    return set(list3)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print n, \"is divisible by 11\"\n    else:\n        print n, \"is not divisible by 11\"\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11) == 0: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return False\n    else:\n        return True\n        \ndef check_string(s):\n    '''\n    Write a python function to check whether the given string is a pangram or not.\n    '''\n    s_lower = s.lower()\n    s_list = []\n    for i in s_lower:\n        s_list.append(i)\n    a = set(s_list)\n    if len(a) == 26:\n        return True\n    else:\n        return False\n        \ndef check_palindrome(s):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n        \ndef sort_list(s):\n    '''\n    Write a python function to sort a list of integers.\n    '''\n    return sorted(s)\n    \ndef check_anagram(s):\n    '''\n    Write a python function to check whether the given string is an anagram or not.\n    '''\n    s_lower = s.lower()\n    s_list = []\n    for i in s_lower:\n        s_list.append(i)\n    a = set(s_list)\n    if len(a) == 26:\n        return True\n    else:\n        return False\n        \ndef check_anagram_2(s):\n    '''\n    Write a python function to check whether the given string is an anagram or not.\n    '''\n    s_lower = s.lower()\n    s_list = []\n    for i in s_lower:\n        s_list.append(i)\n    s_list.sort()\n    s_list_2 = list(s_list)\n    if s_list == s_list_2:\n        return True\n    else:\n        return False\n        \ndef split_string(s):\n    '''\n    Write a python function to split a string into a list of words.\n    '''\n    return s.split()\n    \ndef check_anagram_3(s):\n    '''\n    Write a python function to check whether the given string is an anagram or not.\n    '''\n    s_lower = s.lower()\n    s_list = []\n    for i in s_lower:\n        s_list.append(i)\n    s_list.sort()\n    s_list_2 = list(s_list)\n    if s_list == s_list_2:\n        return True\n    else:\n        return False\n        \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    count = 0\n    s_lower = s.lower()\n    for i in s_lower:\n        if i in 'aeiou':\n            count += 1\n    return count\n        \ndef count_consonants(s):\n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    count = 0\n    s_lower = s.lower()\n    for i in s_lower:\n        if i in 'bcdfghjklmnpqrstvwxyz':\n            count += 1\n    return count\n    \ndef count_digits(s):\n    '''\n    Write a python function to count the number of digits in a string.\n    '''\n    count = 0\n    s_lower = s.lower()\n    for i in s_lower:\n        if i in '1234567890':\n            count += 1\n    return count\n        \ndef count_capital_letters(s):\n    '''\n    Write a python function to count the number of capital letters in a string.\n    '''\n    count = 0\n    s_lower = s.lower()\n    for i in s_lower:\n        if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            count += 1\n    return count\n    \ndef count_lower_case_letters(s):\n    '''\n    Write a python function to count the number of lower case letters in a string.\n    '''\n    count = 0\n    s_lower = s.lower()\n    for i in s_lower:\n        if i in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n        \ndef count_punctuations(s):\n    '''\n    Write a python function to count the number of punctuations in a string.\n    '''\n    count = 0\n    s_lower = s.lower()\n    for i in s_lower:\n        if i in '.!?':\n            count += 1\n    return count\n    \ndef count_spaces(s):\n    '''\n    Write a python function to count the number of spaces in a string.\n    '''\n    count = 0\n    s_lower = s.lower()\n    for i in s_lower:\n        if i =='':\n            count += 1\n    return count\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n    \nprint word_len(\"hello\")\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    return len(s) % 2\n    \ndef prime_number(n): \n    '''\n    Write a python function to check whether the input number is a prime number or not.\n    '''\n    \n    if n % 2 == 0:\n        return False\n        \n    for i in range(3, n/2, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef prime_num(n): \n    '''\n    Write a python function to check whether the input number is a prime number or not.\n    '''\n    \n    if n % 2 == 0:\n        return False\n        \n    for i in range(3, n/2, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef prime_num(n): \n    '''\n    Write a python function to check whether the input number is a prime number or not.\n    '''\n    \n    if n % 2 == 0:\n        return False\n        \n    for i in range(3, n/2, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef gcd(a, b): \n    '''\n    Write a python function to return the greatest common divisor of two integers.\n    '''\n    \n    while b!= 0:\n        a, b = b, a % b\n    return a\n    \ndef gcd(a, b): \n    '''\n    Write a python function to return the greatest common divisor of two integers.\n    '''\n    \n    while b!= 0:\n        a, b = b, a % b\n    return a\n    \ndef hcf(a, b): \n    '''\n    Write a python function to return the least common multiple of two integers.\n    '''\n    \n    return a * b / gcd(a, b)\n    \ndef lcm(a, b): \n    '''\n    Write a python function to return the least common multiple of two integers.\n    '''\n    \n    return a * b / gcd(a, b)\n    \ndef lcm(a, b): \n    '''\n    Write a python function to return the least common multiple of two integers.\n    '''\n    \n    return a * b / gcd(a, b)\n    \ndef inverse_of(n, m): \n    '''\n    Write a python function to return the multiplicative inverse of two integers.\n    '''\n    \n    gcd(n, m)\n    \n    return a * b / gcd(a, b)\n    \ndef exponential(a, n): \n    '''\n    Write a python function to return the exponential value of a given integer.\n    '''\n    \n    return a ** n\n    \ndef multiplication(a, b): \n    '''\n    Write a python function to return the multiplication of two integers.\n    '''\n    \n    return a * b\n    \ndef p(n): \n    '''\n    Write a python function to return the first n prime numbers.\n    '''\n    \n    return n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s == n\n    \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number or not.\n    '''\n    \n    s = "
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==0:\n        return 1\n    if n<0:\n        return 0\n    return tetrahedral_number(n-1) + tetrahedral_number(n-2)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_number_seq = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345, 360, 375, 390, 405, 420, 435, 450, 495, 510, 525, 540, 575, 600, 625, 630, 645, 660, 675, 700, 715, 720, 735, 750, 765, 780, 785, 800, 815, 820, 825, 840, 855, 870, 885, 900, 915, 930, 945, 960, 975, 990, 1015, 1020, 1035, 1050, 1065, 1080, 1095, 1110, 1125]\n    return tetrahedral_number_seq[n]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import itertools\n    return list(itertools.islice(itertools.count(1, -1), 0, n))[-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_nums = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 77, 88, 99]\n    return tetrahedral_nums[n-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # x = 0\n    # y = 0\n    # while x < n:\n    #     x += 1\n    #     y += 1\n    #     while y < n:\n    #         y += 1\n    #         x += 1\n    # return x\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n + 3)/3 * n * (n - 1) * (n - 2) * (n - 3))\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n+1) * (n+2) * (n+3) / 4\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n - 1) / 3) + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    assert (type(n) == int) and (n >= 0)\n    return n * (n + 1) * (n + 2) * (n + 3) / 4\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 4\n    if n == 4: return 7\n    if n == 5: return 10\n    if n == 6: return 13\n    if n == 7: return 16\n    if n == 8: return 19\n    if n == 9: return 22\n    if n == 10: return 25\n    if n == 11: return 28\n    if n == 12: return 31\n    if n == 13: return 34\n    if n == 14: return 37\n    if n == 15: return 40\n    if n == 16: return 43\n    if n == 17: return 46\n    if n == 18: return 49\n    if n == 19: return 52\n    if n == 20: return 55\n    if n == 21: return 58\n    if n == 22: return 61\n    if n == 23: return 64\n    if n == 24: return 67\n    if n == 25: return 70\n    if n == 26: return 73\n    if n == 27: return 76\n    if n == 28: return 79\n    if n == 29: return 82\n    if n == 30: return 85\n    if n == 31: return 88\n    if n == 32: return 91\n    if n == 33: return 94\n    if n == 34: return 97\n    if n == 35: return 100\n    if n == 36: return 103\n    if n == 37: return 106\n    if n == 38: return 109\n    if n == 39: return 112\n    if n == 40: return 115\n    if n == 41: return 118\n    if n == 42: return 121\n    if n == 43: return 124\n    if n == 44: return 127\n    if n == 45: return 130\n    if n == 46: return 133\n    if n == 47: return 136\n    if n == 48: return 139\n    if n == 49: return 142\n    if n == 50: return 145\n    if n == 51: return 148\n    if n == 52: return 151\n    if n == 53: return 154\n    if n == 54: return 157\n    if n == 55: return 160\n    if n == 56: return 163\n    if n == 57: return 166\n    if n == 58: return 169\n    if n == 59: return 172\n    if n == 60: return 175\n    if n == 61: return 178\n    if n == 62: return 181\n    if n == 63: return 184\n    if n == 64: return 187\n    if n == 65: return 190\n    if n == 66: return 193\n    if n == 67: return 196\n    if n == 68: return 199\n    if n == 69: return 202\n    if n == 70: return 205\n    if n == 71: return 208\n    if n == 72: return 211\n    if n == 73: return 214\n    if n == 74: return 217\n    if n == 75: return 220\n    if n == 76: return 223\n    if n == 77: return 226\n    if n == 78: return 229\n    if n == 79: return 232\n    if n == 80: return 235\n    if n == 81: return 238\n    if n == 82: return 241\n    if n == 83: return 244\n    if n == 84: return 247\n    if n == 85: return 250\n    if n == 86: return 253\n    if n == 87: return 256\n    if n == 88: return 259\n    if n == 89: return 262\n    if n == 90: return 265\n    if n == 91: return 268\n    if n == 92: return 271\n    if n == 93: return 274\n    if n == 94: return 277\n    if n == 95: return 280\n    if n == 96: return 283\n    if n == 97: return 286\n    if n == 98: return 289\n    if n == 99: return 292\n    if n == 100: return 295\n    if n == 101: return 298\n    if n == 102: return 301\n    if n == 103: return 304\n    if n == 104: return 307\n    if n == 105: return 310\n    if n == 106: return 313\n    if n == 107: return 316\n    if n == 108: return 319\n    if n == 109: return 322\n    if n == 110: return 325\n    if n == 111: return 328\n    if n == 112: return 331\n    if n == 113: return 334\n    if n == 114: return 337\n    if n == 115: return 340\n    if n == 116: return 343\n    if n == 117: return 346\n    if n == 118: return 349\n    if n == 119: return 352\n    if n == 120: return 355\n    if n == 121: return 358\n    if n == 122: return 361\n    if n == 123: return 364\n    if n == 124: return 367\n    if n == 125: return 370\n    if n == 126: return 373\n    if n == 127: return 376\n    if n == 128: return 379\n    if n == 129: return 382\n    if n == 130: return 385\n    if n == 131: return 388\n    if n == 132: return 391\n    if n == 133: return 394\n    if n == 134: return 397\n    if n == 135: return 400\n    if n == 136: return 403\n    if n == 137: return 406\n    if n == 138: return 409\n    if n == 139: return 412\n    if n == 140: return 415\n    if n == 141: return 418\n    if n == 142: return 421\n    if n == 143: return 424\n    if n == 144: return 427\n    if n == 145: return 430\n    if n == 146: return 433\n    if n == 147: return 436\n    if n == 148: return 439\n    if n == 149: return 442\n    if n == 150: return 445\n    if n == 151: return 448\n    if n == 152: return 451\n    if n == 153: return 454\n    if n == 154: return 457\n    if n == 155: return 460\n    if n == 156: return 463\n    if n == 157: return 466\n    if n == 158: return 469\n    if n == 159: return 472\n    if n == 160: return 475\n    if n == 161: return 478\n    if n == 162: return 481\n    if n == 163: return 484\n    if n == 164: return 487\n    if n == 165: return 490\n    if n == 166: return 493\n    if n == 167: return 496\n    if n == 168: return 499\n    if n == 169: return 502\n    if n == 170: return 505\n    if n == 171: return 508\n    if n == 172: return 511\n    if n == 173: return 514\n    if n == 174: return 517\n    if n == 175: return 520\n    if n == 176: return 523\n    if n == 177: return 526\n    if n == 178: return 529\n    if n == 179: return 532\n    if n == 180: return 535\n    if n == 181: return 538\n    if n == 182: return 541\n    if n == 183: return 544\n    if n == 184: return 547\n    if n == 185: return 550\n    if n == 186: return 553\n    if n == 187: return 556\n    if n == 188: return 559\n    if n == 189: return 562\n    if n == 190: return 565\n    if n == 191: return 568\n    if n == 192: return 571\n    if n == 193: return 574\n    if n == 194: return 577\n    if n == 195: return 580\n    if n == 196: return 583\n    if n == 197: return 586\n    if n == 198: return 589\n    if n == 199: return 592\n    if n == 200: return 595\n    if n == 201: return 598\n    if n == 202: return 601\n    if n == 203: return 604\n    if n == 204: return 607\n    if n == 205: return 610\n    if n == 206: return 613\n    if n == 207: return 616\n    if n == 208: return 619\n    if n == 209: return 622\n    if n == 210: return 625\n    if n == 211: return 628\n    if n == 212: return 631\n    if n == 213: return 634\n    if n == 214: return 637\n    if n == 215: return 640\n    if n == 216: return 643\n    if n == 217"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # If the radius is negative, return nothing.\n    if r < 0:\n        return\n    # If the radius is 0, return a value of pi.\n    if r == 0:\n        return math.pi\n    # Use the formula for a sphere to find the volume.\n    return 4.0/3.0*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*math.pi*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*math.pi*r**3.0\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * r * r * r\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * (r**3) / 3\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr((sum(map(ord, strr)) % 26) + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in strr:\n        res += ord(i)\n    return chr(res % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    length = len(strr)\n    if length == 0:\n        return 0\n    if length == 1:\n        return ord(strr)\n    else:\n        return (ord(strr[0]) + get_Char(strr[1:])) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in range(len(strr)):\n        res = (res + ord(strr[i]) - 96) % 26\n    return chr(res + 96)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    from string import ascii_letters\n    for ch in strr:\n        if ch not in ascii_letters:\n            return ch\n    return chr(sum(ord(i) for i in strr)%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in strr:\n        result = result + ord(i)\n    result = result % 26\n    return chr(result + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #check if the string is empty\n    if len(strr) == 0:\n        return\n    \n    res = 0\n    for i in strr:\n        res = (res + ord(i))%26\n    return chr(res+ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in strr:\n        result = result + ord(i)\n    return result % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s=\"\"\n    for i in strr:\n        s=s+str(ord(i))\n    return s\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==0: \n        return 1\n    elif n==1: \n        return 2\n    elif n==2: \n        return 3\n    else: \n        return sequence(n-1)+sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0: return None\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0,1]\n    for i in range(2,n+1):\n        sequence.append((sequence[i-2]*3) + sequence[i-1])\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # try to hardcode the sequence for testing\n    if n == 0: return 1\n    if n == 1: return 2\n    if n == 2: return 3\n    if n == 3: return 5\n    if n == 4: return 7\n    if n == 5: return 11\n    if n == 6: return 19\n    if n == 7: return 37\n    if n == 8: return 59\n    if n == 9: return 89\n    if n == 10: return 113\n    if n == 11: return 121\n    if n == 12: return 143\n    if n == 13: return 177\n    if n == 14: return 229\n    if n == 15: return 377\n    if n == 16: return 797\n    if n == 17: return 1113\n    if n == 18: return 1331\n    if n == 19: return 1729\n    if n == 20: return 3771\n    if n == 21: return 7899\n    if n == 22: return 15571\n    if n == 23: return 19601\n    if n == 24: return 28289\n    if n == 25: return 75767\n    if n == 26: return 116889\n    if n == 27: return 182953\n    if n == 28: return 252227\n    if n == 29: return 780427\n    if n == 30: return 1227959\n    if n == 31: return 1946673\n    if n == 32: return 289857\n    if n == 33: return 84941\n    if n == 34: return 1299597\n    if n == 35: return 1816941\n    if n == 36: return 2565295\n    if n == 37: return 88719\n    if n == 38: return 1299119\n    if n == 39: return 1826248\n    if n == 40: return 2579303\n    if n == 41: return 91501\n    if n == 42: return 1726181\n    if n == 43: return 24897\n    if n == 44: return 98879\n    if n == 45: return 1297605\n    if n == 46: return 1843613\n    if n == 47: return 2595005\n    if n == 48: return 92853\n    if n == 49: return 1325305\n    if n == 50: return 1844565\n    if n == 51: return 2615171\n    if n == 52: return 984651\n    if n == 53: return 1326592\n    if n == 54: return 1846395\n    if n == 55: return 2598001\n    if n == 56: return 98957\n    if n == 57: return 1426273\n    if n == 58: return 1847698\n    if n == 59: return 2617239\n    if n == 60: return 992731\n    if n == 61: return 1427979\n    if n == 62: return 1848572\n    if n == 63: return 2619715\n    if n == 64: return 995703\n    if n == 65: return 1428057\n    if n == 66: return 1849409\n    if n == 67: return 2620905\n    if n == 68: return 995733\n    if n == 69: return 1428305\n    if n == 70: return 1850095\n    if n == 71: return 2621411\n    if n == 72: return 997353\n    if n == 73: return 1428497\n    if n == 74: return 1850137\n    if n == 75: return 2621493\n    if n == 76: return 997641\n    if n == 77: return 1428525\n    if n == 78: return 1850137\n    if n == 79: return 2621901\n    if n == 80: return 997689\n    if n == 81: return 1428611\n    if n == 82: return 1850137\n    if n == 83: return 2621973\n    if n == 84: return 997753\n    if n == 85: return 1428725\n    if n == 86: return 1850137\n    if n == 87: return 2622075\n    if n == 88: return 998017\n    if n == 89: return 1428837\n    if n == 90: return 1850137\n    if n == 91: return 2622099\n    if n == 92: return 998169\n    if n == 93: return 1428915\n    if n == 94: return 1850137\n    if n == 95: return 2622101\n    if n == 96: return 998239\n    if n == 97: return 1428937\n    if n == 98: return 1850137\n    if n == 99: return 2622133\n    if n == 100: return 998385\n    if n == 101: return 1428965\n    if n == 102: return 1850137\n    if n == 103: return 2622151\n    if n == 104: return 998451\n    if n == 105: return 1429027\n    if n == 106: return 1850137\n    if n == 107: return 2622153\n    if n == 108: return 998509\n    if n == 109: return 1429065\n    if n == 110: return 1850137\n    if n == 111: return 2622171\n    if n == 112: return 998593\n    if n == 113: return 1429061\n    if n == 114: return 1850137\n    if n == 115: return 2622191\n    if n == 116: return 998695\n    if n == 117: return 1429063\n    if n == 118: return 1850137\n    if n == 119: return 2622203\n    if n == 120: return 998711\n    if n == 121: return 1429099\n    if n == 122: return 1850137\n    if n == 123: return 2622217\n    if n == 124: return 998769\n    if n == 125: return 1429113\n    if n == 126: return 1850137\n    if n == 127: return 2622229\n    if n == 128: return 998805\n    if n == 129: return 1429173\n    if n == 130: return 1850137\n    if n == 131: return 2622249\n    if n == 132: return 998806\n    if n == 133: return 1429200\n    if n == 134: return 1850137\n    if n == 135: return 2622259\n    if n == 136: return 998807\n    if n == 137: return 1429208\n    if n == 138: return 1850137\n    if n == 139: return 2622269\n    if n == 140: return 998809\n    if n == 141: return 1429215\n    if n == 142: return 1850137\n    if n == 143: return 2622271\n    if n == 144: return 99881\n    if n == 145: return 1429227\n    if n == 146: return 1850137\n    if n == 147: return 2622273\n    if n == 148: return 99881\n    if n == 149: return 1429237\n    if n == 150: return 1850137\n    if n == 151: return 2622275\n    if n == 152: return 99881\n    if n == 153: return 1429245\n    if n == 154: return 1850137\n    if n == 155: return 2622277\n    if n == 156: return 99881\n    if n == 157: return 1429259\n    if n == 158: return 1850137\n    if n == 159: return 2622279\n    if n == 160: return 99881\n    if n == 161: return 1429291\n    if n == 162: return 1850137\n    if n == 163: return 2622281\n    if n == 164: return 99881\n    if n == 165: return 1429293\n    if n == 166: return 1850137\n    if n == 167: return 2622283\n    if n == 168: return 99881\n    if n == 169: return 1429295\n    if n == 170: return 1850137\n    if n == 171: return 2622285\n    if n == 172: return 99881\n    if n == 173: return 1429297\n    if n == 174: return 1850137\n    if n == 175: return 2622287\n    if n == 176: return 99881\n    if n == 177: return 1429299\n    if n == 178: return 1850137\n    if n == 179: return 2622289\n    if n == 180: return 99881\n    if n == 181: return 1429301\n    if n == 182: return 1850137\n    if n == 183: return 2622291\n    if n == 184: return 99881\n    if n == 185: retur"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def newman_conway(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return newman_conway(n-1) + newman_conway(n-2)\n    return newman_conway(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    current_number = 1\n    yield current_number\n    for i in xrange(1, n):\n        new_number = current_number + 1\n        current_number = new_number\n        yield new_number\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return sequence(n - 1) + sequence(n - 2) + sequence(n - 3)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1: \n        print 'Invalid Number'\n        return None\n    if n == 1: \n        return 1\n    return (sequence(n-1) + sequence(n-2)) % 10 \n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2) + 2*math.pi*(r**2)*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*(r**2)*h\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*(r**2) + math.pi*(r**2)*(h/3)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h/3)\ndef surfacearea_rectangle(r,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2*(r*w)\ndef volume_rectangle(r,w):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return r*w\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return 0.5*(a+b+c)\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return 0.5*(a*b*c)\ndef surfacearea_pyramid(a,b,c):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return 1.5*(a+b+c)\ndef volume_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1.5*(a*b*c)\ndef surfacearea_cuboid(a,b,c):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return 6*(a+b+c)\ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2) + 2*math.pi*(r**2)*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*(r**2)*h\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*(r**2) + math.pi*(r**2)*(h/3)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h/3)\ndef surfacearea_rectangle(r,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2*(r*w)\ndef volume_rectangle(r,w):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return r*w\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return 0.5*(a+b+c)\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return 0.5*(a*b*c)\ndef surfacearea_pyramid(a,b,c):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return 1.5*(a+b+c)\ndef volume_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1.5*(a*b*c)\ndef surfacearea_cuboid(a,b,c):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return 6*(a+b+c)\ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2) + 2*math.pi*(r**2)*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*(r**2)*h\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*(r**2) + math.pi*(r**2)*(h/3)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h/3)\ndef surfacearea_rectangle(r,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2*(r*w)\ndef volume_rectangle(r,w):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return r*w\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return 0.5*(a+b+c)\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return 0.5*(a*b*c)\ndef surfacearea_pyramid(a,b,c):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return 1.5*(a+b+c)\ndef volume_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1.5*(a*b*c)\ndef surfacearea_cuboid(a,b,c):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return 6*(a+b+c)\ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef surfacearea_sphere("
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    S = 4 * math.pi * r * r\n    return S\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    S = 4 * math.pi * r ** 2\n    return S\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0*math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    from math import pi\n    return 4 * pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4*math.pi*r**2\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    \n    area = 4 * math.pi * (r**2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #surface_area=4*pi*r*r\n    surface_area=4*math.pi*r*r\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #pi = 3.1415\n    #ar = math.pi*math.pow(r,2)\n    #return ar\n    return 4*math.pi*math.pow(r,2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**3 + n**2 / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    \n    \n    return n*(2*n-1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n**2+1)//2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (3 * n**2 + 3 * n - 2) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n+1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(((3 * (n ** 2)) + (n * (((n - 1) / 2) ** 2)) + (((n - 1) / 2) ** 2)) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2*n*(n**2+1)/(2*n+1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n > 0:\n        return 2 * n * (2 * n + 1)\n    else:\n        return -2 * n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2*sqrt(3)\n    elif n == 3:\n        return 3*sqrt(3)\n    elif n == 4:\n        return n*sqrt(3)\n    elif n == 5:\n        return n*sqrt(3) + 2*sqrt(3)\n    else:\n        return n*sqrt(3) + 2*sqrt(3) - 2*n*sqrt(3)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in dict1:\n        dict4[i] = dict1[i]\n    for i in dict2:\n        if i not in dict4:\n            dict4[i] = dict2[i]\n        else:\n            dict4[i] = dict2[i]+dict1[i]\n    for i in dict3:\n        if i not in dict4:\n            dict4[i] = dict3[i]\n        else:\n            dict4[i] = dict3[i]\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for k,v in dict1.iteritems():\n        if k not in dict4:\n            dict4[k] = v\n    for k,v in dict2.iteritems():\n        if k not in dict4:\n            dict4[k] = v\n    for k,v in dict3.iteritems():\n        if k not in dict4:\n            dict4[k] = v\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    return dict(dict1.items()+dict2.items()+dict3.items())\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dic = {}\n    dic.update(dict1)\n    dic.update(dict2)\n    dic.update(dict3)\n    return dic\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict):\n        print \"first argument is not a dictionary\"\n        return\n    if not isinstance(dict2,dict):\n        print \"second argument is not a dictionary\"\n        return\n    if not isinstance(dict3,dict):\n        print \"third argument is not a dictionary\"\n        return\n    dict4={}\n    for key in dict1:\n        dict4[key]=dict1[key]\n    for key in dict2:\n        dict4[key]=dict2[key]\n    for key in dict3:\n        dict4[key]=dict3[key]\n    return dict4\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict):\n        print \"first argument is not a dictionary\"\n        return\n    if not isinstance(dict2,dict):\n        print \"second argument is not a dictionary\"\n        return\n    dict4={}\n    for key in dict1:\n        dict4[key]=dict1[key]\n    for key in dict2:\n        dict4[key]=dict2[key]\n    return dict4\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict):\n        print \"first argument is not a dictionary\"\n        return\n    if not isinstance(dict2,dict):\n        print \"second argument is not a dictionary\"\n        return\n    dict4={}\n    for key in dict1:\n        dict4[key]=dict1[key]\n    for key in dict2:\n        dict4[key]=dict2[key]\n    return dict4\ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict):\n        print \"first argument is not a dictionary\"\n        return\n    if not isinstance(dict2,dict):\n        print \"second argument is not a dictionary\"\n        return\n    if not isinstance(dict3,dict):\n        print \"third argument is not a dictionary\"\n        return\n    if not isinstance(dict4,dict):\n        print \"fourth argument is not a dictionary\"\n        return\n    dict5={}\n    for key in dict1:\n        dict5[key]=dict1[key]\n    for key in dict2:\n        dict5[key]=dict2[key]\n    for key in dict3:\n        dict5[key]=dict3[key]\n    for key in dict4:\n        dict5[key]=dict4[key]\n    return dict5\ndef merge_dictionaries_five(dict1,dict2,dict3,dict4,dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict):\n        print \"first argument is not a dictionary\"\n        return\n    if not isinstance(dict2,dict):\n        print \"second argument is not a dictionary\"\n        return\n    if not isinstance(dict3,dict):\n        print \"third argument is not a dictionary\"\n        return\n    if not isinstance(dict4,dict):\n        print \"fourth argument is not a dictionary\"\n        return\n    if not isinstance(dict5,dict):\n        print \"fifth argument is not a dictionary\"\n        return\n    dict6={}\n    for key in dict1:\n        dict6[key]=dict1[key]\n    for key in dict2:\n        dict6[key]=dict2[key]\n    for key in dict3:\n        dict6[key]=dict3[key]\n    for key in dict4:\n        dict6[key]=dict4[key]\n    for key in dict5:\n        dict6[key]=dict5[key]\n    return dict6\ndef merge_dictionaries_six(dict1,dict2,dict3,dict4,dict5,dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict):\n        print \"first argument is not a dictionary\"\n        return\n    if not isinstance(dict2,dict):\n        print \"second argument is not a dictionary\"\n        return\n    if not isinstance(dict3,dict):\n        print \"third argument is not a dictionary\"\n        return\n    if not isinstance(dict4,dict):\n        print \"fourth argument is not a dictionary\"\n        return\n    if not isinstance(dict5,dict):\n        print \"fifth argument is not a dictionary\"\n        return\n    if not isinstance(dict6,dict):\n        print \"sixth argument is not a dictionary\"\n        return\n    dict7={}\n    for key in dict1:\n        dict7[key]=dict1[key]\n    for key in dict2:\n        dict7[key]=dict2[key]\n    for key in dict3:\n        dict7[key]=dict3[key]\n    for key in dict4:\n        dict7[key]=dict4[key]\n    for key in dict5:\n        dict7[key]=dict5[key]\n    for key in dict6:\n        dict7[key]=dict6[key]\n    return dict7\ndef merge_dictionaries_seven(dict1,dict2,dict3,dict4,dict5,dict6,dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict):\n        print \"first argument is not a dictionary\"\n        return\n    if not isinstance(dict2,dict):\n        print \"second argument is not a dictionary\"\n        return\n    if not isinstance(dict3,dict):\n        print \"third argument is not a dictionary\"\n        return\n    if not isinstance(dict4,dict):\n        print \"fourth argument is not a dictionary\"\n        return\n    if not isinstance(dict5,dict):\n        print \"fifth argument is not a dictionary\"\n        return\n    if not isinstance(dict6,dict):\n        print \"sixth argument is not a dictionary\"\n        return\n    if not isinstance(dict7,dict):\n        print \"seventh argument is not a dictionary\"\n        return\n    dict8={}\n    for key in dict1:\n        dict8[key]=dict1[key]\n    for key in dict2:\n        dict8[key]=dict2[key]\n    for key in dict3:\n        dict8[key]=dict3[key]\n    for key in dict4:\n        dict8[key]=dict4[key]\n    for key in dict5:\n        dict8[key]=dict5[key]\n    for key in dict6:\n        dict8[key]=dict6[key]\n    for key in dict7:\n        dict8[key]=dict7[key]\n    return dict8\ndef merge_dictionaries_eight(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict):\n        print \"first argument is not a dictionary\"\n        return\n    if not isinstance(dict2,dict):\n        print \"second argument is not a dictionary\"\n        return\n    if not isinstance(dict3,dict):\n        print \"third argument is not a dictionary\"\n        return\n    if not isinstance(dict4,dict):\n        print \"fourth argument is not a dictionary\"\n        return\n    if not isinstance(dict5,dict):\n        print \"fifth argument is not a dictionary\"\n        return\n    if not isinstance(dict6,dict):\n        print \"sixth argument is not a dictionary\"\n        return\n    if not isinstance(dict7,dict):\n        print \"seventh argument is not a dictionary\"\n        return\n    if not isinstance(dict8,dict):\n        print \"eight argument is not a dictionary\"\n        return\n    dict9={}\n    for key in dict1:\n        dict9[key]=dict1[key]\n    for key in dict2:\n        dict9[key]=dict2"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    newdict = {}\n    for i in dict1:\n        newdict[i] = (dict1[i] + dict2[i] + dict3[i])\n    return newdict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for d1 in (dict1, dict2, dict3):\n        result.update(d1)\n    return result\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    return result\n    \ndef merge_dictionaries(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    for key in dict1:\n        if key in dict2:\n            dict1[key] = dict1[key] + dict2[key]\n        else:\n            dict1[key] = dict1[key]\n    return dict1\n    \ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key in dict1:\n        if key in dict2:\n            result[key] = dict1[key] + dict2[key]\n        else:\n            result[key] = dict1[key]\n    for key in dict2:\n        if key not in result:\n            result[key] = dict2[key]\n    return result\n    \ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    result = {}\n    for d1 in (dict1, dict2, dict3, dict4):\n        result.update(d1)\n    return result\n    \ndef merge_dictionaries_three(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for d1 in (dict1, dict2, dict3):\n        result.update(d1)\n    return result\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    return result\n    \ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key in dict1:\n        if key in dict2:\n            result[key] = dict1[key] + dict2[key]\n        else:\n            result[key] = dict1[key]\n    for key in dict2:\n        if key not in result:\n            result[key] = dict2[key]\n    return result\n    \ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    result = {}\n    for d1 in (dict1, dict2, dict3, dict4):\n        result.update(d1)\n    return result\n    \ndef merge_dictionaries_three(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for d1 in (dict1, dict2, dict3):\n        result.update(d1)\n    return result\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    return result\n    \ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key in dict1:\n        if key in dict2:\n            result[key] = dict1[key] + dict2[key]\n        else:\n            result[key] = dict1[key]\n    for key in dict2:\n        if key not in result:\n            result[key] = dict2[key]\n    return result\n    \ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    result = {}\n    for d1 in (dict1, dict2, dict3, dict4):\n        result.update(d1)\n    return result\n    \ndef merge_dictionaries_three(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for d1 in (dict1, dict2, dict3):\n        result.update(d1)\n    return result\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    return result\n    \ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key in dict1:\n        if key in dict2:\n            result[key] = dict1[key] + dict2[key]\n        else:\n            result[key] = dict1[key]\n    for key in dict2:\n        if key not in result:\n            result[key] = dict2[key]\n    return result\n    \ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    result = {}\n    for d1 in (dict1, dict2, dict3, dict4):\n        result.update(d1)\n    return result\n    \ndef merge_dictionaries_three(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for d1 in (dict1, dict2, dict3):\n        result.update(d1)\n    return result\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    return result\n    \ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key in dict1:\n        if key in dict2:\n            result[key] = dict1[key] + dict2[key]\n        else:\n            result[key] = dict1[key]\n    for key in dict2:\n        if key not in result:\n            result[key] = dict2[key]\n    return result\n    \ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    result = {}\n    for d1 in (dict1, dict2, dict3, dict4):\n        result.update(d1)\n    return result\n    \ndef merge_dictionaries_three(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for d1 in (dict1, dict2, dict3):\n        result.update(d1)\n    return result\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    return result\n    \ndef merge_dictionaries_one(dic"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for d in (dict1,dict2,dict3):\n        if type(d)==type({}):\n            new_dict.update(d)\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dic_merged = {}\n    for key in dict1:\n        if key in dict2:\n            dic_merged[key] = dict1[key] + dict2[key] + dict3[key]\n        else:\n            dic_merged[key] = dict1[key]\n    for key in dict2:\n        if key not in dic_merged:\n            dic_merged[key] = dict2[key]\n    for key in dict3:\n        if key not in dic_merged:\n            dic_merged[key] = dict3[key]\n    return dic_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    res.update(dict1)\n    res.update(dict2)\n    res.update(dict3)\n    return res\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    res.update(dict1)\n    res.update(dict2)\n    return res\ndef is_anagram(first,second):\n    '''\n    Write a function to check if two strings are anagram of each other.\n    '''\n    if len(first) == len(second):\n        first_list = []\n        second_list = []\n        for i in first:\n            first_list.append(i.lower())\n        for j in second:\n            second_list.append(j.lower())\n        if sorted(first_list) == sorted(second_list):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_anagram_hashmap(first,second):\n    '''\n    Write a function to check if two strings are anagram of each other.\n    '''\n    if len(first) == len(second):\n        first_list = []\n        second_list = []\n        for i in first:\n            first_list.append(i.lower())\n        for j in second:\n            second_list.append(j.lower())\n        first_list = sorted(first_list)\n        second_list = sorted(second_list)\n        if first_list == second_list:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef count_letter_occurence(string):\n    '''\n    Write a function to count the occurence of each letter in a string.\n    '''\n    res = {}\n    for i in string:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    return res\ndef count_letter_occurence_hashmap(string):\n    '''\n    Write a function to count the occurence of each letter in a string.\n    '''\n    res = {}\n    for i in string:\n        res[i] = string.count(i)\n    return res\ndef count_letter_occurence_two(string):\n    '''\n    Write a function to count the occurence of each letter in a string.\n    '''\n    res = {}\n    for i in string:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    return res\ndef count_letter_occurence_three(string):\n    '''\n    Write a function to count the occurence of each letter in a string.\n    '''\n    return collections.Counter(string)\ndef count_letter_occurence_four(string):\n    '''\n    Write a function to count the occurence of each letter in a string.\n    '''\n    return ct.Counter(string)\ndef count_letter_occurence_five(string):\n    '''\n    Write a function to count the occurence of each letter in a string.\n    '''\n    return ct.Counter(string)\ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_hashmap(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_two(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string[::-1] == string\ndef is_palindrome_three(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string[::-1] == string\ndef is_palindrome_four(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_five(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string[::-1] == string\ndef is_palindrome_six(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_seven(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_eight(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_nine(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_ten(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_eleven(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_twelve(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_thirteen(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_fourteen(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_fifteen(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_sixteen(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_seventeen(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_eighteen(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_nineteen(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\ndef is_palindrome_twenty(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[::-1] == string:\n        retur"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counter = collections.Counter(list1)\n    return counter\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return dict(count)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for x in list1:\n        freq[x] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for item in list1:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2 = {}\n    for item in list1:\n        if item in list2:\n            list2[item] += 1\n        else:\n            list2[item] = 1\n    return list2\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict.keys():\n            freq_dict[i]+=1\n        else:\n            freq_dict[i]=1\n    return freq_dict\ndef compare_two(num1,num2):\n    '''\n    Given two strings, return if the two strings are equal.\n    However, if the lengths of the two strings are not the same, then return False\n    '''\n    if len(num1)==len(num2):\n        return num1==num2\n    else:\n        return False\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = collections.defaultdict(int)\n    for item in list1:\n        frequency[item] += 1\n    return frequency\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        dict1[i] = list1.count(i)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    res = collections.Counter(list1)\n    return res\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d1={}\n    for i in list1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    return d1\ndef get_min_freq(dic):\n    '''\n    Write a function to get the key of the dictionary with minimum value in it. If there is a tie, then print the first one.\n    '''\n    x=[]\n    for i in dic.keys():\n        x.append(dic[i])\n    return x.index(min(x))\ndef get_min_freq_obj(dic):\n    '''\n    Write a function to get the key of the dictionary with minimum value in it. If there is a tie, then print the first one.\n    '''\n    x=[]\n    for i in dic.keys():\n        x.append(dic[i])\n    return min(x)\ndef get_min_freq_key(dic):\n    '''\n    Write a function to get the key of the dictionary with minimum value in it. If there is a tie, then print the first one.\n    '''\n    x=[]\n    for i in dic.keys():\n        x.append(dic[i])\n    return dic.keys()[x.index(min(x))]\ndef freq_count_dic(dic):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, returned as a dictionary.\n    '''\n    d2={}\n    for i in dic.keys():\n        if dic[i] in d2:\n            d2[dic[i]]+=1\n        else:\n            d2[dic[i]]=1\n    return d2\ndef get_min_freq_dic(dic):\n    '''\n    Write a function to get the key of the dictionary with minimum value in it. If there is a tie, then print the first one.\n    '''\n    x=[]\n    for i in dic.keys():\n        x.append(dic[i])\n    return x.index(min(x))\ndef get_min_freq_dic_obj(dic):\n    '''\n    Write a function to get the key of the dictionary with minimum value in it. If there is a tie, then print the first one.\n    '''\n    x=[]\n    for i in dic.keys():\n        x.append(dic[i])\n    return min(x)\ndef get_min_freq_dic_key(dic):\n    '''\n    Write a function to get the key of the dictionary with minimum value in it. If there is a tie, then print the first one.\n    '''\n    x=[]\n    for i in dic.keys():\n        x.append(dic[i])\n    return dic.keys()[x.index(min(x))]\ndef sort_dict_by_freq(dic):\n    '''\n    Write a function to sort the dictionary by value.\n    '''\n    return sorted(dic.keys(),key=lambda x:dic[x])\ndef sort_dict_by_freq_obj(dic):\n    '''\n    Write a function to sort the dictionary by value.\n    '''\n    return sorted(dic.values(),key=lambda x:x)\ndef sort_dict_by_freq_key(dic):\n    '''\n    Write a function to sort the dictionary by value.\n    '''\n    return sorted(dic.keys(),key=lambda x:dic[x])\ndef sort_dict_by_freq_value(dic):\n    '''\n    Write a function to sort the dictionary by value.\n    '''\n    return sorted(dic.values(),key=lambda x:x)\ndef get_max_len(string1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    d={}\n    for i in string1.split():\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d.values())\ndef get_max_len_obj(string1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    d={}\n    for i in string1.split():\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d.values())\ndef get_max_len_key(string1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    d={}\n    for i in string1.split():\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d.keys(),key=lambda x:d[x])\ndef get_max_len_value(string1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    d={}\n    for i in string1.split():\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d.values())\ndef get_max_len_string(string1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    d={}\n    for i in string1.split():\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d,key=lambda x:d[x])\ndef get_max_len_dict(string1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    d={}\n    for i in string1.split():\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d.values())\ndef get_max_len_dict_obj(string1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    d={}\n    for i in string1.split():\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d.values())\ndef get_max_len_dict_key(string1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    d={}\n    for i in string1.split():\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d.keys(),key=lambda x:d[x])\ndef get_max_len_dict_value(string1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    d={}\n    for i in string1.split():\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d.values())\ndef get_max_len_dict_string(string1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    d={}\n    for i in string1.split():\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d,key=lambda x:d[x])\ndef get_max_len_dict_dict(string1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    d={}\n    for i in string1.split():\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d.values())\ndef get_max_len_dict_dict_obj(string1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    d={}\n    for i in string1.split():\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d.values())\ndef get_max_len_dict_dict_key(string1):\n    '''\n    Write a function to get th"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert type(N) == int\n    return min(range(1,N), key = lambda x:abs(x-N))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = list(range(1,N+1))\n    for i in range(len(num_list)-1):\n        for j in range(len(num_list)-1-i):\n            if num_list[j] > num_list[j+1]:\n                num_list[j], num_list[j+1] = num_list[j+1], num_list[j]\n    return num_list[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    i = 1\n    while i < N:\n        i *= 10\n    while i > 0:\n        if (N - i) > (N - (i / 10)):\n            N -= i\n        i /= 10\n    return N\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    start = 0\n    end = len(str(n))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    diff = n\n    \n    while n >= 0:\n        if diff > abs(n - closest_num(n - 1)):\n            diff = abs(n - closest_num(n - 1))\n        n -= 1\n        \n    print(str(closest_num(n)) +'is the closest smaller number than'+ str(n) + '.')\n    \ndef closest_num2(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    if N == 1:\n        return -1\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    \n    n = int(input('Please enter an integer: '))\n    \n    diff = 1\n    \n    for i in range(1, n):\n        if diff > abs(n - closest_num2(i)):\n            diff = abs(n - closest_num2(i))\n            n -= 1\n            \n    print(str(closest_num2(n)) +'is the closest smaller number than'+ str(n) + '.')\n    \ndef closest_num3(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    numbers = []\n    \n    if n == 1:\n        return -1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    \n    diff = 1\n    \n    for i in range(1, n):\n        numbers.append(i)\n        numbers.append(n - i)\n        \n    numbers.sort()\n    \n    for i in range(0, len(numbers) - 1):\n        if abs(numbers[i] - closest_num3(numbers[i])) < diff:\n            diff = abs(numbers[i] - closest_num3(numbers[i]))\n            n -= 1\n            \n    print(str(closest_num3(n)) +'is the closest smaller number than'+ str(n) + '.')\n    \ndef get_smallest_num(N):\n    '''\n    Write a function to find the smallest number in the array.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    arr = []\n    \n    for i in range(1, n + 1):\n        arr.append(i)\n        \n    print(str(min(arr)) +'is the smallest number in the array.')\n    \ndef get_smallest_num2(N):\n    '''\n    Write a function to find the smallest number in the array.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    arr = []\n    \n    for i in range(1, n + 1):\n        arr.append(i)\n        \n    arr.sort()\n    \n    print(str(arr[0]) +'is the smallest number in the array.')\n    \ndef get_smallest_num3(N):\n    '''\n    Write a function to find the smallest number in the array.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    arr = []\n    \n    for i in range(1, n + 1):\n        arr.append(i)\n        \n    arr.sort()\n    \n    print(str(arr[0]) +'is the smallest number in the array.')\n    \ndef get_smallest_num4(N):\n    '''\n    Write a function to find the smallest number in the array.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    arr = []\n    \n    for i in range(1, n + 1):\n        arr.append(i)\n        \n    arr.sort()\n    \n    print(str(arr[0]) +'is the smallest number in the array.')\n    \ndef get_smallest_num5(N):\n    '''\n    Write a function to find the smallest number in the array.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    arr = []\n    \n    for i in range(1, n + 1):\n        arr.append(i)\n        \n    arr.sort()\n    \n    print(str(arr[0]) +'is the smallest number in the array.')\n    \ndef remove_smallest(N):\n    '''\n    Write a function to remove the smallest number in the array.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    arr = []\n    \n    for i in range(1, n + 1):\n        arr.append(i)\n        \n    arr.sort()\n    \n    print(str(arr[n - 1]) +'is the smallest number in the array.')\n    \n    arr.remove(arr[n - 1])\n    \n    print(str(arr[n - 1]) +'is the smallest number in the array.')\n    \ndef remove_smallest2(N):\n    '''\n    Write a function to remove the smallest number in the array.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    arr = []\n    \n    for i in range(1, n + 1):\n        arr.append(i)\n        \n    arr.sort()\n    \n    print(str(arr[n - 1]) +'is the smallest number in the array.')\n    \n    for i in range(n - 1):\n        arr.remove(arr[0])\n    \n    print(str(arr[0]) +'is the smallest number in the array.')\n    \ndef remove_smallest3(N):\n    '''\n    Write a function to remove the smallest number in the array.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    arr = []\n    \n    for i in range(1, n + 1):\n        arr.append(i)\n        \n    arr.sort()\n    \n    print(str(arr[n - 1]) +'is the smallest number in the array.')\n    \n    for i in range(n - 1):\n        arr.remove(arr[0])\n    \n    print(str(arr[0]) +'is the smallest number in the array.')\n    \ndef remove_smallest4(N):\n    '''\n    Write a function to remove the smallest number in the array.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    arr = []\n    \n    for i in range(1, n + 1):\n        arr.append(i)\n        \n    arr.sort()\n    \n    print(str(arr[n - 1]) +'is the smallest number in the array.')\n    \n    for i in range(n - 1):\n        arr.remove(arr[0])\n    \n    print(str(arr[0]) +'is the smallest number in the array.')\n    \ndef remove_smallest5(N):\n    '''\n    Write a function to remove the smallest number in the array.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    arr = []\n    \n    for i in range(1, n + 1):\n        arr.append(i)\n        \n    arr.sort()\n    \n    print(str(arr[n - 1]) +'is the smallest number in the array.')\n    \n    for i in range(n - 1):\n        arr.remove(arr[0])\n    \n    print(str(arr[0]) +'is the smallest number in the array.')\n    \ndef remove_smallest6(N):\n    '''\n    Write a function to remove the smallest number in the array.\n    '''\n    \n    n = int(input('Please enter an integer: '))\n    \n    arr = []\n    \n    for i in range(1, n + 1):\n        arr.append(i)\n        \n    arr.sort()\n    \n    print(str(arr[n - 1]) +'is the smallest number in the array.')\n    \n    for i in range(n - 1):\n        arr.remov"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < -1:\n        return None\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return int(str(N)[:-1] + \"9\")\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(N-1, min([int(str(N)[i]) for i in range(len(str(N))-1, -1, -1)]))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 3:\n        return 1\n    diff_list = [abs(N-i) for i in range(1,N)]\n    min_index = diff_list.index(min(diff_list))\n    if min_index!= 0:\n        return diff_list[min_index-1]+1\n    return diff_list[min_index]+1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = float('inf')\n    min = 0\n    for i in xrange(len(N)):\n        for j in xrange(i):\n            if abs(N[i] - N[j]) < diff:\n                diff = abs(N[i] - N[j])\n                min = N[j]\n    return min\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for item in list1:\n        if len(item) > length:\n            length = len(item)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    mylist = []\n    for i in list1:\n        mylist.append(len(i))\n    return max(mylist)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        return 1+len_log(list1[1:])\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = 0\n    for i in list1:\n        if len(i) > longest_word:\n            longest_word = len(i)\n    print(\"Length of the longest word is {}\".format(longest_word))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = [len(x) for x in list1]\n    len_longest = len_list[0]\n    for i in range(len(len_list)):\n        if len_list[i] > len_longest:\n            len_longest = len_list[i]\n    print(len_longest)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = []\n    for word in list1:\n        len_list.append(len(word))\n    return max(len_list)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxi=0\n    for i in list1:\n        if len(i)>maxi:\n            maxi=len(i)\n    print \"Length of longest word is : \",maxi\n    return maxi\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for x in list1:\n        if len(x) > longest:\n            longest = len(x)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = len(max(list1,key = len))\n    return words\n    \n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n    \ndef main():\n    print(find_substring(\"Python\", \"th\"))\n    print(find_substring(\"Python\", \"pn\"))\n    print(find_substring(\"Python\", \"py\"))\n    print(find_substring(\"Python\", \"phython\"))\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return \"Found\"\n    else:\n        return \"Not Found\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for each in str1:\n        if each in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for sub_str in str1:\n        if sub_str in str1:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    result = []\n    for i in range(len(str1)-sub_str_len):\n        if str1[i:sub_str_len + i] == sub_str:\n            result.append(str1[i:sub_str_len + i])\n    return result\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    matches = []\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            matches.append(str1[i:i+len(sub_str)])\n    return matches\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # l = len(sub_str)\n    # if len(str1)<l:\n    #     return False\n    # for i in xrange(len(str1)-l+1):\n    #     if str1[i:i+l]==sub_str:\n    #         return True\n    # return False\n    sub_str_set = set(sub_str)\n    return any(True for i in str1 if i in sub_str_set)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    return any([s in str1 for s in sub_str])\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n == 1) or (n == 2):\n        return True\n    for i in range(2, n):\n        if (i * (i + 1)) % (n - 1) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    num_digits = len(str(n))\n    \n    \n    def generate_string(num_digits, num_zeros, init_val = 0):\n        return num_digits * str(init_val) + num_zeros * '0'\n    \n    \n    def get_all_permutations(string, start, end):\n        if start >= end:\n            return [string]\n        \n        permutations = []\n        for i in range(start, end):\n            left = string[:i]\n            right = string[i + 1:]\n            \n            for perm in get_all_permutations(left + right, start, end):\n                permutations.append(left + right + perm)\n        \n        return permutations\n    \n    \n    def is_valid_permutation(perm):\n        num_unique = len(set(perm))\n        if num_unique == num_digits:\n            return True\n        else:\n            return False\n    \n    \n    def is_valid_permutation_2(perm):\n        for i in range(0, len(perm) - 1):\n            if perm[i] > perm[i + 1]:\n                return False\n        return True\n    \n    \n    def is_valid_permutation_3(perm):\n        perm_dict = {}\n        for i in range(len(perm)):\n            if perm[i] not in perm_dict:\n                perm_dict[perm[i]] = 0\n            perm_dict[perm[i]] += 1\n        \n        for key in perm_dict:\n            if perm_dict[key] > 1:\n                return False\n        \n        return True\n    \n    \n    def is_valid_permutation_4(perm):\n        if len(set(perm)) < len(perm):\n            return False\n        \n        perm_dict = {}\n        for i in range(len(perm)):\n            if perm[i] not in perm_dict:\n                perm_dict[perm[i]] = 0\n            perm_dict[perm[i]] += 1\n        \n        for key in perm_dict:\n            if perm_dict[key] > 1:\n                return False\n        \n        return True\n    \n    \n    def is_valid_permutation_5(perm):\n        if len(perm) < len(set(perm)):\n            return False\n        \n        perm_dict = {}\n        for i in range(len(perm)):\n            if perm[i] not in perm_dict:\n                perm_dict[perm[i]] = 0\n            perm_dict[perm[i]] += 1\n        \n        for key in perm_dict:\n            if perm_dict[key] > 1:\n                return False\n        \n        return True\n    \n    \n    def is_valid_permutation_6(perm):\n        return len(perm) == len(set(perm))\n    \n    \n    def is_valid_permutation_7(perm):\n        perm_dict = {}\n        for i in range(len(perm)):\n            if perm[i] not in perm_dict:\n                perm_dict[perm[i]] = 0\n            perm_dict[perm[i]] += 1\n        \n        for key in perm_dict:\n            if perm_dict[key] > 1:\n                return False\n        \n        return True\n    \n    \n    def is_valid_permutation_8(perm):\n        if len(perm) < len(set(perm)):\n            return False\n        \n        perm_dict = {}\n        for i in range(len(perm)):\n            if perm[i] not in perm_dict:\n                perm_dict[perm[i]] = 0\n            perm_dict[perm[i]] += 1\n        \n        for key in perm_dict:\n            if perm_dict[key] > 1:\n                return False\n        \n        return True\n    \n    \n    def is_valid_permutation_9(perm):\n        perm_dict = {}\n        for i in range(len(perm)):\n            if perm[i] not in perm_dict:\n                perm_dict[perm[i]] = 0\n            perm_dict[perm[i]] += 1\n        \n        for key in perm_dict:\n            if perm_dict[key] > 1:\n                return False\n        \n        return True\n    \n    \n    def is_valid_permutation_10(perm):\n        return len(perm) == len(set(perm))\n    \n    \n    def is_valid_permutation_11(perm):\n        return len(perm) < len(set(perm))\n    \n    \n    def is_valid_permutation_12(perm):\n        perm_dict = {}\n        for i in range(len(perm)):\n            if perm[i] not in perm_dict:\n                perm_dict[perm[i]] = 0\n            perm_dict[perm[i]] += 1\n        \n        for key in perm_dict:\n            if perm_dict[key] > 1:\n                return False\n        \n        return True\n    \n    \n    def is_valid_permutation_13(perm):\n        if len(perm) < len(set(perm)):\n            return False\n        \n        perm_dict = {}\n        for i in range(len(perm)):\n            if perm[i] not in perm_dict:\n                perm_dict[perm[i]] = 0\n            perm_dict[perm[i]] += 1\n        \n        for key in perm_dict:\n            if perm_dict[key] > 1:\n                return False\n        \n        return True\n    \n    \n    def is_valid_permutation_14(perm):\n        return len(perm) == len(set(perm))\n    \n    \n    def is_valid_permutation_15(perm):\n        return len(perm) < len(set(perm))\n    \n    \n    def is_valid_permutation_16(perm):\n        return len(perm) < len(set(perm))\n    \n    \n    def is_valid_permutation_17(perm):\n        perm_dict = {}\n        for i in range(len(perm)):\n            if perm[i] not in perm_dict:\n                perm_dict[perm[i]] = 0\n            perm_dict[perm[i]] += 1\n        \n        for key in perm_dict:\n            if perm_dict[key] > 1:\n                return False\n        \n        return True\n    \n    \n    def is_valid_permutation_18(perm):\n        if len(perm) < len(set(perm)):\n            return False\n        \n        perm_dict = {}\n        for i in range(len(perm)):\n            if perm[i] not in perm_dict:\n                perm_dict[perm[i]] = 0\n            perm_dict[perm[i]] += 1\n        \n        for key in perm_dict:\n            if perm_dict[key] > 1:\n                return False\n        \n        return True\n    \n    \n    def is_valid_permutation_19(perm):\n        return len(perm) == len(set(perm))\n    \n    \n    def is_valid_permutation_20(perm):\n        return len(perm) < len(set(perm))\n    \n    \n    def is_valid_permutation_21(perm):\n        return len(perm) < len(set(perm))\n    \n    \n    def is_valid_permutation_22(perm):\n        if len(perm) < len(set(perm)):\n            return False\n        \n        perm_dict = {}\n        for i in range(len(perm)):\n            if perm[i] not in perm_dict:\n                perm_dict[perm[i]] = 0\n            perm_dict[perm[i]] += 1\n        \n        for key in perm_dict:\n            if perm_dict[key] > 1:\n                return False\n        \n        return True\n    \n    \n    def is_valid_permutation_23(perm):\n        if len(perm) < len(set(perm)):\n            return False\n        \n        perm_dict = {}\n        for i in range(len(perm)):\n            if perm[i] not in perm_dict:\n                perm_dict[perm[i]] = 0\n            perm_dict[perm[i]] += 1\n        \n        for key in perm_dict:\n            if perm_dict[key] > 1:\n                return False\n        \n        return True\n    \n    \n    def is_valid_per"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(1, len(s)):\n        if int(s[i-1]) < int(s[i]): return False\n    return True\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check whether the given number is a palindrome or not.\n    '''\n    s = str(n)\n    return s == s[::-1]\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if n < 2: return False\n    elif n == 2: return True\n    else:\n        for i in range(2, int(n/2)+1):\n            if n%i == 0: return False\n    return True\n    \ndef is_superprime(n):\n    '''\n    Write a function to check whether the given number is super prime or not.\n    '''\n    if n <= 1: return False\n    elif n == 2: return True\n    elif n%2 == 0: return False\n    else:\n        for i in range(3, int(n**(1/2))+1, 2):\n            if n%i == 0: return False\n    return True\n    \ndef is_strong_palin(n):\n    '''\n    Write a function to check whether the given number is a strong palindrome or not.\n    '''\n    return is_palindrome(n) and is_palin(n)\n    \ndef is_palin(n):\n    '''\n    Write a function to check whether the given number is a palindrome or not.\n    '''\n    s = str(n)\n    return s == s[::-1]\n    \ndef is_uniqu(n):\n    '''\n    Write a function to check whether the given number is unique or not.\n    '''\n    s = str(n)\n    for i in s:\n        if s.count(i)>1: return False\n    return True\n    \ndef is_palindromic(n):\n    '''\n    Write a function to check whether the given number is palindromic or not.\n    '''\n    s = str(n)\n    return s == s[::-1]\n    \ndef is_count_palindromic(n):\n    '''\n    Write a function to check whether the given number is count-palindromic or not.\n    '''\n    s = str(n)\n    for i in s:\n        if s.count(i)%2!= 0: return False\n    return True\n    \ndef is_smooth(n):\n    '''\n    Write a function to check whether the given number is smooth or not.\n    '''\n    s = str(n)\n    for i in range(1, len(s)):\n        if abs(int(s[i]) - int(s[i-1])) > 1: return False\n    return True\n    \ndef is_square(n):\n    '''\n    Write a function to check whether the given number is a square or not.\n    '''\n    s = str(n)\n    for i in range(1, int(len(s)**(1/2))+1):\n        if int(s[:i])**2!= int(s[i:i+i]): return False\n    return True\n    \ndef is_pandigital(n, s=9):\n    '''\n    Write a function to check whether the given number is pandigital or not.\n    '''\n    s = str(n)\n    for i in range(1, s+1):\n        if str(i) not in s: return False\n    return True\n    \ndef is_lychrel(n):\n    '''\n    Write a function to check whether the given number is lychrel or not.\n    '''\n    s = str(n)\n    for i in range(1, 50):\n        n += int(s)\n        if is_palindrome(n) and is_palin(n): return False\n    return True\n    \ndef is_perfect(n):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    s = str(n)\n    if n < 10: return False\n    else:\n        for i in range(1, int(n**(1/2))+1):\n            if n%i == 0: n += i\n        return n == int(n**(1/2))\n        \ndef is_smooth_divisor(n, s=5):\n    '''\n    Write a function to check whether the given number is smooth divisor or not.\n    '''\n    s = str(n)\n    for i in range(1, s+1):\n        if int(s[:i])%n!= 0: return False\n    return True\n    \ndef is_super_smooth_divisor(n, s=9):\n    '''\n    Write a function to check whether the given number is super smooth divisor or not.\n    '''\n    s = str(n)\n    for i in range(1, s+1):\n        if int(s[:i])%n!= 0: return False\n    return True\n    \ndef is_anagram(s, t):\n    '''\n    Write a function to check whether the two strings are anagram or not.\n    '''\n    return sorted(s) == sorted(t)\n    \ndef is_anagram_brute(s, t):\n    '''\n    Write a function to check whether the two strings are anagram or not.\n    '''\n    if len(s)!= len(t): return False\n    s = sorted(s)\n    t = sorted(t)\n    return s == t\n    \ndef is_anagram_dict(s, t):\n    '''\n    Write a function to check whether the two strings are anagram or not.\n    '''\n    if len(s)!= len(t): return False\n    s = sorted(s)\n    t = sorted(t)\n    d = dict()\n    for i in s:\n        if i in d: d[i] += 1\n        else: d[i] = 1\n    for i in t:\n        if i in d: d[i] -= 1\n        else: d[i] = 1\n    for i in d:\n        if d[i]!= 0: return False\n    return True\n    \ndef is_palin_perm(s):\n    '''\n    Write a function to check whether the given string is palindromic permutation or not.\n    '''\n    s = sorted(s)\n    for i in range(1, len(s)):\n        if s[i-1] > s[i]: return False\n    return True\n    \ndef is_palin_perm_dict(s):\n    '''\n    Write a function to check whether the given string is palindromic permutation or not.\n    '''\n    d = dict()\n    for i in s:\n        if i in d: d[i] += 1\n        else: d[i] = 1\n    for i in d:\n        if d[i]%2!= 0: return False\n    return True\n    \ndef is_fibonacci(n):\n    '''\n    Write a function to check whether the given number is fibonacci or not.\n    '''\n    if n == 0: return True\n    a, b = 0, 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return a == b\n    \ndef is_fibonacci_list(l):\n    '''\n    Write a function to check whether the given list is fibonacci or not.\n    '''\n    a, b = 0, 1\n    for i in l:\n        a, b = b, a+b\n    return a == b\n    \ndef is_fibonacci_brute(n):\n    '''\n    Write a function to check whether the given number is fibonacci or not.\n    '''\n    if n < 2: return True\n    a, b = 0, 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return a == b\n    \ndef is_fibonacci_dict(n):\n    '''\n    Write a function to check whether the given numbe"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def _helper(n, new_n, times):\n        if new_n == 1:\n            return True\n        if times > n:\n            return False\n        if n == 0:\n            return False\n        return _helper(n, new_n*2, times + 1) or _helper(n, new_n*3, times + 1)\n    return _helper(n, n, 0)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    divs = [1]\n    for i in range(2,n):\n        if n%i==0:\n            divs.append(i)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    if len(s) > 1:\n        if s[0] == s[1]:\n            return is_undulating(s[1:])\n        else:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    list1 = [1,2,3,4,5,6,7,8,9,10]\n    list2 = [1,3,5,7,9,11,13,15,17,19]\n    if n in list1:\n        return True\n    elif n in list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    for i in range(len(n)-1):\n        if n[i] == n[i+1]:\n            count = count + 1\n    if count > 1:\n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # def is_undulating(n): \n    #     if n==0: return True\n    #     return n%2 == 0 and is_undulating(n//2)\n    if n==1: return False\n    return n%2==0 and is_undulating(n//2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        return (power(a,b/2) * power(a,b/2))\n    else:\n        return (a * power(a,(b-1)/2) * power(a,(b-1)/2))\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return (power(a,b/2)**2)\n    else:\n        return a * power(a,b/2)**2\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    if b == 0:\n        return 1\n    if b < 0:\n        return 1/power(a,-b)\n    if b % 2 == 0:\n        return power(a*a,b//2)\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b == -1:\n        return 1.0/a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1.0/power(a,-b)\n    if b % 2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b>1:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b<0:\n        return 1/power(a,-b)\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b%2==0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #min_second = min(test_list, key = itemgetter(1))\n    #return min_second[0]\n    #1st, 2nd = min(test_list, key = lambda x: x[1])\n    #return 1st\n    #sorted_list = sorted(test_list, key = itemgetter(1))\n    #return sorted_list[0][0]\n    '''\n    given a list of tuples, write a function that returns the second value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key = itemgetter(1))\n    return sorted_list[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print (min(test_list, key = itemgetter(1)))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # YOUR CODE GOES HERE\n    min_element = [i for i in test_list if i[1] == min(test_list, key=itemgetter(1))[1]]\n    #print(min_element)\n    return min_element\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    result = sorted(test_list, key = itemgetter(1))\n    return result[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_of_min = []\n    for index,value in enumerate(test_list):\n        if index_of_min == []:\n            index_of_min = [index, value[1]]\n        elif value[1] < index_of_min[1]:\n            index_of_min = [index, value[1]]\n    return index_of_min[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 1:\n        return test_list[0][0]\n    list_of_tuples = list(map(itemgetter(1,0), test_list))\n    smallest_value = min(list_of_tuples)[0]\n    return smallest_value\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = 100\n    index_of_minimum = 0\n    for i in test_list:\n        if i[1] < minimum:\n            minimum = i[1]\n            index_of_minimum = test_list.index(i)\n    return test_list[index_of_minimum][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list = sorted(test_list, key=itemgetter(1))\n    return new_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    # test_list = sorted(test_list, key=itemgetter(1))\n    test_list = sorted(test_list, key=lambda x: x[1])\n    return test_list[0][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=lst[0]\n    for i in lst:\n        if min_length>i:\n            min_length=i\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst[0])\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst.sort()\n    return lst[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst[0])\n    for i in range(1, len(lst)):\n        if(len(lst[i]) < length):\n            length = len(lst[i])\n    return length\n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    length = len(lst[0])\n    for i in range(1, len(lst)):\n        if(len(lst[i]) > length):\n            length = len(lst[i])\n    return length\n    \ndef Find_Sum_List(lst):  \n    '''\n    Write a python function to find the sum of all the elements in a list.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for l in lst:\n        if len(l) < min_len:\n            min_len = len(l)\n    return min_len\n    \n    \ndef Find_Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \n    \ndef Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Find_Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Find_Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \n    \ndef Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Find_Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Find_Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Find_Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \n    \ndef Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Find_Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Find_Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef Find_Max_Width(lst):  \n    '''\n    Write a python function to find the width of the longest list in a list of lists.\n    '''"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst)==1:\n        return len(lst[0])\n    minn=len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i]) < minn:\n            minn=len(lst[i])\n    return minn\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    min_length = lst[0][0]\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 99999999999\n    for l in lst:\n        min_len = min(min_len,len(l))\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min_length = 999999\n    for lst in lst:\n        if len(lst) < Min_length:\n            Min_length = len(lst)\n    return Min_length\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    if n == 1:\n        return 1\n    count = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if count == 2:\n        return 2\n    return 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * divisor(n-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    i=2\n    res=0\n    while(i<=n):\n        if (n%i==0):\n            res=res+1\n        i=i+1\n    return res\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors = divisors + 1\n        i = i + 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 1:\n        return 0\n    return sum(1 for i in range(2,n) if n%i == 0) + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 2\n    divisors = 0\n    while (n % i!= 0):\n        i = i + 1\n    divisors = divisors + 1\n    return divisors\n    \ndef divisor_sum(n):\n    '''\n    Write a python function to find the divisor sum of a given integer.\n    '''\n    sum = 0\n    i = 1\n    while (i <= n):\n        if (n % i == 0):\n            sum = sum + i\n        i = i + 1\n    return sum\n    \ndef digsub_count(n):\n    '''\n    Write a python function to count the number of digits in a given integer.\n    '''\n    count = 0\n    while (n!= 0):\n        n = n // 10\n        count = count + 1\n    return count\n    \ndef power(x, y):\n    '''\n    Write a python function to compute the power of two numbers.\n    '''\n    answer = x ** y\n    return answer\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to compute the sum of digits of a given integer.\n    '''\n    sum = 0\n    while (n!= 0):\n        rem = n % 10\n        sum = sum + rem\n        n = n // 10\n    return sum\n    \ndef max_of_digits(n):\n    '''\n    Write a python function to compute the maximum of digits of a given integer.\n    '''\n    max = 0\n    while (n!= 0):\n        rem = n % 10\n        if (max < rem):\n            max = rem\n        n = n // 10\n    return max\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to compute the sum of digits of a given integer.\n    '''\n    sum = 0\n    while (n!= 0):\n        rem = n % 10\n        sum = sum + rem\n        n = n // 10\n    return sum\n    \ndef reverse(n):\n    '''\n    Write a python function to reverse a given integer.\n    '''\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    return rev\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == rev):\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check if a given integer is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while (n!= 0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if (temp == re"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    def divisor_count(n):\n        '''\n        Write a recursive function to count the number of divisors of a given integer.\n        '''\n        if n == 1:\n            return 1\n        elif n == 0:\n            return 1\n        else:\n            return divisor_count(n-1) + divisor_count(n-2)\n    # Function call\n    return divisor_count(n)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    div = [1, n]\n    \n    for i in xrange(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            div.append(i)\n            div.append(n / i)\n    \n    return sum(div)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n + divisor(n-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(2,n):\n        if n%i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary\n    freq = {}\n    for item in list1:\n        freq[item] = freq.get(item, 0) + 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in list1:\n        frequency_dict[i] = list1.count(i)\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for x in list1:\n        if x in dict1:\n            dict1[x] += 1\n        else:\n            dict1[x] = 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for x in list1:\n        if x in freq_dict:\n            freq_dict[x] += 1\n        else:\n            freq_dict[x] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    print('Given a flattened list of lists, the function should return a dictionary of the form:')\n    print('{element: frequency}')\n    print('\\nE.g. for [ [1, 2, 3, 4, 4], [1, 2, 3], [5, 6, 7], [1, 2, 3] ] the function should return:')\n    print({1: 2, 2: 3, 3: 3, 4: 4, 5: 1, 6: 1, 7: 1})\n    return\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    mydict = {}\n    for i in list1:\n        if i not in mydict:\n            mydict[i] = 1\n        else:\n            mydict[i] += 1\n    return mydict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for item in list1:\n        if item in dictionary:\n            dictionary[item] += 1\n        else:\n            dictionary[item] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # for each list, count the number of times the number appears\n    # add number to dictionary\n    # return dictionary\n    # print(list1)\n    # print(list1[0][0])\n    # print(type(list1))\n    # print(type(list1[0]))\n    # print(list1[0])\n    # print(list1[0][0])\n    # print(list1[0][0][0])\n    # print(list1[0][0][0][0])\n    # print(list1[0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    # print(list1[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]["
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for x in numbers:\n        result = result * x\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for number in numbers:\n        mul = mul * number\n    \n    return mul / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    number = 1\n    for x in numbers:\n        number = number * x\n    return number / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_length = len(numbers)\n    total_multiplied_number = 1\n    for number in numbers:\n        total_multiplied_number = total_multiplied_number * number\n    return total_multiplied_number / numbers_length\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return (sum(numbers) * 1.0) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x,y: x*y, numbers) / float(len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiply_num(numbers):  \n        total = 1\n        for n in numbers:\n            total *= n\n        return total\n    return multiply_num(numbers) / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    \n    binary = []\n    while n > 0:\n        binary.append(n%2)\n        n = n//2\n    \n    return ''.join(map(str, reversed(binary)))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    if n%2 == 1: \n        return decimal_to_binary(n//2) + \"1\"\n    return decimal_to_binary(n//2) + \"0\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = ''\n    if n == 0:\n        return '0'\n    while n > 0:\n        res = str(n % 2) + res\n        n = n // 2\n    return res\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return '0'\n    bit=''\n    while n:\n        bit=str(n%2)+bit\n        n=n/2\n    return bit\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    n = int(n)\n    while n:\n        binary.append(str(n%2))\n        n/=2\n    return ''.join(binary[::-1])\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    decimal_to_binary(n // 2)\n    if n % 2 == 1:\n        return '1' + result\n    else:\n        return '0' + result\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(int(n / 2))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return '0'\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 9223372036854775808:\n        return -1\n    else:\n        return int(str(num)+str(num)[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num),0,-1):\n        for j in range(len(num)-i+1):\n            if num[j:j+i] == num[j:j+i][::-1]:\n                return int(num[:j]+num[j+i:]+num[j:j+i][::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    start = 0\n    end = len(num)-1\n    while start<end:\n        if int(num[start])%2==0 and int(num[end])%2==1:\n            return int(num[:start]+num[start+1:end+1]+'0'+num[end])\n        elif int(num[start])%2==1 and int(num[end])%2==0:\n            return int(num[:start]+num[start+1:end+1]+'1'+num[end])\n        elif int(num[start])%2==0 and int(num[end])%2==0:\n            if int(num[start+1])>int(num[end]):\n                return int(num[:start]+'0'+num[start+1:end+1]+'1'+num[end])\n            else:\n                return int(num[:start]+'0'+num[start+1:end+1]+'0'+num[end])\n        else:\n            if int(num[start+1])>int(num[end]):\n                return int(num[:start]+'1'+num[start+1:end+1]+'0'+num[end])\n            else:\n                return int(num[:start]+'1'+num[start+1:end+1]+'1'+num[end])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num > 999999:\n        return -1\n    elif num < 100:\n        return -1\n    else:\n        num2 = int(str(num)+str(num)[::-1])\n        if num2 > 999999:\n            return -1\n        elif num2 < 100:\n            return -1\n        else:\n            return num2\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    length = len(num_string)\n    if length % 2 == 0:\n        middle = length / 2\n        if num_string[:middle][::-1] == num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1])\n        elif num_string[:middle][::-1] < num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1])\n        else:\n            return int(num_string[:middle] + num_string[middle:] + num_string[:middle][::-1])\n    else:\n        middle = length / 2\n        if num_string[:middle][::-1] == num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1] + num_string[middle:][::-1])\n        elif num_string[:middle][::-1] < num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1] + num_string[middle:][::-1])\n        else:\n            return int(num_string[:middle] + num_string[middle:] + num_string[:middle][::-1] + num_string[middle:][::-1])\ndef is_palindrome(num):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    num_string = str(num)\n    length = len(num_string)\n    if length % 2 == 0:\n        middle = length / 2\n        if num_string[:middle][::-1] == num_string[middle:][::-1]:\n            return True\n        else:\n            return False\n    else:\n        middle = length / 2\n        if num_string[:middle][::-1] == num_string[middle:][::-1]:\n            return True\n        else:\n            return False\ndef find_nth_palindrome(n):\n    '''\n    Write a function to find the nth palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(n)\n    length = len(num_string)\n    if length % 2 == 0:\n        middle = length / 2\n        if num_string[:middle][::-1] == num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1])\n        elif num_string[:middle][::-1] < num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1])\n        else:\n            return int(num_string[:middle] + num_string[middle:] + num_string[:middle][::-1])\n    else:\n        middle = length / 2\n        if num_string[:middle][::-1] == num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1] + num_string[middle:][::-1])\n        elif num_string[:middle][::-1] < num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1] + num_string[middle:][::-1])\n        else:\n            return int(num_string[:middle] + num_string[middle:] + num_string[:middle][::-1] + num_string[middle:][::-1])\ndef find_next_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    length = len(num_string)\n    if length % 2 == 0:\n        middle = length / 2\n        if num_string[:middle][::-1] == num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1])\n        elif num_string[:middle][::-1] < num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1])\n        else:\n            return int(num_string[:middle] + num_string[middle:] + num_string[:middle][::-1])\n    else:\n        middle = length / 2\n        if num_string[:middle][::-1] == num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1] + num_string[middle:][::-1])\n        elif num_string[:middle][::-1] < num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1] + num_string[middle:][::-1])\n        else:\n            return int(num_string[:middle] + num_string[middle:] + num_string[:middle][::-1] + num_string[middle:][::-1])\ndef find_next_palindrome_seq(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    length = len(num_string)\n    if length % 2 == 0:\n        middle = length / 2\n        if num_string[:middle][::-1] == num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1])\n        elif num_string[:middle][::-1] < num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1])\n        else:\n            return int(num_string[:middle] + num_string[middle:] + num_string[:middle][::-1])\n    else:\n        middle = length / 2\n        if num_string[:middle][::-1] == num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1] + num_string[middle:][::-1])\n        elif num_string[:middle][::-1] < num_string[middle:][::-1]:\n            return int(num_string[:middle][::-1] + num_string[middle:] + num_string[:middle][::-1] + num_string[middle:][::-1])\n        else:\n            return int(num_string[:middle] + num_string[middle:] + num_string[:middle][::-1] + num_string[middle:][::-1])\ndef is_palin_perm(num):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    num_string = str(num)\n    length = len(num_string)\n    if length % 2 == 0:\n        middle = length / 2\n        if num_string[:middle][::-1] == num_string[middle:][::-1]:\n            return True\n        else:\n            return False\n    else:\n    "
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\ndef is_palindrome(num):\n    '''\n    Write a function that takes a positive integer as a parameter and returns True if the integer is a palindrome,\n    and False otherwise.\n    '''\n    reverse = 0\n    temp = num\n    while num!= 0:\n        remainder = num % 10\n        reverse = reverse * 10 + remainder\n        num = num // 10\n    if temp == reverse:\n        return True\n    else:\n        return False\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string, with the exception that the spaces are included in the reversed string.\n    '''\n    reverse = ''\n    length = len(string)\n    for i in range(length - 1, -1, -1):\n        reverse += string[i]\n    return reverse\ndef is_pandigital(num):\n    '''\n    Write a function that takes a number and returns True if the number is pandigital,\n    that is, it contains all the digits 1 to 9 exactly once.\n    '''\n    string = str(num)\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for digit in digits:\n        if string.count(str(digit))!= 1:\n            return False\n    return True\ndef get_next_pandigital(num):\n    '''\n    Write a function that takes a number and returns the next pandigital number that can be formed by adding\n    all the digits of the input number. If there is no such number, return 0.\n    '''\n    num += 1\n    while not is_pandigital(num):\n        num += 1\n    return num\ndef get_pandigital_products(digits):\n    '''\n    Write a function to find all the products of the numbers in a list of digits.\n    '''\n    products = []\n    for digit1 in digits:\n        for digit2 in digits:\n            products.append(digit1 * digit2)\n    return products\ndef get_pandigital_products_of_length(num, length):\n    '''\n    Write a function to find all the products of the numbers in a list of digits that have the specified length.\n    '''\n    products = []\n    for i in range(1, 10 ** length):\n        num1 = list(str(i))\n        num2 = list(str(num))\n        if len(num1) < length:\n            num1 += [0] * (length - len(num1))\n        if len(num2) < length:\n            num2 += [0] * (length - len(num2))\n        if num1 == num2:\n            products.append(i)\n    return products\ndef is_anagram(word1, word2):\n    '''\n    Write a function that takes two strings and returns True if they are anagrams, and False otherwise.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    for letter in word1:\n        if word1.count(letter)!= word2.count(letter):\n            return False\n    return True\ndef get_anagrams(string):\n    '''\n    Write a function that takes a string and returns a list of all the possible anagrams of the string.\n    '''\n    anagrams = []\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            anagram = []\n            for k in range(len(string)):\n                anagram.append(string[k])\n            anagram[i], anagram[j] = anagram[j], anagram[i]\n            if is_anagram(''.join(anagram), string):\n                if ''.join(anagram) not in anagrams:\n                    anagrams.append(''.join(anagram))\n    return anagrams\ndef partition_string(string):\n    '''\n    Write a function to partition a string into three pieces at most.\n    '''\n    # the first substring is the same as the original string\n    first = string\n    # the last substring is a single character\n    last = first[-1]\n    second = first[:-1]\n    # the middle substring is the same length as the first substring\n    while len(second)!= len(first):\n        second += last\n    middle = second[:-1]\n    # the first substring is the original string\n    first = string\n    # the second substring is the original string minus the first substring\n    second = string[len(first):]\n    # the third substring is the original string minus the first and second substring\n    third = string[len(first):-len(second)]\n    return [first, second, third]\ndef rle(string):\n    '''\n    Write a function to encode a string using run-length encoding.\n    '''\n    encoded = ''\n    i = 1\n    count = 1\n    for j in range(1, len(string)):\n        if string[j]!= string[j - 1]:\n            encoded += str(count) + string[j - 1]\n            i = j\n            count = 1\n        else:\n            count += 1\n    encoded += str(count) + string[i - 1]\n    return encoded\ndef decode_rle(string):\n    '''\n    Write a function to decode a run-length encoded string into the original string.\n    '''\n    decoded = ''\n    for i in range(len(string)):\n        if string[i].isdigit():\n            count = int(string[i])\n            if string[i + 1].isalpha():\n                decoded += string[i + 1] * count\n        else:\n            decoded += string[i]\n    return decoded\ndef palindrome_in_list(string):\n    '''\n    Write a function that takes a string and returns the index of the first character that is a palindrome.\n    '''\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            return i\n    return -1\ndef palindrome_in_list_efficient(string):\n    '''\n    Write a function that takes a string and returns the index of the first character that is a palindrome.\n    '''\n    for i in range(len(string) // 2):\n        if string[i]!= string[len(string) - i - 1]:\n            return i\n    return -1\ndef is_binary(num):\n    '''\n    Write a function that takes a number and returns True if the number is a binary number,\n    and False otherwise.\n    '''\n    num = list(str(num))\n    for i in range(len(num)):\n        if not num[i].isdigit():\n            return False\n    return True\ndef find_binary_in_list(num):\n    '''\n    Write a function to find the index of the first digit that is a 1 in a binary number.\n    '''\n    for i in range(len(num)):\n        if num[i] == '1':\n            return i\n    return -1\ndef add_binary_numbers(num1, num2):\n    '''\n    Write a function to add two binary numbers.\n    '''\n    num1 = list(num1)\n    num2 = list(num2)\n    for i in range(max(len(num1), len(num2))):\n        if i >= len(num1):\n            num1.insert(0, 0)\n        if i >= len(num2):\n            num2.insert(0, 0)\n    carry = 0\n    result = []\n    for i in range(len(num1) - 1, -1, -1):\n        if num1[i] + num2[i] + carry >= 2:\n            result.append(1)\n            carry = 1\n        else:\n            result.append(0)\n            carry = 0\n    if carry == 1:\n        result.append(1)\n    result.reverse()\n    return ''.join(str(i) for i in result)\ndef find_duplicate_num(num_list):\n    '''\n    Write a function that takes a list of numbers and returns the index of the duplicate number.\n    '''\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    x = num\n    x += 1\n    while not is_palindrome(x):\n        x += 1\n    return x\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\ndef reverse(num):\n    return num[::-1]\ndef next_bigger(n):\n    '''\n    Given a positive integer, output its next bigger number. If it's already bigger than the maximum integer, then return the maximum integer.\n    '''\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    x = list(str(n))\n    x = reverse(x)\n    if x[0] == '9':\n        return 0\n    index = 0\n    while x[index] >= '9':\n        index += 1\n    if index == len(x):\n        return 0\n    else:\n        new_x = x[:index]\n        new_x.append('9'*(len(x)-index))\n        return int(''.join(new_x))\ndef get_keys(dic):\n    return dic.keys()\ndef min_in_dict(dic):\n    min_val = sys.maxint\n    min_key = None\n    for key in dic:\n        if dic[key] < min_val:\n            min_val = dic[key]\n            min_key = key\n    return min_key, min_val\ndef max_in_dict(dic):\n    max_val = -sys.maxint\n    max_key = None\n    for key in dic:\n        if dic[key] > max_val:\n            max_val = dic[key]\n            max_key = key\n    return max_key, max_val\ndef is_prime(num):\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num%2 == 0:\n        return False\n    else:\n        x = 3\n        while x * x <= num:\n            if num % x == 0:\n                return False\n            x += 2\n        return True\ndef digits(num):\n    return len(str(num))\ndef is_happy_number(num):\n    x = []\n    while num!= 1:\n        x.append(num%10)\n        num /= 10\n    x = sum(map(lambda y: y**2, x))\n    if x == 1:\n        return True\n    else:\n        return False\ndef is_armstrong_number(num):\n    x = num\n    x = sum(map(lambda y: y**digits(num), range(1, num)))\n    if x == num:\n        return True\n    else:\n        return False\ndef is_perfect_square(num):\n    x = num\n    if x < 0:\n        x = -x\n    if x == 1:\n        return True\n    if x**(1/2) == int(x**(1/2)):\n        return True\n    else:\n        return False\ndef is_perfect_square(num):\n    return num**0.5 == int(num**0.5)\ndef is_power(num, base):\n    if num == 1:\n        return True\n    if num == base:\n        return True\n    if num < base:\n        return False\n    return is_power(num/base, base)\ndef get_sum_of_factors(num):\n    x = []\n    for i in range(1, num+1):\n        if num%i == 0:\n            x.append(i)\n    return sum(x)\ndef get_factor_sum_of_power(num, pow):\n    x = []\n    for i in range(1, num+1):\n        if num%i == 0:\n            if pow == 1:\n                x.append(i)\n            else:\n                if pow%2 == 0:\n                    if pow == pow/2:\n                        x.append(i)\n                else:\n                    if pow%2!= 0:\n                        if pow == pow*3 + 1:\n                            x.append(i)\n    return sum(x)\ndef get_factors(num):\n    x = []\n    for i in range(1, num+1):\n        if num%i == 0:\n            x.append(i)\n    return x\ndef is_prime_list(num):\n    for i in range(2, num+1):\n        if num%i == 0:\n            return False\n    return True\ndef is_prime_factor(num, base):\n    x = []\n    for i in range(1, base+1):\n        if num%i == 0:\n            x.append(i)\n    if sum(x) == num:\n        return True\n    else:\n        return False\ndef is_perfect_power(num):\n    if is_perfect_square(num) == True:\n        return True\n    else:\n        return False\ndef is_perfect_power_digits(num):\n    if is_perfect_power(num) == True:\n        return digits(num)\n    else:\n        return False\ndef is_perfect_power_perm(num):\n    x = []\n    for i in range(1, num):\n        if num%i == 0:\n            x.append(i)\n    if num == sum(x):\n        return True\n    else:\n        return False\ndef is_perfect_power_perm_digits(num):\n    if is_perfect_power_perm(num) == True:\n        return digits(num)\n    else:\n        return False\ndef get_perfect_power_perm(num):\n    x = []\n    for i in range(1, num):\n        if num%i == 0:\n            x.append(i)\n    return sum(x)\ndef get_perfect_power_perm_digits(num):\n    if is_perfect_power_perm(num) == True:\n        return digits(num)\n    else:\n        return False\ndef get_perfect_power(num):\n    if is_perfect_square(num) == True:\n        return num**(1/2)\n    else:\n        return False\ndef is_all_digits_same(num):\n    if num < 0:\n        num = -num\n    num = str(num)\n    x = 0\n    while x < len(num):\n        if num[x]!= num[0]:\n            return False\n        x += 1\n    return True\ndef is_all_digits_same_perm(num):\n    x = []\n    for i in range(1, num):\n        if num%i == 0:\n            x.append(i)\n    if num == sum(x):\n        return True\n    else:\n        return False\ndef is_all_digits_same_perm_digits(num):\n    if is_all_digits_same_perm(num) == True:\n        return digits(num)\n    else:\n        return False\ndef get_all_factors(num):\n    x = []\n    for i in range(1, num+1):\n        if num%i == 0:\n            x.append(i)\n    return x\ndef get_all_factors_perm(num):\n    x = []\n    for i in range(1, num):\n        if num%i == 0:\n            x.append(i)\n    return x\ndef get_all_factors_perm_digits(num):\n    if is_all_digits_same_perm(num) == True:\n        return digits(num)\n    else:\n        return False\ndef is_all_prime_factors(num):\n    x = get_all_factors(num)\n    for i in x:\n        if is_prime_factor(num, i) == False:\n            return False\n    return True\ndef is_all_prime_factors_perm(num):\n    x = get_all_factors_perm(num)\n    for i in x:\n        if is_prime_factor(num, i) == False:\n            return False\n    return True\ndef is_all_prime_factors_perm_digits(num):\n    if is_all_prime_factors_perm(num) == True:\n        return digits(num)\n    else:\n        return False\ndef get_all_prime_fac"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return sorted(arr)[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    n = len(arr)\n    \n    if k <= n/2:\n        return recursive_helper(arr, k, 0, n - 1)\n    else:\n        return recursive_helper(arr, k - n + 1, 0, n - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == []:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if k == 1:\n        return arr[0]\n    if k == len(arr):\n        return arr[len(arr)-1]\n    pivot = find_pivot(arr)\n    if k > pivot:\n        arr = arr[pivot+1:]\n        return kth_element(arr,k)\n    else:\n        arr = arr[:pivot]\n        return kth_element(arr,k)\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if k is within bounds\n    if k > len(arr):\n        print(\"Error: k is out of bounds!\")\n        return\n    # return the kth element\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i, x in enumerate(arr):\n        if i == k-1:\n            return x\n    \ndef kth_element_index(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 0-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    l = word.split('_')\n    return l[0] + \"\".join(x.title() for x in l[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == \"\":\n        return \"\"\n    # word_array = word.split('_')\n    # first_char = word_array[0]\n    # camel_word = first_char.upper()\n    # for i in range(1, len(word_array)):\n    #     camel_word += word_array[i].lower()\n    # return camel_word\n    return word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) < 2:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if '_' not in word:\n        return word\n    else:\n        word = word.replace('_','')\n        word = word.split()\n        return ''.join([word[0].capitalize()] + [i.capitalize() for i in word[1:]])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return ''\n    # there is no first letter\n    first_letter = word[0]\n    if first_letter.isupper():\n        return word\n    else:\n        return word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    if word == '':\n        return word\n    if word[0].isupper():\n        result = word[0].lower()\n    else:\n        result = word[0].upper()\n    return result + snake_to_camel(word[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # word = word.lower()\n    # temp = word.split('_')\n    # temp = ''.join(temp)\n    # temp = temp.replace('-','')\n    # temp = temp.capitalize()\n    # return temp\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    else:\n        return n + eulerian_num(n - 1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    return n * eulerian_num(n-1, m) + m * eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        n, m = m, n\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    c = 0\n    for i in range(n):\n        for j in range(i, n):\n            if gcd(i, j) == 1:\n                c += 1\n    return c\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        n, m = m, n\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    if n == 1:\n        return m\n    return eulerian_num(n-1, m) + m*(m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    if m == 0:\n        return n\n    if n > m:\n        return eulerian_num(n - 1, m) + m\n    else:\n        return eulerian_num(n, m - 1) + n\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i + j == n and (i & 1 == 0 and j & 1 == 0):\n                count += 1\n    return count\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = n\n    for i in range(m):\n        res *= (n - i)\n    return res\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0: return 1\n    if m == 0: return 1\n    if n == 1: return m\n    if m == 1: return n\n    else: return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m - n + m - 1\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    final_list = []\n    for elem in input_list:\n        elem.sort()\n        final_list.append(elem)\n    return final_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    return [[s[i] for s in input_list] for i in range(len(input_list[0]))]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #pass\n    output_list = []\n    for each in input_list:\n        output_list.append(sorted(each))\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        input_list[i] = sorted(sublist)\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return_list = []\n    for index, sublist in enumerate(input_list):\n        return_list.append(sorted(sublist))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return_list = []\n    for i in input_list:\n        return_list.append(sorted(i))\n    return return_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index in range(0, len(input_list)):\n        input_list[index].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def inner_sort(sublist):\n        sublist.sort()\n        return sublist\n    return [inner_sort(sublist) for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # return sorted(input_list)\n    # Instead of using a list, a new list of sorted lists would be better.\n    return [[sorted(string) for string in sublist] for sublist in input_list]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    true_count=0\n    for i in lst:\n        if i == True:\n            true_count+=1\n    return true_count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # if lst is True or lst is False return 1 else return 0\n    # return lst.count(True) + lst.count(False)\n    return sum([x for x in lst if x])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    # Make a copy of lst\n    lst1 = lst[:]\n    \n    # Set initial count to zero\n    count = 0\n    \n    # For each element in lst1, check if it is True.\n    # If it is, then increment the count.\n    for element in lst1:\n        if element:\n            count += 1\n    \n    # Return the count\n    return count\n    "
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i==True])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(x for x in lst if x == True)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for ele in lst:\n        if ele == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(1 for i in lst if type(i) == bool)\n    \ndef duplicates(lst):   \n    '''\n    Write a python function to find duplicates in the given list.\n    '''\n    return [x for x in lst if lst.count(x) > 1]\n    \ndef frequency(lst):   \n    '''\n    Write a python function to find the frequency of each element in the given list.\n    '''\n    return [lst.count(x) for x in set(lst)]\n    \ndef findMin(lst):   \n    '''\n    Write a python function to find the minimum value in the given list.\n    '''\n    return min(lst)\n    \ndef findMax(lst):   \n    '''\n    Write a python function to find the maximum value in the given list.\n    '''\n    return max(lst)\n    \ndef sortList(lst):   \n    '''\n    Write a python function to sort the given list.\n    '''\n    return sorted(lst)\n    \ndef reverseList(lst):   \n    '''\n    Write a python function to reverse the given list.\n    '''\n    return lst[::-1]\n    \ndef reverse(lst):   \n    '''\n    Write a python function to reverse the given string.\n    '''\n    return lst[::-1]\n    \ndef getLarger(lst):   \n    '''\n    Write a python function to get the larger values in the given list.\n    '''\n    return [x for x in lst if x > lst[0]]\n    \ndef getSmaller(lst):   \n    '''\n    Write a python function to get the smaller values in the given list.\n    '''\n    return [x for x in lst if x < lst[0]]\n    \ndef removeDuplicate(lst):   \n    '''\n    Write a python function to remove duplicate values in the given list.\n    '''\n    return list(set(lst))\n    \ndef sortByLength(lst):   \n    '''\n    Write a python function to sort the given list by length.\n    '''\n    return sorted(lst, key=len)\n    \ndef replaceString(lst):   \n    '''\n    Write a python function to replace the values in the given list by the given string.\n    '''\n    return [x.replace('a', '@') for x in lst]\n    \ndef sortByChar(lst):   \n    '''\n    Write a python function to sort the given list by the first character of each word.\n    '''\n    return sorted(lst, key=lambda x: x[0])\n    \ndef sortByLastChar(lst):   \n    '''\n    Write a python function to sort the given list by the last character of each word.\n    '''\n    return sorted(lst, key=lambda x: x[-1])\n    \ndef sortByFirstAndLastChar(lst):   \n    '''\n    Write a python function to sort the given list by the first and last character of each word.\n    '''\n    return sorted(lst, key=lambda x: x[0] + x[-1])\n    \ndef sortByMin(lst):   \n    '''\n    Write a python function to sort the given list by the smallest value.\n    '''\n    return sorted(lst, key=lambda x: (x, x))\n    \ndef sortByMax(lst):   \n    '''\n    Write a python function to sort the given list by the largest value.\n    '''\n    return sorted(lst, key=lambda x: (x, -x))\n    \ndef sortByDiff(lst):   \n    '''\n    Write a python function to sort the given list by the difference between the smallest and largest value.\n    '''\n    return sorted(lst, key=lambda x: (x-max(lst), x-min(lst)))\n    \ndef sortByParity(lst):   \n    '''\n    Write a python function to sort the given list by the parity of each value.\n    '''\n    return sorted(lst, key=lambda x: (x%2, x))\n    \ndef findMinAbsDiff(lst):   \n    '''\n    Write a python function to find the minimum absolute difference of two numbers in the given list.\n    '''\n    return min([abs(a-b) for a in lst for b in lst if a!= b])\n    \ndef convert(lst):   \n    '''\n    Write a python function to convert the given list to a list of dictionaries with the keys as the elements of the given list.\n    '''\n    return [{k:v for (k,v) in zip(lst,lst)} for lst in lst]\n    \ndef compute(lst):   \n    '''\n    Write a python function to compute the sum of values in the given list.\n    '''\n    return sum(lst)\n    \ndef compute2(lst):   \n    '''\n    Write a python function to compute the average value of values in the given list.\n    '''\n    return sum(lst)/len(lst)\n    \ndef computePermutation(lst):   \n    '''\n    Write a python function to compute the n-th permutation of the given list.\n    '''\n    n = 1\n    for i in lst:\n        n = n*i\n    return n\n    \ndef computeCombination(lst):   \n    '''\n    Write a python function to compute the n-th combination of the given list.\n    '''\n    n = 1\n    for i in lst:\n        n = n*i\n    return n/reduce(lambda x, y: x*y, lst)\n    \ndef computeFibonacci(lst):   \n    '''\n    Write a python function to compute the n-th Fibonacci number in the given list.\n    '''\n    n = 0\n    for i in lst:\n        n = n+1\n    return n\n    \ndef countTwo(lst):   \n    '''\n    Write a python function to count the number of 2's in the given list.\n    '''\n    return lst.count(2)\n    \ndef isPermutation(lst1, lst2):   \n    '''\n    Write a python function to check if the given lists are permutations of each other.\n    '''\n    return sorted(lst1) == sorted(lst2)\n    \ndef findIntersection(lst1, lst2):   \n    '''\n    Write a python function to find the intersection of the given lists.\n    '''\n    return [x for x in lst1 if x in lst2]\n    \ndef findIntersection2(lst1, lst2):   \n    '''\n    Write a python function to find the intersection of the given lists, but this time without duplicates.\n    '''\n    return list(set(lst1) & set(lst2))\n    \ndef findIntersection3(lst1, lst2):   \n    '''\n    Write a python function to find the intersection of the given lists, but this time without duplicates.\n    '''\n    return list(set(lst1).intersection(lst2))\n    \ndef sumUpTo(lst, n):   \n    '''\n    Write a python function to compute the sum of the values of the given list up to the n-th element.\n    '''\n    return sum(lst[:n])\n    \ndef sumOfSquareOfNumbers(lst):   \n    '''\n    Write a python function to compute the sum of the squares of the values of the given list.\n    '''\n    return sum([x**2 for x in lst])\n    \ndef isAnagram(lst1, lst2):   \n    '''\n    Write a python function to check if the given lists are anagrams of each other.\n    '''\n    return sorted(lst1) == sorted(lst2)\n    \ndef computePermutations(lst):   \n    '''\n    Write a python function to compute all the permutations of the given list.\n    '''\n    lst2 = []\n    if len(lst) == 1:\n        return [lst]\n    for i in lst:\n        lst2.append(i)\n        lst2"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([True for val in lst if val])\n    \n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not test_list:\n        test_list = []\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + [test_tup]\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.append(test_tup)\n    \ndef remove_lists(test_list, test_tup):\n    '''\n    Write a function to remove the given list from the given tuples.\n    '''\n    return test_list.remove(test_tup)\n    \ndef combine_lists(test_list, test_tup):\n    '''\n    Write a function to combine the given list and tuples.\n    '''\n    return test_list.extend(test_tup)\n    \ndef test_combine_lists():\n    '''\n    Run the combine_lists function to test your answer.\n    '''\n    # As a reminder, the combine_lists function takes two lists and returns a list.\n    # The first parameter is the list to be modified and the second is the new element.\n    # Reminder: the + operator concatenates lists.\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list+test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # return test_list + [i for i in test_tup]\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    num1.sort()\n    return num1\n    \ndef minimum_edit_distance(str1,str2):\n    '''\n    Given two strings, find the minimum number of edits required to convert string 1 to string 2.\n    You can only replace a character, insert a character, or remove a character.\n    '''\n    if len(str1)==0:\n        return len(str2)\n    if len(str2)==0:\n        return len(str1)\n    if str1[0]==str2[0]:\n        return minimum_edit_distance(str1[1:],str2[1:])\n    return min(minimum_edit_distance(str1,str2[1:]),minimum_edit_distance(str1[1:],str2))+1\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    temp=[]\n    i=0\n    j=0\n    k=0\n    while(i<len(num1) and j<len(num2) and k<len(num3)):\n        if(num1[i]<num2[j]):\n            temp.append(num1[i])\n            i+=1\n        elif(num2[j]<num3[k]):\n            temp.append(num2[j])\n            j+=1\n        else:\n            temp.append(num3[k])\n            k+=1\n    while(i<len(num1)):\n        temp.append(num1[i])\n        i+=1\n    while(j<len(num2)):\n        temp.append(num2[j])\n        j+=1\n    while(k<len(num3)):\n        temp.append(num3[k])\n        k+=1\n    return temp\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    final = []\n    n = len(num1)\n    m = len(num2)\n    n1 = 0\n    n2 = 0\n    for i in range(n+m):\n        if num1[n1]<num2[n2]:\n            final.append(num1[n1])\n            n1+=1\n        else:\n            final.append(num2[n2])\n            n2+=1\n        if n1>=n or n2>=m:\n            if n1<n:\n                final.extend(num1[n1:])\n            else:\n                final.extend(num2[n2:])\n            return final\n    return final\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    temp=[]\n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0]>=num1[0] and num2[0]>=num3[0]:\n            temp.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            temp.append(num3[0])\n            heapq.heappop(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0]>=num2[0] and num1[0]>=num3[0]:\n            temp.append(nu"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    nums=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            if num1[i]<num3[k]:\n                nums.append(num1[i])\n                i+=1\n            else:\n                nums.append(num3[k])\n                k+=1\n        elif num2[j]<num3[k]:\n            nums.append(num2[j])\n            j+=1\n        else:\n            nums.append(num3[k])\n            k+=1\n    while i<len(num1):\n        nums.append(num1[i])\n        i+=1\n    while j<len(num2):\n        nums.append(num2[j])\n        j+=1\n    while k<len(num3):\n        nums.append(num3[k])\n        k+=1\n    return nums\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    nums=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            if num1[i]<num3[k]:\n                nums.append(num1[i])\n                i+=1\n            else:\n                nums.append(num3[k])\n                k+=1\n        elif num2[j]<num3[k]:\n            nums.append(num2[j])\n            j+=1\n        else:\n            nums.append(num3[k])\n            k+=1\n    while i<len(num1):\n        nums.append(num1[i])\n        i+=1\n    while j<len(num2):\n        nums.append(num2[j])\n        j+=1\n    while k<len(num3):\n        nums.append(num3[k])\n        k+=1\n    return nums\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n    '''\n    Find the sum of digits of a number.\n    '''\n    if num<0:\n        num=-1*num\n    sum=0\n    while num!=0:\n        sum+=num%10\n        num/=10\n    return sum\ndef find_sum_of_digits(num):\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1)==0:\n        return num2\n    if len(num2)==0:\n        return num3\n    if num1[0]<num2[0]:\n        return [num1[0]] + merge_sorted_list(num1[1:],num2,num3)\n    else:\n        return [num2[0]] + merge_sorted_list(num1,num2[1:],num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    num1.sort()\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    x = []\n    i = 0\n    j = 0\n    k = 0\n    #compare the first element of each list and add the smaller element to the new list\n    if num1[i] < num2[i]:\n        if num1[i] < num3[i]:\n            x.append(num1[i])\n            i +=1\n        else:\n            x.append(num3[i])\n            i += 1\n    else:\n        if num2[i] < num3[i]:\n            x.append(num2[i])\n            i += 1\n        else:\n            x.append(num3[i])\n            i += 1\n    #check for elements in the second list\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            if num1[i] < num3[k]:\n                x.append(num1[i])\n                i += 1\n            else:\n                x.append(num3[k])\n                k += 1\n        else:\n            if num2[j] < num3[k]:\n                x.append(num2[j])\n                j += 1\n            else:\n                x.append(num3[k])\n                k += 1\n    #check for elements in the third list\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            if num1[i] < num3[k]:\n                x.append(num1[i])\n                i += 1\n            else:\n                x.append(num3[k])\n                k += 1\n        else:\n            if num2[j] < num3[k]:\n                x.append(num2[j])\n                j += 1\n            else:\n                x.append(num3[k])\n                k += 1\n    #check for elements in the second list\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            x.append(num1[i])\n            i += 1\n        else:\n            x.append(num2[j])\n            j += 1\n    #check for elements in the third list\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            x.append(num1[i])\n            i += 1\n        else:\n            x.append(num2[j])\n            j += 1\n    return x\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 and num2 and num3:\n        nums=[num1,num2,num3]\n        i=0\n        while i<len(nums):\n            if nums[i]==None:\n                del nums[i]\n                continue\n            i+=1\n        sorted_nums=[]\n        while nums:\n            sorted_nums.append(heapq.heappop(nums))\n        return sorted_nums\n    else:\n        return num1+num2+num3\ndef largest_rectangle(nums):\n    '''\n    Given a list of non-negative integers representing the histogram's bar height, \n    find the area of largest rectangle in the histogram.\n    '''\n    if nums:\n        nums.append(0)\n        stack=[0]\n        i=1\n        area=0\n        while i<len(nums):\n            while nums[i]<nums[stack[-1]]:\n                h=nums[stack.pop()]\n                w=i-stack[-1]-1\n                area=max(area,h*w)\n            stack.append(i)\n            i+=1\n        return area\n    else:\n        return 0\ndef reverse_linked_list(head):\n    '''\n    Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.\n    '''\n    if not head:\n        return head\n    curr=head\n    prev=None\n    next=None\n    while curr:\n        next=curr.next\n        curr.next=prev\n        prev=curr\n        curr=next\n    return prev\ndef print_nodes_in_k_group(head,k):\n    '''\n    Given a linked list, return a list of size k, where each element is a node from the original list,\n    removed from the original list, and stored at the end of the modified list.\n    '''\n    if not head:\n        return None\n    dummy=ListNode(0)\n    dummy.next=head\n    curr=dummy\n    while curr:\n        count=0\n        while curr and count<k:\n            curr=curr.next\n            count+=1\n        if curr:\n            print curr.val\n            curr.next=curr.next.next\n    return dummy.next\ndef find_intersection(head1,head2):\n    '''\n    Given two linked lists, return the node at which the two lists intersect. \n    If their intersection is empty, return null.\n    '''\n    if not head1 or not head2:\n        return None\n    h1=head1\n    h2=head2\n    while h1 and h2:\n        if h1==h2:\n            return h1\n        else:\n            h1=h1.next\n            h2=h2.next\n    return None\ndef merge_k_sorted_list(lists):\n    '''\n    Given k sorted integer arrays, merge them into one sorted array.\n    '''\n    if not lists:\n        return None\n    arr=[]\n    for i in xrange(len(lists)):\n        if lists[i]:\n            arr+=lists[i]\n    heapq.heapify(arr)\n    while arr:\n        heapq.heappop(arr)\n    return arr\ndef max_area_histogram(nums):\n    '''\n    Given a list of non-negative integers representing the histogram's bar height, \n    find the area of the largest rectangle in the histogram.\n    '''\n    if not nums:\n        return 0\n    nums.append(0)\n    stack=[0]\n    area=0\n    for i in xrange(1,len(nums)):\n        while nums[i]<nums[stack[-1]]:\n            h=nums[stack.pop()]\n            w=i-stack[-1]-1\n            area=max(area,h*w)\n        stack.append(i)\n    return area\ndef is_valid_parenthesis(string):\n    '''\n    Given a string containing only three types of characters: '(', ')' and '*', write a function to check whether the string is valid.\n    The rules of valid string are:\n    1. It is valid if the following characters never occurs: '()*', where '()' indicates a valid string and '*' indicates the occurrence of a character.\n    2. If the first character is '(', then a valid string must be a valid parenthesis;\n    3. If the last character is ')', then a valid string must be a valid parenthesis;\n    4. If the character is '*', then a valid string can be a valid parenthesis or empty string;\n    5. If the first and last characters are '(*', the string can be empty and it is also valid.\n    '''\n    if not string:\n        return False\n    stack=[0]\n    for s in string:\n        if s=='(' or s==')' or s=='*':\n            stack.append(s)\n        elif s=='*':\n            if not stack or stack[-1]!='*':\n                return False\n            stack.pop()\n    if not stack:\n        return True\n    else:\n        return False\ndef contains_cycle(head):\n    '''\n    Given head, the head of a linked list, determine if the linked list has a cycle in it.\n    There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.\n    Internally, pos is used to denote the index of the node that tail's next pointer is connected to.\n    Note that pos is not passed as a parameter.\n    Return true if there is a cycle in the linked list. Otherwise, return false.\n    '''\n    if not head:\n        return False\n    slow=head\n    fast=head\n    while fast and fast.next:\n        slow=slow.next\n        fast=fast.next.next\n        if slow==fast:\n            return True\n    return False\ndef min_cost_toungue_tape(num_bottles,tape_capacity):\n    '''\n    There are n bottles that are numbered from 0 to n-1. The ith bottle is of size bottle[i].\n    You put a certain amount of water (x) into each of the n bottles.\n    As you proceed, you can pour the water from any bottle into any other bottle, provided that the destination bottle is not already full.\n    You can also pour water from one bottle into another bottle at the same time, and the pouring can be done infinitely many times.\n    Return the minimum amount of water you have to pour to all the n bottles.\n    If there is no way to pour the water, return -1.\n    '''\n    if not num_bottles:\n        return 0\n    if num_bottles==1:\n        return tape_capacity\n    bottles=[0]*num_bottles\n    tape_cap=tape_capacity\n    ans=float('inf')\n    while num_bottles>0:\n        max_bottle=max(bottles)\n        min_bottle=min(bottles)\n        ans=min(ans,tape_cap-max_bottle+min_bottle)\n        tape_cap-=bottles[max_bottle]+bottles[min_bottle]\n        bottles[max_bottle]+=1\n        bottles[min_bottle]-=1\n        num_bottles-=1\n    return ans\ndef smallest_difference(nums1,nums2):\n    '''\n    Given two arrays of integers, find the pair of elements (one from each array) whose absolute difference is closest to zero.\n    Return the absolute value of difference between the two elements, or return 1e8 if the absolute difference is greater than 1e8.\n    Note: You may assume that both arrays have same length.\n    '''\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    while nums1 and nums2:\n        a=heapq.heappop(nums1)\n        b=heapq.heappop(nums2)\n        if a>b:\n            heapq.heappush(nums1,a)\n            heapq.heappush(nums2,"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    return heapq.merge(num1,num2,num3)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def _even(n): \n        if n%2==0: \n            return False \n        else: \n            return True \n    if _even(n): \n        s = s[1:] + s[0] \n    if _even(n-1): \n        s = s[0] + s[1:] \n    return s \ndef binary_Search(a,x):\n    '''\n    Write a python function to return the position of the first occurrence of x in a sorted array (ascending order)\n    '''\n    start = 0 \n    end = len(a)-1 \n    while start<=end: \n        mid = (start+end)//2 \n        if a[mid]==x: \n            return mid \n        elif a[mid]>x: \n            end = mid-1 \n        else: \n            start = mid+1 \n    return -1 \ndef minimum_Number_of_Swaps(a): \n    '''\n    Write a python function to find the minimum number of swaps required to sort an array.\n    '''\n    swaps = 0 \n    for i in range(len(a)): \n        #find first number out of order \n        if a[i]!=i+1: \n            #find index of the element \n            index = i \n            while a[index]!=i+1: \n                index = index+1 \n            #save the index \n            swaps = swaps + 1\n            #the two elements are in the right order now, swap them \n            temp = a[index]\n            a[index] = a[i]\n            a[i] = temp\n    return swaps \ndef length_Longest_Substring(s):\n    '''\n    Write a python function to find the length of the longest substring without repeating characters\n    '''\n    longest = 0 \n    for i in range(len(s)): \n        for j in range(i,len(s)): \n            if len(s[i:j])>longest: \n                longest = len(s[i:j])\n    return longest\ndef prime_factor(n):\n    '''\n    Write a python function to find the prime factors of a given number\n    '''\n    prime = [] \n    while n % 2 == 0: \n        prime.append(2) \n        n = n // 2 \n    for i in range(3,int(n**0.5)+1,2):\n        while n % i == 0:\n            prime.append(i)\n            n = n // i \n    if n > 2: \n        prime.append(n) \n    return prime \ndef inverse_of_digit(n):\n    '''\n    Write a python function to find the inverse of a given digit\n    '''\n    if n==1:\n        return 0\n    if n==0:\n        return 1\n    t = 0 \n    while n>0:\n        t=t*10+n%10\n        n=n//10\n    return t\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits of a given number\n    '''\n    s = 0\n    while n>0:\n        s = s+n%10\n        n = n//10\n    return s\ndef rotate_digits(s,n):\n    '''\n    Write a python function to rotate digits of a given number\n    '''\n    t = 0 \n    for i in range(n): \n        t = t + int(s[i])*(10**(len(s)-1-i)) \n    return str(t) \ndef base_conversion(n,b):\n    '''\n    Write a python function to convert a given number from base n to base b\n    '''\n    q = []\n    while n>0: \n        q.append(n%b) \n        n = n // b \n    return q \ndef hamming_Distance(a,b):\n    '''\n    Write a python function to calculate the hamming distance between two bits\n    '''\n    d = 0 \n    for i in range(len(a)): \n        if a[i]!=b[i]: \n            d = d+1\n    return d\ndef four_Sum(nums, target):\n    '''\n    Write a python function to find the four elements that sum to the given target value\n    '''\n    nums.sort()\n    n = len(nums)\n    quadruplets = []\n    for i in range(0, n-3):\n        if i == 0 or nums[i]!= nums[i-1]:\n            left = i+1\n            right = n-1\n            while left < right:\n                summation = nums[left] + nums[right]\n                if summation == target:\n                    quadruplets.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left-1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right+1]:\n                        right -= 1\n                elif summation < target:\n                    left += 1\n                else:\n                    right -= 1\n    return quadruplets\ndef min_operations(n):\n    '''\n    Write a python function to find the minimum number of operations required to convert a given number to an integer.\n    '''\n    operations = 0 \n    if n==1: \n        return operations \n    while n!=1: \n        if n%2==0: \n            n = n//2 \n        else: \n            n = n*3 + 1 \n        operations = operations + 1 \n    return operations \ndef move_zeros(nums):\n    '''\n    Write a python function to move zeros to the end of an array\n    '''\n    end = len(nums) - 1 \n    i = 0 \n    while i < end: \n        if nums[i] == 0: \n            nums.pop(i)\n            nums.append(0)\n            end = end - 1 \n        else: \n            i += 1 \n    return nums \ndef palindrome_permutation(s):\n    '''\n    Write a python function to check whether a string is a permutation of a palindrome.\n    '''\n    a = list(s) \n    a.sort()\n    if a == list(s): \n        return True \n    else: \n        return False \ndef circular_array_rotation(nums, k, n):\n    '''\n    Write a python function to find the kth rotation of a circular array\n    '''\n    start = 0 \n    end = n-1\n    while end >= start: \n        if k-1 == start: \n            return nums[end]\n        if k-1 > start:\n            k = k - (start+1)\n            start = start + 1 \n        else: \n            k = k - (end-start)\n            end = end - 1 \n    return nums[0]\ndef min_jump(nums):\n    '''\n    Write a python function to find the minimum number of jumps required to reach the end of an array.\n    '''\n    jumps = 0 \n    if len(nums)==1: \n        return 0 \n    jump = 0 \n    while jump < len(nums)-1: \n        jump = jump+1 \n        if nums[jump]==0:\n            continue \n        elif nums[jump]>=nums[jump-1]:\n            jump = jump+nums[jump]\n        else:\n            jump = jump-nums[jump]\n        jumps = jumps + 1 \n    return jumps \ndef is_anagram(s,t):\n    '''\n    Write a python function to check whether two strings are anagrams of each other\n    '''\n    if sorted(s)==sorted(t):\n        return True\n    return False \ndef max_even_digit(n):\n    '''\n    Write a python function to find the maximum even digit of a given number.\n    '''\n    m = 0 \n    whil"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # There are 2^n possible strings\n    s = s[::-1] # reverse the string\n    n = n % len(s) # if n > 2^n, n-length string is returned\n    if n == 0: \n        return 1\n    else:\n        return 1 + odd_Equivalent(s[n:],n) # return 1+odd_Equivalent(s[n+1:],n)\n    \n    \n    \ndef count_Even_Digits(s):\n    '''\n    Write a python function to count the number of even digits in a string.\n    '''\n    count = 0\n    for i in s:\n        if i in '02468':\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    res = 0\n    \n    for i in range(n):\n        temp = str(int(s[len(s)-1]) ^ 1)\n        s = s[0:len(s)-1] + temp\n        res += (s.count('1')%2)\n    return res\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def string_change(s):\n        '''\n        Write a python function to change the case of the string\n        '''\n        return s.lower()\n    def find_index(x):\n        '''\n        Write a python function to find the index of the given character in the string\n        '''\n        for i in range(0,len(s)):\n            if s[i] == x:\n                return i\n    def binary_to_base(n,m):\n        '''\n        Write a python function to convert a decimal number into a base-m number\n        '''\n        if m == 1:\n            return n\n        else:\n            if n/m == 1:\n                return 1\n            else:\n                return binary_to_base(n%m,m-1)\n    def base_to_binary(n,m):\n        '''\n        Write a python function to convert a base-m number into a decimal number\n        '''\n        if m == 1:\n            return n\n        else:\n            if n == 1:\n                return m\n            else:\n                return base_to_binary(n/2,m-1)\n    def binary_rotation(n):\n        '''\n        Write a python function to rotate a binary string\n        '''\n        x = n[0]\n        x1 = n[1:]\n        x1 = n[0] + x1\n        return x1\n    def my_combination(n):\n        '''\n        Write a python function to find the number of ways to choose k items from n items without repetition\n        '''\n        if k>n:\n            return 0\n        elif k==n:\n            return 1\n        else:\n            return my_combination(n-1) + my_combination(n-1)\n    def my_permutation(n):\n        '''\n        Write a python function to find the number of ways to choose k items from n items without repetition\n        '''\n        if n==k:\n            return 1\n        elif n>k:\n            return my_permutation(n-1)\n        else:\n            return 0\n    def my_combination(n,k):\n        '''\n        Write a python function to find the number of ways to choose k items from n items without repetition\n        '''\n        if k==1:\n            return n\n        else:\n            return my_combination(n-1,k-1) + my_combination(n-1,k)\n    def my_permutation(n,k):\n        '''\n        Write a python function to find the number of ways to choose k items from n items without repetition\n        '''\n        if k==1:\n            return 1\n        else:\n            return my_permutation(n-1,k-1) + my_permutation(n-1,k)\n    def even_Equivalent(n):\n        '''\n        Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times\n        '''\n        if n%2 == 0:\n            return 0\n        else:\n            return 1\n    def odd_Equivalent(n):\n        '''\n        Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times\n        '''\n        if n%2 == 0:\n            return 1\n        else:\n            return 0\n    def my_gcd(x,y):\n        '''\n        Write a python function to find the greatest common denominator\n        '''\n        if x>y:\n            x,y = y,x\n        while y!=0:\n            x,y = y,x%y\n        return x\n    def my_lcm(x,y):\n        '''\n        Write a python function to find the lowest common multiple\n        '''\n        return (x*y)/my_gcd(x,y)\n    def my_gcd(x,y):\n        '''\n        Write a python function to find the greatest common denominator\n        '''\n        if x>y:\n            x,y = y,x\n        while y!=0:\n            x,y = y,x%y\n        return x\n    def my_lcm(x,y):\n        '''\n        Write a python function to find the lowest common multiple\n        '''\n        return (x*y)/my_gcd(x,y)\n    def my_gcd(x,y):\n        '''\n        Write a python function to find the greatest common denominator\n        '''\n        if x>y:\n            x,y = y,x\n        while y!=0:\n            x,y = y,x%y\n        return x\n    def my_lcm(x,y):\n        '''\n        Write a python function to find the lowest common multiple\n        '''\n        return (x*y)/my_gcd(x,y)\n    def my_gcd(x,y):\n        '''\n        Write a python function to find the greatest common denominator\n        '''\n        if x>y:\n            x,y = y,x\n        while y!=0:\n            x,y = y,x%y\n        return x\n    def my_lcm(x,y):\n        '''\n        Write a python function to find the lowest common multiple\n        '''\n        return (x*y)/my_gcd(x,y)\n    def my_gcd(x,y):\n        '''\n        Write a python function to find the greatest common denominator\n        '''\n        if x>y:\n            x,y = y,x\n        while y!=0:\n            x,y = y,x%y\n        return x\n    def my_lcm(x,y):\n        '''\n        Write a python function to find the lowest common multiple\n        '''\n        return (x*y)/my_gcd(x,y)\n    def my_gcd(x,y):\n        '''\n        Write a python function to find the greatest common denominator\n        '''\n        if x>y:\n            x,y = y,x\n        while y!=0:\n            x,y = y,x%y\n        return x\n    def my_lcm(x,y):\n        '''\n        Write a python function to find the lowest common multiple\n        '''\n        return (x*y)/my_gcd(x,y)\n    def my_gcd(x,y):\n        '''\n        Write a python function to find the greatest common denominator\n        '''\n        if x>y:\n            x,y = y,x\n        while y!=0:\n            x,y = y,x%y\n        return x\n    def my_lcm(x,y):\n        '''\n        Write a python function to find the lowest common multiple\n        '''\n        return (x*y)/my_gcd(x,y)\n    def my_gcd(x,y):\n        '''\n        Write a python function to find the greatest common denominator\n        '''\n        if x>y:\n            x,y = y,x\n        while y!=0:\n            x,y = y,x%y\n        return x\n    def my_lcm(x,y):\n        '''\n        Write a python function to find the lowest common multiple\n        '''\n        return (x*y)/my_gcd(x,y)\n    def my_gcd(x,y):\n        '''\n        Write a python function to find the greatest common denominator\n        '''\n        if x>y:\n            x,y = y,x\n        while y!=0:\n            x,y = y,x%y\n        return x\n    def my_lcm(x,y):\n        '''\n        Write a python function to find the lowest common multiple\n        '''\n        return (x*y)/my_gcd(x,y)\n    def my_gcd(x,y):\n        '''\n        Write a python function to find the greatest common denominator\n        '''\n        if x>y:\n            x,y = y,x\n        while y!=0:\n            x,y = y,x%y\n        return x\n    def my_lcm(x,y):\n        '''\n        Write a python function to find the lowest common multiple\n        '''\n        return (x*y)/my_"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        if s[0]=='0':\n            return 1\n        else:\n            return 0\n    else:\n        if s[0]=='0':\n            return odd_Equivalent(s[1:],n)\n        else:\n            return 1+odd_Equivalent(s[1:],n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s == '0':\n        return 0\n    count = 0\n    for i in range(len(s)):\n        if (int(s[i],2) % 2)!= 0:\n            count = count + 1\n        s = s[1:] + s[0]\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0:\n        return 0\n    if n<0:\n        return 0\n    if n==1:\n        if s[0]=='1':\n            return 1\n        else:\n            return 0\n    if s[0]=='1':\n        return (odd_Equivalent(s[1:],n-1) + odd_Equivalent(s[1:],n))\n    else:\n        return (odd_Equivalent(s[1:],n-1) + odd_Equivalent(s[1:],n))\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    global number_of_bits\n    number_of_bits = n\n    return number_of_bits - binary_rotate(s,n)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # s=\"01010101\"\n    # n=3\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import math\n    def is_power_of_2(n):\n        if n == 1:\n            return True\n        if n%2 == 0:\n            return False\n        return is_power_of_2(n/2)\n    if not is_power_of_2(n):\n        return 0\n    #first convert binary string to array of length n\n    arr = [0 for i in range(n)]\n    count = 0\n    for i in range(len(s)):\n        arr[i] = int(s[i])\n    \n    for i in range(n):\n        if i%2 == 1:\n            if arr[i] == 0:\n                arr[i] = 1\n            else:\n                arr[i] = 0\n    count = 0\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        else:\n            if arr[i]!= arr[i-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    intersection = set(nestedlist[0])\n    for sublist in nestedlist:\n        intersection &= set(sublist)\n    return intersection\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return reduce(lambda x,y: x if y in x else x+[y], nestedlist, [])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common_list.append(i)\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l1 = list(nestedlist)\n    l2 = list(nestedlist)\n    l1.pop(0)\n    l2.pop(0)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return reduce(set.intersection, nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set(nestedlist[0]).intersection(*nestedlist[1:])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    set1 = set(nestedlist[0])\n    for list1 in nestedlist:\n        set1 = set1 & set(list1)\n    return list(set1)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l = []\n    for ele in nestedlist:\n        if isinstance(ele, list):\n            for sub_ele in common_in_nested_lists(ele):\n                l.append(sub_ele)\n        else:\n            l.append(ele)\n    return l\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #first: get a list of unique elements in all the sublists\n    unique_elements = set()\n    for list in nestedlist:\n        for elem in list:\n            unique_elements.add(elem)\n    #second: find common elements\n    common = set()\n    for elem in unique_elements:\n        if all(elem in sublist for sublist in nestedlist):\n            common.add(elem)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not isinstance(nestedlist, list):\n        return None\n    if len(nestedlist) == 0:\n        return []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    list1 = nestedlist[0]\n    list2 = nestedlist[1]\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if int(text) == float(text):\n            return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!=0:\n            return False\n    return True\n    \ndef compare_users(a,b):\n    '''\n    Write a function to compare two users based on their names.\n    '''\n    if a[0]==b[0]:\n        return True\n    return False\n    \ndef user_to_movie_ratings(user_ratings,movie_ids):\n    '''\n    Write a function that takes a user's movie ratings and returns a list of \n    tuples of the form (movie id, movie rating), sorted in descending order by \n    rating.\n    '''\n    user_movie_ratings=[(a,b) for a,b in zip(user_ratings,movie_ids)]\n    user_movie_ratings.sort(key=lambda x: x[1],reverse=True)\n    return user_movie_ratings\n    \ndef user_to_movie_id(user_movie_ratings):\n    '''\n    Write a function to return the movie ids from a list of tuples of the form \n    (movie id, movie rating). The returned list should be sorted in descending \n    order by movie id.\n    '''\n    return [a[0] for a in user_movie_ratings]\n    \ndef user_to_movie_rating(user_movie_ratings):\n    '''\n    Write a function to return the movie ratings from a list of tuples of the \n    form (movie id, movie rating). The returned list should be sorted in \n    descending order by movie id.\n    '''\n    return [a[1] for a in user_movie_ratings]\n    \ndef user_to_movie_ids(user_movie_ratings):\n    '''\n    Write a function to return the movie ids from a list of tuples of the \n    form (movie id, movie rating). The returned list should be sorted in \n    descending order by movie id.\n    '''\n    return [a[0] for a in user_movie_ratings]\n    \ndef user_to_movie_ids_no_rating(user_movie_ratings):\n    '''\n    Write a function to return the movie ids from a list of tuples of the \n    form (movie id, movie rating). The returned list should be sorted in \n    descending order by movie id.\n    '''\n    return [a[0] for a in user_movie_ratings]\n    \ndef user_to_movie_ids_no_rating_sorted(user_movie_ratings):\n    '''\n    Write a function to return the movie ids from a list of tuples of the \n    form (movie id, movie rating). The returned list should be sorted in \n    descending order by movie id.\n    '''\n    return sorted(user_to_movie_ids_no_rating(user_movie_ratings),key=lambda x:x[0],reverse=True)\n    \ndef user_to_movie_ids_no_rating_reverse_sorted(user_movie_ratings):\n    '''\n    Write a function to return the movie ids from a list of tuples of the \n    form (movie id, movie rating). The returned list should be sorted in \n    descending order by movie id.\n    '''\n    return sorted(user_to_movie_ids_no_rating(user_movie_ratings),key=lambda x:x[0],reverse=True)\n    \ndef user_to_movie_ids_no_rating_reverse_sorted_2(user_movie_ratings):\n    '''\n    Write a function to return the movie ids from a list of tuples of the \n    form (movie id, movie rating). The returned list should be sorted in \n    descending order by movie id.\n    '''\n    return sorted(user_to_movie_ids_no_rating(user_movie_ratings),key=lambda x:x[0],reverse=True)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!=0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i) is True:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n    \ndef get_longest_key(dic):\n    '''\n    Write a function to find the longest key of a dictionary.\n    '''\n    longest = 0\n    for i in dic:\n        if len(i) > longest:\n            longest = len(i)\n    return longest\n    \ndef get_longest_value(dic):\n    '''\n    Write a function to find the longest value of a dictionary.\n    '''\n    longest = 0\n    for i in dic.values():\n        if len(i) > longest:\n            longest = len(i)\n    return longest\n    \ndef reverse_dictionary(dic):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    return {v:k for k,v in dic.items()}\n    \ndef merge_dictionary(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    return {k:v for d in (dict1, dict2) for k,v in d.items()}\n    \ndef replace_character(str1, old, new):\n    '''\n    Write a function to replace the old character with the new character in a given string.\n    '''\n    return str1.replace(old, new)\n    \ndef compute_average_word_length(words):\n    '''\n    Write a function to compute the average word length of a given list of words.\n    '''\n    return sum([len(word) for word in words]) / len(words)\n    \ndef get_common_elements(list1, list2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    return list(set(list1).intersection(list2))\n    \ndef get_anagrams(words):\n    '''\n    Write a function to find the anagrams in a given list of words.\n    '''\n    anagrams = {}\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        if sorted_word in anagrams:\n            anagrams[sorted_word].append(word)\n        else:\n            anagrams[sorted_word] = [word]\n    return anagrams\n    \ndef make_operation_history(ops):\n    '''\n    Write a function to compute the operations on a stack.\n    '''\n    history = []\n    for i in ops:\n        history.append(i)\n    return history\n    \ndef make_operation_history_with_index(ops):\n    '''\n    Write a function to compute the operations on a stack.\n    '''\n    history = []\n    for i in xrange(len(ops)):\n        history.append((ops[i], i))\n    return history\n    \ndef get_biggest_number(numbers):\n    '''\n    Write a function to find the biggest number out of two given numbers.\n    '''\n    return max(numbers)\n    \ndef get_smallest_number(numbers):\n    '''\n    Write a function to find the smallest number out of two given numbers.\n    '''\n    return min(numbers)\n    \ndef get_even_numbers(numbers):\n    '''\n    Write a function to find all the even numbers out of a given list of numbers.\n    '''\n    return [x for x in numbers if x % 2 == 0]\n    \ndef get_odd_numbers(numbers):\n    '''\n    Write a function to find all the odd numbers out of a given list of numbers.\n    '''\n    return [x for x in numbers if x % 2!= 0]\n    \ndef get_word_count_dictionary(words):\n    '''\n    Write a function to return a dictionary of the word counts in a given list of words.\n    '''\n    dic = {}\n    for word in words:\n        dic[word] = dic.get(word, 0) + 1\n    return dic\n    \ndef get_n_largest_words(words, n):\n    '''\n    Write a function to return the n largest words in a given list of words.\n    '''\n    return sorted(words, key = len, reverse = True)[:n]\n    \ndef get_n_smallest_words(words, n):\n    '''\n    Write a function to return the n smallest words in a given list of words.\n    '''\n    return sorted(words, key = len)[:n]\n    \ndef convert_to_roman(n):\n    '''\n    Write a function to convert an integer into Roman Numerals.\n    '''\n    roman_numerals = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    \n    if n > 0:\n        return roman_numerals[n // 1000] + convert_to_roman(n % 1000)\n    elif n < 0:\n        return '-' + convert_to_roman(-n)\n    else:\n        return \"\"\n    \ndef compute_power_recursively(x, n):\n    '''\n    Write a function to compute the power of a number, using recursion.\n    '''\n    if n == 0:\n        return 1\n    return x * compute_power_recursively(x, n - 1)\n    \ndef compute_power_iteratively(x, n):\n    '''\n    Write a function to compute the power of a number, using iteration.\n    '''\n    res = 1\n    while n:\n        if n & 1:\n            res *= x\n        x *= x\n        n >>= 1\n    return res\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check whether a given number is a palindrome.\n    '''\n    if n < 10:\n        return True\n    if n % 10 == 0:\n        return False\n    return n % 10 == n // 10 % 10\n    \ndef is_palindrome_iteratively(n):\n    '''\n    Write a function to check whether a given number is a palindrome.\n    '''\n    s = str(n)\n    for i in xrange(len(s) / 2):\n        if s[i]!= s[-(i + 1)]:\n            return False\n    return True\n    \ndef is_palindrome_with_regex(n):\n    '''\n    Write a function to check whether a given number is a palindrome.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef is_abecedarian(word):\n    '''\n    Write a function to check whether a given word is a Abecedarian word.\n    '''\n    for i in xrange(len(word)):\n        if word[i] > word[i + 1]:\n            return False\n    return True\n    \ndef is_abecedarian_iteratively(word):\n    '''\n    Write a function to check whether a given word is a Abecedarian word.\n    '''\n    prev = word[0]\n    for i in word:\n        if prev > i:\n            return False\n        prev = i\n    return True\n    \ndef get_k_permutations(k, word):\n    '''\n    Write a function to return all permutations of a given word.\n    '''\n    if k == 1:\n        return [word]\n    res = []\n    for i in xrange(len(word)):\n        for j in get_k_permutations(k - 1, word[:i] + word[i + 1:]):\n            res.append(word[i] + j)\n    return res\n    \ndef get_k_combinations(k, word):\n    '''\n    Write a function to return all combinations of a given word.\n    '''\n    res = []\n    if k == 1:\n        return [word]\n    for i in get_k_combinations(k - 1, word):\n        res.append(i)\n        res.append(word + i)\n    return res\n    \ndef is_anagram(word1, word2):\n    '''\n    Write a function to check whether two given words are anagrams.\n    '"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = []\n    for i in list1:\n        if i:\n            empty.append(False)\n        else:\n            empty.append(True)\n    return False not in empty\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for each_dict in list1:\n        if not each_dict:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(x * (2 ** i) for i, x in enumerate(reversed(nums)))\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(num) for num in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_ = 0\n    for i in nums:\n        int_ += i\n    return int_\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(lambda x, y: x * 10 + y, nums, 0)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for i in nums:\n        num += i*10**(len(nums)-1)\n        nums = nums[:-1]\n    return num\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], list):\n                test_list[i][j] = list_to_float(test_list[i][j])\n            else:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for elem in test_list:\n        for i in range(len(elem)):\n            try:\n                elem[i] = float(elem[i])\n            except:\n                pass\n    return test_list\n    \ndef gen_permutations(input_list, n):\n    '''\n    Generate all permutations of a list of size n.\n    '''\n    if n == 0:\n        return [[]]\n    else:\n        out = []\n        for elem in input_list:\n            for perm in gen_permutations(input_list, n-1):\n                out.append([elem] + perm)\n    return out\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for sublist in test_list:\n        for i in range(len(sublist)):\n            try:\n                float(sublist[i])\n                sublist[i] = float(sublist[i])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for a_list in test_list:\n        for index, element in enumerate(a_list):\n            try:\n                a_list[index] = float(element)\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for i, j in enumerate(sublist):\n            sublist[i] = float(j)\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], list):\n                list_to_float(test_list[i][j])\n            else:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(i) for i in l] for l in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for j in i:\n            try:\n                j = float(j)\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for idx, item in enumerate(sublist):\n            try:\n                sublist[idx] = float(item)\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of strings to a single string.\n    '''\n    return''.join(list)\n    \ndef get_user_input(type,prompt):\n    '''\n    A function that takes as input an integer or float and prompts the user for input.\n    The function returns the user's input as an integer or float.\n    '''\n    try:\n        return eval(type + '(input(\\''+prompt+'\\').strip())\\'')\n    except NameError:\n        return type(input(prompt).strip())\n    \ndef get_user_input_string(prompt):\n    '''\n    A function that takes as input a prompt string and asks the user to input a string.\n    The function returns the string that the user entered.\n    '''\n    return input(prompt)\n    \ndef get_user_input_string_list(prompt):\n    '''\n    A function that takes as input a prompt string and asks the user to input a string.\n    The function returns the list of strings that the user entered.\n    '''\n    return string_to_list(input(prompt))\n    \ndef get_user_input_number(prompt):\n    '''\n    A function that takes as input a prompt string and asks the user to input an integer.\n    The function returns the integer that the user entered.\n    '''\n    return get_user_input(int,prompt)\n    \ndef get_user_input_number_list(prompt):\n    '''\n    A function that takes as input a prompt string and asks the user to input a list of integers.\n    The function returns the list of integers that the user entered.\n    '''\n    return get_user_input_list(int,prompt)\n    \ndef get_user_input_number_list_string(prompt):\n    '''\n    A function that takes as input a prompt string and asks the user to input a list of integers.\n    The function returns the list of integers that the user entered.\n    '''\n    return get_user_input_list(str,prompt)\n    \ndef get_user_input_list(type,prompt):\n    '''\n    A function that takes as input a prompt string and asks the user to input a list of type:type.\n    The function returns the list of type:type that the user entered.\n    '''\n    try:\n        return eval(type + '([x for x in input(\\''+prompt+'\\').strip().split(' ')])')\n    except NameError:\n        return [type(x.strip()) for x in input(prompt).strip().split(' ')]\n    \ndef get_user_input_list_string(prompt):\n    '''\n    A function that takes as input a prompt string and asks the user to input a list of strings.\n    The function returns the list of strings that the user entered.\n    '''\n    return get_user_input_string_list(prompt)\n    \ndef get_user_input_yes_or_no(prompt):\n    '''\n    A function that takes as input a prompt string and asks the user to input a yes or no response.\n    The function returns True if the user enters 'y' or 'yes', False if the user enters 'n' or 'no' and raises an exception if the user enters something else.\n    '''\n    try:\n        return get_user_input(str,prompt) in ['y','yes']\n    except NameError:\n        return eval(input(prompt) in ['y','yes'])\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # write your code here\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split(' ')\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    '''\n    The naive approach would be to start with a pointer at the begining of the array and move it to the end of the array.\n    Keep incrementing the pointer and move it to the right until the number at that index is the same as the previous number.\n    If the number at the index is not the same as the previous number, then return the number at the index.\n    '''\n    \n    '''\n    The idea here is to maintain a sliding window at the end of the array. The idea is to maintain a pointer to the \n    beginning of the window and when we see a number that is not in the window, then we move the window one position to \n    the right and increment the counter. If we see a number that is in the window, then we move the window one position\n    to the left and decrease the counter. Then if the counter is 0, we have found a number that appeared only once.\n    '''\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left]!= arr[right]:\n            return arr[left]\n        left += 1\n        right -= 1\n    \n    return arr[left]\n    \n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def recur(arr, index, count, elem):\n        if index == len(arr):\n            return count\n        if arr[index] == elem:\n            return count\n        else:\n            count += 1\n            return recur(arr, index+1, count, elem)\n    if not arr:\n        return 0\n    return recur(arr, 0, 0, arr[0])\n    \n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    if arr is None:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    \n    for i in range(len(arr)-1, 0, -1):\n        if arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:\n            return arr[i]\n    \n    return arr[0]\n    \n    \ndef sort_nums(arr):\n    '''\n    Write a python function to sort the numbers in an array in an ascending order.\n    '''\n    \n    if arr is None:\n        return None\n    if len(arr) == 1:\n        return arr\n    \n    small = sort_nums(arr[:len(arr)//2])\n    large = sort_nums(arr[len(arr)//2:])\n    \n    return merge(small, large)\n    \ndef merge(a, b):\n    '''\n    Merge two sorted arrays into a single sorted array.\n    '''\n    \n    if a is None or b is None:\n        return None\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n        \n    if a[-1] >= b[-1]:\n        return a + b\n    else:\n        return b + a\n        \n    \ndef is_palindrome(arr):\n    '''\n    Write a python function to determine if an array is a palindrome.\n    '''\n    \n    if arr is None:\n        return None\n    if len(arr) == 1:\n        return True\n    \n    midpoint = len(arr) // 2\n    \n    if arr[midpoint] == arr[midpoint-1]:\n        return is_palindrome(arr[midpoint+1:])\n    else:\n        return False\n        \n        \ndef is_palindrome_dp(arr):\n    '''\n    Write a python function to determine if an array is a palindrome.\n    This algorithm uses dynamic programming to reduce the number of recursive calls.\n    '''\n    \n    if arr is None:\n        return None\n    if len(arr) == 1:\n        return True\n    \n    dp = [[0 for _ in range(len(arr))] for _ in range(len(arr))]\n    \n    for i in range(len(arr)):\n        dp[i][i] = 1\n    \n    for i in range(len(arr)-1, -1, -1):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = dp[i+1][j-1]\n    \n    return dp[0][len(arr)-1] == 1\n    \n    \ndef longest_increasing_subsequence(arr):\n    '''\n    Write a python function to find the longest increasing subsequence of a given array.\n    '''\n    \n    if arr is None:\n        return None\n    if len(arr) == 1:\n        return [arr[0]]\n    \n    n = len(arr)\n    \n    dp = [[1 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i, -1, -1):\n            if arr[i] > arr[j] and dp[i][j] + 1 > dp[i][i]:\n                dp[i][i] = dp[i][j] + 1\n    \n    return get_longest(dp, n)\n    \n    \ndef get_longest(dp, n):\n    '''\n    Get the longest increasing sequence by recursion.\n    '''\n    \n    longest = []\n    \n    for i in range(n):\n        if dp[i][i] > len(longest):\n            longest = [arr[i]]\n        elif dp[i][i] == len(longest):\n            longest.append(arr[i])\n    \n    if len(longest) == 0:\n        return None\n    return longest\n    \n    \ndef longest_increasing_subsequence_dp(arr):\n    '''\n    Write a python function to find the longest increasing subsequence of a given array.\n    This algorithm uses dynamic programming to reduce the number of recursive calls.\n    '''\n    \n    if arr is None:\n        return None\n    if len(arr) == 1:\n        return [arr[0]]\n    \n    n = len(arr)\n    \n    dp = [[1 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i, -1, -1):\n            if arr[i] > arr[j] and dp[i][j] + 1 > dp[i][i]:\n                dp[i][i] = dp[i][j] + 1\n    \n    return get_longest_dp(dp, n)\n    \n    \ndef get_longest_dp(dp, n):\n    '''\n    Get the longest increasing sequence by recursion.\n    '''\n    \n    longest = []\n    \n    for i in range(n):\n        if dp[i][i] > len(longest):\n            longest = [arr[i]]\n        elif dp[i][i] == len(longest):\n            longest.append(arr[i])\n    \n    if len(longest) == 0:\n        return None\n    return longest\n    \n    \ndef has_duplicates(arr):\n    '''\n    Write a python function to determine if an array has duplicate elements.\n    '''\n    \n    if arr is None:\n        return None\n    if len(arr) == 1:\n        return False\n    \n    n = len(arr)\n    \n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n    \n    \ndef longest_decreasing_subsequence(arr):\n    '''\n    Write a python function to find the longest decreasing subsequence of a given array.\n    '''\n    \n    if arr is None:\n        return None\n    if len(arr) == 1:\n        return [arr[0]]\n    \n    n = len(arr)\n    \n    dp = [[1 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i, -1, -1):\n            if arr[i] < arr[j] and dp[i][j] + 1 > dp[i][i]:\n                dp[i][i] = dp[i][j] + 1\n    \n    return get_longest(dp, n)\n    \n    \ndef get_longest_decreasing(dp, n):\n    '''\n    Get the longest decreasing sequence by recursion.\n    '''\n    \n    longest = []\n    \n    for i in range(n):\n        if dp[i][i] > len(longest):\n            longest = [arr[i]]\n        elif dp[i][i] == len(longest):\n            longest.append(arr[i])\n    \n    if len(longest) == 0:\n        return None\n    return longest\n    \n    \ndef get_longest_decreasing_dp(dp, n):\n    '''\n    Get the longest decreasing sequence by recursion.\n    This algorithm uses dynamic programming to reduce the number of recursive calls.\n    '''\n    \n    longest = []\n    \n    for i in range(n):\n        if dp[i][i] > len(longest):\n            longest = [arr[i]]\n        elif dp[i][i] == len(longest):\n            longest.append(arr[i])\n    \n    if len(longest) == 0:\n        return None\n    return longest\n    \n    \ndef longest_palindrome(arr):\n    '''\n    Write a python function to find the longest palindromic substring in a given array.\n    '''\n    \n    if arr is None:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    \n    n = len(arr)"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    start = 0\n    end = len(arr)-1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i]!= arr[i - 1]:\n            return arr[i]\n    return arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return -1\n    start,end = 0, len(arr)-1\n    while start<end:\n        mid = start + (end-start)/2\n        if (arr[mid] == arr[mid+1]):\n            start = mid+1\n        elif arr[mid] == arr[mid-1]:\n            end = mid-1\n        else:\n            return arr[mid]\n    return arr[start]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    '''\n    #Note: This solution takes O(n) time and O(n) space, where n is the size of the array.\n    '''\n    #A) Method 1: Iterate through the array and count each element.\n    #count = [0] * (len(arr) + 1)\n    #for element in arr:\n    #    count[element] += 1\n    #for i in range(1, len(count)):\n    #    if count[i] == 1:\n    #        print i\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr[0]!= arr[1]:\n        return arr[0]\n    else:\n        for i in range(1, len(arr)):\n            if arr[i]!= arr[i-1]:\n                return arr[i]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(zip(list1, list1)[::2])\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = None\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            if max_prod is None:\n                max_prod = abs(list1[i][0] * list1[j][1])\n            else:\n                max_prod = max(max_prod, abs(list1[i][0] * list1[j][1]))\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # list1 = [(-5, -3), (-4, -1), (-4, 1), (4, -3), (5, -1)]\n    # list1 = [(1, 3), (5, 7), (6, 2)]\n    # list1 = [(2, 1), (2, 4), (3, 3), (4, 1), (5, 2)]\n    # list1 = [(5, 7), (6, 2), (7, 3), (8, 1), (9, 2)]\n    # list1 = [(5, 7), (6, 2), (7, 3), (8, 1), (9, 2), (10, 4), (11, 3), (12, 1), (13, 2), (14, 4), (15, 3)]\n    # list1 = [(5, 7), (6, 2), (7, 3), (8, 1), (9, 2), (10, 4), (11, 3), (12, 1), (13, 2), (14, 4), (15, 3), (16, 1), (17, 2), (18, 4), (19, 3), (20, 1), (21, 2), (22, 4), (23, 3), (24, 1), (25, 2), (26, 4), (27, 3), (28, 1), (29, 2), (30, 4), (31, 3), (32, 1), (33, 2), (34, 4), (35, 3), (36, 1), (37, 2), (38, 4), (39, 3), (40, 1), (41, 2), (42, 4), (43, 3), (44, 1), (45, 2), (46, 4), (47, 3), (48, 1), (49, 2), (50, 4), (51, 3), (52, 1), (53, 2), (54, 4), (55, 3), (56, 1), (57, 2), (58, 4), (59, 3), (60, 1), (61, 2), (62, 4), (63, 3), (64, 1), (65, 2), (66, 4), (67, 3), (68, 1), (69, 2), (70, 4), (71, 3), (72, 1), (73, 2), (74, 4), (75, 3), (76, 1), (77, 2), (78, 4), (79, 3), (80, 1), (81, 2), (82, 4), (83, 3), (84, 1), (85, 2), (86, 4), (87, 3), (88, 1), (89, 2), (90, 4), (91, 3), (92, 1), (93, 2), (94, 4), (95, 3), (96, 1), (97, 2), (98, 4), (99, 3), (100, 1), (101, 2), (102, 4), (103, 3), (104, 1), (105, 2), (106, 4), (107, 3), (108, 1), (109, 2), (110, 4), (111, 3), (112, 1), (113, 2), (114, 4), (115, 3), (116, 1), (117, 2), (118, 4), (119, 3), (120, 1), (121, 2), (122, 4), (123, 3), (124, 1), (125, 2), (126, 4), (127, 3), (128, 1), (129, 2), (130, 4), (131, 3), (132, 1), (133, 2), (134, 4), (135, 3), (136, 1), (137, 2), (138, 4), (139, 3), (140, 1), (141, 2), (142, 4), (143, 3), (144, 1), (145, 2), (146, 4), (147, 3), (148, 1), (149, 2), (150, 4), (151, 3), (152, 1), (153, 2), (154, 4), (155, 3), (156, 1), (157, 2), (158, 4), (159, 3), (160, 1), (161, 2), (162, 4), (163, 3), (164, 1), (165, 2), (166, 4), (167, 3), (168, 1), (169, 2), (170, 4), (171, 3), (172, 1), (173, 2), (174, 4), (175, 3), (176, 1), (177, 2), (178, 4), (179, 3), (180, 1), (181, 2), (182, 4), (183, 3), (184, 1), (185, 2), (186, 4), (187, 3), (188, 1), (189, 2), (190, 4), (191, 3), (192, 1), (193, 2), (194, 4), (195, 3), (196, 1), (197, 2), (198, 4), (199, 3), (200, 1), (201, 2), (202, 4), (203, 3), (204, 1), (205, 2), (206, 4), (207, 3), (208, 1), (209, 2), (210, 4), (211, 3), (212, 1), (213, 2), (214, 4), (215, 3), (216, 1), (217, 2), (218, 4), (219, 3), (220, 1), (221, 2), (222, 4), (223, 3), (224, 1), (225, 2), (226, 4), (227, 3), (228, 1), (229, 2), (230, 4), (231, 3), (232, 1), (233, 2), (234, 4), (235, 3), (236, 1), (237, 2), (238, 4), (239, 3), (240, 1), (241, 2), (242, 4), (243, 3), (244, 1), (245, 2), (246, 4), (247, 3), (248, 1), (249, 2), (250, 4), (251, 3), (252, 1), (253, 2), (254, 4), (255, 3), (256, 1), (257, 2), (258, 4), (259, 3), (260, 1), (261, 2), (262, 4), (263, 3), (264, 1), (265, 2), (266, 4), (267, 3), (268, 1), (269, 2), (270, 4), (271, 3), (272, 1), (273, 2), (274, 4), (275, 3), (276, 1), (277, 2), (278, 4), (279, 3), (280, 1), (281, 2), (282, 4), (283, 3), (284, 1), (285, 2), (286, 4), (287, 3), (288, 1), (289, 2), (290, 4), (291, 3), (292, 1), (293, 2), (294, 4), (295, 3), (296, 1), (297, 2), (298, 4), (299, 3), (300, 1), (301, 2), (302, 4), (303, 3), (304, 1), (305, 2), (306, 4), (307, 3), (308, 1), (309, 2), (310, 4), (311, 3), (312, 1), (313, 2), (314, 4), (315, 3), (316, 1), (317, 2), (318, 4), (319, 3), (320, 1), (321, 2), (322, 4), (323, 3), (324, 1), (325, 2), (326, 4), (327, 3), (328, 1), (329, 2), (330, 4), (331, 3), (332, 1), (333, 2), (334, 4), (335, 3), (336, 1), (337, 2), (338, 4), (339, 3), (340, 1), (341, 2), (342, 4), (343, 3), (344, 1), (345, 2), (346, 4), (347, 3), (348, 1), (349, 2), (350, 4), (351, 3), (352, 1), (353, 2), (354, 4), (355, 3), (356, 1), (357, 2), (358, 4), (359, 3), (360, 1), (361, 2), (362, 4), (363, 3), (364, 1), (365, 2), (366, 4), (367, 3), (368, 1)"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([max([l1*l2 for l1 in list1[i]]) for i in range(len(list1))])\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #The first solution\n    #list1.sort()\n    #max_product = 0\n    #for i in xrange(0, len(list1), 2):\n    #    max_product = max(max_product, list1[i]*list1[i+1])\n    #return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0]*list1[j][0] > max_product:\n                max_product = list1[i][0]*list1[j][0]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    s = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            s.append(list1[i][0]*list1[i][1])\n    return max(s)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse=True)\n    max_product=0\n    for i in range(0,len(list1),2):\n        if i+1<len(list1):\n            max_product=max(max_product,list1[i][0]*list1[i+1][0])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 1\n    for index in range(len(list1)):\n        x1,y1 = list1[index]\n        for index2 in range(len(list1)):\n            x2,y2 = list1[index2]\n            if index2 > index:\n                product = x1*x2*y2\n                max_product = max(product,max_product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1])\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [1]\n    amicable_numbers_sum = 0\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            amicable_numbers_sum += i\n            if i!= amicable_numbers[-1]:\n                amicable_numbers.append(amicable_numbers[-1]+i)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [1,2]\n    amicable_numbers_sum = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums_sum = 0\n    amicable_nums = []\n    for n in range(1, limit):\n        if n == sum(divisors(n)) and n!= sum(divisors(sum(divisors(n)))):\n            amicable_nums_sum += n\n            amicable_nums.append(n)\n    return amicable_nums_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    nums = []\n    for i in range(1, limit):\n        if sum(list(map(lambda x: int(x), str(i)))) == i:\n            nums.append(i)\n    return sum(nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    answer = sum([a for a in range(1, limit) if sum(divisors(a)) == a and a!= sum(divisors(sum(divisors(a))))])\n    return answer\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [1]\n    amicable_numbers_sum = 0\n    for number in range(2, limit):\n        n_sum = sum(list(map(int, list(str(number)))))\n        if number!= n_sum:\n            if number == n_sum and n_sum not in amicable_numbers:\n                amicable_numbers.append(n_sum)\n                amicable_numbers_sum += number\n        else:\n            if number not in amicable_numbers:\n                amicable_numbers.append(number)\n                amicable_numbers_sum += number\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(amicable_numbers(limit))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def amicable_number(n):\n        '''\n        Return True if n is an amicable number, else return False.\n        '''\n        divisors = set()\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return sum(divisors) == n\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(get_amicable_numbers(limit))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = {}\n    for number in range(2, limit):\n        amicable_nums[number] = 0\n        for divisor in range(1, number):\n            if number % divisor == 0:\n                if divisor == (number // divisor):\n                    amicable_nums[number] += divisor\n                else:\n                    amicable_nums[number] += (number // divisor) + divisor\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n    \ndef angle_m_p_c(a,b,c):\n    '''\n    Write a function to get the angle between the line mx+b and c\n    '''\n    m_c = (a*c.real - b*c.imag) / (a**2 + b**2)\n    c_a = c.real - m_c*c.imag\n    c_b = c.imag - m_c*c.real\n    c_angle = angle_complex(c_a, c_b)\n    \n    m_b = (a*b.real - b*c.real) / (a**2 + b**2)\n    b_a = b.real - m_b*b.imag\n    b_b = b.imag - m_b*b.real\n    b_angle = angle_complex(b_a, b_b)\n    return c_angle - b_angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a_re=a.real\n    a_im=a.imag\n    b_re=b.real\n    b_im=b.imag\n    angle=0\n    angle=cmath.acos(a_re*b_re+a_im*b_im)*180/cmath.pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    #phase = cmath.polar(complex(a,b))\n    if angle < 0:\n        angle += 2 * cmath.pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return 180*cmath.phase(a-b)/cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b==0:\n        return float('inf')\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c=a+b*1j\n    return cmath.phase(c)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    phase = cmath.phase(a+b*1j)\n    return phase*180/3.14\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    if angle>0:\n        return angle\n    else:\n        return (2*cmath.pi) + angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = (a.real ** 2 + a.imag ** 2) ** (1/2)\n    y = (b.real ** 2 + b.imag ** 2) ** (1/2)\n    return (a.real * b.real + a.imag * b.imag) / (x * y)\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # length = 0\n    # max_length = 0\n    # for i in range(0, len(string)):\n    #     length = 0\n    #     for j in range(0, len(string)):\n    #         if string[i] == string[j]:\n    #             length += 1\n    #     if length > max_length:\n    #         max_length = length\n    # return max_length\n    length = 0\n    max_length = 0\n    for i in range(0, len(string)):\n        if string[i] == '0':\n            length += 1\n        else:\n            length = 0\n        if length > max_length:\n            max_length = length\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # count number of zeros and ones in string\n    zero_count = 0\n    one_count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n    \n    # compare to see if there is a better length \n    # return best length \n    best_length = max(zero_count, one_count)\n    return best_length \n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    zeros = []\n    ones = []\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zeros = ones = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        length = max(zeros, ones)\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # max_len = len(string)\n    # for i in range(1, max_len):\n    #     count = 0\n    #     for j in range(len(string)):\n    #         if string[j:j+i] == '1':\n    #             count += 1\n    #         else:\n    #             count -= 1\n    #         if count == 0:\n    #             max_len = i\n    #             break\n    # return max_len\n    count = 0\n    max_len = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i+1\n        elif count < 0:\n            break\n    return max_len\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        max_length = max(max_length, count)\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    if string == '':\n        return 0\n    for i in range(0, len(string)):\n        if string[i] == '0':\n            count = 0\n            for j in range(i, len(string)):\n                if string[j] == '0':\n                    count += 1\n                else:\n                    break\n            if count > max_length:\n                max_length = count\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_len = 0\n    current_len = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            current_len += 1\n        else:\n            current_len = 0\n        if current_len > max_len:\n            max_len = current_len\n    return max_len\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    substring = ''\n    max_length = 0\n    min_length = len(string)\n    for i in range(len(string)):\n        substring += string[i]\n        if string[i] == '1':\n            max_length = max(max_length, len(substring))\n            min_length = min(min_length, len(substring))\n            substring = ''\n    return max_length - min_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    string = string[::-1]\n    zeros = 0\n    ones = 0\n    for i in xrange(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        if zeros == ones:\n            return len(string) - i - 1\n    return 0\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = set()\n    for i in range(2,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            divisors.add(i)\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if (a<0 or b<0):\n        return 0\n    else:\n        if (a>b):\n            greater = a\n            smaller = b\n        else:\n            greater = b\n            smaller = a\n        #print greater, smaller\n        bigger=1\n        smaller=1\n        if (greater%smaller==0):\n            return greater\n        else:\n            for i in range(2,smaller):\n                if (greater%i==0):\n                    smaller = i\n                    break\n        #print smaller\n        for i in range(2,greater):\n            if (smaller%i==0):\n                bigger=i\n                break\n        if (bigger==1):\n            return greater\n        else:\n            return sum(bigger,smaller)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    div1 = []\n    div2 = []\n    div = []\n    for i in range(1,a):\n        if a%i == 0:\n            div1.append(i)\n    for j in range(1,b):\n        if b%j == 0:\n            div2.append(j)\n    for k in div1:\n        if k in div2:\n            div.append(k)\n    return sum(div)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        d=a\n        a=b\n        b=d\n    l=[]\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            l.append(i)\n    return sum(l)\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #sum = 0\n    #for i in range(1, min(a,b)+1):\n    #    if(a % i == 0 and b % i == 0):\n    #        sum = sum + i\n    #return sum\n    return gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(2, a):\n        if a%i == 0:\n            divisors.append(i)\n    for j in range(2, b):\n        if b%j == 0:\n            divisors.append(j)\n    return sum(divisors)\ndef sum_factors(n):\n    '''\n    Write a python function to find the sum of the unique factors of the given number.\n    '''\n    unique_factors = []\n    for i in range(1, n):\n        if n%i == 0:\n            if i not in unique_factors:\n                unique_factors.append(i)\n    return sum(unique_factors)\ndef is_pentagonal(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    s = (1 + (1 + 24*n)**0.5)/6\n    return s == int(s)\ndef is_hexagonal(n):\n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    s = (1 + (1 + 8*n)**0.5)/4\n    return s == int(s)\ndef is_heptagonal(n):\n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    s = (1 + (1 + 40*n)**0.5)/10\n    return s == int(s)\ndef is_octagonal(n):\n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    s = (1 + (1 + 16*n)**0.5)/8\n    return s == int(s)\ndef is_nonagonal(n):\n    '''\n    Write a python function to check whether the given number is nonagonal or not.\n    '''\n    s = (1 + (1 + 24*n)**0.5)/6\n    return s == int(s)\ndef is_decagonal(n):\n    '''\n    Write a python function to check whether the given number is decagonal or not.\n    '''\n    s = (1 + (1 + 4*n)**0.5)/2\n    return s == int(s)\ndef is_triangular(n):\n    '''\n    Write a python function to check whether the given number is triangular or not.\n    '''\n    s = (1 + (1 + 8*n)**0.5)/4\n    return s == int(s)\ndef is_square(n):\n    '''\n    Write a python function to check whether the given number is square or not.\n    '''\n    s = (1 + (1 + 16*n)**0.5)/8\n    return s == int(s)\ndef is_pentagonal_number(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    return is_pentagonal(n) and sum_factors(n)%n == 0\ndef is_hexagonal_number(n):\n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    return is_hexagonal(n) and sum_factors(n)%n == 0\ndef is_heptagonal_number(n):\n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    return is_heptagonal(n) and sum_factors(n)%n == 0\ndef is_octagonal_number(n):\n    '''\n    Write a python function to check whether the given number is octagonal or not.\n    '''\n    return is_octagonal(n) and sum_factors(n)%n == 0\ndef is_nonagonal_number(n):\n    '''\n    Write a python function to check whether the given number is nonagonal or not.\n    '''\n    return is_nonagonal(n) and sum_factors(n)%n == 0\ndef is_decagonal_number(n):\n    '''\n    Write a python function to check whether the given number is decagonal or not.\n    '''\n    return is_decagonal(n) and sum_factors(n)%n == 0\ndef is_triangular_number(n):\n    '''\n    Write a python function to check whether the given number is triangular or not.\n    '''\n    return is_triangular(n) and sum_factors(n)%n == 0\ndef is_square_number(n):\n    '''\n    Write a python function to check whether the given number is square or not.\n    '''\n    return is_square(n) and sum_factors(n)%n == 0\ndef is_pentagonal_factor(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    return is_pentagonal(n) and sum_factors(n)%n!= 0\ndef is_hexagonal_factor(n):\n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    return is_hexagonal(n) and sum_factors(n)%n!= 0\ndef is_heptagonal_factor(n):\n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    return is_heptagonal(n) and sum_factors(n)%n!= 0\ndef is_octagonal_factor(n):\n    '''\n    Write a python function to check whether the given number is octagonal or not.\n    '''\n    return is_octagonal(n) and sum_factors(n)%n!= 0\ndef is_nonagonal_factor(n):\n    '''\n    Write a python function to check whether the given number is nonagonal or not.\n    '''\n    return is_nonagonal(n) and sum_factors(n)%n!= 0\ndef is_decagonal_factor(n):\n    '''\n    Write a python function to check whether the given number is decagonal or not.\n    '''\n    return is_decagonal(n) and sum_factors(n)%n!= 0\ndef is_triangular_factor(n):\n    '''\n    Write a python function to check whether the given number is triangular or not.\n    '''\n    return is_triangular(n) and sum_factors(n)%n!= 0\ndef is_square_factor(n):\n    '''\n    Write a python function to check whether the given number is square or not.\n    '''\n    return is_square(n) and sum_factors(n)%n!= 0\ndef number_of_divisors(n):\n    '''\n    Write a python function to find the number of divisors of the given number.\n    '''\n    divisors = []\n    for i in range(2, n):\n        if n%i == 0:\n            divisors.append(i)\n    return len(divisors)\ndef number_of_factors(n):\n    '''\n    Write a python function to find the number of factors of the given number.\n    '''\n    factors = []\n    for i in range(1, n):\n        if n%i == 0:\n            factors.append(i)\n    return len(factors)\ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    return number_of_factors(n) == 2\ndef is_fibonacci_number(n):\n    '''\n    Write a python function to check whether the given number is fibonacci or not.\n    '''\n    return is_fibonacci_number(n) and n>=0\ndef is_fibonacci_number_less_than_100(n):\n    '''\n    Write a python function to check whether the given number is fibonacci or not.\n    '''\n    return is_fibonacci_number(n) and n<100\ndef is_lucky_number(n):\n    '''\n    Write a python function to check whether the given number is lucky or not.\n    '''\n    return is_fibonacci_number_less_than_100(n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors=[]\n    if b==0:\n        return 1\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = []\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            s.append(i)\n    return sum(s)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        while b!= 0:\n            a, b = b, a%b\n        return a\n    return a*b/gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(1, a+1):\n        if a % i == 0:\n            list1.append(i)\n    for j in range(1, b+1):\n        if b % j == 0:\n            list2.append(j)\n    s = list(set(list1) & set(list2))\n    s = sum(s)\n    return s\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n    \nif __name__ == \"__main__\":\n    print(multiply_int(5, 9))\n    \ndef div_int(x, y):\n    '''\n    Write a function to divide two integers.\n    '''\n    return x/y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # As per the solution, we can perform integer multiplication using a simple loop\n    # which is not the best and best way to do this operation.\n    # We will implement this code using an inline loop.\n    # This loop will calculate the values of z_i and c_i and then update the final result c_final\n    # using the formula: c_i = z_i * c_i_1\n    # This can be implemented using a loop on the right-hand side.\n    # The loop can be extended to more than 2 numbers.\n    # More on this later\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if n < 0:\n        return []\n    elif len(str) < n:\n        return []\n    else:\n        return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = [word for word in str.split(' ')]\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    a = [x for x in str.split(' ') if len(x) > n]\n    return a\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n    \ndef longest_word(str):\n    '''\n    Write a function that takes a list of words and returns the longest one.\n    '''\n    longest = 0\n    for word in str:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n    \ndef remove_vowels(str):\n    '''\n    Write a function that takes a string and removes vowels and returns the string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        str = str.replace(vowel, '')\n    return str\n    \ndef convert_to_base_2(n):\n    '''\n    Write a function that takes a positive integer and returns its equivalent in base 2.\n    '''\n    base_2 = []\n    while n > 0:\n        base_2.append(n % 2)\n        n = n // 2\n    base_2.reverse()\n    return base_2\n    \ndef get_digits(n):\n    '''\n    Write a function that takes a positive integer and returns a list of its digits.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n = n // 10\n    return digits\n    \ndef add_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of its digits.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n    \ndef count_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the number of its digits.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count\n    \ndef count_evens(n):\n    '''\n    Write a function that takes a positive integer and returns the number of even digits in it.\n    '''\n    count = 0\n    while n > 0:\n        if n % 10 % 2 == 0:\n            count += 1\n        n = n // 10\n    return count\n    \ndef count_odds(n):\n    '''\n    Write a function that takes a positive integer and returns the number of its odd digits in it.\n    '''\n    count = 0\n    while n > 0:\n        if n % 10 % 2 == 1:\n            count += 1\n        n = n // 10\n    return count\n    \ndef count_multiples(n, m):\n    '''\n    Write a function that takes two positive integers and returns the number of multiples of m that are less than or equal to n.\n    '''\n    if n > m:\n        return 0\n    count = 0\n    for i in range(n, m * m, m):\n        if i <= n:\n            count += 1\n    return count\n    \ndef count_multiplies(n, m):\n    '''\n    Write a function that takes two positive integers and returns the number of multiples of m that are less than or equal to n.\n    '''\n    count = 0\n    for i in range(n, m * m, m):\n        if i <= n:\n            count += 1\n    return count\n    \ndef prime_factors(n):\n    '''\n    Write a function that takes a positive integer and returns a list of its prime factors.\n    '''\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n    \ndef sum_of_squares(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of the squares of its digits.\n    '''\n    sum = 0\n    while n > 0:\n        sum += (n % 10) ** 2\n        n = n // 10\n    return sum\n    \ndef is_square(n):\n    '''\n    Write a function that takes a positive integer and returns True if it is a perfect square, and False otherwise.\n    '''\n    if n == 0:\n        return False\n    else:\n        #return (n // 1) ** 0.5 == int(n // 1) ** 0.5\n        return (n ** 0.5) % 1 == 0\n    \ndef is_prime(n):\n    '''\n    Write a function that takes a positive integer and returns True if it is prime, and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i ** 2 <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n    \ndef is_pandigital(n):\n    '''\n    Write a function that takes a positive integer and returns True if it is pandigital, and False otherwise.\n    '''\n    if len(str(n))!= 9:\n        return False\n    str_n = str(n)\n    for i in range(1, 10):\n        if str(i) not in str_n:\n            return False\n    return True\n    \ndef count_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the number of its digits.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count\n    \ndef is_pandigital_product(n, m):\n    '''\n    Write a function that takes two positive integers and returns True if their product is pandigital.\n    '''\n    product = n * m\n    str_product = str(product)\n    for i in range(1, 10):\n        if str(i) not in str_product:\n            return False\n    return True\n    \ndef is_pandigital_product_of_digits(n, m):\n    '''\n    Write a function that takes two positive integers and returns True if their product is pandigital and each digit of the product is a digit of one of the arguments.\n    '''\n    product = n * m\n    str_product = str(product)\n    for i in range(1, 10):\n        if str(i) not in str_product:\n            return False\n    return True\n    \ndef common_digits(n, m):\n    '''\n    Write a function that takes two positive integers and returns True if they share at least one digit, and False otherwise.\n    '''\n    if len(str(n)) < len(str(m)):\n        n, m = m, n\n    common_digits = []\n    for i in range(0, len(str(n))):\n        if str(n)[i] in str(m):\n            common_digits.append(str(n)[i])\n    return len(common_digits) > 0\n    \ndef num_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the number of digits in it.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count\n    \ndef sum_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of its digits.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n    \ndef is_odd(n):\n    '''\n    Write a function that takes a positive integer and returns True if it is odd, and False otherwise.\n    '''\n    return n % 2!= 0\n    \ndef is_odd_product(n, m):\n    '''\n    Write a function that takes two positive integers and returns True if their product is odd and False otherwise.\n    '''\n    return (n * m) % 2!= 0\n    \ndef is_palindrome(n):\n    '''\n    Write a function that takes a positive integer and return"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    words_len = [len(word) for word in words]\n    return filter(lambda word: words_len[words.index(word)] > n, words)\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    count = 0\n    for word in str:\n        if len(word) > n:\n            count += 1\n    return count\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    '''\n    test_matrix = [[0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0]]\n    '''\n    # Every row, col and diagonal should have the same sum\n    row_sum = 0\n    col_sum = 0\n    diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n    diagonal_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[3][3]\n    # if the sums of the rows, cols and diagonals are equal, then it is a magic square\n    if row_sum == col_sum == diagonal_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    num_sum = 0\n    diag_sum = 0\n    for i in range(len(my_matrix)):\n        num_sum += my_matrix[i][i]\n        diag_sum += my_matrix[i][-i-1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # n = len(my_matrix)\n    n = len(my_matrix[0])\n    total = 0\n    for i in range(n):\n        total += my_matrix[i][i]\n    if total!= n ** 2:\n        return False\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if my_matrix[i][j]!= my_matrix[i][k] + my_matrix[j][k]:\n                    return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]):\n        if sum(my_matrix[i][i] for i in range(0,len(my_matrix))) == sum(my_matrix[i][len(my_matrix)-1-i] for i in range(0,len(my_matrix))):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check each row\n    for row in range(len(my_matrix)):\n        row_sum = sum(my_matrix[row])\n        if row_sum!= 15:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    if rows == 0 or cols == 0:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    total = 0\n    for row in range(len(my_matrix)):\n        if sum(my_matrix[row])!= 15:\n            return False\n        for col in range(len(my_matrix)):\n            total += my_matrix[row][col]\n        if total!= 15:\n            return False\n        total = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_sum = 0\n    for row in range(len(my_matrix)):\n        my_sum += my_matrix[row][row]\n    if my_sum!= 30:\n        return False\n    \n    my_sum = 0\n    for column in range(len(my_matrix)):\n        my_sum += my_matrix[column][len(my_matrix)-1-column]\n    if my_sum!= 30:\n        return False\n    \n    my_sum = 0\n    for i in range(len(my_matrix)):\n        my_sum += my_matrix[i][i]\n    if my_sum!= 30:\n        return False\n    \n    my_sum = 0\n    for j in range(len(my_matrix)):\n        my_sum += my_matrix[j][len(my_matrix)-1-j]\n    if my_sum!= 30:\n        return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_squares = [\n        [8, 1, 6, 3, 5, 7, 4, 9, 2],\n        [6, 1, 8, 7, 5, 3, 2, 9, 4],\n        [4, 9, 2, 3, 5, 7, 8, 1, 6],\n        [2, 9, 4, 7, 5, 3, 6, 1, 8],\n        [8, 3, 4, 1, 5, 9, 6, 7, 2],\n        [4, 3, 8, 9, 5, 1, 2, 7, 6],\n        [6, 7, 2, 1, 5, 9, 8, 3, 4],\n        [2, 7, 6, 9, 5, 1, 4, 3, 8]\n    ]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def check_magic_square(matrix):\n        n = len(matrix)\n        s = sum(matrix[0])\n        for i in range(1, n):\n            s += matrix[0][i]\n            s += matrix[i][0]\n        for i in range(1, n):\n            for j in range(1, n):\n                s += matrix[i][j]\n                s -= matrix[i-1][j]\n                s -= matrix[i][j-1]\n                s += matrix[i-1][j-1]\n        return s == 0\n    return check_magic_square(my_matrix)\n    \nprint magic_square_test([[8, 1, 6, 3, 5, 7, 4, 9, 2], \n                [4, 9, 2, 3, 5, 7, 8, 1, 6], \n                [7, 6, 9, 2, 1, 5, 8, 3, 4], \n                [2, 7, 5, 9, 4, 3, 1, 6, 8], \n                [3, 4, 1, 6, 8, 7, 2, 5, 9], \n                [9, 5, 8, 7, 6, 3, 4, 2, 1], \n                [6, 3, 4, 1, 5, 2, 9, 8, 7], \n                [5, 2, 1, 8, 7, 9, 6, 4, 3], \n                [1, 4, 2, 5, 3, 6, 8, 7, 9]])"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return None\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    return max(freq, key=lambda x: freq[x])\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_item = None\n    for item in nums:\n        if nums[item] > max_freq:\n            max_freq = nums[item]\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(lambda :0)\n    for i in nums:\n        count[i] += 1\n    max_value = max(count.values())\n    return max_value\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return d[max(d, key=d.get)]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    table = {}\n    for num in nums:\n        if num in table:\n            table[num] += 1\n        else:\n            table[num] = 1\n    max_count = max(table.values())\n    for k, v in table.items():\n        if v == max_count:\n            return k\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(lambda :0)\n    for i in nums:\n        d[i] += 1\n    max_freq = max(d.values())\n    result = []\n    for i in d:\n        if d[i] == max_freq:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if nums == []:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    d = defaultdict(int)\n    max_val = None\n    max_count = 0\n    for i in nums:\n        d[i] += 1\n    for i in d:\n        if d[i] > max_count:\n            max_val = i\n            max_count = d[i]\n    return max_val\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return None\n    hash_map = defaultdict(int)\n    for num in nums:\n        hash_map[num] += 1\n    max_freq_num = nums[0]\n    max_freq = 0\n    for key, val in hash_map.items():\n        if val > max_freq:\n            max_freq = val\n            max_freq_num = key\n    return max_freq_num\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        d = defaultdict(int)\n        for n in nums:\n            d[n] += 1\n        return max(d, key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    for item in set(nums):\n        if nums.count(item) > max_count:\n            max_count = nums.count(item)\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    temp = []\n    for letter in str1:\n        if letter in vowels:\n            temp.append(letter)\n    temp.reverse()\n    res = ''\n    for letter in temp:\n        res += letter\n    return res\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    str2 = []\n    for c in str1:\n        if c in vowels:\n            str2.insert(0, c)\n        else:\n            str2.append(c)\n    return ''.join(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    str1 = list(str1)\n    vowel_idx = []\n    for idx, x in enumerate(str1):\n        if x in vowels:\n            vowel_idx.append(idx)\n    vowel_idx = reversed(vowel_idx)\n    for x in range(len(vowel_idx)):\n        str1[vowel_idx[x]] = str1[vowel_idx[x]].upper()\n    str1 = ''.join(str1)\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    return ''.join([char for char in str1 if char not in vowels])[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = set('aeiouAEIOU')\n    vowel_str = ''\n    \n    for i in str1:\n        if i in vowels:\n            vowel_str = vowel_str + i\n            \n    return vowel_str[::-1]\n    \ndef check_anagrams(str1, str2):\n    '''\n    Write a python function to check if two strings are anagrams of each other.\n    '''\n    \n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n    \ndef check_anagrams_2(str1, str2):\n    '''\n    Write a python function to check if two strings are anagrams of each other.\n    '''\n    \n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n    \ndef count_triangles(n):\n    '''\n    Write a python function to count the number of possible triangles\n    \n    \n    '''\n    \n    return n*(n-1)*(n-2)/6\n    \ndef word_abbreviation(word):\n    '''\n    Write a python function to abbreviate words. The function takes a word and \n    returns the abbreviation of the word. If the word is too long to be abbreviated, \n    return the original word.\n    '''\n    \n    if len(word) > 4:\n        return word\n    else:\n        return word[0] + str(len(word) - 2) + word[-1]\n    \ndef sum_of_intervals(intervals):\n    '''\n    Write a python function to sum of the intervals. The intervals is a list of tuples in the form (start, stop)\n    '''\n    \n    return sum([x[1] - x[0] for x in intervals])\n    \ndef two_smallest_numbers(numbers):\n    '''\n    Write a python function to find the two smallest numbers in a list.\n    '''\n    \n    return sorted(numbers)[:2]\n    \ndef remove_duplicates(nums):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    \n    return set(nums)\n    \ndef sum_of_list(nums):\n    '''\n    Write a python function to return the sum of the numbers in a list.\n    '''\n    \n    return sum(nums)\n    \ndef is_number_balanced(number):\n    '''\n    Write a python function to check if the string is a palindrome.\n    '''\n    \n    return number == number[::-1]\n    \ndef count_characters_in_a_string(str1):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    \n    return len(str1)\n    \ndef count_characters_in_a_string(str1):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    \n    return len(str1)\n    \ndef change_the_character(str1, index, new_character):\n    '''\n    Write a python function to change the character at a given index in a string.\n    '''\n    \n    return str1[:index] + new_character + str1[index+1:]\n    \ndef count_vowels_in_a_string(str1):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    \n    vowels = set('aeiouAEIOU')\n    num_vowels = 0\n    \n    for i in str1:\n        if i in vowels:\n            num_vowels += 1\n            \n    return num_vowels\n    \ndef count_vowels_in_a_string(str1):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    \n    vowels = set('aeiouAEIOU')\n    num_vowels = 0\n    \n    for i in str1:\n        if i in vowels:\n            num_vowels += 1\n            \n    return num_vowels\n    \ndef count_consonants_in_a_string(str1):\n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    \n    vowels = set('aeiouAEIOU')\n    num_consonants = 0\n    \n    for i in str1:\n        if i not in vowels:\n            num_consonants += 1\n            \n    return num_consonants\n    \ndef count_consonants_in_a_string(str1):\n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    \n    vowels = set('aeiouAEIOU')\n    num_consonants = 0\n    \n    for i in str1:\n        if i not in vowels:\n            num_consonants += 1\n            \n    return num_consonants\n    \ndef is_triangle(side1, side2, side3):\n    '''\n    Write a python function to check if a triangle is valid. A triangle is valid if the sum of the lengths of the three sides is equal to the length of the hypotenuse.\n    '''\n    \n    return side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1\n    \ndef is_triangle(side1, side2, side3):\n    '''\n    Write a python function to check if a triangle is valid. A triangle is valid if the sum of the lengths of the three sides is equal to the length of the hypotenuse.\n    '''\n    \n    return side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1\n    \ndef is_triangle(side1, side2, side3):\n    '''\n    Write a python function to check if a triangle is valid. A triangle is valid if the sum of the lengths of the three sides is equal to the length of the hypotenuse.\n    '''\n    \n    return side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1\n    \ndef print_hanging_indents(string, num_indents):\n    '''\n    Write a python function to print a string with a certain number of indents.\n    '''\n    \n    print'' * num_indents + string\n    \ndef print_hanging_indents(string, num_indents):\n    '''\n    Write a python function to print a string with a certain number of indents.\n    '''\n    \n    print'' * num_indents + string\n    \ndef find_longest_word(words):\n    '''\n    Write a python function to return the longest word in a list.\n    '''\n    \n    return max(words, key = len)\n    \ndef find_longest_word(words):\n    '''\n    Write a python function to return the longest word in a list.\n    '''\n    \n    return max(words, key = len)\n    \ndef find_longest_word(words):\n    '''\n    Write a python function to return the longest word in a list.\n    '''\n    \n    return max(words, key = len)\n    \ndef remove_duplicates(nums):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    \n    return set(nums)\n    \ndef reverse_vowels(str1):\n    '''\n    Write a python function to reverse vowels in a string.\n    '''\n    \n    vowels = set('aeiouAEIOU')\n    vowel_str = ''\n    \n    for i in str1:\n        if i in vowels:\n            vowel_str = vowel_str + i\n            \n    return vowel_str[::-1]\n    \ndef reverse_vowels(str1):\n    '''\n    Write a python function to reverse vowels in a string.\n    '''\n    \n    vowels = set('aeiouAEIOU')\n    vo"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    return \"\".join([x for x in str1 if x in vowels][::-1])\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return ''.join(reversed(str1.split('y')))\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    str1 = list(str1)\n    l, r = 0, len(str1)-1\n    while l<r:\n        if str1[l] not in vowels:\n            l+=1\n        elif str1[r] not in vowels:\n            r-=1\n        else:\n            str1[l], str1[r] = str1[r], str1[l]\n            l+=1\n            r-=1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    list1 = list(str1)\n    left = 0\n    right = len(list1)-1\n    while left <= right:\n        if list1[left] not in vowels:\n            left += 1\n        elif list1[right] not in vowels:\n            right -= 1\n        else:\n            list1[left], list1[right] = list1[right], list1[left]\n            left += 1\n            right -= 1\n    return ''.join(list1)\n    \nprint(reverse_vowels('the lazy dog'))"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    lst1 = list(str1)\n    for i in range(len(lst1)):\n        if lst1[i] == 'y':\n            lst1[i] = 'a'\n    lst1 = ''.join(lst1)\n    return lst1[::-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s += str(i) +''\n    return s[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    a_string = \"\"\n    for i in tup1:\n        a_string = a_string + str(i)\n    return a_string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(%s, %s)' % (tup1[0], tup1[1])\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = str(tup1)\n    str_tup = str_tup.replace(\"(\", \"\")\n    str_tup = str_tup.replace(\")\", \"\")\n    str_tup = str_tup.replace(\", \", \"\")\n    return str_tup\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1=''\n    for i in tup1:\n        str1=str1+str(i)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(%s)\" % \", \".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for elem in tup1:\n        tup_str += elem\n    return tup_str\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == None or len(nums) == 0:\n        return 0\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x < 0, nums))\n    \ndef check_primes(num):\n    '''\n    Implement a function that checks if the input number is a prime number or not.\n    '''\n    if num == 1 or num == 0:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return sum_negativenum(nums[1:]) - nums[0]\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n    elif len(nums) == 1:\n        if nums[0] < 0:\n            return nums[0]\n        else:\n            return 0\n    else:\n        if nums[0] < 0:\n            return nums[0] + sum_negativenum(nums[1:])\n        else:\n            return sum_negativenum(nums[1:])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for x in nums:\n        if x < 0:\n            total += x\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for num in nums:\n        if num < 0:\n            s += num\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n < 0)\n    \ndef add_negatives(nums):\n    '''\n    Write a function to add all negative numbers of a given list of numbers\n    '''\n    return sum(n for n in nums if n < 0)\n    \ndef count_negatives(nums):\n    '''\n    Write a function to count the numbers of negative numbers in a given list of numbers\n    '''\n    return sum(1 for n in nums if n < 0)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 3*n - 1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        return 2 * (n ** 2 - n + 2) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = (n * (2 * n - 1)) / 2\n    return num\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int((n*(2*n-1))/2)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_non_zero = 0\n    num_zero = 0\n    for num in nums:\n        if num == 0:\n            num_zero += 1\n        else:\n            num_non_zero += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return float(nums.count(0)) / float(nums.count(1))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    def zeroes(nums):\n        zeroes = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                zeroes += 1\n        return zeroes\n    def non_zeroes(nums):\n        non_zeroes = 0\n        for i in range(len(nums)):\n            if nums[i]!= 0:\n                non_zeroes += 1\n        return non_zeroes\n    def ratio(nums):\n        return zeroes(nums) / non_zeroes(nums)\n    return ratio(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero = 0\n    zero = 0\n    for num in nums:\n        if num == 0:\n            zero += 1\n        else:\n            non_zero += 1\n    return zero / non_zero\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Calculate the count of non-zero elements\n    count = 0\n    for i in xrange(len(nums)):\n        if nums[i]!= 0:\n            count += 1\n    # Calculate the count of zero elements\n    count_zero = len(nums) - count\n    # Return the result\n    return float(count_zero) / float(count)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return float(count)/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    n = len(nums)\n    for i in range(n):\n        if nums[i] == 0:\n            zeroes += 1\n    return float(zeroes/n)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # set = set(nums)\n    # zeros = 0\n    # for num in set:\n    #     if num == 0:\n    #         zeros += 1\n    # non_zeros = len(nums) - zeros\n    # return float(zeros) / non_zeros\n    return float(nums.count(0)) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    print zero_count / (len(nums) - zero_count)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero = 0\n    zero = 0\n    for num in nums:\n        if num == 0:\n            zero += 1\n        else:\n            non_zero += 1\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def isPowerOfTwo(n):\n        return n>0 and n & (n-1)==0\n    for i in range(1,n+1):\n        if isPowerOfTwo(i)==True:\n            print i\n    return True\n    \nprint \"To check whether the given number can be represented as sum of non-zero powers of 2 or not\"\nn=int(raw_input(\"Enter a number:\"))\nprint is_Sum_Of_Powers_Of_Two(n)\n    "
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_powers_of_two = 0\n    while n:\n        digit = n % 10\n        if digit == 2:\n            sum_of_powers_of_two += 1\n        elif digit == 5:\n            sum_of_powers_of_two += 2\n        elif digit == 8:\n            sum_of_powers_of_two += 4\n        n /= 10\n    if sum_of_powers_of_two % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    flag = 0\n    while n: \n        if n%2 == 0: \n            n = n/2\n        elif n%2 == 1: \n            n = (n-1)/2\n            flag = 1\n    if flag == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 1:\n        return False\n    while n > 0:\n        if n % 2 == 1:\n            return False\n        n /= 2\n    return True\n    \ndef is_Power_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as power of 2 or not.\n    '''\n    if n < 1:\n        return False\n    while n > 1:\n        if n % 2!= 0:\n            return False\n        n /= 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n & (n-1) == 0:\n        return False\n    while n % 2 == 0:\n        n = n / 2\n    return n == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(0,64):\n        if pow(2,i) == n:\n            return True\n        if pow(2,i) > n:\n            return False\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n: \n        n &= n - 1\n    return not n \n    \n    \n    \ndef NumberOfOneBits(n): \n    '''\n    Write a python function to count the number of 1 bits in the given number.\n    '''\n    if n == 0: \n        return 0 \n    while n: \n        n &= n - 1\n    return 1\n    \n    \n    \ndef CountOnes(n): \n    '''\n    Write a python function to count the number of 1 bits in the given number.\n    '''\n    count = 0 \n    while n: \n        n &= n - 1\n        count += 1 \n    return count\n    \n    \n    \ndef HowMany1s(n): \n    '''\n    Write a python function to count the number of 1 bits in the given number.\n    '''\n    count = 0 \n    while n: \n        n &= n - 1 \n        count += 1 \n    return count \n    \n    \ndef Ones(n): \n    '''\n    Write a python function to count the number of 1 bits in the given number.\n    '''\n    count = 0 \n    while n: \n        n &= n - 1 \n        count += 1 \n    return count \n    \n    \ndef NumberOf1s(n): \n    '''\n    Write a python function to count the number of 1 bits in the given number.\n    '''\n    while n: \n        n &= n - 1\n    return 1\n    \n    \ndef HammingDistance(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    count = 0 \n    while n: \n        n &= n - 1 \n        count += 1 \n    return count \n    \n    \ndef HammingDistance2(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    count = 0 \n    while n!= m: \n        if n & 1: \n            n = n - 1 \n            count += 1 \n        if m & 1: \n            m = m - 1 \n            count += 1 \n        n >>= 1 \n        m >>= 1 \n    return count \n    \n    \ndef HammingDistance3(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance4(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance5(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance6(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance7(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance8(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance9(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance10(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance11(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance12(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance13(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance14(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance15(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance16(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance17(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance18(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance19(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef HammingDistance20(n, m): \n    '''\n    Write a python function to calculate the Hamming Distance between two numbers.\n    '''\n    return bin(n ^ m).count('1') \n    \n    \ndef FindNumberOf1s(n): \n    '''\n    Write a python function to find the number of 1 bits in a number.\n    '''\n    count = 0 \n    while n: \n        n &= n - 1\n        count += 1 \n    return count \n    \n    \ndef FindNumberOf1s2(n): \n    '''\n    Write a python function to find the number of 1 bits in a number.\n    '''\n    count = 0 \n    while n: \n        n &= n - 1\n        count += 1 \n    return count \n    \n    \ndef FindNumberOf1s3(n): \n    '''\n    Write a python function to find the number of 1 bits in a number.\n    '''\n    count = 0 \n    while n: \n        n &= n - 1 \n        count += 1 \n    return count \n    \n    \ndef FindNumberOf1s4(n): \n    '''\n    Write a python function to find the number of 1 bits in a number.\n    '''\n    count = 0 \n    while n: \n        n &= n - 1 \n        count += 1 \n    return count \n    \n    \ndef FindNumberOf1s5(n): \n    '''\n    Write a python function to find the number of 1 bits in a number.\n    '''\n    count = 0 \n    while n: \n        n &= n - 1 \n        count += 1 \n    return count \n    \n    \ndef FindNumberOf1s6(n): \n    '''\n    Write a python function to find the number of 1 bits in a number.\n    '''\n    count = 0 \n    while n: \n        n &= n - 1 \n        count += 1 \n    return count \n    \n    \ndef FindNumberOf1s7(n): \n    '''\n    Write a python function to find the number of 1 bits in "
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return is_Power_Of_Two(n) or is_Power_Of_Two(n-1) or is_Power_Of_Two(n-2) or is_Power_Of_Two(n-3)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    bit_n = bin(n)[2:]\n    pow_of_two = [int(bit_n[i]) for i in range(len(bit_n)) if bit_n[i] == '0']\n    # check for number of ones, 0s are not relevant\n    if len(pow_of_two) == 0 or pow_of_two.count(0) >= 1:\n        return False\n    # convert the number to decimal\n    dec_num = 0\n    for i in range(len(bit_n)):\n        dec_num += pow_of_two[i] * 2**(len(bit_n) - i - 1)\n    if dec_num == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return round(2 * 3.14 * r, 2)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n    "
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return round(2*3.14*r,2)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for list in test_list:\n        result += list\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(set([x for y in test_list for x in y]))\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for elem in test_list:\n        if type(elem) is list:\n            new_list.extend(elem)\n        else:\n            new_list.append(elem)\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = []\n    for i in test_list:\n        if type(i) == list:\n            for j in i:\n                flatten.append(j)\n        else:\n            flatten.append(i)\n    return flatten\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [sub_list[0] for sub_list in test_list]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([x for sublist in test_list for x in sublist])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(reduce(lambda x, y: x + y, test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output = []\n    for i in test_list:\n        for j in i:\n            output.append(j)\n    return output\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return\n    for i in range(len(nums)):\n        curr = nums[i]\n        idx = i\n        while idx > 0 and nums[idx-1] > curr:\n            nums[idx] = nums[idx-1]\n            idx -= 1\n        nums[idx] = curr\n    for i in range(len(nums)-1,0,-1):\n        curr = nums[i]\n        idx = i\n        while idx < len(nums)-1 and nums[idx+1] > curr:\n            nums[idx] = nums[idx+1]\n            idx += 1\n        nums[idx] = curr\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        left, right = 0, i - 1\n        while left < right:\n            if nums[left] > nums[right]:\n                nums[left], nums[right] = nums[right], nums[left]\n                nums[left + 1:i] = nums[left + 1:i][::-1]\n                break\n            left += 1\n            right -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Initialize the count of pancake flips to zero\n    flips = 0\n    # Do a pancake flip if the item at an index is greater than the pivot\n    # We'll call it an item with an index that's \"larger than\" the pivot\n    for i in range(n):\n        if nums[i] > nums[i-1]:\n            flips += 1\n            # We'll call this the \"items with index larger than\" the pivot\n            # We'll swap the last item with the item at the index before the pivot\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n    # Once the loop completes, we'll know that the \"larger than\" items are all\n    # in the end of the list, and we can stop\n    if n % 2 == 0:\n        # If the list is even, we need to swap the items that are at the ends\n        # i.e. the items with indices equal to n/2 and n/2-1\n        nums[int(n/2)], nums[int(n/2-1)] = nums[int(n/2-1)], nums[int(n/2)]\n    return nums, flips\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Flip to reverse the list\n    for i in range(len(nums)-1):\n        # Check if the end of the list is reached\n        if nums[i] > nums[i+1]:\n            # Flip the i-th item to the end of the list\n            nums[i], nums[len(nums)-i-1] = nums[len(nums)-i-1], nums[i]\n            # Flip the whole list backwards, from the i+1-th item\n            nums[:i+1] = nums[:i+1][::-1]\n    return nums\n    \n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_size = max(nums)\n    n = len(nums)\n    def flip(a, b):\n        nums[a], nums[b] = nums[b], nums[a]\n    def swap(start, end, i):\n        if i == start:\n            return\n        if i == start+1:\n            flip(start, end)\n        else:\n            if i+1 == end:\n                flip(start, end)\n                return\n            flip(start, i)\n            flip(i+1, end)\n            flip(start, end)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    \n    n = len(nums)\n    for k in range(n/2, -1, -1):\n        start = 0\n        end = k\n        while end < n:\n            if nums[end] > nums[start]:\n                flip(nums, start, end-1)\n                flip(nums, start, end)\n            start += 1\n            end += 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # work backwards from the list and swapping\n    for i in range(len(nums), 1, -1):\n        # find the max index\n        max_idx = 0\n        for idx in range(1, i):\n            if nums[idx] > nums[max_idx]:\n                max_idx = idx\n        # swap with the max index\n        if max_idx!= 0:\n            nums[max_idx], nums[i-1] = nums[i-1], nums[max_idx]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    reverse = True\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Base Case: \n    if len(nums) <= 1:\n        return nums\n    \n    # Process for pivot index\n    pivot = 0\n    for i in xrange(len(nums) - 1, 0, -1):\n        if nums[i] > nums[pivot]:\n            pivot = i\n        nums[pivot], nums[i] = nums[i], nums[pivot]\n    \n    # Split the list into left and right side\n    nums = nums[:pivot + 1] + nums[pivot:][::-1]\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, k):\n        start = 0\n        end = len(nums) - 1\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1 = [0]*len(list1)\n    list2 = [0]*len(list2)\n    list3 = [0]*len(list3)\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                list1[i] = list3[j]\n    print list1\n    count = 0\n    for item in list1:\n        if item == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    num_pairs = 0\n    for index, i in enumerate(list1):\n        if i == list2[index] and i == list3[index]:\n            num_pairs += 1\n    return num_pairs\n    \ndef common_elements(list1,list2):\n    '''\n    Write a function to return the list of common elements in two given lists.\n    '''\n    \n    common_items = []\n    for item in list1:\n        if item in list2:\n            common_items.append(item)\n    return common_items\n    \ndef find_min_max_in_list(list_of_numbers):\n    '''\n    Write a function to find the smallest and largest numbers in a list of numbers.\n    '''\n    \n    smallest = list_of_numbers[0]\n    largest = list_of_numbers[0]\n    for num in list_of_numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest, largest\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter=0\n    for item in list1:\n        if item == list2[list3[list1.index(item)]]:\n            counter=counter+1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]:\n            if list1[i]==list3[i]:\n                count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if i == j == k:\n                    count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1_len = len(list1)\n    list2_len = len(list2)\n    list3_len = len(list3)\n    i = 0\n    j = 0\n    k = 0\n    count = 0\n    while i < list1_len and j < list2_len and k < list3_len:\n        if list1[i] == list2[j] == list3[k]:\n            count += 1\n            i += 1\n            j += 1\n            k += 1\n        else:\n            if list1[i] < list2[j]:\n                i += 1\n            elif list2[j] < list3[k]:\n                j += 1\n            else:\n                k += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in xrange(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == tuple:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = len(Input)\n    count = 0\n    for i in range(n):\n        if type(Input[i]) == type(()):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    a = 1\n    b = 0\n    for i in Input:\n        if type(i) == list:\n            a+=1\n    return a\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def count_lists(Input): \n        '''\n        Write a function to find number of lists present in the given tuple.\n        '''\n        count = 0\n        for elem in Input: \n            if isinstance(elem, list): \n                count += 1\n        return count \n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for x in Input:\n        if isinstance(x, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = len(Input)\n    result = 0\n    for i in range(n):\n        if type(Input[i]) == list:\n            result = result + 1\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if isinstance(Input, tuple):\n        if Input[0]=='(' and Input[-1]==')':\n            i=0\n            while Input[i]!=')':\n                i+=1\n            return i+1\n    else:\n        raise TypeError\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input) - 1\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i)==list:\n            count = count+1\n    return count\n    "
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    max_diff = arr[-1] - arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] > max_diff:\n            max_diff = arr[i] - arr[i - 1]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # arr = [4, 5, -2, 3, -1, 0, -6, 4]\n    arr = sorted(arr)\n    max_abs = arr[-1] - arr[0]\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr[j + 1] - arr[i] > max_abs:\n                max_abs = arr[j + 1] - arr[i]\n    return max_abs\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return abs(arr[0] - arr[len(arr)-1])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    \n    max_diff = arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_len = len(arr)\n    max_diff = -1\n    \n    for i in range(arr_len - 1):\n        for j in range(i + 1, arr_len):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n                \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if arr == []:\n        return 0\n    # sort the array\n    arr = sorted(arr)\n    max_diff = arr[-1] - arr[0]\n    for i in range(1, len(arr)):\n        if max_diff < abs(arr[i] - arr[i-1]):\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    sorted_arr = sorted(arr)\n    diff = abs(sorted_arr[-1] - sorted_arr[0])\n    for i in xrange(0, len(sorted_arr) - 1):\n        if abs(sorted_arr[i] - sorted_arr[i + 1]) > diff:\n            diff = abs(sorted_arr[i] - sorted_arr[i + 1])\n    return diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    abs_arr = [abs(x) for x in arr]\n    return max(abs_arr)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return (x,y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a, b = a, b\n    for x in range(0, a):\n        y = n - x*a\n        if y % b == 0:\n            return x, y // b\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 1)\n    elif n < 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = 0, 1\n    while True:\n        if x*a + y*b == n:\n            return (x,y)\n        elif x*a + y*b > n:\n            return None\n        x, y = y, x+y\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return solve_equation(a, b, n, 0, 0)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//a):\n        for y in range(n//b):\n            if a*x + b*y == n:\n                return x,y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return b, n / b\n    else:\n        g, r = divmod(n, a)\n        if r == 0:\n            return g, a\n        else:\n            return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 1:\n        return (b, n - b)\n    if b == 1:\n        return (n - a, a)\n    if a == 0:\n        return (0, 0)\n    if b == 0:\n        return (1, 0)\n    if a * b > n:\n        return None\n    if n % a == 0:\n        return (n / a, 0)\n    if n % b == 0:\n        return (0, n / b)\n    if a == 2:\n        m = n / a\n        s = n / b\n        if m % 2 == 0:\n            return (m / 2, s / 2)\n        return None\n    if b == 2:\n        m = n / b\n        s = n / a\n        if m % 2 == 0:\n            return (m / 2, s / 2)\n        return None\n    m = (n - a) / (a - b)\n    s = (n - b) / (a - b)\n    if m % 2 == 0:\n        return (m / 2, s / 2)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    '''\n    TODO: Implement the find_solution function.\n    '''\n    #Base Case\n    if n == 0:\n        return (a, b, 1)\n    if n < 0:\n        return None\n    #Case 1: a = 0, find x such that -b = n/a\n    if a == 0:\n        return (b, n/b, 1)\n    #Case 2: a > 0, find x and y such that ab/a = b/y\n    return find_solution(b, n-b*a/a, a)\n    \ndef test_solve():\n    assert solve(1, 2, 1) == (1, 2, 1)\n    assert solve(1, 2, 2) == None\n    assert solve(1, 2, 3) == None\n    assert solve(1, 2, 4) == (2, 1, 1)\n    assert solve(1, 2, 5) == (1, 3, 1)\n    assert solve(1, 2, 6) == (1, 2, 2)\n    assert solve(1, 2, 7) == (1, 2, 3)\n    assert solve(1, 2, 8) == (1, 2, 4)\n    assert solve(1, 2, 9) == (1, 3, 1)\n    assert solve(1, 2, 10) == None\n    assert solve(1, 3, 12) == (1, 3, 1)\n    assert solve(1, 3, 13) == (1, 3, 2)\n    assert solve(1, 3, 14) == (1, 3, 3)\n    assert solve(1, 3, 15) == None\n    assert solve(1, 3, 16) == (2, 1, 1)\n    assert solve(1, 3, 17) == (2, 1, 2)\n    assert solve(1, 3, 18) == (2, 1, 3)\n    assert solve(1, 3, 19) == (2, 2, 1)\n    assert solve(1, 3, 20) == (2, 2, 2)\n    assert solve(1, 3, 21) == (2, 2, 3)\n    assert solve(1, 3, 22) == (2, 3, 1)\n    assert solve(1, 3, 23) == (2, 3, 2)\n    assert solve(1, 3, 24) == (2, 3, 3)\n    assert solve(1, 3, 25) == None\n    assert solve(1, 3, 26) == None\n    assert solve(1, 3, 27) == None\n    assert solve(1, 3, 28) == None\n    assert solve(1, 3, 29) == None\n    assert solve(1, 3, 30) == None\n    assert solve(1, 3, 31) == None\n    assert solve(1, 3, 32) == None\n    assert solve(1, 3, 33) == None\n    assert solve(1, 3, 34) == None\n    assert solve(1, 3, 35) == None\n    assert solve(1, 3, 36) == None\n    assert solve(1, 3, 37) == None\n    assert solve(1, 3, 38) == None\n    assert solve(1, 3, 39) == None\n    assert solve(1, 3, 40) == None\n    assert solve(1, 3, 41) == None\n    assert solve(1, 3, 42) == None\n    assert solve(1, 3, 43) == None\n    assert solve(1, 3, 44) == None\n    assert solve(1, 3, 45) == None\n    assert solve(1, 3, 46) == None\n    assert solve(1, 3, 47) == None\n    assert solve(1, 3, 48) == None\n    assert solve(1, 3, 49) == None\n    assert solve(1, 3, 50) == None\n    assert solve(1, 3, 51) == None\n    assert solve(1, 3, 52) == None\n    assert solve(1, 3, 53) == None\n    assert solve(1, 3, 54) == None\n    assert solve(1, 3, 55) == None\n    assert solve(1, 3, 56) == None\n    assert solve(1, 3, 57) == None\n    assert solve(1, 3, 58) == None\n    assert solve(1, 3, 59) == None\n    assert solve(1, 3, 60) == None\n    assert solve(1, 3, 61) == None\n    assert solve(1, 3, 62) == None\n    assert solve(1, 3, 63) == None\n    assert solve(1, 3, 64) == None\n    assert solve(1, 3, 65) == None\n    assert solve(1, 3, 66) == None\n    assert solve(1, 3, 67) == None\n    assert solve(1, 3, 68) == None\n    assert solve(1, 3, 69) == None\n    assert solve(1, 3, 70) == None\n    assert solve(1, 3, 71) == None\n    assert solve(1, 3, 72) == None\n    assert solve(1, 3, 73) == None\n    assert solve(1, 3, 74) == None\n    assert solve(1, 3, 75) == None\n    assert solve(1, 3, 76) == None\n    assert solve(1, 3, 77) == None\n    assert solve(1, 3, 78) == None\n    assert solve(1, 3, 79) == None\n    assert solve(1, 3, 80) == None\n    assert solve(1, 3, 81) == None\n    assert solve(1, 3, 82) == None\n    assert solve(1, 3, 83) == None\n    assert solve(1, 3, 84) == None\n    assert solve(1, 3, 85) == None\n    assert solve(1, 3, 86) == None\n    assert solve(1, 3, 87) == None\n    assert solve(1, 3, 88) == None\n    assert solve(1, 3, 89) == None\n    assert solve(1, 3, 90) == None\n    assert solve(1, 3, 91) == None\n    assert solve(1, 3, 92) == None\n    assert solve(1, 3, 93) == None\n    assert solve(1, 3, 94) == None\n    assert solve(1, 3, 95) == None\n    assert solve(1, 3, 96) == None\n    assert solve(1, 3, 97) == None\n    assert solve(1, 3, 98) == None\n    assert solve(1, 3, 99) == None\n    assert solve(1, 3, 100) == None\n    assert solve(1, 3, 101) == None\n    assert solve(1, 3, 102) == None\n    assert solve(1, 3, 103) == None\n    assert solve(1, 3, 104) == None\n    assert solve(1, 3, 105) == None\n    assert solve(1, 3, 106) == None\n    assert solve(1, 3, 107) == None\n    assert solve(1, 3, 108) == None\n    assert solve(1, 3, 109) == None\n    assert solve(1, 3, 110) == None\n    assert solve(1, 3, 111) == None\n    assert solve(1, 3, 112) == None\n    assert solve(1, 3, 113) == None\n    assert solve(1, 3, 114) == None\n    assert solve(1, 3, 115) == None\n    assert solve(1, 3, 116) == None\n    assert solve(1, 3, 117) == None\n    assert solve(1, 3, 118) == None\n    assert solve(1, 3, 119) == None\n    assert solve(1, 3, 120) == None\n    assert solve(1, 3, 121) == None\n    assert solve(1, 3, 122) == None\n    assert solve(1, 3, 123) == None\n    assert solve(1, 3, 124) == None\n    assert solve(1, 3, 125) == None\n    assert solve(1, 3, 126) == None\n    assert solve(1, 3, 127) == None\n    assert solve(1, 3, 128) == None\n    assert solve(1, 3, 129) == None\n    assert solve(1, 3, 130) == None\n    assert solve(1, 3, 131) == None\n    assert solve(1, 3, 132) == None\n    assert solve(1, 3, 133) == None\n    assert solve(1, 3, 134) == None\n    assert solve(1, 3"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return (x, y)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list\n    '''\n    for x in list1:\n        if x in list1[list1.index(x)+1:]:\n            list1.remove(x)\n    return list1\n    \ndef list_sorter(list1):\n    '''\n    Write a function to sort a list of integers, in ascending order\n    '''\n    for x in range(1, len(list1)):\n        for i in range(0, len(list1)-x):\n            if list1[i] > list1[i+1]:\n                list1[i], list1[i+1] = list1[i+1], list1[i]\n    return list1\n    \ndef list_reverser(list1):\n    '''\n    Write a function to reverse a list of integers\n    '''\n    for x in range(len(list1)/2):\n        list1[x], list1[-(x+1)] = list1[-(x+1)], list1[x]\n    return list1\n    \ndef list_addition(list1, list2):\n    '''\n    Write a function to add two lists together\n    '''\n    for x in list2:\n        if x not in list1:\n            list1.append(x)\n    return list1\n    \ndef list_multiplication(list1, list2):\n    '''\n    Write a function to multiply two lists together\n    '''\n    newList = []\n    for x in list1:\n        for y in list2:\n            newList.append(x*y)\n    return newList\n    \ndef list_transpose(list1):\n    '''\n    Write a function to transpose a list of lists\n    '''\n    newList = []\n    for x in range(len(list1[0])):\n        newList.append([])\n    for x in range(len(newList)):\n        for y in list1:\n            newList[x].append(y[x])\n    return newList\n    \ndef list_count(list1):\n    '''\n    Write a function to count the frequency of each element in a list\n    '''\n    newList = []\n    for x in set(list1):\n        newList.append([x, list1.count(x)])\n    return newList\n    \ndef list_contains(list1, list2):\n    '''\n    Write a function to check whether a list contains another list\n    '''\n    return list2 in list1\n    \ndef list_subtract(list1, list2):\n    '''\n    Write a function to subtract a list from another list\n    '''\n    newList = []\n    for x in list1:\n        if x not in list2:\n            newList.append(x)\n    return newList\n    \ndef list_intersect(list1, list2):\n    '''\n    Write a function to find the intersection of two lists\n    '''\n    newList = []\n    for x in list1:\n        if x in list2:\n            newList.append(x)\n    return newList\n    \ndef list_union(list1, list2):\n    '''\n    Write a function to find the union of two lists\n    '''\n    newList = list1 + list2\n    return newList\n    \ndef list_list_sum(list1, list2):\n    '''\n    Write a function to add two lists together\n    '''\n    newList = []\n    for x in list1:\n        for y in list2:\n            newList.append(x+y)\n    return newList\n    \ndef list_index(list1, list2):\n    '''\n    Write a function to find the first index of a value in a list\n    '''\n    for x in list2:\n        if x in list1:\n            return list1.index(x)\n    return 'The value is not in the list'\n    \ndef list_max(list1):\n    '''\n    Write a function to find the maximum value in a list\n    '''\n    return max(list1)\n    \ndef list_min(list1):\n    '''\n    Write a function to find the minimum value in a list\n    '''\n    return min(list1)\n    \ndef list_sorted_index(list1):\n    '''\n    Write a function to return the index of the element in a list that is\n    sorted from smallest to largest.\n    '''\n    for x in range(len(list1)-1):\n        if list1[x] > list1[x+1]:\n            return x\n    return x+1\n    \ndef list_reverse(list1):\n    '''\n    Write a function to reverse a list of integers\n    '''\n    list1.reverse()\n    return list1\n    \ndef list_shuffle(list1):\n    '''\n    Write a function to shuffle a list of integers\n    '''\n    import random\n    random.shuffle(list1)\n    return list1\n    \ndef list_sort_list(list1):\n    '''\n    Write a function to sort a list of integers in ascending order\n    '''\n    list1 = sorted(list1)\n    return list1\n    \ndef list_sum(list1):\n    '''\n    Write a function to find the sum of a list\n    '''\n    sumList = sum(list1)\n    return sumList\n    \ndef list_avg(list1):\n    '''\n    Write a function to find the average of a list\n    '''\n    avgList = sum(list1)/len(list1)\n    return avgList\n    \ndef list_median(list1):\n    '''\n    Write a function to find the median of a list\n    '''\n    list1 = sorted(list1)\n    if len(list1) % 2 == 0:\n        median1 = (list1[len(list1)/2-1]+list1[len(list1)/2])/2\n    else:\n        median1 = list1[len(list1)/2]\n    return median1\n    \ndef list_letter_count(list1):\n    '''\n    Write a function to count the number of each letter in a list\n    '''\n    letterCount = {}\n    for x in list1:\n        if x in letterCount:\n            letterCount[x] += 1\n        else:\n            letterCount[x] = 1\n    return letterCount\n    \ndef list_letter_count2(list1):\n    '''\n    Write a function to count the number of each letter in a list\n    '''\n    letterCount = {}\n    for x in list1:\n        if x not in letterCount:\n            letterCount[x] = 1\n        else:\n            letterCount[x] += 1\n    return letterCount\n    \ndef list_letter_count3(list1):\n    '''\n    Write a function to count the number of each letter in a list\n    '''\n    letterCount = {}\n    for x in list1:\n        letterCount[x] = letterCount.get(x, 0) + 1\n    return letterCount\n    \ndef list_letter_count4(list1):\n    '''\n    Write a function to count the number of each letter in a list\n    '''\n    letterCount = {}\n    for x in list1:\n        letterCount[x] = letterCount.get(x, 0) + 1\n    return sorted(letterCount.items())\n    \ndef list_sorted_list(list1):\n    '''\n    Write a function to sort a list of integers in ascending order\n    '''\n    list1 = sorted(list1)\n    return list1\n    \ndef list_list_divide(list1, list2):\n    '''\n    Write a function to divide two lists\n    '''\n    newList = []\n    for x in list1:\n        newList.append(x/list2[list1.index(x)])\n    return newList\n    \ndef list_list_add(list1, list2):\n    '''\n    Write a function to add two lists\n    '''\n    newList = []\n    for x in list1:\n        newList.append("
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for num in list2:\n        list1.remove(num)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n    \nif __name__=='__main__':\n    list1 = [1, 2, 3, 4]\n    list2 = [1, 2, 6]\n    assert remove_elements(list1, list2) == [3, 4]\n    \n    list1 = [1, 2, 3, 4]\n    list2 = [2, 4]\n    assert remove_elements(list1, list2) == [1, 3]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for item in list1:\n        if item not in list2:\n            list3.append(item)\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1)!= len(list2):\n        raise ValueError(\"Lists must be same length\")\n    for elt in list2:\n        if elt in list1:\n            list1.remove(elt)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return ((n+1)**2)/2\n    else:\n        return ((n+1)**2)/2 - n + 1\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2) + (n-4) + (n-6) + (n-8) + (n-10) + (n-12) + (n-14) + (n-16) + (n-18)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n - 2 * sum_series(n-1))\n    \n    \ndef test_sum_series():\n    assert sum_series(1) == 1\n    assert sum_series(3) == 3\n    assert sum_series(5) == 4\n    assert sum_series(8) == 7\n    \n    \ndef fibonacci_iterative(n):\n    '''\n    This function recieves an integer n and returns the nth value in the fibonacci sequence.\n    '''\n    a = 0\n    b = 1\n    for i in range(n-1):\n        a, b = b, a + b\n    return b\n    \n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # n - 2*i\n    sum = 0\n    for i in range(n // 2):\n        sum += (2 * i + 1)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n+1) // 2\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n if n < 4 else sum_series(n-2) + sum_series(n-4) if n < 6 else sum_series(n-6) + sum_series(n-8) + sum_series(n-10)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = l / s\n    return (n / 2) * s * (s + n)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0 or l <= 0:\n        raise ValueError(\"Error\")\n    else:\n        return (s*l)/2*tan(pi/l)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #TODO:\n    \n    if (s==3) and (l==3):\n        return (3**2/4)*pi\n    elif (s==5) and (l==5):\n        return (5*(3**2/4)*pi)\n    elif (s==7) and (l==7):\n        return (7*(3**2/4)*pi)\n    elif (s==9) and (l==9):\n        return (9*(3**2/4)*pi)\n    elif (s==11) and (l==11):\n        return (11*(3**2/4)*pi)\n    elif (s==13) and (l==13):\n        return (13*(3**2/4)*pi)\n    elif (s==15) and (l==15):\n        return (15*(3**2/4)*pi)\n    elif (s==17) and (l==17):\n        return (17*(3**2/4)*pi)\n    elif (s==19) and (l==19):\n        return (19*(3**2/4)*pi)\n    elif (s==21) and (l==21):\n        return (21*(3**2/4)*pi)\n    elif (s==23) and (l==23):\n        return (23*(3**2/4)*pi)\n    elif (s==25) and (l==25):\n        return (25*(3**2/4)*pi)\n    elif (s==27) and (l==27):\n        return (27*(3**2/4)*pi)\n    elif (s==29) and (l==29):\n        return (29*(3**2/4)*pi)\n    elif (s==31) and (l==31):\n        return (31*(3**2/4)*pi)\n    elif (s==33) and (l==33):\n        return (33*(3**2/4)*pi)\n    elif (s==35) and (l==35):\n        return (35*(3**2/4)*pi)\n    elif (s==37) and (l==37):\n        return (37*(3**2/4)*pi)\n    elif (s==39) and (l==39):\n        return (39*(3**2/4)*pi)\n    elif (s==41) and (l==41):\n        return (41*(3**2/4)*pi)\n    elif (s==43) and (l==43):\n        return (43*(3**2/4)*pi)\n    elif (s==45) and (l==45):\n        return (45*(3**2/4)*pi)\n    elif (s==47) and (l==47):\n        return (47*(3**2/4)*pi)\n    elif (s==49) and (l==49):\n        return (49*(3**2/4)*pi)\n    elif (s==51) and (l==51):\n        return (51*(3**2/4)*pi)\n    elif (s==53) and (l==53):\n        return (53*(3**2/4)*pi)\n    elif (s==55) and (l==55):\n        return (55*(3**2/4)*pi)\n    elif (s==57) and (l==57):\n        return (57*(3**2/4)*pi)\n    elif (s==59) and (l==59):\n        return (59*(3**2/4)*pi)\n    elif (s==61) and (l==61):\n        return (61*(3**2/4)*pi)\n    elif (s==63) and (l==63):\n        return (63*(3**2/4)*pi)\n    elif (s==65) and (l==65):\n        return (65*(3**2/4)*pi)\n    elif (s==67) and (l==67):\n        return (67*(3**2/4)*pi)\n    elif (s==69) and (l==69):\n        return (69*(3**2/4)*pi)\n    elif (s==71) and (l==71):\n        return (71*(3**2/4)*pi)\n    elif (s==73) and (l==73):\n        return (73*(3**2/4)*pi)\n    elif (s==75) and (l==75):\n        return (75*(3**2/4)*pi)\n    elif (s==77) and (l==77):\n        return (77*(3**2/4)*pi)\n    elif (s==79) and (l==79):\n        return (79*(3**2/4)*pi)\n    elif (s==81) and (l==81):\n        return (81*(3**2/4)*pi)\n    elif (s==83) and (l==83):\n        return (83*(3**2/4)*pi)\n    elif (s==85) and (l==85):\n        return (85*(3**2/4)*pi)\n    elif (s==87) and (l==87):\n        return (87*(3**2/4)*pi)\n    elif (s==89) and (l==89):\n        return (89*(3**2/4)*pi)\n    elif (s==91) and (l==91):\n        return (91*(3**2/4)*pi)\n    elif (s==93) and (l==93):\n        return (93*(3**2/4)*pi)\n    elif (s==95) and (l==95):\n        return (95*(3**2/4)*pi)\n    elif (s==97) and (l==97):\n        return (97*(3**2/4)*pi)\n    elif (s==99) and (l==99):\n        return (99*(3**2/4)*pi)\n    elif (s==101) and (l==101):\n        return (101*(3**2/4)*pi)\n    elif (s==103) and (l==103):\n        return (103*(3**2/4)*pi)\n    elif (s==105) and (l==105):\n        return (105*(3**2/4)*pi)\n    elif (s==107) and (l==107):\n        return (107*(3**2/4)*pi)\n    elif (s==109) and (l==109):\n        return (109*(3**2/4)*pi)\n    elif (s==111) and (l==111):\n        return (111*(3**2/4)*pi)\n    elif (s==113) and (l==113):\n        return (113*(3**2/4)*pi)\n    elif (s==115) and (l==115):\n        return (115*(3**2/4)*pi)\n    elif (s==117) and (l==117):\n        return (117*(3**2/4)*pi)\n    elif (s==119) and (l==119):\n        return (119*(3**2/4)*pi)\n    elif (s==121) and (l==121):\n        return (121*(3**2/4)*pi)\n    elif (s==123) and (l==123):\n        return (123*(3**2/4)*pi)\n    elif (s==125) and (l==125):\n        return (125*(3**2/4)*pi)\n    elif (s==127) and (l==127):\n        return (127*(3**2/4)*pi)\n    elif (s==129) and (l==129):\n        return (129*(3**2/4)*pi)\n    elif (s==131) and (l==131):\n        return (131*(3**2/4)*pi)\n    elif (s==133) and (l==133):\n        return (133*(3**2/4)*pi)\n    elif (s==135) and (l==135):"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    import math\n    return (s * (l / 2) * math.sin(math.pi/l)) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = (l / s) ** 2 * tan(pi / s)\n    return round(s, 4)\n    \ndef area_quadrilateral(a, b, c, d):\n    '''\n    Write a function to calculate the area of a quadrilateral given the lengths of the edges\n    '''\n    return round((a + b + c + d) / 2, 4)\n    \ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of the sides\n    '''\n    return round(float(a * b * c) / (4 * (a + b + c)), 4)\n    \ndef area_trapezoid(a, b, c, d):\n    '''\n    Write a function to calculate the area of a trapezoid given the lengths of the bottom edges and the height of the top edge.\n    '''\n    return round(float((a + b) * (d / 2) + c * d), 4)\n    \ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given the lengths of its sides\n    '''\n    return round((a * b), 4)\n    \ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square given the length of its side\n    '''\n    return round((a ** 2), 4)\n    \ndef area_triangle_square(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of its three sides.\n    Use the Heron's formula to calculate the area of the triangle:\n    area = sqrt(s*(s-a)*(s-b)*(s-c))\n    '''\n    return round(((a * b * c) / (4 * (a + b + c) - (a * b * c))), 4)\n    \ndef area_triangle_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of its three sides.\n    Use the Heron's formula to calculate the area of the triangle:\n    area = sqrt(s*(s-a)*(s-b))\n    '''\n    return round((a * b) / 2, 4)\n    \ndef area_trapezoid_square(a, b, c, d):\n    '''\n    Write a function to calculate the area of a trapezoid given the lengths of its bottom edges, height of the top edge and the height of the bottom edge.\n    Use the Heron's formula to calculate the area of the triangle:\n    area = sqrt(s*(s-a)*(s-b)*(s-c)*(s-d))\n    '''\n    return round(((a + b) * (c + d) * (a + c) * (b + d)) / 4, 4)\n    \ndef area_square_circle(a):\n    '''\n    Write a function to calculate the area of a square and a circle.\n    Use the formula for area of a circle:\n    area = pi * r**2\n    '''\n    return round((pi * a ** 2), 4)\n    \ndef area_square_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a square and a rectangle.\n    Use the formula for area of a rectangle:\n    area = w*h\n    '''\n    return round(a * b, 4)\n    \ndef area_square_triangle(a, b):\n    '''\n    Write a function to calculate the area of a square and a triangle.\n    Use the formula for area of a triangle:\n    area = b * h / 2\n    '''\n    return round(b * a / 2, 4)\n    \ndef area_rectangle_circle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle and a circle.\n    Use the formula for area of a circle:\n    area = pi * (r**2)\n    '''\n    return round(pi * (a ** 2 + b ** 2), 4)\n    \ndef area_rectangle_rectangle(a, b, c, d):\n    '''\n    Write a function to calculate the area of a rectangle and a rectangle.\n    Use the formula for area of a rectangle:\n    area = w*h\n    '''\n    return round(a * b + c * d, 4)\n    \ndef area_rectangle_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a rectangle and a triangle.\n    Use the formula for area of a triangle:\n    area = b * h / 2\n    '''\n    return round(b * c / 2, 4)\n    \ndef area_rectangle_square(a, b, c):\n    '''\n    Write a function to calculate the area of a rectangle and a square.\n    Use the formula for area of a square:\n    area = c * b\n    '''\n    return round(c * b, 4)\n    \ndef area_square_rectangle(a):\n    '''\n    Write a function to calculate the area of a square and a rectangle.\n    Use the formula for area of a rectangle:\n    area = a**2\n    '''\n    return round(a ** 2, 4)\n    \ndef area_square_triangle(a, b):\n    '''\n    Write a function to calculate the area of a square and a triangle.\n    Use the formula for area of a triangle:\n    area = b * a / 2\n    '''\n    return round(b * a / 2, 4)\n    \ndef area_triangle_rectangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle and a rectangle.\n    Use the formula for area of a rectangle:\n    area = a * b\n    '''\n    return round(a * b, 4)\n    \ndef area_triangle_square(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle and a square.\n    Use the formula for area of a square:\n    area = b * c\n    '''\n    return round(b * c, 4)\n    \ndef area_triangle_rectangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle and a rectangle.\n    Use the formula for area of a rectangle:\n    area = a * b\n    '''\n    return round(a * b, 4)\n    \ndef area_triangle_square(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle and a square.\n    Use the formula for area of a square:\n    area = a * b\n    '''\n    return round(a * b, 4)\n    \ndef area_triangle_circle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle and a circle.\n    Use the formula for area of a circle:\n    area = pi * (r**2)\n    '''\n    return round(pi * (a ** 2 + b ** 2 + c ** 2) / 4, 4)\n    \ndef area_square_circle(a):\n    '''\n    Write a function to calculate the area of a square and a circle.\n    Use the formula for area of a circle:\n    area = pi * (r**2)\n    '''\n    return round(pi * (a ** 2), 4)\n    \ndef area_square_circle(a):\n    '''\n    Write a function to calculate the area of a square and a circle.\n    Use the formula for area of a circle:\n    area = pi * (r**2)\n    '''\n    return round(pi * (a ** 2), 4)\n    \ndef area_square_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a square and a rectangle.\n    Use the formula for area of a rectangle:\n    area = w*h\n    '''\n    return round(a * b, 4)\n    \ndef area_rectangle_circle(a, b, c, d):\n    '''\n    Write a function to calculate the area of a rectangle and a circle.\n    Use the formula for area of a circle:\n    area = pi * (r**2)\n    '''\n    return round(pi * (a ** 2 + b ** 2 + c *"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*(s-2*l)*(s-2*l))/4.0\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0 or l <= 0:\n        return -1\n    elif s == l:\n        return (l*s)/2\n    else:\n        return (l*s)/2*(1+(s-2*l)/l)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / (tan(pi / l))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def get_perimeter(l, n):\n        return l*n\n    def get_sarea(l, n):\n        return l*n*(n+1)/2\n    def get_areasum(l, n):\n        return l*n*(n+1)/2\n    return get_areasum(s, l)-get_sarea(s, l)-get_perimeter(s, l)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # s = sides\n    # l = length of a side\n    n = s\n    r = l/2\n    area = (n * r * r) / (4 * tan(pi/n))\n    return area\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    ans = 0\n    while (i < n):\n        if (n % i == 0):\n            ans = ans + i\n        i = i + 1\n    return ans\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_divisors = sum([divisor for divisor in range(1,n) if n % divisor == 0])\n    return sum_divisors == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1: \n        return 0\n    for i in range(1, n // 2 + 1): \n        if n % i == 0: \n            #print (i, n // i)\n            if i > 1 and n // i!= i: \n                #print (i, n // i)\n                if n // i + i == n: \n                    return True\n            else: \n                return False\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        s = 1\n        for i in xrange(1,n/2+1):\n            if n%i == 0:\n                s += i\n    return s\ndef div_sum_fast(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return (n+1)*(n-1)/2\ndef gcd(a,b):\n    '''\n    Write a function to determine the greatest common divisor of two integers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\ndef gcd_fast(a,b):\n    '''\n    Write a function to determine the greatest common divisor of two integers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd_fast(b,a%b)\ndef is_perfect(n):\n    '''\n    Write a function to determine if a given number n is perfect.\n    A number is perfect if the sum of its divisors is exactly equal to the number itself.\n    '''\n    if div_sum(n) == n:\n        return True\n    else:\n        return False\ndef is_perfect_fast(n):\n    '''\n    Write a function to determine if a given number n is perfect.\n    A number is perfect if the sum of its divisors is exactly equal to the number itself.\n    '''\n    return div_sum_fast(n) == n\ndef is_abundant(n):\n    '''\n    Write a function to determine if a given number n is abundant.\n    A number is abundant if the sum of its divisors is greater than the number itself.\n    '''\n    if div_sum(n) > n:\n        return True\n    else:\n        return False\ndef is_abundant_fast(n):\n    '''\n    Write a function to determine if a given number n is abundant.\n    A number is abundant if the sum of its divisors is greater than the number itself.\n    '''\n    return div_sum_fast(n) > n\ndef is_abundant_sum(n,d):\n    '''\n    Write a function to determine if the sum of the first n abundant numbers is equal to d.\n    '''\n    if d < 1:\n        return False\n    elif d == 1:\n        return True\n    else:\n        s = d\n        if d%2 == 0:\n            s /= 2\n        for i in xrange(1,n/2+1):\n            if is_abundant_sum(n,s-i):\n                return True\n        return False\ndef is_abundant_sum_fast(n,d):\n    '''\n    Write a function to determine if the sum of the first n abundant numbers is equal to d.\n    '''\n    if d < 1:\n        return False\n    elif d == 1:\n        return True\n    else:\n        return is_abundant_sum_fast(n,d-1) or is_abundant_sum_fast(n,d-2)\ndef is_abundant_sum_by_factor(n,d):\n    '''\n    Write a function to determine if the sum of the first n abundant numbers is equal to d.\n    '''\n    if d < 1:\n        return False\n    elif d == 1:\n        return True\n    else:\n        s = d\n        if d%2 == 0:\n            s /= 2\n        for i in xrange(1,n/2+1):\n            if is_abundant_sum_by_factor(n,s-i):\n                return True\n        return False\ndef is_abundant_sum_by_factor_fast(n,d):\n    '''\n    Write a function to determine if the sum of the first n abundant numbers is equal to d.\n    '''\n    if d < 1:\n        return False\n    elif d == 1:\n        return True\n    else:\n        return is_abundant_sum_by_factor_fast(n,d-1) or is_abundant_sum_by_factor_fast(n,d-2)\ndef is_abundant(n,d):\n    '''\n    Write a function to determine if the sum of the first n abundant numbers is equal to d.\n    '''\n    if d < 1:\n        return False\n    elif d == 1:\n        return True\n    else:\n        s = d\n        if d%2 == 0:\n            s /= 2\n        for i in xrange(1,n/2+1):\n            if is_abundant(n,s-i):\n                return True\n        return False\ndef is_abundant_fast(n,d):\n    '''\n    Write a function to determine if the sum of the first n abundant numbers is equal to d.\n    '''\n    if d < 1:\n        return False\n    elif d == 1:\n        return True\n    else:\n        return is_abundant_fast(n,d-1) or is_abundant_fast(n,d-2)\ndef is_abundant_by_factor(n,d):\n    '''\n    Write a function to determine if the sum of the first n abundant numbers is equal to d.\n    '''\n    if d < 1:\n        return False\n    elif d == 1:\n        return True\n    else:\n        s = d\n        if d%2 == 0:\n            s /= 2\n        for i in xrange(1,n/2+1):\n            if is_abundant_by_factor(n,s-i):\n                return True\n        return False\ndef is_abundant_by_factor_fast(n,d):\n    '''\n    Write a function to determine if the sum of the first n abundant numbers is equal to d.\n    '''\n    if d < 1:\n        return False\n    elif d == 1:\n        return True\n    else:\n        return is_abundant_by_factor_fast(n,d-1) or is_abundant_by_factor_fast(n,d-2)\ndef is_perfect(n,d):\n    '''\n    Write a function to determine if the sum of the divisors of a perfect number is equal to the perfect number itself.\n    '''\n    if d < 1:\n        return False\n    elif d == 1:\n        return True\n    else:\n        s = d\n        if d%2 == 0:\n            s /= 2\n        for i in xrange(1,n/2+1):\n            if is_perfect(n,s-i):\n                return True\n        return False\ndef is_perfect_fast(n,d):\n    '''\n    Write a function to determine if the sum of the divisors of a perfect number is equal to the perfect number itself.\n    '''\n    if d < 1:\n        return False\n    elif d == 1:\n        return True\n    else:\n        return is_perfect_fast(n,d-1) or is_perfect_fast(n,d-2)\ndef is_perfect_by_factor(n,d):\n    '''\n    Write a function to determine if the sum of the divisors of a perfect number is equal to the perfect number itself.\n    '''\n    if d < 1:\n        return False\n    elif d == 1:\n        return True\n    else:\n        s = d\n        if d%2 == 0:\n            s /= 2\n        for i in xrange(1,n/2+1):\n            if is_perfect_by_factor(n,s-i):\n                return True\n        return False\ndef is_perfect_by_factor_fast(n,d):\n    '''\n    Write a function to determine if the sum of the divisors of a perfect number is equal to the perfect number itself.\n    '''\n    if d < 1:\n        return False\n    elif d == 1:\n        return True\n    else:\n        return is_perfect_by_factor_fast(n,d-1) or is_perfect_by_factor_fast(n,d-2)\ndef is_perfect_by_sum"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    count = 0\n    i = 1\n    while(i <= math.sqrt(n)):\n        if (n % i == 0):\n            if(i == n/i):\n                count += i\n            else:\n                count += i + n/i\n        i += 1\n    return count\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # divisors of n\n    x = sum([i for i in range(1, n // 2 + 1) if n % i == 0])\n    # divisors of x\n    y = sum([i for i in range(1, x // 2 + 1) if x % i == 0])\n    return x == y\n    \n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 1\n    for i in range(2, (n//2) +1): \n        if n % i == 0: \n            sum += i \n    return sum \ndef is_prime(n): \n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) +1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef if_str(s):\n    '''\n    Write a function that will return True if the given string is a palindrome,\n    otherwise False.\n    '''\n    return s == s[::-1]\ndef fizz_buzz(n):\n    '''\n    Write a function that takes in a number and returns the string fizz, buzz,\n    or fizz buzz according to the following rules:\n    '''\n    if n % 15 == 0: \n        return \"fizz buzz\"\n    if n % 3 == 0: \n        return \"fizz\"\n    if n % 5 == 0: \n        return \"buzz\"\n    return str(n)\ndef roman_to_int(s):\n    '''\n    Write a function that takes in a Roman numeral and returns its value.\n    '''\n    roman_to_int = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    for i, ch in enumerate(s): \n        if i == 0 or roman_to_int[ch] >= roman_to_int[s[i-1]]: \n            total += roman_to_int[ch]\n        else: \n            total -= roman_to_int[ch]\n    return total\ndef factorial(n):\n    '''\n    Write a function that takes in a number and returns the factorial of that number.\n    '''\n    total = 1\n    for i in range(1, n +1): \n        total *= i\n    return total\ndef sum_series(n, n0=0, n1=1):\n    '''\n    Write a function that takes in two integers as parameters, n and n0, and returns the\n    nth integer in the series. The function should look like the following:\n    sum_series(n, n0, n1)\n    '''\n    return n0 + n1 * (n - 1)\ndef fibonacci(n):\n    '''\n    Write a function that takes in a number, n, and returns the nth number in the fibonacci\n    sequence.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\ndef count_vowels(s):\n    '''\n    Write a function that takes in a string, s, and returns the number of vowels in the string.\n    '''\n    total = 0\n    for ch in s: \n        if ch in ('a', 'e', 'i', 'o', 'u'): \n            total += 1\n    return total\ndef fibonacci_sum(n):\n    '''\n    Write a function that takes in a positive integer, n, and returns the sum of all the \n    nth Fibonacci numbers.\n    '''\n    fib_list = [0,1]\n    for i in range(1, n): \n        fib_list.append(fib_list[i-1] + fib_list[i])\n    return fib_list[n]\ndef nth_prime(n):\n    '''\n    Write a function that takes in a number, n, and returns the nth prime number.\n    '''\n    primes = []\n    for i in range(2, 10001): \n        if is_prime(i): \n            primes.append(i)\n    return primes[n]\ndef pascals_triangle(n):\n    '''\n    Write a function that takes in a number, n, and returns the nth row of the\n    pascals triangle.\n    '''\n    row = []\n    for i in range(n +1): \n        if i == 0: \n            row.append(1)\n        else: \n            row.append(row[i-1] + row[i-2])\n    return row\ndef tower_of_hanoi(n, source, destination, intermediate):\n    '''\n    Write a function that takes in a number, n, and three integers source, destination, and\n    intermediate, and returns the number of moves required to move n disks from source to destination\n    using intermediate as the intermediate space.\n    '''\n    if n == 1: \n        print(\"Move a disk from {0} to {1}\".format(source, destination))\n        return 1\n    else: \n        moves = tower_of_hanoi(n-1, source, intermediate, destination)\n        print(\"Move a disk from {0} to {1}\".format(source, destination))\n        moves += tower_of_hanoi(n-1, intermediate, destination, source)\n        return moves\ndef max_digit(n):\n    '''\n    Write a function that takes in a number, n, and returns the maximum digit in that number.\n    '''\n    if n == 0: \n        return 0\n    return int(max(str(n)))\ndef num_to_digits(n):\n    '''\n    Write a function that takes in a number, n, and returns a list of the digits in that number.\n    '''\n    total = []\n    while n > 0: \n        total.append(n % 10)\n        n = n // 10\n    return total\ndef reverse(n):\n    '''\n    Write a function that takes in a number, n, and returns the reverse of that number.\n    '''\n    total = 0\n    while n > 0: \n        total = total * 10 + n % 10\n        n = n // 10\n    return total\ndef sieve(n):\n    '''\n    Write a function that takes in a number, n, and returns a list of the prime numbers from 2 to\n    that number.\n    '''\n    if n == 1: \n        return [1]\n    total = [2]\n    for i in range(3, n + 1, 2): \n        if is_prime(i): \n            total.append(i)\n    return total\ndef count_consecutive_vowels(s):\n    '''\n    Write a function that takes in a string, s, and returns the number of vowels contained in the string.\n    '''\n    total = 0\n    for ch in s: \n        if ch in ('a', 'e', 'i', 'o', 'u'): \n            total += 1\n    return total\ndef string_rotation(s1, s2):\n    '''\n    Write a function that takes in two strings, s1 and s2, and returns whether or not s2 is a\n    rotation of s1.\n    '''\n    if len(s1)!= len(s2): \n        return False\n    if s1 == s2: \n        return True\n    return s1[0] == s2[len(s1)-1] and string_rotation(s1[1:len(s1)], s2[0:len(s1)-1])\ndef sum_of_digits(n):\n    '''\n    Write a function that takes in a number, n, and returns the sum of the digits in that number.\n    '''\n    total = 0\n    while n > 0: \n        total += n % 10\n        n = n // 10\n    return total\ndef double_base_palindromes(n):\n    '''\n    Write a function that takes in a number, n, and returns the number of positive integers less than\n    that number that are both palindromes.\n    '''\n    total = 0\n    for i in range(1, n + 1): \n        if is_palindrome(i) and is_palindrome(str(i)): \n            total += 1\n    return total\ndef count_doubles(s):\n    '''\n    Write a function that takes in a string, "
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0: \n        return n*(n+1)\n    else: \n        return (n*(n+1))/2\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n1 = int(math.sqrt(n))\n    sum = 0\n    for i in range(1, n1):\n        if n%i == 0:\n            sum+=i\n    return (n/sum) == (sum-n)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #The number is even, divisors are 1, 2, and n/2.\n    if n%2 == 0:\n        return True\n    #The number is odd, divisors are 1, 2, 3, and n-1.\n    else:\n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].lower() in d:\n                d[str1[i].lower()] += 1\n            else:\n                d[str1[i].lower()] = 1\n    return d\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize a dictionary to count the characters and their positions\n    # use lower to make sure we ignore the case when counting the frequency\n    freq_dict = {}\n    for letter in str1.lower():\n        if letter in freq_dict:\n            freq_dict[letter] += 1\n        else:\n            freq_dict[letter] = 1\n    return freq_dict\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    from collections import Counter\n    return Counter(str1)\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    for i in range(0,26):\n        #print i\n        for j in range(0, 26):\n            #print str1[i]\n            #print str1[j]\n            if str1[i] == str1[j]:\n                #print str1[i]\n                #print str1[j]\n                #print i\n                #print j\n                #print str1[i]\n                #print str1[j]\n                break\n            else:\n                #print 'hi'\n                continue\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if (str1[i].upper() == 'A' or str1[i].upper() == 'B' or str1[i].upper() == 'C' or str1[i].upper() == 'D' or str1[i].upper() == 'E' or str1[i].upper() == 'F' or str1[i].upper() == 'G' or str1[i].upper() == 'H' or str1[i].upper() == 'I' or str1[i].upper() == 'J' or str1[i].upper() == 'K' or str1[i].upper() == 'L' or str1[i].upper() == 'M' or str1[i].upper() == 'N' or str1[i].upper() == 'O' or str1[i].upper() == 'P' or str1[i].upper() == 'Q' or str1[i].upper() == 'R' or str1[i].upper() == 'S' or str1[i].upper() == 'T' or str1[i].upper() == 'U' or str1[i].upper() == 'V' or str1[i].upper() == 'W' or str1[i].upper() == 'X' or str1[i].upper() == 'Y' or str1[i].upper() == 'Z'):\n            count += 1\n    return count\n    \ndef compare_chars(str1, str2): \n    '''\n    Write a function to compare two strings by counting the number of characters in the strings that occur at the same position in the strings as in the English alphabet (case insensitive).\n    '''\n    count1 = count_char_position(str1)\n    count2 = count_char_position(str2)\n    if count1 == count2:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = [chr(i) for i in range(97,123)]\n    count = 0\n    for i in alphabet:\n        if str1.count(i) > 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = 0\n    for x in str1:\n        if ord(x.lower()) >= 97 and ord(x.lower()) <= 122:\n            char_position += 1\n    return char_position\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(0,len(str1)): \n        if ord(str1[i]) >= ord('a') and ord(str1[i]) <= ord('z'): \n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    # Add counter variable\n    counter = 0\n    # Add set to hold the alphabet characters\n    alphabet = set()\n    # Add to alphabet set and increment counter\n    for c in alphabet:\n        alphabet.add(c)\n        counter += 1\n    # iterate through string\n    for index, char in enumerate(str1):\n        # Test if character in alphabet\n        if char in alphabet:\n            # increment counter\n            counter += 1\n    # return counter\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_char = {}\n    for position in range(len(str1)):\n        char = str1[position]\n        if char.islower():\n            char = char.upper()\n        count_char[char] = count_char.get(char, 0) + 1\n    return count_char\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #xor = 0\n    #count = 0\n    #for i in range(len(A)):\n    #    for j in range(i+1,len(A)):\n    #        xor = A[i] ^ A[j]\n    #        if xor % 2 == 0:\n    #            count += 1\n    #return count\n    return sum(1 for i in xrange(len(A)) if (A[i] ^ A[i-1] % 2) == 0)\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if i^j==0 or i^j&1:\n                count+=1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # use xor to record different integers\n    # use set to record the unique integers\n    # use counter to record the number of pairs\n    n = len(A)\n    if n <= 1:\n        return 0\n    xor = 0\n    for i in xrange(n):\n        xor ^= A[i]\n    bit = xor & 0x1\n    if bit == 0:\n        bit = 1\n    else:\n        bit = 0\n    set1 = set([A[0]])\n    set2 = set([A[-1]])\n    set3 = set()\n    cnt = 0\n    for i in xrange(1, n - 1):\n        if bit == 0:\n            if A[i] in set2:\n                cnt += 1\n            else:\n                set3.add(A[i])\n        else:\n            if A[i] in set1:\n                cnt += 1\n            else:\n                set3.add(A[i])\n    return cnt\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    result = 0\n    for i in range(0, len(A)):\n        for j in range(i, len(A)):\n            if A[i] ^ A[j] == 0:\n                result += 1\n    return result\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    num_pairs = 0\n    for i in range(len(A)): \n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                num_pairs += 1\n    return num_pairs \n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] & 1 == 0:\n                even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    from itertools import combinations\n    xors = [a ^ b for a, b in combinations(A, 2)]\n    return sum(xors[i] & 0x1 == 1 for i in range(0, len(xors), 2))\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for x in A:\n        for y in A:\n            if x ^ y == 0 and x % 2 == 0:\n                even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**ceil(log(n)/log(2))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x <= n:\n        x <<= 1\n    return x\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(2 ** math.ceil(math.log(n,2)))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(2**n.bit_length()) \n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p = p * 2\n    return p\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n -= 1\n    i = 1\n    while (i<=n):\n        i <<= 1\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    i = 1\n    while i <= n:\n        i = i * 2\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    log_n = math.log(n, 2)\n    return int(2 ** (int(log_n) + 1))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    n -= 1\n    count = 0\n    while True:\n        if (1 << count) >= n:\n            return (1 << count)\n        count += 1\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = sorted(a)\n    count = 0\n    if x not in a:\n        return -1\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    import collections\n    c = collections.Counter(a)\n    c[x]\n    print c[x]\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.sort()\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    print(count)\n    \nif __name__ == '__main__':\n    import sys\n    import os\n    fname = os.path.splitext(sys.argv[0])[0]\n    \n    l = [1,1,1,2,2,2,3,3,3,3,3,3,4,5,6,6,6,7,7,7,7,7]\n    frequency(l,7"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if len(a) == 0:\n        return 0\n    elif a[0] == x:\n        return 1 + frequency(a[1:],x)\n    else:\n        return frequency(a[1:],x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    \n    return a.count(x)\n    \ndef main():\n    a = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]\n    \n    x = input(\"Enter a number: \")\n    \n    print(frequency(a,x))\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b = 0\n    for i in a:\n        if i == x:\n            b = b+1\n    return b\n    \ndef even(a): \n    '''\n    Write a function to find the even numbers in a given list.\n    '''\n    b = []\n    for i in a:\n        if i % 2 == 0:\n            b.append(i)\n    return b\n    \ndef find_min(a):\n    '''\n    Write a function to find the maximum element in a given list.\n    '''\n    b = a[0]\n    for i in a:\n        if b < i:\n            b = i\n    return b\n    \ndef sort(a):\n    '''\n    Write a function to sort a list of numbers.\n    '''\n    b = []\n    while a!= []:\n        b.append(a[0])\n        a.remove(a[0])\n    return b\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = Counter(a)\n    return a[x]\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    f = 0\n    for i in a:\n        if i == x:\n            f += 1\n    return f\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if a == []:\n        return 0\n    elif a[0] == x:\n        return 1 + frequency(a[1:],x)\n    else:\n        return frequency(a[1:],x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    d=0\n    if a.count(x)>0:\n        d=a.count(x)\n        return d\n    return 'nothing found'\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    return sum(list1[m:n+1])\n    \n    \ndef sum_list(list1):\n    return sum(list1)\n    \n    \ndef avg_list(list1):\n    return sum(list1) / len(list1)\n    \n    \ndef main():\n    print(sum_range_list([1,2,3,4,5], 0, 5))\n    print(sum_list([1,2,3,4,5,6]))\n    print(avg_list([1,2,3,4,5,6]))\n    \nmain()\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m,n):\n        total = total + list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in range(m,n):\n        sum1 = sum1 + list1[i]\n    return sum1\ndef find_sum_of_all_numbers(list1):\n    '''\n    Write a function to find the sum of all the numbers in a list.\n    '''\n    sum1 = 0\n    for i in list1:\n        sum1 = sum1 + i\n    return sum1\ndef sum_odd_numbers(list1):\n    '''\n    Write a function to find the sum of all the odd numbers in a list.\n    '''\n    sum1 = 0\n    for i in list1:\n        if i % 2!= 0:\n            sum1 = sum1 + i\n    return sum1\ndef sum_even_numbers(list1):\n    '''\n    Write a function to find the sum of all the even numbers in a list.\n    '''\n    sum1 = 0\n    for i in list1:\n        if i % 2 == 0:\n            sum1 = sum1 + i\n    return sum1\ndef sum_of_first_and_last_numbers(list1):\n    '''\n    Write a function to find the sum of the first and last numbers in a list.\n    '''\n    sum1 = 0\n    for i in list1:\n        if i == list1[0]:\n            sum1 = sum1 + i\n        if i == list1[-1]:\n            sum1 = sum1 + i\n    return sum1\ndef sum_of_list(list1):\n    '''\n    Write a function to find the sum of all the numbers in a list.\n    '''\n    sum1 = 0\n    for i in list1:\n        sum1 = sum1 + i\n    return sum1\ndef main():\n    print 'What would you like to do?\\n1. Sum Range\\n2. Sum of All Numbers\\n3. Sum of Odd Numbers\\n4. Sum of Even Numbers\\n5. Sum of First and Last Number\\n6. Sum of All Numbers in a List\\n7. Exit'\n    while True:\n        choice = raw_input('Enter a choice: ')\n        if choice == 1:\n            print 'Enter the range of the list in format (start, end, step)'\n            start1 = raw_input('Enter a starting number: ')\n            end1 = raw_input('Enter an ending number: ')\n            step1 = raw_input('Enter a step number: ')\n            list1 = []\n            start1 = int(start1)\n            end1 = int(end1)\n            step1 = int(step1)\n            for i in range(start1, end1, step1):\n                list1.append(i)\n            print 'The sum of the list is: ', sum_range_list(list1, start1, end1)\n        elif choice == 2:\n            print 'Enter the list'\n            list1 = []\n            while True:\n                element1 = raw_input('Enter an element: ')\n                if element1 == 'done':\n                    break\n                list1.append(int(element1))\n            print 'The sum of all the numbers in the list is: ', find_sum_of_all_numbers(list1)\n        elif choice == 3:\n            print 'Enter the list'\n            list1 = []\n            while True:\n                element1 = raw_input('Enter an element: ')\n                if element1 == 'done':\n                    break\n                list1.append(int(element1))\n            print 'The sum of all the odd numbers in the list is: ', sum_odd_numbers(list1)\n        elif choice == 4:\n            print 'Enter the list'\n            list1 = []\n            while True:\n                element1 = raw_input('Enter an element: ')\n                if element1 == 'done':\n                    break\n                list1.append(int(element1))\n            print 'The sum of all the even numbers in the list is: ', sum_even_numbers(list1)\n        elif choice == 5:\n            print 'Enter the list'\n            list1 = []\n            while True:\n                element1 = raw_input('Enter an element: ')\n                if element1 == 'done':\n                    break\n                list1.append(int(element1))\n            print 'The sum of the first and last numbers in the list is: ', sum_of_first_and_last_numbers(list1)\n        elif choice == 6:\n            print 'Enter the list'\n            list1 = []\n            while True:\n                element1 = raw_input('Enter an element: ')\n                if element1 == 'done':\n                    break\n                list1.append(int(element1))\n            print 'The sum of all the numbers in the list is: ', sum_of_list(list1)\n        elif choice == 7:\n            print 'You have chosen to exit'\n            break\n        else:\n            print 'Please enter a valid choice'\nmain()"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])                                                                                                                                                                                                \n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n + 1):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    #res = []\n    #for i in range(m,n+1):\n    #    res.append(sum(list1[i-m:i]))\n    #return res\n    return sum(list1[m-1:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s=0\n    for i in range(m, n):\n        s=s+list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n):\n        s += list1[i]\n    return s\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((a**2)*math.sqrt(3)/2)\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(3*math.sqrt(5)/4)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return (3*a)*math.sqrt(3)/2\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return (a**2)*(2*math.sqrt(3)/3)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return (5*a)*math.sqrt(7)/4\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return (a**2)*(5*math.sqrt(7)/4)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (7*a)*math.sqrt(2)\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(7*math.sqrt(2)/4)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (8*a)*math.sqrt(2)\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return (a**2)*(8*math.sqrt(2)/4)\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return (10*a)*math.sqrt(8)\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (a**2)*(10*math.sqrt(8)/4)\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return (12*a)*math.sqrt(10)\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the length of its sides.\n    '''\n    return (a**2)*(12*math.sqrt(10)/4)\ndef perimeter_tredecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tredecagon from the length of its sides.\n    '''\n    return (16*a)*math.sqrt(10)\ndef area_tredecagon(a):\n    '''\n    Write a function to find the area of a regular tredecagon from the length of its sides.\n    '''\n    return (a**2)*(16*math.sqrt(10)/4)\ndef perimeter_tregon(a):\n    '''\n    Write a function to find the perimeter of a regular tregon from the length of its sides.\n    '''\n    return (8*a)*math.sqrt(3)\ndef area_tregon(a):\n    '''\n    Write a function to find the area of a regular tregon from the length of its sides.\n    '''\n    return (a**2)*(8*math.sqrt(3)/4)\ndef perimeter_tribecon(a):\n    '''\n    Write a function to find the perimeter of a regular tribecon from the length of its sides.\n    '''\n    return (12*a)*math.sqrt(3)\ndef area_tribecon(a):\n    '''\n    Write a function to find the area of a regular tribecon from the length of its sides.\n    '''\n    return (a**2)*(12*math.sqrt(3)/4)\ndef perimeter_triangon(a):\n    '''\n    Write a function to find the perimeter of a regular triangon from the length of its sides.\n    '''\n    return (3*a)*math.sqrt(3)\ndef area_triangon(a):\n    '''\n    Write a function to find the area of a regular triangon from the length of its sides.\n    '''\n    return (a**2)*(3*math.sqrt(3)/4)\ndef perimeter_trinacont(a):\n    '''\n    Write a function to find the perimeter of a regular trinacont from the length of its sides.\n    '''\n    return (4*a)*math.sqrt(3)\ndef area_trinacont(a):\n    '''\n    Write a function to find the area of a regular trinacont from the length of its sides.\n    '''\n    return (a**2)*(4*math.sqrt(3)/4)\ndef perimeter_heptecont(a):\n    '''\n    Write a function to find the perimeter of a regular heptecont from the length of its sides.\n    '''\n    return (5*a)*math.sqrt(7)\ndef area_heptecont(a):\n    '''\n    Write a function to find the area of a regular heptecont from the length of its sides.\n    '''\n    return (a**2)*(5*math.sqrt(7)/4)\ndef perimeter_octecont(a):\n    '''\n    Write a function to find the perimeter of a regular octecont from the length of its sides.\n    '''\n    return (7*a)*math.sqrt(2)\ndef area_octecont(a):\n    '''\n    Write a function to find the area of a regular octecont from the length of its sides.\n    '''\n    return (a**2)*(7*math.sqrt(2)/4)\ndef perimeter_octogon(a):\n    '''\n    Write a function to find the perimeter of a regular octogon from the length of its sides.\n    '''\n    return (8*a)*math.sqrt(2)\ndef area_octogon(a):\n    '''\n    Write a function to find the area of a regular octogon from the length of its sides.\n    '''\n    return (a**2)*(8*math.sqrt(2)/4)\ndef perimeter_octogon_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular octogon-triangle from the length of its sides.\n    '''\n    return (8*a)*math.sqrt(2)\ndef area_octogon_triangle(a):\n    '''\n    Write a function to find the area of a regular octogon-triangle from the length of its sides.\n    '''\n    return (a**2)*(8*math.sqrt(2)/4)\ndef perimeter_tridecon(a):\n    '''\n    Write a function to find the perimeter of a regular tridecon from the length of its sides.\n    '''\n    return (3*a)*math.sqrt(3)\ndef area_tridecon(a):\n    '''\n    Write a function to find the area of a regular tridecon from the length of its sides.\n    '''\n    return (a**2)*(3*math.sqrt(3)/4)\ndef perimeter_tridicon(a):\n    '''\n    Write a function to find the perimeter of a regular tridicon from the length of its sides.\n    '''\n    return (4*a)*math.sqrt(3)\ndef area_tridicon(a):\n    '''\n    Write a function to find th"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = a/2.0\n    return 5.0*s*math.sqrt(3)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\ndef find_area_of_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return ((3*a**2)/4)**0.5\ndef find_area_of_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return ((3*a**2)/2)**0.5\ndef find_area_of_heptagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return ((7*a**2)/4)**0.5\ndef find_area_of_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return ((3*a**2)/2)**0.5\ndef find_area_of_nonagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return ((5*a**2)/4)**0.5\ndef find_area_of_kite(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return ((7*a**2)/4)**0.5\ndef find_area_of_triangle(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (a**2)/2\ndef find_area_of_trapezium(a,b,c):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return ((a+b+c)/2)*(a+b+c)\ndef find_area_of_circle(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return math.pi*a**2\ndef find_perimeter_of_circle(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 2*math.pi*a\ndef find_perimeter_of_square(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 4*a\ndef find_perimeter_of_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 2*(a+b)\ndef find_perimeter_of_kite(a,b):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 4*a\ndef find_perimeter_of_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 6*a\ndef find_perimeter_of_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\ndef find_perimeter_of_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 4*a\ndef find_perimeter_of_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 4*a\ndef find_perimeter_of_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 6*a\ndef find_perimeter_of_triangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a+b\ndef find_perimeter_of_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\ndef find_perimeter_of_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 2*(a+b)\ndef find_perimeter_of_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a+b+c\ndef find_perimeter_of_trapezium(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a+b+c\ndef find_perimeter_of_circle(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 2*math.pi*a\ndef perimeter_of_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 6*a\ndef perimeter_of_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 4*a\ndef perimeter_of_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 4*a\ndef perimeter_of_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_of_kite(a,b):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 4*a\ndef perimeter_of_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 6*a\ndef perimeter_of_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\ndef perimeter_of_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 4*a\ndef perimeter_of_triangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a+b\ndef perimeter_of_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\ndef perimeter_of_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a+b+c\ndef perimeter_of_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a+b+c\ndef perimeter_of_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a+b+c\ndef perimeter_of_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a+b+c\ndef perimeter_of_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #formula to calculate the perimeter:\n    return ((5*(a**2))/4)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a<=0:\n        return \"INVALID INPUT\"\n    else:\n        return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*(3**0.5)*a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a**2\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    length = len(s)\n    occurance = 0\n    for i in range(length):\n        if s[i:i+len('std')] =='std':\n            occurance += 1\n    return occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    res = s.count('std')\n    return res\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    l = s.lower().split()\n    return l.count('std')\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_of_all_elements = [type(x) for x in test_tuple]\n    if len(set(type_of_all_elements)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #define some variables\n    test_tuple_type = None\n    type_flag = None\n    test_tuple_type = type(test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    elif len(test_tuple) == 1:\n        return True\n    else:\n        if type(test_tuple[0]) == type(test_tuple[1]):\n            return check_type(test_tuple[1:])\n        else:\n            return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return len(set(tuple(map(type,test_tuple)))) == 1\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_test = map(type, test_tuple)\n    if len(set(type_test)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # your code goes here\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    l=len(test_tuple)\n    temp=test_tuple[0]\n    for i in range(1,l):\n        if temp!=test_tuple[i]:\n            return \"Not all elements have the same data type\"\n    return \"All elements have the same data type\"\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for item in test_tuple:\n        type_list.append(type(item))\n    return type_list\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if isinstance(test_tuple, tuple):\n        for i in test_tuple:\n            if not isinstance(i, type(test_tuple[0])):\n                return False\n            else:\n                return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return (arr[0] == x) and (arr.count(x) > n / 2)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    cnt = 0\n    for i in range(n):\n        if arr[i] == x:\n            cnt+=1\n    if cnt >= n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge case\n    if n == 1:\n        return False\n    if n == 2:\n        return True if arr[0] == arr[1] else False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[0] == x:\n        return True\n    elif arr[0]!= x:\n        return is_majority(arr[1:], n-1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            count += 1\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # base case\n    if n == 1:\n        return True\n    # edge case\n    elif n == 2:\n        return False\n    else:\n        # recursion\n        if arr[n // 2] == x:\n            return is_majority(arr, n // 2, x)\n        else:\n            return is_majority(arr, n // 2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr.count(x) > (n // 2)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # If the length is 1 or there is only one element, then it's the majority element\n    if n == 1 or n == 0:\n        return arr[0]\n    \n    mid = n // 2\n    \n    if x == arr[mid]:\n        return True\n    \n    # Compute the counts for each of the 2 halves of the array\n    count_left = 0\n    count_right = 0\n    \n    for i in range(0, mid):\n        if arr[i] == x:\n            count_left += 1\n    \n    for i in range(mid, n):\n        if arr[i] == x:\n            count_right += 1\n    \n    # If there are more than n/2 elements in the left half, then it's the majority element\n    if count_left > mid:\n        return True\n    \n    # If there are more than n/2 elements in the right half, then it's the majority element\n    if count_right > mid:\n        return True\n    \n    # If there are more than n/2 elements in the left and right, then it's the majority element\n    return False\n    \n    \ndef is_majority_v2(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # If the length is 1 or there is only one element, then it's the majority element\n    if n == 1 or n == 0:\n        return arr[0]\n    \n    mid = n // 2\n    \n    # Compute the counts for each of the 2 halves of the array\n    count_left = 0\n    count_right = 0\n    \n    for i in range(0, mid):\n        if arr[i] == x:\n            count_left += 1\n    \n    for i in range(mid, n):\n        if arr[i] == x:\n            count_right += 1\n    \n    # If there are more than n/2 elements in the left half, then it's the majority element\n    if count_left > mid:\n        return True\n    \n    # If there are more than n/2 elements in the right half, then it's the majority element\n    if count_right > mid:\n        return True\n    \n    # If there are more than n/2 elements in the left and right, then it's the majority element\n    return False\n    \n    \ndef is_majority_v3(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # If the length is 1 or there is only one element, then it's the majority element\n    if n == 1 or n == 0:\n        return arr[0]\n    \n    mid = n // 2\n    \n    # If the first element is the majority element, then it's the majority element\n    if arr[mid] == x:\n        return True\n    \n    # If the second half is empty, then it's the majority element\n    if arr[mid+1] == x:\n        return True\n    \n    # If there are more than n/2 elements in the left half, then it's the majority element\n    if arr[mid] == x:\n        return True\n    \n    # If there are more than n/2 elements in the right half, then it's the majority element\n    if arr[mid+1] == x:\n        return True\n    \n    # If there are more than n/2 elements in the left and right, then it's the majority element\n    return False\n    \n    \ndef is_majority_v4(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # If the length is 1 or there is only one element, then it's the majority element\n    if n == 1 or n == 0:\n        return arr[0]\n    \n    mid = n // 2\n    \n    # If the first element is the majority element, then it's the majority element\n    if arr[mid] == x:\n        return True\n    \n    # If the second half is empty, then it's the majority element\n    if arr[mid+1] == x:\n        return True\n    \n    # If there are more than n/2 elements in the left half, then it's the majority element\n    if arr[mid] == x:\n        return True\n    \n    # If there are more than n/2 elements in the right half, then it's the majority element\n    if arr[mid+1] == x:\n        return True\n    \n    # If there are more than n/2 elements in the left and right, then it's the majority element\n    return False\n    \n    \ndef is_majority_v5(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # If the length is 1 or there is only one element, then it's the majority element\n    if n == 1 or n == 0:\n        return arr[0]\n    \n    # Start the left and right pointers at the begining and end of the array\n    left = 0\n    right = n - 1\n    \n    # While the left pointer is less than the right pointer\n    while left <= right:\n        \n        # Find the midpoint of the left and right pointers\n        mid = (left + right) // 2\n        \n        # If the element at the midpoint is the majority element\n        if arr[mid] == x:\n            \n            # Get the counts for the 2 sides of the array\n            count_left = 0\n            count_right = 0\n            \n            for i in range(0, mid):\n                if arr[i] == x:\n                    count_left += 1\n            \n            for i in range(mid, n):\n                if arr[i] == x:\n                    count_right += 1\n            \n            # If there are more than n/2 elements in the left half\n            if count_left > mid:\n                \n                # The majority element is the element at the right half\n                return True\n            \n            # If there are more than n/2 elements in the right half\n            if count_right > mid:\n                \n                # The majority element is the element at the right half\n                return True\n        \n        # If the element at the midpoint is not the majority element\n        else:\n            \n            # If the element at the left side is not the majority element\n            if arr[mid]!= x:\n                \n                # Move the left side pointer to the right side\n                left = mid + 1\n            \n            # If the element at the right side is not the majority element\n            else:\n                \n                # Move the right side pointer to the left side\n                right = mid - 1\n            \n    # If the majority element is not found\n    return False\n    \n    \ndef is_majority_v6(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # If the length is 1 or there is only one element, then it's the majority element\n    if n == 1 or n == 0:\n        return arr[0]\n    \n    mid = n // 2\n    \n    # If the first element is the majority element, then it's the majority element\n    if arr[mid] == x:\n        return True\n    \n    # If the second half is empty, then it's the majority element\n    if arr[mid+1] == x:\n        return True\n    \n    # If there are more than n/2 elements in the left half, then it's the majority element\n    if arr[mid] == x:\n        return True\n    \n    # If there are mor"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if n % 2 == 1:\n        return False\n    \n    arr_index_0 = 0\n    arr_index_1 = n - 1\n    \n    while arr_index_1 - arr_index_0 > 1:\n        if arr[arr_index_0] == arr[arr_index_1] and arr[arr_index_0] == x:\n            return True\n        if arr[arr_index_0] == arr[arr_index_1] and arr[arr_index_0]!= x:\n            return False\n        if arr[arr_index_0] < arr[arr_index_1]:\n            if arr[arr_index_0] < x < arr[arr_index_1]:\n                arr_index_0 += 1\n            elif arr[arr_index_1] < x < arr[arr_index_0]:\n                arr_index_1 -= 1\n            elif x < arr[arr_index_0]:\n                arr_index_0 += 1\n            elif x > arr[arr_index_1]:\n                arr_index_1 -= 1\n            else:\n                arr_index_0 += 1\n                arr_index_1 -= 1\n        else:\n            if arr[arr_index_0] < x < arr[arr_index_1]:\n                arr_index_1 -= 1\n            elif arr[arr_index_1] < x < arr[arr_index_0]:\n                arr_index_0 += 1\n            elif x < arr[arr_index_1]:\n                arr_index_0 += 1\n            elif x > arr[arr_index_0]:\n                arr_index_1 -= 1\n            else:\n                arr_index_1 -= 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counter = 0\n    for i in arr:\n        if i == x:\n            counter += 1\n    if counter > n / 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n &= n - 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n):\n        if n % 2:\n            bitCount += 1\n        n = n >> 1\n    return bitCount\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = 0\n    while (n): \n        num += 1\n        n &= n - 1\n    return num\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).count('1')\ndef count_Set_Bits(n): \n    return bin(n).coun"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(1,len(str),2):\n        str=str.replace(str[i],'')\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #str = \"hello\"\n    length = len(str)\n    for i in range(length):\n        if i%2==0:\n            print str[i],\n    print ''\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = str[1:len(str) - 1]\n    return string\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(c for i,c in enumerate(str) if i%2==0)\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str[0:len(str)]\n    str = str[::2]\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    l=list(str)\n    n=len(l)\n    for i in range(n):\n        if i%2!=0:\n            l[i]=\"\"\n    return \"\".join(l)\ndef remove_empty_values(l):\n    '''\n    Write a python function to remove the empty values from a given list.\n    '''\n    for i in l:\n        if i==\"\":\n            l.remove(i)\n    return l\ndef reverse_string_words(str):\n    '''\n    Write a python function to reverse each word in a string.\n    '''\n    l=str.split(\" \")\n    return \" \".join(l[::-1])\ndef sum_of_digits(n):\n    '''\n    Write a python function to calculate the sum of digits of a given number.\n    '''\n    s=0\n    while n!=0:\n        s+=n%10\n        n//=10\n    return s\ndef find_min_max(l):\n    '''\n    Write a python function to find the minimum and maximum value of a given list.\n    '''\n    l.sort()\n    return l[0],l[-1]\ndef find_common_elements(l1,l2):\n    '''\n    Write a python function to find the common elements of two given lists.\n    '''\n    l=[]\n    for i in l1:\n        for j in l2:\n            if i==j:\n                l.append(i)\n    return l\ndef find_missing_numbers(l):\n    '''\n    Write a python function to find the missing numbers in a given list.\n    '''\n    s=set(l)\n    l1=[x for x in range(1,max(s)+1)]\n    return list(set(l1)-set(l))\ndef find_longest_string(l):\n    '''\n    Write a python function to find the longest string in a given list.\n    '''\n    max_len=0\n    for i in l:\n        if len(i)>max_len:\n            max_len=len(i)\n    return max_len\ndef first_and_last_index(str,char):\n    '''\n    Write a python function to find the first and last index of a given character in a string.\n    '''\n    if char not in str:\n        return -1,-1\n    l=list(str)\n    n=len(l)\n    for i in range(n):\n        if l[i]==char:\n            if i==0:\n                return i,i\n            elif i==n-1:\n                return i-1,i\n            else:\n                return i-1,i\ndef find_string_anagrams(str):\n    '''\n    Write a python function to find all the anagrams of a given string.\n    '''\n    l=list(str)\n    n=len(l)\n    s=set()\n    for i in range(n):\n        for j in range(i+1,n):\n            if sorted(l[i:j+1])==sorted(l[j+1:]):\n                s.add(l[i:j+1])\n    return s\ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if str==str[::-1]:\n        return True\n    else:\n        return False\ndef get_compressed_string(str):\n    '''\n    Write a python function to get a compressed string from a given string.\n    '''\n    l=[]\n    n=len(str)\n    for i in range(n):\n        count=1\n        while i+count<n and str[i:i+count+1]==str[i+count:i+count+1+1]:\n            count+=1\n        if count>1:\n            l.append(str[i])\n            l.append(str(count))\n        else:\n            l.append(str[i])\n    return \"\".join(l)\ndef remove_all_spaces(str):\n    '''\n    Write a python function to remove all spaces in a given string.\n    '''\n    s=str.replace(\" \",\"\")\n    return s\ndef find_longest_word(l):\n    '''\n    Write a python function to find the longest word in a given list of words.\n    '''\n    max_len=0\n    for i in l:\n        if len(i)>max_len:\n            max_len=len(i)\n    return max_len\ndef find_anagrams(l):\n    '''\n    Write a python function to find all the anagrams of a given string.\n    '''\n    l1=[]\n    s=set(l)\n    for i in s:\n        l1.append(i)\n    l1.sort()\n    return l1\ndef swap_key_value(d):\n    '''\n    Write a python function to swap keys and values in a given dictionary.\n    '''\n    l={}\n    for key,value in d.items():\n        l[value]=key\n    return l\ndef is_balanced(str):\n    '''\n    Write a python function to check whether a given string is balanced or not.\n    '''\n    s=str.replace(\"{\",\"\").replace(\"}\",\"\").replace(\"(\",\"\").replace(\")\",\"\")\n    if len(s)%2!=0:\n        return False\n    s1=[]\n    for i in s:\n        if i==\"{\":\n            s1.append(\"}\")\n        elif i==\"(\":\n            s1.append(\")\")\n        elif i==\"[\":\n            s1.append(\"]\")\n        else:\n            return False\n    if len(s1)!=0:\n        return False\n    return True\ndef rotate_list(l):\n    '''\n    Write a python function to rotate a given list in right direction.\n    '''\n    l1=l[1:]+l[:1]\n    return l1\ndef rotate_2d_matrix(l):\n    '''\n    Write a python function to rotate a given 2d matrix in right direction.\n    '''\n    n=len(l)\n    l1=[]\n    for i in range(n):\n        for j in range(n):\n            l1.append(l[i][j])\n    return l1\ndef add_matrix(l):\n    '''\n    Write a python function to add two 2d matrices.\n    '''\n    n=len(l)\n    l1=[]\n    for i in range(n):\n        l2=[]\n        for j in range(n):\n            l2.append(l[i][j]+l[i][j])\n        l1.append(l2)\n    return l1\ndef add_string(str1,str2):\n    '''\n    Write a python function to add two strings.\n    '''\n    l=list(str1)\n    for i in range(len(str2)):\n        l.append(str2[i])\n    return \"\".join(l)\ndef find_all_duplicates(l):\n    '''\n    Write a python function to find all the duplicates in a given list.\n    '''\n    l.sort()\n    s=[]\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            s.append(l[i])\n    return s\ndef find_all_duplicates_set(l):\n    '''\n    Write a python function to find all the duplicates in a given list.\n    '''\n    s=set()\n    for i in l:\n        if i in s:\n            return True\n        else:\n            s.add(i)\n    return False\ndef find_second_largest(l):\n    '''\n    Write a python function to find the second largest number in a given list.\n    '''\n    max1,max2=l[0],l[0]\n    for i in l:\n        if i>max1:\n            max2=max1\n            max1=i\n        elif i>max2 and i<max1:\n            max2=i\n    return max2\nde"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    a=0\n    for i in str:\n        if(a%2!=0):\n            print(i)\n        a=a+1\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    n = len(str)\n    newStr = \"\"\n    for i in range(0,n):\n        if i % 2 == 0:\n            newStr = newStr + str[i]\n    return newStr\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<c and b<a:\n        return b\n    return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        min_num = a\n    else:\n        min_num = b\n    if min_num < c:\n        min_num = c\n    return min_num\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a\n    if b < a and b < c:\n        minimum = b\n    elif c < a and c < b:\n        minimum = c\n    return minimum\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,min(b,c))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n) - 1 >= l and (2**n) - 1 <= r\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (i & n)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & (2**r - 1)) >> l) == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res = True\n    for i in range(l,r):\n        res = res and (n & (1 << i) == 0)\n    return res\n    \ndef is_the_Given_Number_Divisible_by_2(n):\n    '''\n    Write a python function to check whether the given number is divisible by 2 or not.\n    '''\n    res = False\n    if n % 2 == 0:\n        res = True\n    return res\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask= ~((2**n)-1)\n    return l&mask==r&mask\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l==r:\n        return True\n    elif l>r:\n        return False\n    elif l==0 and r==63:\n        return False\n    elif l==1 and r==63:\n        return False\n    elif l==2 and r==63:\n        return False\n    elif l==3 and r==63:\n        return False\n    elif l==4 and r==63:\n        return False\n    elif l==5 and r==63:\n        return False\n    elif l==6 and r==63:\n        return False\n    elif l==7 and r==63:\n        return False\n    elif l==8 and r==63:\n        return False\n    elif l==9 and r==63:\n        return False\n    elif l==10 and r==63:\n        return False\n    elif l==11 and r==63:\n        return False\n    elif l==12 and r==63:\n        return False\n    elif l==13 and r==63:\n        return False\n    elif l==14 and r==63:\n        return False\n    elif l==15 and r==63:\n        return False\n    elif l==16 and r==63:\n        return False\n    elif l==17 and r==63:\n        return False\n    elif l==18 and r==63:\n        return False\n    elif l==19 and r==63:\n        return False\n    elif l==20 and r==63:\n        return False\n    elif l==21 and r==63:\n        return False\n    elif l==22 and r==63:\n        return False\n    elif l==23 and r==63:\n        return False\n    elif l==24 and r==63:\n        return False\n    elif l==25 and r==63:\n        return False\n    elif l==26 and r==63:\n        return False\n    elif l==27 and r==63:\n        return False\n    elif l==28 and r==63:\n        return False\n    elif l==29 and r==63:\n        return False\n    elif l==30 and r==63:\n        return False\n    elif l==31 and r==63:\n        return False\n    elif l==32 and r==63:\n        return False\n    elif l==33 and r==63:\n        return False\n    elif l==34 and r==63:\n        return False\n    elif l==35 and r==63:\n        return False\n    elif l==36 and r==63:\n        return False\n    elif l==37 and r==63:\n        return False\n    elif l==38 and r==63:\n        return False\n    elif l==39 and r==63:\n        return False\n    elif l==40 and r==63:\n        return False\n    elif l==41 and r==63:\n        return False\n    elif l==42 and r==63:\n        return False\n    elif l==43 and r==63:\n        return False\n    elif l==44 and r==63:\n        return False\n    elif l==45 and r==63:\n        return False\n    elif l==46 and r==63:\n        return False\n    elif l==47 and r==63:\n        return False\n    elif l==48 and r==63:\n        return False\n    elif l==49 and r==63:\n        return False\n    elif l==50 and r==63:\n        return False\n    elif l==51 and r==63:\n        return False\n    elif l==52 and r==63:\n        return False\n    elif l==53 and r==63:\n        return False\n    elif l==54 and r==63:\n        return False\n    elif l==55 and r==63:\n        return False\n    elif l==56 and r==63:\n        return False\n    elif l==57 and r==63:\n        return False\n    elif l==58 and r==63:\n        return False\n    elif l==59 and r==63:\n        return False\n    elif l==60 and r==63:\n        return False\n    elif l==61 and r==63:\n        return False\n    elif l==62 and r==63:\n        return False\n    elif l==63 and r==63:\n        return True\n    elif l==0 and r==0:\n        return True\n    elif l==0 and r==1:\n        return False\n    elif l==0 and r==2:\n        return False\n    elif l==0 and r==3:\n        return False\n    elif l==0 and r==4:\n        return False\n    elif l==0 and r==5:\n        return False\n    elif l==0 and r==6:\n        return False\n    elif l==0 and r==7:\n        return False\n    elif l==0 and r==8:\n        return False\n    elif l==0 and r==9:\n        return False\n    elif l==0 and r==10:\n        return False\n    elif l==0 and r==11:\n        return False\n    elif l==0 and r==12:\n        return False\n    elif l==0 and r==13:\n        return False\n    elif l==0 and r==14:\n        return False\n    elif l==0 and r==15:\n        return False\n    elif l==0 and r==16:\n        return False\n    elif l==0 and r==17:\n        return False\n    elif l==0 and r==18:\n        return False\n    elif l==0 and r==19:\n        return False\n    elif l==0 and r==20:\n        return False\n    elif l==0 and r==21:\n        return False\n    elif l==0 and r==22:\n        return False\n    elif l==0 and r==23:\n        return False\n    elif l==0 and r==24:\n        return False\n    elif l==0 and r==25:\n        return False\n    elif l==0 and r==26:\n        return False\n    elif l==0 and r==27:\n        return False\n    elif l==0 and r==28:\n        return False\n    elif l==0 and r==29:\n        return False\n    elif l==0 and r==30:\n        return False\n    elif l==0 and r==31:\n        return False\n    elif l==0 and r==32:\n        return False\n    elif l==0 and r==33:\n        return False\n    elif l==0 and r==34:\n        return False\n    elif l==0 and r==35:\n        return False\n    elif l==0 and r==36:\n        return False\n    elif l==0 and r==37:\n        return False\n    elif l==0 and r==38:\n        return False\n    elif l==0 and r==39:\n        return False\n    elif l==0 and r==40:\n        return False\n    elif l==0 and r==41:\n        return False\n    elif l==0 and r==42:\n        return False\n    elif l==0 and r==43:\n        return False\n    elif l==0 and r==44:\n        return False\n    elif l==0 and r==45:\n        return False\n    elif l==0 and r==46:\n        return False\n    elif l==0 and r==47:\n        return False\n    elif l==0 and r==48:\n        return False\n    elif l==0 and r==49:\n        return False\n    elif l==0 and r==50:\n        return False\n    elif l==0 and r==51:\n        return False\n    elif l==0 and r==52:\n        return False\n    elif l==0 and r==53:\n        return False\n    elif l==0 and r==54:\n        return False\n    elif l==0 and r==55:\n        return False\n    elif l==0 and r==56:\n        return False\n    elif l==0 and r==57:\n        return False\n    elif l==0 and r==58:\n        return False\n    eli"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    binary = bin(n)\n    l = l*\"0\" + binary[2:]\n    r = r*\"1\" + binary[2:]\n    if l.count(\"0\") == r.count(\"1\"):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<(r+1))-1)) == 0)\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((2**n)-1)^(r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-1 ^ (r-l+1)\ndef all_bits_unset_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n)-1 ^ (r-l+1)==0\ndef unset_bits_count_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the unset bits in the given range.\n    '''\n    return (2**n)-"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bin_n = bin(n)[2:]\n    bin_l = bin(l)[2:]\n    bin_r = bin(r)[2:]\n    \n    count = 0\n    for i in bin_l:\n        if i == '0':\n            count+=1\n    \n    for i in bin_r:\n        if i == '0':\n            count+=1\n            \n    if count == 0:\n        return True\n    else:\n        return False\n        \n        \n    \n    \ndef last_Two_Bits(n):\n    '''\n    Write a python function to check if the last two bits of the given number are 01 or 11.\n    '''\n    bin_n = bin(n)[2:]\n    \n    if bin_n[-2:] == '01' or bin_n[-2:] == '11':\n        return True\n    else:\n        return False\n        \n        \n        \ndef add_String_To_The_Beginning(s,t):\n    '''\n    Write a python function to add two strings together.\n    '''\n    \n    new_s = s + t\n    \n    return new_s\n    \n    \ndef decimal_To_N_Bits(n):\n    '''\n    Write a python function to convert a decimal number into a number of n bits.\n    '''\n    bit_s = bin(n)[2:]\n    \n    if len(bit_s) < n:\n        for i in range(n-len(bit_s)):\n            bit_s = '0' + bit_s\n            \n    return bit_s\n    \n    \ndef all_Bits_Set_In_The_Given_Range_List(n_list,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    for i in n_list:\n        if not last_Two_Bits(i):\n            return False\n    \n    for i in range(l,r+1):\n        if not last_Two_Bits(i):\n            return False\n        \n    return True\n    \n    \ndef binary_Numbers_In_The_Given_Range_List(n_list,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    for i in n_list:\n        if last_Two_Bits(i):\n            return False\n    \n    for i in range(l,r+1):\n        if last_Two_Bits(i):\n            return False\n        \n    return True\n    \n    \ndef add_Two_Binary_Numbers(n,m):\n    '''\n    Write a python function to add two binary numbers.\n    '''\n    \n    bin_n = binary_Numbers_In_The_Given_Range_List(n,0,len(n)-1)\n    bin_m = binary_Numbers_In_The_Given_Range_List(m,0,len(m)-1)\n    \n    if len(bin_n) > len(bin_m):\n        n,m = m,n\n        \n    for i in range(len(bin_n)-1,-1,-1):\n        if len(bin_n) > len(bin_m):\n            bin_m = '0' + bin_m\n        \n        add = str(int(bin_n[i]) + int(bin_m[i]))\n        \n        if len(add) < 2:\n            add = '0' + add\n        \n        bin_n = add + bin_n[:i]\n        \n    return bin_n\n    \n    \ndef n_Bits_To_One(n,l,r):\n    '''\n    Write a python function to convert a number into an integer whose bits are set from the given range.\n    '''\n    \n    bin_n = decimal_To_N_Bits(n,r-l+1)\n    \n    return int(bin_n,2)\n    \n    \ndef all_Bits_Set_In_The_Given_Range_List_Using_n_Bits(n_list,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    for i in n_list:\n        if not last_Two_Bits(n_Bits_To_One(i,l,r)):\n            return False\n    \n    return True\n    \n    \ndef change_All_Bits_To_Its_Neighbour_Value_In_Range(n,l,r):\n    '''\n    Write a python function to convert a number into an integer whose bits are set from the given range.\n    '''\n    \n    n_list = []\n    bin_n = decimal_To_N_Bits(n,r-l+1)\n    for i in range(len(bin_n)):\n        if bin_n[i] == '0':\n            n_list.append(n_Bits_To_One(n,l,r-i))\n        else:\n            n_list.append(n_Bits_To_One(n,l+i,r-i))\n            \n    return n_list\n    \n    \ndef all_Bits_Set_In_The_Given_Range_List_Using_n_Bits(n_list,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    for i in n_list:\n        if not last_Two_Bits(n_Bits_To_One(i,l,r)):\n            return False\n    \n    return True\n    \n    \ndef check_If_The_Sums_Of_Two_Binary_Numbers_Match(n,m):\n    '''\n    Write a python function to check whether the sum of the two numbers is equal to the other number.\n    '''\n    \n    bin_n = decimal_To_N_Bits(n,len(bin(m)[2:]))\n    bin_m = decimal_To_N_Bits(m,len(bin(m)[2:]))\n    \n    if bin_n + bin_m == bin(m)[2:]:\n        return True\n    else:\n        return False\n    \n    \ndef replace_All_Bits_With_Its_Neighbours_Values_In_Range(n,l,r):\n    '''\n    Write a python function to convert a number into an integer whose bits are set from the given range.\n    '''\n    \n    n_list = []\n    bin_n = decimal_To_N_Bits(n,r-l+1)\n    for i in range(len(bin_n)):\n        if bin_n[i] == '0':\n            n_list.append(n_Bits_To_One(n,l,r-i))\n        else:\n            n_list.append(n_Bits_To_One(n,l+i,r-i))\n            \n    return n_list\n    \n    \ndef all_Bits_Set_In_The_Given_Range_List_Using_n_Bits(n_list,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    for i in n_list:\n        if not last_Two_Bits(n_Bits_To_One(i,l,r)):\n            return False\n    \n    return True\n    \n    \ndef replace_All_Bits_With_Their_Neighbours_Values_In_Range(n,l,r):\n    '''\n    Write a python function to convert a number into an integer whose bits are set from the given range.\n    '''\n    \n    n_list = []\n    bin_n = decimal_To_N_Bits(n,r-l+1)\n    for i in range(len(bin_n)):\n        if bin_n[i] == '0':\n            n_list.append(n_Bits_To_One(n,l,r-i))\n        else:\n            n_list.append(n_Bits"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr[:n], reverse=True) + sorted(arr[n:])\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    return arr[:n] + [x for x in arr[n:] if x<0] + [x for x in arr[n:] if x>=0]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[n:] + arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = arr[:n]\n    arr.sort(key = abs)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    for i in xrange(n):\n        if arr[i] < 0:\n            arr[i], arr[-1] = arr[-1], arr[i]\n            arr.pop()\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = []\n    neg = []\n    for el in arr[:n]:\n        if el > 0:\n            pos.append(el)\n        else:\n            neg.append(el)\n    return pos + neg\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # All negative values will be stored in a separate list\n    neg = []\n    \n    # All positive values will be stored in a separate list\n    pos = []\n    \n    # The remaining elements will be stored in a separate list\n    remaining = []\n    \n    # Fill the negative and positive lists with the first n elements\n    for i in range(0, n):\n        # If the current element is negative, store it in the neg list\n        if arr[i] < 0:\n            neg.append(arr[i])\n        # If the current element is positive, store it in the pos list\n        elif arr[i] > 0:\n            pos.append(arr[i])\n        # If the current element is neither negative nor positive, store it in the remaining list\n        else:\n            remaining.append(arr[i])\n    \n    # In order to preserve the relative order of negative and positive values, we rearrange the negative and positive lists.\n    # Keep the first n elements of the negative list and add it to the final result\n    res = neg[:n] + pos\n    \n    # If the remaining list is not empty, add it to the final result\n    if remaining:\n        res += remaining\n    \n    return res\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if not arr:\n        return\n    positive, negative = [], []\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n    return negative + positive\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr.insert(i, arr.pop(-1))\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    l = len(arr)\n    new_arr = []\n    for i in range(l):\n        if arr[i] > 0:\n            new_arr.append(arr[i])\n    for i in range(l - n):\n        new_arr.append(arr[i])\n    return new_arr\n    \ndef re_arrange_array_best(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            new_arr.append(arr[i])\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            new_arr.append(arr[i])\n    return new_arr\n    "
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str1 = ''\n    for char in str1:\n        if char =='':\n            char = char.replace(' ','')\n        new_str1 += char\n    return new_str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # for i in range(len(str1)):\n    #     if str1[i]==' ':\n    #         str1[i]=char\n    #     print(str1[i],end='')\n    #     return(str1)\n    # print()\n    # return(str1)\n    return(str1.replace(' ',''+char+' '))\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new = []\n    for s in str1:\n        if s =='':\n            new.append(char)\n        else:\n            new.append(s)\n    return ''.join(new)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    lst=list(str1)\n    for i in range(0,len(lst)):\n        if lst[i]==' ':\n            lst[i]=char\n    str1=''.join(lst)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    return str1.replace(char,\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n    \ndef get_largest(lst):\n    '''\n    Write a function that takes in a list of strings, and returns the string with the largest length.\n    '''\n    return max(lst,key=len)\n    \ndef get_all_pairs(numbers):\n    '''\n    Write a function that takes in a list of numbers, and returns a list of pairs, such that each pair has the first number from the list as its first element and the second number as its second element.\n    '''\n    return [(numbers[i],numbers[i+1]) for i in range(0,len(numbers),2)]\n    \ndef get_all_equal(lst):\n    '''\n    Write a function that takes in a list of numbers, and returns a list of pairs, such that each pair has the first number from the list as its first element and the second number as its second element.\n    '''\n    return [(lst[i],lst[i]) for i in range(len(lst))]\n    \ndef factorial(n):\n    '''\n    Write a function that takes in an integer, n, and returns the factorial of n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef top_sort(graph):\n    '''\n    Write a function that takes in a graph, and returns a list of nodes, such that for each node in the graph, the function returns the element that appears first in the topological sort of the graph.\n    '''\n    top_sort_list = []\n    visited = [False]*len(graph)\n    for i in range(len(graph)):\n        if not visited[i]:\n            top_sort_list.append(i)\n            visited[i] = True\n            for n in graph[i]:\n                visited[n] = True\n    return top_sort_list\n    \ndef find_path(graph,start,end,visited,path):\n    visited[start] = True\n    path.append(start)\n    if start == end:\n        return True\n    for n in graph[start]:\n        if not visited[n]:\n            if find_path(graph,n,end,visited,path):\n                return True\n        else:\n            return False\n    path.pop()\n    return False\n    \ndef shortest_path(graph,start,end,visited,path):\n    visited[start] = True\n    path.append(start)\n    if start == end:\n        return True\n    for n in graph[start]:\n        if not visited[n]:\n            if shortest_path(graph,n,end,visited,path):\n                return True\n        else:\n            return False\n    path.pop()\n    return False\n    \ndef reverse_graph(graph):\n    new_graph = {}\n    for key in graph:\n        new_graph[key] = graph[key]\n    for key in graph:\n        for n in graph[key]:\n            if key not in new_graph[n]:\n                new_graph[n].append(key)\n    return new_graph\n    \ndef remove_edge(graph,edge):\n    '''\n    Write a function that takes in a graph, and an edge, and removes the edge from the graph.\n    '''\n    if edge in graph:\n        graph.pop(edge)\n        for node in graph:\n            if edge in graph[node]:\n                graph[node].remove(edge)\n    return graph\n    \ndef find_max_product(graph):\n    '''\n    Write a function that takes in a graph and returns the product of the sums of all the numbers in the graph.\n    '''\n    product = 0\n    for key in graph:\n        product += sum(graph[key])\n    return product\n    \ndef find_depth_first_path(graph,start,end,visited,path):\n    visited[start] = True\n    path.append(start)\n    if start == end:\n        return True\n    for n in graph[start]:\n        if not visited[n]:\n            if find_path(graph,n,end,visited,path):\n                return True\n    path.pop()\n    return False\n    \ndef breadth_first_path(graph,start,end,visited,path):\n    visited[start] = True\n    path.append(start)\n    if start == end:\n        return True\n    queue = [start]\n    while len(queue)!= 0:\n        n = queue.pop(0)\n        for n in graph[n]:\n            if not visited[n]:\n                visited[n] = True\n                path.append(n)\n                if n == end:\n                    return True\n                queue.append(n)\n    path.pop()\n    return False\n    \ndef find_eulerian_tour(graph):\n    '''\n    Write a function that takes in a graph and returns a list of edges that forms an eulerian tour.\n    '''\n    edge_list = []\n    odd = 0\n    for key in graph:\n        if len(graph[key])%2!= 0:\n            odd += 1\n    if odd == 2:\n        return graph.keys()\n    for key in graph:\n        if len(graph[key])%2 == 0:\n            for n in graph[key]:\n                edge_list.append((key,n))\n    euler_tour = []\n    visited = [False]*len(graph)\n    while len(euler_tour)!= len(graph):\n        for key in graph:\n            if not visited[key]:\n                visited[key] = True\n                for n in graph[key]:\n                    if not visited[n]:\n                        edge_list.append((key,n))\n        while len(edge_list) > 0:\n            edge = edge_list.pop()\n            if find_path(graph,edge[0],edge[1],visited,euler_tour):\n                euler_tour.append(edge)\n                visited[edge[1]] = True\n                visited[edge[0]] = True\n    return euler_tour\n    \ndef kruskal_minimum_spanning_tree(graph,nodes,edges):\n    '''\n    Write a function that takes in a graph, a list of nodes, and a list of edges. The function should return a list of edges that forms a minimum spanning tree, where the edges in the tree are included in the list of edges.\n    '''\n    edges.sort(key = lambda x:x[2])\n    return edges\n    \ndef find_most_common_element(lst):\n    '''\n    Write a function that takes in a list of numbers, and returns the number that appears the most.\n    '''\n    lst = [lst[i] for i in range(len(lst)) if lst[i]!= None]\n    if len(lst) == 0:\n        return None\n    else:\n        return max(lst,key=lst.count)\n        \ndef find_most_common_pair(lst):\n    '''\n    Write a function that takes in a list of numbers, and returns a tuple (number1,number2) that appears the most.\n    '''\n    lst = [(lst[i],lst[i+1]) for i in range(len(lst)-1)]\n    if len(lst) == 0:\n        return None\n    else:\n        return max(lst,key=lst.count)\n        \ndef is_cycle(graph,node,visited,stack):\n    '''\n    Write a function that takes in a graph, a node, a visited list, and a stack and returns True if there is a cycle in the graph, and False otherwise.\n    '''\n    visited[node] = True\n    stack.append(node)\n    for n in graph[node]:\n        if not visited[n]:\n            if is_cycle(graph,n,visited,stack):\n                return True\n        elif n in stack:\n            return True\n    stack.pop()\n    return False\n    \ndef directed_graph_has_cycle(graph):\n    '''\n    Write a function that takes in a graph and returns True if there is a cycle in the graph, and False otherwise.\n    '''\n    visited = [False]*len"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1 + char\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    if str1.isalpha() or str1.isdigit():\n        return char+str1+char\n    else:\n        return char+str1.lower()+char\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = ''\n    for s in str1:\n        if s =='':\n            s = char\n        result = result + s\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest = n\n    return [heapq.nlargest(largest,list1)[-1]]\n    \ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]>heap[0]:\n            heapq.heapreplace(heap,list1[i])\n    return heap\ndef median(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the median of the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n    l = len(list1)\n    if l % 2 == 0:\n        return (heap[l/2] + heap[l/2 - 1])/2\n    else:\n        return heap[l/2]\ndef count_digits(n):\n    '''\n    Write a function that takes in a non-negative integer n and returns the number of digits in n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 + count_digits(n//10)\ndef distance(s1,s2):\n    '''\n    Write a function that takes in two strings and returns the minimum number of characters you have to remove from the first string to obtain the second string.\n    '''\n    if len(s1)<len(s2):\n        a = s1\n        b = s2\n    else:\n        a = s2\n        b = s1\n    for i in range(len(b)):\n        if a[i]!= b[i]:\n            return len(a)-i\n    return len(a)\ndef freq_counter(s1):\n    '''\n    Write a function that takes in a string and returns a dictionary with the characters of the string as keys and the number of times they occur as values.\n    '''\n    d = {}\n    for i in s1:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef is_palindrome(s1):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    if len(s1) < 2:\n        return True\n    elif s1[0] == s1[-1]:\n        return is_palindrome(s1[1:-1])\n    else:\n        return False\ndef is_anagram(s1,s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams and False otherwise.\n    '''\n    d1 = freq_counter(s1)\n    d2 = freq_counter(s2)\n    for k in d1.keys():\n        if k not in d2.keys() or d1[k]!= d2[k]:\n            return False\n    return True\ndef has_repeat(s1):\n    '''\n    Write a function that takes in a string and returns True if any two characters appear an even number of times in the string and False otherwise.\n    '''\n    d = {}\n    for i in s1:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d.keys():\n        if d[i]%2!= 0:\n            return True\n    return False\ndef is_rotation(s1,s2):\n    '''\n    Write a function that takes in two strings and returns True if the first string can be obtained by performing one or more swaps on the second string to make it identical to the second string and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if len(s1) < 2:\n        return True\n    else:\n        l = len(s1)\n        if s1[0] == s2[-l]:\n            return is_rotation(s1[1:],s2)\n        else:\n            return is_rotation(s1,s2[:-l])\ndef rotate_word(s1,n):\n    '''\n    Write a function that takes in a string and an integer and returns a new string that contains the same characters as the original string but is rotated n characters to the right.\n    '''\n    if len(s1) < 2:\n        return s1\n    else:\n        l = len(s1)\n        return s1[n%l:] + s1[:n%l]\ndef make_anagram(s1,s2):\n    '''\n    Write a function that takes in two strings and returns a new string that is the anagram of the first string when both are rearranged.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        d1 = freq_counter(s1)\n        d2 = freq_counter(s2)\n        for i in d1.keys():\n            if i not in d2.keys() or d1[i]!= d2[i]:\n                return False\n        return True\ndef is_permutation(s1,s2):\n    '''\n    Write a function that takes in two strings and returns True if the two strings are permutations of each other and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        d1 = freq_counter(s1)\n        d2 = freq_counter(s2)\n        for i in d1.keys():\n            if i not in d2.keys() or d1[i]!= d2[i]:\n                return False\n        return True\ndef rotate_matrix(l):\n    '''\n    Write a function that takes in a list of lists and returns the elements of the list rotated 90 degrees clockwise.\n    '''\n    if len(l)!= len(l[0]):\n        return False\n    l1 = []\n    for i in range(len(l)):\n        l1.append(l[-i-1])\n    return l1\ndef get_coords(s):\n    '''\n    Write a function that takes in a string and returns a tuple containing the row and column coordinates of the upper left corner of the rectangle occupied by the string.\n    '''\n    l = len(s)\n    return (0,l-1)\ndef convert_to_binary(n):\n    '''\n    Write a function that takes in a positive integer n and returns a list of length n+1 where the i-th element in the list is the binary representation of i.\n    '''\n    s = ''\n    l = []\n    while n > 0:\n        s += str(n%2)\n        n //= 2\n    l.append(s)\n    for i in range(len(s),len(s)-1,-1):\n        l.append(s[i])\n    return l\ndef find_missing_letter(s1,s2):\n    '''\n    Write a function that takes in two strings and returns the letter that is not shared between the two strings.\n    '''\n    d1 = freq_counter(s1)\n    d2 = freq_counter(s2)\n    for i in d1.keys():\n        if i not in d2.keys() or d1[i]!= d2[i]:\n            return i\ndef is_rotation(s1,s2):\n    '''\n    Write a function that takes in two strings and returns True if the first string can be obtained by performing one or more swaps on the second string to make it identical to the second string and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if len(s1) < 2:\n        return True\n    else:\n        l = len(s1)\n        if s1[0] == s2[-l]:\n            return is_rotation(s1[1:],s2)\n        else:\n            return is_rotation(s1,s2[:-l])\ndef count_vowels(s1):\n    '''\n    Write a function that takes in a string and returns the number of vowels (a, e, i, o, u) in the string.\n    '''\n    d = {'a':0,'e':0,'"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #n = int(input())\n    #list1 = [int(i) for i in input().split()]\n    list1.sort()\n    list1.reverse()\n    return list1[:n]\ndef larg_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    #n = int(input())\n    #list1 = [int(i) for i in input().split()]\n    list1.sort()\n    return list1[n:]\ndef dig_pow(n,p):\n    '''\n    Write a function that takes in two integers n and p and returns the result of n^p.\n    '''\n    #n = int(input())\n    #p = int(input())\n    return pow(n,p)\ndef odd_or_even(n):\n    '''\n    Write a function that takes in an integer n and returns True if n is odd and False if n is even.\n    '''\n    #n = int(input())\n    return True if n%2 else False\ndef x_or_o(n,x):\n    '''\n    Write a function that takes in two integers n and x and returns True if n and x share the same digit, and False otherwise.\n    '''\n    #n = int(input())\n    #x = int(input())\n    return True if str(n)[-1] == str(x)[-1] else False\ndef sum_of_digits(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the digits in n.\n    '''\n    #n = int(input())\n    return sum(map(int,str(n)))\ndef find_missing_letter(st,a):\n    '''\n    Write a function that takes in a string and a character and returns the index of the missing character in the string.\n    '''\n    #st = input()\n    #a = input()\n    for i in range(len(st)):\n        if st[i]!= a:\n            return i\ndef count_vowels(st):\n    '''\n    Write a function that takes in a string and returns the number of vowels in the string.\n    '''\n    #st = input()\n    return len([i for i in st if i in \"aeiou\"])\ndef is_palindrome(st):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False if it is not.\n    '''\n    #st = input()\n    return st == st[::-1]\ndef is_anagram(st1,st2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams and False if they are not.\n    '''\n    #st1 = input()\n    #st2 = input()\n    return sorted(st1) == sorted(st2)\ndef find_reverse_vowel(st):\n    '''\n    Write a function that takes in a string and returns the index of the reverse vowel in the string.\n    '''\n    #st = input()\n    return [i for i in range(len(st)) if st[i] in \"aeiou\"][-1]\ndef is_prime(n):\n    '''\n    Write a function that takes in an integer n and returns True if n is prime and False if it is not.\n    '''\n    #n = int(input())\n    return True if n > 1 and all(n%i for i in range(2,int(n**0.5)+1)) else False\ndef find_perfect_squares(st):\n    '''\n    Write a function that takes in a string and returns a list containing the indices of all the perfect squares in the string.\n    '''\n    #st = input()\n    return [i for i in range(len(st)) if int(st[i:i+len(st)])**0.5 == int(st[i:i+len(st)])]\ndef find_n_factorial(n,m):\n    '''\n    Write a function that takes in integers n and m and returns m!n.\n    '''\n    #n = int(input())\n    #m = int(input())\n    if n < 0:\n        return \"Error: negative integer\"\n    if m < 0:\n        return \"Error: negative integer\"\n    if n < 1:\n        return \"Error: zero or negative integer\"\n    if m < 1:\n        return \"Error: zero or negative integer\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    if n == 2:\n        return m*m\n    if n == 3:\n        return m*m*m\n    return n*find_n_factorial(n-1,m)\ndef find_nth_term(n,a1,a2):\n    '''\n    Write a function that takes in three integers n, a1, a2 and returns the sum of the first n terms of the sequence 1, 4, 7, 10, 13, 16, 19, 22,...\n    '''\n    #n = int(input())\n    #a1 = int(input())\n    #a2 = int(input())\n    if n < 0:\n        return \"Error: negative integer\"\n    if a1 < 0:\n        return \"Error: negative integer\"\n    if a2 < 0:\n        return \"Error: negative integer\"\n    if n < 1:\n        return \"Error: zero or negative integer\"\n    if a1 > a2:\n        return sum([a1+(i-1)*a2 for i in range(1,n+1)])\n    return sum([a1+(i-1)*a2 for i in range(1,n+1)])\ndef palindrome_permutation(st):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome and False if it is not.\n    '''\n    #st = input()\n    return sum(st.count(i) for i in set(st)) <= len(st)\ndef is_anagram_permutation(st1,st2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False if they are not.\n    '''\n    #st1 = input()\n    #st2 = input()\n    return sorted(st1) == sorted(st2)\ndef sum_to_n(n):\n    '''\n    Write a function that takes in a positive integer n and returns the sum of all the multiples of 3 or 5 below n.\n    '''\n    #n = int(input())\n    return n*(n+1)//2\ndef non_divisible_sum(n):\n    '''\n    Write a function that takes in a positive integer n and returns the sum of all the integers in the range [1, n] that are not divisible by either 3 or 7.\n    '''\n    #n = int(input())\n    return sum([i for i in range(1,n) if i%3 == 0 or i%7 == 0])\ndef all_primes(n):\n    '''\n    Write a function that takes in a positive integer n and returns a list of all the prime numbers that are less than or equal to n.\n    '''\n    #n = int(input())\n    return [i for i in range(1,n) if all(i%j for j in range(2,int(i**0.5)+1))]\ndef is_primitive_root(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is a primitive root of unity and False otherwise.\n    '''\n    #n = int(input())\n    return True if n in [1,n] and all(n%j for j in range(2,int(n**0.5)+1)) else False\ndef nth_prime(n):\n    '''\n    Write a function that takes in a non-negative integer n and returns the nth prime number.\n    '''\n    #n = int(input())\n    if n < 0:\n        return \"Error: non-negative integer\"\n    if n < 2:\n        return 2\n    primes = [2]\n    i = "
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l = heapq.nlargest(n, list1)\n    return l\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # time complexity - O(nlogn)\n    # space complexity - O(n)\n    list1.sort()\n    return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n    #return heapq.nsmallest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    lst1 = list1[:n]\n    lst1.sort(reverse = True)\n    return lst1\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) < n:\n        return list1\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A=pi*r**2+(pi/4)*(r**2)*h\n    print('The lateral surface area of a cylinder with radius ', r,'and height ', h,'is ', A,'sq.m.')\n    return(A)\n    \ndef lateralsurface_conical(r,h):\n    '''\n    Write a function to find the lateral surface area of a conical.\n    '''\n    A=pi*r**2+(pi/4)*(r**2)*h\n    print('The lateral surface area of a conical with radius ', r,'and height ', h,'is ', A,'sq.m.')\n    return(A)\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    A=4*pi*r**2\n    print('The lateral surface area of a sphere with radius ', r,'is ', A,'sq.m.')\n    return(A)\n    \ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus.\n    '''\n    A=2*pi*r**2+(2*pi*r*h)+(2*pi*h**2)\n    print('The lateral surface area of a torus with radius ', r,'and height ', h,'is ', A,'sq.m.')\n    return(A)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*(r**2 + h**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Create a list to store the lateral surface area\n    ls = []\n    # Start the height\n    for i in range(1,h):\n        # Calculate the lateral surface area\n        ls.append(math.pi*r*r*i)\n    # Return the lateral surface area list\n    return ls"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if (r>h):\n        return (pi*r**2)+(pi*r**2*h)-2*(pi*r**2)*(r-h)\n    elif (r<h):\n        return (pi*r**2*h)-2*(pi*r**2)\n    elif (r==h):\n        return pi*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #return 2*pi*r*(h+r)\n    return 2*pi*r*(h+r)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    \n    def lateral_cylinder(r,h):\n        s = 2*math.pi*r*h\n        t = math.pi*(r**2)\n        return s,t\n    \n    return lateral_cylinder(r,h)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi * r**2 * (r+h)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a = pi*r*r\n    b = 2*pi*r*h\n    return a + b\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Note: the function should be named as \"volume_cube\".\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes a radius as an argument and returns the\n    volume of a sphere with that radius. The volume of a sphere is given by\n    4/3 * pi * r**3.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \ndef vol(a, b, c):\n    '''\n    Write a function to find the volume of a cuboid given its side lengths.\n    '''\n    return a * b * c\n    \ndef fact(n):\n    '''\n    Write a function that calculates the factorial of a number.\n    '''\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n    \ndef is_palindrome(string):\n    '''\n    Write a function to determine if a string is a palindrome\n    '''\n    string = string.lower()\n    return string[::-1] == string\n    \ndef is_a_square(n):\n    '''\n    Write a function that returns true if n is a perfect square and false otherwise.\n    '''\n    return n == int(n ** 0.5) ** 2\n    \ndef is_an_isosceles_triangle(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return a == b or a == c or b == c\n    \ndef is_a_right_triangle(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return a**2 + b**2 == c**2\n    \ndef is_a_right_triangle2(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n    \ndef is_a_right_triangle3(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return (a**2 + b**2) == c**2 or (a**2 + c**2) == b**2 or (b**2 + c**2) == a**2\n    \ndef are_right_triangles(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return is_a_right_triangle(a, b, c) or is_a_right_triangle2(a, b, c) or is_a_right_triangle3(a, b, c)\n    \ndef is_a_cube(n):\n    '''\n    Write a function that returns true if n is a perfect cube and false otherwise.\n    '''\n    return n**(1/3) == int(n**(1/3))\n    \ndef is_a_right_triangle4(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n    \ndef is_a_right_triangle5(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or a**2 + c**2 == b**2 or a**2 + b**2 == c**2\n    \ndef is_a_right_triangle6(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2 or a**2 + b**2 == c**2\n    \ndef is_a_right_triangle7(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or a**2 + c**2 == b**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2\n    \ndef is_a_right_triangle8(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or a**2 + c**2 == b**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2\n    \ndef is_a_right_triangle9(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or a**2 + c**2 == b**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2\n    \ndef is_a_right_triangle10(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or a**2 + c**2 == b**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2\n    \ndef is_a_right_triangle11(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or a**2 + c**2 == b**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2\n    \ndef is_a_right_triangle12(a, b, c):\n    '''\n    Write a function that returns true if the sides of a triangle are equal and false otherwise.\n    '''\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or a**2 + c**2 == b**2 or a**2 + b**2 == c**2 or a**2 + b**2 == c**2 or a*"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l, 3)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l, 3)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & (~n+1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & (n - 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit_count = 0\n    for i in range(32):\n        bit_count += (n & 1)\n        n = n >> 1\n    return bit_count\n    \ndef count_bits_set(n):\n    '''\n    Write a python function to count the number of set bits in the given number.\n    '''\n    bit_count = 0\n    while n:\n        bit_count += n & 1\n        n = n >> 1\n    return bit_count\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    number = 0\n    while n:\n        number = (number << 1) | (n & 1)\n        n >>= 1\n    return number\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print (\"Enter a positive integer\")\n    n = int(input())\n    if n < 0:\n        print(\"Enter a positive number\")\n        n = int(input())\n    num = n\n    count = 0\n    while(num):\n        if num & 1 == 0:\n            num = num >> 1\n            count += 1\n        else:\n            num = num >> 1\n            count += 1\n    print (count)\n    return\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    bin_n = str(bin(n))[2:] # Extracting even bits from a number\n    \n    return int(''.join(str(int(not(bool(int(digit))) and int(digit))) for digit in bin_n), 2)\n    \n    \nif __name__ == \"__main__\":\n    print even_bit_set_number(5)"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return ((n >> 1) & 0x55555555)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555 \n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for i in test_list:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for i in range(len(test_list)):\n        if test_list[i] in occurences:\n            occurences[test_list[i]] += 1\n        else:\n            occurences[test_list[i]] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return counts\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    res = dict(Counter(test_list))\n    return res\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for elem in test_list:\n        if elem in result:\n            result[elem] += 1\n        else:\n            result[elem] = 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for i in test_list:\n        if i in test_dict:\n            test_dict[i] = test_dict[i] + 1\n        else:\n            test_dict[i] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for i in test_list:\n        if i in occurences:\n            occurences[i] += 1\n        else:\n            occurences[i] = 1\n    return occurences\ndef freq_check(test_list):\n    '''\n    Write a function that takes in a list of integers and returns a dictionary mapping each unique integer to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for i in test_list:\n        if i in occurences:\n            occurences[i] += 1\n        else:\n            occurences[i] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = Counter(test_list)\n    return result\ndef check_occurences_2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for sublist in test_list:\n        result[tuple(sublist)] = test_list.count(sublist)\n    return result\ndef check_occurences_3(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_4(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_5(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        result[tuple(i)] = test_list.count(i)\n    return result\ndef check_occurences_6(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_7(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_8(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_9(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_10(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_11(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_12(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_13(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_14(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_15(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_16(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_17(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_18(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_19(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_20(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef check_occurences_21(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str) - len(str.replace(\" \", \"\"))\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num_substrings = 0\n    start = 0\n    i = 0\n    for i in range(0, len(str)):\n        if str[i]!= \" \":\n            num_substrings += 1\n        else:\n            i += 1\n            start = i\n            if i < len(str):\n                if str[i] == \" \":\n                    num_substrings += 1\n                else:\n                    break\n    return num_substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return sum(1 for i in str if i!='')\n    \ndef prefix(str):\n    '''\n    Write a python function to get the prefix string from a given string.\n    '''\n    return str[:len(str)]\n    \ndef suffix(str):\n    '''\n    Write a python function to get the suffix string from a given string.\n    '''\n    return str[-len(str):]\n    \ndef is_permutation(str1, str2):\n    '''\n    Write a python function to check if two given strings are permutations of each other.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    return sorted(str1)==sorted(str2)\n    \ndef replace_all(str, old, new):\n    '''\n    Write a python function to replace all old characters with new characters in a string.\n    '''\n    return str.replace(old, new)\n    \ndef is_lower(str):\n    '''\n    Write a python function to check if a given string is lowercase.\n    '''\n    return str.islower()\n    \ndef is_lower_v2(str):\n    '''\n    Write a python function to check if a given string is lowercase.\n    '''\n    return str.lower()==str\n    \ndef is_upper(str):\n    '''\n    Write a python function to check if a given string is uppercase.\n    '''\n    return str.isupper()\n    \ndef is_upper_v2(str):\n    '''\n    Write a python function to check if a given string is uppercase.\n    '''\n    return str.upper()==str\n    \ndef is_alnum(str):\n    '''\n    Write a python function to check if a given string is alphanumeric.\n    '''\n    return str.isalnum()\n    \ndef is_alnum_v2(str):\n    '''\n    Write a python function to check if a given string is alphanumeric.\n    '''\n    return str.isalnum()\n    \ndef is_alpha(str):\n    '''\n    Write a python function to check if a given string is alphabetic.\n    '''\n    return str.isalpha()\n    \ndef is_alpha_v2(str):\n    '''\n    Write a python function to check if a given string is alphabetic.\n    '''\n    return str.isalpha()\n    \ndef is_decimal(str):\n    '''\n    Write a python function to check if a given string is decimal.\n    '''\n    return str.isdecimal()\n    \ndef is_decimal_v2(str):\n    '''\n    Write a python function to check if a given string is decimal.\n    '''\n    return str.isdecimal()\n    \ndef is_digit(str):\n    '''\n    Write a python function to check if a given string is a digit.\n    '''\n    return str.isdigit()\n    \ndef is_digit_v2(str):\n    '''\n    Write a python function to check if a given string is a digit.\n    '''\n    return str.isdigit()\n    \ndef is_space(str):\n    '''\n    Write a python function to check if a given string is a space.\n    '''\n    return str.isspace()\n    \ndef is_space_v2(str):\n    '''\n    Write a python function to check if a given string is a space.\n    '''\n    return str.isspace()\n    \ndef is_title(str):\n    '''\n    Write a python function to check if a given string is a title.\n    '''\n    return str.istitle()\n    \ndef is_title_v2(str):\n    '''\n    Write a python function to check if a given string is a title.\n    '''\n    return str.istitle()\n    \ndef is_lower_end(str):\n    '''\n    Write a python function to check if a given string is lowercase at the end.\n    '''\n    return str[-1].islower()\n    \ndef is_lower_end_v2(str):\n    '''\n    Write a python function to check if a given string is lowercase at the end.\n    '''\n    return str[-1].islower()\n    \ndef is_upper_end(str):\n    '''\n    Write a python function to check if a given string is uppercase at the end.\n    '''\n    return str[-1].isupper()\n    \ndef is_upper_end_v2(str):\n    '''\n    Write a python function to check if a given string is uppercase at the end.\n    '''\n    return str[-1].isupper()\n    \ndef is_space_end(str):\n    '''\n    Write a python function to check if a given string is a space at the end.\n    '''\n    return str[-1].isspace()\n    \ndef is_space_end_v2(str):\n    '''\n    Write a python function to check if a given string is a space at the end.\n    '''\n    return str[-1].isspace()\n    \ndef is_white_space(str):\n    '''\n    Write a python function to check if a given string is a white space.\n    '''\n    return str.isspace()\n    \ndef is_white_space_v2(str):\n    '''\n    Write a python function to check if a given string is a white space.\n    '''\n    return str.isspace()\n    \ndef is_number(str):\n    '''\n    Write a python function to check if a given string is a number.\n    '''\n    return str.isnumeric()\n    \ndef is_number_v2(str):\n    '''\n    Write a python function to check if a given string is a number.\n    '''\n    return str.isnumeric()\n    \ndef is_spaces(str):\n    '''\n    Write a python function to check if a given string is a whitespace.\n    '''\n    return str.isspace()\n    \ndef is_spaces_v2(str):\n    '''\n    Write a python function to check if a given string is a whitespace.\n    '''\n    return str.isspace()\n    \ndef is_word(str):\n    '''\n    Write a python function to check if a given string is a word.\n    '''\n    return str.isalpha()\n    \ndef is_word_v2(str):\n    '''\n    Write a python function to check if a given string is a word.\n    '''\n    return str.isalpha()\n    \ndef is_lowercase_word(str):\n    '''\n    Write a python function to check if a given string is a lowercase word.\n    '''\n    return str.islower()\n    \ndef is_lowercase_word_v2(str):\n    '''\n    Write a python function to check if a given string is a lowercase word.\n    '''\n    return str.islower()\n    \ndef is_uppercase_word(str):\n    '''\n    Write a python function to check if a given string is uppercase word.\n    '''\n    return str.isupper()\n    \ndef is_uppercase_word_v2(str):\n    '''\n    Write a python function to check if a given string is uppercase word.\n    '''\n    return str.isupper()\n    \ndef is_white_space_word(str):\n    '''\n    Write a python function to check if a given string is a white space word.\n    '''\n    return str.isspace()\n    \ndef is_white_space_word_v2(str):\n    '''\n    Write a python function to check if a given string is a white space word.\n    '''\n    return str.isspace()\n    \ndef is_title_word(str):\n    '''\n    Write a python function to check if a given string is a title word.\n    '''\n    return str.istitle()\n    \ndef is_title_word_v2(str):\n    '''\n    Write a python function to check if a given string is a title word.\n    '''\n    return str.istitle()\n    \ndef is_punctuation(str)"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            sub = str[i:j + 1]\n            if len(sub) > 0:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                count += 1\n            else:\n                break\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    dic = {}\n    for i in range(len(str)):\n        if str[i] not in dic:\n            dic[str[i]] = 0\n        dic[str[i]] += 1\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        count += sum(1 for j in range(i+1,len(str)+1) if len(str[j-i:j]) > 0)\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # all substrings of a string\n    str_list = [str[i:j+1] for i in range(len(str)) for j in range(i,len(str))]\n    # count the number of substrings\n    return len([x for x in str_list if len(x) > 0])\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(str):\n        j = i + 1\n        while j < len(str) and str[j]!= \" \":\n            j += 1\n        count += (j - i)\n        i = j\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str)==0:\n        return 0\n    count=0\n    start=0\n    end=len(str)\n    while start<end:\n        count+=1\n        if str[start]!=' ':\n            break\n        start+=1\n    while end>0:\n        count+=1\n        if str[end-1]!=' ':\n            break\n        end-=1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0:\n        return 1\n    elif m < 0:\n        return 0\n    elif m < n:\n        return 0\n    else:\n        return (get_total_number_of_sequences(m-2,n) + get_total_number_of_sequences(m-3,n) + get_total_number_of_sequences(m-4,n))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    combinations = 1\n    for i in range(n,0,-1):\n        combinations *= m-i+1\n    return combinations\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0: \n        return 0\n    if m < n: \n        return 0\n    else:\n        return m**n\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return m\n    return get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m - n, n - 2)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    result = []\n    if m < n:\n        return result\n    elif m == n:\n        result = [n]\n    else:\n        for i in range(n+1):\n            result.append(0)\n        result[0] = 1\n        result[1] = 1\n        result[2] = 1\n        for i in range(3,m+1):\n            result[i] = result[i-1] + result[i-2]\n    return result[m]\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # base case: \n    if n == 1:\n        return 1\n    elif n == 2:\n        return m\n    elif n == 3:\n        return m*(m+1)\n    else:\n        return m*(m+1) + get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0:\n        return 0\n    if n == 0:\n        return 1\n    return get_total_number_of_sequences(m-1,n) + get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(m):\n        total += count_elements_greater_than_double_or_equal_to(i,n)\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(m**n/2)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 1:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m - 1, n - 1)\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # for i in range(len(list1)):\n    #     if type(list1[i])==list:\n    #         list1[i]=replace_list(list1[i],list2)\n    # return list1\n    return [list2 if type(i)==list else i for i in list1]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        list1[-1] = list2\n        return list1\n    else:\n        return \"lists are not the same length\"\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    length1=len(list1)\n    length2=len(list2)\n    if length1!= length2:\n        return \"the two lists are not of the same length\"\n    else:\n        list1[length1-1]=list2\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    for i in range(len(list2)):\n        list1[-1]=list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list1)-1]+list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return [list1[i] for i in range(len(list1)-1)] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > len(list2):\n        list1[-1] = list2\n    else:\n        list2[-1] = list1\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Your code here\n    return list1[:-1] + list2\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    chars = 0\n    for char in str1:\n        chars += 1\n    return chars\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charc = 0\n    for i in range(len(str1)):\n        charc += 1\n    return charc\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if str1=='':\n        return 0\n    else:\n        return 1+count_charac(str1[1:])\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for c in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    i = 0\n    for n in str1:\n        i = i + 1\n    return i\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac_count = {}\n    for i in str1:\n        if i in charac_count.keys():\n            charac_count[i] += 1\n        else:\n            charac_count[i] = 1\n    return charac_count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.ceil(math.sqrt(N))\n    for i in range(root, N + 1):\n        if (i * i == N):\n            return i * i\ndef prob3():\n    '''\n    Problem 3\n    Write a python function to find the minimum number of coins required to make change for any amount.\n    '''\n    coins = [1, 2, 5, 10, 20, 50, 100, 500, 1000]\n    def change(total):\n        min_coins = total\n        for i in coins:\n            if i <= total:\n                temp = change(total - i)\n                if temp + 1 < min_coins:\n                    min_coins = temp + 1\n        return min_coins\n    print (change(63))\n    print (change(63.5))\n    print (change(63.6))\ndef coin_change(coins, target):\n    '''\n    Write a python function to find the minimum number of coins required to make change for any amount.\n    '''\n    num_coins = 0\n    for i in coins:\n        if i <= target:\n            num_coins += 1\n            target -= i\n    if target > 0:\n        num_coins = -1\n    return num_coins\ndef prob4():\n    '''\n    Problem 4\n    Write a python function to find the number of ways to make change for any amount.\n    '''\n    coins = [1, 2, 5, 10, 20, 50, 100, 500, 1000]\n    def change(total):\n        if total == 0:\n            return 1\n        num_coins = 0\n        for i in coins:\n            if i <= total:\n                num_coins += change(total - i)\n        return num_coins\n    print (change(63))\n    print (change(63.5))\n    print (change(63.6))\ndef prob5():\n    '''\n    Problem 5\n    Write a python function to find the maximum of two numbers\n    '''\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    def maximum(a, b):\n        if a >= b:\n            return a\n        else:\n            return b\n    print (maximum(a, b))\ndef prob6():\n    '''\n    Problem 6\n    Write a python function to find the minimum of two numbers\n    '''\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    def minimum(a, b):\n        if a <= b:\n            return a\n        else:\n            return b\n    print (minimum(a, b))\ndef prob7():\n    '''\n    Problem 7\n    Write a python function to find the average of two numbers\n    '''\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    def average(a, b):\n        return ((a + b) / 2)\n    print (average(a, b))\ndef prob8():\n    '''\n    Problem 8\n    Write a python function to find the number of days in a given month\n    '''\n    month = input(\"Enter the name of the month: \")\n    if month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\n        print (\"31 days\")\n    elif month == \"February\":\n        print (\"28 days\")\n    elif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n        print (\"30 days\")\n    else:\n        print (\"31 days\")\ndef prob9():\n    '''\n    Problem 9\n    Write a python function to find the number of days in a given year\n    '''\n    year = input(\"Enter the year: \")\n    if year % 4 == 0:\n        print (\"366 days\")\n    elif year % 400 == 0:\n        print (\"366 days\")\n    elif year % 100 == 0:\n        print (\"365 days\")\n    else:\n        print (\"365 days\")\ndef prob10():\n    '''\n    Problem 10\n    Write a python function to find the number of days in a given year\n    '''\n    year = input(\"Enter the year: \")\n    if year % 4 == 0:\n        print (\"366 days\")\n    elif year % 400 == 0:\n        print (\"366 days\")\n    elif year % 100 == 0:\n        print (\"365 days\")\n    else:\n        print (\"365 days\")\ndef prob11():\n    '''\n    Problem 11\n    Write a python function to find the sum of all the multiples of 3 or 5 below the number passed in\n    '''\n    def sum_of_multiples(n):\n        return ((n - 1) * (n + 1)) / 2\n    n = int(input(\"Enter the number: \"))\n    print (sum_of_multiples(n))\ndef prob12():\n    '''\n    Problem 12\n    Write a python function to find the sum of all the multiples of 3 or 5 below the number passed in\n    '''\n    def sum_of_multiples(n):\n        sum = 0\n        for i in range(1, n):\n            if (i % 3 == 0 or i % 5 == 0):\n                sum += i\n        return sum\n    n = int(input(\"Enter the number: \"))\n    print (sum_of_multiples(n))\ndef prob13():\n    '''\n    Problem 13\n    Write a python function to find the sum of all the multiples of 3 or 5 below the number passed in\n    '''\n    def sum_of_multiples(n):\n        sum = 0\n        for i in range(1, n):\n            if (i % 3 == 0 or i % 5 == 0):\n                sum += i\n        return sum\n    n = int(input(\"Enter the number: \"))\n    print (sum_of_multiples(n))\ndef prob14():\n    '''\n    Problem 14\n    Write a python function to find the sum of all the multiples of 3 or 5 below the number passed in\n    '''\n    def sum_of_multiples(n):\n        sum = 0\n        for i in range(1, n):\n            if (i % 3 == 0 or i % 5 == 0):\n                sum += i\n        return sum\n    n = int(input(\"Enter the number: \"))\n    print (sum_of_multiples(n))\ndef prob15():\n    '''\n    Problem 15\n    Write a python function to find the sum of all the multiples of 3 or 5 below the number passed in\n    '''\n    def sum_of_multiples(n):\n        sum = 0\n        for i in range(1, n):\n            if (i % 3 == 0 or i % 5 == 0):\n                sum += i\n        return sum\n    n = int(input(\"Enter the number: \"))\n    print (sum_of_multiples(n))\ndef prob16():\n    '''\n    Problem 16\n    Write a python function to find the sum of all the multiples of 3 or 5 below the number passed in\n    '''\n    def sum_of_multiples(n):\n        sum = 0\n        for i in range(1, n):\n            if (i % 3 == 0 or i % 5 == 0):\n                sum += i\n        return sum\n    n = int(input(\"Enter the number: \"))\n    print (sum_of_multiples(n))\ndef prob17():\n    '''\n    Problem 17\n    Write a python function to find the sum of all the multiples of 3 or 5 below the number passed in\n    '''\n    def sum_of_multiples(n):\n        sum = 0\n        for i in range(1, n):\n            if (i % 3 == 0 or i % 5 == 0):\n                sum += i\n        return sum\n    n = int(input(\"Enter the number: \"))\n    print (sum_of_multiples(n))\ndef prob18():\n    '''\n    Problem 18\n    Write a python function to find the sum of all the multiples of 3 or 5 below the number passed in\n    '''\n    def sum_of_multiples(n):\n        sum = 0\n        for i in range(1, n):\n            if (i % 3 == 0 or i % 5 == 0):\n                sum += i\n        return sum\n    n = in"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    import math\n    x = int(math.sqrt(N))\n    x1 = x + 1\n    while x1 * x1!= N:\n        x = x1\n        x1 = x + 1\n    return x1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.ceil(math.sqrt(N))) \n    return x*x \ndef Next_Perfect_Square_In_List(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number in a list.\n    '''\n    for i in range(len(N)-1,-1,-1):\n        if N[i] > N[i-1]:\n            for j in range(i-1,-1,-1):\n                if N[j] < N[i]:\n                    N[j],N[i] = N[i],N[j]\n                    return N[:i+1]\ndef Test_Next_Perfect_Square_In_List():\n    assert(Next_Perfect_Square_In_List([1,2,3,4,5]) == [1,2,3,4,5])\n    assert(Next_Perfect_Square_In_List([1,2,3,4,5,6]) == [1,2,3,4,5,6])\n    assert(Next_Perfect_Square_In_List([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7])\n    assert(Next_Perfect_Square_In_List([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9])\n    assert(Next_Perfect_Square_In_List([1,2,3,4,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11])\n    assert(Next_Perfect_Square_In_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n    print(\"Next_Perfect_Square_In_List_Tests Passed!\")\ndef fib(n):\n    '''\n    Write a python function to return the nth value of the fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\ndef Test_fib():\n    assert(fib(0) == 0)\n    assert(fib(1) == 1)\n    assert(fib(2) == 1)\n    assert(fib(3) == 2)\n    assert(fib(4) == 3)\n    assert(fib(5) == 5)\n    assert(fib(6) == 8)\n    assert(fib(7) == 13)\n    assert(fib(8) == 21)\n    print(\"fib_Tests Passed!\")\ndef _is_Prime_Number(N):\n    '''\n    Write a python function to check if a number is a Prime Number or not.\n    '''\n    if N == 2:\n        return True\n    elif N == 3:\n        return True\n    elif N == 5:\n        return True\n    elif N == 7:\n        return True\n    elif N%2 == 0:\n        return False\n    elif N%3 == 0:\n        return False\n    elif N%5 == 0:\n        return False\n    elif N%7 == 0:\n        return False\n    else:\n        for i in range(2,N):\n            if N%i == 0:\n                return False\n        return True\ndef is_Prime_Number(N):\n    '''\n    Write a python function to check if a number is a Prime Number or not.\n    '''\n    if N <= 2:\n        return False\n    if N <= 3:\n        return True\n    elif N%2 == 0:\n        return False\n    elif N%3 == 0:\n        return False\n    else:\n        for i in range(5,N):\n            if N%i == 0:\n                return False\n        return True\ndef Test_is_Prime_Number():\n    assert(is_Prime_Number(1) == False)\n    assert(is_Prime_Number(2) == True)\n    assert(is_Prime_Number(3) == True)\n    assert(is_Prime_Number(5) == True)\n    assert(is_Prime_Number(7) == True)\n    assert(is_Prime_Number(11) == False)\n    assert(is_Prime_Number(13) == False)\n    assert(is_Prime_Number(17) == False)\n    assert(is_Prime_Number(19) == False)\n    assert(is_Prime_Number(29) == True)\n    assert(is_Prime_Number(31) == False)\n    assert(is_Prime_Number(37) == True)\n    print(\"is_Prime_Number_Tests Passed!\")\ndef _get_Prime_Factors(N):\n    '''\n    Write a python function to return the prime factors of a number.\n    '''\n    if N <= 1:\n        return []\n    else:\n        for i in range(2,N):\n            if N%i == 0:\n                return [i] + _get_Prime_Factors(N/i)\n        return [N]\ndef get_Prime_Factors(N):\n    '''\n    Write a python function to return the prime factors of a number.\n    '''\n    if N <= 1:\n        return []\n    else:\n        for i in range(2,N):\n            if N%i == 0:\n                return [i] + get_Prime_Factors(N/i)\n        return [N]\ndef Test_get_Prime_Factors():\n    assert(get_Prime_Factors(1) == [])\n    assert(get_Prime_Factors(2) == [2])\n    assert(get_Prime_Factors(3) == [3])\n    assert(get_Prime_Factors(4) == [2,2])\n    assert(get_Prime_Factors(5) == [5])\n    assert(get_Prime_Factors(6) == [2,3])\n    assert(get_Prime_Factors(7) == [7])\n    assert(get_Prime_Factors(11) == [11])\n    assert(get_Prime_Factors(13) == [13])\n    assert(get_Prime_Factors(17) == [17])\n    assert(get_Prime_Factors(19) == [19])\n    assert(get_Prime_Factors(29) == [29])\n    assert(get_Prime_Factors(31) == [31])\n    assert(get_Prime_Factors(37) == [37])\n    assert(get_Prime_Factors(41) == [41])\n    print(\"get_Prime_Factors_Tests Passed!\")\ndef _is_Perfect_Number(N):\n    '''\n    Write a python function to check if a number is a Perfect Number or not.\n    '''\n    Sum = 0\n    for i in range(1,N):\n        if N%i == 0:\n            Sum+=i\n    if Sum == N:\n        return True\n    else:\n        return False\ndef is_Perfect_Number(N):\n    '''\n    Write a python function to check if a number is a Perfect Number or not.\n    '''\n    if N <= 2:\n        return False\n    if _is_Perfect_Number(N) == True:\n        return True\n    else:\n        return False\ndef Test_is_Perfect_Number():\n    assert(is_Perfect_Number(1) == False)\n    assert(is_Perfect_Number(6) == True)\n    assert(is_Perfect_Number(28) == True)\n    assert(is_Perfect_Number(36) == True)\n    assert(is_Perfect_Number(100) == False)\n    assert(is_Perfect_Number(114) == True)\n    assert(is_Perfect_Number(2884) == True)\n    assert(is_Perfect_Number(3628) == False)\n    print(\"is_Perfect_Number_Tests Passed!\")\ndef _get_Factors_of_Number("
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    a = int(math.sqrt(N))\n    b = a+1\n    while b*b <= N:\n        a = b\n        b = b+1\n    return a*a\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    while i*i <= N:\n        i += 1\n    return i*i\ndef spiralize_matrix(R,C,arr):\n    '''\n    Write a python function to spiralize a matrix\n    '''\n    if R == 1:\n        return arr[0]\n    if C == 1:\n        return arr\n    elif R == C:\n        return arr[::-1]\n    else:\n        res = []\n        res.append(arr[0])\n        for i in range(1,R):\n            res.append(arr[i][C-1])\n        res.append(arr[R-1][::-1])\n        for i in range(R-2,0,-1):\n            res.append(arr[i][0])\n        return res\n    return res\ndef get_N_choose_k(N,k):\n    '''\n    Write a python function to get N choose k\n    '''\n    return int(math.factorial(N) / (math.factorial(k) * math.factorial(N-k)))\ndef get_pow_series(n,x):\n    '''\n    Write a python function to get the powers series upto n terms\n    '''\n    res = []\n    temp = 1\n    for i in range(0,n):\n        res.append(temp)\n        temp = temp*x\n    return res\ndef rotate_matrix(arr):\n    '''\n    Write a python function to rotate a matrix by 90 degrees\n    '''\n    R,C = len(arr), len(arr[0])\n    temp = [[0 for _ in range(R)] for _ in range(C)]\n    for i in range(0,R):\n        for j in range(0,C):\n            temp[i][j] = arr[R-j-1][i]\n    return temp\ndef is_palindrome(N):\n    '''\n    Write a python function to check whether a number is a palindrome or not\n    '''\n    if str(N)[::-1] == str(N):\n        return True\n    else:\n        return False\ndef check_if_form_a_palindrome(N):\n    '''\n    Write a python function to check if the number is a palindrome or not\n    '''\n    if len(str(N)) > 2:\n        return False\n    elif N == int(str(N)[::-1]):\n        return True\n    return False\ndef move_zeroes(arr):\n    '''\n    Write a python function to move zeroes to the end of array\n    '''\n    if arr[0]!= 0:\n        return arr\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == 0:\n            arr.pop(i)\n            arr.append(0)\n    return arr\ndef get_matrix_of_1s(R,C,arr):\n    '''\n    Write a python function to get a matrix of 1s\n    '''\n    res = []\n    for i in range(R):\n        res.append([])\n        for j in range(C):\n            res[i].append(1)\n    return res\ndef get_probability_of_a_number_to_be_divisible_by_3(N):\n    '''\n    Write a python function to get the probability of a number to be divisible by 3\n    '''\n    arr = [1,3,7,9]\n    res = 0\n    for i in range(0,len(arr)):\n        if N % arr[i] == 0:\n            res += 1\n    return res/len(arr)\ndef get_number_of_rotations(N):\n    '''\n    Write a python function to get number of rotations of a number\n    '''\n    if N == 0:\n        return 0\n    elif N < 0:\n        return -1\n    return int(math.ceil(math.log(N,10)))\ndef reverse_string_in_place(arr):\n    '''\n    Write a python function to reverse the string in place\n    '''\n    left,right = 0,len(arr)-1\n    while left<right:\n        arr[left],arr[right] = arr[right],arr[left]\n        left += 1\n        right -= 1\ndef rotate_2d_matrix(arr):\n    '''\n    Write a python function to rotate a 2d matrix\n    '''\n    R,C = len(arr),len(arr[0])\n    res = [[0 for _ in range(R)] for _ in range(C)]\n    for i in range(R):\n        for j in range(C):\n            res[i][j] = arr[C-1-j][i]\n    return res\ndef spiralize_matrix_1d(R,C,arr):\n    '''\n    Write a python function to spiralize a matrix\n    '''\n    if R == 1:\n        return arr[0]\n    if C == 1:\n        return arr\n    elif R == C:\n        return arr[::-1]\n    else:\n        res = []\n        res.append(arr[0])\n        for i in range(1,R):\n            res.append(arr[i][C-1])\n        res.append(arr[R-1][::-1])\n        for i in range(R-2,0,-1):\n            res.append(arr[i][0])\n        return res\n    return res\ndef number_of_1_bits(N):\n    '''\n    Write a python function to get the number of 1 bits in a number\n    '''\n    count = 0\n    while N:\n        if N%2:\n            count += 1\n        N = N/2\n    return count\ndef merge_the_tools(string, k):\n    '''\n    Write a python function to merge the tools\n    '''\n    res = []\n    for i in range(0,len(string),k):\n        substring = string[i:i+k]\n        seen = set()\n        for j in range(len(substring)):\n            if substring[j] not in seen:\n                res.append(substring[j])\n                seen.add(substring[j])\n    return res\ndef substrings(s):\n    '''\n    Write a python function to get substrings of a string\n    '''\n    res = []\n    for i in range(0,len(s)+1):\n        for j in range(i+1,len(s)+1):\n            res.append(s[i:j])\n    return res\ndef generate_all_strings(N):\n    '''\n    Write a python function to get all the strings of length N\n    '''\n    return [''.join(i) for i in itertools.product(\"01\", repeat = N)]\ndef get_all_substrings_from_string(string):\n    '''\n    Write a python function to get all the substrings from a string\n    '''\n    res = []\n    for i in range(0,len(string)):\n        for j in range(i,len(string)):\n            res.append(string[i:j+1])\n    return res\ndef count_and_say(n):\n    '''\n    Write a python function to count and say\n    '''\n    def count_and_say_helper(n, res):\n        if len(res) == 1:\n            return res\n        cnt = 1\n        prev = res[0]\n        for i in range(1,len(res)):\n            if res[i]!= prev:\n                res[i-1] = str(cnt)+prev\n                prev = res[i]\n                cnt = 1\n            else:\n                cnt += 1\n        return count_and_say_helper(n-1, res)\n    res = []\n    res.append(\"1\")\n    for i in range(1,n):\n        res.append(\"\")\n        for j in range(len(res[i-1])):\n            res[i] = res[i]+str(len(res[i-1])-j)\n    return res[n-1]\ndef find_intersection(A,B):\n    '''\n    Write a python function to find the intersection of 2 sorted arrays\n    '''\n    "
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    root += 1\n    for i in xrange(root,N+1):\n        if i**2 == N:\n            return i\n            break\n        elif i**2 > N:\n            return i-1\n            break\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    #ceiling function is math.ceil()\n    #if the given number is a perfect square, then return the number\n    if math.ceil(math.sqrt(N)) == math.sqrt(N):\n        return math.ceil(math.sqrt(N))\n    #else return the smallest perfect square greater than the given number\n    else:\n        return math.ceil(math.sqrt(N)) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    L = math.ceil(math.sqrt(N))\n    while L * L <= N:\n        L = L + 1\n    return L * L\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    increasing, decreasing = True, True\n    left, right = 0, len(arr) - 1\n    maximum = 0\n    while left < right:\n        if increasing:\n            maximum = max(maximum, arr[left] + arr[right])\n            left += 1\n            increasing = False\n        elif decreasing:\n            maximum = max(maximum, arr[left] + arr[right])\n            right -= 1\n            decreasing = False\n        else:\n            left += 1\n            right -= 1\n    return maximum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    first = 0\n    last = len(arr) - 1\n    max_sum = 0\n    while first < last:\n        if arr[first] < arr[last]:\n            max_sum = max(max_sum, arr[last] + arr[first])\n            last -= 1\n        else:\n            max_sum = max(max_sum, arr[first] + arr[last])\n            first += 1\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    bitonic_arr = []\n    i = 1\n    j = len(arr) - 1\n    bitonic_arr.append(arr[0])\n    bitonic_arr.append(arr[-1])\n    max_sum = 0\n    while i < j:\n        if arr[i] > arr[i+1]:\n            bitonic_arr.append(arr[i+1])\n            i+=1\n        else:\n            bitonic_arr.append(arr[i])\n            i+=1\n        if arr[j] > arr[j-1]:\n            bitonic_arr.append(arr[j-1])\n            j-=1\n        else:\n            bitonic_arr.append(arr[j])\n            j-=1\n        max_sum = max(sum(bitonic_arr), max_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    left, right = 0, len(arr) - 1\n    best = float('-inf')\n    while left < right:\n        if arr[left] < arr[right]:\n            best = max(best, arr[left] + arr[right])\n            left += 1\n        else:\n            best = max(best, arr[right] + arr[left])\n            right -= 1\n    return best\n    \nprint max_sum([1, 2, 3, 12, -5, 6, 7, 8, 9, 10, -1, 2, 4, 3, 1])"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    best = 0\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        left_sum = arr[mid]\n        left_index = mid - 1\n        while left_index >= 0 and arr[left_index] > left_sum:\n            left_sum += arr[left_index]\n            left_index -= 1\n        right_sum = arr[mid]\n        right_index = mid + 1\n        while right_index < len(arr) and arr[right_index] > right_sum:\n            right_sum += arr[right_index]\n            right_index += 1\n        if left_sum > right_sum:\n            end = mid - 1\n        else:\n            best = max(best, left_sum + right_sum)\n            start = mid + 1\n    return best\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return -1\n    start = 0\n    end = 0\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            end = i\n            result = max(result, arr[i])\n        else:\n            start = i\n            result = max(result, arr[i] + max_sum(arr[start:end+1]))\n    return result\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    left = [arr[0]] + [0] * (n - 1)\n    right = [0] * (n - 1) + [arr[-1]]\n    \n    for i in range(1, n):\n        left[i] = max(left[i-1], arr[i])\n        \n    for i in range(n-2, -1, -1):\n        right[i] = max(right[i+1], arr[i])\n    \n    res = 0\n    for i in range(n):\n        res = max(res, left[i] + right[i])\n    return res\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        curr = 0\n        for j in range(i, -1, -1):\n            curr = max(curr, arr[j])\n            max_sum = max(max_sum, curr)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if i == 0:\n            max_sum = curr_sum\n        elif curr_sum < 0:\n            curr_sum = 0\n        else:\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    dp = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i-1] < arr[i]:\n            dp.append(arr[i])\n        else:\n            dp.append(arr[i-1])\n    return max(dp)\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number/2\n    while abs(approx**2 - number) > 0.0000001:\n        approx = (approx + number/approx)/2\n    return approx\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while guess*guess!= number:\n        if guess*guess > number:\n            guess = (guess + number/guess) / 2\n        else:\n            guess = (guess + number/guess) / 2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 0:\n        raise ValueError, \"number must be positive\"\n    guess = 1\n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + (number / guess)) / 2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #first, we define the default recursion limit to 10000\n    sys.setrecursionlimit(10000)\n    #we then define a recursive function for the babylonian squareroot\n    def babylonian_sqrt(number, prev_guess, iterations=20):\n        '''\n        This function takes a number and two other parameters: a previous guess for the square root,\n        and the number of iterations to use. The default value of iterations is set to 20.\n        '''\n        #we then define a local variable for the current guess\n        current_guess = 0\n        #we then define a variable for a while loop that will run until we either have guessed the\n        #correct answer, or until we have exceeded the number of iterations\n        while abs(current_guess ** 2 - number) > 0.001 and iterations > 0:\n            #we then define a local variable for the previous guess\n            prev_guess = current_guess\n            #we then define a local variable for the current guess\n            current_guess = (prev_guess + number / prev_guess) / 2\n            #we then subtract one iteration from the number of iterations\n            iterations -= 1\n        #we then return the current guess\n        return current_guess\n    #we then return the function\n    return babylonian_sqrt(number, 0)\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    number = float(number)\n    if number <= 0:\n        raise ValueError('Number must be positive')\n    \n    x = number / 2\n    while abs(x * x - number) >= 0.0000000001:\n        x = (x + number / x) / 2\n    \n    return x\n    "
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('The babylonian square root of a negative number does not exist!')\n    elif number == 0:\n        return 0\n    guess = number / 2\n    while abs(guess ** 2 - number) > 0.001:\n        guess = (guess + (number / guess)) / 2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Define a list for storing the intermediate results.\n    babylonian_list = []\n    # Define a variable for the number to be squared.\n    number_squared = number * number\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    assert isinstance(number, int)\n    \n    def sqrt_func(guess):\n        '''\n        The function that the babylonian method uses for computing square roots.\n        '''\n        diff = abs(guess*guess - number)\n        return guess - (guess*guess - number)/(2*diff)\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = 0\n    while x - y*y > 0.0000001:\n        x = (x + y*y) / (2*y)\n        y = (x + y*y) / (2*y)\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    else:\n        iteration_limit = int(number ** 0.5)\n        n = 1\n        while n <= iteration_limit:\n            x = (n + number / n) / 2\n            n += 1\n        return x\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 1\n    lps = [[0 for i in range(len(str))] for j in range(len(str))]\n    maxLPS = 0\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for x in xrange(n)] for x in xrange(n)] \n    for i in range(n): \n        for j in range(i,n): \n            if (i == j): \n                dp[i][j] = 1\n            elif (str[i] == str[j]): \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # n = len(str)\n    # dp = [[0 for i in range(n)] for j in range(n)]\n    # for i in range(n):\n    #     dp[i][i] = 1\n    # for s in range(n-1):\n    #     if str[s] == str[s+1]:\n    #         dp[s][s+1] = 2\n    # for k in range(3,n+1):\n    #     for i in range(n-k+1):\n    #         j = i+k-1\n    #         if str[i] == str[j] and k > 2:\n    #             dp[i][j] = dp[i+1][j-1] + 2\n    #         elif str[i] == str[j]:\n    #             dp[i][j] = dp[i+1][j-1] + 1\n    # m = 0\n    # for i in range(n):\n    #     for j in range(n):\n    #         if dp[i][j] > m:\n    #             m = dp[i][j]\n    # return m\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n    \n    table = [[0 for i in range(len(str))] for j in range(len(str))]\n    for i in range(len(str)):\n        table[i][i] = 1\n    \n    maxLen = 1\n    start = 0\n    for l in range(2, len(str)+1):\n        for i in range(0, len(str)-l+1):\n            j = i+l-1\n            if str[i] == str[j] and l == 2:\n                table[i][j] = 2\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n            if table[i][j] > maxLen:\n                maxLen = table[i][j]\n                start = i\n    return str[start:start+maxLen]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    '''\n    return lps_memo(str, 0, len(str)-1)\n    '''\n    return lps_dp(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    n = len(str)\n    \n    T = [[0 for x in range(n)] for x in range(n)]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return lpsrec(str, 0, len(str)-1)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for i in xrange(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 1\n    for l in xrange(3,n+1):\n        for i in xrange(n-l+1):\n            j = i+l-1\n            if str[i] == str[j] and l == 3:\n                dp[i][j] = 1\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    max_lps = 0\n    start = 0\n    for i in range(n): \n        for j in range(i,n):\n            if (str[i] == str[j]):\n                if (j-i == 1) or (dp[i+1][j-1] == 1):\n                    dp[i][j] = 1\n                    if max_lps < j-i+1:\n                        max_lps = j-i+1\n                        start = i\n            else:\n                dp[i][j] = 0\n    return max_lps,start\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n    dp = [[0]*len(str) for i in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = 1\n    for end in range(1,len(str)):\n        for begin in range(0,end):\n            if str[begin] == str[end]:\n                if end - begin == 1 or dp[begin + 1][end-1] == 1:\n                    dp[begin][end] = 2\n                else:\n                    dp[begin][end] = max(dp[begin+1][end],dp[begin][end-1])\n            else:\n                dp[begin][end] = max(dp[begin+1][end],dp[begin][end-1])\n    return dp[0][-1]\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    return 1 + harmonic_sum(n - 1)\n    \ndef harmonic_sum_rec(n):\n    if n == 0:\n        return 0\n    return n + 1 / n\n    \ndef main():\n    import math\n    n = int(input(\"Enter an integer: \").strip())\n    print(harmonic_sum_rec(n))\n    print(harmonic_sum(n))\n    print(math.log(harmonic_sum(n), 10))\n    print(math.log(harmonic_sum_rec(n), 10))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n    \n    # if n == 1:\n    #     return 1\n    # else:\n    #     return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + (n - 1) / n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1.0\n    else:\n        return 1 / n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n\n    # Note that the harmonic sum is not the same as the arithmetic mean.\n    # The difference between the arithmetic mean and the harmonic sum is that\n    # the harmonic sum is a generalized version of the arithmetic mean.\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + n*harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # The harmonic sum is just the sum of 1/i for i in 1 to n\n    # The sum of i for i = 1 to n is (1/i)*(1+1/2+1/3+....)\n    # So the sum of n-1 is (1/n)*(n/n+1/2+n/3+....)\n    # So we do n/n+1 + n/3 + n/5 +....\n    # The algorithm is simple, since we know that each of the n-1 terms is just a constant.\n    # Also note that the terms are in decreasing order, so we can simply add the terms.\n    # Also the sum of n-1 is the sum of i for i = 1 to n-1\n    # We know that the sum of i for i = 1 to n is the sum of i for i = 1 to n-1\n    # Sum of i for i = 1 to n = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The sum of i for i = 1 to n-1 = Sum of i for i = 1 to n-1\n    # The su"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result=[]\n    for num in array_nums1:\n        if num in array_nums2:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    for i in array_nums1:\n        for j in array_nums2:\n            if i == j and i not in res:\n                res.append(i)\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) == 0 or len(array_nums2) == 0:\n        return []\n    array_nums1.sort()\n    array_nums2.sort()\n    nums1_length = len(array_nums1)\n    nums2_length = len(array_nums2)\n    common_nums = []\n    array_index = 0\n    array_num = array_nums1[array_index]\n    array_index2 = 0\n    while array_num <= array_nums2[array_index2]:\n        if array_num == array_nums2[array_index2]:\n            common_nums.append(array_num)\n            array_index2 += 1\n        elif array_num > array_nums2[array_index2]:\n            array_index += 1\n            if array_index == nums1_length:\n                break\n            array_num = array_nums1[array_index]\n    return common_nums\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = sorted(array_nums1)\n    nums2 = sorted(array_nums2)\n    nums3 = []\n    i = j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            i += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            nums3.append(nums1[i])\n            i += 1\n            j += 1\n    return nums3\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1,nums2 = set(array_nums1),set(array_nums2)\n    return list(nums1&nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i = 0\n    j = 0\n    intersection = []\n    if len(array_nums1) > len(array_nums2):\n        for num in array_nums1:\n            if array_nums2.count(num) > 0:\n                intersection.append(num)\n                array_nums2.remove(num)\n            else:\n                i += 1\n    elif len(array_nums1) < len(array_nums2):\n        for num in array_nums2:\n            if array_nums1.count(num) > 0:\n                intersection.append(num)\n                array_nums1.remove(num)\n            else:\n                j += 1\n    else:\n        for num in array_nums1:\n            if array_nums2.count(num) > 0:\n                intersection.append(num)\n                array_nums1.remove(num)\n                array_nums2.remove(num)\n            else:\n                i += 1\n                j += 1\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = [x for x in array_nums1 if x in array_nums2]\n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection.append(num1)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1 or not array_nums2:\n        return None\n    output = []\n    for i in array_nums1:\n        if i in array_nums2 and i not in output:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1 or not array_nums2:\n        return []\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup:\n        if t == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = str(x)\n    i = 0\n    for element in tup:\n        if str(element) == x:\n            i += 1\n    return i\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_count = 0\n    for item in tup:\n        if item == x:\n            tup_count += 1\n    return tup_count\n    \n    \n    \ndef print_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and prints out the index of the element in the tuple.\n    '''\n    for index, item in enumerate(tup):\n        if item == x:\n            print index\n    \n    \n    \ndef get_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element in the tuple.\n    '''\n    for item in tup:\n        if item == x:\n            return item\n    \n    \n    \ndef replace_X(tup, x, y):\n    '''\n    Write a python function that takes in a tuple and an element and replaces the element with another element.\n    '''\n    for item in tup:\n        if item == x:\n            tup = tup.replace(x, y)\n    return tup\n    \n    \n    \ndef get_X_Y(tup, x, y):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element at the given index.\n    '''\n    return tup[y]\n    \n    \n    \ndef get_X_Y_Z(tup, x, y, z):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element at the given index.\n    '''\n    return tup[y][z]\n    \n    \n    \ndef get_X_Y_Z_W(tup, x, y, z, w):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element at the given index.\n    '''\n    return tup[y][z][w]\n    \n    \n    \ndef set_X_Y_Z_W(tup, x, y, z, w, v):\n    '''\n    Write a python function that takes in a tuple and an element and sets the element at the given index to the element.\n    '''\n    tup[y][z][w] = v\n    \n    \n    \ndef get_X_Y_Z_W_V(tup, x, y, z, w):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element at the given index.\n    '''\n    return tup[y][z][w]\n    \n    \n    \ndef get_X_Y_Z_W_V_M(tup, x, y, z, w):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element at the given index.\n    '''\n    return tup[y][z][w][m]\n    \n    \n    \ndef set_X_Y_Z_W_V_M(tup, x, y, z, w, v, m):\n    '''\n    Write a python function that takes in a tuple and an element and sets the element at the given index to the element.\n    '''\n    tup[y][z][w][m] = v\n    \n    \n    \ndef get_X_Y_Z_W_V_M_N(tup, x, y, z, w):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element at the given index.\n    '''\n    return tup[y][z][w][m][n]\n    \n    \n    \ndef set_X_Y_Z_W_V_M_N(tup, x, y, z, w, v, m, n):\n    '''\n    Write a python function that takes in a tuple and an element and sets the element at the given index to the element.\n    '''\n    tup[y][z][w][m][n] = v\n    \n    \n    \ndef get_X_Y_Z_W_V_M_N_O(tup, x, y, z, w):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element at the given index.\n    '''\n    return tup[y][z][w][m][n][o]\n    \n    \n    \ndef set_X_Y_Z_W_V_M_N_O(tup, x, y, z, w, v, m, n, o):\n    '''\n    Write a python function that takes in a tuple and an element and sets the element at the given index to the element.\n    '''\n    tup[y][z][w][m][n][o] = v\n    \n    \n    \ndef get_X_Y_Z_W_V_M_N_O_P(tup, x, y, z, w):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element at the given index.\n    '''\n    return tup[y][z][w][m][n][o][p]\n    \n    \n    \ndef set_X_Y_Z_W_V_M_N_O_P(tup, x, y, z, w, v, m, n, o, p):\n    '''\n    Write a python function that takes in a tuple and an element and sets the element at the given index to the element.\n    '''\n    tup[y][z][w][m][n][o][p] = v\n    \n    \n    \ndef get_X_Y_Z_W_V_M_N_O_P_R(tup, x, y, z, w):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element at the given index.\n    '''\n    return tup[y][z][w][m][n][o][p][r]\n    \n    \n    \ndef set_X_Y_Z_W_V_M_N_O_P_R(tup, x, y, z, w, v, m, n, o, p, r):\n    '''\n    Write a python function that takes in a tuple and an element and sets the element at the given index to the element.\n    '''\n    tup[y][z][w][m][n][o][p][r] = v\n    \n    \n    \ndef get_X_Y_Z_W_V_M_N_O_P_R_S(tup, x, y, z, w):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element at the given index.\n    '''\n    return tup[y][z][w][m][n][o][p][r][s]\n    \n    \n    \ndef set_X_Y_Z_W_V_M_N_O_P_R_S(tup, x, y, z, w, v, m, n, o, p, r, s):\n    '''\n    Write a python function that takes in a tuple and an element and sets the element at the given index to the element.\n    '''\n    tup[y][z][w][m][n][o][p][r][s] = v\n    \n    \n    \ndef get_X_Y_Z_W_V_M_N_O_P_R_S_T(tup, x, y, z, w):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element at the given index.\n    '''\n    return tup[y][z][w][m][n][o][p][r][s][t]\n    \n    \n    \ndef set_X_Y_Z_W_V_M_N_O_P_R_S_T(tup, x, y, z, w, v, m, n, o, p, r, s, t):\n    '''\n    Write a python function that takes in a tuple and an element and sets the element at the given index to the element.\n    '''\n    tup[y][z][w][m][n][o][p][r][s][t] = v\n    \n    \n    \ndef get_X_Y_Z_W_V_M_N_O_P_R_"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if x in tup:\n        return tup.count(x)\n    return 0\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup1 = list(tup)\n    count = 0\n    for i in range(0, len(tup1)):\n        if tup1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    l = []\n    for i in range(0,len(list)):\n        l.append(element)\n        l.append(list[i])\n    return l\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [list[i] for i in range(len(list)) if i == 0 or list[i-1]!=list[i]] + [element] + [list[i] for i in range(len(list)) if i == len(list)-1 or list[i+1]!=list[i]]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result=[]\n    for i in range(0,len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result=[]\n    for i in list:\n        result.append(i)\n    result.insert(0,element)\n    return result\n    \ndef even_magnitude(num_list):\n    '''\n    Write a function that takes in a list of integers and returns a list of only the even elements in the list.\n    '''\n    result=[]\n    for i in num_list:\n        if i%2==0:\n            result.append(i)\n    return result\n    \ndef linear_combination(list_one,list_two,coefficient):\n    '''\n    Write a function that takes in two lists of numbers and returns a list which is the linear combination of the two lists.\n    '''\n    result=[]\n    for i in range(len(list_one)):\n        result.append(list_one[i]*coefficient+list_two[i])\n    return result\n    \ndef merge_sort(list):\n    '''\n    Write a function that takes in a list and returns a sorted list.\n    '''\n    if len(list)==1:\n        return list\n    else:\n        mid=len(list)/2\n        return merge(merge_sort(list[:mid]),merge_sort(list[mid:]))\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [x + element for x in list]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return [element]\n    else:\n        return [list[0]] + insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    from cmath import polar\n    return polar(numbers)\ndef convert2(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import rect\n    return rect(numbers)\ndef convert3(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import phase\n    return phase(numbers)\ndef convert4(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import sqrt\n    return sqrt(numbers)\ndef convert5(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import exp\n    return exp(numbers)\ndef convert6(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log\n    return log(numbers)\ndef convert7(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert8(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log2\n    return log2(numbers)\ndef convert9(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log2\n    return log2(numbers)\ndef convert10(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log2\n    return log2(numbers)\ndef convert11(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log2\n    return log2(numbers)\ndef convert12(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log2\n    return log2(numbers)\ndef convert13(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert14(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert15(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert16(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert17(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert18(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert19(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert20(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert21(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert22(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert23(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert24(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert25(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert26(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert27(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert28(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert29(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert30(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert31(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert32(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert33(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert34(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert35(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert36(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert37(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert38(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert39(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert40(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert41(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert42(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert43(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    from cmath import log10\n    return log10(numbers)\ndef convert44(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    fro"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    cmath.polar(numbers)\n    return \"input is %s\" %numbers    \n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for each in numbers:\n        r = each.real\n        i = each.imag\n        result.append((r, i, cmath.phase(each)))\n    return result\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(complex(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # store in polar variable theta and radius\n    #print(numbers)\n    theta,radius=cmath.polar(complex(numbers[0],numbers[1]))\n    #output=str(theta)+\",\"+str(radius)\n    return (theta,radius)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    return cmath.polar(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Python code to convert complex number to polar coordinates\n    \n    # initializing complex number\n    #c = complex(numbers)\n    \n    # polar number\n    #r = abs(c)\n    #phase angle\n    #phi = cmath.phase(c)\n    \n    # return polar complex number\n    #return r, phi\n    \n    # initializing complex number\n    #c = complex(numbers)\n    \n    # polar number\n    #r = abs(c)\n    #phase angle\n    #phi = cmath.phase(c)\n    \n    # return polar complex number\n    #return r, phi\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert2(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert3(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert4(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert5(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert6(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert7(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert8(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert9(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert10(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert11(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert12(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert13(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert14(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert15(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    complex_numbers = sorted(complex_numbers)\n    polar_coordinates = []\n    for number in complex_numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n    \ndef convert16"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_list = list(map(lambda x:complex(x),numbers))\n    polar_list = list(map(lambda x:cmath.polar(x),complex_list))\n    return polar_list\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for i in numbers:\n        complex_numbers.append(complex(i))\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if isinstance(i, int):\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([n for n in list1 if type(n) == int])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    number_of_integer=0\n    for item in list1:\n        if type(item)==int:\n            number_of_integer=number_of_integer+1\n    return number_of_integer\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if item.isnumeric():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    return sum([1 for x in list1 if type(x) == int])\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        print(\"There are no combinations of length\", n, \"in the list\")\n        return []\n    elif len(l) == n:\n        return [l]\n    else:\n        combos = []\n        for i in range(len(l)-n+1):\n            combo = [l[i]]\n            for j in range(i+1, i+n):\n                combo.append(l[j])\n            combos.append(combo)\n        return combos\n    \ndef count_combos(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    count = 0\n    for i in range(len(l)-n+1):\n        for j in range(i+1, i+n):\n            if sorted(l[i:j]) == l[i:j]:\n                count += 1\n    return count\n    \ndef count_combos2(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    count = 0\n    for i in range(len(l)-n+1):\n        if sorted(l[i:i+n]) == l[i:i+n]:\n            count += 1\n    return count\n    \ndef get_combos(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        print(\"There are no combinations of length\", n, \"in the list\")\n        return []\n    elif len(l) == n:\n        return [l]\n    else:\n        combos = []\n        for i in range(len(l)-n+1):\n            combo = [l[i]]\n            for j in range(i+1, i+n):\n                combo.append(l[j])\n            combos.append(combo)\n        return combos\n    \ndef get_combos2(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        print(\"There are no combinations of length\", n, \"in the list\")\n        return []\n    elif len(l) == n:\n        return [l]\n    else:\n        combos = []\n        for i in range(len(l)-n+1):\n            if sorted(l[i:i+n]) == l[i:i+n]:\n                combos.append(l[i:i+n])\n        return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l,n):\n            result.append(j)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    return [tuple(x) for x in combinations_with_replacement(l, n)]\nprint(combinations_colors([0,1,2,3,4,5], 2))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in combinations_with_replacement(l, n):\n        print(i)\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for comb in combinations_with_replacement(l, n):\n        yield comb\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return []\n    if n == len(l):\n        return [l]\n    l.sort()\n    combos = []\n    for i in range(1,len(l)):\n        for combo in combinations_with_replacement(l, i):\n            combos.append(combo)\n    return list(combos)\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list = []\n    for c in combinations_with_replacement(l, n):\n        list.append(c)\n    return list\ndef get_combinations(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen with repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations_with_replacement(range(n), i))\n    return l\ndef get_combinations_with_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen with repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations_with_replacement(range(n), i))\n    return l\ndef get_combinations_unique(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations(range(n), i))\n    return l\ndef get_combinations_unique_with_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations_with_replacement(range(n), i))\n    return l\ndef get_combinations_without_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations(range(n), i))\n    return l\ndef get_combinations_without_repetition_with_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations_with_replacement(range(n), i))\n    return l\ndef get_combinations_unique_without_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations(range(n), i))\n    return l\ndef get_combinations_unique_without_repetition_with_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations_with_replacement(range(n), i))\n    return l\ndef get_combinations_unique_without_repetition_without_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations(range(n), i))\n    return l\ndef get_combinations_unique_without_repetition_without_repetition_with_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations_with_replacement(range(n), i))\n    return l\ndef get_combinations_unique_without_repetition_without_repetition_without_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations(range(n), i))\n    return l\ndef get_combinations_unique_without_repetition_without_repetition_without_repetition_with_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations_with_replacement(range(n), i))\n    return l\ndef get_combinations_unique_without_repetition_without_repetition_without_repetition_without_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations(range(n), i))\n    return l\ndef get_combinations_unique_without_repetition_without_repetition_without_repetition_without_repetition_with_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations_with_replacement(range(n), i))\n    return l\ndef get_combinations_without_repetition_without_repetition_without_repetition_without_repetition_without_repetition_with_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations(range(n), i))\n    return l\ndef get_combinations_without_repetition_without_repetition_without_repetition_without_repetition_without_repetition_without_repetition_without_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations(range(n), i))\n    return l\ndef get_combinations_without_repetition_without_repetition_without_repetition_without_repetition_without_repetition_without_repetition_without_repetition_with_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations_with_replacement(range(n), i))\n    return l\ndef get_combinations_without_repetition_without_repetition_without_repetition_without_repetition_without_repetition_without_repetition_without_repetition_without_repetition_without_repetition(n):\n    '''\n    Write a function that takes in an integer n and returns a list of tuples, each tuple containing n integers, chosen without repetition.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(combinations(range(n), i))\n    return l\ndef get_combinations_without_repetition_without_repetition_without_repetition_without_repetition_withou"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in xrange(len(l) - n + 1):\n        combs.append(tuple(l[i:i + n]))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [list(x) for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n) if len(comb) == n]\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    nums = []\n    #iterate from 2 to n-1\n    for i in range(2, n):\n        nums.append(i)\n    # n is prime if it is not divisible by any integer other than 1 and itself\n    return len(nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        if n % 2 == 0:\n            return count_Primes_nums(n-1)\n        else:\n            return count_Primes_nums(n-1) + count_Primes_nums(n-1)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    nums = [True]*(n+1)\n    for i in range(2, n+1):\n        if nums[i]:\n            for j in range(i*i, n+1, i):\n                nums[j] = False\n    return sum(nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    nums = range(2,n) #nums is a list of number that is less than n\n    if n < 2: # the only prime number is 2\n        return 1\n    for i in nums:\n        j = 2\n        while i*j <= n: # the loop will stop when i*j is greater than n\n            if i*j in nums:\n                nums.remove(i*j) # if i*j is in the list, remove i*j from the list\n            j += 1 # then j will go on\n    return len(nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_Prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**(1/2)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    def count_Primes(n):\n        count = 0\n        for i in range(2, n + 1):\n            if is_Prime(i):\n                count += 1\n        return count\n    return count_Primes(n)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    i = 2\n    count = 0\n    while i < n:\n        j = 2\n        while j < i:\n            if i % j == 0:\n                break\n            j += 1\n        if j == i:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 3\n    if n == 7:\n        return 4\n    if n == 8:\n        return 5\n    if n == 9:\n        return 6\n    if n == 10:\n        return 6\n    if n == 11:\n        return 7\n    if n == 12:\n        return 7\n    if n == 13:\n        return 7\n    if n == 14:\n        return 8\n    if n == 15:\n        return 8\n    if n == 16:\n        return 8\n    if n == 17:\n        return 9\n    if n == 18:\n        return 10\n    if n == 19:\n        return 11\n    if n == 20:\n        return 11\n    if n == 21:\n        return 11\n    if n == 22:\n        return 12\n    if n == 23:\n        return 12\n    if n == 24:\n        return 12\n    if n == 25:\n        return 13\n    if n == 26:\n        return 13\n    if n == 27:\n        return 13\n    if n == 28:\n        return 14\n    if n == 29:\n        return 15\n    if n == 30:\n        return 16\n    if n == 31:\n        return 17\n    if n == 32:\n        return 17\n    if n == 33:\n        return 18\n    if n == 34:\n        return 19\n    if n == 35:\n        return 19\n    if n == 36:\n        return 19\n    if n == 37:\n        return 19\n    if n == 38:\n        return 19\n    if n == 39:\n        return 19\n    if n == 40:\n        return 19\n    if n == 41:\n        return 19\n    if n == 42:\n        return 19\n    if n == 43:\n        return 19\n    if n == 44:\n        return 19\n    if n == 45:\n        return 19\n    if n == 46:\n        return 19\n    if n == 47:\n        return 19\n    if n == 48:\n        return 19\n    if n == 49:\n        return 19\n    if n == 50:\n        return 19\n    if n == 51:\n        return 19\n    if n == 52:\n        return 19\n    if n == 53:\n        return 19\n    if n == 54:\n        return 19\n    if n == 55:\n        return 19\n    if n == 56:\n        return 19\n    if n == 57:\n        return 19\n    if n == 58:\n        return 19\n    if n == 59:\n        return 19\n    if n == 60:\n        return 19\n    if n == 61:\n        return 19\n    if n == 62:\n        return 19\n    if n == 63:\n        return 19\n    if n == 64:\n        return 19\n    if n == 65:\n        return 19\n    if n == 66:\n        return 19\n    if n == 67:\n        return 19\n    if n == 68:\n        return 19\n    if n == 69:\n        return 19\n    if n == 70:\n        return 19\n    if n == 71:\n        return 19\n    if n == 72:\n        return 19\n    if n == 73:\n        return 19\n    if n == 74:\n        return 19\n    if n == 75:\n        return 19\n    if n == 76:\n        return 19\n    if n == 77:\n        return 19\n    if n == 78:\n        return 19\n    if n == 79:\n        return 19\n    if n == 80:\n        return 19\n    if n == 81:\n        return 19\n    if n == 82:\n        return 19\n    if n == 83:\n        return 19\n    if n == 84:\n        return 19\n    if n == 85:\n        return 19\n    if n == 86:\n        return 19\n    if n == 87:\n        return 19\n    if n == 88:\n        return 19\n    if n == 89:\n        return 19\n    if n == 90:\n        return 19\n    if n == 91:\n        return 19\n    if n == 92:\n        return 19\n    if n == 93:\n        return 19\n    if n == 94:\n        return 19\n    if n == 95:\n        return 19\n    if n == 96:\n        return 19\n    if n == 97:\n        return 19\n    if n == 98:\n        return 19\n    if n == 99:\n        return 19\n    if n == 100:\n        return 19\n    if n == 101:\n        return 19\n    if n == 102:\n        return 19\n    if n == 103:\n        return 19\n    if n == 104:\n        return 19\n    if n == 105:\n        return 19\n    if n == 106:\n        return 19\n    if n == 107:\n        return 19\n    if n == 108:\n        return 19\n    if n == 109:\n        return 19\n    if n == 110:\n        return 19\n    if n == 111:\n        return 19\n    if n == 112:\n        return 19\n    if n == 113:\n        return 19\n    if n == 114:\n        return 19\n    if n == 115:\n        return 19\n    if n == 116:\n        return 19\n    if n == 117:\n        return 19\n    if n == 118:\n        return 19\n    if n == 119:\n        return 19\n    if n == 120:\n        return 19\n    if n == 121:\n        return 19\n    if n == 122:\n        return 19\n    if n == 123:\n        return 19\n    if n == 124:\n        return 19\n    if n == 125:\n        return 19\n    if n == 126:\n        return 19\n    if n == 127:\n        return 19\n    if n == 128:\n        return 19\n    if n == 129:\n        return 19\n    if n == 130:\n        return 19\n    if n == 131:\n        return 19\n    if n == 132:\n        return 19\n    if n == 133:\n        return 19\n    if n == 134:\n        return 19\n    if n == 135:\n        return 19\n    if n == 136:\n        return 19\n    if n == 137:\n        return 19\n    if n == 138:\n        return 19\n    if n == 139:\n        return 19\n    if n == 140:\n        return 19\n    if n == 141:\n        return 19\n    if n == 142:\n        return 19\n    if n == 143:\n        return 19\n    if n == 144:\n        return 19\n    if n == 145:\n        return 19\n    if n == 146:\n        return 19\n    if n == 147:\n        return 19\n    if n == 148:\n        return 19\n    if n == 149:\n        return 19\n    if n == 150:\n        return 19\n    if n == 151:\n        return 19\n    if n == 152:\n        return 19\n    if n == 153:\n        return 19\n    if n == 154:\n        return 19\n    if n == 155:\n        return 19\n    if n == 156:\n        return 19\n    if n == 157:\n        return 19\n    if n == 158:\n        return 19\n    if n == 159:\n        return 19\n    if n == 160:\n        return 19\n    if n == 161:\n        return 19\n    if n == 162:\n        return 19\n    if n == 163:\n        return 19\n    if n == 164:\n        return 19\n    if n == 165:\n        return 19\n    if n == 166:\n        return 19\n    if n == 167:\n        return 19\n    if n == 168:\n        return 19\n    if n == 169:\n        return 19\n    if n == 170:\n        return 19\n    if n == 171:\n        return 19\n    if n == 172:\n        return 19\n    if n == 173:\n        return 19\n    if n == 174:\n        return 19\n    if n == 175:\n        return 19\n    if n == 176:\n        return 19\n    if n == 177:\n        return 19\n    if n == 178:\n        return 19\n    if n == 179:\n        return 19\n    if n == 180:\n        return 19\n    if n == 181:\n        return 19\n    if n == 182:"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count=0\n    for x in range(2, n):\n        if n%x == 0:\n            count +=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<0:\n        return None\n    #print('n is: ',n)\n    prime_nums = [True]*(n+1)\n    prime_nums[0] = False\n    prime_nums[1] = False\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n <= 1:\n        return 0\n    for i in range(2, n+1):\n        prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                prime = False\n                break\n        if prime:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    t = (b,a)\n    return t\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x = a\n    a = b\n    b = x\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # return (b,a)\n    return (a,b)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    t1 = test_tup1[0]\n    t2 = test_tup2[0]\n    return [t1, t2]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(map(max, zip(test_tup1, test_tup2)))\n    \n    "
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1.sort()\n    test_tup2.sort()\n    print(test_tup1)\n    print(test_tup2)\n    return test_tup1[-1], test_tup2[-1]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # test_tup1 = (1, 5, 3)\n    # test_tup2 = (4, 1, 2)\n    \n    if len(test_tup1) < len(test_tup2):\n        # test_tup2 is longer\n        return maximize_elements(test_tup2, test_tup1)\n    \n    if len(test_tup1) == len(test_tup2):\n        # can't maximize the two tuples, but you can maximize the elements of each tuple\n        # if the elements are equal\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return test_tup1\n            if test_tup1[i] < test_tup2[i]:\n                return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    list_1 = list(test_tup1)\n    list_2 = list(test_tup2)\n    return list_1 + list_2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Tuples are not of the same length'\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i]*test_tup2[i])\n    return res\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == 0:\n        return test_tup1\n    elif len(test_tup1) == 1:\n        return test_tup1 + test_tup2\n    else:\n        if test_tup1[0] >= test_tup2[0]:\n            return [test_tup1[0]] + maximize_elements(test_tup1[1:], test_tup2)\n        else:\n            return [test_tup2[0]] + maximize_elements(test_tup1, test_tup2[1:])\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    if (tup1_len == 1):\n        if (tup2_len == 1):\n            return test_tup1[0]\n        elif (tup2_len > 1):\n            return test_tup2[0]\n        else:\n            return test_tup1[0]\n    elif (tup2_len == 1):\n        return test_tup2[0]\n    else:\n        if (test_tup1[0] > test_tup2[0]):\n            return test_tup1[0]\n        elif (test_tup1[0] < test_tup2[0]):\n            return test_tup2[0]\n        elif (test_tup1[0] == test_tup2[0]):\n            return test_tup1[0]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0]>test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0]<test_tup2[0]:\n        return test_tup2\n    elif test_tup1[1]>test_tup2[1]:\n        return test_tup1\n    elif test_tup1[1]<test_tup2[1]:\n        return test_tup2\n    elif test_tup1[2]>test_tup2[2]:\n        return test_tup1\n    elif test_tup1[2]<test_tup2[2]:\n        return test_tup2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    if max1 > max2:\n        print \"max1 is greater than max2\"\n    elif max2 > max1:\n        print \"max2 is greater than max1\"\n    else:\n        print \"both equal\"\n        \n    return \n    \n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    \n    # Get p and q such that n = p * q\n    p = 0\n    q = 1\n    \n    for i in range(1, n):\n        p, q = q, (p + q) * (i + 1) / i\n    \n    # Find an integer r so that n = p * r + q\n    r = 1\n    while not n == p * r + q:\n        r += 1\n    \n    return p * r + q\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    \n    elif n == 2:\n        return 3\n    \n    elif n % 2 == 0:\n        return None\n    \n    elif n % 2 == 1:\n        limit = int((n + 1) ** (1/3))\n        counter = 0\n        \n        while True:\n            counter += 1\n            if is_newman_williams(counter, limit):\n                return counter\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    def is_prime(n):\n        if n < 2: return False\n        if n == 2: return True\n        if n%2 == 0: return False\n        i = 3\n        while i*i <= n:\n            if n%i == 0:\n                return False\n            i += 2\n        return True\n    def count_primes(n):\n        count = 0\n        for i in range(1, n):\n            if is_prime(i):\n                count += 1\n        return count\n    def get_phi_n(n):\n        def get_phi(n, i):\n            if i == 1:\n                return n-1\n            if i == 0:\n                return 1\n            if i%2 == 0:\n                return get_phi(n, i//2)**2-1\n            return get_phi(n, i-1)*get_phi(n, i+1)\n        return get_phi(n, count_primes(n)-1)\n    def find_pq(n):\n        i = 0\n        while(True):\n            i += 1\n            p = get_phi_n(i)\n            if p > n:\n                return i, p\n    def mod_inv(a, p):\n        for i in range(1, p):\n            if (a*i) % p == 1:\n                return i\n        return -1\n    def find_n(a, b, p):\n        return ((a*b)**(1/2))%p\n    def find_e(d,p):\n        i = 2\n        while(True):\n            if mod_inv(i, p)!= -1:\n                return i\n            i += 1\n    def get_e(p, q):\n        return find_e(p*q, p*q)\n    def find_d(e, p):\n        return mod_inv(e, p)\n    def find_d_from_p_and_q(p, q):\n        return find_d(p*q, p*q)\n    def find_d_from_p_and_q2(p, q):\n        return mod_inv(p, q)\n    def rsa_decrypt(e, n, cipher):\n        #cipher = int(cipher)\n        plain = pow(cipher, e, n)\n        return plain\n    def rsa_encrypt(d, n, plain):\n        #plain = int(plain)\n        cipher = pow(plain, d, n)\n        return cipher\n    def rsa_encrypt_and_decrypt(e, n, plain, decrypt=False):\n        if decrypt:\n            return rsa_decrypt(e, n, plain)\n        else:\n            return rsa_encrypt(e, n, plain)\n    def rsa_encrypt_and_decrypt_file(e, n, file_name):\n        f = open(file_name, 'rb')\n        out_f = open(file_name + '.dec', 'wb')\n        for line in f:\n            for i in range(len(line)):\n                out_f.write(chr(rsa_encrypt_and_decrypt(e, n, ord(line[i]))))\n        f.close()\n        out_f.close()\n    def rsa_encrypt_and_decrypt_file_with_block_size(e, n, file_name, block_size=4096):\n        f = open(file_name, 'rb')\n        out_f = open(file_name + '.dec', 'wb')\n        while True:\n            data = f.read(block_size)\n            if data == \"\":\n                break\n            for i in range(len(data)):\n                out_f.write(chr(rsa_encrypt_and_decrypt(e, n, ord(data[i]))))\n        f.close()\n        out_f.close()\n    def rsa_encrypt_file_and_save(e, n, file_name):\n        f = open(file_name, 'rb')\n        out_f = open(file_name + '.enc', 'wb')\n        for line in f:\n            for i in range(len(line)):\n                out_f.write(chr(rsa_encrypt(e, n, ord(line[i]))))\n        f.close()\n        out_f.close()\n    def rsa_decrypt_file_and_save(d, n, file_name):\n        f = open(file_name, 'rb')\n        out_f = open(file_name + '.dec', 'wb')\n        for line in f:\n            for i in range(len(line)):\n                out_f.write(chr(rsa_decrypt(d, n, ord(line[i]))))\n        f.close()\n        out_f.close()\n    def rsa_decrypt_file_and_save_with_block_size(d, n, file_name, block_size=4096):\n        f = open(file_name, 'rb')\n        out_f = open(file_name + '.dec', 'wb')\n        while True:\n            data = f.read(block_size)\n            if data == \"\":\n                break\n            for i in range(len(data)):\n                out_f.write(chr(rsa_decrypt(d, n, ord(data[i]))))\n        f.close()\n        out_f.close()\n    def rsa_decrypt_file(e, n, file_name):\n        f = open(file_name, 'rb')\n        out_f = open(file_name + '.dec', 'wb')\n        for line in f:\n            for i in range(len(line)):\n                out_f.write(chr(rsa_decrypt(e, n, ord(line[i]))))\n        f.close()\n        out_f.close()\n    def rsa_decrypt_file_with_block_size(d, n, file_name, block_size=4096):\n        f = open(file_name, 'rb')\n        out_f = open(file_name + '.dec', 'wb')\n        while True:\n            data = f.read(block_size)\n            if data == \"\":\n                break\n            for i in range(len(data)):\n                out_f.write(chr(rsa_decrypt(d, n, ord(data[i]))))\n        f.close()\n        out_f.close()\n    def rsa_decrypt_file_and_save(d, n, file_name):\n        f = open(file_name, 'rb')\n        out_f = open(file_name + '.dec', 'wb')\n        for line in f:\n            for i in range(len(line)):\n                out_f.write(chr(rsa_decrypt(d, n, ord(line[i]))))\n        f.close()\n        out_f.close()\n    def rsa_decrypt_file_and_save_with_block_size(d, n, file_name, block_size=4096):\n        f = open(file_name, 'rb')\n        out_f = open(file_name + '.dec', 'wb')\n        while True:\n            data = f.read(block_size)\n            if data == \"\":\n                break\n            for i in range(len(data)):\n                out_f.write(chr(rsa_decrypt(d, n, ord(data[i]))))\n        f.close()\n        out_f.close()\n    def rsa_break_key(n, file_name, block_size=4096):\n        f = open(file_name, 'rb')\n        out_f = open(file_name + '.dec', 'wb')\n        block_count = 0\n        while True:\n            data = f.read(block_size)\n            if data == \"\":\n                break\n            for i in range(len(data)):\n                out_f.write(chr(rsa_decrypt(n, n, ord(data[i]))))\n            block_count += 1\n            print(\"Processing block \" "
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    '''\n    Prime-related methods\n    '''\n    def prime_factors(n): \n        '''\n        Helper function to get all the prime factors of a given number.\n        '''\n        factors = [] \n        divisor = 2 \n        while divisor*divisor <= n: \n            while n%divisor == 0: \n                factors.append(divisor)\n                n /= divisor \n            divisor += 1 \n        if n > 1: \n            factors.append(n) \n        return factors \n    \n    def is_prime(n): \n        '''\n        Helper function to check if a given number is prime or not.\n        '''\n        divisor = 2\n        while divisor*divisor <= n: \n            if n%divisor == 0:\n                return False \n            divisor += 1 \n        return True \n    \n    def gcd(a, b):\n        '''\n        Helper function to get the gcd of two numbers.\n        '''\n        while b!= 0: \n            a, b = b, a%b\n        return a\n    \n    def phi(n):\n        '''\n        Helper function to calculate Euler's totient function.\n        '''\n        result = n \n        for i in xrange(2,n):\n            if gcd(i, n) == 1:\n                result -= result/i\n        return result\n    \n    def jacobi(a, n): \n        '''\n        Helper function to calculate the jacobi symbol of a and n.\n        '''\n        if a == 0: \n            return 0\n        elif a == 1:\n            return 1\n        elif a == n: \n            return 1\n        elif a%2 == 0: \n            return jacobi(2,n)*jacobi(n,n)\n        elif a%2 == 1: \n            return jacobi(2,n)*jacobi(n,n)**2\n        elif a > n: \n            return 0\n    \n    '''\n    Newman\u2013Shanks\u2013Williams method\n    '''\n    def newman_williams_step(p, q, n): \n        '''\n        This is the main function to find the nth newman\u2013shanks\u2013williams prime number.\n        '''\n        if q == 0: \n            return p\n        else: \n            qinv = pow(q, -1, n) \n            return pow(qinv*(p-q*qinv), -1, n)\n    \n    def newman_williams(n): \n        '''\n        This is the main function to find the nth newman\u2013shanks\u2013williams prime number.\n        '''\n        n = int(n)\n        if n < 2: \n            return 2\n        elif n == 2: \n            return 3\n        elif n == 3: \n            return 5\n        elif n%2 == 0: \n            return 2*newman_williams(n/2)\n        elif n%2 == 1: \n            temp = newman_williams(n) \n            while True: \n                p = temp + 2 \n                q = newman_williams(n-1)\n                if jacobi(p,n) == -1:\n                    break \n                else: \n                    temp = p \n            return p \n    \n    def is_newman_williams_prime(n): \n        '''\n        Helper function to check if a given number is newman\u2013williams prime number or not.\n        '''\n        if n%2 == 0: \n            return False \n        temp = newman_williams(n)\n        if temp%2 == 0: \n            return False\n        else:\n            return True\n    \n    def newman_williams_test(n): \n        '''\n        Helper function to test the newman\u2013williams primality test.\n        '''\n        if is_newman_williams_prime(n) == True: \n            print \"YES\"\n        else: \n            print \"NO\"\n    \n    '''\n    Nth prime\n    '''\n    def nth_prime(n): \n        '''\n        This is the main function to find the nth prime number.\n        '''\n        primes = [2]\n        counter = 1\n        while len(primes) < n: \n            if is_newman_williams_prime(counter): \n                primes.append(counter)\n            counter += 1\n        return primes[n-1]\n    \n    '''\n    Nth golden ratio\n    '''\n    def nth_golden(n): \n        '''\n        This is the main function to find the nth golden ratio.\n        '''\n        return (1 + 5**0.5)/2**n\n    \n    def golden_ratio_test(n): \n        '''\n        Helper function to test the golden ratio primality test.\n        '''\n        if n%2 == 1: \n            print \"NO\"\n        else: \n            if n < 2: \n                return True\n            else: \n                if n == 2: \n                    return True\n                else: \n                    for i in xrange(1,n): \n                        if nth_golden(i)%n == nth_golden(i+1)%n:\n                            print \"NO\"\n                            return False\n                    return True\n    \n    '''\n    Goldbach's other conjecture\n    '''\n    def goldbach(n): \n        '''\n        This is the main function to find the nth golden ratio.\n        '''\n        for i in xrange(n/2,1,-1): \n            for j in xrange(i,n,2): \n                if (i+j)%2 == 0: \n                    break\n            else: \n                if (i+1)*(i+2)/2 == n: \n                    return (i+1,i+2)\n    \n    def goldbach_test(n): \n        '''\n        Helper function to test the goldbach conjecture.\n        '''\n        if n < 2: \n            return True\n        else: \n            if n == 2: \n                return True\n            else: \n                for i in xrange(1,n): \n                    if goldbach(i)[0] == goldbach(n-i)[1]:\n                        return True\n                return False\n    \n    '''\n    Goldbach's other conjecture\n    '''\n    def goldbach_other_conjecture(n): \n        '''\n        This is the main function to find the nth golden ratio.\n        '''\n        for i in xrange(1,n): \n            if (i+1)*(i+2)/2 == n: \n                return (i+1,i+2)\n    \n    def goldbach_other_conjecture_test(n): \n        '''\n        Helper function to test the goldbach other conjecture.\n        '''\n        if n < 2: \n            return True\n        else: \n            if n == 2: \n                return True\n            else: \n                for i in xrange(1,n): \n                    if goldbach_other_conjecture(i)[0] == goldbach_other_conjecture(n-i)[1]:\n                        return True\n                return False\n    \n    '''\n    RSA encryption\n    '''\n    def gcd(a, b):\n        '''\n        Helper function to get the gcd of two numbers.\n        '''\n        while b!= 0: \n            a, b = b, a%b\n        return a\n    \n    def extended_euclid(a, b): \n        '''\n        Helper function to calculate the extended Euclid's algorithm.\n        '''\n        if b == 0: \n            return (1, 0)\n        else: \n            q, r = extended_euclid(b, a%b)\n            return (r, q-(a/b)*r)\n    \n    def multiplicative_inverse(a, m): \n        '''\n        Helper function to calculate the multiplicative inverse of a mod m.\n        '''\n        g, x, y "
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    if n==3:\n        return 5\n    elif n%2==0:\n        return None\n    \n    x = 1\n    y = 1\n    n_old = 2\n    n_new = 2\n    while n_old!= None:\n        n_old = n_new\n        x = (x**2-1)%n\n        y = (y**2-1)%n\n        y = (y**2-1)%n\n        g = gcd(x-y,n)\n        if g!= 1:\n            return None\n        if g == 1:\n            n_new = (x+y)%n\n    return n_new\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    r = newman_prime(n - 1)\n    if not r:\n        return None\n    s = 0\n    r = (r + 1) * ((r + 1) + 1) // 2\n    while True:\n        t = r\n        r = (r + 1) * ((3 * r + 1) + 1) // 2\n        if t % 2 == 0:\n            break\n        s += 1\n    m = pow(r, 1, n)\n    if s % 2 == 0:\n        return r\n    return m\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def trial_division(n, t=2):\n        if n == t:\n            return True\n        if n % t == 0:\n            return False\n        t += 1\n        return trial_division(n, t)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n <= 1:\n        return 2\n    elif n == 2:\n        return 3\n    \n    #Since n > 1, we will use the sieve of Eratosthenes\n    primes = sieve(int(sqrt(n))+1)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    k = 0\n    while not is_prime(n):\n        k += 1\n        n += 1\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    start = 3 # the 1st prime number\n    s, t = 2, start - 1 # starting numbers\n    primes = [2]\n    while len(primes) < n:\n        if is_prime(t):\n            primes.append(t)\n            s = s + 1\n        else:\n            t = t + 2\n    return primes[n-1]\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup1 = ()\n    new_tup2 = ()\n    for i in range(0, len(test_tup1)):\n        new_tup1 = new_tup1 + (test_tup1[i]/test_tup2[i],)\n    for i in range(0, len(test_tup2)):\n        new_tup2 = new_tup2 + (test_tup2[i]/test_tup1[i],)\n    return (new_tup1, new_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division_elements_helper(tup1, tup2):\n        def get_num(x):\n            try:\n                return float(x)\n            except ValueError:\n                return float(x.replace(',', ''))\n        return tuple(map(get_num, [x / y for x, y in zip(tup1, tup2)]))\n    return (division_elements_helper(test_tup1, test_tup2),\n        division_elements_helper(test_tup2, test_tup1))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # no need to actually create the result array, just need to create two loops.\n    result_tup1 = ()\n    result_tup2 = ()\n    for i in range(len(test_tup1)):\n        result_tup1 += (test_tup1[i]/test_tup2[i],)\n    return result_tup1\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    for i in xrange(len(tup1)):\n        tup1[i] = float(tup1[i])\n    for i in xrange(len(tup2)):\n        tup2[i] = float(tup2[i])\n    res = []\n    for i in xrange(len(tup1)):\n        res.append(tup1[i] / tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    product = [ (test_tup1[i] / test_tup2[i]) for i in range(len(test_tup1)) ]\n    return tuple(product)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    test_num1, test_num2 = test_tup1[0], test_tup2[0]\n    test_den1, test_den2 = test_tup1[1], test_tup2[1]\n    \n    # Make sure the denominators are not 0\n    if test_den1 == 0 or test_den2 == 0:\n        return None\n    \n    # Perform division\n    quotient = test_num1 / test_num2\n    remainder = test_num1 % test_num2\n    \n    return quotient, remainder\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Your code here\n    return tuple(e1/e2 for e1, e2 in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return ((test_tup1[i] / test_tup2[i]) for i in range(0,len(test_tup1)))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    list1 = []\n    list2 = []\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[0:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n    \ndef string_comparison(string1, string2):\n    '''\n    Write a function that takes in two strings and returns true if the first string is a permutation of the second, and false otherwise.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    elif sorted(string1) == sorted(string2):\n        return True\n    else:\n        return False\n    \ndef count_of_identical_letters(string1, string2):\n    '''\n    Write a function that takes in two strings and returns the number of identical letters in both strings.\n    '''\n    if string1 == string2:\n        return len(string1)\n    else:\n        return 0\n    \ndef count_of_identical_letters_in_lists(list1, list2):\n    '''\n    Write a function that takes in two lists and returns the number of identical letters in both lists.\n    '''\n    if len(list1)!= len(list2):\n        return 0\n    else:\n        identical = 0\n        for item1 in list1:\n            for item2 in list2:\n                if item1 == item2:\n                    identical += 1\n        return identical\n    \ndef count_of_identical_letters_in_lists_comp(list1, list2):\n    '''\n    Write a function that takes in two lists and returns the number of identical letters in both lists.\n    '''\n    identical = 0\n    for item1 in list1:\n        if item1 in list2:\n            identical += 1\n    return identical\n    \ndef is_item_present(item, list1):\n    '''\n    Write a function that takes in a single item and a list and returns a boolean indicating whether the item is in the list.\n    '''\n    for item2 in list1:\n        if item == item2:\n            return True\n    return False\n    \ndef find_first_item(item, list1):\n    '''\n    Write a function that takes in a single item and a list and returns the index of the item in the list, or -1 if the item is not in the list.\n    '''\n    for index, item2 in enumerate(list1):\n        if item == item2:\n            return index\n    return -1\n    \ndef find_all_items(item, list1):\n    '''\n    Write a function that takes in a single item and a list and returns a list of indices of the items in the list that match the item.\n    '''\n    list_of_indices = []\n    for index, item2 in enumerate(list1):\n        if item == item2:\n            list_of_indices.append(index)\n    return list_of_indices\n    \ndef get_smallest_item_in_list(list1):\n    '''\n    Write a function that takes in a list and returns the smallest item in the list. If the list is empty, return None.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        smallest = list1[0]\n        for item in list1:\n            if item < smallest:\n                smallest = item\n        return smallest\n        \ndef get_biggest_item_in_list(list1):\n    '''\n    Write a function that takes in a list and returns the biggest item in the list. If the list is empty, return None.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        biggest = list1[0]\n        for item in list1:\n            if item > biggest:\n                biggest = item\n        return biggest\n        \ndef get_smallest_item_in_list_comp(list1):\n    '''\n    Write a function that takes in a list and returns the smallest item in the list. If the list is empty, return None.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        smallest = list1[0]\n        for item in list1:\n            if item < smallest:\n                smallest = item\n        return smallest\n    \ndef get_biggest_item_in_list_comp(list1):\n    '''\n    Write a function that takes in a list and returns the biggest item in the list. If the list is empty, return None.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        biggest = list1[0]\n        for item in list1:\n            if item > biggest:\n                biggest = item\n        return biggest\n    \ndef get_smallest_item_in_list_two_comp(list1):\n    '''\n    Write a function that takes in a list and returns the smallest item in the list. If the list is empty, return None.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        smallest = list1[0]\n        for index, item in enumerate(list1):\n            if index == 0:\n                pass\n            elif item < smallest:\n                smallest = item\n        return smallest\n    \ndef get_biggest_item_in_list_two_comp(list1):\n    '''\n    Write a function that takes in a list and returns the biggest item in the list. If the list is empty, return None.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        biggest = list1[0]\n        for index, item in enumerate(list1):\n            if index == 0:\n                pass\n            elif item > biggest:\n                biggest = item\n        return biggest\n    \ndef get_smallest_item_in_list_comp2(list1):\n    '''\n    Write a function that takes in a list and returns the smallest item in the list. If the list is empty, return None.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        smallest = list1[0]\n        for item in list1:\n            if item < smallest:\n                smallest = item\n        return smallest\n    \ndef get_biggest_item_in_list_comp2(list1):\n    '''\n    Write a function that takes in a list and returns the biggest item in the list. If the list is empty, return None.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        biggest = list1[0]\n        for item in list1:\n            if item > biggest:\n                biggest = item\n        return biggest\n    \ndef get_smallest_item_in_list_comp3(list1):\n    '''\n    Write a function that takes in a list and returns the smallest item in the list. If the list is empty, return None.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        smallest = list1[0]\n        for index, item in enumerate(list1):\n            if index == 0:\n                pass\n            elif item < smallest:\n                smallest = item\n        return smallest\n    \ndef get_biggest_item_in_list_comp3(list1):\n    '''\n    Write a function that takes in a list and returns the biggest item in the list. If the list is empty, return None.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        biggest = list1[0]\n        for index, item in enumerate(list1):\n            if index == 0:\n                pass\n            elif item > biggest:\n                biggest = item\n        return biggest\n    \ndef is_item_present_in_list(item, list1):\n    '''\n    Write a function that takes in a single item and a list and returns a boolean indicating whether the item is in the list.\n    '''\n    if item in list1:\n        return True\n    else:\n        return False\n    \ndef get_first_item_in_list(list1):\n    '''\n    Write a function that takes in a list and returns the first item in the list. If the list is empty, return None.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        return list1"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # your code goes here\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = L\n    list1_1 = list1[:n]\n    list1_2 = list1[n:]\n    return (list1_1, list1_2)\n    \ndef split_two_parts_b(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = L\n    list1_1 = list1[:n]\n    list1_2 = list1[n:]\n    return [list1_1, list1_2]\n    \ndef shuffle_two_parts(list1, list2):\n    '''\n    Write a function that takes in two lists and shuffles them together. The first element of the first list is the first element of the second list, the second element of the first list is the second element of the second list, etc. If the length of the first list is longer than the second list, the last element of the second list is appended to the end of the first list.\n    '''\n    for i in range(len(list2)):\n        list1.append(list2[i])\n    return list1\n    \ndef shuffle_two_parts_b(list1, list2):\n    '''\n    Write a function that takes in two lists and shuffles them together. The first element of the first list is the first element of the second list, the second element of the first list is the second element of the second list, etc. If the length of the first list is longer than the second list, the last element of the second list is appended to the end of the first list.\n    '''\n    for i in range(len(list2)):\n        list1.append(list2[i])\n    return list1\n    \ndef shuffle_two_parts_c(list1, list2):\n    '''\n    Write a function that takes in two lists and shuffles them together. The first element of the first list is the first element of the second list, the second element of the first list is the second element of the second list, etc. If the length of the first list is longer than the second list, the last element of the second list is appended to the end of the first list.\n    '''\n    for i in range(len(list2)):\n        list1.insert(i, list2[i])\n    return list1\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError('Input is too short for the given split size L')\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1 = list1[:L]\n    list2 = list1[L:]\n    return (list1, list2)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(\"Error: Invalid age entered.\")\n    elif h_age <= 2:\n        return h_age * 10.5\n    elif h_age > 2:\n        return 2 * 10.5 + (h_age - 2) * 4\n    else:\n        return 0\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # TODO: Complete this function\n    # Add code to return the dog's age in dog's years\n    return h_age * 7\n    \ndef cat_age(m_age):\n    '''\n    Write a function to calculate a cat's age in cat's years.\n    '''\n    # TODO: Complete this function\n    # Add code to return the cat's age in cat's years\n    return m_age * 8\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == None:\n        return None\n    h_age = int(h_age)\n    if h_age < 0:\n        return None\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Dog is 14 years old every 4 years\n    return (14 + (h_age * 4))\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return \"Enter a valid age.\"\n    elif h_age == 0:\n        return \"A dog's age is equal to 0 years.\"\n    elif h_age == 1:\n        return \"A dog's age is equal to 1 year.\"\n    else:\n        return str(h_age) + \" years\"\n        \nprint(dog_age(8))\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # RETURN: a list of lists\n    \n    # Input:\n    # S - a list of elements\n    # step - the number of elements to skip\n    \n    # Output: a list of lists, with each list containing the elements from S\n    #         e.g. if S = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # 1st Solution:\n    # The idea is to:\n    # 1. Split a list into two pieces using integer indexing\n    # 2. Using this split, separate the other elements of the list to be used.\n    # 3. Return the list of the splits.\n    \n    # 1. Split a list into two pieces using integer indexing\n    list_split = [S[i::step] for i in range(step)]\n    \n    # 2. Using this split, separate the other elements of the list to be used.\n    for i in range(step - 1):\n        list_split[i] = list_split[i] + [S[i + step]]\n    \n    return list_split\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 1:\n        return [S]\n    if len(S) % step == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)] + [S[i:i+step] for i in range(step, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    step = step - 1\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l ** 2\n    print(\"The lateral surface area of a cube with side length {} is {}.\".format(l, area))\n    \ndef lateral_surface_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    area = 4 * 3.14159265359 * (r ** 2)\n    print(\"The lateral surface area of a sphere with radius {} is {}.\".format(r, area))\n    \ndef lateral_surface_area_cuboid(b, h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given its height and width.\n    '''\n    area = 2 * b * h\n    print(\"The lateral surface area of a cuboid with height {} and width {} is {}.\".format(h, b, area))\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import sqrt\n    return 6 * l * l\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateral_surface(l):\n        return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l**2\n    print area\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if type(l)!= int and type(l)!= float:\n        raise TypeError(\"Please input an integer or float\")\n    if l < 0:\n        raise ValueError(\"Please input a positive value\")\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1) if i%2==1])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if type(n)!= int:\n        return \"The input should be an integer\"\n    if n <= 0:\n        return \"The input should be a positive integer\"\n    total = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            total += i**2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(1, n+1) if x % 2 == 1])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x*x for x in range(1,n+1,2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 'ERROR'\n    else:\n        if n % 2 == 0:\n            return 0\n        else:\n            return n**2\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return int((n**2)*(n+1)/2)\n    \ndef square_Sum2(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return int((n*(n+1)*(2*n+1))/6)\n    \ndef product_of_Primes(n):  \n    '''\n    Write a python function that takes in an integer n and returns the product of the first n primes.\n    '''\n    return int(n*(n+1)/2)\n    \ndef factorial_of_Primes(n):  \n    '''\n    Write a python function that takes in an integer n and returns the factorial of the first n primes.\n    '''\n    return int(n*(n-1)*(n-2)*(n-3)/6)\n    \ndef sum_of_Primes(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the first n primes.\n    '''\n    return int(n*(n+1)/2)\n    \ndef sum_of_Primes2(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the first n primes.\n    '''\n    return int((n+1)*n/2)\n    \ndef sum_of_Primes3(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the first n primes.\n    '''\n    return int((n*(n+1)*(2*n+1))/6)\n    \ndef fib_sequence(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    fib = [0,1]\n    for i in range(n-2):\n        fib.append(fib[-1]+fib[-2])\n    return fib[-1]\n    \ndef fib_sequence2(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    fib = [0,1]\n    for i in range(n-2):\n        fib.append(fib[-1]+fib[-2])\n    return fib[n-1]\n    \ndef fib_sequence3(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n    \ndef fib_sequence4(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    return fib_sequence4(n-1) + fib_sequence4(n-2)\n    \ndef fib_sequence5(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    return fib_sequence5(n-1) + fib_sequence5(n-2)\n    \ndef fib_sequence6(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[-1]+fib[-2])\n    return fib[n]\n    \ndef fib_sequence7(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[-1] + fib[-2])\n    return fib\n    \ndef fib_sequence8(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[-1] + fib[-2])\n    return fib[n]\n    \ndef fib_sequence9(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[-1] + fib[-2])\n    return fib\n    \ndef fib_sequence10(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[-1] + fib[-2])\n    return fib\n    \ndef fib_sequence11(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[-1] + fib[-2])\n    return fib\n    \ndef fib_sequence12(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[-1] + fib[-2])\n    return fib\n    \ndef fib_sequence13(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[-1] + fib[-2])\n    return fib\n    \ndef fib_sequence14(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[-1] + fib[-2])\n    return fib[n]\n    \ndef fib_sequence15(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[-1] + fib[-2])\n    return fib\n    \ndef fib_sequence16(n):  \n    '''\n    Write a python function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[-1] + fib[-2])\n    return fib\n    \ndef fib_sequence17"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop to sum the squares of the first n odd natural numbers\n    for i in range(1,n+1,2):\n        sum = sum + (i**2)\n    # return sum\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    total = 0\n    for num in range(1, n+1, 2):\n        total += num**2\n    \n    return total\n    \n    "
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1, n):\n        if i%2!= 0:\n            result += i*i\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    return find_star_num(n-1) + n * find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (find_star_num(n-1) + 3 * (n-1))\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    result = 0\n    n_factorial = 1\n    for i in range(1, n+1):\n        n_factorial *= i\n    \n    result = n_factorial/(n_factorial-n)\n    \n    return result\n    \n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    m = 2\n    k = 1\n    while m <= n:\n        k = k * m\n        m = m + 1\n    return k / (m - 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (find_star_num(n-1) * (n - find_star_num(n-1)))\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1\n    while n > 0:\n        if n % 2 == 0:\n            n = n / 2\n            star_num += 1\n        else:\n            n = n - 1\n            star_num += 1\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # ***************\n    #   Pseudo code\n    # ***************\n    # \n    # Define num_star_pattern(n) to find then'th star number in a pattern\n    # \n    # \n    # ***************\n    #   Parameters\n    # ***************\n    # n - then'th star number\n    # \n    # \n    # ***************\n    #   Return\n    # ***************\n    # \n    # \n    # ***************\n    #   Notes\n    # ***************\n    # \n    # \n    # ***************\n    #   Examples\n    # ***************\n    # \n    # ***************\n    #   Tests\n    # ***************\n    # \n    # \n    # ***************\n    #   Analysis\n    # ***************\n    # \n    # \n    # ***************\n    #   Design\n    # ***************\n    # \n    # \n    # ***************\n    # \n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1\n    for i in range(n):\n        star_num *= (i+1)\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = 0\n    while star < n:\n        star = star + 1\n        print '*'\n    print\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return factorial(n)/(factorial(n-5)*factorial(5))\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k)!= str:\n        return\n    try:\n        return ord(k)\n    except:\n        return\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    if k in range(32, 127):\n        return k\n    else:\n        return None\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k in range(97,123):\n        return(k)\n    elif k in range(65,91):\n        return(k-32)\n    else:\n        return(-1)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[i] for i in xrange(0, len(arr), 2) if i%2==0)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total_sum = 0\n    for index, item in enumerate(arr):\n        if index % 2 == 0 and item % 2 == 0:\n            total_sum += item\n    return total_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in xrange(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_e=0\n    for i in xrange(len(arr)):\n        if(i%2==0 and arr[i]%2==0):\n            sum_e+=arr[i]\n    return sum_e\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    return sum(arr[:len(arr)//2]) + sum(arr[len(arr)//2:])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = 0\n    for i in range(0, len(arr), 2):\n        even += arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Define a variable to hold the sum of even numbers\n    sum_of_even_numbers = 0 \n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # result = 0\n    # for i in range(len(arr)):\n    #     if i%2 == 0:\n    #         result += arr[i]\n    # return result\n    return sum(arr[i] for i in range(len(arr)) if i%2 == 0)\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    new_arr = [i for i in arr if i%2 == 0]\n    new_arr2 = [new_arr[i]+new_arr[i+1] for i in range(0,len(new_arr),2)]\n    return sum(new_arr2)\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0,len(arr)):\n        if(i%2==0):\n            if(arr[i]%2==0):\n                total+=arr[i]\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if type(n) == int:\n        return sum([num**5 for num in range(2,n+1) if num%2 == 0])\n    else:\n        print(\"Input n is not an integer\")\n        return None\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<0:\n        return 0\n    else:\n        return n*(n+1)*(2*n+1)*(3*n+1)*(4*n+1)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # your code here\n    return sum([x**5 for x in range(0,n,2) if x**5 < 2000000])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([2**(i**5) for i in range(n)])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<=0:\n        return False\n    \n    total = 0\n    for i in range(n):\n        if i**5%2 == 0:\n            total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return even_Power_Sum(n-1) + n**5\n        \n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(x**5 for x in range(n) if x%2==0)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2,n+1,2):\n        total += (i**5)\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum( [ i**5 for i in range(0,n,2) ] )\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i**5 % 2 == 0:\n            total += i**5\n    return total\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [element[-1] for element in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(x[1]) for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(t[1]) for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    output_tup = []\n    for i in range(len(test_tup1)):\n        output_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(output_tup)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    new_tup = ()\n    \n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] - test_tup2[i],)\n    \n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i]-test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"lengths do not match\")\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += (test_tup1[i] - test_tup2[i],)\n    return test_tup3\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    if tup1_len > tup2_len:\n        long_tup = test_tup1\n        short_tup = test_tup2\n    else:\n        long_tup = test_tup2\n        short_tup = test_tup1\n    if tup1_len > tup2_len:\n        for i in range(tup1_len):\n            long_tup = (long_tup[0] - short_tup[0],long_tup[1] - short_tup[1],long_tup[2] - short_tup[2])\n    else:\n        for i in range(tup2_len):\n            long_tup = (long_tup[0] - short_tup[0],long_tup[1] - short_tup[1],long_tup[2] - short_tup[2])\n    return long_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(0, len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup1 = []\n    for i in range(len(test_tup1)):\n        new_tup1.append(test_tup1[i]-test_tup2[i])\n    return tuple(new_tup1)\n    \n    \n    \ndef r_squared(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the coefficient of determination, R^2.\n    '''\n    x_avg = sum(test_tup1)/len(test_tup1)\n    y_avg = sum(test_tup2)/len(test_tup2)\n    \n    tot = 0\n    for i in range(len(test_tup1)):\n        tot += (test_tup1[i]-x_avg)*(test_tup2[i]-y_avg)\n    \n    x_sq = 0\n    for i in range(len(test_tup1)):\n        x_sq += (test_tup1[i]-x_avg)**2\n    \n    y_sq = 0\n    for i in range(len(test_tup2)):\n        y_sq += (test_tup2[i]-y_avg)**2\n    \n    return 1-(tot/((x_sq*y_sq)**.5))\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomialCoeff = [0 for i in range(n + 1)] \n    binomialCoeff[0] = 1\n    binomialCoeff[1] = 1\n    for i in range(2, n + 1): \n        binomialCoeff[i] = binomialCoeff[i - 1] * i \n    return sum(binomialCoeff[::2]) \n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return (n*even_binomial_Coeff_Sum(n-1))/math.factorial(n)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(n):\n        total += (n - i) * ((n - i) + 1) / 2\n    return total\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # n = 6\n    # ( ( n + 1 ) * n / 2) - ((n - 1) * (n - 1) / 2)\n    # ( ( n + 1 ) * n / 2) - ((n - 1) * (n - 1) / 2)\n    return ( ( n + 1 ) * n / 2) - ((n - 1) * (n - 1) / 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if (n==0) or (n==1):\n        return 1\n    else:\n        return (even_binomial_Coeff_Sum(n-1)*n)\ndef binomial_coefficient(n,r):\n    '''\n    Write a python function that takes in two positive integers n and r and finds the binomial coefficient of n.\n    The binomial coefficient (nCr) is the number of ways in which a r-length array of items can be chosen from a set of n items.\n    For example, the binomial coefficient for 2 and 3 is (2*3)/(2!*3!)=2/6.\n    '''\n    \n    if (r==0) or (n==r):\n        return 1\n    else:\n        return (binomial_coefficient(n-1,r-1)*n)\ndef generate_permutation_with_duplicates(n):\n    '''\n    Write a python function that takes in a positive integer n and generates a random permutation with no duplicates.\n    '''\n    if (n==1):\n        return [0]\n    else:\n        l=generate_permutation_with_duplicates(n-1)\n        return [l[i] for i in range(n)]\ndef generate_permutations_with_duplicates(n):\n    '''\n    Write a python function that takes in a positive integer n and generates all permutations with duplicates.\n    For example, for n=3, the output should be [[0,1,2],[0,2,1],[1,0,2],[1,2,0],[2,0,1],[2,1,0]].\n    '''\n    if (n==1):\n        return [[0]]\n    else:\n        l=generate_permutations_with_duplicates(n-1)\n        r=[]\n        for i in range(len(l)):\n            for j in range(len(l[i])+1):\n                s=l[i][:]\n                s.insert(j,n-1)\n                r.append(s)\n        return r\ndef generate_permutations(n):\n    '''\n    Write a python function that takes in a positive integer n and generates all permutations without duplicates.\n    For example, for n=3, the output should be [[0,1,2],[0,2,1],[1,0,2],[1,2,0],[2,0,1],[2,1,0]].\n    '''\n    if (n==1):\n        return [[0]]\n    else:\n        l=generate_permutations(n-1)\n        r=[]\n        for i in range(len(l)):\n            for j in range(len(l[i])+1):\n                s=l[i][:]\n                s.insert(j,n-1)\n                if s not in r:\n                    r.append(s)\n        return r\ndef count_permutations(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of permutations of length n.\n    '''\n    if (n==0) or (n==1):\n        return 1\n    else:\n        return (count_permutations(n-1)*(n+1))\ndef generate_permutation_with_duplicates_and_repetitions(n,k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and generates a random permutation with no duplicates and no more than k repetitions.\n    For example, for n=3 and k=2, the output should be [[0,1,2],[0,2,1],[1,0,2],[1,2,0],[2,0,1],[2,1,0]].\n    '''\n    if (n==1) or (k==1):\n        return [[0]]\n    else:\n        l=generate_permutation_with_duplicates_and_repetitions(n-1,k-1)\n        r=[]\n        for i in range(len(l)):\n            for j in range(len(l[i])+1):\n                s=l[i][:]\n                s.insert(j,n-1)\n                if s not in r:\n                    r.append(s)\n                if (s not in l) and (s not in r) and (s not in l[i]):\n                    r.append(s)\n                if len(r)>=k:\n                    return r\n        return r\ndef generate_permutations_with_duplicates_and_repetitions(n,k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and generates all permutations with no duplicates and no more than k repetitions.\n    For example, for n=3 and k=2, the output should be [[0,1,2],[0,2,1],[1,0,2],[1,2,0],[2,0,1],[2,1,0]].\n    '''\n    if (n==1) or (k==1):\n        return [[0]]\n    else:\n        l=generate_permutations_with_duplicates_and_repetitions(n-1,k-1)\n        r=[]\n        for i in range(len(l)):\n            for j in range(len(l[i])+1):\n                s=l[i][:]\n                s.insert(j,n-1)\n                if s not in r:\n                    r.append(s)\n                if (s not in l) and (s not in r) and (s not in l[i]):\n                    r.append(s)\n                if len(r)>=k:\n                    return r\n        return r\ndef count_permutations_with_duplicates_and_repetitions(n,k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and returns the number of permutations with no duplicates and no more than k repetitions.\n    '''\n    if (n==1) or (k==1):\n        return 1\n    else:\n        return (count_permutations_with_duplicates_and_repetitions(n-1,k-1)*(n+1))\ndef generate_lexicographic_permutations(n):\n    '''\n    Write a python function that takes in a positive integer n and generates all lexicographic permutations of length n.\n    For example, for n=3, the output should be [[0,1,2],[0,2,1],[1,0,2],[1,2,0],[2,0,1],[2,1,0]].\n    '''\n    if (n==0) or (n==1):\n        return [[]]\n    else:\n        l=generate_lexicographic_permutations(n-1)\n        r=[]\n        for i in range(len(l)):\n            for j in range(len(l[i])+1):\n                s=l[i][:]\n                s.insert(j,n-1)\n                r.append(s)\n        return r\ndef generate_lexicographic_permutations_with_repetitions(n):\n    '''\n    Write a python function that takes in a positive integer n and generates all lexicographic permutations with repetitions of length n.\n    For example, for n=3, the output should be [[0,1,2],[0,2,1],[1,0,2],[1,2,0],[2,0,1],[2,1,0]].\n    '''\n    if (n==0) or (n==1):\n        return [[]]\n    else:\n        l=generate_lexicographic_permutations_with_repetitions(n-1)\n        r=[]\n        for i in range(len(l)):\n            for j in range(len(l[i])+1):\n                s=l[i][:]\n                s.insert(j,n-1)\n                if s not in r:\n                    r.append(s)\n                if s not in l:\n                    r.append(s)\n        return r\ndef count_lexicographic_permutations_with_repetitions(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of permutations of length n with repetition"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    assert(n >= 0)\n    if (n == 0 or n == 1):\n        return 1\n    if (n == 2):\n        return 1\n    else:\n        return  binomial_Coeff(n) / n\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*even_binomial_Coeff_Sum(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(n+1):\n        result += (math.factorial(n)/(math.factorial(i) * math.factorial(n-i)))\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in xrange( 0, n):\n        total += n - i\n    return total\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0;\n    for i in range(0, n + 1):\n        a = math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n        if (i % 2 == 0):\n            sum += a\n    return sum\ndef factorial(n):\n    if (n == 0):\n        return 1\n    else:\n        return n * factorial(n-1)\ndef even_binomial_Coeff_Factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of n modulo 10^9+7\n    '''\n    sum = 0\n    for i in range(0, n + 1):\n        a = math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n        if (i % 2 == 0):\n            sum += a\n    return sum\ndef power_mod(base, exponent, mod):\n    '''\n    Write a python function that takes in three positive integers base, exponent, mod and returns the result of the exponentiation modulo mod.\n    '''\n    if (base == 0):\n        return 0\n    elif (exponent == 0):\n        return 1\n    elif (exponent == 1):\n        return (base % mod)\n    elif (exponent % 2 == 0):\n        return ((power_mod(base, exponent / 2, mod) ** 2) % mod)\n    else:\n        return ((base % mod) * (power_mod(base, (exponent - 1) / 2, mod) ** 2) % mod)\ndef power_mod_iterative(base, exponent, mod):\n    '''\n    Write a python function that takes in three positive integers base, exponent, mod and returns the result of the exponentiation modulo mod.\n    '''\n    if (base == 0):\n        return 0\n    elif (exponent == 0):\n        return 1\n    elif (exponent == 1):\n        return (base % mod)\n    elif (exponent % 2 == 0):\n        return ((power_mod_iterative(base, exponent / 2, mod) ** 2) % mod)\n    else:\n        return ((base % mod) * (power_mod_iterative(base, (exponent - 1) / 2, mod) ** 2) % mod)\ndef check_perfect_square(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a perfect square and False otherwise.\n    '''\n    if (n == 0):\n        return False\n    elif (n == 1):\n        return True\n    else:\n        return check_perfect_square(n/2)\ndef compute_binomial_coefficient(n, m):\n    '''\n    Write a python function that takes in two positive integers n and m and returns the binomial coefficient of n over m.\n    '''\n    if (n < m):\n        return compute_binomial_coefficient(n, m - 1) * (n - 1)\n    elif (n == m):\n        return 1\n    else:\n        return compute_binomial_coefficient(n - 1, m)\ndef compute_binomial_coefficient_iterative(n, m):\n    '''\n    Write a python function that takes in two positive integers n and m and returns the binomial coefficient of n over m.\n    '''\n    if (n < m):\n        return compute_binomial_coefficient_iterative(n, m - 1) * (n - 1)\n    elif (n == m):\n        return 1\n    else:\n        return compute_binomial_coefficient_iterative(n - 1, m)\ndef binomial_coefficient_mod(n, m):\n    '''\n    Write a python function that takes in two positive integers n and m and returns the binomial coefficient of n over m modulo 10^9+7.\n    '''\n    if (n < m):\n        return binomial_coefficient_mod(n, m - 1) * (n - 1) % mod\n    elif (n == m):\n        return 1\n    else:\n        return binomial_coefficient_mod(n - 1, m) * (n - 1) % mod\ndef binomial_coefficient_mod_iterative(n, m):\n    '''\n    Write a python function that takes in two positive integers n and m and returns the binomial coefficient of n over m modulo 10^9+7.\n    '''\n    if (n < m):\n        return binomial_coefficient_mod_iterative(n, m - 1) * (n - 1) % mod\n    elif (n == m):\n        return 1\n    else:\n        return binomial_coefficient_mod_iterative(n - 1, m) * (n - 1) % mod\ndef primes_less_than(n):\n    '''\n    Write a python function that takes in a positive integer n and returns a list of all primes less than n.\n    '''\n    primes = [2]\n    for i in range(3, n + 1):\n        if (i % 2!= 0):\n            primes.append(i)\n    return primes\ndef number_of_primes_less_than_n(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of primes less than n.\n    '''\n    count = 0\n    primes = primes_less_than(n)\n    for i in range(0, len(primes)):\n        if (primes[i] <= n):\n            count += 1\n    return count\ndef prime_factors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns a list of the prime factors of n.\n    '''\n    prime_factors = []\n    while (n % 2 == 0):\n        prime_factors.append(2)\n        n /= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while (n % i == 0):\n            prime_factors.append(i)\n            n /= i\n    if (n > 2):\n        prime_factors.append(n)\n    return prime_factors\ndef count_prime_factors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of prime factors of n.\n    '''\n    count = 0\n    prime_factors = prime_factors(n)\n    for i in range(0, len(prime_factors)):\n        count += 1\n    return count\ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the digits of n modulo 10^9+7.\n    '''\n    sum = 0\n    while (n > 0):\n        sum += n % 10\n        n /= 10\n    return sum\ndef sum_of_digits_iterative(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the digits of n modulo 10^9+7.\n    '''\n    sum = 0\n    while (n > 0):\n        sum += n % 10\n        n /= 10\n    return sum\ndef sum_of_digits_recursive(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the digits of n modulo 10^9+7.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return (n % 10) + sum_of_digits_recursive(n / 10)\ndef sum_of_digits_mod(n, mod):\n    '''\n    Write a python function that takes in a positive integer n and a modulus m and returns the sum of the digits of n modulo m.\n    '''\n    if (n < 0):\n        return -1 * sum_of_digits_mod(-n, mod)\n    else:\n        return sum_of_digits_recursive(n) % mod\ndef sum_of_digits_mod_iterative(n, mod):\n    '''\n    Write a python function that takes in a positive integer n and a modulus m and returns the sum of the digits of n modulo m.\n    '''\n    if (n "
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265359\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return round(pi*r**2*h,4)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**2 * math.pi * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return round(math.pi * r**2 * h,2)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*r*r*h)/3.0\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return round((pi * r**2) * h,3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the volume.\n    '''\n    from math import pi\n    return round((4/3) * pi * r**3,3)\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={k:v for k,v in dict.items() if v >= n}\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,val in dict.items():\n        if val >= n:\n            new_dict[key] = val\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for k,v in dict.items():\n        if v>=n:\n            new_dict[k]=v\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict([(k,v) for (k,v) in dict.items() if v >= n])\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    import collections\n    #return len(test_tup) - collections.Counter(test_tup).most_common(1)[0][1]\n    return len(test_tup) - collections.Counter(test_tup).most_common(1)[0][1]\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_index = -1\n    for i in range(0, len(test_tup)):\n        if test_tup[i] == \"e\":\n            first_index = i\n            break\n    return first_index\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    global count\n    count = 0\n    if type(test_tup) is tuple:\n        for i in test_tup:\n            if type(i) is not int:\n                for j in i:\n                    if type(j) is int:\n                        count += 1\n    else:\n        print 'Please input a tuple'\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    res = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            res += 1\n        elif test_tup[i] == test_tup[i-1]:\n            res += 1\n    return res\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(tup) - tup.index(test_tup) - 1\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # test_tup = (5, 2, 1, 4, 8, 3, 0, 6)\n    first_elements = [test_tup[i] for i in range(len(test_tup)) if i == 0]\n    return len(first_elements)\n    \nprint(count_first_elements((5, 2, 1, 4, 8, 3, 0, 6))) # 4\nprint(count_first_elements((5, 2, 1, 4, 8, 3, 6, 0))) # 0\nprint(count_first_elements((5, 2, 1, 4, 8, 3, 6, 9))) # 0\nprint(count_first_elements((5, 2, 1, 4, 8, 3, 6, 9, 3))) # 1\nprint(count_first_elements((5, 2, 1, 4, 8, 3, 6, 9, 3, 2))) # 2\nprint(count_first_elements((5, 2, 1, 4, 8, 3, 6, 9, 3, 2, 1))) # 3\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_elements = 0\n    for elem in test_tup:\n        if elem == test_tup[0]:\n            num_elements += 1\n        else:\n            break\n    return num_elements\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if test_tup == ():\n        return 0\n    if len(test_tup) == 1:\n        return 0\n    # case of a tuple of size two\n    if len(test_tup) == 2:\n        return 1 if test_tup[0] < test_tup[1] else 0\n    # case of a tuple of size greater than 2\n    if test_tup[0] < test_tup[1]:\n        return 1 + count_first_elements(test_tup[1:])\n    else:\n        return 0 + count_first_elements(test_tup[1:])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # return test_tup.count(test_tup[0])\n    return sum(1 for item in test_tup if item == test_tup[0])\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n-1)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n-1)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_count = 1\n    temp = 1\n    i = 1\n    while decagonal_count < n:\n        temp += 2 * i\n        i += 1\n        decagonal_count += 1\n    return temp\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n < 1:\n        return None\n    else:\n        return (n*(n+1))/2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return int(n*(n+1)/2)\n    else:\n        return int(n*(3*n-1)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    d = 1\n    n -= 1\n    \n    for x in xrange(1, n+1):\n        d += 9 * x\n        if d > n:\n            return x\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    start_index = 1\n    end_index = 0\n    i = 1\n    num = 0\n    while(end_index <= n):\n        start_index = end_index\n        end_index = i * (10 ** (i - 1)) + (start_index - 1)\n        i += 1\n    end_index = n + 1\n    num = start_index - (end_index - 1) * 10\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    if n <= 3:\n        return n * (n + 1) // 2\n    else:\n        return 2 * is_num_decagonal(n - 1) - 1\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 10\n    else:\n        return (n * (n + 1)) / 2\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n    \ndef binsearch(arr, val):\n    '''\n    Write a function that takes in a sorted array and a value and returns the index of the value if it is in the array, -1 if it is not.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    if len(arr) == 1:\n        if arr[0] == val:\n            return 0\n        else:\n            return -1\n        \n    half = len(arr) / 2\n    \n    if arr[half] == val:\n        return half\n    elif arr[half] < val:\n        return binsearch(arr[half:], val)\n    else:\n        return binsearch(arr[:half], val)\n        \ndef rec_binsearch(arr, val):\n    '''\n    Write a function that takes in a sorted array and a value and returns the index of the value if it is in the array, -1 if it is not.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    if len(arr) == 1:\n        if arr[0] == val:\n            return 0\n        else:\n            return -1\n        \n    half = len(arr) / 2\n    \n    if arr[half] == val:\n        return half\n    elif arr[half] < val:\n        return rec_binsearch(arr[half:], val)\n    else:\n        return rec_binsearch(arr[:half], val)\n    \ndef binary_search(arr, val):\n    if len(arr) == 0:\n        return -1\n    \n    if len(arr) == 1:\n        if arr[0] == val:\n            return 0\n        else:\n            return -1\n        \n    half = len(arr) / 2\n    \n    if arr[half] == val:\n        return half\n    elif arr[half] < val:\n        return binary_search(arr[half:], val)\n    else:\n        return binary_search(arr[:half], val)\n        \ndef int_2_bin(int_val):\n    bin_list = []\n    \n    while int_val!= 0:\n        bin_list.append(int_val % 2)\n        int_val = int_val / 2\n        \n    return list(reversed(bin_list))\n    \ndef bin_2_int(bin_list):\n    '''\n    Write a function that takes in a list of ones and zeros and returns the integer value that the list represents.\n    '''\n    int_val = 0\n    for i in bin_list:\n        int_val = int_val * 2 + i\n    \n    return int_val\n    \ndef is_rotation(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a boolean that indicates if the two strings are rotation of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n    for i in range(len(str1)):\n        if str2[i:] == str2[i:len(str2)]:\n            return True\n        elif str2[i:] == str2[i:len(str2)] + str2[:i]:\n            return True\n    return False\n        \ndef is_rotation2(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a boolean that indicates if the two strings are rotation of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n    i = 0\n    j = len(str1)\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            return False\n            \n        i += 1\n        j += 1\n    return True\n        \ndef is_rotation3(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a boolean that indicates if the two strings are rotation of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n    i = 0\n    j = len(str1)\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            return False\n            \n        i += 1\n        j += 1\n    return True\n        \ndef is_rotation4(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a boolean that indicates if the two strings are rotation of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n    i = 0\n    j = len(str1)\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            return False\n            \n        i += 1\n        j += 1\n    return True\n        \ndef is_rotation5(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a boolean that indicates if the two strings are rotation of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n    i = 0\n    j = len(str1)\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            return False\n            \n        i += 1\n        j += 1\n    return True\n        \ndef is_rotation6(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a boolean that indicates if the two strings are rotation of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n    i = 0\n    j = len(str1)\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            return False\n            \n        i += 1\n        j += 1\n    return True\n        \ndef is_rotation7(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a boolean that indicates if the two strings are rotation of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n    i = 0\n    j = len(str1)\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            return False\n            \n        i += 1\n        j += 1\n    return True\n        \ndef is_rotation8(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a boolean that indicates if the two strings are rotation of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n    i = 0\n    j = len(str1)\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            return False\n            \n        i += 1\n        j += 1\n    return True\n        \ndef is_rotation9(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a boolean that indicates if the two strings are rotation of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n    i = 0\n    j = len(str1)\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            return False\n            \n        i += 1\n        j += 1\n    return True\n        \ndef is_rotation10(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a boolean that indicates if the two strings are rotation of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n    i = 0\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i, val in enumerate(dlist):\n        if val == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = None\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            position = (True, i)\n    if position == None:\n        position = (False, -1)\n    return position\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            pos = i\n            break\n    return (found, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    idx = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            idx = i\n    return (True, idx) if idx!= -1 else (False, idx)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    while index < len(dlist):\n        if dlist[index] == item:\n            return (True, index)\n        else:\n            index += 1\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    is_in = False\n    position = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            is_in = True\n            position = i\n            break\n    return (is_in, position)\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if(test_list[i] == test_list[j]):\n                unique = False\n    if unique:\n        print(\"The elements are unique\")\n    else:\n        print(\"The elements are not unique\")\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    a = set(test_list)\n    if len(a) == len(test_list):\n        print('All elements are unique')\n    else:\n        print('Elements are not unique')\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for item in test_list:\n        if test_list.count(item) > 1:\n            return False\n    return True\n    \ndef missing_number(test_list):\n    '''\n    Write a python function to find the missing number in a given list of integers, if list contains all numbers from 1 to n.\n    If the list contains some numbers which are not in the range from 1 to n, then return the number which is not in the list.\n    '''\n    \n    if len(test_list) == 0:\n        return None\n    \n    for i in range(1, max(test_list)):\n        if i not in test_list:\n            return i\n    \ndef greatest_product(test_list):\n    '''\n    Write a python function to find the greatest product of three integers in a list.\n    '''\n    \n    product = 1\n    for i in test_list:\n        product *= i\n    \n    return product\n    \ndef matrix_search(matrix, target):\n    '''\n    Write a python function to search a given integer value in a given matrix.\n    '''\n    \n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return True\n    return False\n    \ndef number_of_trails(number):\n    '''\n    Write a python function to count the number of possible trails that can be made from a number of stairs,\n    given that only two types of stairs can be used at a time and the number of different ways of making a number of stairs is the number of ways to make a number of stairs modulo 10^9+7\n    '''\n    \n    if number < 0:\n        return 0\n    if number == 0:\n        return 1\n    \n    stairs = 1\n    ways = 1\n    \n    for i in range(number):\n        stairs *= 2\n        ways *= (number - i)\n    \n    return ways % (10**9 + 7)\n    \ndef number_of_ways(number):\n    '''\n    Write a python function to count the number of possible ways that can be made from a number of stairs,\n    given that only two types of stairs can be used at a time and the number of different ways of making a number of stairs is the number of ways to make a number of stairs modulo 10^9+7\n    '''\n    \n    if number < 0:\n        return 0\n    if number == 0:\n        return 1\n    \n    stairs = 1\n    ways = 1\n    \n    for i in range(number):\n        stairs *= 2\n        ways *= (number - i)\n    \n    return ways % (10**9 + 7)\n    \ndef find_max_dist_segment(segment_list):\n    '''\n    Write a python function to find the maximum distance between any two points in a given set of points.\n    '''\n    \n    distance_list = []\n    \n    for i in range(len(segment_list)):\n        for j in range(i + 1, len(segment_list)):\n            distance_list.append(distance_between_points(segment_list[i], segment_list[j]))\n    \n    return max(distance_list)\n    \ndef number_of_common_divisors(a, b):\n    '''\n    Write a python function to find the number of common divisors of two integers.\n    '''\n    \n    temp_a = a\n    temp_b = b\n    count = 0\n    \n    while temp_a!= 1:\n        if temp_a % temp_b == 0:\n            count += 1\n            temp_a = temp_a / temp_b\n        else:\n            temp_a = temp_a - 1\n    \n    return count\n    \ndef is_prime(test_number):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    \n    if test_number == 1:\n        return False\n    \n    for i in range(2, test_number):\n        if test_number % i == 0:\n            return False\n    \n    return True\n    \ndef nearest_prime_to_number(test_number):\n    '''\n    Write a python function to find the nearest prime number to a given number.\n    '''\n    \n    if test_number == 1:\n        return 2\n    \n    while test_number % 2 == 0:\n        test_number = test_number / 2\n    \n    for i in range(3, test_number):\n        if test_number % i == 0:\n            return i\n    \n    return test_number\n    \ndef bfs(graph, start, goal):\n    '''\n    Write a python function to perform BFS on a given graph.\n    '''\n    \n    visited = []\n    queue = [start]\n    \n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            visited.append(node)\n            queue.extend(graph[node])\n        \n        if node == goal:\n            return visited\n            \ndef bfs_dist(graph, start, goal):\n    '''\n    Write a python function to perform BFS on a given graph and return the distance from start to goal.\n    '''\n    \n    visited = []\n    queue = [start]\n    \n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            visited.append(node)\n            queue.extend(graph[node])\n            \n        if node == goal:\n            return visited\n            \ndef bfs_path(graph, start, goal):\n    '''\n    Write a python function to perform BFS on a given graph and return the path from start to goal.\n    '''\n    \n    visited = []\n    queue = [start]\n    \n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            visited.append(node)\n            queue.extend(graph[node])\n            \n        if node == goal:\n            return visited\n            \ndef find_connected_components(graph):\n    '''\n    Write a python function to find the number of connected components in a given graph.\n    '''\n    \n    visited = []\n    queue = list(graph.keys())\n    \n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            visited.append(node)\n            queue.extend(graph[node])\n    \n    return visited\n    \ndef count_connected_components(graph):\n    '''\n    Write a python function to count the number of connected components in a given graph.\n    '''\n    \n    visited = []\n    queue = list(graph.keys())\n    \n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            visited.append(node)\n            queue.extend(graph[node])\n    \n    return len(visited)\n    \ndef topological_sort(graph):\n    '''\n    Write a python function to perform a topological sort on a given graph.\n    '''\n    \n    in_degree = {}\n    for node in graph:\n        in_degree[node] = 0\n    \n    for node in graph:\n        for node_key in graph[node]:\n            in_degree[node_key] += 1\n    \n    queue = []\n    for node in in_degree:\n        if in_degree[node] == 0:\n            queue.append(node)\n    \n    visited = []\n    while queue:\n        node = queue.pop(0)\n        visited.append(node)\n        for node_key in graph[node]:\n            in_degree[node_key] -= 1\n            if in_degree[node_key] == 0:\n                queue.append(node_key)\n    \n    return visited\n    \ndef matrix_multiply(matrix1, matrix2):\n    '''\n    Write a python function to multiply two matrices.\n    '''\n    \n    if len(matrix1[0]) == len(matrix2):\n        result_matrix = [[0 for j in range(len(matrix2[0]))] for i in range(len(matrix1))]\n        for i in range(len(matrix1)):\n            for j in range(len(matri"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for item in test_list:\n        if test_list.count(item)>1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    s=set(test_list)\n    if(len(s)==len(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    temp_list = []\n    for i in range(len(test_list)):\n        if test_list[i] in temp_list:\n            unique = False\n            break\n        temp_list.append(test_list[i])\n    return unique\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if not nums1 or not nums2:\n        return []\n    if len(nums1) > len(nums2):\n        return [x - y for x, y in zip(nums1, nums2)]\n    return [x - y for x, y in zip(nums2, nums1)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        return sub_list(nums2, nums1)\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Brute force would be to do a loop to go through each element of each list, compare, then add to new list\n    # sub_list = nums1[:]\n    # for num in sub_list:\n    #     if num in nums2:\n    #         sub_list.remove(num)\n    # return sub_list\n    # return [num for num in nums1 if num not in nums2]\n    return [num for num in nums1 if num not in nums2]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #list_subtraction = []\n    # for x in nums1:\n    #     if x not in nums2:\n    #         list_subtraction.append(x)\n    # return list_subtraction\n    return [nums1[i] - nums2[i] for i in range(len(nums1)) if nums1[i] - nums2[i]!= 0]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list_diff = []\n    for i in range(len(nums1)):\n        list_diff.append(nums1[i]-nums2[i])\n    return list_diff\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    length_nums1 = len(nums1)\n    length_nums2 = len(nums2)\n    if length_nums1 > length_nums2:\n        return sub_list(nums2,nums1)\n    result = []\n    for i in range(length_nums1):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 10:\n        return True\n    elif n % 10 == 0:\n        return False\n    else:\n        digit = n % 10\n        n = n // 10\n        return validate(n) and (n % 10 > 0 and n % 10 <= digit)\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if (len(str(n)) > 1): \n        return False\n    n = str(n)\n    for i in range(0, len(n)): \n        if (n.count(str(i)) > i):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    if n < 10: \n        return True\n    \n    if n < 100: \n        if n % 10 == n:\n            return True\n        \n        else: \n            return False\n    \n    else: \n        if n % 10 == n: \n            return True\n        \n        elif n % 100 == n: \n            return True\n        \n        elif n % 1000 == n: \n            return True\n        \n        else: \n            return False\n    \n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    n = abs(n)\n    # check if n is an integer\n    if n == 0:\n        return True\n    else:\n        temp = n\n        sum = 0\n        while temp!= 0:\n            digit = temp % 10\n            sum += digit\n            temp = temp // 10\n        \n        # check if the frequency of each digit in n is less than or equal to the digit itself\n        if sum <= n:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_counts = {}\n    for d in n:\n        if d not in digit_counts:\n            digit_counts[d] = 1\n        else:\n            digit_counts[d] += 1\n    for d, count in digit_counts.iteritems():\n        if count > d:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = [0]*10\n    for i in range(n):\n        for j in range(10):\n            frequency[j] += (str(i).count(str(j)))\n    return all(x <= y for x,y in zip(frequency, frequency[1:]))\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n_str = str(n)\n    n_dict = {}\n    for i in n_str:\n        if i in n_dict:\n            n_dict[i] += 1\n        else:\n            n_dict[i] = 1\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dic = {}\n    for i in n:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return all(i <= j for i,j in dic.items())\n    \nprint(validate(str(input())))\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == 0: return False\n    return n == 1 or max(digitFrequency(n)) <= min(digitFrequency(n))\n    \ndef digitFrequency(n):\n    '''\n    Write a python function that takes in an integer and returns a list of the frequency of each digit in the integer.\n    '''\n    if n == 0: return [0]\n    return [digitFrequency(n//10) for i in range(0, n%10)]\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    import operator\n    dict_ = {}\n    for i in n:\n        if i in dict_:\n            dict_[i] += 1\n        else:\n            dict_[i] = 1\n    sorted_dict = sorted(dict_.iteritems(), key=operator.itemgetter(1))\n    sorted_dict.reverse()\n    for i in sorted_dict:\n        if i[1] > int(i[0]):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list[0] == element:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for x in list:\n        if x!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n    \ndef lists_functions():\n    '''\n    Write a function that takes in two lists of equal length and returns True if they are equal or False if they are not.\n    '''\n    list1 = []\n    list2 = []\n    list1.append(2)\n    list1.append(3)\n    list1.append(1)\n    list2.append(2)\n    list2.append(1)\n    list2.append(3)\n    if list1 == list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[i]==list[0] for i in range(len(list)))\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    count = 0\n    for i in range(len(text)):\n        if (text[i] == 'a' and text[i+1] == 'b' and text[i+2] == 'b'):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'(.*)(ab){2,3}', text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count('b')==1 or text.count('b')==2:\n        return True\n    else:\n        return False\ndef text_match_one_two(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's\n    '''\n    if text.count('a')==text.count('b'):\n        return True\n    else:\n        return False\ndef text_match_two_three_split(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_two_three_strip(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_split(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_strip(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one_split(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one_strip(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one_one_one(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one_one_split(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one_one_strip(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one_one_one_one(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one_one_one_split(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one_one_one_one_strip(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one_one_one_one_one_one(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one_one_one_one_split(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one_one_one_one_one_one_split(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.count('b') and (text.count('b')==1 or text.count('b')==2):\n        return True\n    else:\n        return False\ndef text_match_one_two_one_one_one_one_one_one_one_one_one(text):\n    '''\n    Write a function that checks whether a string contains a sequence of one or more 'a's and then some number of 'b's, separated by only one or two spaces.\n    '''\n    if text.count('a')==text.coun"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.match(r'^[ab]{2,3}$', text))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #list = re.findall(r'(?=a(b|bb))', text)\n    #print list\n    #return list\n    pass\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.match(r'.*(\\w+a\\w{2,3}b).*',text))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'ab{1,3}',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_new(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]{1,3}',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_2(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]{1,3}',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_3(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]{1,3}',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_4(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_5(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_6(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_7(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_8(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_9(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_10(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_11(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_12(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_13(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_14(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_15(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_16(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_17(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_18(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'a[ab]*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_two_three_or_new_19(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search('ab{2,3}',text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and (text.count('b') == 2 or text.count('b') == 3):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'.*a.bb')\n    if re.match(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize sums of different sizes and length\n    sums = []\n    max_sum = []\n    for i in range(n):\n        sums.append([0 for j in range(k)])\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = 0\n    for i in xrange(n):\n        for j in xrange(k):\n            result = max(result, sum(a[i:i+k]))\n    return result\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize result\n    max_sum = -9999999\n    # Traverse the array\n    for i in range(n):\n        sum = 0\n        # Find the sum of the current sub-array\n        for j in range(k):\n            sum += a[i]\n        # Update result if sum is more\n        max_sum = max(max_sum, sum)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    res = 0\n    sum = 0\n    for i in range(0,n):\n        sum += a[i]\n        if(sum>res and k > 0):\n            res = sum\n            k = k-1\n    if(k>0):\n        res = res * k\n    return res\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    temp_sum = 0\n    for i in range(n):\n        temp_sum += a[i]\n        if i >= k-1:\n            temp_sum -= a[i-(k-1)]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n    else:\n        for i in range(k-1, n):\n            a[i] += a[i-k]\n    return max(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    temp = [0 for i in range(k)]\n    for i in range(k):\n        temp[i] = max(a)\n        a.remove(max(a))\n    return max(temp)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sub_array_sum = 0\n    for i in xrange(n):\n        for j in xrange(i+1,n+1):\n            sum = 0\n            for m in xrange(i,j):\n                sum += a[m]\n            if sum > max_sub_array_sum and j-i >= k:\n                max_sub_array_sum = sum\n    return max_sub_array_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum, curr_sum = 0, 0\n    for i in range(k):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(curr_sum, max_sum)\n    for i in range(k, n):\n        curr_sum = max(a[i] + a[i - k], curr_sum)\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    current_sum = 0\n    start_index = 0\n    end_index = 0\n    current_sum = sum(a[:k])\n    max_sum = current_sum\n    start_index = 0\n    end_index = k\n    for i in range(0, n-k):\n        current_sum = current_sum - a[start_index] + a[end_index]\n        start_index = start_index + 1\n        end_index = end_index + 1\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #number = 0\n    #for i in range(n+1):\n    #    if (i % 2 == 0):\n    #        number += i ** 2\n    #return number\n    return sum([i ** 2 for i in range(n + 1) if i % 2 == 0])\n    \ndef sum_of_odd(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all odd numbers from 1 to n.\n    '''\n    return sum([i for i in range(n + 1) if i % 2!= 0])\n    \ndef sum_of_odd_squares(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all odd squares from 1 to n.\n    '''\n    return sum([i ** 2 for i in range(1, n + 1, 2)])\n    \ndef sum_of_n_primes(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all prime numbers from 1 to n.\n    '''\n    return sum([i for i in range(2, n + 1) if is_prime(i)])\n    \ndef sum_of_primes_squares(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all prime numbers from 1 to n whose squares are less than or equal to n.\n    '''\n    return sum([i * i for i in range(2, n + 1) if is_prime(i)])\n    \ndef sum_of_primes_cubes(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all prime numbers from 1 to n whose cubes are less than or equal to n.\n    '''\n    return sum([i * i * i for i in range(2, n + 1) if is_prime(i)])\n    \ndef sum_of_pythagorean_triples(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all pythagorean triples from 1 to n.\n    '''\n    return sum([(i ** 2 - j ** 2) for i in range(2, n + 1) for j in range(i + 1, n + 1) if is_pythagorean_triple(i, j)])\n    \ndef sum_of_pythagorean_triples_and_squares(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all pythagorean triples from 1 to n whose squares are less than or equal to n.\n    '''\n    return sum([i * i * i for i in range(2, n + 1) for j in range(i + 1, n + 1) if is_pythagorean_triple(i, j)])\n    \ndef sum_of_pythagorean_triples_and_cubes(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all pythagorean triples from 1 to n whose cubes are less than or equal to n.\n    '''\n    return sum([i * i * i * i for i in range(2, n + 1) for j in range(i + 1, n + 1) if is_pythagorean_triple(i, j)])\n    \ndef sum_of_pythagorean_triples_and_cubes_and_squares(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all pythagorean triples from 1 to n whose cubes and squares are less than or equal to n.\n    '''\n    return sum([i * i * i * i for i in range(2, n + 1) for j in range(i + 1, n + 1) if is_pythagorean_triple(i, j)])\n    \ndef is_pythagorean_triple(a, b):  \n    '''\n    Write a python function takes in two integers a and b and returns True if their sum and difference are a Pythagorean triple, else returns False.\n    '''\n    return (a ** 2 + b ** 2 == (a + b) ** 2)\n    \ndef is_prime(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is a prime number, else returns False.\n    '''\n    return all(n % i!= 0 for i in range(2, int(n**0.5) + 1))\n    \ndef sum_of_all_Pythagorean_triples_of_order(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all pythagorean triples of order n.\n    '''\n    return sum([i ** 2 for i in range(1, n + 1)])\n    \ndef sum_of_all_Pythagorean_triples_of_order_and_squares(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all pythagorean triples of order n whose squares are less than or equal to n.\n    '''\n    return sum([i * i for i in range(1, n + 1)])\n    \ndef sum_of_all_Pythagorean_triples_of_order_and_cubes(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all pythagorean triples of order n whose cubes are less than or equal to n.\n    '''\n    return sum([i * i * i for i in range(1, n + 1)])\n    \ndef sum_of_all_Pythagorean_triples_of_order_and_cubes_and_squares(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all pythagorean triples of order n whose cubes and squares are less than or equal to n.\n    '''\n    return sum([i * i * i * i for i in range(1, n + 1)])\n    \ndef sum_of_all_Pythagorean_triples_of_order_and_cubes_and_squares_and_squares(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of all pythagorean triples of order n whose cubes, squares and squares are less than or equal to n.\n    '''\n    return sum([i * i * i * i for i in range(1, n + 1)])\n    \ndef is_pentagonal(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is pentagonal, else returns False.\n    '''\n    return (1 + (24 * n + 1) ** 0.5) % 6 == 0\n    \ndef is_pentagonal_square(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is pentagonal square, else returns False.\n    '''\n    return (1 + (8 * n + 1) ** 0.5) % 4 == 0\n    \ndef is_pentagonal_triple(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is pentagonal triple, else returns False.\n    '''\n    return (1 + (30 * n + 1) ** 0.5) % 6 == 0\n    \ndef is_pentagonal_cubic(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is pentagonal cubic, else returns False.\n    '''\n    return (1 + (105 * n + 1) ** 0.5) % 5 == 0\n    \ndef is_pentagonal_cubic_and_square(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is pentagonal cubic and square, else returns False.\n    '''\n    return (1 + (210 * n + 1) ** 0.5) % 4 == 0\n    \ndef is_pentagonal_cubic_and_cubic(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is pentagonal cubic and cubic, else returns False.\n    '''\n    return (1 + (840 * n + 1) ** 0.5) % 5 == 0\n    \ndef is_pentagonal_cu"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**2+square_Sum(n-1)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i**2 for i in range(1, n+1) if i%2 == 0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([x**2 for x in range(n) if x%2 == 0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n**2 + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    # base case\n    if n < 1:\n        return 0\n    \n    # recursive case\n    return n**2 + square_Sum(n-2)\n    \n    "
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return -1\n    else:\n        return n * (n + 1) * (2 * n + 1) / 6\n    \ndef sum_of_squares(a, b):\n    '''\n    Write a python function takes in two integers a and b and returns the sum of squares of first n even natural numbers.\n    '''\n    return a * (a + 1) * (2 * a + 1) / 6 + b * (b + 1) * (2 * b + 1) / 6\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if (i%2) == 0:\n            result = result + i*i\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    square_sum = 0\n    for i in range(0,n+1,2):\n        square_sum += i**2\n    return square_sum\n    \n    \n    \ndef nth_Fibonacci(n):\n    '''\n    Write a python function takes in an integer n and returns the nth fibonacci number.\n    '''\n    if (n == 1):\n        return 1\n    elif (n == 2):\n        return 1\n    else:\n        return nth_Fibonacci(n-1) + nth_Fibonacci(n-2)\n    \n    \n    \ndef Largest_number(n):\n    '''\n    Write a python function takes in an integer n and returns the nth fibonacci number.\n    '''\n    if (n == 1):\n        return 1\n    elif (n == 2):\n        return 1\n    else:\n        return Largest_number(n-1) + Largest_number(n-2)\n    \n    \ndef area(base,height):\n    '''\n    Write a python function takes in two numbers and returns the area of a triangle using Heron's formula.\n    '''\n    s = (base*height)/2\n    return (s*(s-base)*(s-height))**0.5\n    \n    \ndef a_square(side):\n    '''\n    Write a python function takes in a number n and returns the sum of squares of all the even numbers in the range n^2.\n    '''\n    return (n*(n**2)+1)**0.5\n    \n    \ndef factorial(n):\n    '''\n    Write a python function takes in an integer n and returns the factorial of n.\n    '''\n    if (n == 0):\n        return 1\n    else:\n        return n*factorial(n-1)\n    \n    \ndef sum_of_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of all the even numbers in the range n^2.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n**2 + sum_of_squares(n-1)\n    \n    \ndef sum_of_squares_of_number(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**2\n    return total\n    \n    \ndef sum_of_squares_of_number_with_recursion(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n**2 + sum_of_squares_of_number_with_recursion(n-1)\n    \n    \ndef sum_of_squares_of_number_with_loop(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**2\n    return total\n    \n    \ndef sum_of_squares_of_number_with_recursion(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n**2 + sum_of_squares_of_number_with_recursion(n-1)\n    \n    \ndef sum_of_squares_of_number_with_loop(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**2\n    return total\n    \n    \ndef sum_of_squares_of_number_with_recursion(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n**2 + sum_of_squares_of_number_with_recursion(n-1)\n    \n    \ndef sum_of_squares_of_number_with_loop(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**2\n    return total\n    \n    \ndef sum_of_squares_of_number_with_recursion(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n**2 + sum_of_squares_of_number_with_recursion(n-1)\n    \n    \ndef sum_of_squares_of_number_with_recursion(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n**2 + sum_of_squares_of_number_with_recursion(n-1)\n    \n    \ndef sum_of_squares_of_number_with_recursion(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n**2 + sum_of_squares_of_number_with_recursion(n-1)\n    \n    \ndef sum_of_squares_of_number_with_recursion(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n**2 + sum_of_squares_of_number_with_recursion(n-1)\n    \n    \ndef sum_of_squares_of_number_with_recursion(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n**2 + sum_of_squares_of_number_with_recursion(n-1)\n    \n    \ndef sum_of_squares_of_number_with_recursion(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n**2 + sum_of_squares_of_number_with_recursion(n-1)\n    \n    \ndef sum_of_squares_of_number_with_recursion(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n**2 + sum_of_squares_of_number_with_recursion(n-1)\n    \n    \ndef sum_of_squares_of_number_with_recursion(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n**2 + sum_of_squares_of_number_with_recursion(n-1)\n    \n    \ndef sum_of_squares_of_number_with_recursion(n):\n    '''\n    Write a python function takes in an integer n and returns th"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    size = len(list1[0])\n    for i in range(1,len(list1)):\n        if len(list1[i])>size:\n            size = len(list1[i])\n    return size\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    list_of_max_length = []\n    for each_list in list1:\n        if max_length < len(each_list):\n            max_length = len(each_list)\n            list_of_max_length = each_list\n    return list_of_max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = []\n    for lst in list1:\n        if len(lst) > len(result):\n            result = lst\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = [len(i) for i in list1]\n    return max(l)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return False\n    max_length = len(list1[0])\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    length = 0\n    for i in range(len(list1)):\n        length = len(list1[i])\n        if length > max_len:\n            max_len = length\n            max_len_list = i\n    print(max_len_list)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1_len = []\n    for elem in list1:\n        list1_len.append(len(elem))\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = max(len(list1[i]) for i in range(len(list1)))\n    return l\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_util(n, k, 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0 for i in xrange(k+1)]\n    dp[0] = 1\n    for i in xrange(1, n+1):\n        for j in xrange(k+1):\n            if j == 0:\n                dp[j] += dp[j]\n            elif i == j:\n                dp[j] += dp[j-1]\n            else:\n                dp[j] += dp[j-1]\n                dp[j] += dp[j]\n    return dp[k]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Calculate the number of ways using the Fibonacci sequence\n    fibo_counts = [0, 1, 1, 2, 5, 11, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781905, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 28657106940192, 45278934990975, 72747303909369]\n    if k <= 1:\n        return 1\n    if k >= n:\n        return 0\n    # If there are more than one available colors for each post then return the count for the first k-1 colors\n    if n - k >= 1:\n        return fibo_counts[n - k]\n    # The remaining number of colors are more than the number of available colors for each post\n    # Therefore the number of ways is the number of ways for k-1 colors \n    return count_no_of_ways(n, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    assert(0 <= n <= 10**5 and 0 <= k <= 10**5)\n    memo = [[0 for _ in xrange(k + 1)] for _ in xrange(n + 1)]\n    memo[0][0] = 1\n    for i in xrange(1, n + 1):\n        for j in xrange(1, k + 1):\n            memo[i][j] = memo[i - 1][j - 1] + memo[i - 1][j]\n    return memo[-1][-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    def count_no_of_ways_util(n, k, row, col, grid): \n        # Base case \n        if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]) or grid[row][col]!= -1: \n            return 0 \n        if n == 0 and k == 0: \n            return 1\n        if n == 0: \n            return 0\n        if k == 0: \n            return 0\n        # if row == len(grid) - 1 and col == len(grid[0]) - 1: \n        #     print(grid)\n        if row < len(grid) - 1: \n            if grid[row][col] == grid[row + 1][col]: \n                return count_no_of_ways_util(n, k - 1, row, col + 1, grid) + count_no_of_ways_util(n - 1, k, row + 1, col, grid)\n            else: \n                return count_no_of_ways_util(n, k, row + 1, col, grid)\n        if col < len(grid[0]) - 1: \n            if grid[row][col] == grid[row][col + 1]: \n                return count_no_of_ways_util(n, k - 1, row, col + 1, grid) + count_no_of_ways_util(n, k, row, col + 1, grid)\n            else: \n                return count_no_of_ways_util(n, k, row, col + 1, grid)\n        if row > 0: \n            if grid[row][col] == grid[row - 1][col]: \n                return count_no_of_ways_util(n, k - 1, row, col + 1, grid) + count_no_of_ways_util(n - 1, k, row - 1, col, grid)\n            else: \n                return count_no_of_ways_util(n, k, row - 1, col, grid)\n        if col > 0: \n            if grid[row][col] == grid[row][col - 1]: \n                return count_no_of_ways_util(n, k - 1, row, col + 1, grid) + count_no_of_ways_util(n, k, row, col - 1, grid)\n            else: \n                return count_no_of_ways_util(n, k, row, col - 1, grid)\n        \n    return count_no_of_ways_util(n, k, 0, 0, [[-1 for col in range(len(grid[0]))] for row in range(len(grid))])\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    mat = [[0 for x in range(k)] for x in range(n+1)] \n    for i in range(k): \n        mat[0][i] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n:\n        return 0\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    '''\n    I got the idea from here:\n    https://leetcode.com/discuss/72466/o-n-python\n    '''\n    return count_no_of_ways_recursive(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # n = 8\n    # k = 4\n    if n < 0 or k < 0:\n        return 0\n    if k == 1:\n        return n\n    \n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    table = [0 for i in range(n+1)]\n    table[0] = 1\n    for i in range(1, n+1): \n        for j in range(1, min(k+1, i+1)):\n            table[i] += table[i-j]\n    return table[n]\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    x = n/m\n    return x \n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n)//int(m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        return n/m\n    else:\n        return m/n\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m:\n        return n // m\n    else:\n        return m // n\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    n = int(n)\n    m = int(m)\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        return n//m\n    except:\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return m/n\n    "
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        return int(n/m)\n    elif n > m:\n        return int(m/n)\n    else:\n        return int(n/m)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef rightangle_area(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return w*h/2\ndef rightangled_perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return w+h\ndef diagonal_area(a,b):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef diagonal_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a+b\ndef rightangled_area(a,b):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*b/2\ndef rightangled_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a+b\ndef angle_area(angle,side):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return math.sin(math.radians(angle))*side*2\ndef angle_perimeter(angle,side):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.tan(math.radians(angle))*side+math.sqrt(math.cos(math.radians(angle))**2+math.sin(math.radians(angle))**2)\ndef  rightangled_area(a,b):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*b/2\ndef rightangled_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a+b\ndef angle_area(angle,side):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return math.sin(math.radians(angle))*side*2\ndef angle_perimeter(angle,side):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.tan(math.radians(angle))*side+math.sqrt(math.cos(math.radians(angle))**2+math.sin(math.radians(angle))**2)\ndef rightangled_area(a,b):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*b/2\ndef rightangled_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a+b\ndef half_rightangled_area(a,b):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)/2\ndef half_rightangled_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef angle_area(angle,side):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return math.sin(math.radians(angle))*side*2\ndef angle_perimeter(angle,side):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.tan(math.radians(angle))*side+math.sqrt(math.cos(math.radians(angle))**2+math.sin(math.radians(angle))**2)\ndef rightangled_area(a,b):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*b/2\ndef rightangled_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a+b\ndef rightangled_area(a,b):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*b/2\ndef rightangled_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a+b\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a+b+c)/2\ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a+b+c\ndef rightangled_area(a,b,c):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b*c)/2\ndef rightangled_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a+b+c\ndef angle_area(angle,side):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return math.sin(math.radians(angle))*side*2\ndef angle_perimeter(angle,side):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.tan(math.radians(angle))*side+math.sqrt(math.cos(math.radians(angle))**2+math.sin(math.radians(angle))**2)\ndef rightangled_area(a,b,c):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*b/2\ndef rightangled_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a+b+c\ndef rightangled_area(a,b,c):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*b/2\ndef rightangled_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a+b+c\ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*b\ndef rectangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return 2*(a+b)\ndef circle_area(r):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return math.pi*r**2\ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return 2*math.pi*r\ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*b\ndef rectangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a+b\ndef square_area(a):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a**2\ndef square_perimeter(a):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a*4\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a+b+c)/2\ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rectangle(l,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (l**2 + b**2)**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return s\ndef rightangle_sides(w,h):\n    '''\n    Write a function to find the other two sides of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    s2 = s/2\n    return (s2,s2-w,s2-h)\ndef rightangle_sides_2(w,h):\n    '''\n    Write a function to find the other two sides of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    s2 = s/2\n    return (s2,s2-w,s2-h)\ndef rightangle_sides_3(w,h):\n    '''\n    Write a function to find the other two sides of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    s2 = s/2\n    return (s2,s2-w,s2-h)\ndef left_angle_sides(w,h):\n    '''\n    Write a function to find the other two sides of a left angle triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    s2 = s/2\n    return (s2,s2-w,s2-h)\ndef is_rightangled(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_2(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_3(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_leftangled(w,h,s):\n    '''\n    Write a function to find if a left angle triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_leftangled_2(w,h,s):\n    '''\n    Write a function to find if a left angle triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_leftangled_3(w,h,s):\n    '''\n    Write a function to find if a left angle triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_2(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_3(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_4(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_5(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_6(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_7(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_8(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_9(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_10(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_11(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_12(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_13(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_14(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_15(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_16(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_17(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_18(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_19(w,h,s):\n    '''\n    Write a function to find if a right angled triangle is valid.\n    '''\n    if (w**2 + h**2)**0.5 == s:\n        return True\n    else:\n        return False\ndef is_rightangled_20(w,h,s):"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return h*(1/w)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (w**2 + h**2)**0.5 == w:\n        return h\n    elif (h**2 + w**2)**0.5 == h:\n        return w\n    else:\n        return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = w/2\n    h2 = h/2\n    a = math.sqrt((h2*h2)-(s*s))\n    c = math.sqrt(((s*s)-(a*a))/2)\n    return a+c\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = w/2\n    h2 = h/2\n    a = math.sqrt((h2*h2)-(s*s))\n    return a\ndef triangle_type(w,h):\n    '''\n    Write a function that determines if a given triangle is a right triangle.\n    If the angle formed by the longest side and the hypotenuse of the triangle is less than 90, the function should return true.\n    '''\n    a = otherside_triangle(w,h)\n    b = otherside_rightangle(w,h)\n    if a <= b:\n        return True\n    else:\n        return False\ndef is_rightangled(w,h):\n    '''\n    Write a function to determine if a rectangle is right-angled.\n    If the area of the rectangle is equal to the square of the perimeter, then the function should return true.\n    '''\n    s = w*h\n    p = w+h\n    return s == p*p\ndef max_tree(max_val):\n    '''\n    Write a function that finds the largest integer value of the list.\n    '''\n    return max_val\ndef avg(numbers):\n    '''\n    Write a function that finds the average of a list of integers.\n    '''\n    return sum(numbers)/len(numbers)\ndef leapyear(year):\n    '''\n    Write a function that determines if a given year is a leap year.\n    If the year is divisible by 4 and not divisible by 100, then the function should return true.\n    If the year is divisible by 4 and not divisible by 400, then the function should return false.\n    If the year is divisible by 4 and divisible by 100, then the function should return true.\n    If the year is divisible by 4 and divisible by 400, then the function should return false.\n    If the year is divisible by 100, but not divisible by 400, then the function should return true.\n    '''\n    if year % 400 == 0:\n        return False\n    elif year % 4 == 0 and year % 100!= 0:\n        return True\n    else:\n        return False\ndef is_prime(num):\n    '''\n    Write a function that determines if a given number is prime.\n    If the number is divisible by any number between 2 and itself, then the function should return false.\n    If the number is divisible by any number between 2 and itself, but not by any number between 2 and itself, then the function should return true.\n    '''\n    if num == 2:\n        return True\n    elif num < 2:\n        return False\n    elif num % 2 == 0:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\ndef add_numbers(num1,num2):\n    '''\n    Write a function that adds two given numbers.\n    '''\n    return num1+num2\ndef find_smallest(numbers):\n    '''\n    Write a function that finds the smallest number in a list of integers.\n    '''\n    return min(numbers)\ndef find_largest(numbers):\n    '''\n    Write a function that finds the largest number in a list of integers.\n    '''\n    return max(numbers)\ndef get_sum(numbers):\n    '''\n    Write a function that finds the sum of all numbers in a list of integers.\n    '''\n    return sum(numbers)\ndef is_prime_number(num):\n    '''\n    Write a function that determines if a given number is a prime number.\n    If the number is divisible by any number between 2 and itself, then the function should return false.\n    If the number is divisible by any number between 2 and itself, but not by any number between 2 and itself, then the function should return true.\n    '''\n    if num == 2:\n        return True\n    elif num < 2:\n        return False\n    elif num % 2 == 0:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\ndef add_numbers_odd(num1,num2):\n    '''\n    Write a function that adds two given numbers.\n    If both numbers are odd, return sum of both numbers.\n    If both numbers are even, return sum of both numbers multiplied by 2.\n    '''\n    if num1 % 2 == 0 and num2 % 2 == 0:\n        return num1+num2\n    elif num1 % 2 == 0 and num2 % 2!= 0:\n        return num1+num2*2\n    elif num1 % 2!= 0 and num2 % 2 == 0:\n        return num1*2+num2\n    else:\n        return num1*2+num2*2\ndef is_square(num):\n    '''\n    Write a function that determines if a given number is a perfect square.\n    If the number is divisible by 4, then the function should return true.\n    If the number is divisible by 4 and not divisible by 4, then the function should return true.\n    If the number is not divisible by 4, then the function should return false.\n    '''\n    if num % 4 == 0:\n        return True\n    else:\n        return False\ndef find_mean(numbers):\n    '''\n    Write a function that finds the mean of a list of numbers.\n    '''\n    return sum(numbers)/len(numbers)\ndef find_median(numbers):\n    '''\n    Write a function that finds the median of a list of numbers.\n    If the list is empty, then the function should return None.\n    If the list is not empty, then the function should return the middle number of the list.\n    If the list contains an odd number of numbers, then the function should return the middle number of the list.\n    If the list contains an even number of numbers, then the function should return the average of the two numbers in the middle of the list.\n    '''\n    if len(numbers) == 0:\n        return None\n    else:\n        if len(numbers) % 2 == 0:\n            return sum(numbers)/2\n        else:\n            return numbers[len(numbers)/2]\ndef is_in_range(num,lower,upper):\n    '''\n    Write a function that determines if a given number is in a given range.\n    '''\n    if lower <= num <= upper:\n        return True\n    else:\n        return False\ndef is_even(num):\n    '''\n    Write a function that determines if a given number is even.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False\ndef is_odd(num):\n    '''\n    Write a function that determines if a given number is odd.\n    '''\n    if num % 2!= 0:\n        return True\n    else:\n        return False\ndef is_power(num,exp):\n    '''\n    Write a function that determines if a given number is a power of a given base.\n    '''\n    if num**exp == num:\n        return True\n    else:\n        return False\ndef is_prime_factor(num,factor):\n    '''\n    Write a function that determines if a given number is a prime factor.\n    '''\n    if num % factor == 0:\n        return True\n    else:\n        return False\ndef is_prime_number(num):\n    '''\n    Write a function that determines if a given number is a prime number.\n    '''\n    if num == 2:\n        return True\n    elif num < 2:\n        return False\n    elif num % 2 == 0:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_number_factor(num,factor):\n    '''\n    Write a function that determines if a given number is a prime number.\n    '''\n    if num % factor == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>h:\n        if (w**2)+(h**2)>= (w**2):\n            return math.sqrt((w**2)+(h**2)-(w**2))\n        else:\n            return 0\n    elif w<h:\n        if (h**2)+(w**2)>= (h**2):\n            return math.sqrt((h**2)+(w**2)-(h**2))\n        else:\n            return 0\n    elif w==h:\n        return 0\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #we know that h**2 + w**2 = w**2\n    w2 = w**2\n    #now w2 = w**2 - h**2\n    w2 = w2 - h**2\n    #now w2 = w**2 - 2*h*w\n    w2 = w2 - 2*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w\n    w2 = w2 - 4*h*w\n    #now w2 = w**2 - 4*h*w"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**(1/2)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val=listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for item in listval:\n        if item > maxval:\n            maxval = item\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    val = 0\n    for i in listval:\n        if i > val:\n            val = i\n    return val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    assert isinstance(listval, list), 'Not a list'\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #get len of list\n    n=len(listval)\n    if n==0:\n        return 0\n    elif n==1:\n        return listval[0]\n    #initialze maximum\n    maxval=listval[0]\n    for i in range(1,n):\n        if listval[i]>maxval:\n            maxval=listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if max_val < i:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    number_copy = number\n    total = 0\n    if number == 0:\n        return 0\n    for i in range(1, number_copy):\n        if number_copy % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number / i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    list_of_divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            list_of_divisors.append(i)\n    return sum(list_of_divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    for i in range(1, number):\n        if number % i == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(2, number):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # A temp_arr is created to store \n    # sorted array in merge function \n    temp_arr = [0]*n \n    return merge(arr, temp_arr, 0, n-1) \n    \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(1,len(arr)):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    if len(arr) <= 1:\n        return 0\n    \n    left_array, right_array = arr[0: len(arr)/2], arr[len(arr)/2:]\n    \n    left_inv_count, right_inv_count = get_Inv_Count(left_array), get_Inv_Count(right_array)\n    \n    arr_inv_count = 0\n    \n    for i in range(len(left_array)):\n        for j in range(len(right_array)):\n            if left_array[i] > right_array[j]:\n                arr_inv_count += 1\n                \n    return left_inv_count + right_inv_count + arr_inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n=len(arr)\n    count=0\n    if n==1:\n        return 0\n    if n==2:\n        if arr[0]>arr[1]:\n            return 1\n        return 0\n    left=0\n    right=n-1\n    while left<right:\n        if arr[left]>arr[right]:\n            count+=1\n        left+=1\n        right-=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0\n    for i in xrange(n): \n        for j in xrange(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return len(arr)-helper(arr,0,len(arr))\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                Inv_Count = Inv_Count + 1\n    return Inv_Count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr_length = len(arr)\n    # Use a boolean matrix to check if the element is already sorted\n    is_sorted = [[False for i in range(arr_length)] for i in range(arr_length)]\n    inv_count = 0\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Base Case \n    if len(arr) <= 1: \n        return arr, 0\n    else: \n        # Sort the array \n        arr = sorted(arr)\n        mid = len(arr)//2\n        \n        # Recursively count the number of inversions\n        # in each half of the array \n        arr1, inversions_1 = get_Inv_Count(arr[:mid])\n        arr2, inversions_2 = get_Inv_Count(arr[mid:])\n        arr3, inversions_3 = get_Inv_Count(arr1 + arr2)\n        \n        inversions_4 = merge_count(arr1, arr2, arr3)\n        \n        return arr3, inversions_1 + inversions_2 + inversions_3 + inversions_4\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [val for sublist in list1 for val in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Base case\n    if list1 == []:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for item in list1:\n        if isinstance(item,list):\n            for sub_item in flatten_list(item):\n                yield sub_item\n        else:\n            yield item\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for item in list1:\n        if type(item) == list:\n            res += flatten_list(item)\n        else:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for el in list1:\n        if isinstance(el, list):\n            res.extend(flatten_list(el))\n        else:\n            res.append(el)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    result = []\n    result.append(list1[0])\n    for i in list1[1:]:\n        result.extend(flatten_list(i))\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) > 0:\n        if isinstance(list1[0], list):\n            return [y for x in list1 for y in flatten_list(x)]\n        else:\n            return list1\n    else:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [i for sublist in list1 for i in sublist]\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    key=lambda x:x[1]\n    stdata.sort(key=key,reverse=True)\n    for i in xrange(len(stdata)):\n        stdata[i]=sum(stdata[i])\n    return max(stdata)\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    for item in stdata:\n        print(item)\n    lst = list(map(lambda x:x[1],stdata))\n    return max(lst)\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) == 0:\n        return 0\n    elif len(stdata) == 1:\n        return stdata[0][1]\n    else:\n        return stdata[0][1] + max_aggregate(stdata[1:])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #In case there is no data, return empty list\n    if not stdata:\n        return []\n    #Since we need to find the maximum aggregate, we have to find maximum value\n    max_value = max(stdata, key=lambda x:x[1])[1]\n    #Make a dictionary for storing the count of each number in the list\n    dict_values = defaultdict(int)\n    #Traverse the list of tuples\n    for tup in stdata:\n        #Add the number to the dictionary\n        dict_values[tup[1]]+=1\n    #Now traverse the dictionary, if the key is greater than the max_value, add to the max_value\n    for key in dict_values:\n        if key > max_value:\n            max_value+=key\n    #Return the max value\n    return max_value\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = 0\n    for i in stdata:\n        aggregate += i[0]\n    return aggregate\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    aggregate = 10000000\n    for i in stdata:\n        if i[0] < aggregate:\n            aggregate = i[0]\n    return aggregate\ndef max_combination(stdata):\n    '''\n    Write a function to calculate the maximum combination from the list of tuples.\n    '''\n    combination = 0\n    for i in stdata:\n        if i[0] > combination:\n            combination = i[0]\n    return combination\ndef min_combination(stdata):\n    '''\n    Write a function to calculate the minimum combination from the list of tuples.\n    '''\n    combination = 10000000\n    for i in stdata:\n        if i[0] < combination:\n            combination = i[0]\n    return combination\ndef max_average(stdata):\n    '''\n    Write a function to calculate the maximum average from the list of tuples.\n    '''\n    average = 0\n    for i in stdata:\n        average += i[0]\n    return average/len(stdata)\ndef min_average(stdata):\n    '''\n    Write a function to calculate the minimum average from the list of tuples.\n    '''\n    average = 10000000\n    for i in stdata:\n        if i[0] < average:\n            average = i[0]\n    return average/len(stdata)\ndef max_sum(stdata):\n    '''\n    Write a function to calculate the maximum sum from the list of tuples.\n    '''\n    sum = 0\n    for i in stdata:\n        sum += i[0]\n    return sum\ndef min_sum(stdata):\n    '''\n    Write a function to calculate the minimum sum from the list of tuples.\n    '''\n    sum = 10000000\n    for i in stdata:\n        if i[0] < sum:\n            sum = i[0]\n    return sum\ndef max_variance(stdata):\n    '''\n    Write a function to calculate the maximum variance from the list of tuples.\n    '''\n    sums = 0\n    for i in stdata:\n        sums += i[0]\n    mean = sums/len(stdata)\n    variance = 0\n    for i in stdata:\n        variance += (i[0]-mean)**2\n    variance = variance/len(stdata)\n    return variance\ndef min_variance(stdata):\n    '''\n    Write a function to calculate the minimum variance from the list of tuples.\n    '''\n    sums = 0\n    for i in stdata:\n        sums += i[0]\n    mean = sums/len(stdata)\n    variance = 0\n    for i in stdata:\n        variance += (i[0]-mean)**2\n    variance = variance/len(stdata)\n    return variance\ndef max_median(stdata):\n    '''\n    Write a function to calculate the maximum median from the list of tuples.\n    '''\n    stdata.sort()\n    if len(stdata)%2 == 0:\n        median = (stdata[len(stdata)/2] + stdata[len(stdata)/2 - 1])/2\n    else:\n        median = stdata[len(stdata)/2]\n    return median\ndef min_median(stdata):\n    '''\n    Write a function to calculate the minimum median from the list of tuples.\n    '''\n    stdata.sort()\n    if len(stdata)%2 == 0:\n        median = (stdata[len(stdata)/2] + stdata[len(stdata)/2 - 1])/2\n    else:\n        median = stdata[len(stdata)/2]\n    return median\ndef max_mode(stdata):\n    '''\n    Write a function to calculate the maximum mode from the list of tuples.\n    '''\n    modes = defaultdict(lambda: 0)\n    for i in stdata:\n        modes[i[0]] += 1\n    modes = sorted(modes.items(), key = lambda x: x[1], reverse = True)\n    return modes[0][0]\ndef min_mode(stdata):\n    '''\n    Write a function to calculate the minimum mode from the list of tuples.\n    '''\n    modes = defaultdict(lambda: 0)\n    for i in stdata:\n        modes[i[0]] += 1\n    modes = sorted(modes.items(), key = lambda x: x[1], reverse = True)\n    return modes[len(modes)-1][0]\ndef max_high(stdata):\n    '''\n    Write a function to calculate the maximum high from the list of tuples.\n    '''\n    high = 0\n    for i in stdata:\n        if i[1] > high:\n            high = i[1]\n    return high\ndef min_high(stdata):\n    '''\n    Write a function to calculate the minimum high from the list of tuples.\n    '''\n    high = 10000000\n    for i in stdata:\n        if i[1] < high:\n            high = i[1]\n    return high\ndef max_low(stdata):\n    '''\n    Write a function to calculate the maximum low from the list of tuples.\n    '''\n    low = 0\n    for i in stdata:\n        if i[1] < low:\n            low = i[1]\n    return low\ndef min_low(stdata):\n    '''\n    Write a function to calculate the minimum low from the list of tuples.\n    '''\n    low = 10000000\n    for i in stdata:\n        if i[1] > low:\n            low = i[1]\n    return low\ndef max_high_low(stdata):\n    '''\n    Write a function to calculate the maximum high and low from the list of tuples.\n    '''\n    high = 0\n    low = 10000000\n    for i in stdata:\n        if i[1] < low:\n            low = i[1]\n        if i[1] > high:\n            high = i[1]\n    return high,low\ndef min_high_low(stdata):\n    '''\n    Write a function to calculate the minimum high and low from the list of tuples.\n    '''\n    high = 10000000\n    low = 0\n    for i in stdata:\n        if i[1] < low:\n            low = i[1]\n        if i[1] > high:\n            high = i[1]\n    return high,low\ndef max_range(stdata):\n    '''\n    Write a function to calculate the maximum range from the list of tuples.\n    '''\n    high = 0\n    low = 10000000\n    for i in stdata:\n        if i[1] > high:\n            high = i[1]\n        if i[1] < low:\n            low = i[1]\n    return high - low\ndef min_range(stdata):\n    '''\n    Write a function to calculate the minimum range from the list of tuples.\n    '''\n    high = 0\n    low = 10000000\n    for i in stdata:\n        if i[1] > high:\n            high = i[1]\n        if i[1] < low:\n            low = i[1]\n    return high - low\ndef max_range_range(stdata):\n    '''\n    Write a function to calculate the maximum range and range from the list of tuples.\n    '''\n    high = 0\n    low = 10000000\n    for i in stdata:\n        if i[1] > high:\n            high = i[1]\n        if i[1] < low:\n            low = i[1]\n    return high - low, high - low\ndef min_range_range(stdata):\n    '''\n    Write a function to calculate the minimum range and range from the list of tuples.\n    '''\n    high = 0\n    low = 10000000\n    for i in stdata:\n        if i[1] > high:\n            high = i[1]\n    "
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(t[2] for t in stdata)\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # groupby from itertools\n    grouped = stdata.groupby(lambda x: x[0])\n    aggregate = []\n    for key, group in grouped:\n        tmp_data = []\n        for i in group:\n            tmp_data.append(i[1])\n        aggregate.append(max(tmp_data))\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    res = {}\n    for s,t in stdata:\n        for i,j in enumerate(s):\n            if j in res:\n                res[j] += t\n            else:\n                res[j] = t\n    return max(res.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    totals = defaultdict(int)\n    for row in stdata:\n        for name, value in row.items():\n            totals[name] += value\n    return totals\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_list = []\n    max_agg = 0\n    for agg in stdata:\n        if agg[1] == True:\n            agg_list.append(agg[0])\n    if len(agg_list) == 0:\n        return max_agg\n    else:\n        max_agg = max(agg_list)\n        return max_agg\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = n - 1\n    return int(math.factorial(2*n) / (math.factorial(n)**2))\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if bin(i)[2:].count('1') == bin(n)[2:].count('1') and bin(i+j)[2:].count('1') == bin(n+j)[2:].count('1'):\n                count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    table = {0: 1} # Assuming that no binary sequence of length 2n will have first n bits equal to last n bits\n    def recurse(n, length, sums):\n        if sums not in table:\n            table[sums] = 0\n            for i in xrange(length-n+1):\n                if sums - 2**(n-1) <= 0:\n                    table[sums] += recurse(n-1, length, sums - 2**(n-1))\n                elif sums - 2**(n-1) > 0:\n                    table[sums] += recurse(n-1, length, sums - 2**(n-1)) + recurse(n-1, length, sums - 2**(n-1) - 2**(n-1))\n        return table[sums]\n    return recurse(n, 2*n, n)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_rec(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 2\n        else:\n            return count_binary_seq_rec(n-1) + count_binary_seq_rec(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 6\n    else:\n        return count_binary_seq(n-1) * 2 + count_binary_seq(n-2) * 4\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    cnt = 0\n    for i in range(2**n):\n        t = 0\n        for j in range(n):\n            if i & (1 << j):\n                t += 1\n        if t == n:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 1\n    total_count = 0\n    for k in range(2):\n        total_count += count_binary_seq(n-1) * (n+1)\n    return total_count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return count_binary_seq_recursive(n, [], {})\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary(n):\n        '''\n        Count of all binary sequences of length n.\n        '''\n        if n == 1:\n            return 1\n        return count_binary(n-1) + count_binary(n-1)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n    \n    \n    \ndef count_sequences(n, s):\n    '''\n    Write a function to count the number of sequences of length n with sum s.\n    For example, count_sequences(2, 2) = 10.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        if s == 1:\n            return 1\n        else:\n            return 0\n    else:\n        if s > n:\n            return 0\n        else:\n            return count_sequences(n-1, s) + count_sequences(n-1, s-1)\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for v in d.itervalues()) if d else 0)\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(dict_depth(v) for v in d.itervalues())\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    for key in d.keys():\n        if type(d[key]) == type(dict()):\n            depth = max(depth, 1 + dict_depth(d[key]))\n        else:\n            depth = max(depth, 1)\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k in d:\n        if isinstance(d[k], dict):\n            depth = max(depth, 1 + dict_depth(d[k]))\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def dict_depth_recursive(d, depth=0):\n        for key in d:\n            if isinstance(d[key], dict):\n                depth = max(depth, dict_depth_recursive(d[key], depth+1))\n            else:\n                depth += 1\n        return depth\n    return dict_depth_recursive(d)\n    \n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(value) if isinstance(value, dict) else 0 for value in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    depths = {}\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depths[key] = dict_depth(value) + 1\n        else:\n            depths[key] = 1\n    return max(depths.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max([dict_depth(v) for v in d.values()]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for v in d.itervalues()))\n    else:\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index == len(ranges)-1 :\n        return rotations[index]\n    else :\n        result = find_Element(arr,ranges,rotations,index+1)\n        return result + (rotations[index+1] - rotations[index])\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if ranges[i] <= index <= ranges[i+1] :\n            return arr[rotations[i]]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(arr,ranges,rotations,index)\n    for i in range(len(arr)) :\n        if ranges[i] >= index :\n            return i\n            break\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        if arr[0] + i * ranges < index < arr[0] + i * ranges + ranges - 1:\n            return arr[0] + i * ranges + (index - arr[0]) % ranges\n        else:\n            return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations[index] = rotations[index] % (len(arr) - 1)\n    return arr[rotations[index]]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index==0 :\n        return arr[0]\n    elif index==len(arr):\n        return arr[-1]\n    elif index>0 and index<len(arr):\n        return (arr[index] + arr[index-1])/2\n    elif index>=len(arr) or index<=0:\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if ranges[i][0] <= index and index <= ranges[i][1] :\n            return rotations[i]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) : \n        if rotations[i] == index :\n            return arr[ranges[i]:ranges[i+1]]\n    return arr[ranges[-1]:]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # print(arr)\n    for elem in arr :\n        if elem == ranges[index] :\n            return elem\n        if elem > ranges[index] :\n            # print(\"b\",elem)\n            return find_Element(arr,ranges,rotations,index)\n        \n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    dictionary = {}\n    for i in range(len(arr)) :\n        dictionary[arr[i]] = ranges[i]\n    \n    rotations = rotations * -1\n    \n    for i in range(rotations) :\n        dictionary = dictionary[dictionary]\n    \n    return dictionary[index]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return re.findall(r'^p.+',words,re.I)\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result =[]\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\nprint start_withp(['python','clouddomain', 'pythonista', 'java', 'python', 'pyspark'])\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'[p][a-zA-Z]*'\n    return [m.group() for m in re.finditer(pattern,''.join(words))]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile(r'^p')\n    return [word for word in words if p.match(word)]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return re.findall('^p.*', words)\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word[0] == 'p']\ndef sort_strings(strings):\n    '''\n    Sort strings in reverse order by length\n    '''\n    return sorted(strings,key=len,reverse=True)\ndef gen_range(n):\n    '''\n    Returns a generator to compute even numbers 1-n\n    '''\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            yield i\ndef is_prime(n):\n    '''\n    Returns True if n is prime, False otherwise\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef has_triple_letters(word):\n    '''\n    Returns True if word has three consecutive letters that are the same,\n    False otherwise\n    '''\n    for i in range(len(word) - 2):\n        if word[i] == word[i+1] and word[i+1] == word[i+2]:\n            return True\n    return False\ndef count_words_with_letters(word,letters):\n    '''\n    Return the number of words that begin with letter at position i in word\n    '''\n    return word.count(letters)\ndef are_all_words_triples(words):\n    '''\n    Return True if all words are triples and False otherwise\n    '''\n    for word in words:\n        if not has_triple_letters(word):\n            return False\n    return True\ndef remove_letters(word,letters):\n    '''\n    Return a new word with all letters in letters removed from word\n    '''\n    return ''.join([letter for letter in word if letter not in letters])\ndef is_palindrome(word):\n    '''\n    Returns True if word is a palindrome, False otherwise\n    '''\n    if word[::-1] == word:\n        return True\n    else:\n        return False\ndef count_vowels(word):\n    '''\n    Return the number of vowels in word\n    '''\n    return word.count('a') + word.count('e') + word.count('i') + word.count('o') + word.count('u')\ndef is_subpalindrome(word):\n    '''\n    Returns True if word is a subpalindrome, False otherwise\n    '''\n    return word[::-1] == word\ndef letter_at_position(word,letter,position):\n    '''\n    Returns the letter at position in word\n    '''\n    return word[position]\ndef compute_sum_of_squares(list_of_numbers):\n    '''\n    Returns the sum of the squares of the numbers in list_of_numbers\n    '''\n    return sum([i ** 2 for i in list_of_numbers])\ndef contains_no_repititions(word):\n    '''\n    Returns True if word has no repetitions and False otherwise\n    '''\n    return len(set(word)) == len(word)\ndef count_consec_vowels(word):\n    '''\n    Returns the number of consecutive vowels in word\n    '''\n    count = 0\n    for i in range(len(word)):\n        if word[i] in 'aeiou':\n            count += 1\n        else:\n            count = 0\n        if count == 3:\n            return 3\n    return 0\ndef has_digit(word):\n    '''\n    Returns True if word contains a digit, False otherwise\n    '''\n    return bool(re.search('\\d',word))\ndef word_starts_with_vowel(word):\n    '''\n    Returns True if word starts with a vowel, False otherwise\n    '''\n    return word[0] in 'aeiou'\ndef is_vowel_consonant(word):\n    '''\n    Returns True if word is a vowel consonant, False otherwise\n    '''\n    return word[0] not in 'aeiou'\ndef is_vowel(word):\n    '''\n    Returns True if word is a vowel, False otherwise\n    '''\n    return word[0] in 'aeiou'\ndef count_dif_letters(word1,word2):\n    '''\n    Returns the number of different letters between word1 and word2\n    '''\n    return len(set(word1) - set(word2))\ndef replace_letters(word,old,new):\n    '''\n    Replace all instances of old with new in word\n    '''\n    return word.replace(old,new)\ndef check_if_palindrome(word):\n    '''\n    Returns True if word is a palindrome, False otherwise\n    '''\n    return word[::-1] == word\ndef count_vowels_and_consonants(word):\n    '''\n    Returns the number of vowels and consonants in word\n    '''\n    count = 0\n    for letter in word:\n        if letter in 'aeiou':\n            count += 1\n        else:\n            count = 0\n        if count == 3:\n            return 3\n    return 0\ndef square_numbers(list_of_numbers):\n    '''\n    Returns the square of the numbers in list_of_numbers\n    '''\n    return [num ** 2 for num in list_of_numbers]\ndef has_letter(word,letter):\n    '''\n    Returns True if word contains letter, False otherwise\n    '''\n    return letter in word\ndef has_digit(word):\n    '''\n    Returns True if word contains a digit, False otherwise\n    '''\n    return bool(re.search('\\d',word))\ndef count_consec_vowels(word):\n    '''\n    Returns the number of consecutive vowels in word\n    '''\n    count = 0\n    for i in range(len(word)):\n        if word[i] in 'aeiou':\n            count += 1\n        else:\n            count = 0\n        if count == 3:\n            return 3\n    return 0\ndef is_palindrome(word):\n    '''\n    Returns True if word is a palindrome, False otherwise\n    '''\n    return word[::-1] == word\ndef is_palindrome_of_length(word,length):\n    '''\n    Returns True if word is a palindrome of length, False otherwise\n    '''\n    return word[::-1] == word[:length]\ndef count_words_with_digits(words):\n    '''\n    Return the number of words that have digits in them\n    '''\n    return len([word for word in words if bool(re.search('\\d',word))])\ndef consecutive_letters(word,threshold):\n    '''\n    Returns the number of consecutive letters in word\n    '''\n    return len([letter for letter in word if abs(ord(letter) - ord(word[0])) < threshold])\ndef is_consonant(word):\n    '''\n    Returns True if word is a consonant, False otherwise\n    '''\n    return word[0] not in 'aeiou'\ndef increment_letters(word,n):\n    '''\n    Returns word with all letters incremented by n\n    '''\n    return ''.join([chr((ord(letter)+n)%97+97) if letter.isalpha() else letter for letter in word])\ndef is_increasing_sequence(list_of_numbers):\n    '''\n    Returns True if list_of_numbers is strictly increasing, False otherwise\n    '''\n    return all([list_of_numbers[i] < list_of_numbers[i+1] for i in range(len(list_of_numbers)-1)])\ndef is_increasing_list(list_of_numbers):\n    '''\n    Returns True if list_of_numbers is strictly increasing, False otherwise\n    '''\n    return all([list_of_numbers[i] <= list_of_numbers[i+1] for i in range(len(list_of_numbers)-1)])\ndef digit_factorial(number):\n    '''\n    Returns the factorial of the number's digit\n    '''\n    return factorial(number%10)\ndef is_prime_number(n):\n    '''\n    Returns True if n i"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [x for x in words if x[0]=='p']\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    max_sum = a[index]\n    if k > index:\n        max_sum += max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        max_sum += max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    if k > index:\n        if max_sum < max_sum_increasing_subseq(a, n, index + 1, k - 1):\n            max_sum = max_sum_increasing_subseq(a, n, index + 1, k - 1)\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k <= index:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == n:\n        return 0\n    elif index == n:\n        return a[k]\n    else:\n        return max(a[k] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 1:\n        return a[index]\n    elif k > index:\n        return -1\n    elif k == index:\n        return a[index]\n    elif k > index:\n        return -1\n    else:\n        if k > index:\n            return -1\n        else:\n            return max(a[index], max_sum_increasing_subseq(a, n, index+1, k) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    else:\n        if k > index:\n            return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index])\n        else:\n            return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    \n    if k < index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    \n    return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k)+a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[index - 1]\n    if k > index:\n        return a[index - 1]\n    if k == index:\n        return a[index]\n    if max_sum_increasing_subseq(a, n, index + 1, k) > max_sum_increasing_subseq(a, n, index + 1, k + 1):\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    res = -INF\n    if a[index] + max_sum_increasing_subseq(a, n, index + 1, k) > k:\n        res = a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    if a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1) > res:\n        res = a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n or k < 0:\n        return 0\n    if a[index] == k:\n        return a[index]\n    return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k - a[index]) + a[index])\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return tuplex\n    else:\n        m-=1\n        n-=1\n        return tuplex[m:n+1]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:m+n]\ndef colon_listx(listx,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    return listx[m:m+n]\ndef tuplize(listx):\n    '''\n    Write a function to convert a list into a tuple.\n    '''\n    return tuple(listx)\ndef del_from_tuplex(tuplex,m,n):\n    '''\n    Write a function to delete a colon of a tuple.\n    '''\n    tuplex=tuplex[:m]+tuplex[m+n:]\n    return tuplex\ndef del_from_listx(listx,m,n):\n    '''\n    Write a function to delete a colon of a list.\n    '''\n    listx=listx[:m]+listx[m+n:]\n    return listx\ndef is_in_tuplex(tuplex,m,n):\n    '''\n    Write a function to test if a colon of a tuple is empty.\n    '''\n    return m<len(tuplex) and m+n<len(tuplex)\ndef is_in_listx(listx,m,n):\n    '''\n    Write a function to test if a colon of a list is empty.\n    '''\n    return m<len(listx) and m+n<len(listx)\ndef is_empty(value):\n    '''\n    Write a function to test if a value is empty.\n    '''\n    return not value\ndef is_not_empty(value):\n    '''\n    Write a function to test if a value is not empty.\n    '''\n    return value\ndef endx(x):\n    '''\n    Write a function to get the end of a tuple.\n    '''\n    return x[len(x)-1]\ndef get_midx(x):\n    '''\n    Write a function to get the middle of a tuple.\n    '''\n    return x[len(x)//2]\ndef get_midx_listx(listx):\n    '''\n    Write a function to get the middle of a list.\n    '''\n    return listx[len(listx)//2]\ndef add_endx(x,endx):\n    '''\n    Write a function to add a value to the end of a tuple.\n    '''\n    x=x+endx\n    return x\ndef add_endx_listx(listx,endx):\n    '''\n    Write a function to add a value to the end of a list.\n    '''\n    listx=listx+[endx]\n    return listx\ndef add_midx(x,midx):\n    '''\n    Write a function to add a value to the middle of a tuple.\n    '''\n    x=x[:len(x)//2]+midx+x[len(x)//2:]\n    return x\ndef add_midx_listx(listx,midx):\n    '''\n    Write a function to add a value to the middle of a list.\n    '''\n    listx=listx[:len(listx)//2]+midx+listx[len(listx)//2:]\n    return listx\ndef remove_midx(x):\n    '''\n    Write a function to remove the middle value of a tuple.\n    '''\n    x=x[:len(x)//2]+x[len(x)//2+1:]\n    return x\ndef remove_midx_listx(listx):\n    '''\n    Write a function to remove the middle value of a list.\n    '''\n    listx=listx[:len(listx)//2]+listx[len(listx)//2+1:]\n    return listx\ndef sum_tuple(tuplex):\n    '''\n    Write a function to sum all the items in a tuple.\n    '''\n    return sum(tuplex)\ndef sum_list(listx):\n    '''\n    Write a function to sum all the items in a list.\n    '''\n    return sum(listx)\ndef remove_last_from_tuplex(tuplex):\n    '''\n    Write a function to remove the last value of a tuple.\n    '''\n    tuplex=tuplex[:len(tuplex)-1]\n    return tuplex\ndef remove_last_from_listx(listx):\n    '''\n    Write a function to remove the last value of a list.\n    '''\n    listx=listx[:len(listx)-1]\n    return listx\ndef add_first_to_tuplex(tuplex,first):\n    '''\n    Write a function to add a value to the first value of a tuple.\n    '''\n    return tuplex[:1]+first+tuplex[1:]\ndef add_first_to_listx(listx,first):\n    '''\n    Write a function to add a value to the first value of a list.\n    '''\n    return [first]+listx\ndef add_last_to_tuplex(tuplex,last):\n    '''\n    Write a function to add a value to the last value of a tuple.\n    '''\n    return tuplex+last\ndef add_last_to_listx(listx,last):\n    '''\n    Write a function to add a value to the last value of a list.\n    '''\n    return listx+last\ndef append_to_tuplex(tuplex,value):\n    '''\n    Write a function to append a value to a tuple.\n    '''\n    return tuplex+value\ndef append_to_listx(listx,value):\n    '''\n    Write a function to append a value to a list.\n    '''\n    return listx+[value]\ndef insert_at_tuplex(tuplex,value,index):\n    '''\n    Write a function to insert a value at a particular index in a tuple.\n    '''\n    return tuplex[:index]+value+tuplex[index:]\ndef insert_at_listx(listx,value,index):\n    '''\n    Write a function to insert a value at a particular index in a list.\n    '''\n    return listx[:index]+[value]+listx[index:]\ndef delete_from_tuplex(tuplex,m,n):\n    '''\n    Write a function to delete a colon of a tuple.\n    '''\n    tuplex=tuplex[:m]+tuplex[m+n:]\n    return tuplex\ndef delete_from_listx(listx,m,n):\n    '''\n    Write a function to delete a colon of a list.\n    '''\n    listx=listx[:m]+listx[m+n:]\n    return listx\ndef new_tuplex(tuplex,length):\n    '''\n    Write a function to get a new tuple of a given length.\n    '''\n    tuplex=tuplex*length\n    return tuplex\ndef new_listx(listx,length):\n    '''\n    Write a function to get a new list of a given length.\n    '''\n    listx=listx*length\n    return listx\ndef replace_midx(x,midx,replace):\n    '''\n    Write a function to replace a value in a tuple with another value.\n    '''\n    x=x[:len(x)//2]+replace+x[len(x)//2+1:]\n    return x\ndef replace_midx_listx(listx,midx,replace):\n    '''\n    Write a function to replace a value in a list with another value.\n    '''\n    listx=listx[:len(listx)//2]+replace+listx[len(listx)//2+1:]\n    return listx\ndef replace_last(x,last,replace):\n    '''\n    Write a function to replace the last value in a tuple with another value.\n    '''\n    x=x[:len(x)-1]+replace+last\n    return x\ndef replace_last_listx(listx,last,replace):\n    '''\n    Write a function to replace the last valu"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\ndef three_tuplex(tuplex,m,n):\n    '''\n    Write a function to get three elements of a tuple.\n    '''\n    return tuplex[m:n:3]\ndef four_tuplex(tuplex,m,n):\n    '''\n    Write a function to get four elements of a tuple.\n    '''\n    return tuplex[m:n:4]\ndef five_tuplex(tuplex,m,n):\n    '''\n    Write a function to get five elements of a tuple.\n    '''\n    return tuplex[m:n:5]\ndef six_tuplex(tuplex,m,n):\n    '''\n    Write a function to get six elements of a tuple.\n    '''\n    return tuplex[m:n:6]\ndef seven_tuplex(tuplex,m,n):\n    '''\n    Write a function to get seven elements of a tuple.\n    '''\n    return tuplex[m:n:7]\ndef eight_tuplex(tuplex,m,n):\n    '''\n    Write a function to get eight elements of a tuple.\n    '''\n    return tuplex[m:n:8]\ndef nine_tuplex(tuplex,m,n):\n    '''\n    Write a function to get nine elements of a tuple.\n    '''\n    return tuplex[m:n:9]\ndef ten_tuplex(tuplex,m,n):\n    '''\n    Write a function to get ten elements of a tuple.\n    '''\n    return tuplex[m:n:10]\ndef one_tuplex(tuplex,m,n):\n    '''\n    Write a function to get one element of a tuple.\n    '''\n    return tuplex[m:n]\ndef two_tuplex(tuplex,m,n):\n    '''\n    Write a function to get two elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef nine_tuplex(tuplex,m,n):\n    '''\n    Write a function to get nine elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef fifteen_tuplex(tuplex,m,n):\n    '''\n    Write a function to get fifteen elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef one_tuplex(tuplex,m,n):\n    '''\n    Write a function to get one element of a tuple.\n    '''\n    return tuplex[m:n]\ndef six_tuplex(tuplex,m,n):\n    '''\n    Write a function to get six elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef two_tuplex(tuplex,m,n):\n    '''\n    Write a function to get two elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef eight_tuplex(tuplex,m,n):\n    '''\n    Write a function to get eight elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef five_tuplex(tuplex,m,n):\n    '''\n    Write a function to get five elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef two_tuplex(tuplex,m,n):\n    '''\n    Write a function to get two elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef seven_tuplex(tuplex,m,n):\n    '''\n    Write a function to get seven elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef three_tuplex(tuplex,m,n):\n    '''\n    Write a function to get three elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef five_tuplex(tuplex,m,n):\n    '''\n    Write a function to get five elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef six_tuplex(tuplex,m,n):\n    '''\n    Write a function to get six elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef four_tuplex(tuplex,m,n):\n    '''\n    Write a function to get four elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef four_tuplex(tuplex,m,n):\n    '''\n    Write a function to get four elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef eight_tuplex(tuplex,m,n):\n    '''\n    Write a function to get eight elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef two_tuplex(tuplex,m,n):\n    '''\n    Write a function to get two elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef three_tuplex(tuplex,m,n):\n    '''\n    Write a function to get three elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef eight_tuplex(tuplex,m,n):\n    '''\n    Write a function to get eight elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef eight_tuplex(tuplex,m,n):\n    '''\n    Write a function to get eight elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef ten_tuplex(tuplex,m,n):\n    '''\n    Write a function to get ten elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef four_tuplex(tuplex,m,n):\n    '''\n    Write a function to get four elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef five_tuplex(tuplex,m,n):\n    '''\n    Write a function to get five elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef one_tuplex(tuplex,m,n):\n    '''\n    Write a function to get one element of a tuple.\n    '''\n    return tuplex[m:n]\ndef two_tuplex(tuplex,m,n):\n    '''\n    Write a function to get two elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef six_tuplex(tuplex,m,n):\n    '''\n    Write a function to get six elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef three_tuplex(tuplex,m,n):\n    '''\n    Write a function to get three elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef two_tuplex(tuplex,m,n):\n    '''\n    Write a function to get two elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef five_tuplex(tuplex,m,n):\n    '''\n    Write a function to get five elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef six_tuplex(tuplex,m,n):\n    '''\n    Write a function to get six elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef four_tuplex(tuplex,m,n):\n    '''\n    Write a function to get four elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef four_tuplex(tuplex,m,n):\n    '''\n    Write a function to get four elements of a tuple.\n    '''\n    return tuplex[m:n]\ndef three_tuplex(tuple"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    res=tuplex[:]\n    for i in range(m,n):\n        res[i]=tuplex[i-m]\n    return res\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=()\n    for i in range(0,m-1):\n        colon=colon+tuplex[i],\n    return colon+tuplex[m-1],\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:] + tuplex[:m]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m<0 or n<0:\n        return None\n    if m>=len(tuplex) or n>=len(tuplex):\n        return None\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        return tuplex[0:n]\n    else:\n        return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    ans=[]\n    for i in range(m):\n        tup=()\n        for j in range(n):\n            tup=tup+(tuplex[i][j],)\n        ans.append(tup)\n    return tuple(ans)\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m],tuplex[m:n+1]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # The answer that I tried\n    # def largest_product(nums1, nums2, N):\n    #     result = []\n    #     if len(nums1) > len(nums2):\n    #         nums1, nums2 = nums2, nums1\n    #     for i in range(N):\n    #         j = i\n    #         result.append(nums1[j] * nums2[j])\n    #     return result\n    #\n    # # Time: O(N), where N is the length of the input list\n    # # Space: O(N)\n    #\n    # nums1.sort(reverse=True)\n    # nums2.sort(reverse=True)\n    #\n    # result = []\n    # if len(nums1) < len(nums2):\n    #     for i in range(len(nums1)):\n    #         result.append(nums1[i] * nums2[i])\n    # else:\n    #     for i in range(len(nums2)):\n    #         result.append(nums1[i] * nums2[i])\n    #\n    # return result[:N]\n    #\n    # # Time: O(N)\n    # # Space: O(N)\n    #\n    # result = []\n    # while len(result) < N:\n    #     for i in range(len(nums1)):\n    #         result.append(nums1[i] * nums2[i])\n    #         if len(result) == N:\n    #             return result\n    #         for j in range(len(nums2)):\n    #             result.append(nums1[i] * nums2[j])\n    #             if len(result) == N:\n    #                 return result\n    #     nums1.pop(0)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    products = []\n    for i in xrange(N):\n        products.append(nums1[i] * nums2[N - i - 1])\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 and not nums2:\n        return 0\n    n = min(len(nums1), len(nums2))\n    max_product = max(nums1[0] * nums2[0], nums1[0] * nums2[1], nums1[1] * nums2[0], nums1[1] * nums2[1])\n    for i in range(2, n):\n        max_product = max(max_product, nums1[i] * nums2[i], nums1[i] * nums2[i - 1], nums1[i - 1] * nums2[i], nums1[i - 1] * nums2[i - 1])\n    return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # base case\n    if len(nums1) == 0 or len(nums2) == 0:\n        return None\n    if N == 0:\n        return 0\n    if N == 1:\n        return max(nums1[0] * nums2[0], nums1[0] * nums2[1], nums1[1] * nums2[0], nums1[1] * nums2[1])\n    # recursion\n    max_product = 0\n    first_number = nums1[0]\n    second_number = nums2[0]\n    if (nums1[0] > nums1[1]):\n        max_product = first_number * second_number\n    else:\n        max_product = first_number * second_number\n    max_product = max(max_product * nums1[1], max_product * nums1[0], max_product * nums2[1], max_product * nums2[0])\n    first_number = nums1[0]\n    second_number = nums1[1]\n    if (nums1[0] > nums1[1]):\n        max_product = first_number * second_number\n    else:\n        max_product = first_number * second_number\n    max_product = max(max_product * nums2[1], max_product * nums2[0], max_product * nums1[1], max_product * nums1[0])\n    if (max_product == 0):\n        return large_product(nums1[2:], nums2[1:], N - 1)\n    else:\n        return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1_factors = []\n    nums2_factors = []\n    result = []\n    product = []\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import itertools\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    min_nums = min(nums1)\n    max_nums = max(nums1)\n    ans = 1\n    for i in xrange(min_nums, max_nums+1):\n        ans *= i\n    for i in xrange(min_nums, max_nums+1):\n        ans /= i\n    if N > 0:\n        ans *= nums2[N-1]\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    nums1.sort()\n    nums2.sort()\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if n1 < n2:\n        nums1, nums2 = nums2, nums1\n        n1, n2 = n2, n1\n    \n    left, right = 0, n1\n    ans = 0\n    while left < n1:\n        if right < n2:\n            p = 1\n            for i in xrange(left, right):\n                p *= nums1[i]\n            ans = max(ans, p * nums2[right])\n            right += 1\n        else:\n            break\n        while right - left > 1:\n            mid = (left + right) // 2\n            if nums2[mid - 1] < nums1[mid]:\n                right = mid\n            else:\n                left = mid\n        ans = max(ans, nums1[left] * nums2[right - 1])\n        left += 1\n    \n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort(reverse = True)\n    count = 0\n    prod = 1\n    for i in range(N):\n        count += 1\n        if count % 2 == 0:\n            prod *= nums2[i]\n        else:\n            prod *= nums1[i]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return [max(p1*p2 for p1 in nums1) for p2 in nums2][:N]\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef getmax(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef getmin(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef get_average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    if a+b==0:\n        return 0\n    else:\n        return (a+b)/2\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\ndef isPrime(num):\n    '''\n    Write a python function to check if the input number is prime or not.\n    '''\n    if (num<=1):\n        return False\n    elif (num==2):\n        return True\n    else:\n        for i in range(2,num):\n            if(num%i==0):\n                return False\n        return True\ndef isPalindrome(num):\n    '''\n    Write a python function to check if the input number is palindrome or not.\n    '''\n    temp=num\n    rev_num=0\n    while(num>0):\n        rev_num=rev_num*10+num%10\n        num=num//10\n    if (temp==rev_num):\n        return True\n    else:\n        return False\ndef factorial(num):\n    '''\n    Write a python function to find the factorial of the input number.\n    '''\n    fact=1\n    for i in range(1,num+1):\n        fact=fact*i\n    return fact\ndef fibonacci(num):\n    '''\n    Write a python function to find the nth number of the fibonacci series.\n    '''\n    if (num==1):\n        return 0\n    elif (num==2):\n        return 1\n    else:\n        return fibonacci(num-1)+fibonacci(num-2)\ndef reverse(num):\n    '''\n    Write a python function to reverse a number.\n    '''\n    rev_num=0\n    while(num>0):\n        rev_num=rev_num*10+num%10\n        num=num//10\n    return rev_num\ndef isEven(num):\n    '''\n    Write a python function to check if the input number is even or not.\n    '''\n    if(num%2==0):\n        return True\n    else:\n        return False\ndef getSum(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\ndef getPower(num,pow):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    if (pow==1):\n        return num\n    else:\n        return num*getPower(num,pow-1)\ndef getMax(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\ndef getMin(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\ndef isEven(num):\n    '''\n    Write a python function to check if the input number is even or not.\n    '''\n    if(num%2==0):\n        return True\n    else:\n        return False\ndef isPrime(num):\n    '''\n    Write a python function to check if the input number is prime or not.\n    '''\n    if (num<=1):\n        return False\n    elif (num==2):\n        return True\n    else:\n        for i in range(2,num):\n            if(num%i==0):\n                return False\n        return True\ndef isPalindrome(num):\n    '''\n    Write a python function to check if the input number is palindrome or not.\n    '''\n    temp=num\n    rev_num=0\n    while(num>0):\n        rev_num=rev_num*10+num%10\n        num=num//10\n    if (temp==rev_num):\n        return True\n    else:\n        return False\ndef factorial(num):\n    '''\n    Write a python function to find the factorial of the input number.\n    '''\n    fact=1\n    for i in range(1,num+1):\n        fact=fact*i\n    return fact\ndef fibonacci(num):\n    '''\n    Write a python function to find the nth number of the fibonacci series.\n    '''\n    if (num==1):\n        return 0\n    elif (num==2):\n        return 1\n    else:\n        return fibonacci(num-1)+fibonacci(num-2)\ndef reverse(num):\n    '''\n    Write a python function to reverse a number.\n    '''\n    rev_num=0\n    while(num>0):\n        rev_num=rev_num*10+num%10\n        num=num//10\n    return rev_num\ndef isEven(num):\n    '''\n    Write a python function to check if the input number is even or not.\n    '''\n    if(num%2==0):\n        return True\n    else:\n        return False\ndef getSum(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\ndef getPower(num,pow):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    if (pow==1):\n        return num\n    else:\n        return num*getPower(num,pow-1)\ndef getMax(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\ndef getMin(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\ndef isEven(num):\n    '''\n    Write a python function to check if the input number is even or not.\n    '''\n    if(num%2==0):\n        return True\n    else:\n        return False\ndef isPrime(num):\n    '''\n    Write a python function to check if the input number is prime or not.\n    '''\n    if (num<=1):\n        return False\n    elif (num==2):\n        return True\n    else:\n        for i in range(2,num):\n            if(num%i==0):\n                return False\n        return True\ndef isPalindrome(num):\n    '''\n    Write a python function to check if the input number is palindrome or not.\n    '''\n    temp=num\n    rev_num=0\n    while(num>0):\n        rev_num=rev_num*10+num%10\n        num=num//10\n    if (temp==rev_num):\n        return True\n    else:\n        return False\ndef factorial(num):\n    '''\n    Write a python function to find the factorial of the input number.\n    '''\n    fact=1\n    for i in range(1,num+1):\n        fact=fact*i\n    return fact\ndef fibonacci(num):\n    '''\n    Write a python function to find the nth number of the fibonacci series.\n    '''\n    if (num==1):\n        return 0\n    elif (num==2):\n        return 1\n    else:\n        return fibonacci(num-1)+fibonacci(num-2)\ndef reverse(num):\n    '''\n    Write a python function to reverse a number.\n    '''\n    rev_num=0\n    while(num>0):\n        rev_num=rev_num*10+num%10\n        num=num//10\n    return rev_num\ndef isEven(num):\n    '''\n    Write a python function to check if the input number is even or not.\n    '''\n    if(num%2==0):\n        return True\n    else:\n        return False\ndef getSum(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\ndef getPower(num,pow):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    if (pow==1):\n        return num\n    else:\n        return num*getPower(num,pow-1)\ndef getMax(a,b):\n    '"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \ndef main():\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    x = int(input(\"enter 1st number\"))\n    y = int(input(\"enter 2nd number\"))\n    print(\"maximum number is\")\n    print(maximum(x,y))\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return \"The numbers are equal\"\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst=list(str1)\n    lst.sort()\n    return tuple(lst)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef get_equal_index(str1):\n    '''\n    Write a function to return the indices of all the equal characters in a string.\n    '''\n    dict1 = {}\n    for i in range(len(str1)):\n        if str1[i] in dict1:\n            dict1[str1[i]].append(i)\n        else:\n            dict1[str1[i]] = [i]\n    return dict1\n    \ndef delete_index(list1, index):\n    '''\n    Write a function to delete the ith index in a list.\n    '''\n    return list1[:index]+list1[index+1:]\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # if a string is given\n    if type(str1) == str:\n        # convert the string to a list\n        list1 = list(str1)\n        # create a list of tuples\n        tuple1 = list()\n        # iterate through each item in the list\n        for i in range(len(list1)):\n            # append the items to the tuple\n            tuple1.append((list1[i],1))\n        # return the tuple\n        return tuple1\n    # raise a TypeError if a non-string argument is given\n    raise TypeError('The argument must be a string')\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = []\n    for i in range(len(str1)):\n        tuple1.append(str1[i])\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if str1.find('(') == -1:\n        return tuple(str1)\n    else:\n        str1 = str1.replace('(','')\n        str1 = str1.replace(')','')\n        res = tuple(str1)\n        return res\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #if n == 0:\n    #    return n\n    #else:\n    #    return n ^ (1 << (len(bin(n)) - 2))\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    binary = bin(n).replace(\"0b\",\"\")\n    binary = \"0\"+binary\n    if binary[0] == \"1\":\n        binary = binary[1:]\n    return int(binary, 2)\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    binary = bin(n).replace(\"0b\",\"\")\n    binary = binary[::-1].replace(\"0\",\"1\").replace(\"1\",\"0\")\n    return int(binary, 2)\n    \n    \ndef set_left_most_bit(n):\n    '''\n    Write a python function to set the left most bit.\n    '''\n    binary = bin(n).replace(\"0b\",\"\")\n    binary = \"0\"+binary\n    if binary[0] == \"1\":\n        binary = binary[1:]\n    return int(binary, 2)\n    \ndef set_right_most_bit(n):\n    '''\n    Write a python function to set the right most bit.\n    '''\n    binary = bin(n).replace(\"0b\",\"\")\n    binary = binary[::-1].replace(\"0\",\"1\").replace(\"1\",\"0\")\n    return int(binary, 2)\n    \n    \ndef set_bit(n,p):\n    '''\n    Write a python function to set the bit at position p in n.\n    '''\n    binary = bin(n).replace(\"0b\",\"\")\n    if (p<0):\n        p = p + len(binary)\n    if p>=0:\n        binary = \"0\"+binary[0:p]+\"1\"+binary[p+1:]\n    return int(binary, 2)\n    \n    \ndef get_bit(n,p):\n    '''\n    Write a python function to get the bit at position p in n.\n    '''\n    binary = bin(n).replace(\"0b\",\"\")\n    if p<0:\n        p = p + len(binary)\n    if p>=0:\n        return int(binary[p])\n    else:\n        return 0\n    \ndef get_bit_value(n,p):\n    '''\n    Write a python function to get the value of the bit at position p in n.\n    '''\n    binary = bin(n).replace(\"0b\",\"\")\n    if p<0:\n        p = p + len(binary)\n    if p>=0:\n        return int(binary[p])\n    else:\n        return 0\n    \ndef swap_bits(n,p,q):\n    '''\n    Write a python function to swap the bits at position p and q.\n    '''\n    binary = bin(n).replace(\"0b\",\"\")\n    if (p<0):\n        p = p + len(binary)\n    if (q<0):\n        q = q + len(binary)\n    if p!=q:\n        tmp = binary[p]\n        binary = binary[:p]+binary[q]+binary[p+1:q]+binary[p]+binary[q+1:]\n    return int(binary,2)\n    \ndef toggle_bit(n,p):\n    '''\n    Write a python function to toggle the bit at position p.\n    '''\n    binary = bin(n).replace(\"0b\",\"\")\n    if (p<0):\n        p = p + len(binary)\n    if p>=0:\n        return int(binary[:p]+str(int(binary[p])^1)+binary[p+1:],2)\n    else:\n        return 0\n    \ndef test_set_left_most_unset_bit():\n    assert set_left_most_unset_bit(0) == 0\n    assert set_left_most_unset_bit(1) == 1\n    assert set_left_most_unset_bit(2) == 2\n    assert set_left_most_unset_bit(3) == 3\n    assert set_left_most_unset_bit(4) == 2\n    assert set_left_most_unset_bit(5) == 3\n    assert set_left_most_unset_bit(6) == 4\n    assert set_left_most_unset_bit(7) == 3\n    assert set_left_most_unset_bit(8) == 4\n    assert set_left_most_unset_bit(9) == 5\n    assert set_left_most_unset_bit(10) == 6\n    assert set_left_most_unset_bit(11) == 7\n    assert set_left_most_unset_bit(12) == 7\n    assert set_left_most_unset_bit(13) == 8\n    assert set_left_most_unset_bit(14) == 9\n    assert set_left_most_unset_bit(15) == 10\n    assert set_left_most_unset_bit(16) == 11\n    assert set_left_most_unset_bit(17) == 12\n    assert set_left_most_unset_bit(18) == 13\n    assert set_left_most_unset_bit(19) == 14\n    assert set_left_most_unset_bit(20) == 15\n    assert set_left_most_unset_bit(21) == 16\n    assert set_left_most_unset_bit(22) == 17\n    assert set_left_most_unset_bit(23) == 18\n    assert set_left_most_unset_bit(24) == 19\n    assert set_left_most_unset_bit(25) == 20\n    assert set_left_most_unset_bit(26) == 21\n    assert set_left_most_unset_bit(27) == 22\n    assert set_left_most_unset_bit(28) == 23\n    assert set_left_most_unset_bit(29) == 24\n    assert set_left_most_unset_bit(30) == 25\n    assert set_left_most_unset_bit(31) == 26\n    assert set_left_most_unset_bit(32) == 27\n    assert set_left_most_unset_bit(33) == 28\n    assert set_left_most_unset_bit(34) == 29\n    assert set_left_most_unset_bit(35) == 30\n    assert set_left_most_unset_bit(36) == 31\n    assert set_left_most_unset_bit(37) == 32\n    assert set_left_most_unset_bit(38) == 33\n    assert set_left_most_unset_bit(39) == 34\n    assert set_left_most_unset_bit(40) == 35\n    assert set_left_most_unset_bit(41) == 36\n    assert set_left_most_unset_bit(42) == 37\n    assert set_left_most_unset_bit(43) == 38\n    assert set_left_most_unset_bit(44) == 39\n    assert set_left_most_unset_bit(45) == 40\n    assert set_left_most_unset_bit(46) == 41\n    assert set_left_most_unset_bit(47) == 42\n    assert set_left_most_unset_bit(48) == 43\n    assert set_left_most_unset_bit(49) == 44\n    assert set_left_most_unset_bit(50) == 45\n    assert set_left_most_unset_bit(51) == 46\n    assert set_left_most_unset_bit(52) == 47\n    assert set_left_most_unset_bit(53) == 48\n    assert set_left_most_unset_bit(54) == 49\n    assert set_left_most_unset_bit(55) == 50\n    assert set_left_most_unset_bit(56) == 51\n    assert set_left_most_unset_bit(57) == 52\n    assert set_left_most_unset_bit(58) == 53\n    assert set_left_most_unset_bit(59) == 54\n    assert set_left_most_unset_bit(60) == 55\n    assert set_left_most_unset_bit(61) == 56\n    assert set_left_most_unset_bi"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Extract the last digit using bitwise AND\n    last_digit = n & -n\n    # Shift the last digit to the left to make the first \n    # bit set and store it in the same number\n    n = n ^ last_digit\n    # Set the last digit to 1\n    n = n + 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #if n == 0:\n    #    return 1\n    #else:\n    #    return set_left_most_unset_bit(n // 2) * 2 + n % 2\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    l = len(bin(n)) - 2\n    if l == 0:\n        return n\n    else:\n        return n | 1 << l\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bin_rep = bin(n)\n    bin_rep = bin_rep[2:]\n    bin_rep = \"0\"*(len(bin_rep) - bin_rep.count('1')) + bin_rep\n    return int(bin_rep, 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #if n is already a binary number then return n\n    if type(n) is int:\n        return n\n    #if n is a negative integer then return -1\n    if n<0:\n        return -1\n    #if n is zero then return 1\n    if n==0:\n        return 1\n    #if n is a positive integer then return n\n    if n>0:\n        return n\n    #if n is a floating point number then return int(n)\n    if type(n) is float:\n        return int(n)\n    #if n is a string then return 0\n    if type(n) is str:\n        return 0\n    #else raise an error\n    raise ValueError('Number is not a valid binary number')\n    \ndef is_binary_number(n):\n    '''\n    Write a python function to check if a number is a binary number or not.\n    '''\n    #if n is already a binary number then return True\n    if type(n) is int:\n        return True\n    #if n is a floating point number then return False\n    if type(n) is float:\n        return False\n    #if n is a string then return False\n    if type(n) is str:\n        return False\n    #if n is a list then return False\n    if type(n) is list:\n        return False\n    #if n is a tuple then return False\n    if type(n) is tuple:\n        return False\n    #else raise an error\n    raise ValueError('Number is not a valid binary number')\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # This algorithm is from \n    # http://stackoverflow.com/questions/10541354/how-to-find-the-index-of-the-bit-for-which-a-bit-is-unset-in-python\n    # which is in turn from http://stackoverflow.com/questions/325901/setting-bit-of-byte\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n & 1 == 0:\n        n = n >> 1\n        count += 1\n    \n    n |= (1 << count)\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = math.pi\n    v = pi * (r**2) * h /3\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1/3 * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print math.pi * r * r * h / 3.0\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1.0/3.0)*(math.pi)*(r**2)*(h)\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1.0/3.0*math.pi*r**2*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*(r**2)*(3.1415926535897932384626433)/3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    return ((3.14)*r*r*h/3)\ndef volume_box(l,w,h):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    l = float(l)\n    w = float(w)\n    h = float(h)\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return (3.14*r*r*h)/3\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    return (4/3)*(3.14)*r*r*r\ndef volume_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    return (a*b*h)/3\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    return (4/3)*(3.14)*r*r*r\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_2(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_3(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_4(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_5(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_6(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_7(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_8(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_9(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_10(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_11(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_12(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_13(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_14(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_15(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_16(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_17(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef volume_triangle_18(a,b,c):\n    '''\n    Write a function to find th"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if h < 0:\n        return 'Error: height should be positive'\n    if r < 0:\n        return 'Error: radius should be positive'\n    elif r == 0:\n        return math.pi*r**2*h/3\n    else:\n        return (1/3)*(math.pi*(r**2) + math.sqrt((r**2)*(r**2) + (3*r*h)))/r\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*(r**2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (3.14*r**2*h)/3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 3.14*r**2*h\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14*r**2\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef area_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return ((a+b)*h)/2\ndef area_triangle(s,t):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (s*t)/2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.p"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while (1<<count) <= n:\n        count += 1\n    return count-1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    def check_If_Pow_2(n): \n        '''\n        A helper function that checks if n is a power of 2.\n        '''\n        if (n == 0): return False\n        return n & (n - 1) == 0\n    \n    \n    def max_Power_of_2(n): \n        '''\n        A helper function that computes the max power of 2 that is less than or equal to n.\n        '''\n        m = 0\n        while(check_If_Pow_2(n)):\n            n >>= 1\n            m += 1\n        return m\n    \n    \n    def check_If_Pow_2_less_than_n(n): \n        '''\n        A helper function that checks if n is a power of 2 and less than n.\n        '''\n        if (n == 0): return False\n        return check_If_Pow_2(n) and n < n\n    \n    \n    max_Pow_of_2_less_than_n = max_Power_of_2(n)\n    \n    return 2**max_Pow_of_2_less_than_n\n    \n    \nprint highest_Power_of_2(10)\nprint highest_Power_of_2(12)\nprint highest_Power_of_2(13)\nprint highest_Power_of_2(14)\nprint highest_Power_of_2(15)\nprint highest_Power_of_2(16)\nprint highest_Power_of_2(17)\nprint highest_Power_of_2(18)\nprint highest_Power_of_2(19)\nprint highest_Power_of_2(20)\nprint highest_Power_of_2(21)\nprint highest_Power_of_2(22)\nprint highest_Power_of_2(23)\nprint highest_Power_of_2(24)\nprint highest_Power_of_2(25)\nprint highest_Power_of_2(26)\nprint highest_Power_of_2(27)\nprint highest_Power_of_2(28)\nprint highest_Power_of_2(29)\nprint highest_Power_of_2(30)\nprint highest_Power_of_2(31)\nprint highest_Power_of_2(32)\nprint highest_Power_of_2(33)\nprint highest_Power_of_2(34)\nprint highest_Power_of_2(35)\nprint highest_Power_of_2(36)\nprint highest_Power_of_2(37)\nprint highest_Power_of_2(38)\nprint highest_Power_of_2(39)\nprint highest_Power_of_2(40)\nprint highest_Power_of_2(41)\nprint highest_Power_of_2(42)\nprint highest_Power_of_2(43)\nprint highest_Power_of_2(44)\nprint highest_Power_of_2(45)\nprint highest_Power_of_2(46)\nprint highest_Power_of_2(47)\nprint highest_Power_of_2(48)\nprint highest_Power_of_2(49)\nprint highest_Power_of_2(50)\nprint highest_Power_of_2(51)\nprint highest_Power_of_2(52)\nprint highest_Power_of_2(53)\nprint highest_Power_of_2(54)\nprint highest_Power_of_2(55)\nprint highest_Power_of_2(56)\nprint highest_Power_of_2(57)\nprint highest_Power_of_2(58)\nprint highest_Power_of_2(59)\nprint highest_Power_of_2(60)\nprint highest_Power_of_2(61)\nprint highest_Power_of_2(62)\nprint highest_Power_of_2(63)\nprint highest_Power_of_2(64)\nprint highest_Power_of_2(65)\nprint highest_Power_of_2(66)\nprint highest_Power_of_2(67)\nprint highest_Power_of_2(68)\nprint highest_Power_of_2(69)\nprint highest_Power_of_2(70)\nprint highest_Power_of_2(71)\nprint highest_Power_of_2(72)\nprint highest_Power_of_2(73)\nprint highest_Power_of_2(74)\nprint highest_Power_of_2(75)\nprint highest_Power_of_2(76)\nprint highest_Power_of_2(77)\nprint highest_Power_of_2(78)\nprint highest_Power_of_2(79)\nprint highest_Power_of_2(80)\nprint highest_Power_of_2(81)\nprint highest_Power_of_2(82)\nprint highest_Power_of_2(83)\nprint highest_Power_of_2(84)\nprint highest_Power_of_2(85)\nprint highest_Power_of_2(86)\nprint highest_Power_of_2(87)\nprint highest_Power_of_2(88)\nprint highest_Power_of_2(89)\nprint highest_Power_of_2(90)\nprint highest_Power_of_2(91)\nprint highest_Power_of_2(92)\nprint highest_Power_of_2(93)\nprint highest_Power_of_2(94)\nprint highest_Power_of_2(95)\nprint highest_Power_of_2(96)\nprint highest_Power_of_2(97)\nprint highest_Power_of_2(98)\nprint highest_Power_of_2(99)\nprint highest_Power_of_2(100)\nprint highest_Power_of_2(101)\nprint highest_Power_of_2(102)\nprint highest_Power_of_2(103)\nprint highest_Power_of_2(104)\nprint highest_Power_of_2(105)\nprint highest_Power_of_2(106)\nprint highest_Power_of_2(107)\nprint highest_Power_of_2(108)\nprint highest_Power_of_2(109)\nprint highest_Power_of_2(110)\nprint highest_Power_of_2(111)\nprint highest_Power_of_2(112)\nprint highest_Power_of_2(113)\nprint highest_Power_of_2(114)\nprint highest_Power_of_2(115)\nprint highest_Power_of_2(116)\nprint highest_Power_of_2(117)\nprint highest_Power_of_2(118)\nprint highest_Power_of_2(119)\nprint highest_Power_of_2(120)\nprint highest_Power_of_2(121)\nprint highest_Power_of_2(122)\nprint highest_Power_of_2(123)\nprint highest_Power_of_2(124)\nprint highest_Power_of_2(125)\nprint highest_Power_of_2(126)\nprint highest_Power_of_2(127)\nprint highest_Power_of_2(128)\nprint highest_Power_of_2(129)\nprint highest_Power_of_2(130)\nprint highest_Power_of_2(131)\nprint highest_Power_of_2(132)\nprint highest_Power_of_2(133)\nprint highest_Power_of_2(134)\nprint highest_Power_of_2(135)\nprint highest_Power_of_2(136)\nprint highest_Power_of_2(137)\nprint highest_Power_of_2(138)\nprint highest_Power_of_2(139)\nprint highest_Power_of_2(140)\nprint highest_Power_of_2(141)\nprint highest_Power_of_2(142)\nprint highest_Power_of_2(143)\nprint highest_Power_of_2(144)\nprint highest_Power_of_2(145)\nprint highest_Power_of_2(146)\nprint highest_Power_of_2(147)\nprint highest_Power_of_2(148)\nprint highest_Power_of_2(149)\nprint highest_Power_of_2(150)\nprint highest_Power_of_2(151)\nprint highest_Power_of_2(152)\nprint highest_Power_of_2(153)\nprint highest_Power_of"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    p = 1\n    while p <= n:\n        p = p << 1\n    return p-1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # using bitwise logic to find the power of 2\n    # which is less than or equal to n\n    return 1 << n.bit_length() - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    power=0\n    while n/2**power > 1:\n        power+=1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    a = 1\n    while (a <= n):\n        a *= 2\n    return a/2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 0\n    for i in range(n):\n        if (2**i) <= n:\n            highest = i\n    return highest\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1: \n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + highest_Power_of_2(n/2)\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    l = [2**i for i in range(n)]\n    l2 = [2**i for i in range(n+1)]\n    l.reverse()\n    l2.reverse()\n    l = l[1:]\n    l2 = l2[1:]\n    l = l[:n]\n    l2 = l2[:n]\n    a = l.index(max(l))\n    b = l2.index(max(l2))\n    return a - b\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #return int(math.log(n)/math.log(2))\n    #return int(log(n)/log(2))\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    lucas = [2,1]\n    for i in range(2, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_list = [2, 1]\n    for i in range(2, n):\n        lucas_list.append(lucas_list[i-1] + lucas_list[i-2])\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #find_lucas(1) -> 2\n    #find_lucas(2) -> 1\n    #find_lucas(3) -> 3\n    #find_lucas(4) -> 4\n    #find_lucas(5) -> 5\n    #find_lucas(6) -> 8\n    #find_lucas(7) -> 13\n    #find_lucas(8) -> 21\n    #find_lucas(9) -> 34\n    #find_lucas(10) -> 55\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    if n == 1: \n        return 1\n    lucas = [0,1]\n    for i in range(2,n+1): \n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_seq = [2,1]\n    for i in range(2,n):\n        lucas_seq.append(lucas_seq[i-1] + lucas_seq[i-2])\n    return lucas_seq[n-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for s in list_:\n        new_list.append(string.format(s))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # iterate over the list\n    for index, item in enumerate(list_):\n        # cast to string\n        list_[index] = str(item)\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(0, len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if list_:\n        list_.append(''.join(string.split()))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string % item)\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not list_:\n        return string\n    return '%s%s' % (string, add_string(list_[1:], list_[0]))\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    out_dict = {}\n    for i in range(len(l1)):\n        out_dict[l1[i]] = l2[i]\n        out_dict[l1[i]+'_'+l3[i]] = l3[i]\n    return out_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {l2[i]: l3[i]}\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = dict(zip(l1,l2))\n    dict2 = dict(zip(l1,l3))\n    return dict1, dict2\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i in range(len(l1)):\n        l2[l1[i]] = l3[i]\n    return l2\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in l1:\n        dictionary[i] = {}\n        dictionary[i][l2[0]] = l3[0]\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    d['list'] = {}\n    for i in range(0,len(l1)):\n        d['list'][i] = {}\n        d['list'][i]['c1'] = l1[i]\n        d['list'][i]['c2'] = l2[i]\n        d['list'][i]['c3'] = l3[i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {}\n    for i in l1:\n        if isinstance(i, list):\n            dic[i[0]] = convert_list_dictionary(i[1:], l2, l3)\n        else:\n            dic[i] = l3[i]\n    return dic\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    out = {}\n    for i, d1 in enumerate(l1):\n        for j, d2 in enumerate(l2):\n            for k, d3 in enumerate(l3):\n                out[d1, d2, d3] = d1[i] * d2[j] * d3[k]\n    return out\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return \"Input is not of the same length\"\n    else:\n        return {l1[i]: {l2[i]: {l3[i]: l1[i]}} for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for index, value in enumerate(l1):\n        if not index % 2:\n            d[value] = {}\n            for index2, value2 in enumerate(l2):\n                if not index2 % 2:\n                    d[value][value2] = {}\n                    for index3, value3 in enumerate(l3):\n                        if not index3 % 2:\n                            d[value][value2][value3] = d[value2][value3] = d[value][value2][value3] = value3\n                        else:\n                            d[value][value2][value3] = d[value2][value3] = d[value][value2][value3] = value2\n        else:\n            d[value] = {}\n            for index2, value2 in enumerate(l2):\n                if not index2 % 2:\n                    d[value][value2] = d[value2] = d[value][value2] = value2\n                else:\n                    d[value][value2] = d[value2] = d[value][value2] = value\n    return d\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n%2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    elif n%3 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4)\n    elif n%4 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3)\n    else:\n        return get_max_sum(n/2)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 4\n    \n    if n == 4:\n        return 7\n    \n    if n == 5:\n        return 11\n    \n    f1 = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    \n    if n % 2 == 0:\n        f1 += get_max_sum(n/2)\n    \n    if n % 3 == 0:\n        f1 += get_max_sum(n/3)\n    \n    if n % 4 == 0:\n        f1 += get_max_sum(n/4)\n    \n    if n % 5 == 0:\n        f1 += get_max_sum(n/5)\n    \n    return max(f1, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n+1):\n        sum_i = i\n        sum_i = sum_i / 2 + sum_i / 3 + sum_i / 4 + sum_i / 5\n        if (sum_i > max_sum):\n            max_sum = sum_i\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n%2 == 0:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n    else:\n        return max(get_max_sum(n-1), get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4)) + n\n    \n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    res = 0\n    for i in range(1, n+1):\n        res = max(res, max(i, res) + i)\n    return res\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    elif n % 3 == 0:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4), n)\n    elif n % 5 == 0:\n        return max(get_max_sum(n/2) + get_max_sum(n/3), n)\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    n_max = n/2\n    while n_max > 1:\n        n_max /= 2\n        n_max += n/3\n        n_max += n/4\n        n_max += n/5\n    return n_max\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # use a list to store the length of the list\n    length = []\n    # traverse through the list\n    for i in input_list:\n        # assign the length of the list\n        length.append(len(i))\n    # compare the length of the list\n    if len(length) == 0:\n        return None\n    else:\n        # use max() to find the max length\n        return max(length)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = None\n    for idx,l in enumerate(input_list):\n        if len(l) > max_len:\n            max_len = len(l)\n            max_len_list = l\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for list_elem in input_list:\n        if max_length < len(list_elem):\n            max_length = len(list_elem)\n            \n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for each_list in input_list:\n        if len(each_list) > max_len:\n            max_len = len(each_list)\n            max_list = each_list\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return None\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    input_list_length = len(input_list)\n    max_length = 0\n    max_length_list = []\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    result = {}\n    for element in input_list:\n        if not result.has_key(len(element)):\n            result[len(element)] = [element]\n        else:\n            result[len(element)].append(element)\n    max_length = result[max(result.keys())]\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    index = -1\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            index = input_list.index(i)\n    return input_list[index]\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for i in input_list:\n        length_list.append(len(i))\n    length_list.sort()\n    return input_list[length_list.index(length_list[-1])]\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # base case\n    if len(input_list) == 1:\n        return input_list\n    # split the list\n    else:\n        first_half = input_list[:len(input_list)/2]\n        second_half = input_list[len(input_list)/2:]\n        return max_length_list(first_half) + max_length_list(second_half)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    n = len(test_tup)\n    flag = 1\n    for i in range(n):\n        for j in range(i+1,n):\n            if test_tup[i] == test_tup[j]:\n                flag = 0\n    return flag\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n    \n    \ndef get_index_of_first_duplicate(test_tup):\n    '''\n    Write a function to find the index of the first duplicate in a tuple.\n    '''\n    pass\n    \n    \ndef duplicate_and_sort(test_tup):\n    '''\n    Write a function to find the duplicate elements in a tuple and sort them.\n    '''\n    pass\n    \n    \ndef add_space_between_duplicates(test_tup):\n    '''\n    Write a function to find the duplicate elements in a tuple and add space between them.\n    '''\n    pass\n    \n    \ndef find_first_missing_number(test_tup):\n    '''\n    Write a function to find the first missing number in a tuple.\n    '''\n    pass\n    \n    \ndef remove_elements(test_tup, n):\n    '''\n    Write a function to remove the first n elements from the tuple.\n    '''\n    pass\n    \n    \ndef slice_tuple(test_tup):\n    '''\n    Write a function to slice the tuple.\n    '''\n    pass\n    \n    \ndef compare_all_elements_of_a_tuple(test_tup):\n    '''\n    Write a function to compare all elements of a tuple.\n    '''\n    pass\n    \n    \ndef is_anagram(test_tup):\n    '''\n    Write a function to check if a tuple is an anagram of another.\n    '''\n    pass\n    \n    \ndef tuples_list(test_tup):\n    '''\n    Write a function to convert tuple into a list.\n    '''\n    pass\n    \n    \ndef tuple_to_list(test_tup):\n    '''\n    Write a function to convert a list into a tuple.\n    '''\n    pass\n    \n    \ndef is_sorted(test_tup):\n    '''\n    Write a function to check if the tuple is sorted.\n    '''\n    pass\n    \n    \ndef reverse_tuple(test_tup):\n    '''\n    Write a function to reverse the tuple.\n    '''\n    pass\n    \n    \ndef reverse_list(test_tup):\n    '''\n    Write a function to reverse a list.\n    '''\n    pass\n    \n    \ndef rotate_tuple(test_tup):\n    '''\n    Write a function to rotate a tuple.\n    '''\n    pass\n    \n    \ndef rotate_list(test_tup):\n    '''\n    Write a function to rotate a list.\n    '''\n    pass\n    \n    \ndef count_chars(test_tup):\n    '''\n    Write a function to count the number of times a character occurs in a tuple.\n    '''\n    pass\n    \n    \ndef get_most_occuring_char(test_tup):\n    '''\n    Write a function to find the most occuring character in a tuple.\n    '''\n    pass\n    \n    \ndef index_of_char(test_tup):\n    '''\n    Write a function to find the index of a character in a tuple.\n    '''\n    pass\n    \n    \ndef is_palindrome(test_tup):\n    '''\n    Write a function to check if a tuple is a palindrome.\n    '''\n    pass\n    \n    \ndef hash_tuple(test_tup):\n    '''\n    Write a function to hash a tuple.\n    '''\n    pass\n    \n    \ndef main():\n    pass\n    \n    \nif __name__ == '__main__':\n    main()\n    "
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for i in test_tup:\n        if i in seen:\n            return False\n        else:\n            seen.add(i)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # elements, their frequency\n    dict = {}\n    for tup in test_tup:\n        if tup in dict:\n            dict[tup] += 1\n        else:\n            dict[tup] = 1\n    # check for distinct\n    for tup in test_tup:\n        if dict[tup] > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    key_val = list()\n    for key in test_tup:\n        if key in key_val:\n            return False\n        else:\n            key_val.append(key)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #keys = set()\n    #for t in test_tup:\n    #    keys.add(t)\n    #return len(keys) == len(test_tup)\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # code here\n    if str1 == None:\n        return\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Storing the final string as'res'\n    res = str1[0]\n    #Storing the index of first character in str1 as 'first'\n    first = str1.index(res)\n    #Storing the second character in str1 as'second'\n    second = str1[1]\n    #Storing the index of second character in str1 as'second'\n    second = str1.index(second)\n    #If the first character is the same as the second character then the repeated character is at the end of string and return the first character\n    if res == second:\n        return res\n    #If the first character is not the same as the second character then the repeated character is before the second character\n    else:\n        return first\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    s_dict = {}\n    s_list = []\n    s = str1.split()\n    for i in range(len(s)):\n        s_dict[s[i]] = s.count(s[i])\n        s_list.append(s[i])\n    \n    for i in range(len(s_list)):\n        if s_dict[s_list[i]] == 1:\n            return s_list[i]\n    \n    return ''\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in range(len(str1)):\n        if str1[i] not in dict1:\n            dict1[str1[i]] = 1\n        else:\n            dict1[str1[i]] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    characters = {}\n    for char in str1:\n        if char in characters:\n            characters[char] += 1\n        else:\n            characters[char] = 1\n    for char in str1:\n        if characters[char] == 1:\n            return char\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Remove the space character\n    str1 = str1.replace(\" \",\"\")\n    # convert the string to a list\n    l = list(str1)\n    # initialize the count variable to 0\n    count = 0\n    # loop over the list\n    for i in l:\n        # if the list element is in the list then increment the count by 1\n        if i in l:\n            count = count + 1\n        # if the count is 1, then return the list element\n        if count == 1:\n            return i\n    # if the count is not 1, then return '_'\n    return \"_\"\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # checking if the given string has any character repeating\n    # if not, then return -1 (as it is a first non-repeating character)\n    # if yes, then the first non-repeating character is the last character of the string\n    # to get the last character of the string, use -1 for the start index\n    # end index is the last index of the string\n    last_index = len(str1) - 1\n    for i in range(len(str1)):\n        if str1[i] in str1[i + 1:]:\n            return str1[i]\n        else:\n            if i == last_index:\n                return '-1'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict_={}\n    for i in str1:\n        if i in dict_:\n            dict_[i]+=1\n        else:\n            dict_[i]=1\n    for i in str1:\n        if dict_[i]==1:\n            return i\n        else:\n            pass\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # character_counts = {}\n    # for character in str1:\n    #     character_counts[character] = character_counts.get(character, 0) + 1\n    # for key, value in character_counts.iteritems():\n    #     if value == 1:\n    #         return key\n    # return None\n    \n    # Better approach\n    for character in str1:\n        if str1.count(character) == 1:\n            return character\n    return None\n    "
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string): \n        return True \n    else: \n        return False \ndef main(): \n    print(check_char('abc'))\n    print(check_char('a'))\n    print(check_char('aa'))\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    try:\n        return bool(re.match(regex,string))\n    except:\n        return 'input error'\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string) and len(string)>1:\n        return True\n    else:\n        return False\nprint(check_char('abb'))\nprint(check_char('bbb'))\nprint(check_char('abbb'))\nprint(check_char('abbbb'))\nprint(check_char('ab'))\nprint(check_char('b'))\nprint(check_char('bb'))\nprint(check_char('bba'))\nprint(check_char('aba'))\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string): \n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string): \n        print(\"This is a word\")\n    else:\n        print(\"This is not a word\")\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\ndef check_char1(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.match(regex,string) else False\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    if a<b:\n        if b<c:\n            return b\n        elif b>c:\n            return c\n        else:\n            return b\n    else:\n        if a<c:\n            return a\n        elif a>c:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return a\n        else:\n            return c\n    elif a > c:\n        return a\n    elif b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        if c>a:\n            return c\n        else:\n            return b\n    else:\n        if b>c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return b\n        elif a<c:\n            return a\n        else:\n            return c\n    elif a>b:\n        if a<c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n    else:\n        return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    elif b > a:\n        if b > c:\n            return b\n        elif c > a:\n            return c\n        else:\n            return a\n    else:\n        if c > b:\n            return c\n        elif b > a:\n            return b\n        else:\n            return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = [a,b,c]\n    sorted_list.sort()\n    middle = len(sorted_list)/2\n    if len(sorted_list)%2!= 0:\n        return sorted_list[middle]\n    else:\n        return (sorted_list[middle-1]+sorted_list[middle])/2\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    l = [a,b,c]\n    l.sort()\n    if len(l)%2 == 1:\n        return l[len(l)/2]\n    else:\n        return (l[len(l)/2-1] + l[len(l)/2])/2.0\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # your code here\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #Make sure the input is of list type\n    if not isinstance(a,list):\n        raise ValueError('Invalid input')\n    if not isinstance(b,list):\n        raise ValueError('Invalid input')\n    if not isinstance(c,list):\n        raise ValueError('Invalid input')\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(str(n)) for n in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_of_digits_recursive(nums, result):\n        if len(nums) == 0:\n            return result\n        return sum_of_digits_recursive(nums[1:], result + nums[0])\n    return sum_of_digits_recursive(nums, 0)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = []\n    for i in range(len(nums)):\n        x = 0\n        while nums[i]:\n            x += nums[i] % 10\n            nums[i] //= 10\n        res.append(x)\n    return res\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_digits(n):\n        return n and (n%10) + sum_digits(n//10)\n    return reduce(lambda s, n: s + n, (sum_digits(n) for n in nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(num) for num in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    dig_sum = []\n    for num in nums:\n        dig_sum.append(sum(int(x) for x in str(num)))\n    return dig_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum([int(i) for i in str(num)])\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Write your code here\n    total = 0\n    for num in nums:\n        total += sum([int(digit) for digit in str(num)])\n    return total\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([a ^ b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1, test_tup2 = list(test_tup1), list(test_tup2)\n    return tuple([x^y for x,y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple( x^y for x, y in zip(test_tup1, test_tup2) )\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = test_tup1[1]\n    test_tup2 = test_tup2[1]\n    if len(test_tup1)!= len(test_tup2):\n        return\n    elif len(test_tup1) == 0:\n        return\n    elif len(test_tup1) == 1:\n        return (test_tup1[0] ^ test_tup2[0], [test_tup1[0], test_tup2[0]])\n    else:\n        mid = int(len(test_tup1) / 2)\n        test_tup1 = test_tup1[0:mid]\n        test_tup2 = test_tup2[0:mid]\n        a = bitwise_xor(test_tup1, test_tup2)\n        test_tup1 = test_tup1[mid:]\n        test_tup2 = test_tup2[mid:]\n        b = bitwise_xor(test_tup1, test_tup2)\n        test_tup1 = test_tup1[0:mid-1]\n        test_tup2 = test_tup2[0:mid-1]\n        c = bitwise_xor(test_tup1, test_tup2)\n        return (a[0] ^ b[0] ^ c[0], [a[0], b[0], c[0]])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #Test tuple 1\n    assert type(test_tup1) == tuple\n    assert len(test_tup1) == 2\n    assert type(test_tup1[0]) == int\n    assert type(test_tup1[1]) == int\n    #Test tuple 2\n    assert type(test_tup2) == tuple\n    assert len(test_tup2) == 2\n    assert type(test_tup2[0]) == int\n    assert type(test_tup2[1]) == int\n    #Perform xor\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    first_tup = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return first_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tuple_length = len(test_tup1)\n    if tuple_length!= len(test_tup2):\n        return \"Invalid input. The tuples must have the same length.\"\n    result = []\n    for i in range(tuple_length):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = set()\n    for item in test_list:\n        result.add(item)\n    return len(result)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    counts = dict()\n    for tup in test_list:\n        if tup in counts:\n            counts[tup] += 1\n        else:\n            counts[tup] = 1\n    return len(counts)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = set(test_list)\n    return len(result)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for key,val in test_list:\n        if key not in freq:\n            freq[key] = []\n        freq[key].append(val)\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        if test_list.count(i) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    count = {}\n    for item in test_list:\n        if item in count.keys():\n            count[item] += 1\n        else:\n            count[item] = 1\n    return len(count)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import defaultdict\n    #we should convert the list to a dictionary, and get the key for the same value\n    dic = defaultdict(int)\n    for i in test_list:\n        dic[i]+=1\n    return dic\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        new_tup += (i + j,)\n    return new_tup\n    \nprint(add_nested_tuples((1, 2, 3), (4, 5, 6)))\nprint(add_nested_tuples((1, 2, 3), (4, 5)))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize result\n    res = ()\n    # Check if either tuple is empty, if empty return empty tuple\n    if not test_tup1 and not test_tup2:\n        return res\n    elif not test_tup1:\n        return test_tup2\n    elif not test_tup2:\n        return test_tup1\n    # if both tuples are non-empty, perform the addition\n    for i in range(len(test_tup1)):\n        res = res + (test_tup1[i] + test_tup2[i],)\n    return res\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(map(sum, zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for idx, val in enumerate(test_tup1):\n        result_tup += (val + test_tup2[idx],)\n    return result_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += (test_tup1[i] + test_tup2[i],)\n    return test_tup3\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuple(test_tup1, test_tup2):\n        '''\n        Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n        '''\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] + test_tup2[i]\n        return test_tup1\n    \n    return add_nested_tuple(test_tup1, test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #use zip() to add tuple elements\n    return tuple(x + y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] + test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return []\n    elif len(test_tup1) == 1 and len(test_tup2) == 1:\n        return [(test_tup1[0] + test_tup2[0])]\n    elif len(test_tup1) == 1:\n        return [(test_tup1[0] + test_tup2[0])] + add_nested_tuples(test_tup1[0], test_tup2[1:])\n    elif len(test_tup2) == 1:\n        return [(test_tup1[0] + test_tup2[0])] + add_nested_tuples(test_tup1[1:], test_tup2[0])\n    else:\n        return [(test_tup1[0] + test_tup2[0])] + add_nested_tuples(test_tup1[1:], test_tup2[1:])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] + test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    elif b<a:\n        return b\n    else:\n        return 0\n    \n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tup in tuplex:\n        if tup == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    \ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)==type(tuple1):\n        for i in tuplex:\n            if i==tuple1:\n                return True\n    else:\n        return False\n    \n    "
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i == tuple1: \n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return (tuplex[0]==tuple1[0]) and (tuplex[1]==tuple1[1]) and (tuplex[2]==tuple1[2])\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # print(tuple1)\n    # print(tuplex)\n    return tuple1[0] in tuplex\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\ndef check_tuplex1(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex2(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex3(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\ndef check_tuplex4(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex5(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex6(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex7(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex8(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex9(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex10(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex11(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex12(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex13(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex14(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex15(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex16(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex17(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex18(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex19(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex20(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex21(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex22(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex23(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex24(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex25(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex26(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex27(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex28(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex29(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex30(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex31(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex32(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex33(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\ndef check_tuplex34(tuplex,tuple1): \n    '''\n    Write a function to check whethe"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    count = 0\n    while (x > 0):\n        count += 1\n        x &= x-1\n    return count % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return x\n    else:\n        return 0\n    \n    \ndef find_Parity_with_list(x):\n    return (x % 2 == 0)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Initialize the variable to store the parity \n    parity = 0\n    # Loop over the digits of the number \n    for i in x: \n        # Perform a bitwise NOT on the digit and add it to the parity variable \n        parity = parity ^ int(i)\n    # The parity of the number x will be equal to the parity value \n    if parity == 1: \n        # The number is odd \n        return 'odd'\n    else: \n        # The number is even \n        return 'even'\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    s = 0\n    while x!= 0:\n        s = s + 1\n        x = x & (x - 1)\n    if s % 2 == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    for i in xrange(len(x)):\n        if x[i]%2==1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = bin(x)\n    l = len(x)\n    if (l % 2) == 0:\n        return int(x[-1])\n    else:\n        return int(not(x[-1]))\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        str_n = str(n)\n        i = 0\n        while True:\n            if str_n[i] < str_n[i+1]:\n                break\n            else:\n                i += 1\n        str_n = str_n[:i] + str(int(str_n[i]) + 1) + str_n[i+1:]\n        return int(str_n)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    if len(num) == 1:\n        return -1\n    elif len(num) == 2:\n        if num[1] > num[0]:\n            return num\n        else:\n            return -1\n    else:\n        digits = []\n        for i in range(len(num)):\n            if i == 0:\n                pass\n            elif i == len(num)-1:\n                pass\n            else:\n                if int(num[i]) > int(num[i+1]):\n                    pass\n                elif int(num[i]) < int(num[i+1]):\n                    pass\n                elif int(num[i]) == int(num[i+1]):\n                    pass\n        \n        print digits\n        return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n + 1\n    digits = []\n    for i in str(n):\n        digits.append(int(i))\n    rearranged_digits = digits[::-1]\n    total = 0\n    for i in range(len(rearranged_digits)):\n        total += rearranged_digits[i] * (10 ** i)\n    return total\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    rearrange = []\n    for i in range(len(digits)):\n        n = len(digits) - i\n        if n % 2 == 0:\n            print(n)\n            print(digits[n // 2])\n            print(digits[n // 2 - 1])\n            rearrange.append(digits[n // 2 - 1])\n            rearrange.append(digits[n // 2])\n        else:\n            print(n)\n            print(digits[n // 2])\n            rearrange.append(digits[n // 2])\n    print(rearrange)\n    return int(''.join(rearrange))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    new_n = ''\n    for i in range(len(n)-1, -1, -1):\n        if int(n[i]) > int(n[i+1]):\n            new_n = new_n + n[i]\n        else:\n            new_n = new_n + str(int(n[i])+1)\n    return int(new_n)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #get all the digits\n    digits = [int(i) for i in str(n)]\n    #check for the right order of digits\n    if digits == sorted(digits, reverse=True):\n        return -1\n    #find the index of the smallest number that is greater than n\n    smallest_larger = -1\n    for i in range(len(digits)-1, -1, -1):\n        if digits[i] < digits[i-1]:\n            smallest_larger = i\n            break\n    #if there is no number with the smallest number is greater than n, then the smallest number is the last number\n    if smallest_larger == -1:\n        smallest_larger = len(digits) - 1\n    #rearrange the digits to make the smallest number greater than n\n    new_digits = digits[:smallest_larger]\n    #find the index of the biggest number that is smaller than the smallest number\n    largest_smaller = -1\n    for i in range(0, smallest_larger):\n        if digits[i] > digits[smallest_larger]:\n            largest_smaller = i\n            break\n    #if there is no number with the biggest number is smaller than the smallest number, then the biggest number is the last number\n    if largest_smaller == -1:\n        largest_smaller = len(digits) - 1\n    #rearrange the digits to make the biggest number smaller than the smallest number\n    new_digits.extend(digits[largest_smaller:smallest_larger])\n    new_digits.extend(digits[:smallest_larger])\n    #rearrange the digits to make the smallest number greater than n\n    new_digits.extend(digits[smallest_larger:])\n    new_n = int(''.join([str(i) for i in new_digits]))\n    return new_n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s=str(n)\n    if len(s)==1:\n        return -1\n    elif len(s)==2:\n        if s[0]>s[1]:\n            return -1\n        else:\n            return int(s[1]+s[0])\n    else:\n        flag=0\n        for i in range(len(s)-1):\n            if s[i]>s[i+1]:\n                flag=1\n                break\n        if flag==0:\n            return -1\n        else:\n            f,l=s[i],s[i+1]\n            s=s[:i+1]+s[i+2:]\n            s=s[::-1]\n            for j in range(len(s)):\n                if s[j]==l:\n                    s=s[:j]+f+s[j:]\n            return int(s)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    arr = list(str(n))\n    arr.sort()\n    l = len(arr)\n    for i in range(l - 1, -1, -1):\n        if arr[i] < arr[i - 1]:\n            break\n    if i == 0:\n        return int(''.join(arr))\n    else:\n        arr[i:l] = arr[i - 1:l - 1]\n        return int(''.join(arr))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return n\n    new_num = int(str(n)[::-1])\n    if new_num > 2**31:\n        return 0\n    else:\n        return new_num\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 10:\n        return n + 1\n    else:\n        a = n % 10\n        b = (n // 10) % 10\n        if a < b:\n            return rearrange_bigger(b*10 + a)\n        else:\n            return rearrange_bigger(b*10 + a + 1)\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0 or nums1 == [] or nums2 == []:\n        return []\n    pairs = []\n    nums1.sort()\n    nums2.sort()\n    i = 0\n    j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            pairs.append((nums1[i], nums2[j]))\n            i += 1\n            if i == len(nums1):\n                break\n        elif nums1[i] == nums2[j]:\n            pairs.append((nums1[i], nums2[j]))\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n    if len(nums1) == 0 or len(nums2) == 0:\n        return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def get_pairs(nums, k):\n        pairs = []\n        min_heap = []\n        for num in nums:\n            heapq.heappush(min_heap, (num, num))\n        for _ in range(k):\n            pair = (heapq.heappop(min_heap)[1], heapq.heappop(min_heap)[0])\n            pairs.append(pair)\n        return pairs\n    return get_pairs(nums1, k) + get_pairs(nums2, k)\ndef get_intersection(nums1, nums2):\n    '''\n    Write a function to find the intersection of two arrays. \n    '''\n    s1, s2 = set(nums1), set(nums2)\n    return list(s1.intersection(s2))\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    arr1 = sorted(nums1)\n    arr2 = sorted(nums2)\n    output = []\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        output.append([arr1[i], arr2[j]])\n        i += 1\n        j += 1\n        if i < len(arr1) and j < len(arr2):\n            if arr1[i] + arr2[j] < arr1[i] + arr2[j-1]:\n                j += 1\n            else:\n                i += 1\n    return output[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k >= len(nums1)*len(nums2):\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    if k > len(nums1) * len(nums2) or k <= 0:\n        return res\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] < nums2[j]:\n                res.append((nums1[i], nums2[j]))\n            if len(res) == k:\n                return res\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(0, k):\n        heapq.heappush(heap, (nums1[i], nums2[i]))\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    pairs = []\n    for i in range(min(k, len(nums1))):\n        pairs.append((nums1[i], nums2[i]))\n    heapq.heapify(pairs)\n    for i in range(k, len(nums1)):\n        heapq.heappush(pairs, (nums1[i], nums2[i]))\n        if len(pairs) > k:\n            heapq.heappop(pairs)\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # return sorted(itertools.product(nums1, nums2))[:k]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # list1 = [\n    #     ('I','am'),\n    #     ('my','name'),\n    #     ('is','maranatha')\n    # ]\n    \n    # list1 = [\n    #     ('P','a'),\n    #     ('e','b'),\n    #     ('y','c')\n    # ]\n    \n    # list1 = [\n    #     ('I','am'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha')\n    # ]\n    \n    # list1 = [\n    #     ('I','am'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name')\n    # ]\n    \n    # list1 = [\n    #     ('I','am'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name')\n    # ]\n    \n    # list1 = [\n    #     ('I','am'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name'),\n    #     ('is','maranatha'),\n    #     ('my','name')\n    # ]\n    \n    list1 = [\n        ('I', 'am'),\n        ('my', 'name'),\n        ('is','maranatha'),\n        ('my', 'name'),\n        ('is','maranatha'),\n        ('my', 'name'),\n        ('is','maranatha'),\n        ('my', 'name'),\n        ('is','maranatha'),\n        ('my', 'name'),\n        ('is','maranatha'),\n        ('my', 'name'),\n        ('is','maranatha'),\n        ('my', 'name'),\n        ('is','maranatha'),\n        ('my', 'name'),\n        ('is','maranatha'),\n        ('my', 'name'),\n        ('is','maranatha'),\n        ('my', 'name')\n    ]\n    \n    def get_product(list1):\n        # print list1\n        # a,b = list1\n        # print a,b\n        # print 'a',a\n        # print 'b',b\n        # print 'a',a[0]\n        # print 'b',b[0]\n        # print 'a',a[1]\n        # print 'b',b[1]\n        # print 'a',a[2]\n        # print 'b',b[2]\n        # print 'a',a[3]\n        # print 'b',b[3]\n        # print 'a',a[4]\n        # print 'b',b[4]\n        # print 'a',a[5]\n        # print 'b',b[5]\n        # print 'a',a[6]\n        # print 'b',b[6]\n        # print 'a',a[7]\n        # print 'b',b[7]\n        # print 'a',a[8]\n        # print 'b',b[8]\n        # print 'a',a[9]\n        # print 'b',b[9]\n        # print 'a',a[10]\n        # print 'b',b[10]\n        # print 'a',a[11]\n        # print 'b',b[11]\n        # print 'a',a[12]\n        # print 'b',b[12]\n        # print 'a',a[13]\n        # print 'b',b[13]\n        # print 'a',a[14]\n        # print 'b',b[14]\n        # print 'a',a[15]\n        # print 'b',b[15]\n        # print 'a',a[16]\n        # print 'b',b[16]\n        # print 'a',a[17]\n        # print 'b',b[17]\n        # print 'a',a[18]\n        # print 'b',b[18]\n        # print 'a',a[19]\n        # print 'b',b[19]\n        # print 'a',a[20]\n        # print 'b',b[20]\n        # print 'a',a[21]\n        # print 'b',b[21]\n        # print 'a',a[22]\n        # print 'b',b[22]\n        # print 'a',a[23]\n        # print 'b',b[23]\n        # print 'a',a[24]\n        # print 'b',b[24]\n        # print 'a',a[25]\n        # print 'b',b[25]\n        # print 'a',a[26]\n        # print 'b',b[26]\n        # print 'a',a[27]\n        # print 'b',b[27]\n        # print 'a',a[28]\n        # print 'b',b[28]\n        # print 'a',a[29]\n        # print 'b',b[29]\n        # print 'a',a[30]\n        # print 'b',b[30]\n        # print 'a',a[31]\n        # print 'b',b[31]\n        # print 'a',a[32]\n        # print 'b',b[32]\n        # print 'a',a[33]\n        # print 'b',b[33]\n        # print 'a',a[34]\n        # print 'b',b[34]\n        # print 'a',a[35]\n        # print 'b',b[35]\n        # print 'a',a[36]\n        # print 'b',b[36]\n        # print 'a',a[37]\n        # print 'b',b[37]\n        # print 'a',a[38]\n        # print 'b',b[38]\n        # print 'a',a[39]\n        # print 'b',b[39]\n        # print 'a',a[40]\n        # print 'b',b[40]\n        # print 'a',a[41]\n        # print 'b',b[41]\n        # print 'a',a[42]\n        # print 'b',b[42]\n        # print 'a',a[43]\n        # print 'b',b[43]\n        # print 'a',a[44]\n        # print 'b',b[44]\n        # print 'a',a[45]\n        # print 'b',b[45]\n        # print 'a',a[46]\n        # print 'b',b[46]\n        # print 'a',a[47]\n        # print 'b',b[47]"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    new_list=[]\n    for i in list1:\n        new_list.append(i[0]*i[1])\n    return min(new_list)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(map(lambda x: x[0]*x[1],list1))\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # list1 = [(2, 3), (1, 4), (6, 6), (3, 5), (4, 1), (2, 7)]\n    # # [2, 3], [1, 4], [6, 6], [3, 5], [4, 1], [2, 7]\n    # list1 = [(1, 4), (3, 5), (2, 7)]\n    # # [1, 4], [3, 5], [2, 7]\n    \n    product_dict = {}\n    for pair in list1:\n        key = pair[0] * pair[1]\n        product_dict[key] = pair\n    return min(product_dict.keys())\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    if len(list1) % 2!= 0:\n        raise ValueError('List must be even length')\n        \n    if len(list1) < 1:\n        return (0,0)\n        \n    product_list = []\n    \n    for i in range(0,len(list1),2):\n        product_list.append(product(list1[i],list1[i+1]))\n        \n    return (min(product_list), product_list.count(min(product_list)))\n        \n    \n    "
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i]*list1[j] < result:\n                result = list1[i]*list1[j]\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = (list1[i][0] * list1[j][1])\n            min_product_list.append(product)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_list = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0]*list1[j][1] < list1[i][1]*list1[j][0]:\n                min_list.append((list1[i][0]*list1[j][1],list1[j][0]*list1[i][1]))\n            elif list1[i][0]*list1[j][1] > list1[i][1]*list1[j][0]:\n                min_list.append((list1[i][1]*list1[j][0],list1[i][0]*list1[j][1]))\n            else:\n                min_list.append((list1[i][0]*list1[j][1],list1[j][0]*list1[i][1]))\n    return min_list\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #empty tuple\n    product = ()\n    #add the smallest product tuple in the empty tuple\n    for i in list1:\n        if i[0] <= i[1]:\n            if i[0] <= product[0]:\n                product = (i[0],product[0])\n            else:\n                product = i\n        else:\n            if i[1] <= product[1]:\n                product = (i[1],product[1])\n            else:\n                product = i\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x:x[0])\n    list2 = list1[:]\n    list2.sort(key=lambda x:x[1])\n    min_prod = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][1] < list2[j][0]:\n                min_prod = min(min_prod, list1[i][0] * list2[j][1])\n    return min_prod\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = float('inf')\n    for v in listval:\n        if v < minval:\n            minval = v\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==1:\n        return listval[0]\n    if listval[0]<listval[1]:\n        return listval[0]\n    else:\n        return min_val(listval[1:])\n    "
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for item in listval:\n        if item < minval:\n            minval = item\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval, key=lambda x: x[1])\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) < 2:\n        return listval[0]\n    else:\n        return min(listval[0], min_val(listval[1:]))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(i.title() for i in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n    return word[0].lower() + word[1:]\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()\n    \ndef is_unique(word):\n    '''\n    Write a function to determine if the given word is unique or not.\n    '''\n    word = word.lower()\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(word)):\n        if word[i] in alpha:\n            alpha = alpha.replace(word[i], \"\")\n    return len(alpha) == 0\n    \ndef is_permutation(str1, str2):\n    '''\n    Write a function to determine if two strings are permutations of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef in_order(n):\n    '''\n    Write a function to determine if the integer n is a permutation of the \n    string \"1, 2, 3, 4, 5, 6, 7, 8, 9\".\n    '''\n    return sorted(str(n)) == \"123456789\"\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = word.split('_')\n    for index, value in enumerate(new_word):\n        if index == 0:\n            new_word[index] = new_word[index].capitalize()\n        else:\n            new_word[index] = new_word[index].capitalize()\n    return ''.join(new_word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    splt = re.findall(\"_[a-z]+\",word)\n    \n    for i in splt:\n        word = word.replace(i,\"\")\n    return word[0].upper() + word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([x.capitalize() for x in word.split('_')])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return None\n    new_string = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return new_string[0].lower() + new_string[1:]\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if not word:\n        return None\n    if word[0].isupper():\n        return word\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\ndef camel_to_readable(word):\n    '''\n    Write a function to convert the given camel case string to readable string.\n    '''\n    if not word:\n        return None\n    new_string = []\n    for i, char in enumerate(word):\n        if i == 0:\n            new_string.append(char.upper())\n        else:\n            new_string.append(char.lower())\n    return ''.join(new_string)\ndef camel_to_readable2(word):\n    '''\n    Write a function to convert the given camel case string to readable string.\n    '''\n    if not word:\n        return None\n    word = word.replace('_','')\n    return word[0].upper() + word[1:]\ndef camel_to_readable3(word):\n    '''\n    Write a function to convert the given camel case string to readable string.\n    '''\n    if not word:\n        return None\n    word = word.replace('_','')\n    return word[0].upper() + word[1:]\ndef get_the_value(dict, key):\n    '''\n    Write a function to retrieve the value of the given key from the given dictionary.\n    '''\n    if not key or not dict:\n        return None\n    for k, v in dict.items():\n        if k == key:\n            return v\n    return None\ndef get_the_value_from_key_and_path(dict, key, path):\n    '''\n    Write a function to retrieve the value of the given key from the given dictionary.\n    '''\n    if not key or not dict or not path:\n        return None\n    for i, char in enumerate(path):\n        if char == '[' and i > 0:\n            return get_the_value_from_key_and_path(dict[path[:i]], key, path[i+1:])\n        if char == '.' and i > 0:\n            return get_the_value(dict[path[:i]], key)\n    return get_the_value(dict, key)\ndef get_the_value_from_key_and_path2(dict, key, path):\n    '''\n    Write a function to retrieve the value of the given key from the given dictionary.\n    '''\n    if not key or not dict or not path:\n        return None\n    for i, char in enumerate(path):\n        if char == '[' and i > 0:\n            return get_the_value_from_key_and_path2(dict[path[:i]], key, path[i+1:])\n        if char == '.' and i > 0:\n            return get_the_value(dict[path[:i]], key)\n    return get_the_value(dict, key)\ndef get_the_value_from_key_and_path3(dict, key, path):\n    '''\n    Write a function to retrieve the value of the given key from the given dictionary.\n    '''\n    if not key or not dict or not path:\n        return None\n    for i, char in enumerate(path):\n        if char == '[' and i > 0:\n            return get_the_value_from_key_and_path3(dict[path[:i]], key, path[i+1:])\n        if char == '.' and i > 0:\n            return get_the_value(dict[path[:i]], key)\n    return get_the_value(dict, key)\ndef get_the_value_from_key_and_path4(dict, key, path):\n    '''\n    Write a function to retrieve the value of the given key from the given dictionary.\n    '''\n    if not key or not dict or not path:\n        return None\n    for i, char in enumerate(path):\n        if char == '[' and i > 0:\n            return get_the_value_from_key_and_path4(dict[path[:i]], key, path[i+1:])\n        if char == '.' and i > 0:\n            return get_the_value(dict[path[:i]], key)\n    return get_the_value(dict, key)\ndef get_the_value_from_key_and_path5(dict, key, path):\n    '''\n    Write a function to retrieve the value of the given key from the given dictionary.\n    '''\n    if not key or not dict or not path:\n        return None\n    for i, char in enumerate(path):\n        if char == '[' and i > 0:\n            return get_the_value_from_key_and_path5(dict[path[:i]], key, path[i+1:])\n        if char == '.' and i > 0:\n            return get_the_value(dict[path[:i]], key)\n    return get_the_value(dict, key)\ndef get_the_value_from_key_and_path6(dict, key, path):\n    '''\n    Write a function to retrieve the value of the given key from the given dictionary.\n    '''\n    if not key or not dict or not path:\n        return None\n    for i, char in enumerate(path):\n        if char == '[' and i > 0:\n            return get_the_value_from_key_and_path6(dict[path[:i]], key, path[i+1:])\n        if char == '.' and i > 0:\n            return get_the_value(dict[path[:i]], key)\n    return get_the_value(dict, key)\ndef get_the_value_from_key_and_path7(dict, key, path):\n    '''\n    Write a function to retrieve the value of the given key from the given dictionary.\n    '''\n    if not key or not dict or not path:\n        return None\n    for i, char in enumerate(path):\n        if char == '[' and i > 0:\n            return get_the_value_from_key_and_path7(dict[path[:i]], key, path[i+1:])\n        if char == '.' and i > 0:\n            return get_the_value(dict[path[:i]], key)\n    return get_the_value(dict, key)\ndef get_the_value_from_key_and_path8(dict, key, path):\n    '''\n    Write a function to retrieve the value of the given key from the given dictionary.\n    '''\n    if not key or not dict or not path:\n        return None\n    for i, char in enumerate(path):\n        if char == '[' and i > 0:\n            return get_the_value_from_key_and_path8(dict[path[:i]], key, path[i+1:])\n        if char == '.' and i > 0:\n            return get_the_value(dict[path[:i]], key)\n    return get_the_value(dict, key)\ndef get_the_value_from_key_and_path9(dict, key, path):\n    '''\n    Write a function to retrieve the value of the given key from the given dictionary.\n    '''\n    if not key or not dict or not path:\n        return None\n    for i, char in enumerate(path):\n        if char == '[' and i > 0:\n            return get_the_value_from_key_and_path9(dict[path[:i]], key, path[i+1:])\n        if char == '.' and i > 0:\n            return get_the_value(dict[path[:i]], key)\n    return get_the_value(dict, key)\ndef get_the_value_from_key_and_path10"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if '_' not in word:\n        return word\n    else:\n        result = []\n        for i in word.split('_'):\n            result.append(i.capitalize())\n        return ''.join(result)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return ''\n    if word[0].isupper():\n        result = word\n    else:\n        result = word[0].lower() + word[1:]\n    return result\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if len(word) == 0:\n        return ''\n    if word[0].isupper():\n        result = word\n    else:\n        result = word[0].lower() + word[1:]\n    if result[0] == '_':\n        result = result[1:]\n    return result\n    \ndef camel_to_kebab(word):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    if len(word) == 0:\n        return ''\n    if word[0].isupper():\n        result = word\n    else:\n        result = word[0].lower() + word[1:]\n    if result[0] == '_':\n        result = result[1:]\n    result = result.replace('_', '-')\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #remove trailing whitespace\n    snake = re.sub(r'\\s+$', '', word)\n    # split camel by '_'\n    word_list = re.split('_', snake)\n    #join camel by lower case\n    return ''.join([x.lower() for x in word_list])\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create a new list\n    new_list = []\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [item for item in l if item % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(l)\n    for n in l:\n        if n % 2!= 0:\n            l.remove(n)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return filter(lambda x: not x % 2, l)\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return l[1::2]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l2 = []\n    for i in l:\n        if i%2==0:\n            l2.append(i)\n    return l2\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for x in l:\n        if x%2!=0:\n            l.remove(x)\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(map(lambda x: x[n], list1))\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > 0:\n        return [i[n-1] for i in list1]\n    else:\n        return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for item in list1:\n        result.append(item[n])\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n<=0:\n        return None\n    elif n>=len(list1):\n        return None\n    else:\n        return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for elem in list1:\n        result.append(elem[n])\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item for item, index in list1][n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n-1] for t in list1]\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1, list2 = sorted(list1), sorted(list2)\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1 is None or list2 is None:\n        return False\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(value in list2 for value in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \ndef equal_to(list1,list2):\n    '''\n    Write a python function to check whether the number of elements in a sequence is equal to the number of elements in another sequence.\n    '''\n    if len(list1) == len(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(v in list2 for v in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)==len(list2):\n        for i in range(0,len(list1)):\n            if list1[i] in list2:\n                return True\n            else:\n                return False\n    else:\n        print(\"Length of list does not match\")\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) < len(list2):\n        list1,list2 = list2,list1\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print('True')\n            break\n    else:\n        print('False')\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return 1\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_product = 1\n    for i in xrange(len(arr)):\n        if arr[i]>0:\n            break\n    for i in xrange(len(arr)):\n        if i>=i:\n            continue\n        max_product = max(max_product, arr[i]*arr[i+1])\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = arr[0] * arr[1]\n    if n < 2:\n        return -1\n    for i in range(0, n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    m1 = 1\n    m2 = 1\n    res = -1\n    for i in range(n):\n        m1 = max(arr[i],m1*arr[i])\n        m2 = min(arr[i],m2*arr[i])\n        res = max(res,m1,m2)\n    return res\n    \n    \n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr)\n    n = len(arr)\n    res = -1\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]*arr[j]>res:\n                res = arr[i]*arr[j]\n                res_l = [i,j]\n    print(res)\n    print(res_l)\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    max1 = max2 = arr[0]\n    for i in range(1,n):\n        if arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] > max1:\n            max1 = arr[i]\n    if max1 * max2 > 0:\n        return max1 * max2\n    else:\n        return None\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize result\n    res = -1\n    # n stores the number of items in arr[]\n    n = len(arr)\n    # Initialize the maximum values of i*arr[i]\n    max1 = arr[0]\n    max2 = arr[1]\n    # Pick each item and multiply with previous values to find maximum\n    for i in range(2, n):\n        max1, max2 = max2, max1\n        max2 = max(max2 * arr[i], max1 * arr[i])\n        max1 = max(max1 * arr[i], arr[i])\n    # Pick maximum of max1 and max2\n    res = max(max1, max2)\n    return res\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m = max(arr)\n    if m <= 0:\n        return -1\n    elif m == 1:\n        return -1\n    else:\n        arr.remove(m)\n        return max(arr)*m\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr)\n    max = arr[0] * arr[1]\n    for i in range(len(arr) - 1):\n        if arr[i] * arr[i+1] > max:\n            max = arr[i] * arr[i+1]\n    return max\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # If there is only one number in the array\n    if len(arr) == 1:\n        return arr[0]\n    # Sort the array \n    arr = sorted(arr)\n    # Initialize the max product and min product\n    max_product = min_product = arr[0]\n    # Calculate the product of the first two elements\n    product = arr[0] * arr[1]\n    # Loop through the array\n    for i in range(2, len(arr)):\n        # Find the product of the current element with the two products before it\n        current_product = arr[i] * product\n        # Update the max product and min product if necessary\n        max_product = max(max_product, current_product)\n        min_product = min(min_product, current_product)\n        # Update the product of the two previous elements\n        product = current_product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]*arr[1]*arr[2]\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i]*arr[j]*arr[k] > max_product:\n                    max_product = arr[i]*arr[j]*arr[k]\n    return max_product\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Input is list of tuple\n    # Output is list of tuple\n    \n    # if Input is not a list of tuple\n    if not isinstance(Input,list):\n        raise ValueError('Input is not a list of tuple')\n    \n    # Output list\n    common_list = []\n    \n    # Traverse all tuple in list of tuple\n    for tuple in Input:\n        \n        # Find first element from given tuple\n        first_element = tuple[0]\n        \n        # Check if first element is already present in output\n        if first_element not in common_list:\n            common_list.append(first_element)\n            \n    return common_list\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n = len(Input)\n    for i in range(n):\n        for j in range(i+1, n):\n            if Input[i][0] == Input[j][0]:\n                return Input[i]\n            \n    return -1\n    \n    \n    "
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    ans = {}\n    for tup in Input:\n        ans[tup[0]] = True\n    return list(ans.keys())\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if Input==[] or Input==None:\n        return []\n    if isinstance(Input,list)==False:\n        Input=[Input]\n    list_1=[]\n    for i in Input:\n        list_1.append(i[0])\n    output=[]\n    for i in list_1:\n        if list_1.count(i)>1:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [('hi',1),('bye',2),('hi',3),('bye',4),('hi',5)]\n    # Output = ['hi',1]\n    Output = []\n    for i in Input:\n        if Output.count(i[0]) == 0:\n            Output.append(i[0])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group_dict = {}\n    for i in Input:\n        if i[0] in group_dict.keys():\n            group_dict[i[0]].append(i)\n        else:\n            group_dict[i[0]] = [i]\n    return group_dict\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elem = Input[0][0] \n    return [item[0] for item in Input if item[0] == first_elem] \n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List = []\n    for i in Input:\n        List.append(i[0])\n    return List\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    s=list(set([el[0] for el in Input]))\n    return s\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for element in lst:\n        if len(element)==max(len(element) for element in lst):\n            return element\n    \ndef Extract_Data(filename):\n    '''\n    Write a python function to extract data from a text file into a list.\n    '''\n    data=[]\n    with open(filename,'r') as f:\n        for line in f:\n            data.append(line)\n    return data\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in lst:\n        if len(i) > len(max):\n            max = i\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = -1\n    for elt in lst:\n        if len(elt)>max_len:\n            max_len = len(elt)\n            max_elt = elt\n    return max_elt\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    return lst[0] if max_len == len(lst[1]) else lst[1]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_el = None\n    for el in lst:\n        if len(el) > max_len:\n            max_len = len(el)\n            max_el = el\n    return max_el\n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_el = None\n    for el in lst:\n        if len(el) < min_len:\n            min_len = len(el)\n            min_el = el\n    return min_el\n    \ndef Min_Max_All(lst): \n    '''\n    Write a python function to find the element of a list with the max and min lengths.\n    '''\n    max_el = Find_Max(lst)\n    min_el = Find_Min(lst)\n    return min_el, max_el\n    \ndef Sort_Min_Max(lst): \n    '''\n    Write a python function to sort the list of elements according to the min and max lengths.\n    '''\n    lst.sort(key = lambda x: len(x))\n    return lst\n    \ndef Find_All_Anagrams(lst, str): \n    '''\n    Write a python function to find all the anagrams of a word in a list of words.\n    '''\n    anagram_lst = []\n    for word in lst:\n        if sorted(str) == sorted(word):\n            anagram_lst.append(word)\n    return anagram_lst\n    \ndef Find_All_Words(lst): \n    '''\n    Write a python function to find all the words in a list of words.\n    '''\n    words_lst = []\n    for word in lst:\n        if word not in words_lst:\n            words_lst.append(word)\n    return words_lst\n    \ndef Find_All_Anagrams_Set(lst): \n    '''\n    Write a python function to find all the anagrams of a word in a list of words.\n    '''\n    anagram_lst = []\n    for word in lst:\n        if sorted(word) not in anagram_lst:\n            anagram_lst.append(sorted(word))\n    return anagram_lst\n    \ndef Find_All_Words_Set(lst): \n    '''\n    Write a python function to find all the words in a list of words.\n    '''\n    words_lst = []\n    for word in lst:\n        if word not in words_lst:\n            words_lst.append(word)\n    return words_lst\n    \ndef Find_All_Anagrams_Dict(lst): \n    '''\n    Write a python function to find all the anagrams of a word in a list of words.\n    '''\n    anagram_lst = []\n    dic = {}\n    for word in lst:\n        key = ''.join(sorted(word))\n        if key not in dic:\n            dic[key] = [word]\n        else:\n            dic[key].append(word)\n    for key, value in dic.items():\n        anagram_lst.append(value)\n    return anagram_lst\n    \ndef Find_All_Words_Dict(lst): \n    '''\n    Write a python function to find all the words in a list of words.\n    '''\n    words_lst = []\n    dic = {}\n    for word in lst:\n        key = ''.join(sorted(word))\n        if key not in dic:\n            dic[key] = [word]\n        else:\n            dic[key].append(word)\n    for key, value in dic.items():\n        words_lst.append(value)\n    return words_lst\n    \ndef Find_All_Anagrams_Tuple(lst): \n    '''\n    Write a python function to find all the anagrams of a word in a list of words.\n    '''\n    anagram_lst = []\n    dic = {}\n    for word in lst:\n        key = tuple(sorted(word))\n        if key not in dic:\n            dic[key] = [word]\n        else:\n            dic[key].append(word)\n    for key, value in dic.items():\n        anagram_lst.append(value)\n    return anagram_lst\n    \ndef Find_All_Words_Tuple(lst): \n    '''\n    Write a python function to find all the words in a list of words.\n    '''\n    words_lst = []\n    dic = {}\n    for word in lst:\n        key = tuple(sorted(word))\n        if key not in dic:\n            dic[key] = [word]\n        else:\n            dic[key].append(word)\n    for key, value in dic.items():\n        words_lst.append(value)\n    return words_lst\n    \ndef Find_All_Anagrams_List(lst): \n    '''\n    Write a python function to find all the anagrams of a word in a list of words.\n    '''\n    anagram_lst = []\n    for word in lst:\n        if sorted(word) not in anagram_lst:\n            anagram_lst.append(sorted(word))\n    return anagram_lst\n    \ndef Find_All_Words_List(lst): \n    '''\n    Write a python function to find all the words in a list of words.\n    '''\n    words_lst = []\n    for word in lst:\n        if word not in words_lst:\n            words_lst.append(word)\n    return words_lst\n    \ndef Find_All_Anagrams_Tuple_Set(lst): \n    '''\n    Write a python function to find all the anagrams of a word in a list of words.\n    '''\n    anagram_lst = []\n    dic = {}\n    for word in lst:\n        key = tuple(sorted(word))\n        if key not in dic:\n            dic[key] = [word]\n        else:\n            dic[key].append(word)\n    for key, value in dic.items():\n        anagram_lst.append(value)\n    return anagram_lst\n    \ndef Find_All_Words_Tuple_Set(lst): \n    '''\n    Write a python function to find all the words in a list of words.\n    '''\n    words_lst = []\n    dic = {}\n    for word in lst:\n        key = tuple(sorted(word))\n        if key not in dic:\n            dic[key] = [word]\n        else:\n            dic[key].append(word)\n    for key, value in dic.items():\n        words_lst.append(value)\n    return words_lst\n    \ndef Find_All_Anagrams_Dict_Set(lst): \n    '''\n    Write a python function to find all the anagrams of a word in a list of words.\n    '''\n    anagram_lst = []\n    dic = {}\n    for word in lst:\n        key = ''.join(sorted(word))\n        if key not in dic:\n            dic[key] = [word]\n        else:\n            dic[key].append(word)\n    for key, value in dic.items():\n        anagram_lst.append(value)\n    return anagram_lst\n    \ndef Find_All_Words_Dict_Set(lst): \n    '''\n    Write a python function to find all the words in a list of words.\n    '''\n    words_lst = []\n    dic = {}\n    for word in lst:\n        key = ''.join(sorted(word))\n        if key not in dic:\n            dic[key] = [word]\n        else:\n            dic[key].append(word)\n    for key, value in dic.item"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = -1\n    max_ele = -1\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = -1\n    max_val = -1\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_val = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_val = i\n    return max_val\n    \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_val = None\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max=0\n    for i in lst:\n        if len(i)>Max:\n            Max=len(i)\n    return Max\n    "
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==1:\n        return lst\n    else:\n        if lst[0]>lst[1]:\n            lst[0],lst[1]=lst[1],lst[0]\n        return Find_Max(lst[1:])\n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    if len(lst)==1:\n        return lst\n    else:\n        if lst[0]<lst[1]:\n            lst[0],lst[1]=lst[1],lst[0]\n        return Find_Min(lst[1:])\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        i = round(i)\n        total += i\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Your code here\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(int(round(i)) for i in list1) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for item in list1:\n        sum1 += round(item)\n    print(sum1 * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        i = round(i)\n        sum += (i)\n    print(sum * len(list1))\n    return sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    for x in list1:\n        list2.append(round(x))\n    return (sum(list2) * len(list2))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(sum([round(i) for i in list1]) * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = 0\n    for item in list1:\n        result += round(item)\n    result = result * len(list1)\n    return result\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num, 1) for num in list1]\n    rounded_total = sum(rounded_list) * len(list1)\n    print rounded_total\n    return rounded_total\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for num in range(1,n+1,2):\n        result += num**3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(1, n+1, 2)])\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(n) if i%2==0])\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    def find_cube(n):\n        return n*n*n\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    return n**3 + cube_Sum(n-2)\n    \n    \n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    nums = []\n    for i in xrange(1, n+1, 2): \n        nums.append(i**3)\n    print 'Cube Sum = ', sum(nums)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    if n < 0:\n        return 0\n    else:\n        while n>0:\n            if n % 2 == 0:\n                sum += n*n*n\n                n -= 1\n            else:\n                n -= 1\n        return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    s = 0\n    for i in range(n):\n        if i % 2 == 0:\n            s += i ** 3\n    return s\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0: \n        print('No natural number. Please enter a valid natural number. ')\n    else: \n        total = 0 \n        while n > 0: \n            if n % 2 == 0: \n                total += n ** 3 \n            n -= 1 \n        print('Cube sum of first', n, 'even natural numbers is', total)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += (i*i*i)\n    return total\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str = ''\n    for i in test_tup:\n        str += i\n    return str\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    temp_str = ''\n    for item in test_tup:\n        temp_str += str(item) + ','\n    return temp_str[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if test_tup:\n        delimiter = ','\n        out_str = delimiter.join(test_tup)\n        return out_str\n    return ''\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += i\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for item in test_tup:\n        res += item\n    return res\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_list = []\n    for x in test_tup:\n        new_list.append(str(x))\n    return ''.join(new_list)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tuple_list = []\n    for item in test_tup:\n        tuple_list.append(item)\n    string = tuple_list[0]\n    for i in range(1, len(tuple_list)):\n        string += \",\" + tuple_list[i]\n    return string\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    sum = 0.0\n    for i in range(1,n+1):\n        sum += i*i*i\n    return sum/n\n    \n    \n    \n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Your Code Here\n    sum=0\n    for x in range(n):\n        sum=sum+x**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if(n == 0):\n        return 0\n    return n + find_Average_Of_Cube(n-1)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i**3\n    return s / n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for x in range(1,n+1):\n        cubes.append(x**3)\n    total = sum(cubes)\n    avg = total / len(cubes)\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        i = i + 1\n        sum = sum + i**3\n    print sum/n\n    return \n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(n+1):\n        sum=sum+pow(i,3)\n    avg=sum/n\n    return avg\ndef find_nth_Prime(n):\n    '''\n    Write a python function to find n-th prime number.\n    '''\n    count=0\n    num=2\n    while(count<n):\n        flag=0\n        for i in range(2,num):\n            if(num%i==0):\n                flag=1\n                break\n        if(flag==0):\n            count=count+1\n        num=num+1\n    return num-1\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    summation = 0\n    for i in range(1, n + 1):\n        summation = summation + (i ** 3)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(item[-1] for item in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = ()\n    for item in test_tuple:\n        result += (item[-1],)\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [x[-1] for x in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([string[-1] for string in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Your code here\n    return map(lambda x: x[-1], test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([string[-1] for string in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(tuple(x[-1] for x in i) for i in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[-1] for i in test_tuple]\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count = count + 1\n    return count\n    \ndef count_element_in_list_sorted(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element, sorted.\n    '''\n    \n    count = 0\n    if list1[0] == x:\n        count = count + 1\n    for i in range(1,len(list1)):\n        if x < list1[i]:\n            count = count + 1\n    return count\n    \ndef sublist_duplicate(list1):\n    '''\n    Write a function to find a sublist with duplicate elements.\n    '''\n    \n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] == list1[j]:\n                return True\n    return False\n    \ndef sublist_sorted_duplicate(list1):\n    '''\n    Write a function to find a sublist with duplicate elements, sorted.\n    '''\n    \n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] > list1[j]:\n                return True\n    return False\n    \ndef sublist_sorted_duplicate_reverse(list1):\n    '''\n    Write a function to find a sublist with duplicate elements, sorted, reverse order.\n    '''\n    \n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] < list1[j]:\n                return True\n    return False\n    \ndef sublist_rotate_to_left(list1, n):\n    '''\n    Write a function to rotate a list to the left n elements.\n    '''\n    \n    return list1[n:] + list1[:n]\n    \ndef sublist_rotate_to_left_reverse(list1, n):\n    '''\n    Write a function to rotate a list to the left n elements, reverse order.\n    '''\n    \n    return list1[-n:] + list1[:-n]\n    \ndef sublist_rotate_to_right(list1, n):\n    '''\n    Write a function to rotate a list to the right n elements.\n    '''\n    \n    return list1[-n:] + list1[:-n]\n    \ndef sublist_rotate_to_right_reverse(list1, n):\n    '''\n    Write a function to rotate a list to the right n elements, reverse order.\n    '''\n    \n    return list1[n:] + list1[:n]\n    \ndef sublist_rotate_with_n_elements(list1, n):\n    '''\n    Write a function to rotate a list with n elements to the right.\n    '''\n    \n    return list1[-n:] + list1[:-n]\n    \ndef sublist_rotate_with_n_elements_reverse(list1, n):\n    '''\n    Write a function to rotate a list with n elements to the left.\n    '''\n    \n    return list1[n:] + list1[:n]\n    \ndef longest_consecutive_sublist(list1):\n    '''\n    Write a function to return the longest consecutive sublist.\n    '''\n    \n    # Initialize a list to hold the length of each sublist\n    sublist_length = []\n    \n    for i in range(len(list1)):\n        # Initialize a variable to hold the length of the sublist\n        count = 1\n        for j in range(i+1,len(list1)):\n            if list1[j] == list1[i] + 1:\n                count = count + 1\n            else:\n                sublist_length.append(count)\n                break\n        sublist_length.append(count)\n    \n    # Find the max length\n    max_length = max(sublist_length)\n    \n    # Find the sublist with the max length\n    max_index = sublist_length.index(max_length)\n    \n    return list1[max_index:(max_index+max_length)]\n    \ndef longest_consecutive_sublist_sorted(list1):\n    '''\n    Write a function to return the longest consecutive sublist, sorted.\n    '''\n    \n    # Initialize a list to hold the length of each sublist\n    sublist_length = []\n    \n    for i in range(len(list1)):\n        # Initialize a variable to hold the length of the sublist\n        count = 1\n        for j in range(i+1,len(list1)):\n            if list1[j] == list1[i] + 1:\n                count = count + 1\n            else:\n                sublist_length.append(count)\n                break\n        sublist_length.append(count)\n    \n    # Find the max length\n    max_length = max(sublist_length)\n    \n    # Find the sublist with the max length\n    max_index = sublist_length.index(max_length)\n    \n    return list1[max_index:(max_index+max_length)]\n    \ndef find_smallest_element_in_list(list1):\n    '''\n    Write a function to find the smallest element in a list.\n    '''\n    \n    smallest = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i] < smallest:\n            smallest = list1[i]\n    return smallest\n    \ndef find_smallest_element_in_list_sorted(list1):\n    '''\n    Write a function to find the smallest element in a list, sorted.\n    '''\n    \n    smallest = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i] < smallest:\n            smallest = list1[i]\n    return smallest\n    \ndef find_smallest_element_in_list_reverse(list1):\n    '''\n    Write a function to find the smallest element in a list, reverse order.\n    '''\n    \n    smallest = list1[-1]\n    for i in range(len(list1)-2,-1,-1):\n        if list1[i] < smallest:\n            smallest = list1[i]\n    return smallest\n    \ndef find_smallest_element_in_list_reverse_sorted(list1):\n    '''\n    Write a function to find the smallest element in a list, reverse order, sorted.\n    '''\n    \n    smallest = list1[-1]\n    for i in range(len(list1)-2,-1,-1):\n        if list1[i] < smallest:\n            smallest = list1[i]\n    return smallest\n    \ndef find_largest_element_in_list(list1):\n    '''\n    Write a function to find the largest element in a list.\n    '''\n    \n    largest = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i] > largest:\n            largest = list1[i]\n    return largest\n    \ndef find_largest_element_in_list_sorted(list1):\n    '''\n    Write a function to find the largest element in a list, sorted.\n    '''\n    \n    largest = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i] > largest:\n            largest = list1[i]\n    return largest\n    \ndef find_largest_element_in_list_reverse(list1):\n    '''\n    Write a function to find the largest element in a list, reverse order.\n    '''\n    \n    largest = list1[-1]\n    for i in range(len(list1)-2,-1,-1):\n        if list1[i] > largest:\n            largest = list1[i]\n    return largest\n    \ndef find_largest_element_in_list_reverse_sorted(list1):\n    '''\n    Write a function to find the largest element i"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i, n in enumerate(list1) if n == x])\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i in list1 if x in i])\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    #sublists are list of lists\n    count = 0\n    for list2 in list1:\n        if x in list2:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if x not in list1: \n        return 0\n    list1.remove(x)\n    n = 1\n    for i in range(len(list1)): \n        if len(list1[i]) > 0: \n            n += count_element_in_list(list1[i], x)\n    return n \n    \ndef has_all_elements_in_list(list1, list2): \n    '''\n    Write a function to check if all elements of list2 are present in list1.\n    '''\n    if len(list1) < len(list2): \n        return False\n    else: \n        for x in list2: \n            if x not in list1: \n                return False\n    return True\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1 \n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            yield i\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)\n    "
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    def is_odd(n):\n        return n % 2 == 1\n    return filter(is_odd, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    day,month,year=dt.split('-')\n    return '{}-{}-{}'.format(day,month,year)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.search(r'(?<!\\d)(?:1?\\d|2[01])(?=\\d)', dt)\n    if m is None:\n        return None\n    year = dt[:m.start()]\n    month = dt[m.start()+1:m.start()+3]\n    day = dt[m.start()+4:]\n    if '-' in day:\n        day = day[1:]\n    return '%s-%s-%s' % (day, month, year)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt is None:\n        return None\n    if dt == '':\n        return dt\n    #dt = dt.strip()\n    format_match = re.match(r'\\d{4}-\\d{2}-\\d{2}', dt)\n    if format_match:\n        dt = dt.replace('-', '/')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:]+'-'+dt[3:5]+'-'+dt[:2]\ndef del_punctuation(line):\n    '''\n    Remove the punctuation from the line.\n    '''\n    return re.sub(r'[^\\w\\s]', '', line)\ndef del_bracket(line):\n    '''\n    Remove the bracket from the line.\n    '''\n    return line.replace('[','').replace(']','')\ndef get_numbers(line):\n    '''\n    Get the number from the line, if the number is less than 10, return 0.\n    '''\n    try:\n        line = int(line)\n    except:\n        line = 0\n    return line\ndef get_name(line):\n    '''\n    Get the name from the line, if the name is more than 10, truncate the name to 10.\n    '''\n    name = line.split(' ')\n    if len(name) > 10:\n        return name[0]+' '+name[1]+' '+name[2]+' '+name[3]+' '+name[4]+' '+name[5]+' '+name[6]+' '+name[7]+' '+name[8]+' '+name[9]\n    else:\n        return line\ndef get_text(line):\n    '''\n    Get the text from the line, and remove the bracket.\n    '''\n    return del_bracket(line)\ndef get_city(line):\n    '''\n    Get the city from the line.\n    '''\n    return line.split('-')[1].strip()\ndef get_month(line):\n    '''\n    Get the month from the line.\n    '''\n    return line.split('-')[0].strip()\ndef get_number_of_lines(file_name):\n    '''\n    Get the number of lines in the file.\n    '''\n    with open(file_name) as f:\n        for i, _ in enumerate(f):\n            pass\n    return i+1\ndef get_average(numbers):\n    '''\n    Get the average of the numbers.\n    '''\n    return float(sum(numbers))/len(numbers)\ndef main():\n    file_name = './Jay_and_Thelma.txt'\n    file_content = open(file_name)\n    lines_in_file = get_number_of_lines(file_name)\n    num_list = []\n    for i in xrange(lines_in_file):\n        line = file_content.readline()\n        line = line.strip()\n        line = line.lower()\n        line = del_punctuation(line)\n        line = get_numbers(line)\n        num_list.append(line)\n    #print num_list\n    average = get_average(num_list)\n    print average\n    file_content.close()\nmain()"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month_dict = {'1': 'Jan', '2': 'Feb', '3': 'Mar', '4': 'Apr', '5': 'May', '6': 'Jun', '7': 'Jul', '8': 'Aug', '9': 'Sep', '10': 'Oct', '11': 'Nov', '12': 'Dec'}\n    # return '{0}-{1}-{2}'.format(dt[4:6], month_dict[dt[6:7]], dt[:4])\n    return '{0}-{1}-{2}'.format(dt[6:], month_dict[dt[5:7]], dt[:4])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt[4] == '-':\n        date = dt[6:].split('-')\n        date = date[1] + '-' + date[0] + '-' + date[2]\n    else:\n        date = dt[6:]\n    return date\ndef get_file_name(file_list,number_of_files):\n    '''\n    Write a function to get the name of the file which is having a particular number.\n    '''\n    for i in range(number_of_files):\n        file_name = change_date_format(file_list[i])\n        file_name = file_name.replace('/','_')\n        file_name = file_name.replace(' ','')\n        return file_name\ndef get_file_list(file_name):\n    '''\n    Write a function to return the date and time of a particular file.\n    '''\n    file_list = []\n    with open(file_name,'r') as f:\n        file_data = f.readlines()\n        file_list = [item.strip() for item in file_data]\n    return file_list\ndef get_processed_data(processed_data):\n    '''\n    Write a function to get the data in a particular format.\n    '''\n    file_list = get_file_list(processed_data)\n    file_name = get_file_name(file_list,len(file_list))\n    file_name = file_name + '.txt'\n    processed_data = get_file_name(processed_data,len(file_list))\n    with open(processed_data,'r') as f:\n        processed_data = f.read()\n    return processed_data\ndef get_raw_data(raw_data):\n    '''\n    Write a function to get the data in a particular format.\n    '''\n    file_list = get_file_list(raw_data)\n    file_name = get_file_name(file_list,len(file_list))\n    file_name = file_name + '.txt'\n    with open(file_name,'r') as f:\n        raw_data = f.read()\n    return raw_data\ndef process_data(processed_data):\n    '''\n    Write a function to process the data and remove unnecessary characters.\n    '''\n    processed_data = processed_data.replace('(',' ')\n    processed_data = processed_data.replace(')',' ')\n    processed_data = processed_data.replace(';',' ')\n    processed_data = processed_data.replace(':',' ')\n    processed_data = processed_data.replace('/',' ')\n    processed_data = processed_data.replace('-',' ')\n    processed_data = processed_data.replace('.',' ')\n    processed_data = processed_data.replace(',',' ')\n    processed_data = processed_data.replace('*',' ')\n    processed_data = processed_data.replace('?',' ')\n    processed_data = processed_data.replace('!',' ')\n    processed_data = processed_data.replace('_',' ')\n    processed_data = processed_data.replace('/',' ')\n    processed_data = processed_data.replace(';',' ')\n    processed_data = processed_data.replace(':',' ')\n    processed_data = processed_data.replace('.',' ')\n    processed_data = processed_data.replace(',',' ')\n    processed_data = processed_data.replace('\"',' ')\n    processed_data = processed_data.replace('(',' ')\n    processed_data = processed_data.replace(')',' ')\n    processed_data = processed_data.replace('-',' ')\n    processed_data = processed_data.replace('+',' ')\n    processed_data = processed_data.replace('%',' ')\n    processed_data = processed_data.replace('=',' ')\n    processed_data = processed_data.replace('0',' ')\n    processed_data = processed_data.replace('1',' ')\n    processed_data = processed_data.replace('2',' ')\n    processed_data = processed_data.replace('3',' ')\n    processed_data = processed_data.replace('4',' ')\n    processed_data = processed_data.replace('5',' ')\n    processed_data = processed_data.replace('6',' ')\n    processed_data = processed_data.replace('7',' ')\n    processed_data = processed_data.replace('8',' ')\n    processed_data = processed_data.replace('9',' ')\n    processed_data = processed_data.replace(' ','')\n    processed_data = processed_data.replace('+','')\n    processed_data = processed_data.replace('=','')\n    processed_data = processed_data.replace('-','')\n    processed_data = processed_data.replace('\"','')\n    processed_data = processed_data.replace('(','')\n    processed_data = processed_data.replace(')','')\n    processed_data = processed_data.replace('/','')\n    processed_data = processed_data.replace(';','')\n    processed_data = processed_data.replace(':','')\n    processed_data = processed_data.replace('.','')\n    processed_data = processed_data.replace(',','')\n    processed_data = processed_data.replace('*','')\n    processed_data = processed_data.replace('?','')\n    processed_data = processed_data.replace('!','')\n    processed_data = processed_data.replace('_','')\n    processed_data = processed_data.replace('/','')\n    processed_data = processed_data.replace('+','')\n    processed_data = processed_data.replace('%','')\n    processed_data = processed_data.replace('0','')\n    processed_data = processed_data.replace('1','')\n    processed_data = processed_data.replace('2','')\n    processed_data = processed_data.replace('3','')\n    processed_data = processed_data.replace('4','')\n    processed_data = processed_data.replace('5','')\n    processed_data = processed_data.replace('6','')\n    processed_data = processed_data.replace('7','')\n    processed_data = processed_data.replace('8','')\n    processed_data = processed_data.replace('9','')\n    processed_data = processed_data.replace('\\n','')\n    processed_data = processed_data.replace('\\t','')\n    processed_data = processed_data.replace('|','')\n    processed_data = processed_data.replace('@','')\n    processed_data = processed_data.replace('#','')\n    processed_data = processed_data.replace('{','')\n    processed_data = processed_data.replace('}','')\n    processed_data = processed_data.replace('[','')\n    processed_data = processed_data.replace(']','')\n    processed_data = processed_data.replace('<','')\n    processed_data = processed_data.replace('>','')\n    processed_data = processed_data.replace('^','')\n    processed_data = processed_data.replace('`','')\n    processed_data = processed_data.replace('~','')\n    processed_data = processed_data.replace('\\\\','')\n    processed_data = processed_data.replace('{','')\n    processed_data = processed_data.replace('}','')\n    processed_data = processed_data.replace('{','')\n    processed_data = processed_data.replace('}','')\n    processed_data = processed_data.replace('\\t','')\n    processed_data = processed_data.replace(';','')\n    processed_data "
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_to_convert = dt\n    list_of_items = list(date_to_convert)\n    list_of_items[4], list_of_items[6], list_of_items[2] = list_of_items[2], list_of_items[4], list_of_items[6]\n    date_to_convert = ''.join(list_of_items)\n    return date_to_convert\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #def change_date_format(dt):\n    #date_format = re.match(r'(\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d)', dt)\n    date_format = re.match(r'(\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d)', dt)\n    if date_format:\n        print(dt)\n        print(date_format.group())\n        return date_format.group()\n    else:\n        return None\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    res = dt.split('-')\n    return '{}-{}-{}'.format(res[2], res[1], res[0])\n    \n    \ndef change_date_format2(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    res = dt.split('-')\n    return '{}-{}-{}'.format(res[2], res[1], res[0])\n    \ndef re_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return '{}-{}-{}'.format(dt[2], dt[1], dt[0])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # regex = r'(^\\d{4}-\\d{2}-\\d{2}$)'\n    # re.match(regex,dt)\n    dt = re.sub('-','/', dt)\n    return dt\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # take the list as input\n    # sort the list\n    # return the sorted list\n    # BUCKET SORT\n    # There are two types of shell sort\n    #   1. Online\n    #   2. Offline\n    # Use the online version of shell sort\n    # The online shell sort is much better than offline shell sort\n    # the offline shell sort is about O(n^2)\n    # the online shell sort is about O(n)\n    # Let's say that the first shell sort is O(n)\n    # but the second shell sort is O(n^2)\n    # That means the overall shell sort is O(n^2)\n    # The best shell sort is O(n)\n    # best shell sort is O(n)\n    # O(n)\n    # O(1)\n    # O(n)\n    # O(n)\n    # O(1)\n    # O(n)\n    # O(n)\n    # O(1)\n    # O(n)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    interval_list = [701, 301, 132, 57, 23, 10, 4, 1]\n    for i in interval_list:\n        shell_sort_algorithm(my_list, i)\n    print my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # best case: [1, 5, 4, 2, 3, 9, 8, 7, 6]\n    # worst case: [4, 5, 3, 2, 8, 1, 7, 9, 6]\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_val = my_list[i]\n            j = i\n            while j >= gap and current_val < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_val\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) / 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_value = my_list[i]\n            current_position = i\n            while current_position >= gap and my_list[current_position - gap] > current_value:\n                my_list[current_position] = my_list[current_position - gap]\n                current_position = current_position - gap\n            my_list[current_position] = current_value\n        gap = gap / 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    N = len(my_list)\n    #Start with a big gap, and reduce the gap by a factor of two\n    n = N\n    while n > 1:\n        n = int(n/2)\n        #Do a gapped insertion sort for this gap\n        for i in range(n,N):\n            j = i\n            while j >= n and my_list[j] < my_list[j - n]:\n                my_list[j],my_list[j-n] = my_list[j-n], my_list[j]\n                j -= n\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = n/2\n    while h > 0:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h/2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = 1\n    while h < len(my_list)/3:\n        h = 3 * h + 1\n    while h > 0:\n        for i in range(h, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > temp:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n        h //= 3\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return ((x and y) for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = ()\n    for i,j in zip(test_tup1, test_tup2):\n        new_tup += (i,j)\n    return new_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    def and_tup(a, b):\n        return a*b\n    \n    return list(map(and_tup, test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    if len(test_tup1)==0:\n        return test_tup2\n    if len(test_tup2)==0:\n        return test_tup1\n    if len(test_tup1)!=len(test_tup2):\n        return\n    result=[]\n    for i in range(len(test_tup1)):\n        res_tup=[]\n        res_tup.append(test_tup1[i]*test_tup2[i])\n        res_tup.append(test_tup1[i]-test_tup2[i])\n        res_tup.append(test_tup2[i]-test_tup1[i])\n        result.append(res_tup)\n    return tuple(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [(a and b) for a, b in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Write your code here\n    return [tuple(x) for x in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    lst1 = [tup1[i] for i in range(len(test_tup1))]\n    lst2 = [tup2[i] for i in range(len(test_tup2))]\n    lst3 = []\n    for tup1_, tup2_ in zip(lst1, lst2):\n        if len(tup1_) == len(tup2_):\n            lst3.append(tup1_ + tup2_)\n    return lst3\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #Your Code Here\n    \ndef diff_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise difference tuples from the given two tuples.\n    '''\n    #Your Code Here\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # We know that p = ax^2 + bx + c\n    # \n    # The equation of the parabola is:\n    # a*x^2 + b*x + c = 0\n    # \n    # So, \n    # -2 * b * x + 2 * c * x - a * x^2 = 0\n    # x = -b / (2 * a)\n    return -b / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None, None\n    return (-b + (b**2-4*a*c)**0.5)/(2*a), (-b - (b**2-4*a*c)**0.5)/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def discriminant(a, b, c):\n        return b ** 2 - 4 * a * c\n    \n    d = discriminant(a, b, c)\n    if d < 0:\n        print 'The parabola has no real root.'\n    elif d == 0:\n        x = -b / (2 * a)\n        print 'The parabola has one real root: ', x\n    else:\n        x = (-b + math.sqrt(d)) / (2 * a)\n        y = (-b - math.sqrt(d)) / (2 * a)\n        print 'The parabola has two real roots: ', x, ', ', y\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -1*b/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b / (2 * a))\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return float((-b / (2 * a))), float((2 * c) / (a * a))\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = b**2 - (4 * a * c)\n    return (-b + math.sqrt(x)) / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from math import sqrt, atan2\n    from numpy import array, cross, dot\n    from numpy.linalg import det\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n    \ndef parabola_vertex(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    return -(b**2)/(4*a)\n    \ndef line_intersection(a1, b1, c1, a2, b2, c2):\n    '''\n    Write a function that takes two lines, and returns the intersection point\n    on them. If the lines are parallel, return None.\n    '''\n    D = a1 * b2 - a2 * b1\n    if D == 0:\n        return None\n    else:\n        x = (b1*c2 - b2*c1) / D\n        y = (a2*c1 - a1*c2) / D\n        return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return -c/b, 0\n    return (-b+math.sqrt(b**2-4*a*c))/(2*a), (-b-math.sqrt(b**2-4*a*c))/(2*a)\n    \n    \ndef bresenham_triangle(p1, p2, p3):\n    '''\n    Write a function to create a list of points in a triangle with Bresenhams line algorithm.\n    '''\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    \n    x1, x2, x3, y1, y2, y3 = min(x1, x2), min(x2, x3), min(x1, x3), min(y1, y2), min(y2, y3), min(y1, y3)\n    \n    m = (y2-y1)*(x3-x2) - (x2-x1)*(y3-y2)\n    n = (x2-x1)*(y3-y1) - (y2-y1)*(x3-x1)\n    if m == 0:\n        return [(x1, y1)]\n    \n    k = 1/(m*2)\n    b = n*k\n    \n    d = 2*(y2-y1)\n    e = 2*(x2-x1)\n    f = 2*d\n    g = 2*b\n    \n    h = y1\n    i = x1\n    \n    points = []\n    while i <= x3:\n        points.append((i, h))\n        i += e/f\n        if i < x3:\n            h += g/f\n    return points\n    \n    \ndef project_on_circle(point, circle_center, circle_radius):\n    '''\n    Write a function to find the project of a point on a circle\n    '''\n    x, y = point\n    cx, cy = circle_center\n    r = circle_radius\n    \n    d = math.sqrt((x-cx)**2 + (y-cy)**2)\n    if d == 0:\n        return (x, y)\n    return (x-cx+r*(y-cy)/d, y-cy+r*(x-cx)/d)\n    \n    \ndef point_on_circle(circle_center, circle_radius, point):\n    '''\n    Write a function to find if a point is on a circle\n    '''\n    cx, cy = circle_center\n    r = circle_radius\n    x, y = point\n    \n    return (x-cx)**2 + (y-cy)**2 <= r**2\n    \n    \ndef point_on_triangle(a, b, c, point):\n    '''\n    Write a function to find if a point is on a triangle\n    '''\n    ab = vector(a, b)\n    bc = vector(b, c)\n    ca = vector(c, a)\n    \n    ab = vector(a, b)\n    bc = vector(b, c)\n    ca = vector(c, a)\n    \n    if point_on_line(point, a, b):\n        return True\n    if point_on_line(point, b, c):\n        return True\n    if point_on_line(point, c, a):\n        return True\n    \n    \ndef point_on_line(line_p1, line_p2, point):\n    '''\n    Write a function to find if a point is on a line\n    '''\n    x1, y1 = line_p1\n    x2, y2 = line_p2\n    x, y = point\n    \n    d1 = (y2-y1)*(x-x1)\n    d2 = (x2-x1)*(y-y1)\n    \n    return d1 == d2\n    \n    \ndef triangle_area(a, b, c):\n    '''\n    Write a function to compute the area of a triangle\n    '''\n    a, b, c = vector(a, b), vector(b, c), vector(c, a)\n    \n    return (a.x*b.y - b.x*a.y + c.x*a.y - a.x*c.y)/2\n    \n    \ndef distance(point1, point2):\n    '''\n    Write a function to compute the distance between two points\n    '''\n    x1, y1 = point1\n    x2, y2 = point2\n    return math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    \n    \ndef vector(point1, point2):\n    '''\n    Write a function to compute the vector between two points\n    '''\n    x1, y1 = point1\n    x2, y2 = point2\n    return (x2-x1, y2-y1)\n    \n    \ndef pythagorean_triangle(side1, side2):\n    '''\n    Write a function to compute the area of a pythagorean triangle\n    '''\n    return math.sqrt(side1**2 + side2**2)\n    \n    \ndef area_of_circle(radius):\n    '''\n    Write a function to compute the area of a circle\n    '''\n    return math.pi*radius**2\n    \n    \ndef area_of_triangle(side1, side2, side3):\n    '''\n    Write a function to compute the area of a triangle\n    '''\n    return (side1+side2+side3)/2\n    \n    \ndef hypotenuse(side1, side2):\n    '''\n    Write a function to compute the hypotenuse of a right angle triangle\n    '''\n    return math.sqrt(side1**2 + side2**2)\n    \n    \ndef rect_perimeter(width, height):\n    '''\n    Write a function to compute the perimeter of a rectangle\n    '''\n    return width*2 + height*2\n    \n    \ndef rect_area(width, height):\n    '''\n    Write a function to compute the area of a rectangle\n    '''\n    return width*height\n    \n    \ndef octagon_perimeter(side):\n    '''\n    Write a function to compute the perimeter of an octagon\n    '''\n    return 8*side\n    \n    \ndef octagon_area(side):\n    '''\n    Write a function to compute the area of an octagon\n    '''\n    return side**2*(math.sqrt(2)/2)**2\n    \n    \ndef radius_of_circle(side):\n    '''\n    Write a function to compute the radius of a circle from the perimeter of the side\n    '''\n    return math.sqrt(2)*side/2\n    \n    \ndef triangle_area(side1, side2, side3):\n    '''\n    Write a function to compute the area of a triangle from the perimeter of the side\n    '''\n    return math.sqrt(side1**2 + side2**2 + side3**2)/2\n    \n    \ndef point_on_circle(circle_center, circle_radius, point):\n    '''\n    Write a function to find if a point is on a circle\n    '''\n    cx, cy = circle_center\n    r = circle_radius\n    x, y = point\n    \n    d = (x-cx)**2 + (y-cy)**2\n    return d <= r**2\n    \n    \ndef tangent_angle(x1, y1, x2, y2):\n    '''\n    Write a function to compute the angle between two lines\n    '''\n    line1 = vector(x1, y1)\n    line2 = vector(x2, y2)\n    \n    d1 = line1[0]**2 + line1[1]**2\n    d2 = line2[0]**2 + line2[1]**2\n    \n    d = line1[0]*line2[0] + line1[1]*line2[1]\n    \n    return math.acos(d/math.sqrt(d1*d2))\n    \n    \ndef area_of_triangle(a, b, c):"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for e1 in list1:\n        for e2 in list2:\n            if e1 == e2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    # idea:\n    # put the lists in a dictionary\n    # put the keys into a set\n    # check that the set is a subset of the keys\n    \n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return set1 & set2\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for num1 in list1:\n        for num2 in list2:\n            if num1 == num2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for num1 in list1:\n        for num2 in list2:\n            if num1 == num2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list(set(list1) & set(list2))\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2.0 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)*height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    m=(base1+base2)/2.0\n    print m\n    return m\n    \nmedian_trapezium(2,3,4)\nmedian_trapezium(8,10,12)\nmedian_trapezium(5,7,12)\nmedian_trapezium(3,4,5)\nmedian_trapezium(8,9,10)\nmedian_trapezium(8,11,14)\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    return (base1 + base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2*base1*base2 + base1*base2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n    \ndef test_median_trapezium():\n    '''\n    This function is called by the tester.\n    '''\n    #print the names of the functions being tested.\n    print(median_trapezium.__name__)\n    print(median_triangle.__name__)\n    print(median_pentagon.__name__)\n    print(median_hexagon.__name__)\n    print(median_rectangle.__name__)\n    #print the result of the function being tested, and the correct result.\n    print(median_trapezium(8,15,10))\n    print(median_triangle(8,15,10))\n    print(median_pentagon(8,15,10))\n    print(median_hexagon(8,15,10))\n    print(median_rectangle(8,15,10))\n    #print the outcome.\n    print(\"Test out the functions.\")\n    \ntest_median_trapezium("
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2.0 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s = base1 + base2\n    if height < s:\n        return None\n    if height == s:\n        return height/2\n    elif height > s:\n        return ((s+height)/2)"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return height/2.0\n    \nprint median_trapezium(10,5,6)\n    "
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for index in range(len(arr)):\n        if arr[index]>number:\n            return True\n        elif arr[index]==number:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i] > number:\n                return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    for x in arr:\n        if x > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if x > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return any(number > elem for elem in arr)\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if x > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number < i:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.match(pattern,text):\n        return True\n    return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.match(pattern,text):\n        return True\n    return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.match(pattern,text):\n        return True\n    return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        retur"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab+', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('ab+', text):\n        return 'Found a match'\n    else:\n        return 'Not matched'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_str = \"ab*\"\n    return re.match(a_str,text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group()\n    else:\n        print 'None'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = '(?P<A>a)(?P<B>b+)'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group('A') + ':' + match.group('B'))\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"(a)(b*)\"\n    if re.match(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[b]+', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"ab+\"\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return (n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<10 :\n        return n\n    else :\n        return last_Digit(n//10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n    \ndef key_maker(number) :\n    '''\n    Write a python function to create a hash key from a number.\n    '''\n    hash_key = number%10\n    return hash_key\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n)%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    elif n == 10 :\n        return 0\n    elif n == 11 :\n        return 1\n    else :\n        return last_Digit(n/10)\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: -x,list1))\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = [x for x in list1 if x < 0]\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x<0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-i for i in list1]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negs = []\n    for i in list1:\n        if i < 0:\n            negs.append(i)\n    return negs\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print i,\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print(i)\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i<0]\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([x for x in str1 if x.isalpha()])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(str1.split(\"a\"))\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    str2 = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(filter(lambda x: x%2==0, str1))\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1.split('o')[::2])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([c for c in str1 if not c.isdigit()])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(str1.split(\"a\"))\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if ord(str1[i]) % 2!= 0:\n            str1 = str1[:i] + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([x for x in str1 if ord(x)%2 == 0])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # remove the odd characters\n    odd_str1 = ''.join(str1[::2])\n    return odd_str1\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][1] < test_list[j][0]:\n                bidirectional += 1\n    return bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(list(bidirectional_pairs(test_list)))\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len([(i, j) for i in test_list for j in test_list if i < j and (i, j) in test_list])\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    # Base case: test_list is a single element\n    if len(test_list) <= 1:\n        return 0\n    \n    # Recursive case: test_list contains 2 elements, \n    # and both elements have a single element in each list\n    elif len(test_list[0]) == 1 and len(test_list[1]) == 1:\n        return test_list[0][0] * test_list[1][0] * 2\n    \n    # Recursive case: test_list contains 2 elements, \n    # but either list has more than 1 element. \n    else:\n        return test_list[0][0] * test_list[1][0] + count_bidirectional([test_list[0][1:], test_list[1][1:]])\n    \ndef factorial_bidirectional(n):\n    '''\n    Write a function to count the number of combinations \n    of n elements in a list of length n, with 2 elements \n    adjacent in the list.\n    '''\n    \n    # Base case: n is 0 or 1, no combinations\n    if n <= 1:\n        return 1\n    \n    # Recursive case: n > 1, two elements adjacent in list, \n    # and count_bidirectional(n-1)\n    else:\n        return count_bidirectional([[0]*n, list(range(1,n))])\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1] and test_list[i][2] == test_list[j][2]:\n                bidirectional_pairs += 1\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0] and test_list[i][2] == test_list[j][2]:\n                bidirectional_pairs += 1\n            if test_list[i][0] == test_list[j][2] and test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][0]:\n                bidirectional_pairs += 1\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] and test_list[i][0] == test_list[j][0]:\n                bidirectional_pairs += 1\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if test_list == []:\n        return 0\n    else:\n        return (count_bidirectional(test_list[1:]) + count_bidirectional(test_list[:-1]) + 1)\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # YOUR CODE GOES HERE\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if(test_list[i] > test_list[j]):\n                count+=1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pair = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][1] == test_list[j][0] and test_list[i][0] == test_list[j][1]:\n                bidirectional_pair += 1\n    return bidirectional_pair\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_a = 0\n    count_b = 0\n    for a, b in test_list:\n        if a < b:\n            count_a += 1\n        else:\n            count_b += 1\n    return (count_a, count_b)\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # initialize a dictionary that will store the mapping\n    bidirectional_dict = {}\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    if len(L) == 1:\n        return L[0]\n    else:\n        return L[0] + 10*multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n    \nif __name__ == '__main__':\n    print(multiple_to_single([1,2,3,4,5]))\n    print(multiple_to_single([1,2,3]))\n    print(multiple_to_single([1,2,3,4,5]))\n    print(multiple_to_single([1,2,3,4,5,6,7]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\n    print(multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]))\n    print(multiple_to_single([1,2,3,4,5,6,7,"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x, y: x * 10 + y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def join(L):\n        s = \"\"\n        for i in L:\n            s += str(i)\n        return int(s)\n    return join(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    assert type(L) == list\n    assert len(L) > 0\n    assert type(L[0]) == int\n    assert type(L[0]) == int\n    s = 0\n    for i in L:\n        s = s * 10 + i\n    return s\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    new_list = []\n    for i in L:\n        if i >= 10:\n            new_list.append(i % 10)\n            new_list.append(i // 10)\n        else:\n            new_list.append(i)\n    return sum(new_list)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ret = 0\n    for i in L:\n        ret = ret * 10 + i\n    return ret\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0]*10**len(L) + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ans = 0\n    for item in L:\n        ans *= 10\n        ans += item\n    return ans\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+ad\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No adverb found!\"\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+noun\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No noun found!\"\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+verb\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No verb found!\"\ndef find_punctuation_position(text):\n    '''\n    Write a function to find the first punctuation and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+punct\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No punctuation found!\"\ndef find_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+adjective\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No adjective found!\"\ndef find_preposition_position(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+preposition\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No preposition found!\"\ndef find_conjunction_position(text):\n    '''\n    Write a function to find the first conjunction and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+conjunction\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No conjunction found!\"\ndef find_determiner_position(text):\n    '''\n    Write a function to find the first determiner and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+determiner\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No determiner found!\"\ndef find_subject_position(text):\n    '''\n    Write a function to find the first subject and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+subject\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No subject found!\"\ndef find_object_position(text):\n    '''\n    Write a function to find the first object and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+object\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No object found!\"\ndef find_particle_position(text):\n    '''\n    Write a function to find the first particle and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+particle\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No particle found!\"\ndef find_number_position(text):\n    '''\n    Write a function to find the first number and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+number\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No number found!\"\ndef find_adverb_pronoun_position(text):\n    '''\n    Write a function to find the first adverb-pronoun and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+adverb\\w+pronoun\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No adverb-pronoun found!\"\ndef find_adverb_number_position(text):\n    '''\n    Write a function to find the first adverb-number and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+adverb\\w+number\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No adverb-number found!\"\ndef find_adjective_pronoun_position(text):\n    '''\n    Write a function to find the first adjective-pronoun and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+adjective\\w+pronoun\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No adjective-pronoun found!\"\ndef find_adjective_number_position(text):\n    '''\n    Write a function to find the first adjective-number and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+adjective\\w+number\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No adjective-number found!\"\ndef find_pronoun_position(text):\n    '''\n    Write a function to find the first pronoun and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+pronoun\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No pronoun found!\"\ndef find_prep_position(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+preposition\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No preposition found!\"\ndef find_conjunction_pronoun_position(text):\n    '''\n    Write a function to find the first conjunction-pronoun and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+conjunction\\w+pronoun\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No conjunction-pronoun found!\"\ndef find_determiner_pronoun_position(text):\n    '''\n    Write a function to find the first determiner-pronoun and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+determiner\\w+pronoun\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No determiner-pronoun found!\"\ndef find_determiner_number_position(text):\n    '''\n    Write a function to find the first determiner-number and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+determiner\\w+number\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No determiner-number found!\"\ndef find_subject_pronoun_position(text):\n    '''\n    Write a function to find the first subject-pronoun and their positions in a given sentence.\n    '''\n    list1 = re.findall(\"\\w+subject\\w+pronoun\\w+\", text)\n    if list1:\n        return \" \".join(list1)\n    else:\n        return \"No subject-pronoun found!\"\ndef find_subject_number_position(text):\n    '''\n    Write a function to find the first subject-number and their position"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r\"(\\w+)\\s+(\\w+)\\s+.*\"\n    all_adverb_and_position = re.findall(pattern,text)\n    for adverb_and_position in all_adverb_and_position:\n        print(\"Adverb at position {} is {}\".format(adverb_and_position[1], adverb_and_position[0]))\ndef find_word_pos(text):\n    '''\n    Write a function to find the positions of all words in a given sentence.\n    '''\n    pattern = r\"(\\w+)\\s+.*\"\n    all_words_pos = re.findall(pattern,text)\n    for word_pos in all_words_pos:\n        print(\"Word at position {} is {}\".format(word_pos[0], word_pos))\ndef find_word_count(text):\n    '''\n    Write a function to find the number of words in a given sentence.\n    '''\n    pattern = r\"(\\w+)\\s+.*\"\n    all_words_count = re.findall(pattern,text)\n    print(\"Total no. of words in the sentence is {}\".format(len(all_words_count)))\ndef find_spaces_and_tabs(text):\n    '''\n    Write a function to find the positions of all spaces and tabs in a given sentence.\n    '''\n    pattern = r\"\\s+\"\n    all_spaces_and_tabs = re.findall(pattern,text)\n    for spaces_and_tabs in all_spaces_and_tabs:\n        print(\"{} at position {}\".format(spaces_and_tabs, text.find(spaces_and_tabs)))\ndef find_multiple_letter_words(text):\n    '''\n    Write a function to find the positions of all multiple letter words in a given sentence.\n    '''\n    pattern = r\"(\\w+)\\s+.*\"\n    all_words_count = re.findall(pattern,text)\n    for word_count in all_words_count:\n        if len(word_count) > 1:\n            print(\"{} at position {}\".format(word_count, text.find(word_count)))\ndef find_word_capitalized(text):\n    '''\n    Write a function to find the positions of all words in a given sentence with the first letter capitalized.\n    '''\n    pattern = r\"(\\w+)\\s+.*\"\n    all_words_count = re.findall(pattern,text)\n    for word_count in all_words_count:\n        if word_count.istitle():\n            print(\"{} at position {}\".format(word_count, text.find(word_count)))\ndef find_word_count_sentence(text):\n    '''\n    Write a function to find the number of words in a given sentence.\n    '''\n    pattern = r\"(\\w+)\\s+.*\"\n    all_words_count = re.findall(pattern,text)\n    print(\"Total no. of words in the sentence is {}\".format(len(all_words_count)))\ndef find_sentence_count(text):\n    '''\n    Write a function to find the number of sentences in a given text.\n    '''\n    pattern = r\".*(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?|\\!)\\s.*\"\n    all_sentence_count = re.findall(pattern,text)\n    print(\"Total no. of sentences in the text is {}\".format(len(all_sentence_count)))\ndef find_greeting_count(text):\n    '''\n    Write a function to find the number of greeting in a given text.\n    '''\n    pattern = r\".*(?<=\\s)\\w+\\s+.*\"\n    all_greeting_count = re.findall(pattern,text)\n    print(\"Total no. of greetings in the text is {}\".format(len(all_greeting_count)))\ndef find_quotation_count(text):\n    '''\n    Write a function to find the number of quotations in a given text.\n    '''\n    pattern = r\"(\\\".*?\\\")\"\n    all_quotation_count = re.findall(pattern,text)\n    print(\"Total no. of quotations in the text is {}\".format(len(all_quotation_count)))\ndef find_word_end_with(text):\n    '''\n    Write a function to find the positions of all words in a given sentence that end with a given ending.\n    '''\n    pattern = r\".*(?=\\s)\\w+\\s+.*\"\n    all_words_end_with = re.findall(pattern,text)\n    for word_end_with in all_words_end_with:\n        if word_end_with.endswith(\"s\"):\n            print(\"{} at position {}\".format(word_end_with, text.find(word_end_with)))\ndef find_word_start_with(text):\n    '''\n    Write a function to find the positions of all words in a given sentence that start with a given starting character.\n    '''\n    pattern = r\".*(?<=\\s)\\w+\\s+.*\"\n    all_words_start_with = re.findall(pattern,text)\n    for word_start_with in all_words_start_with:\n        if word_start_with.startswith(\"a\"):\n            print(\"{} at position {}\".format(word_start_with, text.find(word_start_with)))\ndef find_word_length(text):\n    '''\n    Write a function to find the length of all words in a given sentence.\n    '''\n    pattern = r\".*(?=\\s)\\w+\\s+.*\"\n    all_words_length = re.findall(pattern,text)\n    for word_length in all_words_length:\n        print(\"Length of word {} is {}\".format(word_length, len(word_length)))\ndef find_sentence_length(text):\n    '''\n    Write a function to find the length of all sentences in a given text.\n    '''\n    pattern = r\".*(?<=\\s)\\w+\\s+.*\"\n    all_sentence_length = re.findall(pattern,text)\n    for sentence_length in all_sentence_length:\n        print(\"Length of sentence {} is {}\".format(sentence_length, len(sentence_length)))\ndef find_digit_count(text):\n    '''\n    Write a function to find the number of digits in a given sentence.\n    '''\n    pattern = r\"(\\d+)\\s+.*\"\n    all_digits_count = re.findall(pattern,text)\n    print(\"Total no. of digits in the sentence is {}\".format(len(all_digits_count)))\ndef find_letter_count(text):\n    '''\n    Write a function to find the number of letters in a given sentence.\n    '''\n    pattern = r\"(\\w+)\\s+.*\"\n    all_letter_count = re.findall(pattern,text)\n    print(\"Total no. of letters in the sentence is {}\".format(len(all_letter_count)))\ndef find_letter_count_uppercase(text):\n    '''\n    Write a function to find the number of uppercase letters in a given sentence.\n    '''\n    pattern = r\"(\\w+)\\s+.*\"\n    all_letter_count = re.findall(pattern,text)\n    count = 0\n    for letter_count in all_letter_count:\n        if letter_count.isupper():\n            count += 1\n    print(\"Total no. of uppercase letters in the sentence is {}\".format(count))\ndef find_digit_count_sentence(text):\n    '''\n    Write a function to find the number of digits in a given sentence.\n    '''\n    pattern = r\"(\\d+)\\s+.*\"\n    all_digits_count = re.findall(pattern,text)\n    print(\"Total no. of digits in the sentence is {}\".format(len(all_digits_count)))\ndef find_all_digits_in_sentence(text):\n    '''\n    Write a function to find the positions of all digit"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match = re.search(r'(?<=\\w)\\w*(?=\\w)', text)\n    return match.span()\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'(?<=[^a-zA-Z0-9])(?:(?<=\\s|^)\\w*(?:(?=\\W)|$))(?:(?<=\\s|^)(?=\\w*))'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #extract the adverb in a sentence\n    #example: the cat was hungry\n    #output: the cat was hungry\n    #example: we can eat the dog\n    #output: we can eat the dog\n    #example: I like it\n    #output: I like it\n    pos = re.findall(r'(?<=[.!?])([a-zA-Z]+)\\s', text)\n    #print(pos)\n    return pos\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    position = [m.start() for m in re.finditer(r'\\w+ly', text)]\n    return position\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def find_verb_position(text):\n        verb_position = [m.start() for m in re.finditer('\\w+', text)]\n        return verb_position\n    \n    def find_adverb(text):\n        adverb_position = [m.start() for m in re.finditer('\\w+', text)]\n        return adverb_position\n    \n    def find_adverb_noun(text):\n        adverb_position = [m.start() for m in re.finditer('\\w+', text)]\n        adverb_noun_position = []\n        for i in adverb_position:\n            text = text[i:]\n            adverb_noun_position.append(adverb_position)\n        return adverb_noun_position\n    \n    verb_position = find_verb_position(text)\n    adverb_position = find_adverb(text)\n    adverb_noun_position = find_adverb_noun(text)\n    \n    #return adverb_position, verb_position, adverb_noun_position\n    return adverb_position, adverb_noun_position\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return [m.start() for m in re.finditer(r'\\s+adverb', text)]\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    print re.findall(r'\\w+ly', text)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # write your function here\n    my_str=text\n    my_list=[]\n    my_list=re.findall(r'(?<=\\s)\\w+',my_str)\n    print(my_list)\n    return(my_list)\n    \n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    a = l*l*l\n    area = 6*a\n    print(\"A cube of dimension\", l, \"cm has an area of\", area, \"cm^2\")\n    return\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    sa = 6 * l ** 2\n    return sa\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = 6 * (l**2)\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_pos = 0\n    for i in nums:\n        if i > 0:\n            num_pos += 1\n    return float(num_pos) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(sum(x > 0 for x in nums)) / len(nums)\ndef test_positive_count():\n    assert(positive_count([1,2,3,4,5]) == 0.6)\n    assert(positive_count([1,0,-1,1]) == 0.5)\n    assert(positive_count([]) == 0)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return float(count) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n    return positive / float(positive + negative)\ndef is_odd(num):\n    return num & 1 == 1\ndef odd_number_count(nums):\n    '''\n    Write a function to find the number of odd numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if is_odd(num):\n            count += 1\n    return count\ndef how_many_odd_in_list(nums):\n    '''\n    Write a function that takes a list of integers and returns the number of odd numbers\n    '''\n    count = 0\n    for num in nums:\n        if num % 2 == 1:\n            count += 1\n    return count\ndef how_many_odd_in_array(nums):\n    '''\n    Write a function that takes a list of integers and returns the number of odd numbers\n    '''\n    count = 0\n    for num in nums:\n        if num % 2 == 1:\n            count += 1\n    return count\ndef remove_evens(nums):\n    '''\n    Write a function to remove all duplicates from an array of integers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n    return new_nums\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove all duplicates from an array of integers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n    return new_nums\ndef remove_duplicates_from_sorted_array(nums):\n    '''\n    Write a function to remove duplicates from an array of integers where the integers are sorted in ascending order.\n    '''\n    new_nums = []\n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n    return new_nums\ndef remove_duplicates_from_unsorted_array(nums):\n    '''\n    Write a function to remove duplicates from an array of integers where the integers are sorted in ascending order.\n    '''\n    new_nums = []\n    seen = set()\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            new_nums.append(num)\n    return new_nums\ndef all_even_numbers(nums):\n    '''\n    Write a function to find the sum of all the even integers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += num\n    return count\ndef all_even_numbers_with_list(nums):\n    '''\n    Write a function to find the sum of all the even integers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += num\n    return count\ndef smallest_odd_in_list(nums):\n    '''\n    Write a function to find the smallest odd number in an array of integers.\n    '''\n    for num in nums:\n        if is_odd(num) and num < 1:\n            return num\ndef find_smallest_odd_in_list(nums):\n    '''\n    Write a function to find the smallest odd number in an array of integers.\n    '''\n    smallest = None\n    for num in nums:\n        if is_odd(num) and (smallest is None or num < smallest):\n            smallest = num\n    return smallest\ndef find_smallest_odd_in_array(nums):\n    '''\n    Write a function to find the smallest odd number in an array of integers.\n    '''\n    smallest = None\n    for num in nums:\n        if is_odd(num) and (smallest is None or num < smallest):\n            smallest = num\n    return smallest\ndef find_smallest_odd_in_list_of_lists(list_of_nums):\n    '''\n    Write a function to find the smallest odd number in an array of integers.\n    '''\n    smallest = None\n    for nums in list_of_nums:\n        for num in nums:\n            if is_odd(num) and (smallest is None or num < smallest):\n                smallest = num\n    return smallest\ndef find_smallest_odd_in_list_of_arrays(list_of_nums):\n    '''\n    Write a function to find the smallest odd number in an array of integers.\n    '''\n    smallest = None\n    for nums in list_of_nums:\n        for num in nums:\n            if is_odd(num) and (smallest is None or num < smallest):\n                smallest = num\n    return smallest\ndef find_smallest_odd_in_list_of_tuples(list_of_nums):\n    '''\n    Write a function to find the smallest odd number in an array of integers.\n    '''\n    smallest = None\n    for nums in list_of_nums:\n        for num, index in nums:\n            if is_odd(num) and (smallest is None or num < smallest):\n                smallest = num\n    return smallest\ndef find_smallest_odd_in_array_of_arrays(list_of_nums):\n    '''\n    Write a function to find the smallest odd number in an array of integers.\n    '''\n    smallest = None\n    for nums in list_of_nums:\n        for num in nums:\n            if is_odd(num) and (smallest is None or num < smallest):\n                smallest = num\n    return smallest\ndef find_smallest_odd_in_array_of_tuples(list_of_nums):\n    '''\n    Write a function to find the smallest odd number in an array of integers.\n    '''\n    smallest = None\n    for nums in list_of_nums:\n        for num, index in nums:\n            if is_odd(num) and (smallest is None or num < smallest):\n                smallest = num\n    return smallest\ndef find_smallest_odd_in_list_of_arrays_of_arrays(list_of_nums):\n    '''\n    Write a function to find the smallest odd number in an array of integers.\n    '''\n    smallest = None\n    for nums in list_of_nums:\n        for num in nums:\n            if is_odd(num) and (smallest is None or num < smallest):\n                smallest = num\n    return smallest\ndef find_smallest_odd_in_list_of_arrays_of_tuples(list_of_nums):\n    '''\n    Write a function to find the smallest odd number in an array of integers.\n    '''\n    smallest = None\n    for nums in list_of_nums:\n        for num, index in nums:\n            if is_odd(num) and (smallest is None or num < smallest):\n                smallest = num\n    return smallest\ndef find_smallest_odd_in_list_of_arrays_of_tuples_with_index(list_of_nums):\n    '''\n    Write a function to find the smallest odd number in an array of integers.\n    '''\n    smallest = None\n    for nums in list_of_nums:\n        for num, index in nums:\n            if is_odd(num) and (smallest is None or num < smallest):\n                smallest = num\n    return smallest\ndef find_smallest_odd_in_list_of_tuples_of_arrays(list_of_nums):\n    '''\n    Write a function to find the smallest odd number in an array of integers.\n    '''\n    smallest = None\n    for nums in list_of_nums:\n        for num, index in nums:\n            if is_odd(num) and (smallest is None or num < smallest):\n                smal"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i > 0:\n            pos += 1\n    print (pos/float(len(nums)))\n    return pos/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    c = 0\n    for i in nums:\n        if i > 0:\n            c += 1\n    return float(c) / len(nums)\ndef list_average(nums):\n    '''\n    Write a function to find the average of all elements in an array of integers.\n    '''\n    return float(sum(nums)) / len(nums)\ndef max_diff(nums):\n    '''\n    Write a function to find the maximum difference between adjacent elements in an array of integers.\n    '''\n    max_diff = nums[1] - nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i - 1] > max_diff:\n            max_diff = nums[i] - nums[i - 1]\n    return max_diff\ndef num_to_binary(n):\n    '''\n    Write a function to convert a non-negative integer to binary (base 2).\n    '''\n    #Check if the number is 0\n    if n == 0:\n        return 0\n    #If the number is negative, convert it to absolute value first\n    if n < 0:\n        n = n * -1\n    #Set the answer to a variable\n    answer = ''\n    #While n is not 0, divide by 2, and store the remainder in a new variable\n    while n!= 0:\n        answer = str(n % 2) + answer\n        n /= 2\n    #Return the answer, which has the binary representation of the original number\n    return answer\ndef list_length(nums):\n    '''\n    Write a function to find the length of a list of integers.\n    '''\n    return len(nums)\ndef generate_primes():\n    '''\n    Write a function to generate all the primes below a given integer n.\n    '''\n    #Set the answer to an array\n    answer = []\n    #Set the limit to the input integer\n    limit = int(input('Enter the limit: '))\n    #For each number between 1 and the limit, determine if it is prime or not\n    for num in range(1, limit + 1):\n        #If the number is prime, store it in the array\n        if is_prime(num):\n            answer.append(num)\n    #Return the array of primes\n    return answer\ndef is_prime(n):\n    '''\n    Write a function to determine if a given non-negative integer is prime.\n    '''\n    #If n is 0 or 1, it is not prime\n    if n <= 1:\n        return False\n    #If the number is even, it is not prime\n    if n % 2 == 0:\n        return False\n    #Set the upper limit to sqrt(n)\n    limit = int(n ** 0.5) + 1\n    #Set the iterator to 0\n    i = 0\n    #For each number between 1 and the upper limit,\n    #if the number is evenly divisible by n,\n    #it is not prime\n    while i <= limit:\n        if n % (i + 1) == 0:\n            return False\n        i += 1\n    #If none of the numbers between 1 and the upper limit is evenly divisible by n,\n    #n is prime\n    return True\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    #Set the answer to an empty string\n    answer = ''\n    #For each character in the string\n    for i in range(len(string)):\n        #Store the character in answer, and subtract 1 from i,\n        #because in Python strings are zero-based\n        answer += string[i - 1]\n    #Return the answer\n    return answer\ndef is_palindrome(string):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    #Set the answer to a boolean\n    answer = True\n    #For each character in the string\n    for i in range(len(string) / 2):\n        #If the character at index i is not equal to the character at index -1 * i + i,\n        #the string is not a palindrome\n        if string[i]!= string[len(string) - 1 - i]:\n            answer = False\n    #Return the answer\n    return answer\ndef is_rotation(string1, string2):\n    '''\n    Write a function to determine if a string is a rotation of another string.\n    '''\n    #Set the answer to a boolean\n    answer = False\n    #If string1 is greater than string2\n    if len(string1) > len(string2):\n        #Check if the first index of string1 equals the last index of string2\n        if string1[0] == string2[-1]:\n            #Set the answer to true\n            answer = True\n    #Return the answer\n    return answer\ndef rotate(string, n):\n    '''\n    Write a function to rotate a string n positions.\n    '''\n    #Set the answer to an empty string\n    answer = ''\n    #For each character in the string\n    for i in range(len(string)):\n        #Store the character in answer, and subtract n from i,\n        #and set the result to the variable answer\n        answer += string[(i - n) % len(string)]\n    #Return the answer\n    return answer\ndef is_unique(string):\n    '''\n    Write a function to determine if a string has all unique characters.\n    '''\n    #Set the answer to a boolean\n    answer = True\n    #For each character in the string\n    for i in range(len(string)):\n        #For each character in the string\n        for j in range(len(string)):\n            #If the characters are equal,\n            #the string is not unique\n            if string[i] == string[j]:\n                answer = False\n    #Return the answer\n    return answer\ndef is_anagram(string1, string2):\n    '''\n    Write a function to determine if two strings are anagrams.\n    '''\n    #Set the answer to a boolean\n    answer = False\n    #If the length of string1 is not equal to the length of string2\n    if len(string1)!= len(string2):\n        #Return the answer\n        return answer\n    #For each character in the string1\n    for i in range(len(string1)):\n        #Store the character in string1 at index i in a variable called count\n        count = 0\n        #For each character in the string2\n        for j in range(len(string2)):\n            #If the character at index j is equal to the character at index i\n            if string1[i] == string2[j]:\n                #Add 1 to count\n                count += 1\n        #If count is not equal to the length of string2\n        if count!= len(string2):\n            #Return the answer\n            return answer\n    #If all the above steps are successful,\n    #the strings are anagrams\n    return answer\ndef is_rotation(string1, string2):\n    '''\n    Write a function to determine if a string is a rotation of another string.\n    '''\n    #Set the answer to a boolean\n    answer = False\n    #If string1 is greater than string2\n    if len(string1) > len(string2):\n        #Check if the first index of string1 equals the last index of string2\n        if string1[0] == string2[-1]:\n            #Set the answer to true\n            answer = True\n    #Return the answer\n    return answer\ndef word_search(board, word):\n    '''\n    Write a function to find if a word is in a 2D grid.\n    '''\n    #Set the answer to a boolean\n    answer = False\n    #Set the iterator to 0\n    i = 0\n    #For each letter in the word\n    for letter in word:\n        #Set the iterator to the index of letter in the board\n        j = board[i].index(letter)\n        #For each row in the board\n        for row in board:\n            #If the letter at the index of letter is equal to the letter at the index of letter\n            if row[j] == letter:\n                #Set the answer to true\n                answer = True\n                #Set the iterator to the index of letter in the word + 1\n                i += 1\n        #Return the answer\n        return answer\ndef find_words(board, words):\n    '''\n    Write a function t"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #Note: This solution does not work for arrays with floats\n    #Using array.array()\n    nums = array('i', nums)\n    pos = sum(nums)\n    pos_count = sum(nums) - nums[0]\n    return pos_count/pos\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return float(count) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return None\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    c=0\n    for i in nums:\n        if i>0:\n            c+=1\n    return c/float(len(nums))\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_numbers = [x for x in list1 if x < 0]\n    if len(neg_numbers) > 0:\n        return max(neg_numbers)\n    else:\n        return None\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max1 = -1 * sys.maxint\n    for i in list1:\n        if i < max1:\n            max1 = i\n    return max1\n    \n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    pos_neg_list = list(filter(lambda x: x>=0, list1))\n    return(max(pos_neg_list))\n    \ndef smallest_pos(list2):\n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    pos_neg_list2 = list(filter(lambda x: x<=0, list2))\n    return(min(pos_neg_list2))\n    \ndef sort_list(list3):\n    '''\n    Write a python function to sort the given list.\n    '''\n    return(sorted(list3))\n    \ndef larger_num(list4):\n    '''\n    Write a python function to find the number of times that the given number appears in the list.\n    '''\n    return(list4.count(num))\n    \ndef odd_num(list5):\n    '''\n    Write a python function to return the number of odd numbers in the list.\n    '''\n    return(len(list(filter(lambda x: x%2!=0, list5))))\n    \ndef even_num(list6):\n    '''\n    Write a python function to return the number of even numbers in the list.\n    '''\n    return(len(list(filter(lambda x: x%2==0, list6))))\n    \ndef double_num(list7):\n    '''\n    Write a python function to return the number of times that the given number appears in the list, but only if the number appears twice.\n    '''\n    return(len(list(filter(lambda x: x>1, list7))))\n    \ndef even_num(list8):\n    '''\n    Write a python function to return the number of even numbers in the list.\n    '''\n    return(len(list(filter(lambda x: x%2==0, list8))))\n    \ndef add_all(list9):\n    '''\n    Write a python function to return the sum of all the numbers in the list.\n    '''\n    return(sum(list9))\n    \ndef sub_all(list10):\n    '''\n    Write a python function to return the sum of all the numbers in the list.\n    '''\n    return(sum(list10) * -1)\n    \ndef multiply_all(list11):\n    '''\n    Write a python function to return the product of all the numbers in the list.\n    '''\n    return(reduce(lambda x, y: x*y, list11))\n    \ndef divide_all(list12):\n    '''\n    Write a python function to return the quotient of all the numbers in the list.\n    '''\n    return(reduce(lambda x, y: x/y, list12))\n    \ndef find_diff(list13):\n    '''\n    Write a python function to return the difference between the largest and smallest numbers in the list.\n    '''\n    return(max(list13)-min(list13))\n    \ndef odd_even(list14):\n    '''\n    Write a python function to return the number of odd numbers and even numbers in the list.\n    '''\n    return(len(list(filter(lambda x: x%2!=0, list14))), len(list(filter(lambda x: x%2==0, list14))))\n    \ndef filter_odd(list15):\n    '''\n    Write a python function to return a new list that contains only the numbers from the given list that are odd.\n    '''\n    return(list(filter(lambda x: x%2!=0, list15)))\n    \ndef filter_even(list16):\n    '''\n    Write a python function to return a new list that contains only the numbers from the given list that are even.\n    '''\n    return(list(filter(lambda x: x%2==0, list16)))\n    \ndef filter_positive(list17):\n    '''\n    Write a python function to return a new list that contains only the numbers from the given list that are positive.\n    '''\n    return(list(filter(lambda x: x>0, list17)))\n    \ndef filter_negative(list18):\n    '''\n    Write a python function to return a new list that contains only the numbers from the given list that are negative.\n    '''\n    return(list(filter(lambda x: x<0, list18)))\n    \ndef filter_string_length(list19):\n    '''\n    Write a python function to return a new list that contains only the words from the given list with 7 characters or longer.\n    '''\n    return(list(filter(lambda x: len(x)>=7, list19)))\n    \ndef filter_vowel(list20):\n    '''\n    Write a python function to return a new list that contains only the words from the given list that have vowels.\n    '''\n    return(list(filter(lambda x: any(i in x for i in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']), list20)))\n    \ndef filter_consonant(list21):\n    '''\n    Write a python function to return a new list that contains only the words from the given list that have consonants.\n    '''\n    return(list(filter(lambda x: not any(i in x for i in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']), list21)))\n    \ndef filter_duplicate(list22):\n    '''\n    Write a python function to return a new list that contains only the words from the given list that do not appear more than once.\n    '''\n    return(set(list22))\n    \ndef filter_triplets(list23):\n    '''\n    Write a python function to return a new list that contains only the numbers from the given list that appear in sequential order and that are multiples of 3.\n    '''\n    return(list(filter(lambda x: x%3==0, list23)))\n    \ndef filter_double_char(list24):\n    '''\n    Write a python function to return a new list that contains only the words from the given list that have more than two consecutive same characters.\n    '''\n    return(list(filter(lambda x: len(set(x))>1, list24)))\n    \ndef filter_letter_count(list25):\n    '''\n    Write a python function to return a new list that contains only the words from the given list that have all characters in the alphabet.\n    '''\n    return(list(filter(lambda x: any(i in x for i in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']), list25)))\n    \ndef filter_abecedarian(list26):\n    '''\n    Write a python function to return a new list that contains only the words from the given list that are abecedarian.\n    '''\n    return(list(filter(lambda x: x[0]<x[1], list26)))\n    \ndef filter_palindrome(list27):\n    '''\n    Write a python function to return a new list that contains only the words from the given list that are palindromes.\n    '''\n    return(list(filter(lambda x: x == x[::-1], list27)))\n    \ndef filter_anagram(list28):\n    '''\n    Write a python function to return a new list that contains only the words from the given list that are anagrams.\n    '''\n    return(list(filter(lambda x: sorted(x)==sorted(x[::-1]), list28)))\n    \ndef filter_digital(list29):\n    '''\n    Write a python function to return a new list that contains only the words from the given list that have all digits.\n    '''\n    return(list(filter(lambda x: any(i in x for i in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']), list29)))\n    \ndef filter_pandigital(list30):\n    '''\n    Write a python function to return a new list that contains only the words from the given list that are pandigital"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    return list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -sys.maxsize - 1\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg\n    "
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #list1 = [-5, -7, -4, -5, -4, -2, -3, -2, -4, -3, -6, -1, -9, -5, -4, -3, -4, -5, -6, -7, -3, -8, -2, -2, -4, -9, -7, -8, -9, -6, -5, -3, -2, -6, -4, -4, -6, -7, -3, -3, -3, -5, -5, -8, -4, -7, -3, -8, -2, -8, -4, -5, -1, -1, -4, -7, -3, -7, -8, -5, -1, -8, -5, -8, -4, -3, -1, -3, -5, -3, -2, -3, -1, -7, -2, -3, -1, -1, -4, -8, -5, -2, -4, -3, -8, -2, -3, -1, -4, -2, -8, -5, -6, -2, -1, -3, -5, -7, -8, -8, -8, -9, -4, -7, -8, -8, -7, -7, -4, -6, -4, -7, -5, -2, -4, -1, -4, -3, -7, -6, -8, -6, -5, -8, -6, -5, -5, -8, -3, -7, -1, -7, -7, -3, -2, -2, -6, -4, -3, -2, -4, -5, -5, -6, -4, -4, -7, -6, -5, -8, -2, -2, -3, -4, -4, -4, -5, -5, -6, -2, -2, -3, -3, -4, -6, -3, -5, -2, -8, -8, -6, -8, -8, -8, -2, -2, -2, -4, -8, -2, -2, -4, -6, -2, -8, -5, -1, -4, -5, -1, -6, -7, -5, -3, -5, -2, -2, -5, -8, -1, -4, -6, -8, -2, -3, -3, -5, -1, -4, -5, -2, -7, -1, -5, -2, -8, -5, -8, -4, -2, -1, -8, -1, -2, -3, -2, -1, -1, -3, -4, -3, -6, -5, -3, -4, -1, -4, -4, -8, -2, -3, -1, -2, -3, -5, -6, -1, -4, -6, -4, -7, -5, -1, -3, -3, -5, -6, -2, -4, -4, -5, -8, -4, -1, -6, -1, -3, -6, -3, -7, -5, -3, -3, -3, -6, -3, -4, -2, -5, -2, -5, -3, -7, -5, -3, -1, -8, -5, -6, -4, -5, -5, -7, -3, -3, -5, -2, -2, -7, -5, -7, -6, -1, -4, -4, -2, -3, -1, -2, -7, -2, -7, -6, -5, -7, -1, -2, -3, -6, -5, -2, -1, -4, -2, -2, -2, -5, -3, -4, -3, -4, -4, -7, -7, -4, -5, -7, -5, -3, -5, -3, -5, -7, -8, -1, -4, -2, -6, -2, -1, -2, -3, -4, -3, -5, -6, -6, -4, -2, -2, -4, -5, -4, -1, -3, -6, -2, -4, -1, -2, -1, -5, -2, -2, -1, -4, -2, -1, -5, -6, -6, -1, -7, -2, -3, -3, -6, -5, -5, -6, -1, -5, -6, -5, -5, -4, -6, -2, -8, -5, -2, -5, -5, -6, -6, -2, -4, -2, -6, -4, -7, -5, -6, -5, -2, -5, -4, -5, -6, -3, -5, -5, -5, -3, -7, -1, -4, -2, -5, -2, -7, -2, -5, -2, -6, -5, -6, -6, -5, -4, -2, -1, -6, -7, -4, -5, -4, -7, -4, -5, -2, -3, -1, -7, -1, -6, -5, -4, -3, -5, -5, -3, -4, -4, -3, -7, -2, -5, -5, -1, -5, -6, -1, -5, -4, -7, -2, -5, -6, -3, -5, -6, -6, -3, -4, -1, -5, -2, -6, -2, -5, -5, -4, -6, -5, -7, -2, -6, -6, -6, -5, -3, -6, -6, -6, -5, -2, -7, -1, -5, -3, -6, -5, -1, -3, -5, -3, -4, -4, -1, -5, -1, -6, -5, -4, -7, -5, -3, -1, -3, -6, -3, -5, -7, -6, -5, -5, -5, -1, -5, -6, -3, -4, -4, -5, -2, -5, -4, -5, -5, -5, -1, -7, -3, -5, -5, -7, -6, -6, -4, -6, -5, -4, -3, -5, -6, -5, -5, -4, -2, -5, -4, -3, -5, -5, -5, -6, -5, -5, -5, -5, -5, -5, -7, -4, -5, -5, -5, -4, -7, -3, -7, -2, -4, -3, -6, -4, -7, -1, -4, -1, -6, -4, -7, -5, -7, -6, -2, -4, -4, -7, -5, -6, -6, -7, -7, -5, -2, -6, -2, -7, -5, -6, -3, -7, -5, -7, -6, -2, -4, -5, -5, -5, -7, -6, -4, -7, -5, -3, -5, -6, -4, -6, -5, -5, -5, -6, -3, -7, -1, -4, -4, -6, -7, -2, -5, -7, -5, -5, -5, -5, -6, -5, -5, -5, -6, -4, -4, -5, "
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in list1:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg\n    \n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list=[]\n    for i in list1:\n        if i<0:\n            neg_list.append(i)\n    if len(neg_list)==0:\n        return None\n    else:\n        return max(neg_list)\nprint(largest_neg([-1,-2,-3,-4,-5,-6,-7,0]))\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for number in list1:\n        if number < 0 and number > largest:\n            largest = number\n    return largest\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0], x[1][0:K]) for x in test_list]\n    \n    \nif __name__ == '__main__':\n    import json\n    import argparse\n    from pprint import pprint\n    \n    parser = argparse.ArgumentParser(description=\"Compute the probability of a word in a given language model\")\n    parser.add_argument(\"-a\", \"--add-arg\", metavar=\"H\", type=int, default=0, help=\"Add arg to the list.\")\n    parser.add_argument(\"-t\", \"--test\", action=\"store_true\", default=False, help=\"Test the program with dictionary\")\n    args = parser.parse_args()\n    \n    f = open('/home/daniel/workspace/readability/data/train-final.json')\n    data = json.load(f)\n    \n    f = open('/home/daniel/workspace/readability/data/test-final.json')\n    test_data = json.load(f)\n    \n    if args.test:\n        print 'Generating a test dataset with length %d' % len(test_data)\n        test_data = test_data[0:len(data) / 2]\n        print 'Created a test dataset with length %d' % len(test_data)\n        f_test = open('/home/daniel/workspace/readability/data/test-final.json', 'w')\n        json.dump(test_data, f_test)\n    \n    else:\n        print 'Generating a training dataset with length %d' % len(data)\n        data = data[0:len(data) / 2]\n        print 'Created a training dataset with length %d' % len(data)\n        f_train = open('/home/daniel/workspace/readability/data/train-final.json', 'w')\n        json.dump(data, f_train)\n        \n        print 'Generating a test dataset with length %d' % len(test_data)\n        test_data = test_data[0:len(data) / 2]\n        print 'Created a test dataset with length %d' % len(test_data)\n        f_test = open('/home/daniel/workspace/readability/data/test-final.json', 'w')\n        json.dump(test_data, f_test)\n    \n    f_train = open('/home/daniel/workspace/readability/data/train-final.json')\n    train = json.load(f_train)\n    \n    f_test = open('/home/daniel/workspace/readability/data/test-final.json')\n    test = json.load(f_test)\n    \n    f_train.close()\n    f_test.close()\n    \n    train_set = sorted(train, key=lambda x: x[1], reverse=True)\n    test_set = sorted(test, key=lambda x: x[1], reverse=True)\n    \n    train_set = trim_tuple(train_set, 5)\n    test_set = trim_tuple(test_set, 5)\n    \n    probs = {'a': 0.0, 'b': 0.0, 'c': 0.0, 'd': 0.0, 'e': 0.0, 'f': 0.0, 'g': 0.0, 'h': 0.0, 'i': 0.0, 'j': 0.0, 'k': 0.0, 'l': 0.0,'m': 0.0, 'n': 0.0, 'o': 0.0, 'p': 0.0, 'q': 0.0, 'r': 0.0,'s': 0.0, 't': 0.0, 'u': 0.0, 'v': 0.0, 'w': 0.0, 'x': 0.0, 'y': 0.0, 'z': 0.0, '_': 0.0}\n    \n    total_words = 0\n    for line in train_set:\n        total_words += line[1]\n        probs[line[0]] = line[1] / float(total_words)\n    \n    total_words = 0\n    for line in test_set:\n        total_words += line[1]\n        probs[line[0]] = line[1] / float(total_words)\n    \n    for i in probs.keys():\n        if i.isalpha():\n            probs[i.lower()] = probs.pop(i)\n    \n    for i in probs.keys():\n        if i.isalpha():\n            probs[i.lower()] = 1.0 - probs.pop(i)\n    \n    import sys\n    if sys.argv[1] == '-a':\n        for line in test_set:\n            print line[0] +'' + str(probs[line[0]])\n    elif sys.argv[1] == '-t':\n        for line in test_set:\n            print line[0] +'' + str(probs[line[0]])\n    else:\n        print 'First argument must be -a or -t'\n        exit()"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if not test_list:\n        return test_list\n    return [(t[0], t[1]) for t in test_list[:K]]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][0:K]+test_list[i][K+1:])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(item[0], item[1][:K]) for item in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [ (x[0], x[1][K:]) for x in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    output = []\n    for item in test_list:\n        if len(item) < K:\n            output.append(item)\n    return output\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        if tup[K] > 0:\n            new_list.append(tup)\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [(i, j, i*j) for i, j in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup3 = (test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n    return tuple(test_tup3)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    output = []\n    for index,item in enumerate(test_tup1):\n        output.append(item*test_tup2[index])\n    return tuple(output)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [(a, b, a*b) for a,b in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = []\n    for i, j in zip(test_tup1, test_tup2):\n        res.append(i*j)\n    return tuple(res)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += ((test_tup1[i] * test_tup2[i]),)\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1], test_tup1[2]*test_tup2[2])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([x*y for x,y in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(x * y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    # result = tuple(t1 * t2 for t1, t2 in zip(test_tup1, test_tup2))\n    # return result\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for ele in lst: \n        if ele in tup: \n            tup = tup[:tup.index(ele)] + tup[tup.index(ele) + 1:] \n    return tup \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    ans = []\n    for i in lst:\n        ans.append(tup.count(i))\n    return ans\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i in lst:\n            count = count + 1\n    return count\ndef find_occurence(lst):\n    '''\n    Write a python function to find the occurence of all elements of list in tuple.\n    '''\n    lst_set = set(lst)\n    return Counter(lst)\ndef find_Ocurrence(lst):\n    '''\n    Write a python function to find the occurence of all elements of list in tuple.\n    '''\n    lst_set = set(lst)\n    return dict(zip(lst_set, [lst.count(i) for i in lst_set]))\ndef RemoveDuplicate(lst):\n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    return list(set(lst))\ndef isPalindrome(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return s == s[::-1]\ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check if two strings are anagram or not.\n    '''\n    return sorted(s1) == sorted(s2)\ndef is_anagram_1(s1, s2):\n    '''\n    Write a python function to check if two strings are anagram or not.\n    '''\n    return sorted(s1) == sorted(s2)\ndef find_anagram(s1, s2):\n    '''\n    Write a python function to find anagram from two strings.\n    '''\n    c1, c2 = Counter(s1), Counter(s2)\n    return c1 == c2\ndef is_anagram_2(s1, s2):\n    '''\n    Write a python function to find anagram from two strings.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    count = 0\n    for i in s1:\n        if i in s2:\n            count += 1\n    if count == len(s1):\n        return True\n    else:\n        return False\ndef are_anagrams(s1, s2):\n    '''\n    Write a python function to find anagrams from two strings.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    count = 0\n    for i in s1:\n        if i in s2:\n            count += 1\n    if count == len(s1):\n        return True\n    else:\n        return False\ndef is_anagram_3(s1, s2):\n    '''\n    Write a python function to find anagrams from two strings.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    count = [0] * 26\n    for i in s1:\n        count[ord(i) - ord('a')] += 1\n    for i in s2:\n        count[ord(i) - ord('a')] -= 1\n    for i in count:\n        if i!= 0:\n            return False\n    return True\ndef find_anagram_4(s1, s2):\n    '''\n    Write a python function to find anagrams from two strings.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    count = [0] * 26\n    for i in s1:\n        count[ord(i) - ord('a')] += 1\n    for i in s2:\n        count[ord(i) - ord('a')] -= 1\n    for i in count:\n        if i!= 0:\n            return False\n    return True\ndef find_anagram_5(s1, s2):\n    '''\n    Write a python function to find anagrams from two strings.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    count = [0] * 26\n    for i in s1:\n        count[ord(i) - ord('a')] += 1\n    for i in s2:\n        count[ord(i) - ord('a')] -= 1\n    for i in count:\n        if i!= 0:\n            return False\n    return True\ndef rotate_left(n, d):\n    '''\n    Write a python function to rotate a list left by d positions.\n    '''\n    return n[d:] + n[:d]\ndef rotate_right(n, d):\n    '''\n    Write a python function to rotate a list right by d positions.\n    '''\n    return n[-d:] + n[:-d]\ndef rotate_left_1(n, d):\n    '''\n    Write a python function to rotate a list left by d positions.\n    '''\n    return n[d:] + n[:d]\ndef rotate_right_1(n, d):\n    '''\n    Write a python function to rotate a list right by d positions.\n    '''\n    return n[-d:] + n[:-d]\ndef rotate_left_2(n, d):\n    '''\n    Write a python function to rotate a list left by d positions.\n    '''\n    return n[d:] + n[:d]\ndef rotate_right_2(n, d):\n    '''\n    Write a python function to rotate a list right by d positions.\n    '''\n    return n[-d:] + n[:-d]\ndef rotate_left_3(n, d):\n    '''\n    Write a python function to rotate a list left by d positions.\n    '''\n    return n[d:] + n[:d]\ndef rotate_right_3(n, d):\n    '''\n    Write a python function to rotate a list right by d positions.\n    '''\n    return n[-d:] + n[:-d]\ndef find_rotation_point(s):\n    '''\n    Write a python function to find the rotation point in a string.\n    '''\n    if len(s) <= 1:\n        return 0\n    start, end = 0, len(s) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if s[start] <= s[mid]:\n            if s[start] <= s[end]:\n                return start\n            end = mid - 1\n        else:\n            start = mid + 1\n    return mid\ndef get_rotation_point(s):\n    '''\n    Write a python function to find the rotation point in a string.\n    '''\n    if len(s) <= 1:\n        return 0\n    start, end = 0, len(s) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if s[start] <= s[mid]:\n            if s[start] <= s[end]:\n                return start\n            end = mid - 1\n        else:\n            start = mid + 1\n    return mid\ndef get_rotation_point_1(s):\n    '''\n    Write a python function to find the rotation point in a string.\n    '''\n    if len(s) <= 1:\n        return 0\n    start, end = 0, len(s) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if s[mid] >= s[start]:\n            if s[mid] >= s[end]:\n                return mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    return mid\ndef get_rotation_point_2(s):\n    '''\n    Write a python function to find the rotation point in a string.\n    '''\n    if len(s) <= 1:\n        return 0\n    start, end = 0, len(s) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if s[start] >= s[mid]:\n            if s[start] >= s[end]:\n                return start\n            end = mid - 1\n        else:\n            start = mid + 1\n    return mid\ndef get_rotation_point_3(s):\n    '''\n    Write a python function to find the rotation point in a string.\n    '''\n    if len(s) <= 1"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    a,b = tup\n    return lst.count(a),lst.count(b)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)[tup]\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tuple([tup.count(lst[i]) for i in range(len(lst))]) \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    print tup\n    print lst\n    t = Counter(lst)\n    print t\n    for k,v in t.iteritems():\n        if tup[0] == k:\n            return v\n    \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst1 = [item for tup in lst for item in tup] \n    return Counter(lst1) \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dic = {}\n    for i in tup:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for j in lst:\n        if j in dic:\n            print j, \":\", dic[j]\n        else:\n            print j, \":\", 0\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print \"Cubing the numbers in the list: \", nums\n    for i in xrange(len(nums)):\n        nums[i] = nums[i] ** 3\n        \n    return nums\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x ** 3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x ** 3, nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if nums == []:\n        return []\n    else:\n        return [nums[0]**3] + cube_nums(nums[1:])\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num**3)\n    return results\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    n = n + 1\n    #Use factorization to decompose n\n    #factors is a list of the factors of n\n    factors = []\n    for i in range(1,n):\n        if n % i == 0:\n            factors.append(i)\n    #calculate sum of factors\n    factors_sum = 0\n    for factor in factors:\n        factors_sum += factor\n    if factors_sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 1\n    for i in range(2, n):\n        if i % 2 == 1:\n            s += i\n    return s\n    \ndef test_cal_sum():\n    assert(cal_sum(2) == 3)\n    assert(cal_sum(5) == 8)\n    assert(cal_sum(10) == 22)\n    assert(cal_sum(20) == 85)\n    assert(cal_sum(100) == 1043)\n    \ndef primes(n):\n    \"\"\"Return a list of primes, 2 <= p < n.\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1:\n        return 1\n    return cal_sum(n-1)+n*n\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<=0:\n        return 0\n    return n%10+cal_sum(n/10)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return cal_sum(n-1) + 2*n + 1\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 1\n    return (n * (n + 1)) / 2\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n+cal_sum(n-1)\n    \n    \ndef gen_perrin_list(n):\n    '''\n    Create a list of perrin numbers.\n    '''\n    perrin_list = []\n    for i in range(1,n+1):\n        perrin_list.append(i*(3*i-1)//2)\n    return perrin_list\n    \ndef gen_prime_list(n):\n    '''\n    Create a list of prime numbers.\n    '''\n    prime_list = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            prime_list.append(i)\n    return prime_list\n    \ndef is_prime(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n==2:\n        return True\n    else:\n        for j in range(2,n//2+1):\n            if n%j == 0:\n                return False\n            else:\n                return True\n        \ndef is_sum_perrin(n):\n    '''\n    Check whether n is sum of perrin numbers or not.\n    '''\n    if n in perrin_list:\n        return True\n    else:\n        return False\n    \ndef is_sum_prime(n):\n    '''\n    Check whether n is sum of prime numbers or not.\n    '''\n    if n in prime_list:\n        return True\n    else:\n        return False\n    \ndef is_sum_of_2_or_3(n):\n    '''\n    Check whether n is sum of 2 or 3.\n    '''\n    if n in perrin_list:\n        return True\n    elif n in prime_list:\n        return True\n    elif n%2 ==0 or n%3 ==0:\n        return True\n    else:\n        return False\n    \ndef find_sum_of_perrin(n):\n    '''\n    Find sum of perrin numbers less than or equal to n.\n    '''\n    sum_of_perrin = 0\n    for i in range(1,n+1):\n        if is_sum_perrin(i):\n            sum_of_perrin += i\n    return sum_of_perrin\n    \ndef find_sum_of_prime(n):\n    '''\n    Find sum of prime numbers less than or equal to n.\n    '''\n    sum_of_prime = 0\n    for i in range(1,n+1):\n        if is_sum_prime(i):\n            sum_of_prime += i\n    return sum_of_prime\n    \ndef find_sum_of_2_or_3(n):\n    '''\n    Find sum of 2 or 3.\n    '''\n    sum_of_2_or_3 = 0\n    for i in range(1,n+1):\n        if is_sum_of_2_or_3(i):\n            sum_of_2_or_3 += i\n    return sum_of_2_or_3\n    \ndef find_sum_of_prime_less_than_100():\n    '''\n    Find sum of prime numbers less than or equal to 100.\n    '''\n    sum_of_prime = 0\n    for i in range(1,101):\n        if is_sum_prime(i):\n            sum_of_prime += i\n    return sum_of_prime\n    \ndef find_sum_of_perrin_less_than_100():\n    '''\n    Find sum of perrin numbers less than or equal to 100.\n    '''\n    sum_of_perrin = 0\n    for i in range(1,101):\n        if is_sum_perrin(i):\n            sum_of_perrin += i\n    return sum_of_perrin\n    \ndef find_sum_of_2_or_3_less_than_100():\n    '''\n    Find sum of 2 or 3 numbers less than or equal to 100.\n    '''\n    sum_of_2_or_3 = 0\n    for i in range(1,101):\n        if is_sum_of_2_or_3(i):\n            sum_of_2_or_3 += i\n    return sum_of_2_or_3\n    \ndef find_sum_of_prime_less_than_1000():\n    '''\n    Find sum of prime numbers less than or equal to 1000.\n    '''\n    sum_of_prime = 0\n    for i in range(1,1001):\n        if is_sum_prime(i):\n            sum_of_prime += i\n    return sum_of_prime\n    \ndef find_sum_of_perrin_less_than_1000():\n    '''\n    Find sum of perrin numbers less than or equal to 1000.\n    '''\n    sum_of_perrin = 0\n    for i in range(1,1001):\n        if is_sum_perrin(i):\n            sum_of_perrin += i\n    return sum_of_perrin\n    \ndef find_sum_of_2_or_3_less_than_1000():\n    '''\n    Find sum of 2 or 3 numbers less than or equal to 1000.\n    '''\n    sum_of_2_or_3 = 0\n    for i in range(1,1001):\n        if is_sum_of_2_or_3(i):\n            sum_of_2_or_3 += i\n    return sum_of_2_or_3\n    \ndef main():\n    print(\"---------------------------------------------------------\")\n    print(\"Sum of perrin numbers less than or equal to 1000: \")\n    print(find_sum_of_perrin_less_than_1000())\n    print(\"---------------------------------------------------------\")\n    print(\"Sum of prime numbers less than or equal to 1000: \")\n    print(find_sum_of_prime_less_than_1000())\n    print(\"---------------------------------------------------------\")\n    print(\"Sum of 2 or 3 numbers less than or equal to 1000: \")\n    print(find_sum_of_2_or_3_less_than_1000())\n    print(\"---------------------------------------------------------\")\n    print(\"Sum of prime numbers less than or equal to 100: \")\n    print(find_sum_of_prime_less_than_100())\n    print(\"---------------------------------------------------------\")\n    print(\"Sum of perrin numbers less than or equal to 100: \")\n    print(find_sum_of_perrin_less_than_100())\n    print(\"---------------------------------------------------------\")\n    print(\"Sum of 2 or 3 numbers less than or equal to 100: \")\n    print(find_sum_of_2_or_3_less_than_100())\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n    print(\"---------------------------------------------------------\")\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    s = 0\n    for i in xrange(1,n+1):\n        s += (4*i**2 - 2)/i\n    return s\n    \n    \n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    # initialize a list of perrin numbers\n    p_numbers = [1]\n    \n    # calculate sum using for loop\n    for i in range(2, n + 1):\n        if i % 3 == 0 or i % 5 == 0:\n            p_numbers.append(p_numbers[-1] + i)\n    \n    # return sum of perrin numbers\n    return p_numbers[-1]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == l:\n        return [str]\n    else:\n        return extract_string(str[1:], l) + [str[0:l]]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for s in l:\n        res.append(s[:l])\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for idx, val in enumerate(l):\n        if idx < l:\n            print(val[:l])\n        else:\n            break\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    # iterate through the list and extract the substring\n    for str_val in str:\n        l.append(str_val[0:3])\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    result = []\n    for s in l:\n        result.append(s[:l])\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for s in str:\n        if len(s) >= l:\n            str_list.append(s)\n    return str_list\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str.join(l[:l])\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for i in range(len(l)):\n        res.append(str[:l[i]])\n        str = str[l[i]:]\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = ''\n    for c in text1:\n        if c.isspace():\n            pass\n        else:\n            text += c\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub('\\s','',text1)\n    print(text)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(' ', '', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # print text1\n    text1 = re.sub(' ', '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.strip()\n    return text2\n    \ndef remove_spaces(text1):\n    '''\n    Write a function to remove all the spaces from the given string.\n    '''\n    text2 = re.sub('\\s+','',text1)\n    return text2\n    \ndef remove_newlines(text1):\n    '''\n    Write a function to remove all the newlines from the given string.\n    '''\n    text2 = text1.replace('\\n','')\n    return text2\n    \ndef remove_chars(text1):\n    '''\n    Write a function to remove all the special characters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9]+','', text1)\n    return text2\n    \ndef convert_to_lowercase(text1):\n    '''\n    Write a function to convert the string to lowercase.\n    '''\n    text2 = text1.lower()\n    return text2\n    \ndef check_substring(text1):\n    '''\n    Write a function to check whether the given string is a substring of the given string.\n    '''\n    if text1 in text2:\n        return True\n    else:\n        return False\n    \ndef check_substring_case_insensitive(text1):\n    '''\n    Write a function to check whether the given string is a substring of the given string. Case insensitive.\n    '''\n    if text1.lower() in text2.lower():\n        return True\n    else:\n        return False\n    \ndef find_first_occurrence(text1):\n    '''\n    Write a function to find the first occurrence of the given string in the given string.\n    '''\n    text2 = text1.find(text1)\n    return text2\n    \ndef count_characters_without_whitespace(text1):\n    '''\n    Write a function to count the characters of the given string without whitespaces.\n    '''\n    text2 = remove_whitespaces(text1)\n    return len(text2)\n    \ndef count_characters_without_spaces(text1):\n    '''\n    Write a function to count the characters of the given string without spaces.\n    '''\n    text2 = remove_spaces(text1)\n    return len(text2)\n    \ndef count_characters_without_newline(text1):\n    '''\n    Write a function to count the characters of the given string without newlines.\n    '''\n    text2 = remove_newlines(text1)\n    return len(text2)\n    \ndef count_characters_without_special_characters(text1):\n    '''\n    Write a function to count the characters of the given string without special characters.\n    '''\n    text2 = remove_chars(text1)\n    return len(text2)\n    \ndef count_words_without_whitespace(text1):\n    '''\n    Write a function to count the words of the given string without whitespaces.\n    '''\n    text2 = remove_whitespaces(text1)\n    text3 = text2.split()\n    return len(text3)\n    \ndef count_words_without_spaces(text1):\n    '''\n    Write a function to count the words of the given string without spaces.\n    '''\n    text2 = remove_spaces(text1)\n    text3 = text2.split()\n    return len(text3)\n    \ndef count_words_without_newlines(text1):\n    '''\n    Write a function to count the words of the given string without newlines.\n    '''\n    text2 = remove_newlines(text1)\n    text3 = text2.split()\n    return len(text3)\n    \ndef count_words_without_special_characters(text1):\n    '''\n    Write a function to count the words of the given string without special characters.\n    '''\n    text2 = remove_chars(text1)\n    text3 = text2.split()\n    return len(text3)\n    \ndef find_first_word(text1):\n    '''\n    Write a function to find the first word of the given string.\n    '''\n    text2 = text1.split()\n    return text2[0]\n    \ndef find_first_word_case_insensitive(text1):\n    '''\n    Write a function to find the first word of the given string. Case insensitive.\n    '''\n    text2 = text1.lower().split()\n    return text2[0]\n    \ndef find_last_word(text1):\n    '''\n    Write a function to find the last word of the given string.\n    '''\n    text2 = text1.split()\n    return text2[-1]\n    \ndef find_last_word_case_insensitive(text1):\n    '''\n    Write a function to find the last word of the given string. Case insensitive.\n    '''\n    text2 = text1.lower().split()\n    return text2[-1]\n    \ndef find_nth_word(text1,n):\n    '''\n    Write a function to find the nth word of the given string.\n    '''\n    text2 = text1.split()\n    return text2[n-1]\n    \ndef find_nth_word_case_insensitive(text1,n):\n    '''\n    Write a function to find the nth word of the given string. Case insensitive.\n    '''\n    text2 = text1.lower().split()\n    return text2[n-1]\n    \ndef find_all_words(text1):\n    '''\n    Write a function to find all the words of the given string.\n    '''\n    text2 = text1.split()\n    return text2\n    \ndef find_all_words_case_insensitive(text1):\n    '''\n    Write a function to find all the words of the given string. Case insensitive.\n    '''\n    text2 = text1.lower().split()\n    return text2\n    \ndef find_all_words_without_whitespace(text1):\n    '''\n    Write a function to find all the words of the given string.\n    '''\n    text2 = remove_whitespaces(text1)\n    text3 = text2.split()\n    return text3\n    \ndef find_all_words_without_spaces(text1):\n    '''\n    Write a function to find all the words of the given string.\n    '''\n    text2 = remove_spaces(text1)\n    text3 = text2.split()\n    return text3\n    \ndef find_all_words_without_newline(text1):\n    '''\n    Write a function to find all the words of the given string.\n    '''\n    text2 = remove_newlines(text1)\n    text3 = text2.split()\n    return text3\n    \ndef find_all_words_without_special_characters(text1):\n    '''\n    Write a function to find all the words of the given string.\n    '''\n    text2 = remove_chars(text1)\n    text3 = text2.split()\n    return text3\n    \ndef find_all_words_without_special_characters_case_insensitive(text1):\n    '''\n    Write a function to find all the words of the given string. Case insensitive.\n    '''\n    text2 = remove_chars(text1)\n    text3 = text2.lower().split()\n    return text3\n    \ndef find_all_first_occurrences(text1):\n    '''\n    Write a function to find all the first occurrences of the given string in the given string.\n    '''\n    text2 = text1.find(text1)\n    return text2\n    \ndef find_all_first_occurrences_case_insensitive(text1):\n    '''\n    Write a function to find all the first occurrences of the given string in the given string. Case insensitive.\n    '''\n    text2 = text1.lower().find(text1.lower())\n    return text2\n    \ndef find_all_last_occurrences(text1):\n    '''\n    Write a function to find all the last occurrences of the given string in the given string.\n    '''\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(\" \", \"\", text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    t = str(text1)\n    t = t.replace(\" \", \"\")\n    return t\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' ', '', text1)\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    total_cost = sum(actual_cost)\n    if sale_amount > total_cost:\n        return sale_amount - total_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return (actual_cost - sale_amount)\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n    \nprint(loss_amount(200,1000))\nprint(loss_amount(200,500))\nprint(loss_amount(100,500))\nprint(loss_amount(200,500))\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost > sale_amount else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return (actual_cost - sale_amount)\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,(n/2)+1):\n        if (n % i == 0):\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    i = 1\n    while i < n :\n        if n%i == 0 :\n            if i%2 == 0 :\n                s = s + i\n        i = i + 1\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while n % 2 == 0 : \n        sum = sum + 2\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2) : \n        while n % i == 0 : \n            sum = sum + i \n            n = n / i \n    if n > 2 : \n        sum = sum + n \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n==0 :\n        return 0\n    elif n<0 :\n        return -1\n    elif n==1 :\n        return 0\n    else :\n        i=2\n        s=1\n        while i<=n :\n            if n%i==0 :\n                if i%2==0 :\n                    s=s+i\n                else :\n                    s=s-i\n            i=i+1\n        return s\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    if n <= 0 : \n        return sum\n    for i in range(2,n) : \n        if n % i == 0 :\n            if i % 2 == 0 :\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    if n % 2 == 0 :\n        sum += n/2\n    for i in range(3, int(math.sqrt(n)) + 1, 2) :\n        if n % i == 0 :\n            sum += i\n            sum += n/i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_ = 0\n    for i in range(2, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            if n/i == i :\n                sum_ = sum_ + i\n            else :\n                sum_ = sum_ + i + n/i\n    return sum_\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    Sum = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (i == 2) : \n                Sum += i\n            else : \n                Sum += i\n                Sum += n / i\n    return Sum\ndef findPerfect(n) : \n    '''\n    Write a python function to find the perfect number from the given number.\n    Perfect number is a number which is equal to the sum of factorial of all the \n    factors of the number.\n    '''\n    Sum = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            Sum += i \n    if (Sum == n) : \n        return True\n    else : \n        return False\ndef findPerfects(n) : \n    '''\n    Write a python function to find all the perfect numbers between a given number \n    and a given number.\n    '''\n    if (n == 1) : \n        return []\n    Sum = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            Sum += i\n    if (Sum == n) : \n        return [n]\n    else : \n        return []\ndef findPermutations(n, r) : \n    '''\n    Write a python function to find the permutations of a given string. \n    The function should return a list of all permutations of the given string.\n    '''\n    if (r == 0) : \n        return []\n    if (n == 0) : \n        return [[]]\n    permutations = []\n    for i in range(0, n) : \n        remaining_chars = n - i - 1\n        prefix = findPermutations(remaining_chars, r - 1)\n        for j in range(0, len(prefix)) : \n            permutations.append([i + 1] + prefix[j])\n    return permutations\ndef findPermutations1(n, r) : \n    '''\n    Write a python function to find the permutations of a given string. \n    The function should return a list of all permutations of the given string.\n    '''\n    if (r == 0) : \n        return []\n    if (n == 0) : \n        return [[]]\n    permutations = []\n    for i in range(0, n) : \n        remaining_chars = n - i - 1\n        prefix = findPermutations(remaining_chars, r - 1)\n        for j in range(0, len(prefix)) : \n            permutations.append([i + 1] + prefix[j])\n    return permutations\ndef findPermutations2(n, r) : \n    '''\n    Write a python function to find the permutations of a given string. \n    The function should return a list of all permutations of the given string.\n    '''\n    if (r == 0) : \n        return []\n    if (n == 0) : \n        return [[]]\n    permutations = []\n    for i in range(0, n) : \n        remaining_chars = n - i - 1\n        prefix = findPermutations(remaining_chars, r - 1)\n        for j in range(0, len(prefix)) : \n            permutations.append([i + 1] + prefix[j])\n    return permutations\ndef findPermutations3(n, r) : \n    '''\n    Write a python function to find the permutations of a given string. \n    The function should return a list of all permutations of the given string.\n    '''\n    if (r == 0) : \n        return []\n    if (n == 0) : \n        return [[]]\n    permutations = []\n    for i in range(0, n) : \n        remaining_chars = n - i - 1\n        prefix = findPermutations(remaining_chars, r - 1)\n        for j in range(0, len(prefix)) : \n            permutations.append([i + 1] + prefix[j])\n    return permutations\ndef permutations(n, r) : \n    '''\n    Write a python function to find the permutations of a given string. \n    The function should return a list of all permutations of the given string.\n    '''\n    if (n == r) : \n        return [n]\n    elif (n == 0) : \n        return []\n    permutations = []\n    for i in range(1, n + 1) : \n        remaining_chars = n - i\n        prefix = permutations(remaining_chars, r - 1)\n        for j in range(0, len(prefix)) : \n            permutations.append([i] + prefix[j])\n    return permutations\ndef permutations2(n, r) : \n    '''\n    Write a python function to find the permutations of a given string. \n    The function should return a list of all permutations of the given string.\n    '''\n    if (n == r) : \n        return [n]\n    elif (n == 0) : \n        return []\n    permutations = []\n    for i in range(1, n + 1) : \n        remaining_chars = n - i\n        prefix = permutations2(remaining_chars, r - 1)\n        for j in range(0, len(prefix)) : \n            permutations.append([i] + prefix[j])\n    return permutations\ndef permutations3(n, r) : \n    '''\n    Write a python function to find the permutations of a given string. \n    The function should return a list of all permutations of the given string.\n    '''\n    if (n == r) : \n        return [n]\n    elif (n == 0) : \n        return []\n    permutations = []\n    for i in range(1, n + 1) : \n        remaining_chars = n - i\n        prefix = permutations3(remaining_chars, r - 1)\n        for j in range(0, len(prefix)) : \n            permutations.append([i] + prefix[j])\n    return permutations\ndef permutations4(n, r) : \n    '''\n    Write a python function to find the permutations of a given string. \n    The function should return a list of all permutations of the given string.\n    '''\n    if (n == r) : \n        return [n]\n    elif (n == 0) : \n        return []\n    permutations = []\n    for i in range(1, n + 1) : \n        remaining_chars = n - i\n        prefix = permutations4(remaining_chars, r - 1)\n        for j in range(0, len(prefix)) : \n            permutations.append([i] + prefix[j])\n    return permutations\ndef findCombinations(n, r) : \n    '''\n    Write a python function to find the combinations of a given string. \n    The function should return a list of all combinations of the given string.\n    '''\n    if (r == 0) : \n        return [[]]\n    if (n == 0) : \n        return [[]]\n    combinations = []\n    for i in range(0, n) : \n        remaining_chars = n - i - 1\n        prefix = findCombinations(remaining_chars, r - 1)\n        for j in range(0, len(prefix)) : \n            combinations.append([i + 1] + prefix[j])\n    return combinations\ndef findCombinations1(n, r) : \n    '''\n    Write a python function to find the combinations of a given string. \n    The function should return a list of all combinations of the given string.\n    '''\n    if (r == 0) : \n        return [[]]\n    if (n == 0) : \n        return [[]]\n    combinations = []\n    for i in range(0, n) : \n        remaining_chars = n - i - 1\n        prefix = findCombinations1(remaining_chars, r - 1)\n        for j in range(0, len(prefix)) : \n            combinations.append([i + 1] + prefix[j])\n    retur"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    n_factors = []\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            n_factors.append(i)\n            n_factors.append(n / i)\n    n_factors.sort()\n    n_factors = list(set(n_factors))\n    total = 0\n    for i in n_factors : \n        if i % 2 == 0 : \n            total += i\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 1\n    for i in xrange(2, n/2+1) : \n        if n%i==0 :\n            if i%2==0 :\n                result = result + i\n    return result \n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    r = re.findall(r'\\b(z*)\\b', text)\n    if r:\n        return r\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b(.*z.*)\\b', text, re.IGNORECASE)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r\"\\b(?<![^a-z])(?<![^A-Z])(?<![^0-9]z)(?<![^A-Z0-9]z)(?<![^0-9]Z)(?<![^A-Za-z0-9]z)(?<![A-Za-z0-9]Z)(?<![A-Z0-9]Z)(?<![a-z0-9]z)(?<![A-Za-z0-9])(?<![a-zA-Z0-9])(?<![A-Za-z0-9])(?<![0-9]z)(?<![0-9])(?<![0-9]Z)(?<![0-9])(?<![A-Za-z0-9])(?<![a-zA-Z0-9])(?<![a-z0-9]Z)(?<![a-zA-Z0-9])(?<![a-z0-9]z)(?<![A-Za-z0-9])(?<![a-zA-Z0-9])(?<![0-9]z)(?<![A-Za-z0-9])(?<![a-z0-9]z)(?<![A-Za-z0-9])(?<![a-z0-9]z)(?<![A-Za-z0-9])(?<![0-9]z)(?<![A-Za-z0-9])(?<![a-z0-9]z)(?<![A-Za-z0-9])(?<![a-zA-Z0-9])(?<![a-z0-9]z)(?<![A-Za-z0-9])(?<![a-z0-9])(?<![A-Za-z0-9])(?<![a-z0-9]z)(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])(?<![A-Za-z0-9])z(?<![a-z0-9])("
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    patt = re.compile(r'\\w*z')\n    if patt.match(text):\n        print('Matched')\n    else:\n        print('Not Matched')\ntext_match_wordz('abczx')\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_z = re.search('[a-z]z', text)\n    if text_z is not None:\n        return text_z.group()\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*z\\w*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\bz\\w+',text)\nprint(text_match_wordz('The quick brown fox jumps over the lazy dog'))\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    result = re.search(r\"z+\", text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z_list = re.findall(r'\\b[z]+\\b', text)\n    print z_list\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'z\\w+',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing only lowercase letters\n    '''\n    match = re.search(r'[a-z]+',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    match = re.search(r'y\\w+',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_happend(text):\n    '''\n    Write a function that matches a word containing 'a' or 'p'\n    '''\n    match = re.search(r'[ap]+',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_happend_2(text):\n    '''\n    Write a function that matches a word containing 'a' or 'p' but not both\n    '''\n    match = re.search(r'[^ap]+',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_happend_3(text):\n    '''\n    Write a function that matches a word containing 'a' or 'p' but not both\n    '''\n    match = re.search(r'[^ap]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_not_start(text):\n    '''\n    Write a function that matches a word containing 'not' but not at the start\n    '''\n    match = re.search(r'\\Bnot',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4'\n    '''\n    match = re.search(r'[1234]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_2(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^1234]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_3(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^123]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_4(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^1234]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_5(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^12345]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_6(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^12345]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_7(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^1234567]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_8(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^12345678]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_9(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^123456789]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_10(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^12345678901]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_11(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^1234567890]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_12(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^1234567890]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_13(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^1234567890-]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_14(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^1234567890- ]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_15(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^1234567890 -]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_16(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^1234567890- ]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_17(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but not both\n    '''\n    match = re.search(r'[^1234567890 -]',text)\n    if match:\n        return match.group()\n    return 'Match Not Found'\n    \ndef text_match_number_18(text):\n    '''\n    Write a function that matches a word containing '1', '2', '3' or '4' but no"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    elif monthnum2 == 2:\n        if check_leapyear(year2):\n            return 29\n        else:\n            return 28\n    else:\n        if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        else:\n            return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return 31\n    elif monthnum2 in [4,6,9,11]:\n        return 30\n    else:\n        return 28\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 == 2:\n        if ((year%4 == 0 and year%100!= 0) or (year%400 == 0)):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            print 'The given month number is 31 days'\n        else:\n            print 'The given month number is not 31 days'\n    except Exception, e:\n        print 'Exception is:'+ e\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    import calendar\n    if calendar.isleap(year2):\n        return True\n    if (monthnum2 % 2 == 0 and (monthnum2 <= 31 and monthnum2 > 10)) or (monthnum2 % 2 == 1 and (monthnum2 <= 28 and monthnum2 > 9)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        print(monthnum2, \"month has 31 days.\")\n    else:\n        print(monthnum2, \"month has 30 days.\")\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return 31\n    elif monthnum2 in (4, 6, 9, 11):\n        return 30\n    else:\n        return 28\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print 'the month is in number, and the number is ',monthnum2\n    else:\n        print 'the month is in number, and the number is ',monthnum2\n        print 'The month is in number, but it does not have 31 days'\n        \ndef check_day_number(daynum2):\n    '''\n    Write a function to check whether the given day number is in the range of 1 to 31 or not.\n    '''\n    if daynum2 > 0 and daynum2 < 32:\n        print 'The day is in number, and the number is ',daynum2\n    else:\n        print 'The day is not in number, or the number is ',daynum2\n        print 'the day is not in range of 1 to 31'\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif (monthnum2 in range(1,13)) and (monthnum2 not in [1,3,5,7,8,10,12]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for item in stringlist:\n        newlist.append(item[::-1])\n    return newlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # First, we can do this with a one-line for loop:\n    #newlist = [i[::-1] for i in stringlist]\n    \n    # However, this might not be fast enough.\n    # We could use the reversed built-in function to reverse the strings:\n    newlist = [i[::-1] for i in stringlist[::-1]]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist_rev = [None] * len(stringlist)\n    for i in range(len(stringlist)):\n        stringlist_rev[i] = stringlist[len(stringlist)-1-i]\n    return stringlist_rev\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for i in stringlist:\n        reverse_list.append(i[::-1])\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for s in stringlist:\n        newlist.append(s[::-1])\n    return newlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(0, len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n    \ndef alternate_reverse(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values\n    and then alternate the odd and even indices in that list.\n    '''\n    for i in range(0, len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    for i in range(0, len(stringlist)):\n        if i % 2 == 1:\n            stringlist[i] = stringlist[i][::-1]\n        else:\n            stringlist[i] = stringlist[i]\n    return stringlist\n    \ndef rot_13(string):\n    '''\n    Write a function that accepts a string and performs the Caesar Cipher\n    encryption on it. The result is toggled between lower and upper case\n    letters.\n    '''\n    for i in range(0, len(string)):\n        if ord(string[i]) >= 65 and ord(string[i]) <= 90:\n            string[i] = chr((ord(string[i]) - 65 + 13) % 26 + 65)\n        elif ord(string[i]) >= 97 and ord(string[i]) <= 122:\n            string[i] = chr((ord(string[i]) - 97 + 13) % 26 + 97)\n    return string\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [value[::-1] for value in stringlist]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst)==0:\n        return \"List is empty\"\n    else:\n        min_length = lst[0][1]-lst[0][0]\n        min_index = 0\n        for i in range(1,len(lst)):\n            if lst[i][1]-lst[i][0]<min_length:\n                min_length = lst[i][1]-lst[i][0]\n                min_index = i\n        return lst[min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    index = 0\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            index = i\n    return index\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    sublist = lst[0]\n    for elem in lst:\n        if min_length > len(elem):\n            min_length = len(elem)\n            sublist = elem\n    return sublist\n    \ndef Find_Max(lst):\n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    max_length = len(lst[0])\n    sublist = lst[0]\n    for elem in lst:\n        if max_length < len(elem):\n            max_length = len(elem)\n            sublist = elem\n    return sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m=0\n    for i in range(len(lst)): \n        if len(lst[i])==0:\n            continue\n        if len(lst[i])<m:\n            m=len(lst[i])\n            min_index=i\n    return lst[min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    # the return is a list with min_length sublist\n    ret_list = []\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n            ret_list = [l]\n        elif len(l) == min_length:\n            ret_list.append(l)\n    return ret_list\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = lst[0]\n    n = len(lst)\n    for i in range(1, n):\n        if len(lst[i]) < len(m):\n            m = lst[i]\n    return m\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 1: \n        return lst[0]\n    else:\n        return lst[0] if len(lst[0]) < len(lst[1]) else lst[1]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) < 1:\n        return None\n    min_len = len(lst[0])\n    min_list = lst[0]\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n            min_list = item\n    return min_list\ndef Find_Max(lst):\n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    if len(lst) < 1:\n        return None\n    max_len = len(lst[0])\n    max_list = lst[0]\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    return max_list\ndef find_sublist(lst):\n    '''\n    Write a python function to find the sublist having the maximum length.\n    '''\n    if len(lst) < 1:\n        return None\n    max_len = len(lst[0])\n    max_list = lst[0]\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    min_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < len(min):\n            min = lst[i]\n            min_index = i\n    return (min_index)\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initializing minimum to first element\n    minimum = lst[0]\n    # Iterating the list\n    for i in lst: \n        # Finding the minimum\n        if i < minimum:\n            minimum = i \n    # Returning the minimum\n    return minimum\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    p=(a+b+c)/2\n    return (p*(p-a)*(p-b)*(p-c))**0.5\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return pi*(r**2)\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(l+b)\n    \ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return a+b+c\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*pi*r\n    \ndef circle_radius(a):\n    '''\n    Write a function to find the radius of a circle.\n    '''\n    return a/2\n    \ndef sqrt(a):\n    '''\n    Write a function to find the square root of a number.\n    '''\n    return a**0.5\n    \ndef cube_root(a):\n    '''\n    Write a function to find the cube root of a number.\n    '''\n    return a**(1/3)\n    \ndef exp(x):\n    '''\n    Write a function to find the exponential of a number.\n    '''\n    return x**x\n    \ndef natural_log(a):\n    '''\n    Write a function to find the natural logarithm of a number.\n    '''\n    return log(a)\n    \ndef log(a):\n    '''\n    Write a function to find the natural logarithm of a number.\n    '''\n    return log(a, e)\n    \ndef log2(a):\n    '''\n    Write a function to find the logarithm base 2 of a number.\n    '''\n    return log(a, 2)\n    \ndef log10(a):\n    '''\n    Write a function to find the logarithm base 10 of a number.\n    '''\n    return log(a, 10)\n    \ndef log_prime(a):\n    '''\n    Write a function to find the logarithm base 5 of a number.\n    '''\n    return log(a, 5)\n    \ndef power(a,b):\n    '''\n    Write a function to find the power of a number to another number.\n    '''\n    return a**b\n    \ndef f(x):\n    '''\n    Write a function to find the factorial of a number.\n    '''\n    return factorial(x)\n    \ndef fib(x):\n    '''\n    Write a function to find the value of the nth Fibonacci number.\n    '''\n    if x==1:\n        return 1\n    elif x==2:\n        return 1\n    else:\n        return fib(x-1)+fib(x-2)\n    \ndef mod(a,b):\n    '''\n    Write a function to find the remainder when a is divided by b.\n    '''\n    return a%b\n    \ndef collatz(a):\n    '''\n    Write a function to find the Collatz sequence of a number.\n    '''\n    x=[a]\n    while x[-1]!= 1:\n        if x[-1]%2 == 0:\n            x.append(x[-1]/2)\n        else:\n            x.append(3*x[-1] + 1)\n    return x\n    \ndef count_rec(s,n):\n    '''\n    Write a function to count the number of occurrences of a substring in a string.\n    '''\n    return s.count(n)\n    \ndef repeated_substring(s):\n    '''\n    Write a function to find the length of the longest substring in a string\n    that has no repeating characters.\n    '''\n    count = {}\n    start = 0\n    longest = 0\n    for i in range(len(s)):\n        if s[i] in count:\n            if count[s[i]] > start:\n                start = count[s[i]]\n        count[s[i]] = i\n        longest = max(longest, i-start+1)\n    return longest\n    \ndef palindrome(s):\n    '''\n    Write a function to find if a string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef how_many_letters(s):\n    '''\n    Write a function to count the number of letters in a string.\n    '''\n    return len(s)\n    \ndef is_a_num(s):\n    '''\n    Write a function to check if a string is a number or not.\n    '''\n    try:\n        float(s)\n        return True\n    except:\n        return False\n    \ndef is_pangram(s):\n    '''\n    Write a function to check if a string is a pangram or not.\n    '''\n    return len(set(s)) == 26\n    \ndef is_anagram(s,t):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    return sorted(s) == sorted(t)\n    \ndef is_palindrome_permutation(s):\n    '''\n    Write a function to check if a string is a permutation of a palindrome or not.\n    '''\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    count = 0\n    for key in char_count:\n        if char_count[key] % 2!= 0:\n            count += 1\n    if count <= 1:\n        return True\n    return False\n    \ndef is_mixed_case(s):\n    '''\n    Write a function to check if a string is a mixed case string or not.\n    '''\n    return len(set(s.lower())) == len(s)\n    \ndef is_mixed_case_permutation(s):\n    '''\n    Write a function to check if a string is a mixed case permutation of a palindrome or not.\n    '''\n    char_count = {}\n    for char in s.lower():\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    count = 0\n    for key in char_count:\n        if char_count[key] % 2!= 0:\n            count += 1\n    if count <= 1:\n        return True\n    return False\n    \ndef is_pandigital(s):\n    '''\n    Write a function to check if a string is a pandigital or not.\n    '''\n    return len(set(s)) == 10 and len(s) == 9 and s == ''.join(sorted(s))\n    \ndef is_pan_permutation(s):\n    '''\n    Write a function to check if a string is a pan permutation of a palindrome or not.\n    '''\n    char_count = {}\n    for char in s.lower():\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    count = 0\n    for key in char_count:\n        if char_count[key] % 2!= 0:\n            count += 1\n    if count <= 1:\n        return True\n    return False\n    \ndef is_plural(n):\n    '''\n    Write a function to check if a word is a plural or not.\n    '''\n    if n[-1] =='s':\n        return True\n    return False\n    \ndef is_perfect(n):\n    '''\n    Write a function to check if a number is perfect or not.\n    '''\n    return n == sum([int(i) for i in str(n)])\n    \ndef is_perfect_square(n):\n    '''\n    Write a functio"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #pass\n    if type(l)!= int or type(b)!= int:\n        raise Exception(\"Invalid data type\")\n    if l < 0 or b < 0:\n        raise Exception(\"Invalid data type\")\n    if l == 0 or b == 0:\n        return 0\n    return l * b\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if(str1==None):\n        return None\n    if(str1==\"\"):\n        return str1\n    if(type(str1)!=type(\"\")):\n        return None\n    str1=str1.replace(\" \",\"\")\n    l=len(str1)\n    st=\"\"\n    for i in range(l):\n        if(str1[i]!=str1[i].upper()):\n            st=st+str1[i]\n    return st\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str1 = str1[:i]+str1[i+1:]\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #my code\n    str2 = ''\n    for i in range(len(str1)):\n        if (str1[i].islower()):\n            str2 += str1[i]\n    print(str2)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]','', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(x for x in str1 if x.islower())\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    for i in range(len(l)):\n        if l[i].isupper():\n            l[i]=' '\n    return ''.join(l).split()\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    for i in range(len(l)):\n        if l[i].islower():\n            l[i]=' '\n    return ''.join(l).split()\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    for i in range(len(l)):\n        if l[i].isdigit():\n            l[i]=' '\n    return ''.join(l).split()\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    for i in range(len(l)):\n        if l[i] in '''!()-[]{};:'\"\\,<>./?@#$%^&*_~''':\n            l[i]=' '\n    return ''.join(l).split()\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    with open('stopwords.txt','r') as f:\n        stop_words=f.read().splitlines()\n    for i in range(len(l)):\n        if l[i] in stop_words:\n            l[i]=' '\n    return ''.join(l).split()\ndef upper_lower(str1):\n    '''\n    Write a function to swap the case of a string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    for i in range(len(l)):\n        if l[i].isupper():\n            l[i]=l[i].lower()\n        elif l[i].islower():\n            l[i]=l[i].upper()\n    return ''.join(l).split()\ndef digit_remove(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    for i in range(len(l)):\n        if l[i].isdigit():\n            l[i]=' '\n    return ''.join(l).split()\ndef replace_digit(str1):\n    '''\n    Write a function to replace all digits from a given string with characters\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    for i in range(len(l)):\n        if l[i].isdigit():\n            l[i]='*'\n    return ''.join(l).split()\ndef reverse(str1):\n    '''\n    Write a function to reverse a given string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    return ''.join(l[::-1]).split()\ndef replace_words(str1):\n    '''\n    Write a function to replace all characters of a given string with another\n    string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    l[:]='%s' %l[0]\n    l[1:]=''.join(l[1:])\n    return ''.join(l).split()\ndef palindrome(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    if l[:]==l[::-1]:\n        return True\n    else:\n        return False\ndef index_of_first_occurance(str1):\n    '''\n    Write a function to return the index of the first occurance of a given string\n    in a given string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    l.reverse()\n    for i in range(len(l)):\n        if l[i] in l[:i]:\n            return i\n    return'string does not exist'\ndef index_of_last_occurance(str1):\n    '''\n    Write a function to return the index of the last occurance of a given string\n    in a given string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    l.reverse()\n    for i in range(len(l)):\n        if l[i] in l[:i]:\n            return i\n    return'string does not exist'\ndef count_occurance(str1):\n    '''\n    Write a function to count the occurance of a given string in a given string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    c=0\n    for i in range(len(l)):\n        if l[i] in l[:i]:\n            c+=1\n    return c\ndef string_permutation(str1):\n    '''\n    Write a function to return all the permutations of a given string.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError('Enter string only')\n    l=list(str1)\n    l.sort()\n    l1=list()\n    for i in range(len(l)):\n        l1.append(l[:i]+l[i+1:]+l[i:i+1])\n    return l1\ndef factorial(n):\n    '''\n    Write a function to return the factorial of a given number.\n    '''\n    if not isinstance(n,int):\n        raise TypeError('Enter integer only')\n    if n<0:\n        raise ValueError('Factorial cannot be calculated for negative numbers')\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef gcd(a,b):\n    '''\n    Write a function to return the greatest common divisor of two numbers.\n    '''\n    if not isinstance(a,int) or not isinstance(b,int):\n        raise TypeError('Enter integer only')\n    if a<0 or b<0:\n        raise ValueError('GCD cannot be calculated for negative numbers')\n    if a==0:\n        return b\n    if b==0:\n        return a\n    if a>b:\n        return gcd(a-b,b)\n    else:\n        return gcd(a,b-a)\ndef mcd(a,b):\n    '''\n    Write a function to return the least common divisor of two numbers.\n    '''\n    if not isinstance(a,int) or not isinstance(b,int):\n        raise TypeError('Enter integer only')\n    if a<0 or b<0:\n        raise ValueError('GCD cannot be calculated for negative numbers')\n    if a==0:\n        return b\n    if b==0:\n        return a\n    if a>b:\n        return mcd(a-b,b)\n    else:\n    "
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_string = str1.upper()\n    return new_string\ndef remove_string(str1,str2):\n    '''\n    Write a function to remove the characters of a given string which are present in another given string.\n    '''\n    new_string = re.sub(str2,\"\",str1)\n    return new_string\ndef count_word_occurence(str1,word):\n    '''\n    Write a function to count the number of occurence of a given word in a given string.\n    '''\n    count = len(re.findall(word,str1))\n    return count\ndef get_captial_word(str1):\n    '''\n    Write a function to get all the captial words in a given string.\n    '''\n    return re.findall('[A-Z]+',str1)\ndef get_lower_word(str1):\n    '''\n    Write a function to get all the lower case words in a given string.\n    '''\n    return re.findall('[a-z]+',str1)\ndef is_pangram(str1):\n    '''\n    Write a function to check whether a given string is a pangram or not.\n    '''\n    return set(get_lower_word(str1)) >= set(get_lower_word('abcdefghijklmnopqrstuvwxyz'))\ndef is_pangram(str1,string):\n    '''\n    Write a function to check whether a given string is a pangram or not.\n    '''\n    string = string.lower()\n    return set(string) >= set(get_lower_word(string))\ndef is_pangram(str1,string):\n    '''\n    Write a function to check whether a given string is a pangram or not.\n    '''\n    string = string.lower()\n    return set(string) >= set(get_lower_word(string))\ndef count_vowels(str1):\n    '''\n    Write a function to count the vowels present in a given string.\n    '''\n    return len(re.findall('[aeiouAEIOU]',str1))\ndef count_consonants(str1):\n    '''\n    Write a function to count the consonants present in a given string.\n    '''\n    return len(re.findall('[^aeiouAEIOU]',str1))\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_pa"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        res.append(i[0])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # initializing an empty list\n    new_lst = [] \n    # Traversing the given list\n    for ele in lst: \n        new_lst.append(ele[0]) \n    return new_lst \ndef main():\n    print('\\n\\nENTER THE LIST OF LISTS')\n    print('Enter one list at a time')\n    print('For eg: [1,2,3,4],[5,6,7,8]')\n    lst = []\n    for i in range(4):\n        lst.append([int(x) for x in input().split()])\n    # for i in range(len(lst)):\n    #     print(lst[i])\n    # Calling the Function \n    lst = Extract(lst)\n    print('THE FIRST ELEMENT OF EACH OF THE LIST IS:')\n    for i in lst:\n        print(i)\nmain()"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x: x[0], lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_el = []\n    for i in lst:\n        first_el.append(i[0])\n    return first_el\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_element = lambda x: x[0]\n    first_element_list = list(map(first_element, lst))\n    return first_element_list\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = [item[0] for item in lst]\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [s[0] for s in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[0])\n    return lst1\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    n = 0\n    for i in str:\n        if i.isupper():\n            n+=1\n    return n\ndef check_duplicate(lst):\n    '''\n    Write a python function to check if there are any duplicate elements in the given list.\n    '''\n    return len(lst)==len(set(lst))\ndef check_triplets(arr,val):\n    '''\n    Write a python function to check if there is a triplet in the list that sums up to the given value.\n    '''\n    if not arr:\n        return False\n    if val%2!=0:\n        return False\n    s = val//2\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]==s:\n                return True\n    return False\ndef check_decomposit(lst,N):\n    '''\n    Write a python function to check if a given number can be decomposed into sum of other numbers from the given list.\n    '''\n    if not lst:\n        return False\n    if N%len(lst)!=0:\n        return False\n    return check_triplets(lst,N)\ndef count_digits(lst):\n    '''\n    Write a python function to count the number of digits in the given list.\n    '''\n    s = 0\n    for i in lst:\n        s+=len(str(i))\n    return s\ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if not n:\n        return 1\n    return n*factorial(n-1)\ndef sum_of_squares(lst):\n    '''\n    Write a python function to compute the sum of the squares of all the elements of a given list.\n    '''\n    s = 0\n    for i in lst:\n        s+=i*i\n    return s\ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef binary_search(lst,val):\n    '''\n    Write a python function to find the index of the given element in the list.\n    '''\n    n = len(lst)\n    if val>lst[-1]:\n        return n\n    if val<lst[0]:\n        return 0\n    if n==1:\n        return 0 if lst[0]!=val else 1\n    left = 0\n    right = n-1\n    mid = (left+right)//2\n    while left<=right:\n        if lst[mid]==val:\n            return mid\n        elif lst[mid]>val:\n            right = mid-1\n        else:\n            left = mid+1\n        mid = (left+right)//2\n    return -1\ndef fact_digits(n):\n    '''\n    Write a python function to count the number of digits in the factorial of a given number.\n    '''\n    s = 0\n    while n:\n        s+=1\n        n//=10\n    return s\ndef check_anagram(str1,str2):\n    '''\n    Write a python function to check if two given strings are anagrams of each other or not.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    return sorted(str1)==sorted(str2)\ndef check_palindrome(str):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    return str==str[::-1]\ndef find_permutation(str1,str2):\n    '''\n    Write a python function to find the permutation of a given string.\n    '''\n    if len(str1)!=len(str2):\n        return -1\n    lst = [0]*128\n    for i in str1:\n        lst[ord(i)]+=1\n    for i in str2:\n        lst[ord(i)]-=1\n    for i in range(128):\n        if lst[i]!=0:\n            return -1\n    return str1+str2\ndef check_rotation(str1,str2):\n    '''\n    Write a python function to check if two given strings are a rotation of each other or not.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    return str2 in str1+str1\ndef check_sorted(lst):\n    '''\n    Write a python function to check if a given list is sorted or not.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i]>lst[i+1]:\n            return False\n    return True\ndef string_compression(str):\n    '''\n    Write a python function to compress a given string.\n    '''\n    n = len(str)\n    i = 0\n    for j in range(n):\n        if j!=0 and str[j]==str[j-1]:\n            continue\n        else:\n            while j<n and str[j]==str[i]:\n                j+=1\n            i+=1\n            str[i:j]=[str[i-1]]*(j-i+1)\n    return ''.join(str)\ndef check_permutation(str1,str2):\n    '''\n    Write a python function to check if two given strings are a permutation of each other or not.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    d = {}\n    for i in str1:\n        if i not in d:\n            d[i]=0\n        d[i]+=1\n    for i in str2:\n        if i not in d:\n            return False\n        d[i]-=1\n        if d[i]<0:\n            return False\n    for i in d:\n        if d[i]!=0:\n            return False\n    return True\ndef check_repetition(str1,str2):\n    '''\n    Write a python function to check if two given strings are identical or not.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    return str2 in (str1+str1)\ndef find_repeated(lst):\n    '''\n    Write a python function to find the repeated elements in the given list.\n    '''\n    n = len(lst)\n    for i in range(n):\n        if lst[i]==lst[i-1] and i!=n-1:\n            return lst[i]\n    return -1\ndef binary_search_iterative(lst,val):\n    '''\n    Write a python function to find the index of the given element in the list.\n    '''\n    if not lst:\n        return -1\n    left = 0\n    right = len(lst)-1\n    while left<=right:\n        mid = (left+right)//2\n        if val>lst[mid]:\n            left = mid+1\n        elif val<lst[mid]:\n            right = mid-1\n        else:\n            return mid\n    return -1\ndef sort_by_heigth(lst):\n    '''\n    Write a python function to sort a list by heigth.\n    '''\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[j][1]>lst[i][1]:\n                temp = lst[j]\n                lst[j]=lst[i]\n                lst[i]=temp\n    return lst\ndef maximum_heigth(lst):\n    '''\n    Write a python function to find the maximum height of a stack of plates.\n    '''\n    if not lst:\n        return 0\n    return max(lst)\ndef get_permutation(str1,str2):\n    '''\n    Write a python function to find the permutation of a given string.\n    ''"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr = ctr + 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    return sum(1 for c in str if c.islower())\n    \ndef get_word_count(str):\n    '''\n    Write a python function to count the number of words in a string.\n    '''\n    return len(str.split())\n    \ndef get_letters(str):\n    '''\n    Write a python function to count the number of distinct letters in a string.\n    '''\n    return len(set(str))\n    \ndef get_vowels(str):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    return sum(1 for c in str if c in 'aeiouAEIOU')\n    \ndef get_consonants(str):\n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    return sum(1 for c in str if c not in 'aeiouAEIOU')\n    \ndef is_pangram(str):\n    '''\n    Write a python function to determine if a string is a pangram. \n    A pangram is a sentence that contains every letter of the alphabet at least once. \n    '''\n    return len(set(str)) == 26\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a python function to determine if two strings are an anagram of each other. \n    An anagram is a word or phrase that is formed by rearranging the letters of a different word or phrase.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef get_anagrams(str):\n    '''\n    Write a python function to get anagrams of a string.\n    '''\n    return sorted(set([s for s in set(str) if sorted(s) == sorted(str)]))\n    \ndef get_digits(str):\n    '''\n    Write a python function to get the sum of the digits in a given string.\n    '''\n    return sum(int(c) for c in str if c.isdigit())\n    \ndef count_vowels(str):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    return len(re.findall(r'[aeiouAEIOU]', str))\n    \ndef count_consonants(str):\n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    return len(re.findall(r'[^aeiouAEIOU]', str))\n    \ndef count_words(str):\n    '''\n    Write a python function to count the number of words in a string.\n    '''\n    return len(str.split())\n    \ndef count_lines(str):\n    '''\n    Write a python function to count the number of lines in a string.\n    '''\n    return len(str.splitlines())\n    \ndef is_palindrome(str):\n    '''\n    Write a python function to determine if a string is a palindrome.\n    '''\n    return str == str[::-1]\n    \ndef is_pallindrome(str):\n    '''\n    Write a python function to determine if a string is a pallindrome.\n    '''\n    return str[::-1] == str\n    \ndef is_rotation(str1, str2):\n    '''\n    Write a python function to determine if a string is a rotation of another string.\n    '''\n    return str2 in str1 + str1\n    \ndef is_substring(str1, str2):\n    '''\n    Write a python function to determine if a string is a substring of another string.\n    '''\n    return str2 in str1\n    \ndef split_to_lines(str):\n    '''\n    Write a python function to split a string into lines.\n    '''\n    return str.splitlines()\n    \ndef replace_chars(str, old, new):\n    '''\n    Write a python function to replace characters in a string.\n    '''\n    return str.replace(old, new)\n    \ndef get_bigrams(str):\n    '''\n    Write a python function to get the bigrams of a string.\n    '''\n    return [str[i:i+2] for i in range(len(str) - 1)]\n    \ndef get_trigrams(str):\n    '''\n    Write a python function to get the trigrams of a string.\n    '''\n    return [str[i:i+3] for i in range(len(str) - 2)]\n    \ndef get_quadgrams(str):\n    '''\n    Write a python function to get the quadgrams of a string.\n    '''\n    return [str[i:i+4] for i in range(len(str) - 3)]\n    \ndef get_ngrams(str, n):\n    '''\n    Write a python function to get the ngrams of a string.\n    '''\n    return [str[i:i+n] for i in range(len(str) - n + 1)]\n    \ndef get_vowels_n_cons(str):\n    '''\n    Write a python function to get the count of vowels, consonants and digits in a string.\n    '''\n    vowels, cons, nums = 0, 0, 0\n    for c in str:\n        if c in 'aeiouAEIOU':\n            vowels += 1\n        elif c in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ':\n            cons += 1\n        elif c.isdigit():\n            nums += 1\n    return vowels, cons, nums\n    \ndef get_unique_words(str):\n    '''\n    Write a python function to get the unique words in a string.\n    '''\n    return len(set(str.split()))\n    \ndef get_unique_characters(str):\n    '''\n    Write a python function to get the unique characters in a string.\n    '''\n    return len(set(str))\n    \ndef count_uppercase(str):\n    '''\n    Write a python function to count the number of uppercase characters in a string.\n    '''\n    return sum(1 for c in str if c.isupper())\n    \ndef count_lowercase(str):\n    '''\n    Write a python function to count the number of lowercase characters in a string.\n    '''\n    return sum(1 for c in str if c.islower())\n    \ndef count_numbers(str):\n    '''\n    Write a python function to count the number of numbers in a string.\n    '''\n    return sum(1 for c in str if c.isdigit())\n    \ndef count_punctuation(str):\n    '''\n    Write a python function to count the number of punctuation characters in a string.\n    '''\n    return sum(1 for c in str if not c.isalnum())\n    \ndef count_spaces(str):\n    '''\n    Write a python function to count the number of spaces in a string.\n    '''\n    return str.count(' ')\n    \ndef count_lines(str):\n    '''\n    Write a python function to count the number of lines in a string.\n    '''\n    return len(str.splitlines())\n    \ndef count_chars(str):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    return len(str)\n    \ndef count_vowels(str):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    return len(re.findall(r'[aeiouAEIOU]', str))\n    \ndef count_consonants(str):\n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    return len(re.findall(r'[^aeiouAEIOU]', str))\n    \ndef count_words(str):\n    '''\n    Write a python function to count the number o"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    up = 0\n    for i in str:\n        if i.isupper():\n            up = up+1\n    return up\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if not isinstance(str, str):\n        return 0\n    else:\n        return len([c for c in str if c.isupper()])\n    \ndef is_pangram(str1, alphabet = 'abcdefghijklmnopqrstuvwxyz'):\n    '''\n    Write a python function to check whether a string is pangram or not. \n    A pangram (Greek:\u03c0\u03b1\u03bd \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1, pan gramma, \"every letter\") or \n    pangram (English:the quick brown fox jumps over the lazy dog) \n    is a sentence that uses every letter of the alphabet at least once.\n    '''\n    if str1 == '':\n        return False\n    if len(str1) > 26:\n        return False\n    else:\n        return all(l in str1.lower() for l in alphabet)\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if not str:\n        return 0\n    return sum(1 for c in str if c.isupper())\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    if not str:\n        return 0\n    return sum(1 for c in str if c.islower())\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lower_ctr=0\n    for i in str:\n        if i.isupper():\n            lower_ctr=lower_ctr+1\n    return lower_ctr\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return [[]]\n    sub_combinations = combinations_list(list1[1:])\n    result = []\n    for l in sub_combinations:\n        result.append([list1[0]] + l)\n    return result + sub_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1)==0:\n        return []\n    if len(list1)==1:\n        return [list1]\n    for i in range(len(list1)):\n        list2 = list1[:i]+list1[i+1:]\n        for j in combinations_list(list2):\n            result.append([list1[i]]+j)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    for i in combinations(list1, 2):\n        print(i)\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations_with_replacement\n    l = len(list1)\n    a = []\n    for i in range(1,l):\n        a.append(list(combinations_with_replacement(list1,i)))\n    return a\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1,2))\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 1:\n        return [[]]\n    \n    list2 = combinations_list(list1[1:])\n    list3 = []\n    for i in list2:\n        list3.append(i)\n    for i in list2:\n        newlist = list(i)\n        newlist.append(list1[0])\n        list3.append(newlist)\n    \n    return list3\n    \n    \ndef permutations_list(list1):\n    '''\n    Write a function to find all possible permutations of a list of objects.\n    '''\n    if len(list1) <= 1:\n        return [[]]\n    \n    list2 = permutations_list(list1[1:])\n    list3 = []\n    for i in list2:\n        list3.append(i)\n    for i in list2:\n        newlist = list(i)\n        newlist.append(list1[0])\n        list3.append(newlist)\n    \n    return list3\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    list2 = []\n    for a in list1:\n        for b in combinations_list(list1[1:]):\n            list2.append([a] + b)\n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    combinations_list_helper(0, list1, [], result)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        newlist = []\n        for i in xrange(1, len(list1)):\n            newlist += combinations_list(list1[i:])\n            newlist += combinations_list(list1[:i])\n        return newlist\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    sums = [0] * (len(arr) + 1)\n    sums[0] = arr[0]\n    for i in xrange(1, len(arr) + 1):\n        sums[i] = sums[i - 1] + arr[i - 1]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    left = [0] * n\n    right = [0] * n\n    left[0] = 1\n    right[n - 1] = 1\n    for i in range(1, n):\n        if arr[i - 1] < 0:\n            left[i] = 1\n        else:\n            left[i] = left[i - 1] * arr[i - 1]\n    for i in range(n - 2, -1, -1):\n        if arr[i + 1] < 0:\n            right[i] = 1\n        else:\n            right[i] = right[i + 1] * arr[i + 1]\n    max_prod = -sys.maxint\n    for i in range(n):\n        max_prod = max(max_prod, left[i] * right[i])\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    s = [0 for i in range(n)]\n    s[0] = arr[0]\n    m = arr[0]\n    for i in range(1, n):\n        s[i] = max(s[i - 1] * arr[i], arr[i])\n        m = max(m, s[i])\n    return m\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return None\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def max_crossing_subarray(arr, low, high):\n        '''\n        function to find the maximum cross-subarray with the given subarray.\n        '''\n        if low > high:\n            return [], -float('inf')\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0] * arr[1], arr[0] * arr[2], arr[1] * arr[2])\n    m = max(arr[0], arr[1])\n    m2 = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        m2 = max(m * arr[i], m2 * arr[i], arr[i])\n        m = max(m, m2)\n    return m\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    maximum = arr[0]\n    for i in range(len(arr)):\n        # result = max(result, arr[i], arr[i] * arr[i])\n        temp = arr[i]\n        # result = max(result, arr[i], arr[i] * arr[i])\n        for j in range(i+1, len(arr)):\n            temp *= arr[j]\n            if temp > maximum:\n                maximum = temp\n    return maximum\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    current_max = arr[0]\n    current_min = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > current_max:\n            current_max = arr[i]\n        if arr[i] < current_min:\n            current_min = arr[i]\n        max_so_far = max(current_max * arr[i], current_min * arr[i], max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr: return 0\n    max_ending, max_so_far = arr[0], arr[0]\n    for num in arr[1:]:\n        max_ending = max(max_ending*num, num)\n        max_so_far = max(max_so_far, max_ending)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_ending_here, min_ending_here = 1, 1\n    max_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            temp = max_ending_here\n            max_ending_here = min_ending_here\n            min_ending_here = temp\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not isinstance(dict, dict):\n        raise ValueError(\"input is not a dictionary\")\n    values = set([])\n    for k,v in dict.items():\n        values.add(v)\n    if len(values)!= 1:\n        raise ValueError(\"values do not have the same value\")\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict.values():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict.values():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not len(set(dict.values())) == 1:\n        return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) > 1:\n        return all(dict[k] == dict[list(dict)[0]] for k in dict)\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in dict.values():\n        if i == n:\n            count += 1\n    return count == len(dict)\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.iteritems():\n        if value == '':\n            del dict1[key]\n        elif isinstance(value, dict):\n            drop_empty(value)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:dict1[key] for key in dict1 if dict1[key]!= {} and dict1[key]!= []}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return { k:v for k,v in dict1.items() if v!= [] }\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    drop_empty_dict = {key:val for key, val in dict1.items() if val!= ''}\n    return drop_empty_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.pop(\"\",None)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {x:y for x,y in dict1.items() if y!= ''}\n    \ndef drop_duplicate(dict1):\n    '''\n    Write a function to remove duplicate items from a given dictionary.\n    '''\n    return {x:y for x,y in dict1.items() if y not in dict1.values()}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {k:v for k,v in dict1.items() if v!=''}\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = {k:v for k,v in dict1.items() if v}\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    left = [0]*n\n    right = [0]*n\n    left[0] = 1\n    right[n-1] = 1\n    for i in xrange(1,n):\n        if arr[i] < arr[i-1]:\n            left[i] = left[i-1]*arr[i]\n        else:\n            left[i] = 1\n    for j in xrange(n-2,-1,-1):\n        if arr[j] < arr[j+1]:\n            right[j] = right[j+1]*arr[j]\n        else:\n            right[j] = 1\n    for k in xrange(n):\n        max_product = max(max_product, left[k]*right[k])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #Two pointers\n    #Time Complexity: O(n)\n    #Space Complexity: O(1)\n    '''\n    In the algorithm, we have two pointers, left and right, pointing to the next index of the array.\n    We calculate the product of the elements between left and right.\n    If the product is positive, we update the result.\n    If the product is negative, we move left pointer to the next element, and move right pointer to the next element.\n    In the end, we return the result.\n    '''\n    if len(arr)==0:\n        return 0\n    max_prod=arr[0]\n    left=0\n    right=len(arr)-1\n    while left<right:\n        if arr[left]*arr[right]>0:\n            max_prod=max(max_prod,arr[left]*arr[right])\n            left+=1\n        else:\n            right-=1\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    res = 1\n    for i in range(1, len(arr)):\n        res *= max(arr[i], arr[i]*arr[i-1])\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # arr = [10,3,1,4,2]\n    # we need to keep track of the max product so far in the \"first\" index\n    max_product_arr = [None for i in range(len(arr))]\n    max_product_arr[0] = arr[0]\n    for i in range(1, len(arr)):\n        max_product_arr[i] = arr[i] * max_product_arr[i-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # arr.sort()\n    # n = len(arr)\n    # for i in xrange(n - 2):\n    #     if arr[i]!= arr[i + 1] or arr[i]!= arr[i + 2]:\n    #         print arr[i], arr[i + 1], arr[i + 2]\n    #         max_product = max(max_product, arr[i] * arr[i + 1] * arr[i + 2])\n    # return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Convert to list of integers\n    arr = [int(x) for x in arr]\n    #if len(arr) == 0: return 0\n    #if len(arr) == 1: return arr[0]\n    #if len(arr) == 2: return max(arr[0] * arr[1], arr[1] * arr[0])\n    \n    # If sequence is all negatives, return 0\n    if max(arr) < 0:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    \n    # idea is to do this in 2 loops, each one starting at 0 and 1 of the array\n    # if the current element is greater than the previous, we have to add the previous to the current products\n    # if the current element is less than the previous, we have to substract the previous from the current products\n    # \n    # then we increment/decrement the counters accordingly to find the maximum product\n    # \n    # this can be done in O(n) time as well\n    \n    # we have to keep track of the min_product and max_product, if the current element is greater than the max_product, we update it\n    # if the current element is less than the min_product, we update it\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > max_product:\n            max_product = arr[i]\n        \n        if arr[i] < min_product:\n            min_product = arr[i]\n            \n    # print(max_product, min_product)\n    \n    # now we find the max_product\n    max_product_so_far = 1\n    \n    for i in range(1, n):\n        \n        # we have to make sure that the current element is greater than the previous, and we also need to substract the previous from the current products\n        \n        if arr[i] > max_product:\n            max_product_so_far = max_product_so_far * arr[i]\n        \n        # we have to make sure that the current element is less than the previous, and we also need to add the previous to the current products\n        \n        if arr[i] < min_product:\n            max_product_so_far = max_product_so_far * min_product\n        \n        # we have to substract the previous from the current products\n        \n        if arr[i] > min_product:\n            min_product = arr[i]\n            \n        # we have to add the previous to the current products\n        \n        if arr[i] < max_product:\n            max_product = arr[i]\n        \n    # print(max_product_so_far)\n    \n    return max_product_so_far\n    \ndef max_product_stack(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    \n    # idea is to do this in 2 loops, each one starting at 0 and 1 of the array\n    # if the current element is greater than the previous, we have to add the previous to the current products\n    # if the current element is less than the previous, we have to substract the previous from the current products\n    # \n    # then we increment/decrement the counters accordingly to find the maximum product\n    # \n    # this can be done in O(n) time as well\n    \n    # we have to keep track of the min_product and max_product, if the current element is greater than the max_product, we update it\n    # if the current element is less than the min_product, we update it\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    \n    for i in range(1, n):\n        \n        # we have to make sure that the current element is greater than the previous, and we also need to substract the previous from the current products\n        \n        if arr[i] > max_product:\n            max_product = arr[i]\n        \n        # we have to make sure that the current element is less than the previous, and we also need to add the previous to the current products\n        \n        if arr[i] < min_product:\n            min_product = arr[i]\n            \n        # we have to substract the previous from the current products\n        \n        if arr[i] > min_product:\n            max_product = max_product * min_product\n        \n        # we have to add the previous to the current products\n        \n        if arr[i] < max_product:\n            min_product = arr[i]\n            \n    # print(max_product, min_product)\n    \n    # now we find the max_product\n    max_product_so_far = 1\n    \n    for i in range(1, n):\n        \n        # we have to make sure that the current element is greater than the previous, and we also need to substract the previous from the current products\n        \n        if arr[i] > max_product:\n            max_product_so_far = max_product_so_far * arr[i]\n        \n        # we have to make sure that the current element is less than the previous, and we also need to add the previous to the current products\n        \n        if arr[i] < min_product:\n            max_product_so_far = max_product_so_far * min_product\n        \n    # print(max_product_so_far)\n    \n    return max_product_so_far\n    "
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n<=3:\n        return 0\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for l in range(2,n):\n        for i in range(n-l):\n            j = i+l\n            if l == 2:\n                dp[i][j] = arr[i]*arr[j]\n            else:\n                dp[i][j] = max(dp[i+1][j]+arr[i]*arr[j], dp[i][j-1]+arr[i]*arr[j])\n    return dp[0][n-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # O(n) time\n    # O(n) space\n    # return [2,6,9,2,3,4,5,7,10,18,23,36,54,76,91,98,101]\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    else:\n        return max(max_product(arr[0:len(arr)]),max_product(arr[1:len(arr)]),max_product_of_arr_of_size_three(arr))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n    return test_tup[0] + test_tup[1] + add_pairwise(test_tup[1:])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if not test_tup:\n        return\n    if len(test_tup) < 2:\n        return\n    for i in range(len(test_tup)):\n        if i == 0:\n            add_pairwise(test_tup[i+1:])\n        elif i == len(test_tup) - 1:\n            add_pairwise(test_tup[:i])\n        else:\n            add_pairwise(test_tup[:i] + test_tup[i+1:])\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for i in range(len(test_tup)-1):\n        print test_tup[i]+test_tup[i+1]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n_tup = [0] * len(test_tup)\n    for i in range(len(test_tup) - 1):\n        n_tup[i] = test_tup[i] + test_tup[i+1]\n    return n_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i] + test_tup[i+1])\n    return tuple(res)\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    add_list = []\n    for i in range(len(test_tup) - 1):\n        add_list.append(test_tup[i] + test_tup[i+1])\n    return tuple(add_list)\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup) - 1))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(a+b for a,b in zip(test_tup[0:],test_tup[1:]))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in xrange(0, len(test_tup)):\n        if i < len(test_tup) - 1:\n            result.append(test_tup[i] + test_tup[i+1])\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x, y: (x*y) % n, arr)\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr_prod = 1\n    for x in arr:\n        arr_prod = (arr_prod*x)%n\n    return arr_prod\n    \ndef find_sum(arr, n):\n    '''\n    Write a python function to find the sum of the array multiplication modulo n.\n    '''\n    arr_sum = 0\n    for x in arr:\n        arr_sum = (arr_sum + x)%n\n    return arr_sum\n    \ndef find_product(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr_prod = 1\n    for x in arr:\n        arr_prod = (arr_prod*x)%n\n    return arr_prod\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr)==0:\n        return 0\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res = res * i % n\n    return res \n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = (prod * num) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Your Code Here\n    result = 1\n    for i in arr:\n        result *= i\n        result %= n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # initializing result\n    prod = 1\n    for i in range(len(arr)):\n        prod = (prod*arr[i])%n\n    return prod\ndef find_product(arr, n): \n    '''\n    Write a python function to find the product of the array modulo n.\n    '''\n    # initializing result\n    prod = 1\n    for i in range(len(arr)):\n        prod = (prod*arr[i])%n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    r = 1\n    for i in arr:\n        r = (r * i) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in range(len(arr)): \n        res = (res * arr[i]) % n \n    return res \n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(1, len(l)):\n            if l[i] - l[i-1]!= 1:\n                return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==1:\n        return True\n    if l[0]==l[1]-1:\n        return check_Consecutive(l[1:])\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if l[i+1]==l[i]+1:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    print \"check_Consecutive() output:\"\n    if len(l) > 0:\n        print \"list is non-empty\"\n        print \"result of first element is:\", l[0], \"and last element is:\", l[-1]\n        print \"checking if result of consecutive is true or not...\"\n        if l[0] == 1:\n            print \"result is true: the result of consecutive is true\"\n        else:\n            print \"result is false: the result of consecutive is false\"\n        print \"number of elements in list:\", len(l)\n        print \"checking if consecutive is true or not...\"\n        if (len(l) == 2) and (l[0] + 1 == l[1]):\n            print \"result is true: consecutive is true\"\n        else:\n            print \"result is false: consecutive is false\"\n    else:\n        print \"list is empty\"\n    return\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i=0\n    while i < len(l)-1:\n        if l[i] == l[i+1] - 1:\n            i +=1\n            continue\n        else:\n            break\n    return i\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=[]\n    for i in range(len(l)):\n        if l[i] not in l1:\n            l1.append(l[i])\n        else:\n            break\n    if len(l1)==len(l):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 1\n    if len(l) > 1:\n        for i in xrange(len(l)-1):\n            if l[i] + 1!= l[i+1]:\n                count = 0\n                break\n    if count == 1:\n        print \"list is consecutive\"\n    else:\n        print \"list is not consecutive\"\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    res = True\n    for i in range(1,len(l)):\n        if l[i] - l[i-1]!= 1:\n            res = False\n    return res\n    \ndef check_array_balanced(arr):\n    '''\n    Write a python function to check whether the given array is balanced or not. An array is said to be balanced if the sum of its left part and right part are equal.\n    '''\n    if len(arr) < 2:\n        return True\n    elif len(arr) == 2:\n        return arr[0] == arr[1]\n    else:\n        return (check_array_balanced(arr[:len(arr)//2]) and check_array_balanced(arr[len(arr)//2:]))\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    d = 1\n    for i in range(len(l)-1):\n        if l[i]+1!= l[i+1]:\n            d = 0\n            break\n    return d\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(0, n):\n        if i < n - 1:\n            if (l[i + 1] - l[i] == 1):\n                print \"True\"\n                return \"True\"\n            else:\n                print \"False\"\n                return \"False\"\n        else:\n            print \"False\"\n            return \"False\"\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # need to convert to set for set intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n    \n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == 0 or len(test_list2) == 0:\n        return []\n    \n    test_map = {}\n    for e1 in test_list1:\n        for e2 in test_list2:\n            tup = (e1, e2)\n            if tup not in test_map:\n                test_map[tup] = 1\n    return test_map.keys()\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for elem1 in test_list1:\n        for elem2 in test_list2:\n            if elem1 == elem2:\n                new_list.append(elem1)\n    return new_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection_list.append(i)\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n    \ndef tup_op(test_tuple):\n    '''\n    Write a function to replace a string with another string or a number.\n    '''\n    return test_tuple[0], test_tuple[1]*2\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple1_len = len(test_list1)\n    tuple2_len = len(test_list2)\n    tuple_list = []\n    for i in range(0, tuple1_len):\n        for j in range(0, tuple2_len):\n            if test_list1[i] == test_list2[j]:\n                tuple_list.append(test_list1[i])\n                break\n    return tuple_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    ret = []\n    for elem in test_list1:\n        if elem in test_list2:\n            ret.append(elem)\n    return ret\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == 0 and len(test_list2) == 0:\n        return None\n    elif len(test_list1) == 0:\n        return None\n    elif len(test_list2) == 0:\n        return None\n    else:\n        return set(test_list1).intersection(test_list2)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result=''\n    for c in str1:\n        if c==ch:\n            result=result+newch\n        else:\n            result=result+c\n    return result\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #newstring = ''.join(str1.split(ch))\n    newstring = str1.replace(ch,newch)\n    return newstring\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if len(ch) > 1:\n        return replace_char(str1.replace(ch[0],newch[0]),ch[1:],newch[1:])\n    else:\n        return str1.replace(ch[0],newch[0])\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for s in str1:\n        if s==ch:\n            str2+=newch\n        else:\n            str2+=s\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    s2 = ''\n    for c in str1:\n        if c == ch:\n            s2 += newch\n        else:\n            s2 += c\n    return s2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch in str1:\n        newstr1 = str1.replace(ch,newch)\n        return newstr1\n    else:\n        return str1\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Method 1\n    # dict1 = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1=sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    if not dict1:\n        return dict1\n    temp=[]\n    for key,value in dict1.iteritems():\n        temp.append((value,key))\n    temp.sort()\n    temp.reverse()\n    return {v:k for k,v in temp}\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key = lambda x:x[1],reverse=True)\ndef read_file(file):\n    '''\n    Reads file line by line and returns list of lines.\n    '''\n    with open(file, 'r') as my_file:\n        return my_file.readlines()\ndef modify_file(file,new_file):\n    '''\n    Reads file line by line and creates new_file with lines modified.\n    '''\n    with open(file,'r') as my_file, open(new_file,'w') as new_file:\n        for line in my_file:\n            new_file.write(line.strip('\\n'))\n            new_file.write('\\n')\ndef count_words(file):\n    '''\n    Counts each word in file and returns a dictionary with word and count.\n    '''\n    my_words = read_file(file)\n    my_words = ''.join(my_words)\n    my_words = my_words.lower()\n    my_words = my_words.split()\n    my_words = [word for word in my_words if word.isalpha()]\n    return Counter(my_words)\ndef count_words_above_n(file,n):\n    '''\n    Counts each word in file and returns a dictionary with word and count.\n    '''\n    my_words = read_file(file)\n    my_words = ''.join(my_words)\n    my_words = my_words.lower()\n    my_words = my_words.split()\n    my_words = [word for word in my_words if word.isalpha()]\n    return Counter(my_words)\ndef get_all_words_from_file(file):\n    '''\n    Reads file line by line and returns list of all words.\n    '''\n    my_file = read_file(file)\n    my_words = ''.join(my_file)\n    my_words = my_words.lower()\n    my_words = my_words.split()\n    return my_words\ndef count_words_above_n_from_file(file,n):\n    '''\n    Reads file line by line and returns list of all words.\n    '''\n    my_file = read_file(file)\n    my_words = ''.join(my_file)\n    my_words = my_words.lower()\n    my_words = my_words.split()\n    my_words = [word for word in my_words if word.isalpha()]\n    return Counter(my_words)\ndef get_all_words_above_n(file,n):\n    '''\n    Reads file line by line and returns list of all words.\n    '''\n    my_file = read_file(file)\n    my_words = ''.join(my_file)\n    my_words = my_words.lower()\n    my_words = my_words.split()\n    return [word for word in my_words if word.isalpha() and len(word)>n]\ndef get_all_words_from_file_above_n(file,n):\n    '''\n    Reads file line by line and returns list of all words.\n    '''\n    my_file = read_file(file)\n    my_words = ''.join(my_file)\n    my_words = my_words.lower()\n    my_words = my_words.split()\n    return [word for word in my_words if word.isalpha() and len(word)>n]\ndef remove_punctuation(text):\n    '''\n    Reads file line by line and returns list of all words.\n    '''\n    text = text.replace('-',' ')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('.','')\n    text = text.replace(',',' ')\n    text = text.replace('--',' ')\n    text = text.replace('?',' ')\n    text = text.replace('!',' ')\n    text = text.replace('\\'s','')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace(';','')\n    text = text.replace('\\'','')\n    text = text.replace('\u2019','')\n    text = text.replace('\u2018','')\n    text = text.replace('\"','')\n    text = text.replace('\u201c','')\n    text = text.replace('\u201d','')\n    text = text.replace('-','')\n    text = text.replace('\\r','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('*','')\n    text = text.replace('`','')\n    text = text.replace('_','')\n    return text\ndef get_all_words_from_file_no_punctuation(file):\n    '''\n    Reads file line by line and returns list of all words.\n    '''\n    my_file = read_file(file)\n    my_words = ''.join(my_file)\n    my_words = my_words.lower()\n    my_words = my_words.split()\n    return [word for word in my_words if word.isalpha()]\ndef remove_punctuation_from_file(file):\n    '''\n    Reads file line by line and returns list of all words.\n    '''\n    my_file = read_file(file)\n    my_words = ''.join(my_file)\n    my_words = my_words.replace('-',' ')\n    my_words = my_words.replace('\\n','')\n    my_words = my_words.replace('\\t','')\n    my_words = my_words.replace('.','')\n    my_words = my_words.replace(',',' ')\n    my_words = my_words.replace('--',' ')\n    my_words = my_words.replace('?',' ')\n    my_words = my_words.replace('!',' ')\n    my_words = my_words.replace('\\'s','')\n    my_words = my_words.replace('(',' ')\n    my_words = my_words.replace(')',' ')\n    my_words = my_words.replace(';','')\n    my_words = my_words.replace('\\'','')\n    my_words = my_words.replace('\u2019','')\n    my_words = my_words.replace('\u2018','')\n    my_words = my_words.replace('\"','')\n    my_words = my_words.replace('\u201c','')\n    my_words = my_words.replace('\u201d','')\n    my_words = my_words.replace('-','')\n    my_words = my_words.replace('\\r','')\n    my_words = my_words.replace('\\n','')\n    my_words = my_words.replace('\\t','')\n    my_words = my_words.replace('*','')\n    my_words = my_words.replace('`','')\n    my_words = my_words.replace('_','')\n    return my_words\ndef remove_punctuation_from_file_above_n(file,n):\n    '''\n    Reads file line by line and returns list of all words.\n    '''\n    my_file = read_file(file)\n    my_words = ''.join(my_file)\n    my_words = my_words.replace('-',' ')\n    my_words = my_words.replace('\\n','')\n    my_words = my_words.replace('\\t','')\n    my_words = my_words.replace('.','')\n    my_words = my_words.replace(',',' ')\n    my_words = my_words.replace('--',' ')\n    my_words = my_words.replace('?',' ')\n    my_words = my_words.replace('!',' ')\n    my_words = my_words.replace('\\'s','')\n    my_words = my_word"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::2])\n    \ndef find_the_duplicate(nums):\n    '''\n    Write a python function to find the duplicate number in an array.\n    '''\n    s = set(nums)\n    for i in s:\n        if nums.count(i) > 1:\n            return i\n    \ndef compare_version(version1, version2):\n    '''\n    Compare two versions lexicographically.\n    '''\n    return cmp(int(version1.split('.')[0]), int(version2.split('.')[0])) or cmp(int(version1.split('.')[1]), int(version2.split('.')[1])) or cmp(int(version1.split('.')[2]), int(version2.split('.')[2]))\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check if two strings are anagrams of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef binary_search(alist, item):\n    '''\n    Write a python function to search a sorted array for an item.\n    '''\n    first = 0\n    last = len(alist) - 1\n    found = False\n    while first <= last and not found:\n        midpoint = (first + last) // 2\n        if alist[midpoint] == item:\n            found = True\n        else:\n            if item < alist[midpoint]:\n                last = midpoint - 1\n            else:\n                first = midpoint + 1\n    return found\n    \ndef quick_sort(alist):\n    '''\n    Write a python function to implement quick sort.\n    '''\n    quick_sort_helper(alist, 0, len(alist)-1)\n    \ndef quick_sort_helper(alist, first, last):\n    if first < last:\n        splitpoint = partition(alist, first, last)\n        quick_sort_helper(alist, first, splitpoint-1)\n        quick_sort_helper(alist, splitpoint+1, last)\n    \ndef partition(alist, first, last):\n    pivotvalue = alist[first]\n    leftmark = first + 1\n    rightmark = last\n    done = False\n    while not done:\n        while leftmark <= rightmark and alist[leftmark] <= pivotvalue:\n            leftmark = leftmark + 1\n        while alist[rightmark] >= pivotvalue and rightmark >= leftmark:\n            rightmark = rightmark - 1\n        if rightmark < leftmark:\n            done = True\n        else:\n            temp = alist[leftmark]\n            alist[leftmark] = alist[rightmark]\n            alist[rightmark] = temp\n    temp = alist[first]\n    alist[first] = alist[rightmark]\n    alist[rightmark] = temp\n    return rightmark\n    \ndef merge_sort(alist):\n    '''\n    Write a python function to implement merge sort.\n    '''\n    mergesort_helper(alist, 0, len(alist)-1)\n    \ndef mergesort_helper(alist, first, last):\n    if first < last:\n        splitpoint = partition(alist, first, last)\n        mergesort_helper(alist, first, splitpoint-1)\n        mergesort_helper(alist, splitpoint+1, last)\n    \ndef partition(alist, first, last):\n    pivotvalue = alist[first]\n    leftmark = first + 1\n    rightmark = last\n    done = False\n    while not done:\n        while leftmark <= rightmark and alist[leftmark] <= pivotvalue:\n            leftmark = leftmark + 1\n        while alist[rightmark] >= pivotvalue and rightmark >= leftmark:\n            rightmark = rightmark - 1\n        if rightmark < leftmark:\n            done = True\n        else:\n            temp = alist[leftmark]\n            alist[leftmark] = alist[rightmark]\n            alist[rightmark] = temp\n    temp = alist[first]\n    alist[first] = alist[rightmark]\n    alist[rightmark] = temp\n    return rightmark\n    \ndef count_inversion(alist):\n    '''\n    Write a python function to implement counting sort.\n    '''\n    counting_sort_helper(alist, max(alist))\n    \ndef counting_sort_helper(alist, maxvalue):\n    output = [0] * len(alist)\n    count = [0] * (maxvalue + 1)\n    for i in alist:\n        count[i] += 1\n    for i in range(1, maxvalue + 1):\n        count[i] += count[i-1]\n    for i in range(len(alist)-1, -1, -1):\n        output[count[alist[i]] - 1] = alist[i]\n        count[alist[i]] -= 1\n    for i in range(len(alist)):\n        alist[i] = output[i]\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef fibonacci(n):\n    '''\n    Write a python function to compute the nth fibonacci number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef fibonacci_memo(n, d):\n    '''\n    Write a python function to compute the nth fibonacci number.\n    '''\n    if n in d:\n        return d[n]\n    else:\n        ans = fibonacci_memo(n-1, d) + fibonacci_memo(n-2, d)\n        d[n] = ans\n        return ans\n    \ndef fibonacci_dp(n, d):\n    '''\n    Write a python function to compute the nth fibonacci number.\n    '''\n    for i in range(2, n+1):\n        d[i] = d[i-1] + d[i-2]\n    return d[n]\n    \ndef count_rotations(s):\n    '''\n    Write a python function to determine the number of rotations of a string.\n    '''\n    l = len(s)\n    if l < 2:\n        return 0\n    for i in range(l//2):\n        if s[i]!= s[l-i-1]:\n            return i\n    return l\n    \ndef left_rotate(s, n):\n    '''\n    Write a python function to rotate a string to the left.\n    '''\n    return s[n:] + s[:n]\n    \ndef right_rotate(s, n):\n    '''\n    Write a python function to rotate a string to the right.\n    '''\n    return s[-n:] + s[:-n]\n    \ndef get_permutations(s):\n    '''\n    Write a python function to get all the permutations of a string.\n    '''\n    perms = []\n    helper(s, \"\", perms)\n    return perms\n    \ndef helper(s, perm, perms):\n    if len(s) == 0:\n        perms.append(perm)\n    else:\n        for i in range(len(s)):\n            helper(s[:i] + s[i+1:], perm + s[i], perms)\n        \ndef get_permutations_helper(s, perm, perms):\n    if len(s) == 0:\n        perms.append(perm)\n    else:\n        for i in range(len(s)):\n            get_permutations_helper(s[:i] + s[i+1:], perm + s[i], perms)\n    \ndef get_permutations_recursion(s):\n    '''\n    Write a python function to get all the permutations of a string.\n    '''\n    perms = []\n    permutate(s, \"\", perms)\n    return perms\n    \ndef permutate(s, perm, perms):"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = None\n    largest = None\n    if len(nums) == 0:\n        return None\n    else:\n        for num in nums:\n            if smallest is None or num < smallest:\n                smallest = num\n            if largest is None or num > largest:\n                largest = num\n        return smallest + largest\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n    "
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # return string.lower()\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]','',str1)\ndef get_square_sum(str1):\n    '''\n    Write a function that calculates the square of the sum of all the integers in a string.\n    '''\n    a = 0\n    for i in range(len(str1)):\n        a += int(str1[i])\n    return a*a\ndef get_square_difference(str1):\n    '''\n    Write a function that calculates the square of the difference between the maximum and minimum integers in a string.\n    '''\n    a = 0\n    for i in range(len(str1)):\n        a += int(str1[i])\n    return (a*a) - (max(a,int(str1[0])))**2\ndef get_sum_of_squares(str1):\n    '''\n    Write a function to calculate the sum of the squares of the integers in a string.\n    '''\n    a = 0\n    for i in range(len(str1)):\n        a += int(str1[i])**2\n    return a\ndef get_diff_of_squares(str1):\n    '''\n    Write a function to calculate the difference of the squares of the integers in a string.\n    '''\n    a = 0\n    for i in range(len(str1)):\n        a += int(str1[i])**2\n    return a - get_sum_of_squares(str1)\ndef get_largest_palindrome(str1):\n    '''\n    Write a function that finds the largest palindrome made from the product of two integers.\n    '''\n    a = 1\n    b = 1\n    for i in range(len(str1)):\n        a *= int(str1[i])\n        b *= int(str1[len(str1)-i-1])\n    if a == b:\n        return a\n    return max(a,b)\ndef get_smallest_palindrome(str1):\n    '''\n    Write a function that finds the smallest palindrome made from the product of two integers.\n    '''\n    a = 1\n    b = 1\n    for i in range(len(str1)):\n        a *= int(str1[i])\n        b *= int(str1[len(str1)-i-1])\n    if a == b:\n        return a\n    return min(a,b)\ndef get_pallindrome_product(str1):\n    '''\n    Write a function that finds the product of the first and last integer in a string.\n    '''\n    return int(str1[0]) * int(str1[len(str1)-1])\ndef get_pallindrome_sum(str1):\n    '''\n    Write a function that finds the sum of the integers in a string, which is a palindrome.\n    '''\n    a = 0\n    for i in range(len(str1)):\n        a += int(str1[i])\n    return a\ndef get_sum_of_bigram_diffs(str1):\n    '''\n    Write a function that finds the sum of the difference between the sums of the two words in a string.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(str1)-1):\n        a += int(str1[i])\n        b += int(str1[i+1])\n    return a-b\ndef get_count_of_vowels(str1):\n    '''\n    Write a function that counts the number of vowels in a string.\n    '''\n    a = 0\n    for i in range(len(str1)):\n        if str1[i] in 'aeiou':\n            a += 1\n    return a\ndef get_count_of_consonants(str1):\n    '''\n    Write a function that counts the number of consonants in a string.\n    '''\n    a = 0\n    for i in range(len(str1)):\n        if str1[i] not in 'aeiou':\n            a += 1\n    return a\ndef get_sum_of_vowel_diffs(str1):\n    '''\n    Write a function that finds the sum of the difference between the sums of the two words in a string.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(str1)-1):\n        a += int(str1[i])\n        b += int(str1[i+1])\n    return a-b\ndef get_sum_of_vowel_diffs_1(str1):\n    '''\n    Write a function that finds the sum of the difference between the sums of the two words in a string.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(str1)-1):\n        if str1[i] in 'aeiou':\n            a += int(str1[i])\n        if str1[i+1] in 'aeiou':\n            b += int(str1[i+1])\n    return a-b\ndef get_sum_of_consonant_diffs(str1):\n    '''\n    Write a function that finds the sum of the difference between the sums of the two words in a string.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(str1)-1):\n        if str1[i] not in 'aeiou':\n            a += int(str1[i])\n        if str1[i+1] not in 'aeiou':\n            b += int(str1[i+1])\n    return a-b\ndef get_smallest_even_bigger_than(str1):\n    '''\n    Write a function that finds the smallest integer greater than an integer in a string.\n    '''\n    for i in range(len(str1)):\n        if int(str1[i]) % 2 == 0:\n            return int(str1[i])\n    return -1\ndef get_biggest_even_smaller_than(str1):\n    '''\n    Write a function that finds the largest integer less than an integer in a string.\n    '''\n    for i in range(len(str1)-1,-1,-1):\n        if int(str1[i]) % 2 == 0:\n            return int(str1[i])\n    return -1\ndef get_anagram_string(str1, str2):\n    '''\n    Write a function that determines whether two strings are anagrams.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    a = sorted(str1)\n    b = sorted(str2)\n    return a == b\ndef get_all_anagrams(str1):\n    '''\n    Write a function that finds all the anagrams of a string.\n    '''\n    a = []\n    for i in range(len(str1)):\n        if sorted(str1[i:i+len(str1)]) in a:\n            pass\n        else:\n            a.append(sorted(str1[i:i+len(str1)]))\n    return a\ndef get_all_permutations(str1):\n    '''\n    Write a function that finds all the permutations of a string.\n    '''\n    a = []\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            a.append(str1[i:j+1])\n    return a\ndef get_all_substrings(str1):\n    '''\n    Write a function that finds all the substrings in a string.\n    '''\n    a = []\n    for i in range(len(str1)):\n        for j in range(i,len(str1)):\n            a.append(str1[i:j+1])\n    return a\ndef get_all_substrings_with_size(str1, size):\n    '''\n    Write a function that finds all the substrings of a string that have a given size.\n    '''\n    a = []\n    for i in range(len(str1)-size+1):\n        a.append(str1[i:i+size])\n    return a\ndef get_number_of_substrings(str1, size):\n    '''\n    Write a function tha"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if not str1:\n        return ''\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i].isupper():\n            str1 = str1[:i] + str1[j+1:]\n            j = j - 1\n        else:\n            i = i + 1\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # convert the str1 to list\n    list1 = list(str1)\n    # store the result\n    res = ''\n    # traverse the list\n    for i in range(len(list1)):\n        # if the current character is lower case\n        if list1[i].islower():\n            # get the next upper case letter\n            list1[i] = list1[i+1]\n    # convert the list to string\n    res = ''.join(list1)\n    return res\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=re.sub(r'[a-z]','',str1)\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    str1=re.sub(r'\\d','',str1)\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    str1=re.sub(r'\\d','',str1)\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    str1=re.sub(r'[^\\w\\s]','',str1)\n    return str1\ndef remove_whitespaces(str1):\n    '''\n    Write a function to remove whitespace from a given string.\n    '''\n    str1=re.sub(r'\\s','',str1)\n    return str1\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    stopwords=['a','an','the','and','or','to','in','of','on','is','to','it']\n    str1=str1.split()\n    new_str1=[]\n    for word in str1:\n        if word.lower() not in stopwords:\n            new_str1.append(word.lower())\n    new_str1=' '.join(new_str1)\n    return new_str1\ndef to_lowercase(str1):\n    '''\n    Write a function to convert the entire string to lowercase.\n    '''\n    str1=str1.lower()\n    return str1\ndef to_uppercase(str1):\n    '''\n    Write a function to convert the entire string to uppercase.\n    '''\n    str1=str1.upper()\n    return str1\ndef replace_characters(str1):\n    '''\n    Write a function to replace characters from a given string.\n    '''\n    str1=str1.replace('a','4')\n    str1=str1.replace('b','8')\n    str1=str1.replace('e','3')\n    str1=str1.replace('h','9')\n    str1=str1.replace('i','1')\n    str1=str1.replace('l','1')\n    str1=str1.replace('o','0')\n    str1=str1.replace('s','5')\n    str1=str1.replace('t','7')\n    str1=str1.replace('u','6')\n    str1=str1.replace('w','2')\n    str1=str1.replace('y','3')\n    return str1\ndef count_vowels(str1):\n    '''\n    Write a function to count the vowels in a given string.\n    '''\n    vowels=['a','e','i','o','u']\n    count=0\n    for word in str1:\n        if word.lower() in vowels:\n            count+=1\n    return count\ndef count_consonants(str1):\n    '''\n    Write a function to count the consonants in a given string.\n    '''\n    consonants=['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z']\n    count=0\n    for word in str1:\n        if word.lower() not in consonants:\n            count+=1\n    return count\ndef count_capital_letters(str1):\n    '''\n    Write a function to count the capital letters in a given string.\n    '''\n    count=0\n    for word in str1:\n        if word[0].isupper():\n            count+=1\n    return count\ndef count_lowercase_letters(str1):\n    '''\n    Write a function to count the lowercase letters in a given string.\n    '''\n    count=0\n    for word in str1:\n        if word[0].islower():\n            count+=1\n    return count\ndef count_numbers(str1):\n    '''\n    Write a function to count the numbers in a given string.\n    '''\n    count=0\n    for word in str1:\n        if word.isdigit():\n            count+=1\n    return count\ndef count_alphabets(str1):\n    '''\n    Write a function to count the alphabets in a given string.\n    '''\n    count=0\n    for word in str1:\n        if word.isalpha():\n            count+=1\n    return count\ndef count_other_characters(str1):\n    '''\n    Write a function to count the other characters in a given string.\n    '''\n    count=0\n    for word in str1:\n        if not word.isdigit() and not word.isalpha():\n            count+=1\n    return count\ndef count_characters(str1):\n    '''\n    Write a function to count the characters in a given string.\n    '''\n    count=0\n    for word in str1:\n        count+=1\n    return count\ndef find_longest_word(str1):\n    '''\n    Write a function to find the longest word in a given string.\n    '''\n    words=str1.split()\n    max_len=0\n    for word in words:\n        if len(word)>max_len:\n            max_len=len(word)\n    return max_len\ndef find_shortest_word(str1):\n    '''\n    Write a function to find the shortest word in a given string.\n    '''\n    words=str1.split()\n    min_len=len(words[0])\n    for word in words:\n        if len(word)<min_len:\n            min_len=len(word)\n    return min_len\ndef find_longest_sentence(str1):\n    '''\n    Write a function to find the longest sentence in a given string.\n    '''\n    sents=str1.split('.')\n    max_len=0\n    for sent in sents:\n        if len(sent)>max_len:\n            max_len=len(sent)\n    return max_len\ndef find_shortest_sentence(str1):\n    '''\n    Write a function to find the shortest sentence in a given string.\n    '''\n    sents=str1.split('.')\n    min_len=len(sents[0])\n    for sent in sents:\n        if len(sent)<min_len:\n            min_len=len(sent)\n    return min_len\ndef count_punctuations(str1):\n    '''\n    Write a function to count the punctuations in a given string.\n    '''\n    punctuations=['!','@','#','$','%','^','&','*','(',')','[',']','{','}',';',':','=','+','_','<','>','?']\n    count=0\n    for word in str1:\n        if word in punctuations:\n            count+=1\n    return count\ndef count_unique_words(str1):\n    '''\n    Write a function to count the unique words in a given string.\n    '''\n    unique_words=[]\n    words=str1.split()\n    for word in words:\n        if word not in unique_words:\n            unique_words.append(word)\n    return len(unique_words)\ndef count_words(str1):\n    '''\n    Write a function to count the words in a given string.\n    '''\n    return len(str1.split())\ndef count_lines(str1):\n    '''\n    Write a function to count the lines in a given string.\n    '''\n    return len(str1.split('\\n'))\ndef count_spaces(str1):\n    '''\n    Write a function to count the spaces in a given string.\n    '''\n    return len(str1.split(' '))\ndef count_spaces_tabs(str1):\n    '''\n    Write a function to count the spaces and tabs in a given string.\n    '''\n    retur"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]','',str1)\n    return str1\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]','',str1)\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    str1 = re.sub(r'[0-9]','',str1)\n    return str1\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    str1 = re.sub(r'[\\s]','',str1)\n    return str1\ndef remove_symbols(str1):\n    '''\n    Write a function to remove symbols from a given string.\n    '''\n    str1 = re.sub(r'[!@#$%^&*()]','',str1)\n    return str1\ndef remove_character(str1,char):\n    '''\n    Write a function to remove a character from a given string.\n    '''\n    str1 = re.sub(char,'',str1)\n    return str1\ndef count_characters(str1):\n    '''\n    Write a function to count the number of characters in a given string.\n    '''\n    str1 = len(str1)\n    return str1\ndef remove_string(str1,remove_str):\n    '''\n    Write a function to remove a substring from a given string.\n    '''\n    str1 = re.sub(remove_str,'',str1)\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    str1 = re.sub(r'[0-9]','',str1)\n    return str1\ndef remove_words(str1,remove_word):\n    '''\n    Write a function to remove a word from a given string.\n    '''\n    str1 = re.sub(remove_word,'',str1)\n    return str1\ndef remove_all_occurances(str1,remove_str):\n    '''\n    Write a function to remove all occurances of a substring from a given string.\n    '''\n    str1 = re.sub(remove_str,'',str1)\n    return str1\ndef remove_one_occurance(str1,remove_str):\n    '''\n    Write a function to remove first occurance of a substring from a given string.\n    '''\n    str1 = re.sub(remove_str,'',str1)\n    return str1\ndef replace_word(str1,old_str,new_str):\n    '''\n    Write a function to replace a substring from a given string.\n    '''\n    str1 = re.sub(old_str,new_str,str1)\n    return str1\ndef replace_digit(str1,old_str,new_str):\n    '''\n    Write a function to replace a substring from a given string.\n    '''\n    str1 = re.sub(old_str,new_str,str1)\n    return str1\ndef replace_char(str1,old_str,new_str):\n    '''\n    Write a function to replace a substring from a given string.\n    '''\n    str1 = re.sub(old_str,new_str,str1)\n    return str1\ndef replace_substr(str1,old_str,new_str):\n    '''\n    Write a function to replace a substring from a given string.\n    '''\n    str1 = re.sub(old_str,new_str,str1)\n    return str1\ndef add_string(str1,new_str):\n    '''\n    Write a function to add a substring from a given string.\n    '''\n    str1 = re.sub(new_str,'',str1)\n    str1 = new_str + str1\n    return str1\ndef repeat_substring(str1,old_str,new_str):\n    '''\n    Write a function to replace a substring from a given string.\n    '''\n    str1 = re.sub(old_str,new_str,str1)\n    str1 = new_str + str1\n    return str1\ndef add_to_end(str1,new_str):\n    '''\n    Write a function to add a substring from a given string.\n    '''\n    str1 = re.sub(str1,'',str1)\n    str1 = str1 + new_str\n    return str1\ndef add_to_start(str1,new_str):\n    '''\n    Write a function to add a substring from a given string.\n    '''\n    str1 = new_str + str1\n    return str1\ndef add_to_middle(str1,new_str):\n    '''\n    Write a function to add a substring from a given string.\n    '''\n    str1 = re.sub(str1,'',str1)\n    str1 = str1 + new_str\n    return str1\ndef remove_string(str1,remove_str):\n    '''\n    Write a function to remove a substring from a given string.\n    '''\n    str1 = re.sub(remove_str,'',str1)\n    return str1\ndef remove_all(str1,remove_str):\n    '''\n    Write a function to remove all occurances of a substring from a given string.\n    '''\n    str1 = re.sub(remove_str,'',str1)\n    return str1\ndef remove_one(str1,remove_str):\n    '''\n    Write a function to remove first occurance of a substring from a given string.\n    '''\n    str1 = re.sub(remove_str,'',str1)\n    return str1\ndef replace(str1,old_str,new_str):\n    '''\n    Write a function to replace a substring from a given string.\n    '''\n    str1 = re.sub(old_str,new_str,str1)\n    return str1\ndef replace_all(str1,old_str,new_str):\n    '''\n    Write a function to replace all occurances of a substring from a given string.\n    '''\n    str1 = re.sub(old_str,new_str,str1)\n    return str1\ndef replace_substr(str1,old_str,new_str):\n    '''\n    Write a function to replace a substring from a given string.\n    '''\n    str1 = re.sub(old_str,new_str,str1)\n    return str1\ndef split_string(str1,split_str):\n    '''\n    Write a function to split a string into a list of strings.\n    '''\n    return str1.split(split_str)\ndef split_string_by_max_occurance(str1,split_str,max_occurance):\n    '''\n    Write a function to split a string into a list of strings.\n    '''\n    split_str_list = re.split(split_str,str1)\n    str_list = []\n    for i in range(len(split_str_list)):\n        if(i+1 <= max_occurance):\n            str_list.append(split_str_list[i])\n    return str_list\ndef split_string_by_min_occurance(str1,split_str,min_occurance):\n    '''\n    Write a function to split a string into a list of strings.\n    '''\n    split_str_list = re.split(split_str,str1)\n    str_list = []\n    for i in range(len(split_str_list)):\n        if(i+1 > min_occurance):\n            str_list.append(split_str_list[i])\n    return str_list\ndef split_string_by_occurance(str1,split_str,occurance):\n    '''\n    Write a function to split a string into a list of strings.\n    '''\n    split_str_list = re.split(split_str,str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b\\w*[a-z]\\w*\\b','',str1)\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function that removes punctuation from a string.\n    '''\n    str1 = re.sub(r'[^\\w\\s]','',str1)\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function that removes all digits from a string.\n    '''\n    str1 = re.sub(r'\\d','',str1)\n    return str1\ndef remove_stopwords(str1):\n    '''\n    Write a function that removes all stopwords from a string.\n    '''\n    str1 = re.sub(r'\\b\\w*[a-z]\\w*\\b','',str1)\n    str1 = re.sub(r'\\b\\w*[a-z]\\w*\\b','',str1)\n    str1 = re.sub(r'\\b\\w*[a-z]\\w*\\b','',str1)\n    return str1\ndef remove_urls(str1):\n    '''\n    Write a function that removes all urls from a string.\n    '''\n    str1 = re.sub(r'[http\\:\\/\\/|www]*[a-zA-Z0-9]+[\\-\\.]{1}[a-zA-Z0-9]+[\\/|\\w\\.]*','',str1)\n    return str1\ndef remove_mentions(str1):\n    '''\n    Write a function that removes all mentions from a string.\n    '''\n    str1 = re.sub(r'@[a-zA-Z0-9]+','',str1)\n    return str1\ndef remove_emails(str1):\n    '''\n    Write a function that removes all emails from a string.\n    '''\n    str1 = re.sub(r'[\\w\\.]*[\\-]+[\\w\\.]*@[\\w\\.]*[\\-]+[\\w\\.]*','',str1)\n    return str1\ndef remove_emoticon(str1):\n    '''\n    Write a function that removes emoticon from a string.\n    '''\n    str1 = re.sub(r'[:]{2,}','',str1)\n    str1 = re.sub(r'[*]{2,}','',str1)\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function that removes all numbers from a string.\n    '''\n    str1 = re.sub(r'\\d+','',str1)\n    return str1\ndef remove_hashtags(str1):\n    '''\n    Write a function that removes all hashtags from a string.\n    '''\n    str1 = re.sub(r'\\#[a-zA-Z0-9]*','',str1)\n    return str1\ndef remove_double_spaces(str1):\n    '''\n    Write a function that removes all double spaces from a string.\n    '''\n    str1 = re.sub(' +',' ',str1)\n    return str1\ndef remove_emojis(str1):\n    '''\n    Write a function that removes all emojis from a string.\n    '''\n    str1 = re.sub(r'[\\U00010000-\\U0010ffff]+','',str1)\n    return str1\ndef remove_hastags(str1):\n    '''\n    Write a function that removes all hastags from a string.\n    '''\n    str1 = re.sub(r'#[a-zA-Z0-9]+','',str1)\n    return str1\ndef remove_special_chars(str1):\n    '''\n    Write a function that removes all special characters from a string.\n    '''\n    str1 = re.sub(r'[^\\w\\s]','',str1)\n    return str1\ndef remove_urls(str1):\n    '''\n    Write a function that removes all urls from a string.\n    '''\n    str1 = re.sub(r'[http\\:\\/\\/|www]*[a-zA-Z0-9]+[\\-\\.]{1}[a-zA-Z0-9]+[\\/|\\w\\.]*','',str1)\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function that removes all digits from a string.\n    '''\n    str1 = re.sub(r'\\d','',str1)\n    return str1\ndef remove_stopwords(str1):\n    '''\n    Write a function that removes all stopwords from a string.\n    '''\n    str1 = re.sub(r'\\b\\w*[a-z]\\w*\\b','',str1)\n    str1 = re.sub(r'\\b\\w*[a-z]\\w*\\b','',str1)\n    str1 = re.sub(r'\\b\\w*[a-z]\\w*\\b','',str1)\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function that removes punctuation from a string.\n    '''\n    str1 = re.sub(r'[^\\w\\s]','',str1)\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function that removes all digits from a string.\n    '''\n    str1 = re.sub(r'\\d','',str1)\n    return str1\ndef remove_mentions(str1):\n    '''\n    Write a function that removes all mentions from a string.\n    '''\n    str1 = re.sub(r'@[a-zA-Z0-9]+','',str1)\n    return str1\ndef remove_hashtags(str1):\n    '''\n    Write a function that removes all hashtags from a string.\n    '''\n    str1 = re.sub(r'#[a-zA-Z0-9]+','',str1)\n    return str1\ndef remove_stopwords(str1):\n    '''\n    Write a function that removes all stopwords from a string.\n    '''\n    str1 = re.sub(r'\\b\\w*[a-z]\\w*\\b','',str1)\n    str1 = re.sub(r'\\b\\w*[a-z]\\w*\\b','',str1)\n    str1 = re.sub(r'\\b\\w*[a-z]\\w*\\b','',str1)\n    return str1\ndef remove_urls(str1):\n    '''\n    Write a function that removes all urls from a string.\n    '''\n    str1 = re.sub(r'[http\\:\\/\\/|www]*[a-zA-Z0-9]+[\\-\\.]{1}[a-zA-Z0-9]+[\\/|\\w\\.]*','',str1)\n    return str1\ndef remove_mentions(str1):\n    '''\n    Write a function that removes all mentions from a string.\n    '''\n    str1 = re.sub(r'@[a-zA-Z0-9]+','',str1)\n    return str1\ndef remove_emojis(str1):\n    '''\n    Write a function that removes all emojis from a string.\n    '''\n    str1 = re.sub(r'[\\U00010000-\\U0010ffff]+','',str1)\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function that removes all numbers from a string.\n    '''\n    str1 = re.sub(r'\\d+','',str1)\n    return str1\ndef remove_hashtags(str1):\n    '''\n    Write a function that removes all hastags from a string.\n    '''\n    str1 = re.sub(r'#[a-zA-Z0-9]+','',str1)\n    return str1\ndef remove_special_chars(str1):\n    '''\n    Write a function that removes all special character"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = re.sub(r'[a-z]*', '', str1)\n    return new_str\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    new_str = re.sub(r'[0-9]*', '', str1)\n    return new_str\ndef remove_characters(str1, char_list):\n    '''\n    Write a function to remove characters from a given string.\n    '''\n    new_str = str1\n    for i in char_list:\n        new_str = re.sub(i, '', new_str)\n    return new_str\ndef remove_double_characters(str1):\n    '''\n    Write a function to remove double characters from a given string.\n    '''\n    new_str = re.sub(r'[^a-zA-Z]*', '', str1)\n    return new_str\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    new_str = re.sub(r'\\s*', '', str1)\n    return new_str\ndef remove_blank_lines(str1):\n    '''\n    Write a function to remove blank lines from a given string.\n    '''\n    new_str = re.sub(r'\\n*', '\\n', str1)\n    return new_str\ndef remove_tab_characters(str1):\n    '''\n    Write a function to remove tab characters from a given string.\n    '''\n    new_str = re.sub(r'\\t', '', str1)\n    return new_str\ndef remove_space_before_number(str1):\n    '''\n    Write a function to remove spaces before a number from a given string.\n    '''\n    new_str = re.sub(r'\\s*\\d+', '', str1)\n    return new_str\ndef remove_repeated_characters(str1):\n    '''\n    Write a function to remove repeated characters from a given string.\n    '''\n    new_str = re.sub(r'[^a-zA-Z]*', '', str1)\n    return new_str\ndef remove_multiple_whitespaces(str1):\n    '''\n    Write a function to remove multiple whitespaces from a given string.\n    '''\n    new_str = re.sub(r'\\s+','', str1)\n    return new_str\ndef remove_multiple_newlines(str1):\n    '''\n    Write a function to remove multiple newlines from a given string.\n    '''\n    new_str = re.sub(r'\\n+', '\\n', str1)\n    return new_str\ndef remove_newline_in_middle_of_sentence(str1):\n    '''\n    Write a function to remove newline in the middle of a sentence from a given string.\n    '''\n    new_str = re.sub(r'[.?!][\\n]', '', str1)\n    return new_str\ndef remove_whitespaces_from_beginning_and_end(str1):\n    '''\n    Write a function to remove whitespaces from the beginning and end of a string.\n    '''\n    new_str = re.sub(r'^\\s*|\\s*$', '', str1)\n    return new_str\ndef remove_newline_in_middle_of_sentence(str1):\n    '''\n    Write a function to remove newline in the middle of a sentence from a given string.\n    '''\n    new_str = re.sub(r'[.?!][\\n]', '', str1)\n    return new_str\ndef remove_lowercase_words_containing_digit(str1):\n    '''\n    Write a function to remove lowercase words containing a digit from a given string.\n    '''\n    new_str = re.sub(r'[a-z]*\\d+[a-z]*', '', str1)\n    return new_str\ndef remove_lowercase_words_containing_characters(str1, char_list):\n    '''\n    Write a function to remove lowercase words containing characters from a given string.\n    '''\n    new_str = re.sub(r'[a-z]*(' + '|'.join(char_list) + ')[a-z]*', '', str1)\n    return new_str\ndef remove_lowercase_words_containing_character_pattern(str1, pattern):\n    '''\n    Write a function to remove lowercase words containing characters from a given string.\n    '''\n    new_str = re.sub(r'[a-z]*(' + '|'.join(pattern) + ')[a-z]*', '', str1)\n    return new_str\ndef remove_lowercase_words_containing_substring(str1, substring):\n    '''\n    Write a function to remove lowercase words containing substring from a given string.\n    '''\n    new_str = re.sub(r'[a-z]*(' + substring + ')[a-z]*', '', str1)\n    return new_str\ndef remove_whitespaces_from_beginning_and_end(str1):\n    '''\n    Write a function to remove whitespaces from the beginning and end of a string.\n    '''\n    new_str = re.sub(r'^\\s*|\\s*$', '', str1)\n    return new_str\ndef remove_whitespaces_from_both_sides(str1):\n    '''\n    Write a function to remove whitespaces from both sides of a string.\n    '''\n    new_str = re.sub(r'^\\s*|\\s*$', '', str1)\n    return new_str\ndef remove_newline_in_middle_of_sentence(str1):\n    '''\n    Write a function to remove newline in the middle of a sentence from a given string.\n    '''\n    new_str = re.sub(r'[.?!][\\n]', '', str1)\n    return new_str\ndef remove_lowercase_characters_from_beginning_of_sentence(str1):\n    '''\n    Write a function to remove lowercase characters from the beginning of a sentence from a given string.\n    '''\n    new_str = re.sub(r'^[a-z]*', '', str1)\n    return new_str\ndef remove_lowercase_characters_from_end_of_sentence(str1):\n    '''\n    Write a function to remove lowercase characters from the end of a sentence from a given string.\n    '''\n    new_str = re.sub(r'[a-z]*$', '', str1)\n    return new_str\ndef remove_lowercase_words_containing_digits(str1):\n    '''\n    Write a function to remove lowercase words containing digits from a given string.\n    '''\n    new_str = re.sub(r'[a-z]*\\d+[a-z]*', '', str1)\n    return new_str\ndef remove_lowercase_words_containing_digits_and_character_pattern(str1, pattern):\n    '''\n    Write a function to remove lowercase words containing digits and characters from a given string.\n    '''\n    new_str = re.sub(r'[a-z]*(' + '|'.join(pattern) + ')[a-z]*', '', str1)\n    return new_str\ndef remove_lowercase_words_containing_digits_and_substring(str1, substring):\n    '''\n    Write a function to remove lowercase words containing digits and substring from a given string.\n    '''\n    new_str = re.sub(r'[a-z]*(' + '|'.join(pattern) + ')[a-z]*', '', str1)\n    return new_str\ndef remove_lowercase_words_containing_digits_and_substring_and_character_pattern(str1, pattern, substring):\n    '''\n    Write a function to remove lowercase words containing digits and substring and characters from a given string.\n    '''\n    ne"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Make a new string, one character at a time\n    new_string = []\n    for i in str1:\n        if i.isupper():\n            new_string.append(i)\n    # Return the string\n    return ''.join(new_string)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = ''\n    for letter in str1:\n        if ord(letter) > 96:\n            result += letter\n    return result\ndef replace_words(str1,dict1):\n    '''\n    Write a function to replace all instances of one substring in a string with another substring.\n    '''\n    result = ''\n    if len(str1)>1:\n        for letter in str1:\n            if letter not in dict1:\n                result += letter\n            else:\n                result += dict1[letter]\n    return result\ndef swap_letters(str1, dict1):\n    '''\n    Write a function to replace all instances of two substrings with each other and swap the letters inside the two substrings.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if str1[i] in dict1 and str1[i]!= dict1[str1[i]]:\n            temp = str1[i]\n            str1 = str1.replace(str1[i], dict1[str1[i]])\n            str1 = str1.replace(temp, temp)\n    for letter in str1:\n        if ord(letter) > 96:\n            result += letter\n    return result\ndef make_str_upper(str1):\n    '''\n    Write a function to convert a string to all uppercase characters.\n    '''\n    result = ''\n    for letter in str1:\n        if ord(letter) > 96:\n            result += letter.upper()\n        else:\n            result += letter\n    return result\ndef get_substrings(str1,substring):\n    '''\n    Write a function to get all substrings of a given string.\n    '''\n    result = []\n    if len(substring)<2:\n        return [str1]\n    for i in range(len(str1)-len(substring)+1):\n        result.append(str1[i:i+len(substring)])\n    return result\ndef get_all_combinations(str1,num):\n    '''\n    Write a function to get all possible combinations of N numbers out of 1 to 9.\n    '''\n    result = []\n    num_to_int = {}\n    for i in range(10):\n        num_to_int[i] = str(i)\n    num_to_int[0] = '0'\n    for i in range(len(num)):\n        if num[i] not in num_to_int:\n            return None\n        num_to_int[num[i]] = num_to_int[num[i]]+str(num[i])\n    for i in range(len(str1)):\n        if str1[i] in num_to_int:\n            result.append(num_to_int[str1[i]])\n    if len(str1)<len(result):\n        return None\n    return result\ndef string_to_digit(str1):\n    '''\n    Write a function to convert a string to a digit.\n    '''\n    result = 0\n    for letter in str1:\n        result = result*10 + int(letter)\n    return result\ndef digit_to_string(num):\n    '''\n    Write a function to convert a digit to a string.\n    '''\n    result = ''\n    if num == 0:\n        return '0'\n    while num > 0:\n        result = str(num%10) + result\n        num = num//10\n    return result\ndef search_for_substring(str1,str2):\n    '''\n    Write a function to search for a given substring in a given string and return its index.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(str2)] == str2:\n            return i\n    return None\ndef search_for_first_substring(str1,str2):\n    '''\n    Write a function to search for the first instance of a given substring in a given string and return its index.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(str2)] == str2:\n            return i\n    return None\ndef find_missing_number(list1):\n    '''\n    Write a function to find the missing number from a given list.\n    '''\n    for i in range(len(list1)):\n        if i not in list1:\n            return i\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    if len(str1)%2 == 0:\n        return True\n    else:\n        for i in range(len(str1)//2):\n            if str1[i]!= str1[len(str1)-1-i]:\n                return False\n        return True\ndef is_anagram(str1,str2):\n    '''\n    Write a function to check whether a given string is an anagram of another string or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    result = {}\n    for letter in str1:\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n    for letter in str2:\n        if letter in result:\n            result[letter] -= 1\n        else:\n            result[letter] = 1\n    for value in result.values():\n        if value!= 0:\n            return False\n    return True\ndef is_permutation(str1,str2):\n    '''\n    Write a function to check whether a given string is a permutation of another string or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    result = {}\n    for letter in str1:\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n    for letter in str2:\n        if letter in result:\n            result[letter] -= 1\n        else:\n            result[letter] = 1\n    for value in result.values():\n        if value!= 0:\n            return False\n    return True\ndef is_rotation(str1,str2):\n    '''\n    Write a function to check whether a given string is a rotation of another string or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    temp = ''\n    for i in range(len(str1)):\n        temp = temp + str1[i]\n    return temp == str2\ndef is_substring(str1,str2):\n    '''\n    Write a function to check whether a given string is a substring of another string or not.\n    '''\n    if len(str1) > len(str2):\n        return False\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            return False\n    return True\ndef is_pandigital(str1):\n    '''\n    Write a function to check whether a given string is a pandigital number or not.\n    '''\n    str1 = str1.replace('0','')\n    result = {}\n    for i in range(1,10):\n        result[str(i)] = 0\n    for letter in str1:\n        if letter not in result:\n            return False\n        result[letter] += 1\n    for value in result.values():\n        if value!= 1:\n            return False\n    return True\ndef is_double(str1):\n    '''\n    Write a function to check whether a given string is a double number or not.\n    '''\n    if len(str1)%2!= 0:\n        return False\n    result = {}\n    for i in range(len(str1)//2):\n        if str1[i] in result:\n            result[str1[i]] += 1\n        else:\n            result[str1[i]] = 1\n        if str1[i+len(str1)//2] in result:\n            result[str1[i+len(str1)//2]] += 1\n        else:\n            result[str1[i+len(str1)//2]] = 1\n    for value in result.values():\n        if value!= 1:\n            return False\n    return True\ndef is_palidrom"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digits = [int(i) for i in str(n)]\n    return digits[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = n // 10\n    if x == 0 :\n        return n\n    else :\n        return first_Digit(x)\n    "
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10 % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    return n/10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10 % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10**(len(str(n))-1))\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n!= 0 :\n        d = n % 10\n        n = n // 10\n    return d\ndef same_first_digit(m,n) : \n    '''\n    Write a python function to find whether the two given number have same first digit or not.\n    '''\n    return (first_Digit(m) == first_Digit(n))\ndef count_same_first_digit(m,n,k) :\n    '''\n    Write a python function to find the number of same first digit in two given numbers.\n    '''\n    c = 0\n    for i in range(k) :\n        if same_first_digit(m,n) :\n            c += 1\n    return c\nn = int(input())\nk = int(input())\nm = int(input())\nprint(count_same_first_digit(m,n,k))"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return first_Digit(n // 10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return (n % 10)\n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n // 10)\n    \ndef swap_Digit(n1,n2) :  \n    '''\n    Write a python function to swap the first and the last digit of a given number.\n    '''\n    n1,n2 = n2,n1\n    return (n1,n2)\n    \ndef even_Digit(n1,n2) :  \n    '''\n    Write a python function to find whether the two given numbers are even or not.\n    '''\n    n1,n2 = last_Digit(n1),last_Digit(n2)\n    \n    if (n1 % 2 == 0) and (n2 % 2 == 0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    a = []\n    for i in range(len(list)):\n        if(list[i]%2==1):\n            a.append(list[i])\n    return a\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    oddlist = []\n    for i in list:\n        if i % 2!= 0:\n            oddlist.append(i)\n    return oddlist\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i%2!= 0:\n            odds.append(i)\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    odds = [x for x in list if x%2!= 0]\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    a = []\n    for i in list:\n        if i%2!= 0:\n            a.append(i)\n    return a\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #list = [10,20,30,40,50]\n    #return [20,30,40,50]\n    return [x for x in list if x%2!=0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2]\n    \n    \ndef Intersection(list1, list2):\n    '''\n    Write a python function which takes 2 lists and returns True if they have at least one member in common. Otherwise, it returns False.\n    '''\n    return bool(set(list1).intersection(set(list2)))\n    \n    \ndef TowerOfHanoi(n, from_rod, to_rod, aux_rod):\n    '''\n    Write a python function to implement Tower of Hanoi.\n    '''\n    if n == 0:\n        return\n    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod)\n    print \"Move disk %d from %s to %s\" % (n, from_rod, to_rod)\n    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)\n    \ndef StringAnagram(s1, s2):\n    '''\n    Write a python function to check if two strings are anagrams of each other.\n    '''\n    d = {}\n    for letter in s1:\n        d[letter] = d.get(letter, 0) + 1\n    for letter in s2:\n        d[letter] = d.get(letter, 0) - 1\n    for k in d:\n        if d[k]!= 0:\n            return False\n    return True\n    \n    \ndef LargestPalindrome(n):\n    '''\n    Write a python function to find the largest palindrome of a given number.\n    '''\n    if n < 10:\n        return n\n    s = str(n)\n    for i in xrange(len(s)-1, -1, -1):\n        if s[i] == s[i+1]:\n            continue\n        else:\n            a = int(s[:i]+s[i+1:])\n            if a > n:\n                return a\n            else:\n                return n\n            \ndef MoveZeros(list):\n    '''\n    Write a python function to move all the zeros to the end of a list in place.\n    '''\n    count = 0\n    for i in xrange(len(list)):\n        if list[i]!= 0:\n            list[count] = list[i]\n            count += 1\n    for i in xrange(count, len(list)):\n        list[i] = 0\n    \ndef RoundRobin(arr, start, end, r_arr):\n    '''\n    Write a python function to round robin a list.\n    '''\n    if start < end:\n        r_arr[start] = arr[start]\n        RoundRobin(arr, start+1, end, r_arr)\n        r_arr[start] = arr[end]\n        RoundRobin(arr, start, end-1, r_arr)\n    \ndef Reverse(arr, start, end):\n    '''\n    Write a python function to reverse a list.\n    '''\n    if start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        Reverse(arr, start+1, end-1)\n    \ndef InsertionSort(arr):\n    '''\n    Write a python function to implement insertion sort.\n    '''\n    for i in xrange(1, len(arr)):\n        v = arr[i]\n        j = i\n        while j > 0 and v < arr[j-1]:\n            arr[j] = arr[j-1]\n            j -= 1\n        arr[j] = v\n    \ndef MinimumSwaps(arr):\n    '''\n    Write a python function to find the minimum number of swaps to sort an array.\n    '''\n    n = len(arr)\n    cnt = 0\n    for i in xrange(n):\n        while arr[i]!= i+1:\n            if arr[i] == arr[arr[i]-1]:\n                arr[i], arr[arr[i]-1] = arr[arr[i]-1], arr[i]\n            else:\n                arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n            cnt += 1\n    return cnt\n    \ndef InversionCount(arr):\n    '''\n    Write a python function to count the number of inversions in an array.\n    '''\n    n = len(arr)\n    inversion_count = 0\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            if arr[i] > arr[j]:\n                inversion_count += 1\n    return inversion_count\n    \ndef CountingSort(arr, exp):\n    '''\n    Write a python function to implement counting sort.\n    '''\n    n = len(arr)\n    output = [0 for i in xrange(n)]\n    count = [0 for i in xrange(10)]\n    for i in xrange(n):\n        index = (arr[i]/exp)\n        count[index%10] += 1\n    for i in xrange(1,10):\n        count[i] += count[i-1]\n    i = n-1\n    while i >= 0:\n        index = (arr[i]/exp)\n        output[count[index%10]-1] = arr[i]\n        count[index%10] -= 1\n        i -= 1\n    for i in xrange(n):\n        arr[i] = output[i]\n        \ndef MaxProduct(arr):\n    '''\n    Write a python function to find the maximum product of 3 numbers in an array.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                if arr[i]*arr[j]*arr[k] > max_product:\n                    max_product = arr[i]*arr[j]*arr[k]\n    return max_product\n    \ndef ThreeSum(arr, target):\n    '''\n    Write a python function to find the number of three sum(s) in an array that equals to a target value.\n    '''\n    n = len(arr)\n    cnt = 0\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            if arr[i] + arr[j] in arr[j+1:]:\n                cnt += 1\n    return cnt\n    \ndef IsPalindrome(n):\n    '''\n    Write a python function to check if a number is palindrome.\n    '''\n    if n < 10:\n        return True\n    s = str(n)\n    for i in xrange(len(s)/2):\n        if s[i]!= s[len(s)-i-1]:\n            return False\n    return True\n    \ndef IsPrime(n):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in xrange(2, n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef SieveOfEratosthenes(n):\n    '''\n    Write a python function to return all the prime numbers smaller than a given integer n.\n    '''\n    sieve = [True]*n\n    sieve[0] = False\n    sieve[1] = False\n    for i in xrange(2, int(n**0.5)+1):\n        if sieve[i]:\n            sieve[i*i:n:i] = [False]*len(sieve[i*i:n:i])\n    return [i for i in xrange(n) if sieve[i]]\n    \ndef Factorial(n):\n    '''\n    Write a python function to return the factorial of a number.\n    '''\n    if n < 2:\n        return 1\n    return n*Factorial(n-1)\n    \ndef Permute(arr, start, end):\n    '''\n    Write a python function to return all the permutations of a given list of characters.\n    '''\n    if start == end:\n        print ''.join(arr)\n    else:\n        for i in xrange(start, end):\n        "
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [item for item in list if item%2!= 0]\nprint Split([1,2,3,4,5,6,7,8,9])\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    cubed_sum = sum([n**3 for n in range(n)])\n    sum_n = sum(range(1, n+1))\n    return sum_n**3 - cubed_sum\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = sum(range(1, n + 1))\n    t = (n * (n + 1) * (2 * n + 1)) / 6\n    return s - t\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return sum([x**3 for x in xrange(1,n+1)]) - sum(xrange(1,n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    s = 0\n    for i in range(1, n + 1) :\n        s = s + i**3\n    return s**2 - sum(range(1, n + 1))**3\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n) :\n        sum_of_cubes += i**3\n    return sum_of_cubes - sum(range(1,n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = sum([x**3 for x in range(1,n+1)]) - sum(range(1,n+1))\n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculating sum of cubes of first n natural numbers\n    cubesum = 0\n    for i in range(n) :\n        cubesum += i*i*i\n    \n    # calculating sum of first n natural numbers\n    numsum = 0\n    for i in range(n) :\n        numsum += i\n    \n    # returning difference between the sums of both\n    return numsum**2 - cubesum\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1) :\n        total = total + pow(i, 3)\n    return total - sum(range(n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    for i in range(1,n+1) :\n        sum_of_numbers = sum_of_numbers + i**3\n    return sum_of_numbers - sum(range(1,n+1))**3\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1) :\n        s = s + i**3\n    return s**2 - sum(range(1,n+1))**2\nprint(difference(20))"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    res = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if A[i] ^ A[j] & 1 : \n                res += 1\n    return res \n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if A[i]^A[j]%2==1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return len([x for x in range(N) if A[x]^A[x+1]&1 ])\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j]%2:\n                odd_pairs+=1\n    return odd_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    sum = 0 \n    for i in range(N) :\n        if ((A[i] ^ A[(i+1)%N]) & 1) :\n            sum = sum + 1\n    return sum\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    ans = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] & 1 :\n                ans += 1\n    return ans\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N-1) :\n        for j in range(i+1,N) :\n            if A[i]^A[j]&1 :\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        if (A[i]^A[i+1])%2 == 1 :\n            count = count + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1 == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if len(A) < 2:\n        return 0\n    xors = [0] * N\n    result = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            xors[i] ^= A[j]\n            if xors[i] & 1 == 1:\n                result += 1\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        result += char.swapcase()\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.isupper():\n        return string.lower()\n    else:\n        return string.upper()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #return ''.join(map(str.swapcase, string))\n    return ''.join([str.swapcase(x) for x in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x: x.swapcase(), string))\n    "
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([(c.lower() if c.isupper() else c.upper()) for c in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    return string.swapcase()\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = abs(n1)\n    n2 = abs(n2)\n    l = []\n    while n1 > 0:\n        l.append(n1%10)\n        n1 //= 10\n    while n2 > 0:\n        l.append(n2%10)\n        n2 //= 10\n    l.sort()\n    result = 0\n    for i in range(len(l)-1):\n        result += abs(l[i] - l[i+1])\n    return result\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    if len(n1) > len(n2):\n        n2 = n2.zfill(len(n1))\n    else:\n        n1 = n1.zfill(len(n2))\n    diff = [ int(a) - int(b) for a,b in zip(n1, n2) ]\n    return sum(diff)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total = 0\n    if len(str(n1)) > len(str(n2)):\n        n1, n2 = n2, n1\n    \n    for i in range(len(str(n1))):\n        if str(n1)[i] == str(n2)[i]:\n            total += 0\n        else:\n            total += int(str(n1)[i]) - int(str(n2)[i])\n    return total\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = abs(n1), abs(n2)\n    return sum(abs(i - j) for i, j in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([int(c1) - int(c2) for c1, c2 in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    length = max(len(n1), len(n2))\n    n1 = n1.zfill(length)\n    n2 = n2.zfill(length)\n    diffs = 0\n    for i in range(length):\n        diff = abs(int(n1[i]) - int(n2[i]))\n        diffs += diff\n    return diffs\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = str(n1), str(n2)\n    sum = 0\n    for i,j in zip(n1, n2):\n        if i!= j:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(i - j) for i, j in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far, max_ending_here = a[0], a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        curr_sum = 0\n        for j in range(i, size):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    assert size > 0, \"size should be larger than 0\"\n    assert len(a) >= size, \"size should be less than or equal to length of list a\"\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_max = a[0]\n    current_sum = a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -1\n    max_ending_here = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    start, end = 0, 0\n    maximum = a[0]\n    for i in xrange(1, size):\n        if a[i] < 0:\n            end = i\n            maximum = max(maximum, sum(a[start:end + 1]))\n            start = i + 1\n    maximum = max(maximum, sum(a[start:end + 1]))\n    return maximum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    for i in range(size):\n        curr_sum = a[i]\n        for j in range(i+1, size):\n            curr_sum += a[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = []\n    for elem1 in test_tup1:\n        if elem1 not in result:\n            result.append(elem1)\n    for elem2 in test_tup2:\n        if elem2 not in result:\n            result.append(elem2)\n    return tuple(sorted(result))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(set(test_tup2))))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1 + test_tup2))\n    union_list.sort()\n    print(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return list(sorted(set(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    set3 = set1.union(set2)\n    list3 = list(set3)\n    list3.sort()\n    return tuple(list3)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    for i in test_tup1:\n        if i not in union_list:\n            union_list.append(i)\n    for j in test_tup2:\n        if j not in union_list:\n            union_list.append(j)\n    return sorted(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(test_tup1 + test_tup2)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d.values())\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    res = 0\n    for x in lst:\n        if len(x)>res:\n            res=len(x)\n    return res\ndef Find_Kth_smallest_element(lst, k):\n    '''\n    Write a python function to find the k-th smallest element in the list.\n    '''\n    res = 0\n    for x in lst:\n        if x<res:\n            res=x\n    return res\ndef Get_Largest_Palindrome(n):  \n    '''\n    Write a python function to get the largest palindrome from n.\n    '''\n    res = ''\n    if n<10:\n        res = n\n    else:\n        for x in range(n-1,0,-1):\n            if str(x)==str(x)[::-1]:\n                res = x\n                break\n    return res\ndef get_keys_with_max_values(d):\n    '''\n    Write a python function to get the key for the dictionary d with the maximum value.\n    '''\n    res = 0\n    for x in d:\n        if d[x]>res:\n            res=d[x]\n            key = x\n    return key\ndef get_keys_with_min_values(d):\n    '''\n    Write a python function to get the key for the dictionary d with the minimum value.\n    '''\n    res = 9999\n    for x in d:\n        if d[x]<res:\n            res=d[x]\n            key = x\n    return key\ndef get_keys_with_max_value_in_Dictionary(d):\n    '''\n    Write a python function to get the key for the dictionary d with the maximum value.\n    '''\n    res = 0\n    for x in d:\n        if d[x]>res:\n            res=d[x]\n            key = x\n    return key\ndef get_keys_with_min_value_in_Dictionary(d):\n    '''\n    Write a python function to get the key for the dictionary d with the minimum value.\n    '''\n    res = 9999\n    for x in d:\n        if d[x]<res:\n            res=d[x]\n            key = x\n    return key\ndef get_keys_with_max_value_in_Dictionary_using_filter(d):\n    '''\n    Write a python function to get the key for the dictionary d with the maximum value.\n    '''\n    res = max(d.values())\n    res_list = list(filter(lambda x: d[x]==res, d))\n    return res_list\ndef get_keys_with_min_value_in_Dictionary_using_filter(d):\n    '''\n    Write a python function to get the key for the dictionary d with the minimum value.\n    '''\n    res = min(d.values())\n    res_list = list(filter(lambda x: d[x]==res, d))\n    return res_list\ndef get_keys_with_max_value_in_Dictionary_using_sorted(d):\n    '''\n    Write a python function to get the key for the dictionary d with the maximum value.\n    '''\n    res = max(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1])\n    return res_list\ndef get_keys_with_min_value_in_Dictionary_using_sorted(d):\n    '''\n    Write a python function to get the key for the dictionary d with the minimum value.\n    '''\n    res = min(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1])\n    return res_list\ndef get_keys_with_max_value_in_Dictionary_using_sorted_in_descending_order(d):\n    '''\n    Write a python function to get the key for the dictionary d with the maximum value.\n    '''\n    res = max(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1],reverse=True)\n    return res_list\ndef get_keys_with_min_value_in_Dictionary_using_sorted_in_descending_order(d):\n    '''\n    Write a python function to get the key for the dictionary d with the minimum value.\n    '''\n    res = min(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1],reverse=True)\n    return res_list\ndef get_keys_with_max_value_in_Dictionary_using_sorted_in_descending_order(d):\n    '''\n    Write a python function to get the key for the dictionary d with the maximum value.\n    '''\n    res = max(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1],reverse=True)\n    return res_list\ndef get_keys_with_min_value_in_Dictionary_using_sorted_in_descending_order(d):\n    '''\n    Write a python function to get the key for the dictionary d with the minimum value.\n    '''\n    res = min(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1],reverse=True)\n    return res_list\ndef get_keys_with_max_value_in_Dictionary_using_sorted_in_descending_order(d):\n    '''\n    Write a python function to get the key for the dictionary d with the maximum value.\n    '''\n    res = max(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1],reverse=True)\n    return res_list\ndef get_keys_with_min_value_in_Dictionary_using_sorted_in_descending_order(d):\n    '''\n    Write a python function to get the key for the dictionary d with the minimum value.\n    '''\n    res = min(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1],reverse=True)\n    return res_list\ndef get_keys_with_max_value_in_Dictionary_using_sorted_in_descending_order(d):\n    '''\n    Write a python function to get the key for the dictionary d with the maximum value.\n    '''\n    res = max(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1],reverse=True)\n    return res_list\ndef get_keys_with_min_value_in_Dictionary_using_sorted_in_descending_order(d):\n    '''\n    Write a python function to get the key for the dictionary d with the minimum value.\n    '''\n    res = min(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1],reverse=True)\n    return res_list\ndef get_keys_with_max_value_in_Dictionary_using_sorted_in_descending_order(d):\n    '''\n    Write a python function to get the key for the dictionary d with the maximum value.\n    '''\n    res = max(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1],reverse=True)\n    return res_list\ndef get_keys_with_min_value_in_Dictionary_using_sorted_in_descending_order(d):\n    '''\n    Write a python function to get the key for the dictionary d with the minimum value.\n    '''\n    res = min(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1],reverse=True)\n    return res_list\ndef get_keys_with_max_value_in_Dictionary_using_sorted_in_descending_order(d):\n    '''\n    Write a python function to get the key for the dictionary d with the maximum value.\n    '''\n    res = max(d.values())\n    res_list = sorted(d.items(), key=lambda x: x[1],reverse=True)\n    return res_list\ndef get_keys_with_min_value_in_Dictionary_using_sorted_in_descending_order("
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sublist_length = []\n    for i in lst:\n        count = 0\n        for j in lst:\n            if i == j:\n                count += 1\n        sublist_length.append(count)\n    max_length = 0\n    for i in sublist_length:\n        if i > max_length:\n            max_length = i\n    print max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        if len(i)> result:\n            result = len(i)\n    return result\ndef Find_Max_Length_2(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        if len(i)> result:\n            result = len(i)\n    return result\ndef Find_Max_Length_3(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_4(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_5(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_6(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_7(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_8(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_9(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_10(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_11(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_12(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_13(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_14(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_15(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_16(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_17(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_18(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_19(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_20(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_21(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_22(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_23(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_24(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0\n        for j in i:\n            if count > result:\n                result = count\n            count += 1\n    return result\ndef Find_Max_Length_25(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in lst:\n        count = 0"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            sublists.append(lst[i:j+1])\n    return max(map(len,sublists))\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sublists = []\n    for i in range(len(lst)):\n        temp = []\n        for j in range(i, len(lst)):\n            temp.append(lst[j])\n        sublists.append(temp)\n    max_len = 0\n    for i in range(len(sublists)):\n        if len(sublists[i]) > max_len:\n            max_len = len(sublists[i])\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    temp_lst = []\n    for i in range(len(lst)):\n        if i == 0:\n            temp_lst.append(lst[i])\n        elif temp_lst[-1] < lst[i]:\n            temp_lst.append(lst[i])\n        else:\n            temp_lst[-1] = lst[i]\n    return max(len(temp_lst),len(lst))\n    \ndef Find_Sum_of_Sublists(lst):  \n    '''\n    Write a python function to find the sum of sublists.\n    '''\n    sum_of_sublists = 0\n    for i in lst:\n        sum_of_sublists += sum(i)\n    return sum_of_sublists\n    \ndef Max_Element_of_Sublists(lst):\n    '''\n    Write a python function to find the maximum element of sublists.\n    '''\n    max_of_sublists = 0\n    for i in lst:\n        max_of_sublists = max(max_of_sublists, max(i))\n    return max_of_sublists\n    \ndef Sort_Sublists(lst):\n    '''\n    Write a python function to sort the sublists.\n    '''\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i][j] > lst[i][j-1]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    start_index=0\n    end_index=0\n    max_length=0\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0\n    for i in lst:\n        if len(i) > length:\n            length = len(i)\n    return length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    max_len = 0\n    max_list = []\n    for i in range(len(lst)):\n        if max_len < len(lst[i]):\n            max_list = lst[i]\n            max_len = len(lst[i])\n    return max_list\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"[^\"]*\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    quote_strings = re.findall(r'\\\"(.*?)\\\"', text)\n    for quote_string in quote_strings:\n        quote_text = quote_string[1:-1]\n        if quote_text == 'True':\n            values.append(True)\n        elif quote_text == 'False':\n            values.append(False)\n        elif quote_text == 'None':\n            values.append(None)\n        else:\n            values.append(float(quote_text))\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"(.+?)\\\"',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == \"\":\n        return []\n    quotes = re.findall(\"\\\"[^\\\"]*\\\"\", text)\n    if quotes == []:\n        quotes = re.findall(\"\\'[^\\']*\\'\", text)\n    if quotes == []:\n        quotes = re.findall(\"`[^`]*`\", text)\n    if quotes == []:\n        return []\n    return quotes\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search(r'\"([^\"]*)\"', text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    r = re.findall(r'\"([^\"]*)\"', text)\n    # if r:\n    #     print r\n    return r\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # For each character in the string, if the next character is '\"', add to a list and\n    # if the next character is '\"', don't add anything and if the next character is not '\"', add the character\n    # to the list if the next character is '\"', add nothing if next character is'' or ','\n    res = []\n    previous_char =''\n    for i, char in enumerate(text):\n        if i < len(text)-1 and text[i+1] == '\"':\n            previous_char = char\n        elif text[i] == '\"' and (i == len(text)-1 or text[i+1]!='' and text[i+1]!= ','):\n            if previous_char!='':\n                res.append(previous_char)\n            previous_char =''\n        else:\n            previous_char = char\n    return res\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(\"[\\\"]([^\\\"]*)[\\\"]\", text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # return re.findall(r'\"[^\"]+\"', text)\n    # return re.findall(r'\"[^\"]*\"', text)\n    return re.findall(r'\"[^\"]*\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Replace commas with period\n    # Replace newlines with spaces\n    # Remove double quotes\n    # Split on \":\" or \";\"\n    # Remove leading and trailing whitespaces\n    # Split on spaces between values\n    # Remove leading and trailing spaces\n    # Convert to tuple\n    # Replace double quotes with single quotes\n    # Replace multiple spaces with single space\n    \n    #text = text.replace(\",\", \".\").replace(\"\\n\", \" \").replace(\"\\\"\", \"\").replace(\";\", \":\").strip().split(\";\")\n    #text = \"\".join(text).replace('\"', \"'\")\n    #text = text.replace(\",\", \".\").replace(\":\", \";\").strip().split(\";\")\n    #text = tuple(re.sub(\"[\\s+]\", \" \", i) for i in text)\n    #text = tuple(i for i in text if i!= \"\")\n    #return text\n    return tuple(re.sub(\"[\\s+]\", \" \", i) for i in text.replace(\";\", \":\").strip().split(\";\"))\n    #return tuple(i for i in re.sub(\"[\\s+]\", \" \", i) for i in text.split(\";\"))\n    #return text.replace(\"\\\"\", \"\").replace(\",\", \".\").replace(\":\", \";\").strip().split(\";\")\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    i = 0\n    count = 0\n    while i<n:\n        j = i+1\n        while j<n:\n            if arr[i]!=arr[j]:\n                count +=1\n            j+=1\n        i+=1\n    print count\ncount_Pairs([1,3,1,3,2,4],6)\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    print(count)\n    \ndef sum_of_all_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and sums all possible ordered pairs.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum += arr[i]*arr[j]\n    print(sum)\n    \ndef find_max_subarray_sum(arr,n):\n    '''\n    Write a python function which takes a list of integers and returns the maximum sum possible by adding one element to each of the subarray of the list.\n    '''\n    max_sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n+1):\n            curr_sum = sum(arr[i:j])\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    print(max_sum)\n    \ndef max_sum_subarray_slicing(arr,n):\n    '''\n    Write a python function which takes a list of integers and returns the maximum sum possible by only adding one element to each of the subarray of the list.\n    '''\n    max_sum = arr[0]\n    curr_sum = 0\n    for i in range(1,n):\n        curr_sum = max(curr_sum+arr[i],arr[i])\n        max_sum = max(max_sum,curr_sum)\n    print(max_sum)\n    \ndef longest_common_subsequence(x,y,m,n):\n    '''\n    Write a python function which takes two strings as arguments and returns the length of the longest common substring.\n    '''\n    t = [[0 for i in range(n+1)] for j in range(m+1)]\n    lcs = 0\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                t[i][j] = 0\n            elif x[i-1] == y[j-1]:\n                t[i][j] = 1 + t[i-1][j-1]\n                lcs = max(t[i][j],lcs)\n            else:\n                t[i][j] = 0\n    return lcs\n    \ndef number_of_constructible_arrays(arr,n):\n    '''\n    Write a python function which takes a list of integers and returns the number of arrays of integers which can be formed using all the numbers in the list.\n    '''\n    t = [1,0]\n    for i in range(1,n):\n        t.append(0)\n        for j in range(i):\n            if arr[j] < arr[i]:\n                t[i] += t[j]\n    print(t[n-1])\n    \ndef knapsack_problem(items,weight,max_weight):\n    '''\n    Write a python function which takes an array of items and their corresponding weights and returns the maximum weight of the items which can be added to a knapsack of capacity equal to max_weight.\n    '''\n    t = [[0 for i in range(max_weight+1)] for j in range(len(items)+1)]\n    for i in range(1,len(items)+1):\n        for j in range(1,max_weight+1):\n            if items[i-1][1] > j:\n                t[i][j] = t[i-1][j]\n            else:\n                t[i][j] = max(t[i-1][j],items[i-1][1]+t[i-1][j-items[i-1][1]])\n    return t[-1][-1]\n    \ndef generate_number_of_rows_in_pascals_triangle(n):\n    '''\n    Write a python function which takes a positive integer and returns the number of rows in the pascals triangle with the top number being equal to n.\n    '''\n    t = [1]\n    for i in range(1,n):\n        t.append(1)\n        for j in range(1,i):\n            t[i] += t[j]\n    return t[-1]\n    \ndef generate_number_of_rows_in_pascals_triangle_recursive(n):\n    '''\n    Write a python function which takes a positive integer and returns the number of rows in the pascals triangle with the top number being equal to n.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return generate_number_of_rows_in_pascals_triangle_recursive(n-1) + generate_number_of_rows_in_pascals_triangle_recursive(n-2)\n    \ndef find_k_max_subarray_sum(arr,k,n):\n    '''\n    Write a python function which takes a list of integers and a positive integer and returns the k maximum sum possible from the subarray of the list.\n    '''\n    sum = 0\n    max_sum = 0\n    for i in range(0,n):\n        sum = 0\n        for j in range(i,n):\n            sum += arr[j]\n            if sum > max_sum:\n                max_sum = sum\n            if i == 0:\n                sum = 0\n    return max_sum\n    \ndef find_k_max_subarray_sum_brute_force(arr,k,n):\n    '''\n    Write a python function which takes a list of integers and a positive integer and returns the k maximum sum possible from the subarray of the list.\n    '''\n    max_sum = 0\n    for i in range(0,n):\n        for j in range(i,n):\n            sum = 0\n            for k in range(i,j+1):\n                sum += arr[k]\n            if sum > max_sum:\n                max_sum = sum\n    print(max_sum)\n    \ndef find_k_max_subarray_sum_recursive(arr,k,n):\n    '''\n    Write a python function which takes a list of integers and a positive integer and returns the k maximum sum possible from the subarray of the list.\n    '''\n    if k == 1:\n        return max(arr)\n    elif n == 0:\n        return 0\n    else:\n        max_sum_excluding_last = find_k_max_subarray_sum_recursive(arr,k,n-1)\n        max_sum_including_last = max(max_sum_excluding_last,arr[n-1]+find_k_max_subarray_sum_recursive(arr,k-1,n-1))\n        return max_sum_including_last\n    \ndef find_k_max_subarray_sum_top_down(arr,k,n):\n    '''\n    Write a python function which takes a list of integers and a positive integer and returns the k maximum sum possible from the subarray of the list.\n    '''\n    t = [0 for i in range(n+1)]\n    for i in range(1,n+1):\n        t[i] = arr[i-1]\n    for i in range(2,n+1):\n        for j in range(1,i):\n            if t[j-1] > t[i-1]:\n                t[i] = max(t[i],t[j-1] + t[i-1])\n    return t[n]\n    \ndef find_k_max_subarray_sum_bottom_up(arr,k,n):\n    '''\n    Write a python function which takes a list of integers and a positive integer and returns the k maximum sum possible from the subarray of the list.\n    '''\n    t = [0 for i in range(n+1)]\n    for i in range(1,n+1):\n        if i == 1:\n            t[i] = arr[i-1]\n        else:\n            t[i] = max(t[i-1],arr[i-1])\n    for i in range"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs=0\n    dict={}\n    for i in range(n):\n        dict[arr[i]]=1\n    for i in range(n-1):\n        if arr[i]==arr[i+1]:\n            pairs+=1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count=count+1\n    return count\n    \ndef string_to_int(input_string):\n    '''\n    Write a python function which takes a string and returns the number of characters in the string, excluding whitespaces.\n    '''\n    count=0\n    for i in input_string:\n        if i!=' ':\n            count=count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\narr = [1,1,2,2,3,3,4,4,5,5]\nn = len(arr)\nprint(count_Pairs(arr,n)"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    l=[]\n    l.append(0)\n    for i in range(1,n):\n        if arr[i]>arr[i-1]:\n            l.append(l[i-1]+1)\n        else:\n            l.append(l[i-1])\n    return l[n-1]\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 \n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in xrange(n):\n        for j in xrange(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    print count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d = {}\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]!=arr[j]):\n                s = str(arr[i]) + str(arr[j])\n                if (s not in d):\n                    d[s]=1\n                else:\n                    d[s]+=1\n    return len(d)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n    \ndef split_and_join(line):\n    '''\n    Write a python function to split a string into words, then join the words\n    together with a space.\n    '''\n    return''.join(split(line))\n    \ndef reverse_string(line):\n    '''\n    Write a python function to reverse a string\n    '''\n    return line[::-1]\n    \ndef count_char_x(word, x):\n    '''\n    Write a python function to count the number of times a character x appears\n    in a string\n    '''\n    count = 0\n    for char in word:\n        if char == x:\n            count += 1\n    return count\n    \ndef count_char_in_string(str1, str2):\n    '''\n    Write a python function to count the number of times a character appears\n    in a string\n    '''\n    count = 0\n    for char in str2:\n        if char == str1:\n            count += 1\n    return count\n    \ndef count_char_x_y(str1, str2, x, y):\n    '''\n    Write a python function to count the number of times a character x appears\n    in a string and then a character y appears in a string\n    '''\n    count = 0\n    for char in str2:\n        if char == x:\n            if char == y:\n                count += 1\n    return count\n    \ndef remove_char_from_string(str1, str2, char):\n    '''\n    Write a python function to remove a character from a string and then\n    return the modified string\n    '''\n    return str1[:str1.index(char)] + str1[str1.index(char) + 1:]\n    \ndef remove_char_from_string(str1, str2, char):\n    '''\n    Write a python function to remove a character from a string and then\n    return the modified string\n    '''\n    return str1[:str1.index(char)] + str1[str1.index(char) + 1:]\n    \ndef is_prime(num):\n    '''\n    Write a python function to check whether a number is prime or not\n    '''\n    if num == 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    \ndef all_factors(num):\n    '''\n    Write a python function to find all factors of a number.\n    '''\n    return [i for i in range(1, num + 1) if num % i == 0]\n    \ndef is_palindrome(word):\n    '''\n    Write a python function to check if a string is a palindrome\n    '''\n    return word == word[::-1]\n    \ndef is_anagram(word1, word2):\n    '''\n    Write a python function to check if a string is an anagram of another\n    string\n    '''\n    return sorted(word1) == sorted(word2)\n    \ndef rot13(word):\n    '''\n    Write a python function to implement Caesar Cipher encryption and decryption\n    '''\n    shift = 13\n    cipher = ''\n    for char in word:\n        if ord(char) >= 97 and ord(char) <= 122:\n            if ord(char) + shift > 122:\n                cipher += chr(96 + (ord(char) + shift - 122))\n            else:\n                cipher += chr(ord(char) + shift)\n        elif ord(char) >= 65 and ord(char) <= 90:\n            if ord(char) + shift > 90:\n                cipher += chr(64 + (ord(char) + shift - 90))\n            else:\n                cipher += chr(ord(char) + shift)\n        else:\n            cipher += char\n    return cipher\n    \ndef is_pangram(str1):\n    '''\n    Write a python function to check if a string is a pangram or not\n    '''\n    return len(set(str1)) == 26\n    \ndef run_tests():\n    '''\n    Run all tests\n    '''\n    assert split_and_join('this is a test') == 'this-is-a-test'\n    assert split_and_join('w3resource') == 'w3-resource'\n    assert reverse_string('hello') == 'olleh'\n    assert count_char_x('hello', 'l') == 1\n    assert count_char_x('hello', 'e') == 2\n    assert count_char_x('hello', 'h') == 1\n    assert count_char_x('hello', 'o') == 1\n    assert count_char_in_string('hello', 'e') == 2\n    assert count_char_in_string('hello', 'h') == 1\n    assert count_char_in_string('hello', 'l') == 1\n    assert count_char_in_string('hello', 'o') == 1\n    assert count_char_in_string('hello', 'E') == 0\n    assert count_char_x_y('hello', 'e', 'h', 'e') == 1\n    assert remove_char_from_string('hello', 'e', 'l') == 'heo'\n    assert remove_char_from_string('hello', 'e', 'h') == 'ell'\n    assert is_palindrome('racecar') == True\n    assert is_palindrome('stop') == False\n    assert is_prime(13) == True\n    assert is_prime(4) == False\n    assert all_factors(42) == [2,3,2,6]\n    assert all_factors(30) == [2,3,5]\n    assert is_anagram('sail', 'list') == True\n    assert is_anagram('list','sail') == True\n    assert is_anagram('list', 'letters') == False\n    assert is_anagram('Listen', 'Silent') == True\n    assert is_anagram('Listen','silent') == False\n    assert is_anagram('Listen', 'Silent') == True\n    assert is_anagram('', '') == True\n    assert is_anagram('', 'A') == False\n    assert rot13('This is a test') == 'Guvf vf zlgrlzf'\n    assert rot13('Test') == 'Qedo1'\n    assert rot13('Test') == 'Qedo1'\n    assert rot13('A') == 'A'\n    assert rot13('Z') == 'Z'\n    assert rot13('X') == 'X'\n    assert rot13('O') == 'O'\n    assert rot13('t') == 't'\n    assert rot13('o') == 'o'\n    assert rot13('T') == 'T'\n    assert rot13('l') == 'l'\n    assert rot13('e') == 'e'\n    assert rot13('E') == 'E'\n    assert rot13('w') == 'w'\n    assert rot13('r') == 'r'\n    assert rot13('x') == 'x'\n    assert rot13('x') == 'x'\n    assert rot13('r') == 'r'\n    assert rot13('h') == 'h'\n    assert rot13('I') == 'I'\n    assert rot13('R') == 'R'\n    assert rot13('n') == 'n'\n    assert rot13('e') == 'e'\n    assert rot13('N') == 'N'\n    assert rot13('h') == 'h'\n    assert rot13('a') == 'a'\n    assert rot13('M') == 'M'\n    assert rot13('y') == 'y'\n    assert rot13('a') == 'a'\n    assert rot13('Y') == 'Y'\n    assert rot13('y') == 'y'\n    assert rot13('t') == 't'\n    assert rot13('I') == 'I'\n    assert rot13('R') == 'R'\n    assert rot13('n') == 'n'\n    assert rot13('e') == 'e'\n    assert rot13('N') == 'N'\n    assert rot13('h') == 'h'\n    assert rot13('a') == 'a'\n    assert rot13('M') == 'M'\n    assert rot13('y') == 'y'\n    assert rot13("
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # return [char for char in word]\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # edge case: n <= 9\n    if n <= 9:\n        return n\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(d) for d in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert n >= 0\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return (n%10) + sum_digits(n//10)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(c) for c in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n / 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n / 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0 or len(list1) == 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i - 1] > list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\ndef ispermutation(str1,str2):\n    '''\n    Write a function to check whether two strings are permutations of each other or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    return sorted(str1) == sorted(str2)\ndef isstringpermutation(str1,str2):\n    '''\n    Write a function to check whether two strings are permutations of each other or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = str1.lower()\n    str2 = str2.lower()\n    dict1 = {}\n    dict2 = {}\n    for i in str1:\n        dict1[i] = dict1.get(i, 0) + 1\n    for i in str2:\n        dict2[i] = dict2.get(i, 0) + 1\n    return dict1 == dict2\ndef isstringrotation(str1,str2):\n    '''\n    Write a function to check whether two strings are rotations of each other or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    n = len(str1)\n    return str1 in str2 + str2\ndef isrotation(str1,str2):\n    '''\n    Write a function to check whether two strings are rotations of each other or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    n = len(str1)\n    if n > 1:\n        for i in range(n - 1):\n            if str1[i:] + str1[:i] == str2:\n                return True\n    return False\ndef ispalin(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not\n    '''\n    if len(str1) < 2:\n        return True\n    elif str1[0] == str1[len(str1) - 1]:\n        return ispalin(str1[1:-1])\n    else:\n        return False\ndef findLongestRepeatingSubstring(str1):\n    '''\n    Write a function to find the longest substring that is repeated more than once in a string.\n    '''\n    dict1 = {}\n    for i in str1:\n        dict1[i] = dict1.get(i, 0) + 1\n    result = ''\n    for i in dict1:\n        if dict1[i] > 1:\n            return result\n    return str1\ndef findCommonChars(str1,str2):\n    '''\n    Write a function to find the smallest substring in str1 which is a common substring of str2 and return it.\n    '''\n    if len(str1) < len(str2):\n        str1,str2 = str2,str1\n    dict1 = {}\n    for i in str1:\n        dict1[i] = dict1.get(i, 0) + 1\n    result = ''\n    for i in str2:\n        dict2 = {}\n        dict2[i] = dict2.get(i, 0) + 1\n        if dict1 == dict2:\n            result += i\n    return result\ndef findCommonChars2(str1,str2):\n    '''\n    Write a function to find the smallest substring in str1 which is a common substring of str2 and return it.\n    '''\n    if len(str1) < len(str2):\n        str1,str2 = str2,str1\n    dict1 = {}\n    for i in str1:\n        dict1[i] = dict1.get(i, 0) + 1\n    result = ''\n    for i in str2:\n        dict2 = {}\n        dict2[i] = dict2.get(i, 0) + 1\n        if dict1 == dict2:\n            result += i\n    return result\ndef findSubstring(str1,str2):\n    '''\n    Write a function to find all the start indices of the substrings of str1 that are anagrams of str2.\n    '''\n    if len(str1) < len(str2):\n        str1,str2 = str2,str1\n    dict1 = {}\n    for i in str1:\n        dict1[i] = dict1.get(i, 0) + 1\n    result = []\n    for i in range(len(str1) - len(str2) + 1):\n        dict2 = {}\n        for j in range(len(str2)):\n            dict2[str2[j]] = dict2.get(str2[j], 0) + 1\n        if dict1 == dict2:\n            result.append(i)\n    return result\ndef findSubstring2(str1,str2):\n    '''\n    Write a function to find all the start indices of the substrings of str1 that are anagrams of str2.\n    '''\n    if len(str1) < len(str2):\n        str1,str2 = str2,str1\n    dict1 = {}\n    for i in str1:\n        dict1[i] = dict1.get(i, 0) + 1\n    result = []\n    for i in range(len(str1) - len(str2) + 1):\n        dict2 = {}\n        for j in range(len(str2)):\n            dict2[str2[j]] = dict2.get(str2[j], 0) + 1\n        if dict1 == dict2:\n            result.append(i)\n    return result\ndef findSubstring3(str1,str2):\n    '''\n    Write a function to find all the start indices of the substrings of str1 that are anagrams of str2.\n    '''\n    if len(str1) < len(str2):\n        str1,str2 = str2,str1\n    dict1 = {}\n    for i in str1:\n        dict1[i] = dict1.get(i, 0) + 1\n    result = []\n    for i in range(len(str1) - len(str2) + 1):\n        dict2 = {}\n        for j in range(len(str2)):\n            dict2[str2[j]] = dict2.get(str2[j], 0) + 1\n        if dict1 == dict2:\n            result.append(i)\n    return result\ndef findSubstring4(str1,str2):\n    '''\n    Write a function to find all the start indices of the substrings of str1 that are anagrams of str2.\n    '''\n    if len(str1) < len(str2):\n        str1,str2 = str2,str1\n    dict1 = {}\n    for i in str1:\n        dict1[i] = dict1.get(i, 0) + 1\n    result = []\n    for i in range(len(str1) - len(str2) + 1):\n        dict2 = {}\n        for j in range(len(str2)):\n            dict2[str2[j]] = dict2.get(str2[j], 0) + 1\n        if dict1 == dict2:\n            result.append(i)\n    return result\ndef findSubstring5(str1,str2):\n    '''\n    Write a function to find all the start indices of the substrings of str1 that are anagrams of str2.\n    '''\n    if len(str1) < len(str2):\n        str1,str2 = str2,str1\n    dict1 = {}\n    for i in str1:\n        dict1[i] = dict1.get(i, 0) + 1\n    result = []\n    for i in range(len(str1) - len(str2) + 1):\n        dict2 = {}\n        for j in range(len(str2)):\n            dict2[str2[j]] = dict2.get(str2[j], 0) + 1\n        if dict1 == dict2:\n            result.append(i)\n    return result\ndef findSubstring6(str1,str2):\n    '''\n    Write a function to find all the start indices of the substrings of str1 that are anagrams of str2."
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag=0\n    for i in range(1,len(list1)):\n        if list1[i-1]>list1[i]:\n            flag=1\n            break\n    if flag==0:\n        print 'Yes'\n    else:\n        print 'No'\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return False\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        return list1[0] < list1[1] and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = 1\n    if len(list1) <= 1:\n        flag = 0\n        return flag\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            flag = 0\n            return flag\n    return flag\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    list1 = sorted(list1)\n    if list1 == list1[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n    \ndef full_list(length):\n    '''\n    Write a function to create a list of N dictionaries, each containing the keys 'name' and 'city' with random values.\n    '''\n    return [{'name': str(random.randint(0, 100)), 'city': str(random.randint(0, 100))} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dictionaries = []\n    for i in range(length):\n        dictionaries.append({})\n    return dictionaries\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    out = []\n    for i in range(length):\n        out.append({})\n    return out\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0, len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def list_sort(list2):\n        return sorted(list2)\n    new_list = [list_sort(i) for i in list1]\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    import itertools\n    list2 = list(itertools.chain.from_iterable(list1))\n    return sorted(list2)\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted([sorted(i) for i in list1])\n    \n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    from itertools import groupby\n    list2 = [list(group) for key, group in groupby(list1, lambda x: x[0])]\n    for index, i in enumerate(list2):\n        i.sort()\n    list2.sort()\n    final_list = []\n    for index, i in enumerate(list2):\n        final_list.append(i[0])\n    return final_list\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for each_list in list1:\n        for i in range(len(each_list)-1):\n            if each_list[i] > each_list[i+1]:\n                temp = each_list[i]\n                each_list[i] = each_list[i+1]\n                each_list[i+1] = temp\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1,key = lambda x:x[0])\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key = lambda lst: sorted(lst, key = lambda x: x))\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for item in list1:\n        sorted_list.append(sorted(item))\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublist(sublist):\n        sort_sublist.list1 = sublist\n        return sorted(sublist)\n    sort_sublist.list1 = list1\n    return [sort_sublist(sublist) for sublist in list1]\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    n = len(nums)\n    result = []\n    for i in range(n):\n        if nums[i] not in result:\n            result.append(nums[i])\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    s = []\n    for i in nums:\n        if i not in s:\n            s.append(i)\n    return s\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return list(unique_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_num = []\n    for i in nums:\n        if i not in unique_num:\n            unique_num.append(i)\n    return unique_num\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return len(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n    \n    \n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a number\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    dict_unique_nums = {}\n    for num in nums:\n        if num not in dict_unique_nums:\n            dict_unique_nums[num] = 1\n        else:\n            dict_unique_nums[num] += 1\n    return [num for num in dict_unique_nums if dict_unique_nums[num] == 1]\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_of_unique = 1\n    for number in list_data:\n        if list_data.count(number) == 1:\n            product_of_unique = product_of_unique*number\n    return product_of_unique\n    \nif __name__ == '__main__':\n    '''\n    Write a python program to check the given list contains all the unique elements or not.\n    '''\n    test_list = [1, 2, 2, 4, 5, 5, 6, 1]\n    print 'Given list: ',test_list\n    print 'Unique elements in the list: ',unique_product(test_list)\n    \n    \n    \n    "
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_set = set(list_data)\n    return(reduce(lambda x, y: x*y, unique_set))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x,y: x*y, list_data, 1)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x,y:x*y, [i for i in set(list_data)])\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x,y: x*y, list(set(list_data)))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    import itertools\n    return list(itertools.product(*list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = 1\n    for i in list_data:\n        if list_data.count(i) == 1:\n            unique_product = unique_product * i\n    return unique_product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    import operator\n    result_list = []\n    for i in list_data:\n        if i not in result_list:\n            result_list.append(i)\n    return reduce(operator.mul, result_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    # num = 1\n    # for i in range(len(list_data)):\n    #     num = num * list_data[i]\n    #     print(num)\n    # return num\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #r = radius\n    #h = height\n    #SA = 2 * pi * (r**2 + r * h + h**2)\n    SA = 2 * pi * (r + h)\n    return SA\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*pi*r*h\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    r = float(r)\n    h = float(h)\n    area = pi*r**2 + 2*pi*r*h + 2*pi*(r**2 + h**2)\n    print(\"Surface area of cylinder is %f.\" %area)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * (r**2 + h**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * r * 2 + 2 * pi * r**2 + 2 * pi * h * r\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        return False\n    else:\n        for i in range(len(B)):\n            if B[i] in A:\n                A=A[i:]\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    sublist_array = False\n    for sublist in B:\n        if sublist in A:\n            sublist_array = True\n            break\n    return sublist_array\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return 0\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return set(A) < set(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(B)>len(A)):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if(B[i] not in A):\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            j = A.index(A[i])\n            if j == 0:\n                return 1\n            elif A[i] == A[j-1]:\n                continue\n            else:\n                return 0\n    return 0\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(B) \n    m = len(A) \n    for i in range(n): \n        if A[i]==B[i]: \n            return 1 \n        if i >= m: \n            return 0 \n    return is_Sub_Array(A[i:],B) \n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n    for i in range(len(B)): \n        if B[i]!= A[i]: \n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    else:\n        for i in xrange(0,len(B)):\n            if A[i]==B[i]:\n                return True\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    return B in A\n    \ndef is_Consecutive(A):\n    '''\n    Write a python function to check whether a given array is consecutive or not.\n    '''\n    length = len(A)\n    for i in range(0,length-1):\n        if (A[i+1] - A[i])!= 1:\n            return False\n    return True\n    \ndef rotate_array(A,d):\n    '''\n    Write a python function to rotate a given array by d positions.\n    '''\n    if d == 0:\n        return\n    if d >= len(A):\n        d = d%len(A)\n    return A[-d:] + A[:-d]\n    \ndef check_prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    for i in range(2,int(n**0.5+1)):\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_pandigital(number):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    num = str(number)\n    count = 0\n    for i in range(0,len(num)):\n        if num[i] == '0' or int(num[i]) == 0:\n            count += 1\n    if count == len(num):\n        return False\n    else:\n        return True\n    \ndef print_duplicates(A):\n    '''\n    Write a python function to find duplicates in an array.\n    '''\n    for i in range(0,len(A)):\n        j = i+1\n        while j < len(A):\n            if A[i] == A[j]:\n                print A[i]\n            j += 1\n    \ndef check_palindrome(A):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    for i in range(0,int(len(A)/2)):\n        if A[i]!= A[-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = n//10\n    if n == 0:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result=1\n    while n>0:\n        result=result*n\n        n=n-1\n    return result\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    #TODO:\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    Factorial = 1\n    for i in range(2, n+1):\n        Factorial *= i\n    return Factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n    \ndef last_Digit_Power(n,p):\n    '''\n    Write a python function to find the last digit in power of a given number.\n    '''\n    if p==0:\n        return 1\n    else:\n        return last_Digit_Power(n,p-1)*n\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==1: \n        return 1\n    else: \n        return n*last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #factorial(n) = n * (n - 1) * (n - 2) *... * 1\n    #last digit in factorial(n) = factorial(n) / 10^k \n    #where k is the number of digits in factorial(n)\n    return (factorial(n) / (10 ** len(str(factorial(n))))) % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n!= 1:\n        if n%10 == 0:\n            n = n/10\n        else:\n            break\n    return n\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\n    return None\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for sublist in zip(list1,list2,list3) for item in sublist]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list=[]\n    for i in range(len(list1)):\n        final_list.append(list1[i])\n        final_list.append(list2[i])\n        final_list.append(list3[i])\n    return final_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [val for elem in zip(list1,list2,list3) for val in elem]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    n = len(list1)\n    interleaved = []\n    for i in range(0,n):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return'same'\n    else:\n        return 'different'\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = set()\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar.add(i)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #my code\n    #print test_tup1[0]\n    #print test_tup2[0]\n    if test_tup1[0] == test_tup2[0]:\n        return [False, False]\n    else:\n        list1 = []\n        list2 = []\n        for i in test_tup1:\n            if i not in test_tup2:\n                list1.append(i)\n        for i in test_tup2:\n            if i not in test_tup1:\n                list2.append(i)\n        return [list1, list2]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [x for x in test_tup1 if x not in test_tup2]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for t1, t2 in zip(test_tup1, test_tup2):\n        if t1 == t2:\n            continue\n        else:\n            print(\"{} : {}\".format(t1, t2))\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i, j in zip(test_tup1, test_tup2):\n        if i!= j:\n            return i\n        else:\n            pass\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1, s2 = set(test_tup1), set(test_tup2)\n    return s1 ^ s2\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    for i in test_tup1:\n        if i in test_tup2:\n            test_tup1.remove(i)\n            test_tup2.remove(i)\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff.append(test_tup1[i])\n    return diff\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    if len(lst1)!= len(lst2):\n        raise ValueError('Given two tuples have different lengths')\n    result = []\n    for x,y in zip(lst1,lst2):\n        if x!= y:\n            result.append((x,y))\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # test_tuple = (1,2,3,4,5,6,7,8,9,10)\n    # even_fnc = lambda x: x%2 == 0\n    # output = (2,4,6,8,10)\n    return tuple([e for e in test_tuple if even_fnc(e)])\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple: \n        if type(i) == int or type(i) == float: \n            if even_fnc(i): \n                yield i\n        else: \n            yield from even_ele(i, even_fnc) \n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create new tuple from removing uneven elements\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        if len(test_tuple) > 1:\n            even_list = list(even_fnc(test_tuple))\n            return tuple(even_list)\n        else:\n            return tuple(even_fnc(test_tuple))\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #return list(filter(lambda x: not even_fnc(x), test_tuple))\n    return filter(even_fnc, test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple([x for x in test_tuple if x % 2 == 0])\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    mixed_tuple = test_tuple\n    if type(mixed_tuple) == tuple:\n        for i in range(len(mixed_tuple)):\n            if type(mixed_tuple[i]) == tuple:\n                mixed_tuple[i] = even_ele(mixed_tuple[i], even_fnc)\n            elif type(mixed_tuple[i]) == str:\n                if even_fnc(mixed_tuple[i]):\n                    mixed_tuple[i] = even_fnc(mixed_tuple[i])\n    elif type(mixed_tuple) == str:\n        if even_fnc(mixed_tuple):\n            mixed_tuple = even_fnc(mixed_tuple)\n    return mixed_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple) == tuple:\n        new_tuple = []\n        for ele in test_tuple:\n            if even_fnc(ele):\n                new_tuple.append(ele)\n        return tuple(new_tuple)\n    else:\n        return even_fnc(test_tuple)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = float(b)\n    b = float(s)\n    side = a * b\n    bbox = a * 2\n    return side + bbox\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n    \ndef volume(b,s): \n    '''\n    Write a python function to find the volume of a cube with a given base edge and height.\n    '''\n    return b**2*s\n    \ndef perimeter(b,h): \n    '''\n    Write a python function to find the perimeter of a cube with a given base edge and height.\n    '''\n    return 6*b + 2*b*h\n    \ndef main():\n    '''\n    Write a python function to find the perimeter of a cube with a given base edge and height.\n    '''\n    while True:\n        try:\n            base = int(raw_input(\"Enter the base edge: \"))\n            height = int(raw_input(\"Enter the height: \"))\n            break\n        except ValueError:\n            print \"Invalid value. Try again.\"\n            \n    print \"The perimeter is: \", perimeter(base,height)\n    print \"The surface area is: \", surface_Area(base,height)\n    print \"The volume is: \", volume(base,height)\n    \nmain("
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Your Code Here\n    return(b**2*4+b*s**2)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)\ndef pyramidal_volume(b,h):\n    '''\n    Write a python function to find the volume of a pyramid with a given base edge and height.\n    '''\n    return (b*h)\ndef get_my_name():\n    '''\n    Write a python function that returns your name\n    '''\n    return \"Sachin\"\ndef get_my_age():\n    '''\n    Write a python function that returns your age\n    '''\n    return \"18\"\ndef cube_volume(side):\n    '''\n    Write a python function to find the volume of a cube with a given side.\n    '''\n    return (side*side*side)\ndef volume_of_cuboid(l,b,h):\n    '''\n    Write a python function to find the volume of a cuboid with given length, breadth, height.\n    '''\n    return (l*b*h)\ndef volume_of_sphere(r):\n    '''\n    Write a python function to find the volume of a sphere with a given radius.\n    '''\n    return (4.0*3.14159265359*r*r*r)\ndef get_previous_tuple(t):\n    '''\n    Write a python function to find the previous tuple of a tuple of two elements in the list of tuples.\n    '''\n    return (t[0],t[1]-1)\ndef get_next_tuple(t):\n    '''\n    Write a python function to find the next tuple of a tuple of two elements in the list of tuples.\n    '''\n    return (t[0],t[1]+1)\ndef length_of_a_list(l):\n    '''\n    Write a python function to find the length of a list.\n    '''\n    return len(l)\ndef max_of_list(l):\n    '''\n    Write a python function to find the maximum value of a list.\n    '''\n    return max(l)\ndef sum_of_list(l):\n    '''\n    Write a python function to find the sum of all the elements in a list.\n    '''\n    return sum(l)\ndef count_occurence_of_element_in_list(e,l):\n    '''\n    Write a python function to count the occurence of a given element in a list.\n    '''\n    return l.count(e)\ndef get_second_element(l):\n    '''\n    Write a python function to find the second element of a list.\n    '''\n    return l[1]\ndef list_of_digit(n):\n    '''\n    Write a python function to find the digits of a given integer.\n    '''\n    return [int(i) for i in str(n)]\ndef find_common_elements_in_two_list(l1,l2):\n    '''\n    Write a python function to find the common elements in two lists.\n    '''\n    return list(set(l1) & set(l2))\ndef prime_number(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\ndef find_next_prime_number(n):\n    '''\n    Write a python function to find the next prime number after a given number.\n    '''\n    while True:\n        n = n+1\n        if prime_number(n):\n            return n\n    return n\ndef get_a_string(s):\n    '''\n    Write a python function to return a string in reverse order.\n    '''\n    return s[::-1]\ndef print_string_in_reverse_order(s):\n    '''\n    Write a python function to print a string in reverse order.\n    '''\n    print(s[::-1])\ndef sort_words_in_a_string(s):\n    '''\n    Write a python function to sort the words in a string.\n    '''\n    return''.join(sorted(s.split()))\ndef print_alphabetical_order(s):\n    '''\n    Write a python function to print the alphabetically ordered characters in a string.\n    '''\n    return ''.join(sorted(s))\ndef word_to_ascii(s):\n    '''\n    Write a python function to print the ascii of the characters in a word.\n    '''\n    return ''.join([ord(c) for c in s])\ndef print_ascii_of_characters_in_a_string(s):\n    '''\n    Write a python function to print the ascii of the characters in a string.\n    '''\n    return ''.join(map(ord,s))\ndef ascii_to_word(s):\n    '''\n    Write a python function to print the word of the ascii of the characters in a string.\n    '''\n    return ''.join(map(chr,map(int,s.split())))\ndef print_word_after_k_number(s,k):\n    '''\n    Write a python function to print the word after the occurrence of a given number.\n    '''\n    return s[s.index(k)+len(k):]\ndef print_number_of_occurences(s,k):\n    '''\n    Write a python function to print the number of occurences of a given character.\n    '''\n    return s.count(k)\ndef print_count_of_occurences_in_a_string(s,k):\n    '''\n    Write a python function to print the count of occurences of a given character in a string.\n    '''\n    return s.count(k)\ndef print_previous_character(s,k):\n    '''\n    Write a python function to print the previous character in a string.\n    '''\n    return s[s.index(k)-1]\ndef print_next_character(s,k):\n    '''\n    Write a python function to print the next character in a string.\n    '''\n    return s[s.index(k)+1]\ndef print_intermediate_characters(s,k1,k2):\n    '''\n    Write a python function to print the intermediate characters in a string.\n    '''\n    return s[s.index(k1):s.index(k2)+1]\ndef print_string_without_first_and_last_characters(s):\n    '''\n    Write a python function to print the string without first and last characters.\n    '''\n    return s[1:-1]\ndef print_number_of_elements_in_a_string(s):\n    '''\n    Write a python function to print the number of elements in a string.\n    '''\n    return len(s.split())\ndef print_first_and_last_characters(s):\n    '''\n    Write a python function to print the first and last characters of a string.\n    '''\n    return s[0],s[-1]\ndef remove_a_character_from_a_string(s,k):\n    '''\n    Write a python function to remove a character from a string.\n    '''\n    return s.replace(k,'')\ndef get_dictionary_of_keys_and_values(d):\n    '''\n    Write a python function to return a dictionary with keys and values of the dictionary.\n    '''\n    return dict(d)\ndef get_unique_words(s):\n    '''\n    Write a python function to return a list of unique words in a string.\n    '''\n    return list(set(s.split()))\ndef words_in_alphabetical_order(s):\n    '''\n    Write a python function to return a string in alphabetical order.\n    '''\n    return''.join(sorted(s.split()))\ndef get_number_of_digits_in_a_string(s):\n    '''\n    Write a python function to return the number of digits in a string.\n    '''\n    return len(s)\ndef print_file(s):\n    '''\n    Write a python function to print a file.\n    '''\n    return open(s)\ndef print_word"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*4\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((b**2) + (s**2))*3\n    \n    \ndef volume(b,s): \n    '''\n    Write a python function to find the volume of a pyramid with a given base edge and height.\n    '''\n    return b*s\n    \nprint(surface_Area(5,6))\nprint(volume(5,6))\nprint(surface_Area(5,6))\nprint(volume(5,6))\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    return b*s\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for k,v in dict1.items():\n        if v!=None:\n            return False\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print 'Empty'\n    else:\n        print 'Not Empty'\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"This is a empty dictionary\")\n    else:\n        print(\"This is not a empty dictionary\")\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if(len(dict1)==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_dict_copy(dict1):\n    '''\n    Write a function to return a copy of a dictionary\n    '''\n    copy_dict = dict(dict1)\n    return copy_dict\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\ndef my_print(msg):\n    print(msg)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2*(2*num -1))/((num+1)*(num-1))\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    assert num >= 0\n    if num <= 1:\n        return 1\n    else:\n        return catalan_number(num - 1) * num / 2\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return (\n        (5 * (2 * num) + 1) * catalan_number(num - 1) /\n        (4 * num * (num + 1))\n    )\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # this is a dynamic programming based solution\n    # since this is a recursive approach\n    # n represents the ith catalan number\n    # memo[i] represents the value of ith catalan number\n    memo = [0 for i in range(num+1)]\n    memo[0] = 1\n    memo[1] = 1\n    memo[2] = 2\n    for i in range(3,num+1):\n        memo[i] = memo[i-1]*(2*i-1)/(i+1)\n    return memo[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num > 1:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = [0]*(num+1)\n    c[0] = 1\n    for n in xrange(1, num+1):\n        c[n] = sum([c[k]*c[n-k-1] for k in xrange(n)])\n    return c[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n    else:\n        return catalan_number(num - 1) * (num + 1) / 2\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    num = int(num)\n    if num == 0:\n        return 1\n    if num < 0:\n        return -1\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r\"(?<![a-zA-Z])ly$\")\n    result = regex.findall(text)\n    for i in result:\n        print(i)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    my_re = re.compile(r'(.*ly)$',re.IGNORECASE)\n    mo = my_re.search(text)\n    print(mo.group())\n    if mo:\n        print(mo.start(0))\n    else:\n        print('not found')\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex_str = 'ly$'\n    # Return first occurrence of adverb ending with 'ly'\n    return re.search(regex_str, text)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    return pos\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    r = re.compile(r'[A-Za-z]+ly')\n    return r.findall(text)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    m = re.search(r'[ly]ly$',text)\n    if m:\n        print m.group(0),m.start(0),m.end(0)\ndef find_words_len_greater_than_n(string,n):\n    '''\n    Write a function that will find all the words in the string that are larger than n.\n    '''\n    m = re.findall(r'\\w+',string)\n    for i in m:\n        if len(i)>n:\n            print i\ndef find_digits_in_a_string(string):\n    '''\n    Write a function that will find all the digits in a string.\n    '''\n    m = re.findall(r'\\d+',string)\n    for i in m:\n        print i\ndef find_only_digits(string):\n    '''\n    Write a function that will find all the digits in a string and print them.\n    '''\n    m = re.findall(r'\\d+',string)\n    for i in m:\n        print i\ndef find_only_letters_and_digits(string):\n    '''\n    Write a function that will find all the digits and letters in a string and print them.\n    '''\n    m = re.findall(r'\\w+',string)\n    for i in m:\n        print i\ndef find_vowels_and_consonants(string):\n    '''\n    Write a function that will find all the vowels and consonants in a string and print them.\n    '''\n    m = re.findall(r'[^aeiouAEIOU]',string)\n    for i in m:\n        print i\ndef find_vowels_in_a_string(string):\n    '''\n    Write a function that will find all the vowels in a string and print them.\n    '''\n    m = re.findall(r'[aeiouAEIOU]',string)\n    for i in m:\n        print i\ndef find_consonants_in_a_string(string):\n    '''\n    Write a function that will find all the consonants in a string and print them.\n    '''\n    m = re.findall(r'[^aeiouAEIOU]',string)\n    for i in m:\n        print i\ndef find_small_letters_in_a_string(string):\n    '''\n    Write a function that will find all the small letters in a string and print them.\n    '''\n    m = re.findall(r'[a-z]',string)\n    for i in m:\n        print i\ndef find_capital_letters_in_a_string(string):\n    '''\n    Write a function that will find all the capital letters in a string and print them.\n    '''\n    m = re.findall(r'[A-Z]',string)\n    for i in m:\n        print i\ndef find_big_letters_in_a_string(string):\n    '''\n    Write a function that will find all the big letters in a string and print them.\n    '''\n    m = re.findall(r'[A-Z]',string)\n    for i in m:\n        print i\ndef find_all_letters_in_a_string(string):\n    '''\n    Write a function that will find all the letters in a string and print them.\n    '''\n    m = re.findall(r'[a-zA-Z]',string)\n    for i in m:\n        print i\ndef find_numbers_in_a_string(string):\n    '''\n    Write a function that will find all the numbers in a string and print them.\n    '''\n    m = re.findall(r'[0-9]',string)\n    for i in m:\n        print i\ndef find_all_numbers_in_a_string(string):\n    '''\n    Write a function that will find all the numbers in a string and print them.\n    '''\n    m = re.findall(r'[0-9]+',string)\n    for i in m:\n        print i\ndef find_numbers_of_a_particular_length_in_a_string(string,n):\n    '''\n    Write a function that will find all the numbers of a particular length in a string and print them.\n    '''\n    m = re.findall(r'[0-9]+'+'{'+str(n)+'}',string)\n    for i in m:\n        print i\ndef find_all_numbers_of_a_particular_length_in_a_string(string,n):\n    '''\n    Write a function that will find all the numbers of a particular length in a string and print them.\n    '''\n    m = re.findall(r'[0-9]+'+'{'+str(n)+'}',string)\n    for i in m:\n        print i\ndef find_all_numbers_of_a_particular_length_in_a_string_with_range(string,lower,upper):\n    '''\n    Write a function that will find all the numbers of a particular length in a string and print them.\n    '''\n    m = re.findall(r'[0-9]+'+'{'+str(lower)+','+str(upper)+'}',string)\n    for i in m:\n        print i\ndef find_all_numbers_of_a_particular_length_in_a_string_with_range(string,lower,upper):\n    '''\n    Write a function that will find all the numbers of a particular length in a string and print them.\n    '''\n    m = re.findall(r'[0-9]+'+'{'+str(lower)+','+str(upper)+'}',string)\n    for i in m:\n        print i\ndef find_all_numbers_in_a_string_with_range(string,lower,upper):\n    '''\n    Write a function that will find all the numbers in a string and print them.\n    '''\n    m = re.findall(r'[0-9]+'+'{'+str(lower)+','+str(upper)+'}',string)\n    for i in m:\n        print i\ndef find_all_numbers_in_a_string_with_range(string,lower,upper):\n    '''\n    Write a function that will find all the numbers in a string and print them.\n    '''\n    m = re.findall(r'[0-9]+'+'{'+str(lower)+','+str(upper)+'}',string)\n    for i in m:\n        print i\ndef find_all_numbers_in_a_string_with_range(string,lower,upper):\n    '''\n    Write a function that will find all the numbers in a string and print them.\n    '''\n    m = re.findall(r'[0-9]+'+'{'+str(lower)+','+str(upper)+'}',string)\n    for i in m:\n        print i\ndef find_all_numbers_in_a_string_with_range(string,lower,upper):\n    '''\n    Write a function that will find all the numbers in a string and print them.\n    '''\n    m = re.findall(r'[0-9]+'+'{'+str(lower)+','+str(upper)+'}',string)\n    for i in m:\n        print i\ndef find_all_numbers_in_a_string_with_range(string,lower,upper):\n    '''\n    Write a function that will find all the numbers in a string and print them.\n    '''\n    m = re.findall(r'[0-9]+'+'{'+str(lower)+','+str(upper)+'}',string)\n    for i in m:\n        print i\ndef find_all_numbers_in_a_string_with_range(string,lower,upper):\n    '''\n    Write a function that will find all the numbers in a string and print them.\n    '''\n    m = re.findall(r'[0-9]+'+'{'+str(lower)+','+str(upper)+'}',string"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    a=re.findall('\\s([a-z]*ly)\\s',text)\n    return a\ndef find_first_vowel(text):\n    '''\n    Write a function to find the first vowel ending with ay and its positions in a given string.\n    '''\n    b=re.findall('\\s([a-z]*ay)\\s',text)\n    return b\ndef find_first_vowel_more(text):\n    '''\n    Write a function to find the first vowel ending with ay and its positions in a given string.\n    '''\n    b=re.findall('\\s([a-z]*ay)\\s',text)\n    return b\ndef find_last_vowel(text):\n    '''\n    Write a function to find the first vowel ending with ay and its positions in a given string.\n    '''\n    b=re.findall('\\s([a-z]*ay)\\s',text)\n    return b\ndef find_last_vowel_more(text):\n    '''\n    Write a function to find the first vowel ending with ay and its positions in a given string.\n    '''\n    b=re.findall('\\s([a-z]*ay)\\s',text)\n    return b\ndef find_number(text):\n    '''\n    Write a function to find the first number ending with ay and its positions in a given string.\n    '''\n    b=re.findall('\\s([0-9]*ay)\\s',text)\n    return b\ndef find_number_more(text):\n    '''\n    Write a function to find the first number ending with ay and its positions in a given string.\n    '''\n    b=re.findall('\\s([0-9]*ay)\\s',text)\n    return b\ndef find_words(text):\n    '''\n    Write a function to find the first word ending with ay and its positions in a given string.\n    '''\n    b=re.findall('\\s([a-z]*ay)\\s',text)\n    return b\ndef find_words_more(text):\n    '''\n    Write a function to find the first word ending with ay and its positions in a given string.\n    '''\n    b=re.findall('\\s([a-z]*ay)\\s',text)\n    return b\ndef find_words_first(text):\n    '''\n    Write a function to find the first word ending with ay and its positions in a given string.\n    '''\n    b=re.findall('\\s([a-z]*ay)\\s',text)\n    return b\ndef find_words_last(text):\n    '''\n    Write a function to find the first word ending with ay and its positions in a given string.\n    '''\n    b=re.findall('\\s([a-z]*ay)\\s',text)\n    return b\ndef find_words_last_more(text):\n    '''\n    Write a function to find the first word ending with ay and its positions in a given string.\n    '''\n    b=re.findall('\\s([a-z]*ay)\\s',text)\n    return b\ndef count_words(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_more(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_first(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_more(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_first_more(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first_more(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first_last(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first_last_more(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first_last_first(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first_last_first_more(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first_last_first_last(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first_last_first_last_more(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first_last_first_last_first_more(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first_last_first_last_first_last_more(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first_last_first_last_first_last_first_more(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first_last_first_last_first_last_first_last_more(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\s',text)\n    return b\ndef count_words_last_first_last_first_last_first_last_first_last_first_more(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    b=re.findall('\\s([a-z]+)\\"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_list = []\n    for i, word in enumerate(text):\n        if word == \"ly\":\n            match = re.search(r\"ly$\", word)\n            if match:\n                adverb_list.append(i)\n    return adverb_list\n    \nprint(find_adverbs(\"They are not so ly.\"))\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if text==\"\":\n        return None\n    if text==\"ly\":\n        return [\"ly\",0]\n    if text[-2:]==\"ly\" and text[-3:]!=\"lyly\":\n        return [text,len(text)-2]\n    if text[-3:]==\"lyly\":\n        return [text,len(text)-3]\n    if text[-2:]==\"ly\" and text[-3:]!=\"lyly\":\n        return [text,len(text)-2]\n    if text[-1:]==\"y\" and text[-2:]!=\"ly\":\n        return [text,len(text)-1]\n    if text[-1:]==\"y\" and text[-2:]==\"ly\":\n        return [text,len(text)-2]\n    return None\ndef find_adverb_subs(text):\n    '''\n    Write a function to find all the possible substrings of a given string that can be the start of an adverb.\n    '''\n    if text==\"\":\n        return None\n    if text[-1:]!=\"y\":\n        return None\n    if text[-2:]==\"ly\":\n        return [\"ly\"]\n    if text[-3:]==\"lyly\":\n        return [\"lyly\"]\n    if text[-2:]==\"ly\" and text[-3:]!=\"lyly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]!=\"ly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]==\"ly\":\n        return [\"ly\"]\n    return None\ndef find_verb_subs(text):\n    '''\n    Write a function to find all the possible substrings of a given string that can be the start of a verb.\n    '''\n    if text==\"\":\n        return None\n    if text[-1:]!=\"y\":\n        return None\n    if text[-2:]==\"ly\":\n        return [\"ly\"]\n    if text[-3:]==\"lyly\":\n        return [\"lyly\"]\n    if text[-2:]==\"ly\" and text[-3:]!=\"lyly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]!=\"ly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]==\"ly\":\n        return [\"ly\"]\n    return None\ndef find_noun_subs(text):\n    '''\n    Write a function to find all the possible substrings of a given string that can be the start of a noun.\n    '''\n    if text==\"\":\n        return None\n    if text[-1:]!=\"y\":\n        return None\n    if text[-2:]==\"ly\":\n        return [\"ly\"]\n    if text[-3:]==\"lyly\":\n        return [\"lyly\"]\n    if text[-2:]==\"ly\" and text[-3:]!=\"lyly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]!=\"ly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]==\"ly\":\n        return [\"ly\"]\n    return None\ndef find_adverb_ngram(text):\n    '''\n    Write a function to find all the possible n-grams of a given string that can be the start of an adverb.\n    '''\n    if text==\"\":\n        return None\n    if text[-1:]!=\"y\":\n        return None\n    if text[-2:]==\"ly\":\n        return [\"ly\"]\n    if text[-3:]==\"lyly\":\n        return [\"lyly\"]\n    if text[-2:]==\"ly\" and text[-3:]!=\"lyly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]!=\"ly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]==\"ly\":\n        return [\"ly\"]\n    return None\ndef find_noun_ngram(text):\n    '''\n    Write a function to find all the possible n-grams of a given string that can be the start of a noun.\n    '''\n    if text==\"\":\n        return None\n    if text[-1:]!=\"y\":\n        return None\n    if text[-2:]==\"ly\":\n        return [\"ly\"]\n    if text[-3:]==\"lyly\":\n        return [\"lyly\"]\n    if text[-2:]==\"ly\" and text[-3:]!=\"lyly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]!=\"ly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]==\"ly\":\n        return [\"ly\"]\n    return None\ndef find_verb_ngram(text):\n    '''\n    Write a function to find all the possible n-grams of a given string that can be the start of a verb.\n    '''\n    if text==\"\":\n        return None\n    if text[-1:]!=\"y\":\n        return None\n    if text[-2:]==\"ly\":\n        return [\"ly\"]\n    if text[-3:]==\"lyly\":\n        return [\"lyly\"]\n    if text[-2:]==\"ly\" and text[-3:]!=\"lyly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]!=\"ly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]==\"ly\":\n        return [\"ly\"]\n    return None\ndef find_verb_ending(text):\n    '''\n    Write a function to find all the possible substrings of a given string that can be the end of a verb.\n    '''\n    if text==\"\":\n        return None\n    if text[-1:]!=\"y\":\n        return None\n    if text[-2:]==\"ly\":\n        return [\"ly\"]\n    if text[-3:]==\"lyly\":\n        return [\"lyly\"]\n    if text[-2:]==\"ly\" and text[-3:]!=\"lyly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]!=\"ly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]==\"ly\":\n        return [\"ly\"]\n    return None\ndef find_noun_ending(text):\n    '''\n    Write a function to find all the possible substrings of a given string that can be the end of a noun.\n    '''\n    if text==\"\":\n        return None\n    if text[-1:]!=\"y\":\n        return None\n    if text[-2:]==\"ly\":\n        return [\"ly\"]\n    if text[-3:]==\"lyly\":\n        return [\"lyly\"]\n    if text[-2:]==\"ly\" and text[-3:]!=\"lyly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]!=\"ly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]==\"ly\":\n        return [\"ly\"]\n    return None\ndef find_adverb_ending(text):\n    '''\n    Write a function to find all the possible substrings of a given string that can be the end of an adverb.\n    '''\n    if text==\"\":\n        return None\n    if text[-1:]!=\"y\":\n        return None\n    if text[-2:]==\"ly\":\n        return [\"ly\"]\n    if text[-3:]==\"lyly\":\n        return [\"lyly\"]\n    if text[-2:]==\"ly\" and text[-3:]!=\"lyly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]!=\"ly\":\n        return [\"ly\"]\n    if text[-1:]==\"y\" and text[-2:]==\"ly\":\n        return [\"ly\"]\n    return None\ndef find_adverb_or_end(text):\n    '''\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"ly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        print(match.start(), match.end())\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return list(heapq.nlargest(n,items,key=lambda item:item[1]))\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #n = input(\"Enter the number of items to be displayed: \")\n    #print(items)\n    #print(n)\n    items.sort(key=lambda x: x[1], reverse=True)\n    return items[0:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    n = n #int(n)\n    # items = [[1, 'a', 'b', 'c'], [1, 'b', 'c', 'd'], [1, 'c', 'd', 'e']]\n    maxHeap = []\n    for item in items:\n        heapq.heappush(maxHeap, (-1*item[1],item))\n    \n    finalList = []\n    for i in range(n):\n        finalList.append(heapq.heappop(maxHeap)[1])\n    print finalList\n    # finalList = []\n    # for i in range(n):\n    #     if len(maxHeap) == 0:\n    #         break\n    #     finalList.append(maxHeap[0][1])\n    #     heapq.heappop(maxHeap)\n    # print finalList\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    n=n\n    heap=[]\n    for i in range(len(items)):\n        heapq.heappush(heap,(items[i],i))\n    res=[]\n    for i in range(n):\n        res.append(heapq.heappop(heap))\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    output = []\n    for item in items:\n        if len(output) < n:\n            output.append(item)\n        else:\n            heapq.heapify(output)\n            if item > output[0]:\n                heapq.heappop(output)\n                heapq.heappush(output,item)\n    return output\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    top_n = []\n    for item in items:\n        if len(top_n) < n:\n            heapq.heappush(top_n, item)\n        else:\n            heapq.heappushpop(top_n,item)\n    return top_n\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if not items or n < 1:\n        return []\n    result = []\n    min_heap = []\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap,(item[1],item[0]))\n        else:\n            if min_heap[0][0] > item[1]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap,(item[1],item[0]))\n    while len(min_heap) > 0:\n        result.append(heapq.heappop(min_heap)[1])\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # python default dict() and heapq\n    item_freq = {}\n    for item in items:\n        if item not in item_freq:\n            item_freq[item] = 1\n        else:\n            item_freq[item] += 1\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n<1 or len(items)<1:\n        return []\n    else:\n        return heapq.nlargest(n,items,key=lambda x:x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,item)\n    for i in xrange(n-1):\n        heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # your code goes here\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    #return l[:n]+l[n+1:]+[l[n]]\n    return l[:n]+l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if not len(l):\n        return []\n    if len(l) < n:\n        return [l]\n    if n == 0:\n        return [[l[0]]] + split_Arr(l[1:], n)\n    if n == len(l):\n        return split_Arr(l[:-1], n-1) + [[l[-1]]]\n    return split_Arr(l[:n], n-1) + split_Arr(l[n:], n)\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:n+1] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:None:-1]\ndef permutations(l):\n    '''\n    Write a python function to return all permutations of a list.\n    '''\n    if len(l) < 2:\n        return [l]\n    else:\n        elements = []\n        for i in range(len(l)):\n            n = l[i]\n            n_l = l[:i] + l[i+1:]\n            perm = permutations(n_l)\n            for p in perm:\n                elements.append([n] + p)\n        return elements\ndef combinations(l):\n    '''\n    Write a python function to return all combinations of a list.\n    '''\n    if len(l) < 2:\n        return [l]\n    else:\n        elements = []\n        for i in range(len(l)):\n            n = l[i]\n            n_l = l[:i] + l[i+1:]\n            perm = combinations(n_l)\n            for p in perm:\n                elements.append([n] + p)\n        return elements\ndef anagrams(s):\n    '''\n    Write a python function to return all anagrams of a string.\n    '''\n    if len(s) < 2:\n        return [s]\n    else:\n        anagrams = []\n        for i in range(len(s)):\n            n = s[i]\n            n_s = s[:i] + s[i+1:]\n            perm = anagrams(n_s)\n            for p in perm:\n                anagrams.append([n] + p)\n        return anagrams\ndef reverse_words(s):\n    '''\n    Write a python function to reverse the words in a string.\n    '''\n    if len(s) < 2:\n        return s\n    else:\n        n = s[-1]\n        n_s = s[:-1]\n        return reverse_words(n_s) + [n]\ndef is_palindrome(s):\n    '''\n    Write a python function to return True if a string is a palindrome (same forward and back).\n    '''\n    if len(s) < 2:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome(s[1:-1])\n        else:\n            return False\ndef remove_duplicates(l):\n    '''\n    Write a python function to remove duplicate values in a list.\n    '''\n    if len(l) < 2:\n        return l\n    else:\n        n = l[0]\n        n_l = l[1:]\n        return remove_duplicates(n_l) + [n]\ndef mode(l):\n    '''\n    Write a python function to return the mode of a list.\n    '''\n    if len(l) < 2:\n        return l\n    else:\n        n = l[0]\n        n_l = l[1:]\n        return mode(n_l) if n_l.count(n) > 1 else n\ndef count_words(l):\n    '''\n    Write a python function to count the number of words in a list.\n    '''\n    if len(l) < 2:\n        return 1\n    else:\n        n = l[0]\n        n_l = l[1:]\n        return 1 + count_words(n_l) if n_l.count(n) > 1 else 1\ndef palindromes(s):\n    '''\n    Write a python function to return the list of all palindromes in a string.\n    '''\n    if len(s) < 2:\n        return s\n    else:\n        n = s[0]\n        n_s = s[1:]\n        return n + palindromes(n_s) if n_s.count(n) > 1 and is_palindrome(n_s) else [n] + palindromes(n_s)\ndef all_permutations(l):\n    '''\n    Write a python function to return all permutations of a list.\n    '''\n    if len(l) < 2:\n        return [l]\n    else:\n        elements = []\n        for i in range(len(l)):\n            n = l[i]\n            n_l = l[:i] + l[i+1:]\n            perm = all_permutations(n_l)\n            for p in perm:\n                elements.append([n] + p)\n        return elements\ndef permute(l):\n    '''\n    Write a python function to return all permutations of a list.\n    '''\n    if len(l) < 2:\n        return [l]\n    else:\n        elements = []\n        for i in range(len(l)):\n            n = l[i]\n            n_l = l[:i] + l[i+1:]\n            perm = permute(n_l)\n            for p in perm:\n                elements.append([n] + p)\n        return elements\ndef count_letter_frequency(s):\n    '''\n    Write a python function to count the frequency of each letter in a string.\n    '''\n    if len(s) < 2:\n        return {s: 1}\n    else:\n        n = s[0]\n        n_s = s[1:]\n        return {n: 1} + count_letter_frequency(n_s) if n_s.count(n) > 1 else {n: 1}\ndef factorial(n):\n    '''\n    Write a python function to return the factorial of a number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef all_subsets(l):\n    '''\n    Write a python function to return all subsets of a list.\n    '''\n    if len(l) < 2:\n        return [[]]\n    else:\n        elements = []\n        for i in range(len(l)):\n            n = l[i]\n            n_l = l[:i] + l[i+1:]\n            perm = all_subsets(n_l)\n            for p in perm:\n                elements.append([n] + p)\n        return elements\ndef all_anagrams(s):\n    '''\n    Write a python function to return all anagrams of a string.\n    '''\n    if len(s) < 2:\n        return [s]\n    else:\n        anagrams = []\n        for i in range(len(s)):\n            n = s[i]\n            n_s = s[:i] + s[i+1:]\n            perm = all_anagrams(n_s)\n            for p in perm:\n                anagrams.append([n] + p)\n        return anagrams\ndef all_combo(l):\n    '''\n    Write a python function to return all combinations of a list.\n    '''\n    if len(l) < 2:\n        return [l]\n    else:\n        elements = []\n        for i in range(len(l)):\n            n = l[i]\n            n_l = l[:i] + l[i+1:]\n            perm = all_combo(n_l)\n            for p in perm:\n                elements.append([n] + p)\n        return elements\ndef reverse_vowels(s):\n    '''\n    Write a python function to return a string with all vowels reversed.\n    '''\n    if len(s) < 2:\n        return s\n    else:\n        n = s[0]\n        n_s = s[1:]\n        return reverse_vowels(n_s) + [n] if n_s.count('a') + n_s.count('e') + n_s.count('i') + n_s.count('o') + n_s.count('u') > 0 else [n] + reverse_vowels(n_s)\ndef is_power_of_two(n):\n    '''\n    Write a python function to return True if a number is a power of two.\n    '''\n    if n "
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:], l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_l = l[:n]\n    new_l.extend(l[n:])\n    return new_l\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:].reverse()\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = [l[i:i + n] for i in range(0, len(l), n)]\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # append the first part of l to the end\n    l.extend(l[:n])\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx = tuple(listx)\n    return listx\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx = tuple(listx)\n    print listx\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    return dict(zip(listx[::2],listx[1::2]))\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    return set(listx)\n    \ndef list_range(listx):\n    '''\n    Write a function to convert a list to a range.\n    '''\n    return range(len(listx))\n    \ndef list_dict_get(listx,index):\n    '''\n    Write a function to convert a list to a dictionary and return the value at\n    a given key.\n    '''\n    return dict_get(listx,index)\n    \ndef dict_get(dictx,key):\n    '''\n    Write a function to convert a dictionary to a list and return the value at\n    a given key.\n    '''\n    return listx[key]\n    \ndef dict_remove(dictx,key):\n    '''\n    Write a function to convert a dictionary to a list and remove a given key from the list.\n    '''\n    return dict_pop(dictx,key)\n    \ndef dict_pop(dictx,key):\n    '''\n    Write a function to convert a dictionary to a list and remove a given key from the list.\n    '''\n    return listx.pop(key)\n    \ndef dict_get_keys(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the keys.\n    '''\n    return listx.keys()\n    \ndef dict_get_values(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the values.\n    '''\n    return listx.values()\n    \ndef dict_get_items(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the items.\n    '''\n    return listx.items()\n    \ndef dict_get_clear(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the values.\n    '''\n    return dictx.clear()\n    \ndef dict_get_has_key(dictx,key):\n    '''\n    Write a function to convert a dictionary to a list and return a boolean.\n    '''\n    return dictx.has_key(key)\n    \ndef dict_get_copy(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return a copy.\n    '''\n    return dictx.copy()\n    \ndef dict_get_keys_from_dict(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the keys from a given dictionary.\n    '''\n    return listx.keys()\n    \ndef dict_get_values_from_dict(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the values from a given dictionary.\n    '''\n    return listx.values()\n    \ndef dict_get_items_from_dict(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the items from a given dictionary.\n    '''\n    return listx.items()\n    \ndef dict_get_has_key_from_dict(dictx,key):\n    '''\n    Write a function to convert a dictionary to a list and return a boolean.\n    '''\n    return dictx.has_key(key)\n    \ndef dict_get_copy_from_dict(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return a copy.\n    '''\n    return dictx.copy()\n    \ndef dict_get_items_from_dict(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the items from a given dictionary.\n    '''\n    return dictx.items()\n    \ndef dict_get_append_to_dict(dictx,key,value):\n    '''\n    Write a function to convert a dictionary to a list and return the values from a given dictionary.\n    '''\n    return dictx.setdefault(key,value)\n    \ndef dict_get_setdefault_to_dict(dictx,key,value):\n    '''\n    Write a function to convert a dictionary to a list and return the values from a given dictionary.\n    '''\n    return dictx.setdefault(key,value)\n    \ndef dict_get_append_to_dict_list(dictx,key,value):\n    '''\n    Write a function to convert a dictionary to a list and return the values from a given dictionary.\n    '''\n    return dictx.get(key).append(value)\n    \ndef dict_get_setdefault_to_dict_list(dictx,key,value):\n    '''\n    Write a function to convert a dictionary to a list and return the values from a given dictionary.\n    '''\n    return dictx.get(key,value).append(value)\n    \ndef dict_get_get_value_from_dict(dictx,key):\n    '''\n    Write a function to convert a dictionary to a list and return the values from a given dictionary.\n    '''\n    return dictx.get(key)\n    \ndef dict_get_set_value_from_dict(dictx,key,value):\n    '''\n    Write a function to convert a dictionary to a list and return the values from a given dictionary.\n    '''\n    return dictx.get(key,value)\n    \ndef dict_get_iter_items(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the items from a given dictionary.\n    '''\n    return dictx.iteritems()\n    \ndef dict_get_iter_values(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the values from a given dictionary.\n    '''\n    return dictx.iterkeys()\n    \ndef dict_get_keys_from_dict_iter(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the keys from a given dictionary.\n    '''\n    return listx.keys()\n    \ndef dict_get_values_from_dict_iter(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the values from a given dictionary.\n    '''\n    return listx.values()\n    \ndef dict_get_items_from_dict_iter(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the items from a given dictionary.\n    '''\n    return listx.items()\n    \ndef dict_get_has_key_from_dict_iter(dictx,key):\n    '''\n    Write a function to convert a dictionary to a list and return a boolean.\n    '''\n    return dictx.has_key(key)\n    \ndef dict_get_copy_from_dict_iter(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return a copy.\n    '''\n    return dictx.copy()\n    \ndef dict_get_items_from_dict_iter(dictx):\n    '''\n    Write a function to convert a dictionary to a list and return the items from a given dictionary.\n    '''\n    return listx.items()\n    \ndef dict_get_append_to_dict_list_iter(dictx,key,value):\n    '''\n    Write a function to convert a dictionary to a list and return the values from a given dictionary.\n    '''\n    return dictx.get(key,value).append(value)\n    \ndef dict_get_setdefault_to_dict_list_iter(dictx,key,value):\n    '''\n    Write a function to convert a dictionary to a list and return the values from a given dictionary.\n    '''\n    return dictx.get(key,value).append(value)\n    \ndef dict_get_append_to_dict_from_dict_iter(dictx,key,value):\n    '''\n    Write a function to convert a dictionary to a list and return the values from a given dictionary.\n    '''\n    return dictx.get(key,value).append(value)\n    \ndef dict_get_setdefaul"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(max(nums) - min(nums))\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sq = []\n    if a < b:\n        for i in range(a,b+1):\n            if i**0.5 == int(i**0.5):\n                sq.append(i**2)\n        return sq\n    if b < a:\n        for i in range(b, a+1):\n            if i**0.5 == int(i**0.5):\n                sq.append(i**2)\n        return sq\n    return sq\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in xrange(a, b+1):\n        if i*i <= b:\n            print i*i\n        else:\n            break\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return [a]\n    elif a < b:\n        return [i**2 for i in range(a, b+1) if i**2 >= a and i**2 <= b]\n    elif a > b:\n        return [i**2 for i in range(b, a+1) if i**2 >= b and i**2 <= a]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    \n    for num in range(a, b+1):\n        sq = num * num\n        if sq > b:\n            break\n        if sq == num:\n            perfect_squares.append(sq)\n        \n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    s = 0\n    while(a <= b):\n        if a**0.5 == int(a**0.5):\n            s += 1\n        a += 1\n    return s\n    "
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return 0\n    if b < 0:\n        return 0\n    if a == 0:\n        return 1\n    if a < 0:\n        return 0\n    return perfect_squares(a-1, b-1) + perfect_squares(a-2, b-2) + perfect_squares(a-3, b-3)\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    i = 0\n    count = 0\n    while(i ** 2 <= b):\n        if (i ** 2 > a):\n            break\n        if (i ** 2 == a):\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a <= 0 or b <= 0:\n        raise ValueError('Numbers must be positive')\n    return [i**2 for i in range(max(a,b), min(a,b)+1) if (i**2)>=a and (i**2)<=b]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    answer = []\n    for i in range(a, b):\n        if int(i**0.5)**2 == i:\n            answer.append(i)\n    return answer\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    sqr_list = []\n    \n    for x in range(int(a**0.5)+1, int(b**0.5)):\n        if x**2 == b:\n            sqr_list.append(x)\n            return sqr_list\n        elif x**2 < b:\n            sqr_list.append(x**2)\n        else:\n            break\n    \n    for x in range(int(a**0.5), int(b**0.5)+1):\n        if x**2 == a:\n            sqr_list.append(x)\n            return sqr_list\n        elif x**2 > a:\n            break\n        else:\n            sqr_list.append(x**2)\n    \n    return sqr_list\n    \n    "
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x>0 and y>0:\n        return cmath.rect(x,y)\n    elif x>0 and y<0:\n        return cmath.rect(x,cmath.pi*2+y)\n    elif x<0 and y>0:\n        return cmath.rect(cmath.sqrt(-x),cmath.pi*2+y)\n    elif x<0 and y<0:\n        return cmath.rect(cmath.sqrt(-x),y)\n    elif x==0 and y>0:\n        return (0,cmath.pi*2)\n    elif x==0 and y<0:\n        return (0,-cmath.pi*2)\n    elif x==0 and y==0:\n        return (0,0)\n    else:\n        return (-1,-1)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #s = 2.0\n    r = cmath.sqrt(x**2 + y**2)\n    #print 'r:',r\n    theta = cmath.atan(y/x)\n    #print 'theta:',theta\n    #theta = theta/s\n    #print 'theta:',theta\n    return r, theta\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    return r\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if(x==0 and y==0):\n        return (0,0)\n    r = abs(x)+abs(y)\n    if(x>0):\n        theta = math.atan(y/x)\n        return (r,theta)\n    if(x<0):\n        theta = math.atan(y/abs(x))\n        return (-r,theta)\n    if(y<0):\n        return (-r,math.atan(y/x))\n    if(y>0):\n        return (r,math.atan(y/abs(x)))\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if(x==0 and y==0):\n        return (0,0)\n    if(x>0 and y<0):\n        return (abs(x)+abs(y),math.atan(y/x))\n    if(x<0 and y<0):\n        return (abs(x)+abs(y),math.atan(y/abs(x)))\n    if(x<0 and y>0):\n        return (abs(x)+abs(y),math.atan(y/abs(x)))\n    if(x>0 and y>0):\n        return (abs(x)+abs(y),math.atan(y/x))\ndef polar_square(x,y,a):\n    '''\n    Write a function to convert polar coordinates to square coordinates.\n    '''\n    if(x==0 and y==0):\n        return (0,0,0)\n    r = abs(x)+abs(y)\n    if(x>0):\n        theta = math.atan(y/x)\n        return (r,math.sin(theta),math.cos(theta))\n    if(x<0):\n        theta = math.atan(y/abs(x))\n        return (-r,math.sin(theta),math.cos(theta))\n    if(y<0):\n        return (-r,math.sin(theta),math.cos(theta))\n    if(y>0):\n        return (r,math.sin(theta),math.cos(theta))\ndef square_polar(x,y,a):\n    '''\n    Write a function to convert square coordinates to polar coordinates.\n    '''\n    if(x==0 and y==0):\n        return (0,0,0)\n    if(x>0 and y<0):\n        return (abs(x)+abs(y),math.sin(math.atan(y/x)),math.cos(math.atan(y/x)))\n    if(x<0 and y<0):\n        return (abs(x)+abs(y),math.sin(math.atan(y/abs(x))),math.cos(math.atan(y/abs(x))))\n    if(x<0 and y>0):\n        return (abs(x)+abs(y),math.sin(math.atan(y/abs(x))),math.cos(math.atan(y/abs(x))))\n    if(x>0 and y>0):\n        return (abs(x)+abs(y),math.sin(math.atan(y/x)),math.cos(math.atan(y/x)))\ndef polar_triangle(x,y,a):\n    '''\n    Write a function to convert polar coordinates to triangle coordinates.\n    '''\n    if(x==0 and y==0):\n        return (0,0,0)\n    if(x>0):\n        if(y<0):\n            return (abs(x)+abs(y),abs(x),abs(y))\n        else:\n            return (abs(x)+abs(y),abs(y),abs(x))\n    if(x<0):\n        if(y<0):\n            return (abs(x)+abs(y),abs(x),abs(y))\n        else:\n            return (abs(x)+abs(y),abs(y),abs(x))\n    if(y<0):\n        return (abs(x)+abs(y),abs(x),abs(y))\n    if(y>0):\n        return (abs(x)+abs(y),abs(x),abs(y))\ndef triangle_polar(x,y,a):\n    '''\n    Write a function to convert triangle coordinates to polar coordinates.\n    '''\n    if(x==0 and y==0):\n        return (0,0,0)\n    if(x>0 and y<0):\n        return (abs(x)+abs(y),abs(x),abs(y))\n    if(x<0 and y<0):\n        return (abs(x)+abs(y),abs(x),abs(y))\n    if(x<0 and y>0):\n        return (abs(x)+abs(y),abs(x),abs(y))\n    if(x>0 and y>0):\n        return (abs(x)+abs(y),abs(x),abs(y))\ndef rotate(p,angle,rad=False):\n    '''\n    Write a function to rotate coordinates by angle.\n    '''\n    if(rad):\n        angle = math.radians(angle)\n    c = cmath.exp(complex(0,angle))\n    return (p[0]*c,p[1]*c)\ndef rot_rect(r,theta,r_x,r_y):\n    '''\n    Write a function to rotate rectangular coordinates by angle.\n    '''\n    return (r_x*math.cos(theta)-r_y*math.sin(theta),r_x*math.sin(theta)+r_y*math.cos(theta))\ndef rect_rot(x,y,angle,r_x,r_y):\n    '''\n    Write a function to rotate rectangular coordinates by angle.\n    '''\n    c = cmath.exp(complex(0,angle))\n    return (r_x*math.cos(angle)-r_y*math.sin(angle),r_x*math.sin(angle)+r_y*math.cos(angle))\ndef rotate_points(points,angle,r_x,r_y):\n    '''\n    Write a function to rotate points by angle.\n    '''\n    if(len(points)==0):\n        return []\n    if(len(points)==1):\n        return rotate_points([rotate(points[0],angle,True)],angle,r_x,r_y)\n    if(len(points)>=2):\n        return [rotate_points(points[1:],angle,r_x,r_y)]+rotate_points([rotate(points[0],angle,True)],angle,r_x,r_y)\ndef rot_triangle(r,theta,r_x,r_y):\n    '''\n    Write a function to rotate triangle by angle.\n    '''\n    return (r_x*math.cos(theta)-r_y*math.sin(theta),r_x*math.sin(theta)+r_y*math.cos(theta),r)\ndef tri_rot(x,y,angle,r_x,r_y):\n    '''\n    Write a function to rotate triangle by angle.\n    '''\n    c = cmath.exp(complex(0,angle))\n    return (r_x*math.cos(angle)-r_y*math.sin(angle),r_x*math.sin(angle)+r_y*math.cos(angle),r)\ndef rotated_rectangle(r,theta,r_x,r_y):\n    '''\n    Write a function to rotate rectangle by angle.\n    '''\n    return (r_x*math.cos(theta)-r_y*math.sin(theta),r_x*math.sin(theta)+r_y*math.cos(theta),r_x,r_y)\ndef rotated_triangle(r,theta,r_x,r_y):\n    '''\n    Write a function to rotate triangle by angle.\n    '''\n    return (r_x*math.cos(theta)-r_y*math.sin(theta),r_x*math.sin(theta)+r_y*math.cos(theta),r)\ndef main():\n    print(polar_rect"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*x+y*y\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    newx=int(x*(2**0.5))\n    newy=int(y*(2**0.5))\n    return newx,newy\ndef cartesian_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    newx=int(x*(2**0.5))\n    newy=int(y*(2**0.5))\n    return newx,newy\ndef closest_point(point1,point2,point3):\n    '''\n    Write a function to find the point on the line segment from point1 to point2 that is closest to point3.\n    '''\n    a=point1[0]-point2[0]\n    b=point1[1]-point2[1]\n    x=point3[0]\n    y=point3[1]\n    t=(x-point1[0])/a\n    s=(y-point1[1])/b\n    if(s>1):\n        return point2\n    elif(t>1):\n        return point1\n    elif(s==0):\n        return point1\n    else:\n        return (x,y)\ndef midpoint(point1,point2):\n    '''\n    Write a function to calculate the midpoint of a line segment between two points.\n    '''\n    x=(point1[0]+point2[0])/2\n    y=(point1[1]+point2[1])/2\n    return (x,y)\ndef lines_intersect(line1,line2):\n    '''\n    Write a function to determine if two line segments intersect.\n    '''\n    x1,y1,x2,y2=line1\n    x3,y3,x4,y4=line2\n    if((x1-x2)*(y3-y4)==(y1-y2)*(x3-x4)):\n        return False\n    else:\n        return True\ndef euclid_distance(point1,point2):\n    '''\n    Write a function to calculate the Euclidean distance between two points.\n    '''\n    x1,y1=point1\n    x2,y2=point2\n    distance=((x2-x1)**2+(y2-y1)**2)**0.5\n    return distance\ndef euclid_line_intersect(line1,line2):\n    '''\n    Write a function to determine if two line segments intersect.\n    '''\n    x1,y1,x2,y2=line1\n    x3,y3,x4,y4=line2\n    if(euclid_distance((x1,y1),(x2,y2))==euclid_distance((x3,y3),(x4,y4))):\n        return False\n    elif(euclid_distance((x1,y1),(x3,y3))==euclid_distance((x2,y2),(x4,y4))):\n        return False\n    else:\n        return True\ndef euclid_triangle_intersect(triangle1,triangle2):\n    '''\n    Write a function to determine if two triangles intersect.\n    '''\n    x1,y1,x2,y2=triangle1\n    x3,y3,x4,y4=triangle2\n    x1,y1,x2,y2=line1\n    x3,y3,x4,y4=line2\n    p1=(x1,y1)\n    p2=(x2,y2)\n    p3=(x3,y3)\n    p4=(x4,y4)\n    if(lines_intersect(p1,p2) and lines_intersect(p3,p4)):\n        return True\n    else:\n        return False\ndef get_triangle_from_points(point1,point2,point3):\n    '''\n    Write a function that takes three points and returns the equation of a plane that contains the three points.\n    '''\n    x1,y1=point1\n    x2,y2=point2\n    x3,y3=point3\n    a=x1*y2-x2*y1\n    b=x2*y3-x3*y2\n    c=x3*y1-x1*y3\n    return a,b,c\ndef get_triangle_from_line(line1,line2):\n    '''\n    Write a function that takes two lines and returns the equation of a plane that contains the two lines.\n    '''\n    x1,y1,x2,y2=line1\n    x3,y3,x4,y4=line2\n    a=(y2-y1)*(x3-x4)-(x2-x1)*(y3-y4)\n    b=(x3-x4)*(y2-y1)-(y3-y4)*(x2-x1)\n    c=(x2-x1)*(y1-y3)-(y2-y1)*(x1-x3)\n    return a,b,c\ndef get_triangle_from_triangle(triangle1,triangle2):\n    '''\n    Write a function that takes two triangles and returns the equation of a plane that contains the two triangles.\n    '''\n    x1,y1,x2,y2=triangle1\n    x3,y3,x4,y4=triangle2\n    a=(x2-x1)*(y3-y4)-(x3-x4)*(y2-y1)\n    b=(x3-x4)*(y1-y2)-(y3-y4)*(x1-x2)\n    c=(x1-x2)*(y2-y3)-(y1-y2)*(x2-x3)\n    return a,b,c\ndef get_line_from_points(point1,point2):\n    '''\n    Write a function that takes two points and returns the equation of a line that contains the two points.\n    '''\n    x1,y1=point1\n    x2,y2=point2\n    a=(x1-x2)\n    b=(y1-y2)\n    return a,b\ndef get_line_from_line(line1,line2):\n    '''\n    Write a function that takes two lines and returns the equation of a line that contains the two lines.\n    '''\n    x1,y1,x2,y2=line1\n    x3,y3,x4,y4=line2\n    a=(y2-y1)*(x3-x4)-(x2-x1)*(y3-y4)\n    b=(x3-x4)*(y2-y1)-(y3-y4)*(x2-x1)\n    return a,b\ndef get_line_from_triangle(triangle1,triangle2):\n    '''\n    Write a function that takes two triangles and returns the equation of a line that contains the two triangles.\n    '''\n    x1,y1,x2,y2=triangle1\n    x3,y3,x4,y4=triangle2\n    a=(y2-y1)*(x3-x4)-(x2-x1)*(y3-y4)\n    b=(x3-x4)*(y2-y1)-(y3-y4)*(x2-x1)\n    return a,b\ndef get_line_from_triangle(triangle1,triangle2):\n    '''\n    Write a function that takes two triangles and returns the equation of a line that contains the two triangles.\n    '''\n    x1,y1,x2,y2=triangle1\n    x3,y3,x4,y4=triangle2\n    a=(y2-y1)*(x3-x4)-(x2-x1)*(y3-y4)\n    b=(x3-x4)*(y2-y1)-(y3-y4)*(x2-x1)\n    return a,b\ndef get_line_from_line(line1,line2):\n    '''\n    Write a function that takes two lines and returns the equation of a line that contains the two lines.\n    '''\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    r,t=x\n    r=abs(r)\n    t=cmath.phase(r)\n    return [r*math.cos(t),r*math.sin(t)]\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import math\n    r=math.hypot(x,y)\n    t=math.atan2(y,x)\n    return [r,t]\ndef hcf(a,b):\n    '''\n    Write a function to return the highest common factor of two numbers.\n    '''\n    import math\n    if a>b:\n        smaller=b\n    else:\n        smaller=a\n    for i in range(1,smaller+1):\n        if a%i==0 and b%i==0:\n            hcf=i\n    return hcf\ndef lcm(a,b):\n    '''\n    Write a function to return the lowest common multiple of two numbers.\n    '''\n    import math\n    return a*b/hcf(a,b)\ndef gcd(a,b):\n    '''\n    Write a function to return the greatest common divisor of two numbers.\n    '''\n    import math\n    return math.gcd(a,b)\ndef primes(n):\n    '''\n    Write a function to return all the primes upto n.\n    '''\n    from math import sqrt\n    from itertools import count, islice\n    from functools import partial\n    import math\n    chunk = partial(map, int)\n    numbers = partial(islice, count(2))\n    is_prime = lambda n: n > 1 and all(n % i for i in islice(numbers, int(sqrt(n) - 1)))\n    return filter(is_prime, chunk(n))\ndef isprime(n):\n    '''\n    Write a function to check if n is a prime number or not.\n    '''\n    import math\n    from itertools import count, islice\n    from functools import partial\n    import math\n    chunk = partial(map, int)\n    numbers = partial(islice, count(2))\n    is_prime = lambda n: n > 1 and all(n % i for i in islice(numbers, int(sqrt(n) - 1)))\n    return is_prime(n)\ndef fibonacci(n):\n    '''\n    Write a function to return the nth Fibonacci number.\n    '''\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n    return a\ndef factorial(n):\n    '''\n    Write a function to return the factorial of a number.\n    '''\n    fact=1\n    for i in range(1,n+1):\n        fact=fact*i\n    return fact\ndef sum_of_digits(n):\n    '''\n    Write a function to return the sum of digits of a number.\n    '''\n    import math\n    s=0\n    while n!=0:\n        s=s+n%10\n        n=n//10\n    return s\ndef sum_of_squares(n):\n    '''\n    Write a function to return the sum of squares of digits of a number.\n    '''\n    import math\n    s=0\n    while n!=0:\n        s=s+(n%10)**2\n        n=n//10\n    return s\ndef sum_of_cubes(n):\n    '''\n    Write a function to return the sum of cubes of digits of a number.\n    '''\n    import math\n    s=0\n    while n!=0:\n        s=s+(n%10)**3\n        n=n//10\n    return s\ndef sum_of_squares_digits(n):\n    '''\n    Write a function to return the sum of squares of digits of a number.\n    '''\n    import math\n    s=0\n    while n!=0:\n        s=s+(n%10)**2\n        n=n//10\n    return s\ndef sum_of_cubes_digits(n):\n    '''\n    Write a function to return the sum of cubes of digits of a number.\n    '''\n    import math\n    s=0\n    while n!=0:\n        s=s+(n%10)**3\n        n=n//10\n    return s\ndef sum_of_digits_squares(n):\n    '''\n    Write a function to return the sum of squares of digits of a number.\n    '''\n    import math\n    s=0\n    while n!=0:\n        s=s+(n%10)**2\n        n=n//10\n    return s\ndef sum_of_digits_cubes(n):\n    '''\n    Write a function to return the sum of cubes of digits of a number.\n    '''\n    import math\n    s=0\n    while n!=0:\n        s=s+(n%10)**3\n        n=n//10\n    return s\ndef sum_of_squares_cubes(n):\n    '''\n    Write a function to return the sum of cubes of digits of a number.\n    '''\n    import math\n    s=0\n    while n!=0:\n        s=s+(n%10)**3\n        n=n//10\n    return s\ndef palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    n=str(n)\n    if n==n[::-1]:\n        return True\n    else:\n        return False\ndef palindrome_digit(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    n=str(n)\n    if n==n[::-1]:\n        return True\n    else:\n        return False\ndef is_pandigital(n):\n    '''\n    Write a function to check if a number is pandigital or not.\n    '''\n    import string\n    n=str(n)\n    flag=0\n    for i in range(1,10):\n        if n.find(str(i))==-1:\n            flag=1\n            break\n    if flag==0:\n        return True\n    else:\n        return False\ndef is_pandigital_digits(n):\n    '''\n    Write a function to check if a number is pandigital or not.\n    '''\n    import string\n    n=str(n)\n    flag=0\n    for i in range(1,10):\n        if n.find(str(i))==-1:\n            flag=1\n            break\n    if flag==0:\n        return True\n    else:\n        return False\ndef is_pandigital_multiples(n):\n    '''\n    Write a function to check if a number is pandigital or not.\n    '''\n    import string\n    n=str(n)\n    flag=0\n    for i in range(1,10):\n        if n.find(str(i)*3)!=-1:\n            flag=1\n            break\n    if flag==0:\n        return True\n    else:\n        return False\ndef is_pandigital_multiples_digits(n):\n    '''\n    Write a function to check if a number is pandigital or not.\n    '''\n    import string\n    n=str(n)\n    flag=0\n    for i in range(1,10):\n        if n.find(str(i)*3)!=-1:\n            flag=1\n            break\n    if flag==0:\n        return True\n    else:\n        return False\ndef is_pandigital_multiples_digits_sum(n):\n    '''\n    Write a function to check if a number is pandigital or not.\n    '''\n    import string\n    n=str(n)\n    flag=0\n    for i in range(1,10):\n        if n.find(str(i)*3)!=-1:\n            s=sum(int(d) for d in str(i)*3)\n            if s==int(n):"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z=cmath.polar(complex(x,y))\n    print '{:.3f}'.format(z[0]),'{:.3f}'.format(z[1])\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z=complex(x,y)\n    r=abs(z)\n    theta=cmath.phase(z)\n    x1=r*math.cos(theta)\n    y1=r*math.sin(theta)\n    return [x1,y1]\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length=len(newList)\n    temp=newList[0]\n    newList[0]=newList[length-1]\n    newList[length-1]=temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0] = newList[-1]\n    newList[-1] = newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList) \n    newList[0],newList[n-1] = newList[n-1],newList[0] \n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # list is passed.\n    # it is assumed that the input list is not empty.\n    # it will take O(n) time for the function to run.\n    # it will also modify the input list.\n    # return value will be the modified list.\n    # assert statements for empty list, index error\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(min(k,n-k)):\n        res = res * (n-i)\n        res = res / (i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in xrange(0, k):\n        res = res * (n-i)\n        res = res / (i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in xrange(1,k+1):\n        res = res * (n-i+1) / i\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k==0):\n        return 1\n    elif(k==n):\n        return 1\n    elif(k>n):\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<k:\n        return 0\n    elif k==0 or n==k:\n        return 1\n    else:\n        numerator = n*binomial_Coeff(n-1,k)\n        denominator = k*binomial_Coeff(n-1,k-1)\n        return numerator//denominator\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = 1\n    if k>n-k:\n        k = n-k\n    for i in xrange(k):\n        C = C * (n - i)\n        C = C / (i + 1)\n    return C\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = 1\n    for i in range(min(n,k),0,-1): \n        C = C * (n+1-i)/i \n    return C \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initializing sum to 1\n    sum = 1\n    # Calculating binomial coefficients\n    for i in range(n-k+1, n+1): \n        sum = sum*i \n    for i in range(1,k+1): \n        sum = sum//i \n    return sum\ndef coinChange(coins, S):\n    '''\n    Given a set of coins and a sum, return the min number of coins to use to make the change\n    TODO: Implement this\n    '''\n    coins.sort()\n    # initialize the dp array\n    dp = [0] * (S+1)\n    dp[0] = 0\n    for i in range(1, len(dp)):\n        for j in range(len(coins)):\n            if i - coins[j] >= 0:\n                dp[i] = min(dp[i], 1 + dp[i - coins[j]])\n    return dp[S]\ndef coinChangeBFS(coins, S):\n    coins.sort()\n    queue = []\n    queue.append([0, 0])\n    visited = {}\n    while queue:\n        head = queue.pop(0)\n        # when the head is the last element in the queue, we found the shortest path\n        if head[0] == S:\n            return head[1]\n        # if we have not visited this sum, we add to queue\n        if head[0] not in visited:\n            visited[head[0]] = 1\n            for c in coins:\n                if head[0] + c <= S:\n                    queue.append([head[0] + c, head[1] + 1])\n    return -1\ndef permutations(n):\n    '''\n    Given a number, return the permutations of that number.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = [0] * (n+1)\n    result[0] = 1\n    for i in range(1, n+1):\n        # traverse the array from back to the front\n        for j in range(i, n+1):\n            result[j] += result[j-i]\n    return result[n]\ndef permutations2(n):\n    '''\n    Given a number, return the permutations of that number.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = [0] * (n+1)\n    result[0] = 1\n    for i in range(1, n+1):\n        # traverse the array from back to the front\n        for j in range(i, n+1):\n            result[j] += result[j-i]\n    return result[n]\ndef factors(n):\n    '''\n    Given a number, return the factors of that number.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = []\n    i = 1\n    # traverse the array from back to the front\n    while i <= n:\n        # if the number is prime, we add to the result\n        if n % i == 0:\n            result.append(i)\n        i += 1\n    return result\ndef factors2(n):\n    '''\n    Given a number, return the factors of that number.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = []\n    # traverse the array from back to the front\n    for i in range(1, n+1):\n        # if the number is prime, we add to the result\n        if n % i == 0:\n            result.append(i)\n    return result\ndef generate_permutations(N):\n    '''\n    Given a number, return the permutations of that number.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = [0] * (N+1)\n    result[0] = 1\n    for i in range(1, N+1):\n        # traverse the array from back to the front\n        for j in range(i, N+1):\n            result[j] += result[j-i]\n    return result[N]\ndef generate_permutations2(N):\n    '''\n    Given a number, return the permutations of that number.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = [0] * (N+1)\n    result[0] = 1\n    for i in range(1, N+1):\n        # traverse the array from back to the front\n        for j in range(i, N+1):\n            result[j] += result[j-i]\n    return result[N]\ndef permutations_with_replacement(n):\n    '''\n    Given a number, return the permutations of that number.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = [0] * (n+1)\n    result[0] = 1\n    for i in range(1, n+1):\n        # traverse the array from back to the front\n        for j in range(i, n+1):\n            result[j] += result[j-i]\n    return result[n]\ndef permutations_with_replacement2(n):\n    '''\n    Given a number, return the permutations of that number.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = [0] * (n+1)\n    result[0] = 1\n    for i in range(1, n+1):\n        # traverse the array from back to the front\n        for j in range(i, n+1):\n            result[j] += result[j-i]\n    return result[n]\ndef count_permutations(n):\n    '''\n    Given a number, return the permutations of that number.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = [0] * (n+1)\n    result[0] = 1\n    for i in range(1, n+1):\n        # traverse the array from back to the front\n        for j in range(i, n+1):\n            result[j] += result[j-i]\n    return result[n]\ndef count_permutations2(n):\n    '''\n    Given a number, return the permutations of that number.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = [0] * (n+1)\n    result[0] = 1\n    for i in range(1, n+1):\n        # traverse the array from back to the front\n        for j in range(i, n+1):\n            result[j] += result[j-i]\n    return result[n]\ndef count_permutations_with_replacement(n):\n    '''\n    Given a number, return the permutations of that number.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = [0] * (n+1)\n    result[0] = 1\n    for i in range(1, n+1):\n        # traverse the array from back to the front\n        for j in range(i, n+1):\n            result[j] += result[j-i]\n    return result[n]\ndef count_permutations_with_replacement2(n):\n    '''\n    Given a number, return the permutations of that number.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = [0] * (n+1)\n    result[0] = 1\n    for i in range(1, n+1):\n        # traverse the array from back to the front\n        for j in range(i, n+1):\n            result[j] += result[j-i]\n    return result[n]\ndef count_permutations_of_length(n, k):\n    '''\n    Given a number and a length, return the permutations of that number with k length.\n    TODO: Implement this\n    '''\n    # initialize the result array\n    result = [0] * (k+1)\n    result[0] = 1\n    for i in range(1, n+1):\n        # traverse the array from back to the front\n        for j in range(i, n+1):\n            result[j] += result[j-i]\n    return result["
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [0 for i in range(k+1)] \n    C[0] = 1\n    for i in range(1,n+1): \n        j = min(i, k) \n        while j>0: \n            C[j] += C[j-1] \n            j -= 1\n    return C[k] \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        a = 1\n        b = 1\n        for i in range(1,n-k+1):\n            a = a * (n - i)\n            b = b * i\n        return a / b\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('(?<=\\.\\d)0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = str(ip)\n    ip = re.sub(\"\\.0+\", \".\", ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ''.join(re.findall(r'\\d',ip))\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split(\".\")\n    temp_list = []\n    for i in ip_list:\n        if i!= '0':\n            temp_list.append(i)\n    return '.'.join(temp_list)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    ip = re.sub(r'^0+', '', ip)\n    return ip\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port number.\n    '''\n    port = port.strip()\n    if port.startswith('0'):\n        return port[1:]\n    else:\n        return port\ndef remove_special_char(string):\n    '''\n    Write a function to remove special characters from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[^\\w\\s]','', string)\n    return string\ndef remove_digits(string):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'\\d+','', string)\n    return string\ndef remove_non_letters(string):\n    '''\n    Write a function to remove non-letters from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[^a-zA-Z]+','', string)\n    return string\ndef remove_digits_and_non_letters(string):\n    '''\n    Write a function to remove digits and non-letters from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[^a-zA-Z\\s]','', string)\n    return string\ndef remove_lowercase_characters(string):\n    '''\n    Write a function to remove lowercase characters from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[a-z]+','', string)\n    return string\ndef remove_punctuation(string):\n    '''\n    Write a function to remove punctuation characters from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[^\\w\\s]','', string)\n    return string\ndef remove_all_non_letters(string):\n    '''\n    Write a function to remove all non-letters from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[^a-zA-Z\\s]','', string)\n    return string\ndef remove_all_non_letters_and_digits(string):\n    '''\n    Write a function to remove all non-letters and digits from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[^0-9a-zA-Z\\s]','', string)\n    return string\ndef remove_all_digits(string):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'\\d+','', string)\n    return string\ndef remove_all_digits_and_non_letters(string):\n    '''\n    Write a function to remove all digits and non-letters from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[^0-9a-zA-Z\\s]','', string)\n    return string\ndef remove_all_digits_and_letters(string):\n    '''\n    Write a function to remove all digits and letters from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[^a-zA-Z\\s]','', string)\n    return string\ndef remove_all_letters(string):\n    '''\n    Write a function to remove all letters from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[a-zA-Z]+','', string)\n    return string\ndef remove_all_letters_and_digits(string):\n    '''\n    Write a function to remove all letters and digits from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[^a-zA-Z\\s]','', string)\n    return string\ndef remove_all_lowercase_letters(string):\n    '''\n    Write a function to remove all lowercase letters from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[a-z]+','', string)\n    return string\ndef remove_all_uppercase_letters(string):\n    '''\n    Write a function to remove all uppercase letters from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'[A-Z]+','', string)\n    return string\ndef remove_whitespace(string):\n    '''\n    Write a function to remove whitespace from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'\\s+', '', string)\n    return string\ndef remove_whitespace_in_brackets(string):\n    '''\n    Write a function to remove whitespace from all brackets in a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'\\s+([\\[\\(\\{])','', string)\n    return string\ndef remove_repeated_spaces(string):\n    '''\n    Write a function to remove repeated spaces from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'\\s+',' ', string)\n    return string\ndef remove_spaces_between_words(string):\n    '''\n    Write a function to remove spaces between words from a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'\\s+','', string)\n    return string\ndef remove_spaces_inside_brackets(string):\n    '''\n    Write a function to remove spaces between brackets in a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'\\s+([\\]\\)\\}])','', string)\n    return string\ndef remove_opening_brackets(string):\n    '''\n    Write a function to remove space from all opening brackets.\n    '''\n    string = string.strip()\n    string = re.sub(r'\\s+([\\[\\(\\{])','', string)\n    return string\ndef remove_closing_brackets(string):\n    '''\n    Write a function to remove space from all closing brackets.\n    '''\n    string = string.strip()\n    string = re.sub(r'\\s+([\\]\\)\\}])','', string)\n    return string\ndef remove_opening_and_closing_brackets(string):\n    '''\n    Write a function to remove space from all opening and closing brackets.\n    '''\n    string = string.strip()\n    string = re.sub(r'\\s+([\\[\\(\\{])','', string)\n    string = re.sub(r'\\s+([\\]\\)\\}])','', string)\n    return string\ndef remove_all_spaces(string):\n    '''\n    Write a function to remove all spaces in a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'\\s+', '', string)\n    return string\ndef remove_leading_spaces(string):\n    '''\n    Write a function to remove all leading spaces in a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'^\\s+', '', string)\n    return string\ndef remove_trailing_spaces(string):\n    '''\n    Write a function to remove all trailing spaces in a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'\\s+$', '', string)\n    return string\ndef remove_leading_and_trailing_spaces(string):\n    '''\n    Write a function to remove all leading and trailing spaces in a string.\n    '''\n    string = string.strip()\n    string = re.sub(r'^\\s+', '', string)\n    string = re.sub(r'\\s+$', '', string)\n    return string\ndef remove_multiple_spaces(string):\n    '''\n    Write a functio"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    match = re.match(r'^(\\d{1,3}\\.){3}\\d{1,3}$', ip)\n    if match:\n        result = match.group()\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = list(ip)\n    if ip[0] == '0':\n        ip.pop(0)\n    if ip[-1] == '0':\n        ip.pop()\n    return '.'.join(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('[0]*','',ip)\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num=[]\n    odd_num=[]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for item in list1:\n        if item % 2 == 0:\n            even.append(item)\n        else:\n            odd.append(item)\n    return [abs(even[0] - even[1]), abs(odd[0] - odd[1])]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    if len(list1) == 1:\n        return list1[0]\n    if list1[0]%2 == 0:\n        return list1[0]-list1[1]\n    else:\n        return list1[-1] - list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [x for x in list1 if x % 2 == 0]\n    odd = [x for x in list1 if x % 2!= 0]\n    return(abs(even[0] - odd[0]))\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return abs(list1[0] - list1[-1])\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return sum(even_list) - sum(odd_list)\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    result = 0\n    if list1[0] % 2 == 0:\n        result += list1[1]\n    else:\n        result += list1[0]\n    for i in range(2,len(list1)):\n        if list1[i] % 2 == 0:\n            result -= list1[i]\n        else:\n            result += list1[i]\n    return result\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    if len(list1) == 0:\n        return 0\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for item in list1:\n        if item % 2 == 0:\n            if even is None:\n                even = item\n            else:\n                return item - even\n        else:\n            if odd is None:\n                odd = item\n            else:\n                return item - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    \n    if len(list1) % 2 == 0:\n        \n        return list1[-1] - list1[0]\n    else:\n        return list1[-2] - list1[0]\n    \ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-2) + fibonacci(n-1)\n    \ndef fibonacci_without_recursion(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(n) :\n        if str1[i]!=str2[i] :\n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    a=list(str1)\n    b=list(str2)\n    count=0\n    for i in range(len(a)) : \n        if (a[i]!=b[i]) : \n            b[i],a[i]=a[i],b[i]\n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #  count = 0\n    #  if len(str1)!= len(str2) :\n    #     return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if (str1 == str2): return 0\n    count = 0\n    for i in range(len(str1)):\n        if (str1[i]!= str2[i]):\n            str2 = str2[:i] + str2[i+1:]\n            str2 = str2[:i] + str2[i] + str2[i] + str2[i+1:]\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #Base Case\n    if len(str1) == 0 : \n        return 0\n    if len(str1) == 1 : \n        if str1 == str2 : \n            return 0\n        return 1\n    #if str1[0] == str2[0] : \n    #    return min_Swaps(str1[1:],str2[1:])\n    #else : \n    #    return 1 + min_Swaps(str1[1:],str2) + min_Swaps(str1,str2[1:])\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i = 0\n    count = 0\n    while i < len(str1):\n        if str1[i] == '0' and str2[i] == '1':\n            str2 = str2[:i] + '0' + str2[i+1:]\n            count += 1\n        elif str1[i] == '1' and str2[i] == '0':\n            str2 = str2[:i] + '1' + str2[i+1:]\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1,n2 = len(str1),len(str2)\n    if n1!= n2 :\n        return -1\n    diff = [str1[i]!=str2[i] for i in range(n1)]\n    for i in range(n1):\n        if diff[i] :\n            temp = str1[i]\n            str1[i] = str2[i]\n            str2[i] = temp\n            diff[i] = False\n    return sum(diff)\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    counter = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            counter +=1\n            str2 = ''.join([str2[:i],str1[i],str2[i+1:]])\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Initialize result\n    res = 0\n    # Base Case\n    if str1 == str2 : \n        return res\n    # Initialize empty lists\n    l1 = []\n    l2 = []\n    # Store str1 and str2 in lists\n    for i in str1 : \n        l1.append(i)\n    for i in str2 : \n        l2.append(i)\n    # Initialize i,j\n    i = 0\n    j = 0\n    # Traverse through both strings\n    while i < len(str1) : \n        if l1[i]!= l2[j] : \n            # Count the result if both strings have an unequal character \n            res += 1\n            temp = l1[i]\n            l1[i] = l2[j]\n            l2[j] = temp\n        # Increment j\n        j += 1\n        # Increment i\n        i += 1\n    # Return result\n    return res\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!=len(str2) :\n        return -1\n    count = 0\n    for i in range(len(str1)) :\n        if (str1[i]!=str2[i]) :\n            count +=1\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    num = len(tuple_list)\n    s = sys.getsizeof(tuple_list)\n    print('Size of the tuple is:')\n    print(s)\n    return num\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return sys.getsizeof(list_list)\ndef set_size(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return sys.getsizeof(set_list)\ndef string_size(string_list):\n    '''\n    Write a function to find the size in bytes of the given string.\n    '''\n    return sys.getsizeof(string_list)\ndef dict_size(dict_list):\n    '''\n    Write a function to find the size in bytes of the given dictionary.\n    '''\n    return sys.getsizeof(dict_list)\ndef main():\n    print \"Tuple Size\", tuple_size([1,2,3,4,5,6,7,8])\n    print \"List Size\", list_size([1,2,3,4,5,6,7,8])\n    print \"Set Size\", set_size([1,2,3,4,5,6,7,8])\n    print \"String Size\", string_size('this is a string')\n    print \"Dictionary Size\", dict_size({\"a\":\"b\"})\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for value in tuple_list:\n        size += sys.getsizeof(value)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for x in tuple_list:\n        print(sys.getsizeof(x))\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #check input type\n    assert type(tuple_list) == list, 'Tuple list is not list type'\n    #check tuple length\n    assert len(tuple_list) > 0, 'Tuple list is empty'\n    #total count\n    tuple_size = 0\n    #count each item of the tuple list\n    for i in tuple_list:\n        tuple_size += sys.getsizeof(i)\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)*sys.getsizeof(tuple_list[0])\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size = size + sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binary_search(arr1, arr2, k):\n        '''\n        Helper function for finding kth element.\n        '''\n        start = 0\n        end = len(arr2)\n        while start < end:\n            mid = (start + end) / 2\n            if arr2[mid] >= arr1[0]:\n                start = mid + 1\n            else:\n                end = mid\n        return start\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2:\n        return None\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if k > len(arr1) + len(arr2):\n        return None\n    low = 0\n    high = len(arr1)\n    while low <= high:\n        mid = low + ((high-low)>>1)\n        if mid > len(arr2):\n            mid = len(arr2) - 1\n        if arr1[mid] > arr2[mid]:\n            high = mid - 1\n        elif arr1[mid] < arr2[mid]:\n            low = mid + 1\n        else:\n            if mid == len(arr2)-1:\n                return arr1[mid]\n            if k <= mid+1:\n                return arr1[mid]\n            else:\n                k -= mid+1\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    if not arr1:\n        return arr2[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_length = len(arr1)\n    arr2_length = len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 and not arr2:\n        raise ValueError(\"No elements in arrays\")\n    if len(arr1) == 0 and len(arr2) == 0:\n        return None\n    elif len(arr1) == 0:\n        return arr2[k-1]\n    elif len(arr2) == 0:\n        return arr1[k-1]\n    elif k == 1:\n        return min(arr1[0], arr2[0])\n    elif k == len(arr1) + len(arr2):\n        return max(arr1[-1], arr2[-1])\n    else:\n        if arr1[len(arr1)/2] > arr2[len(arr2)/2]:\n            return find_kth(arr1[:len(arr1)/2], arr2[len(arr2)/2:], k)\n        else:\n            return find_kth(arr1[len(arr1)/2:], arr2[:len(arr2)/2], k-len(arr1[:len(arr1)/2]))\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    kth_element1 = kth_element_recursive(arr1, arr2, k)\n    kth_element2 = kth_element_binary(arr1, arr2, k)\n    return kth_element1, kth_element2\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # arr1, arr2 = sorted(arr1), sorted(arr2)\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr2[j] < arr1[i]:\n            j += 1\n        else:\n            return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[len(arr1) - 1] > arr2[len(arr2) - 1]:\n        return arr2[k - 1]\n    if arr1[len(arr1) - 1] < arr2[len(arr2) - 1]:\n        return arr1[k - 1]\n    if len(arr1) == len(arr2):\n        return arr1[len(arr1) - k]\n    if len(arr1) > len(arr2):\n        return find_kth(arr1[:len(arr1) - len(arr2)], arr2, k)\n    return find_kth(arr1, arr2[:len(arr2) - len(arr1)], k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n        if i == len(arr1):\n            if j < k:\n                return arr2[k-1]\n            return arr2[k]\n        if j == len(arr2):\n            if i < k:\n                return arr1[k-1]\n            return arr1[k]\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Get the number of digits in the number\n    digits = len(str(number))\n    # Loop from 0 to number to get the sum of the cube of each digit\n    total = 0\n    for i in range(digits):\n        # Add the cube of each digit to the total\n        total += pow(number % 10, digits)\n        # Get the last digit of the number\n        number //= 10\n    # Check if the total is equal to the number\n    if total == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 0:\n        return False\n    sum = 0\n    temp = number\n    while temp > 0:\n        sum += temp % 10\n        temp = temp // 10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return sum(int(digit)**3 for digit in str(number)) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    digits = [int(d) for d in str(number)]\n    for d in digits:\n        total = total + pow(d, len(str(number)))\n    return number == total\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    \n    for digit in number:\n        sum = sum + pow(int(digit), len(number))\n    \n    return sum == int(number)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert number into a string\n    # print('Number:',number)\n    str_number = str(number)\n    # print('Number converted to string:',str_number)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    str_num = str(number)\n    length = len(str_num)\n    sum = 0\n    for digit in str_num:\n        sum += int(digit)**length\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # print(sum(int(i)**len(str(number)) for i in str(number)))\n    return sum(int(i)**len(str(number)) for i in str(number)) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    armstrong = 0\n    digits = 0\n    copy_number = number\n    while copy_number > 0:\n        digit = copy_number % 10\n        copy_number = copy_number / 10\n        digits = digits + 1\n    while number > 0:\n        digit = number % 10\n        number = number / 10\n        armstrong = armstrong + digit ** digits\n    if armstrong == copy_number:\n        return True\n    else:\n        return False\ndef generate_random_number(digits):\n    '''\n    Write a function to generate a random number, the number should have digits\n    '''\n    import random\n    random_number = random.randint(10 ** (digits - 1), 10 ** digits - 1)\n    return random_number\ndef reverse(number):\n    '''\n    Write a function to reverse a number\n    '''\n    reversed_number = 0\n    while number > 0:\n        digit = number % 10\n        reversed_number = reversed_number * 10 + digit\n        number = number / 10\n    return reversed_number\ndef calculate_binary_1(number):\n    '''\n    Write a function to convert a decimal number to binary\n    '''\n    if number == 0:\n        return 0\n    bit = number % 2\n    return bit + calculate_binary_1(number // 2)\ndef calculate_binary(number):\n    '''\n    Write a function to convert a decimal number to binary\n    '''\n    bit = 0\n    while number > 0:\n        bit = bit * 2 + number % 2\n        number = number // 2\n    return bit\ndef convert_to_base_ten(number, base):\n    '''\n    Write a function to convert a number from any base to base 10\n    '''\n    new_number = 0\n    power = 1\n    while number > 0:\n        digit = number % 10\n        number = number // 10\n        new_number = new_number + digit * power\n        power = power * base\n    return new_number\ndef is_palindrome(number):\n    '''\n    Write a function to check whether a number is a palindrome or not\n    '''\n    copy_number = number\n    reverse_number = 0\n    while copy_number > 0:\n        digit = copy_number % 10\n        copy_number = copy_number / 10\n        reverse_number = reverse_number * 10 + digit\n    if number == reverse_number:\n        return True\n    else:\n        return False\ndef is_palindrome_recursive(number):\n    '''\n    Write a function to check whether a number is a palindrome or not\n    '''\n    if number < 10:\n        return True\n    elif number % 10 == number / 10 % 10:\n        return True\n    else:\n        return False\ndef is_perfect_square(number):\n    '''\n    Write a function to check whether a number is a perfect square or not\n    '''\n    import math\n    if number < 0:\n        return False\n    square_root = math.sqrt(number)\n    if square_root == int(square_root):\n        return True\n    else:\n        return False\ndef is_perfect_square_recursive(number):\n    '''\n    Write a function to check whether a number is a perfect square or not\n    '''\n    if number < 0:\n        return False\n    elif number == 0 or number == 1:\n        return True\n    elif number % 2 == 0:\n        return is_perfect_square_recursive(number / 2)\n    else:\n        return False\ndef is_perfect_square_iterative(number):\n    '''\n    Write a function to check whether a number is a perfect square or not\n    '''\n    if number < 0:\n        return False\n    elif number == 0 or number == 1:\n        return True\n    last_guess = 1\n    next_guess = (last_guess + number / last_guess) / 2\n    while next_guess!= last_guess:\n        last_guess = next_guess\n        next_guess = (last_guess + number / last_guess) / 2\n    return next_guess == last_guess\ndef is_perfect_square_float(number):\n    '''\n    Write a function to check whether a number is a perfect square or not\n    '''\n    import math\n    if number < 0:\n        return False\n    square_root = math.sqrt(number)\n    if square_root == int(square_root):\n        return True\n    else:\n        return False\ndef is_perfect_square_float_recursive(number):\n    '''\n    Write a function to check whether a number is a perfect square or not\n    '''\n    if number < 0:\n        return False\n    elif number == 0 or number == 1:\n        return True\n    elif number % 2 == 0:\n        return is_perfect_square_float_recursive(number / 2)\n    else:\n        return False\ndef is_perfect_square_float_iterative(number):\n    '''\n    Write a function to check whether a number is a perfect square or not\n    '''\n    if number < 0:\n        return False\n    elif number == 0 or number == 1:\n        return True\n    last_guess = 1\n    next_guess = (last_guess + number / last_guess) / 2\n    while next_guess!= last_guess:\n        last_guess = next_guess\n        next_guess = (last_guess + number / last_guess) / 2\n    return next_guess == last_guess\ndef is_perfect_square_float(number):\n    '''\n    Write a function to check whether a number is a perfect square or not\n    '''\n    import math\n    if number < 0:\n        return False\n    square_root = math.sqrt(number)\n    if square_root == int(square_root):\n        return True\n    else:\n        return False\ndef is_perfect_square_float_recursive(number):\n    '''\n    Write a function to check whether a number is a perfect square or not\n    '''\n    if number < 0:\n        return False\n    elif number == 0 or number == 1:\n        return True\n    elif number % 2 == 0:\n        return is_perfect_square_float_recursive(number / 2)\n    else:\n        return False\ndef is_perfect_square_float_iterative(number):\n    '''\n    Write a function to check whether a number is a perfect square or not\n    '''\n    if number < 0:\n        return False\n    elif number == 0 or number == 1:\n        return True\n    last_guess = 1\n    next_guess = (last_guess + number / last_guess) / 2\n    while next_guess!= last_guess:\n        last_guess = next_guess\n        next_guess = (last_guess + number / last_guess) / 2\n    return next_guess == last_guess\ndef number_of_set_bits(number):\n    '''\n    Write a function to count the number of set bits in a given number\n    '''\n    number_of_set_bits = 0\n    while number > 0:\n        if number % 2 == 1:\n            number_of_set_bits += 1\n        number = number // 2\n    return number_of_set_bits\ndef reverse_bits(number):\n    '''\n    Write a function to reverse the bits of a given number\n    '''\n    reversed_number = 0\n    for i in range(32):\n        bit = number % 2\n        number = number // 2\n        reversed_number = reversed_number + bit * pow(2, 31 - i)\n    return reversed_number\ndef number_of_set_bits_recursive(number):\n    '''\n    Write a function to count the number of set bits in a given number\n    '''\n    if number < 0:\n        return 0\n    elif number == 0 or number == 1:\n        return 1\n    else:\n        return number_of_set_bits_recursive(number // 2) + (number % 2)\ndef number_of_set_bits_iterative(number):\n    '''\n    Write a function to count the number of set bits in a given number\n    '''\n    if number < 0:\n        return 0\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_as_string = str(number)\n    lenght = len(number_as_string)\n    sum = 0\n    for digit in number_as_string:\n        digit_to_power = int(digit)**lenght\n        sum += digit_to_power\n    if sum == int(number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number) is not int:\n        print 'Please input a natural number'\n        return\n    \n    s, count = 0, 1\n    while count <= number:\n        s += count\n        count += 1\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total = total + i\n    average = total / number\n    return(total, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    average = 0\n    for i in range(1,number+1):\n        total += i\n    average = total/number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 1:\n        return (number,0)\n    else:\n        return (number*(number+1)/2,number*(number+1)/2)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    total = 0\n    for i in range(1,number+1):\n        total += i\n        sum += i\n    avg = sum / total\n    return(sum, avg)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    if not isinstance(number, int):\n        raise TypeError('number should be integer')\n    if number < 1:\n        raise ValueError('number should be natural')\n    \n    sum_avg = 0\n    for i in range(1, number + 1):\n        sum_avg += i\n    \n    return sum_avg, sum_avg / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i <= number:\n        sum = sum + i\n        i = i + 1\n    avg = sum / number\n    return sum, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_average_list = [0]\n    average = 0\n    for i in range(1,number+1):\n        average += i\n        sum_average_list.append(average)\n    return sum_average_list\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(number+1):\n        s = s + i\n    ave = s / number\n    return s,ave\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(1,number+1))/number\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2) == 0 : \n        return True\n    return False\ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 2 : \n        return True\n    if n == 0 or n == 1 : \n        return False\n    if n % 2 == 0 : \n        return False\n    for i in range(3, int(n**0.5) + 1, 2) : \n        if n % i == 0 : \n            return False\n    return True\ndef Factors(n) : \n    '''\n    Write a python function to find the factors of a given number.\n    '''\n    if is_Even(n) : \n        i = 2\n        while i < n : \n            if n%i == 0 : \n                print i\n            i = i+1\n    else : \n        for i in range(1, n+1) : \n            if n%i == 0 : \n                print i\n            i = i+1\ndef Print_Prime_factors(n) : \n    '''\n    Write a python function to print the prime factors of a given number.\n    '''\n    i = 2\n    while i < n : \n        if n%i == 0 : \n            print i\n        i = i+1\ndef Prime_Factors(n) : \n    '''\n    Write a python function to print the prime factors of a given number.\n    '''\n    i = 2\n    while i < n : \n        if n%i == 0 : \n            print i\n        i = i+1\n    while n > 1 : \n        for i in range(2, n+1) : \n            if n%i == 0 : \n                print i\n            i = i+1\n        n = n/i\n        print \"\"\ndef Sum_of_Factors(n) : \n    '''\n    Write a python function to find the sum of the factors of a given number.\n    '''\n    i = 1\n    sum = 0\n    while i < n : \n        if n%i == 0 : \n            sum = sum + i\n        i = i+1\n    return sum\ndef Average(n) : \n    '''\n    Write a python function to find the average of the factors of a given number.\n    '''\n    i = 1\n    sum = 0\n    while i < n : \n        if n%i == 0 : \n            sum = sum + i\n        i = i+1\n    return sum/i\ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether a given number is perfect or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n%i == 0 : \n            sum = sum + i\n        i = i+1\n    if sum == n : \n        return True\n    else : \n        return False\ndef is_Pandigital(n) : \n    '''\n    Write a python function to check whether a given number is pandigital or not.\n    '''\n    str1 = \"\"\n    for i in range(1, n+1) : \n        str1 = str1 + str(i)\n    if len(str1) == n : \n        return True\n    return False\ndef reverse_num(n) : \n    '''\n    Write a python function to reverse a given number.\n    '''\n    num = n\n    rev = 0\n    while num > 0 : \n        rev = (rev * 10) + (num % 10)\n        num = num/10\n    return rev\ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    num = n\n    rev = 0\n    while num > 0 : \n        rev = (rev * 10) + (num % 10)\n        num = num/10\n    if rev == n : \n        return True\n    return False\ndef is_Abundant(n) : \n    '''\n    Write a python function to check whether a given number is abundant or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n%i == 0 : \n            sum = sum + i\n        i = i+1\n    if sum > n : \n        return True\n    return False\ndef is_Deficient(n) : \n    '''\n    Write a python function to check whether a given number is deficient or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n%i == 0 : \n            sum = sum + i\n        i = i+1\n    if sum < n : \n        return True\n    return False\ndef is_Progressive(n) : \n    '''\n    Write a python function to check whether a given number is progressive or not.\n    '''\n    i = 1\n    while i < n : \n        if i > n : \n            return False\n        if n%i == 0 : \n            i = i+1\n        else : \n            return False\n    return True\ndef Divisors(n) : \n    '''\n    Write a python function to find the divisors of a given number.\n    '''\n    i = 1\n    divisors = []\n    while i < n : \n        if n%i == 0 : \n            divisors.append(i)\n        i = i+1\n    return divisors\ndef Number_of_Factors(n) : \n    '''\n    Write a python function to find the number of factors of a given number.\n    '''\n    i = 1\n    factors = 0\n    while i < n : \n        if n%i == 0 : \n            factors = factors + 1\n        i = i+1\n    return factors\ndef Sum_of_Divisors(n) : \n    '''\n    Write a python function to find the sum of the divisors of a given number.\n    '''\n    i = 1\n    sum = 0\n    while i < n : \n        if n%i == 0 : \n            sum = sum + i\n        i = i+1\n    return sum\ndef is_Perfect_Square(n) : \n    '''\n    Write a python function to check whether a given number is perfect square or not.\n    '''\n    i = 1\n    sq = 0\n    while i < n : \n        sq = (sq * 10) + (i * i)\n        i = i+1\n    if sq == n : \n        return True\n    return False\ndef Fractional_Sum(n) : \n    '''\n    Write a python function to find the fractional sum of a given number.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        sum = sum + i/n\n        i = i+1\n    return sum\ndef is_Kaprekar_Number(n) : \n    '''\n    Write a python function to check whether a given number is Kaprekar number or not.\n    '''\n    num = n\n    sq = 0\n    while num > 0 : \n        sq = sq + (num % 10) ** 2\n        num = num/10\n    if sq == n : \n        return True\n    return False\ndef is_Harshad_Number(n) : \n    '''\n    Write a python function to check whether a given number is harshad number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n%i == 0 : \n            sum = sum + i\n        i = i+1\n    if sum == n : \n        return True\n    return False\ndef is_Harshad_Number(n) : \n    '''\n    Write a python function to check whether a given number is harshad number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n%i == 0 : \n            sum = sum + i\n        i = i+1\n    if sum == n : \n        return True\n    return False\ndef is_Leap_Year(n) : \n    '''\n    Write a python function to check whether a given number is "
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n & 1) == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n    \ndef reverse_a_number(n) : \n    '''\n    Write a python function to reverse the given number\n    '''\n    a = abs(n)\n    b = 0\n    while(a!=0) : \n        c = a%10\n        b = b*10 + c\n        a = a/10\n    return b\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2) == 0 \n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    return False\n    \n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #str1 = input('Enter the string: ')\n    for i in range(len(str1)):\n        if str1[i] in str1[:i]+str1[i+1:]:\n            return str1[i]\n        elif i==len(str1)-1:\n            return 'No repeated characters in the string'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) >= 2:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # for i in str1:\n    #     if str1.count(i)>1:\n    #         return i\n    #     else:\n    #         continue\n    # return \"No repeated character found\"\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return [char for char in str1 if str1.count(char) > 1][0]\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # base case, if the string has one character, return the character\n    if len(str1) == 1:\n        return str1\n    # break the string into a list of characters\n    char_list = list(str1)\n    # set the pointer to the start of the string\n    p = 0\n    # keep track of the last index of a repeated character\n    last_index = -1\n    # if the repeated character is the same as the character before it, increment the last index\n    while p < len(char_list):\n        if char_list[p] == char_list[p+1]:\n            last_index = p\n            p += 1\n        else:\n            p += 1\n    return char_list[last_index]\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i in str1:\n        d[i] += 1\n    for i in str1:\n        if d[i] > 1:\n            return i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i)>1:\n            return i\n    return 'No repeat'\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1,n) if is_ludic(i)]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = [1]\n    while True:\n        new_lucids = []\n        for i in lucids:\n            if i**2 <= n:\n                new_lucids.append(i**2)\n            if i**3 <= n:\n                new_lucids.append(i**3)\n        lucids = new_lucids\n        if len(lucids) == 0:\n            break\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    nums = [0,1]\n    if n < 0:\n        return nums\n    if n == 0:\n        return nums\n    for i in range(2, n + 1):\n        l_prime = nums[i - 1]\n        # print(i,l_prime)\n        if i % 2 == 0:\n            l_prime = nums[i // 2]\n        if i % 3 == 0:\n            l_prime = nums[(i // 3) * ((i // 3) + 1)]\n        nums.append(l_prime)\n    return nums\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [x for x in range(n) if x**0.5%1==0]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    # we need a helper function to compute the next lucid number\n    def next_lucid(n):\n        # if we're at 2, we need to jump to 3\n        if n == 2:\n            return 3\n        # if we're at 3, we need to jump to 5\n        if n == 3:\n            return 5\n        # if we're at 4, we need to jump to 6\n        if n == 4:\n            return 6\n        # if we're at 5, we need to jump to 7\n        if n == 5:\n            return 7\n        # if we're at 6, we need to jump to 8\n        if n == 6:\n            return 8\n        # if we're at 7, we need to jump to 9\n        if n == 7:\n            return 9\n        # if we're at 8, we need to jump to 10\n        if n == 8:\n            return 10\n        # if we're at 9, we need to jump to 11\n        if n == 9:\n            return 11\n        # if we're at 10, we need to jump to 12\n        if n == 10:\n            return 12\n        # if we're at 11, we need to jump to 13\n        if n == 11:\n            return 13\n        # if we're at 12, we need to jump to 14\n        if n == 12:\n            return 14\n        # if we're at 13, we need to jump to 15\n        if n == 13:\n            return 15\n        # if we're at 14, we need to jump to 16\n        if n == 14:\n            return 16\n        # if we're at 15, we need to jump to 17\n        if n == 15:\n            return 17\n        # if we're at 16, we need to jump to 18\n        if n == 16:\n            return 18\n        # if we're at 17, we need to jump to 19\n        if n == 17:\n            return 19\n        # if we're at 18, we need to jump to 20\n        if n == 18:\n            return 20\n        # if we're at 19, we need to jump to 21\n        if n == 19:\n            return 21\n        # if we're at 20, we need to jump to 22\n        if n == 20:\n            return 22\n        # if we're at 21, we need to jump to 23\n        if n == 21:\n            return 23\n        # if we're at 22, we need to jump to 24\n        if n == 22:\n            return 24\n        # if we're at 23, we need to jump to 25\n        if n == 23:\n            return 25\n        # if we're at 24, we need to jump to 26\n        if n == 24:\n            return 26\n        # if we're at 25, we need to jump to 27\n        if n == 25:\n            return 27\n        # if we're at 26, we need to jump to 28\n        if n == 26:\n            return 28\n        # if we're at 27, we need to jump to 29\n        if n == 27:\n            return 29\n        # if we're at 28, we need to jump to 30\n        if n == 28:\n            return 30\n        # if we're at 29, we need to jump to 31\n        if n == 29:\n            return 31\n        # if we're at 30, we need to jump to 32\n        if n == 30:\n            return 32\n        # if we're at 31, we need to jump to 33\n        if n == 31:\n            return 33\n        # if we're at 32, we need to jump to 34\n        if n == 32:\n            return 34\n        # if we're at 33, we need to jump to 35\n        if n == 33:\n            return 35\n        # if we're at 34, we need to jump to 36\n        if n == 34:\n            return 36\n        # if we're at 35, we need to jump to 37\n        if n == 35:\n            return 37\n        # if we're at 36, we need to jump to 38\n        if n == 36:\n            return 38\n        # if we're at 37, we need to jump to 39\n        if n == 37:\n            return 39\n        # if we're at 38, we need to jump to 40\n        if n == 38:\n            return 40\n        # if we're at 39, we need to jump to 41\n        if n == 39:\n            return 41\n        # if we're at 40, we need to jump to 42\n        if n == 40:\n            return 42\n        # if we're at 41, we need to jump to 43\n        if n == 41:\n            return 43\n        # if we're at 42, we need to jump to 44\n        if n == 42:\n            return 44\n        # if we're at 43, we need to jump to 45\n        if n == 43:\n            return 45\n        # if we're at 44, we need to jump to 46\n        if n == 44:\n            return 46\n        # if we're at 45, we need to jump to 47\n        if n == 45:\n            return 47\n        # if we're at 46, we need to jump to 48\n        if n == 46:\n            return 48\n        # if we're at 47, we need to jump to 49\n        if n == 47:\n            return 49\n        # if we're at 48, we need to jump to 50\n        if n == 48:\n            return 50\n        # if we're at 49, we need to jump to 51\n        if n == 49:\n            return 51\n        # if we're at 50, we need to jump to 52\n        if n == 50:\n            return 52\n        # if we're at 51, we need to jump to 53\n        if n == 51:\n            return 53\n        # if we're at 52, we need to jump to 54\n        if n == 52:\n            return 54\n        # if we're at 53, we need to jump to 55\n        if n == 53:\n            return 55\n        # if we're at 54, we need to jump to 56\n        if n == 54:\n            return 56\n        # if we're at 55, we need to jump to 57\n        if n == 55:\n            return 57\n        # if we're at 56, we need to jump to 58\n        if n == 56:\n            return 58\n        # if we're at 57, we need to jump to 59\n        if n == 57:\n            return 59\n        # if we're at 58, we need to jump to 60\n        if n == 58:\n            return 60\n        # if we're at 59, we need to jump to 61\n        if n == 59:\n            return 61\n        # if we're at 60, we need to jump to 62\n        if n == 60:\n            return 62\n        # if we're at 61, we need to jump to 63\n        if n == 61:\n            return 63\n        # if we're at 62, we need to jump to 64\n        if n == 62:\n            return 64\n        # if we're at 63, we need to jump to 65\n        if n == 63:\n            return 65\n        # if we're at 64, we need to jump to 66\n        if n == 64:\n            return 66\n        # if we're at 65, we need to jump to 67\n        if n == 65:\n            return 67\n        # if we're at 66, we need to jump to 68\n        if n == 66:\n            return 68\n        # if we're at 67, we need to jump to 69\n        if n == 67:\n            return 69\n        # if we're at 68, we need to jump to 70\n        if n == 68:\n            return 70\n        # if we're at 69, we need to jump to 71\n        if n == 69:\n            return 71\n        # if we're at 70, we need to jump to 72\n        if n == 70:\n            return 72\n        # if we're at 71, we need to jump to 73\n        if n == 71:\n            return 73\n        # if we're at 72, we need to jump to 74\n        if n == 72:\n            return 74\n        # if we're at 73, we need to jump to 75\n        if n == 73:\n            return 75\n        # if we're at 74, we need to jump to 76\n        if n == 74:\n            return 76\n        # if we're at 75, we need to jump to 77\n        if n == 75:\n            return 77\n        # if we're at 76, we need to jump to 78\n        if n == 76:\n            return 78\n        # if we're at 77, we need to jump to 79\n        if n == 77:\n            return 79\n        # if we're at 78"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    ludic = []\n    for i in range(1, n):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in xrange(1, n):\n        if i ** 2 == i:\n            lucid_nums.append(i)\n            if i * i == i:\n                lucid_nums.append(i * i)\n                if i * i * i == i:\n                    lucid_nums.append(i * i * i)\n    return lucid_nums\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 2\n    while True:\n        if is_ludic(n, i):\n            ludic.append(i)\n        if len(ludic) == n:\n            break\n        i += 1\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    L = []\n    for i in range(1,n):\n        tmp = i\n        tmp_str = str(tmp)\n        for j in range(len(tmp_str)-1):\n            tmp += int(tmp_str[j])\n        if tmp <= n:\n            L.append(tmp)\n    return L\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Use the list of first six prime numbers to represent the set of truncatable\n    # primes\n    if n<=6:\n        return range(1,n+1)\n    ludic=[6,25,121,2,7,13,19]\n    # The first four numbers are all prime\n    for i in range(4,n+1):\n        if isprime(i):\n            ludic.append(i)\n    # Each number is the sum of three distinct primes\n    for i in range(len(ludic)-1,0,-1):\n        for j in range(i-1,-1,-1):\n            a=ludic[i]\n            b=ludic[j]\n            c=ludic[i] + ludic[j]\n            if c<=n and isprime(c):\n                ludic.append(c)\n    return sorted(ludic)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    if not s: return s\n    \n    L = []\n    \n    start = 0\n    while True:\n        if s[start] =='':\n            L.append(s[start+1:len(s)])\n            start = 0\n        else:\n            start += 1\n        if start == len(s):\n            L.append(s[start:len(s)])\n            break\n    \n    L.reverse()\n    \n    return''.join(L)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if s == \"\":\n        return \"\"\n    s_list = s.split()\n    result = \"\"\n    for word in s_list[::-1]:\n        result += word + \" \"\n    return result\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return s\n    s_words = s.split(' ')\n    result = ''\n    for i in range(len(s_words)-1, -1, -1):\n        result += s_words[i] +''\n    return result\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    words.reverse()\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    else:\n        return all([num % i for i in range(3, int(num**0.5)+1, 2)])\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if num is negative\n    if num < 0:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3 or num == 5 or num == 7:\n        return True\n    elif num % 2 == 0 or num % 3 == 0 or num % 5 == 0 or num % 7 == 0:\n        return False\n    else:\n        for i in range(7, int(num ** (1/2)) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree/180)*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (math.pi/180) * float(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef compute_theta(x,y):\n    '''\n    Compute the angle between the x-axis and the vector (x,y)\n    '''\n    theta = math.atan2(y, x)\n    return theta\ndef vector_length(x,y):\n    '''\n    Write a function to compute the length of a vector.\n    '''\n    return math.sqrt(x**2 + y**2)\ndef vector_angle(x,y):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    return compute_theta(x,y)\ndef compute_h(b,a):\n    '''\n    Write a function to compute the height of a triangle, where a is the length of one side, and b is the length of the other.\n    '''\n    return a * b / math.sqrt(a**2 + b**2)\ndef compute_d(a,h):\n    '''\n    Write a function to compute the diagonal of a right angle triangle, where a is the length of one side, and h is the height of the triangle.\n    '''\n    return math.sqrt(a**2 + h**2)\ndef compute_area(a,b):\n    '''\n    Write a function to compute the area of a rectangle, where a is the length of one side, and b is the length of the other.\n    '''\n    return a * b\ndef compute_perimeter(a,b):\n    '''\n    Write a function to compute the perimeter of a rectangle, where a is the length of one side, and b is the length of the other.\n    '''\n    return a + b + a + b\ndef get_rectangle_area(width,height):\n    '''\n    Write a function to compute the area of a rectangle, where a is the length of one side, and b is the length of the other.\n    '''\n    return width * height\ndef get_rectangle_perimeter(width,height):\n    '''\n    Write a function to compute the perimeter of a rectangle, where a is the length of one side, and b is the length of the other.\n    '''\n    return 2 * width + 2 * height\ndef is_equal(a,b):\n    '''\n    Write a function to check if two numbers are equal.\n    '''\n    return a == b\ndef is_less(a,b):\n    '''\n    Write a function to check if one number is less than another.\n    '''\n    return a < b\ndef is_greater(a,b):\n    '''\n    Write a function to check if one number is greater than another.\n    '''\n    return a > b\ndef is_less_equal(a,b):\n    '''\n    Write a function to check if one number is less than or equal to another.\n    '''\n    return a <= b\ndef is_greater_equal(a,b):\n    '''\n    Write a function to check if one number is greater than or equal to another.\n    '''\n    return a >= b\ndef is_less_equal_or_equal(a,b):\n    '''\n    Write a function to check if one number is less than or equal to another.\n    '''\n    return a <= b\ndef is_greater_equal_or_equal(a,b):\n    '''\n    Write a function to check if one number is greater than or equal to another.\n    '''\n    return a >= b\ndef get_greater(a,b):\n    '''\n    Write a function to get the larger number.\n    '''\n    if a > b:\n        return a\n    return b\ndef get_less(a,b):\n    '''\n    Write a function to get the smaller number.\n    '''\n    if a < b:\n        return a\n    return b\ndef get_equal(a,b):\n    '''\n    Write a function to get the equal number.\n    '''\n    if a == b:\n        return a\n    return b\ndef get_greater_or_equal(a,b):\n    '''\n    Write a function to get the greater or equal number.\n    '''\n    if a >= b:\n        return a\n    return b\ndef get_less_or_equal(a,b):\n    '''\n    Write a function to get the less or equal number.\n    '''\n    if a <= b:\n        return a\n    return b\ndef get_greater_or_equal_or_equal(a,b):\n    '''\n    Write a function to get the greater or equal number.\n    '''\n    if a >= b:\n        return a\n    return b\ndef get_less_or_equal_or_equal(a,b):\n    '''\n    Write a function to get the less or equal number.\n    '''\n    if a <= b:\n        return a\n    return b\ndef compare_numbers(a,b):\n    '''\n    Write a function to compare two numbers.\n    '''\n    return a == b\ndef compare_numbers_greater(a,b):\n    '''\n    Write a function to compare two numbers.\n    '''\n    return a > b\ndef compare_numbers_less(a,b):\n    '''\n    Write a function to compare two numbers.\n    '''\n    return a < b\ndef compare_numbers_less_or_equal(a,b):\n    '''\n    Write a function to compare two numbers.\n    '''\n    return a <= b\ndef compare_numbers_greater_or_equal(a,b):\n    '''\n    Write a function to compare two numbers.\n    '''\n    return a >= b\ndef compare_numbers_greater_or_equal_or_equal(a,b):\n    '''\n    Write a function to compare two numbers.\n    '''\n    return a >= b\ndef compare_numbers_less_or_equal_or_equal(a,b):\n    '''\n    Write a function to compare two numbers.\n    '''\n    return a <= b\ndef get_mod(a,b):\n    '''\n    Write a function to get the modulus of two numbers.\n    '''\n    return a % b\ndef get_floor(a,b):\n    '''\n    Write a function to get the floor of a number.\n    '''\n    return int(a // b)\ndef get_ceil(a,b):\n    '''\n    Write a function to get the ceiling of a number.\n    '''\n    return int(math.ceil(a / b))\ndef get_factorial(a):\n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    if a == 0:\n        return 1\n    return a * get_factorial(a - 1)\ndef get_fibonacci(n):\n    '''\n    Write a function to compute the nth value of the Fibonacci series.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return get_fibonacci(n - 1) + get_fibonacci(n - 2)\ndef get_gcd(a,b):\n    '''\n    Write a function to get the greatest common divisor of two numbers.\n    '''\n    if a == 0:\n        return b\n    return get_gcd(b % a, a)\ndef get_lcm(a,b):\n    '''\n    Write a function to get the lowest common multiple of two numbers.\n    '''\n    return a * b / get_gcd(a, b)\ndef get_exact_change(x):\n    '''\n    Write a function to get the exact change of an amount of dollars, using coins with a minimum of two types of coins.\n    '''\n    if x < 0:\n        return None\n    s = []\n    if x == 0:\n        return [0]\n    if x == 1:\n        return [1]\n    if x == 2:\n        return [2,1]\n    if x == 3:\n        return [3,1,1]\n    for c in [5,10,25]:\n        if x % c == 0:\n            s.append(c)\n            x /= c\n    return s + get_exact_change(x)\ndef get_pythagorean_triple"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree/180)*math.pi\ndef normalize_vector(vector):\n    '''\n    Write a function to normalize a vector.\n    '''\n    if vector[0] == 0 and vector[1] == 0 and vector[2] == 0:\n        return vector\n    magnitude = math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2)\n    return [vector[0]/magnitude,vector[1]/magnitude,vector[2]/magnitude]\ndef normalize_vector2(vector):\n    '''\n    Write a function to normalize a vector.\n    '''\n    if vector[0] == 0 and vector[1] == 0 and vector[2] == 0:\n        return vector\n    magnitude = math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2)\n    return [vector[0]/magnitude,vector[1]/magnitude,vector[2]/magnitude]\ndef get_normalized_vector(vector):\n    '''\n    Write a function to get the normalized vector of a vector.\n    '''\n    if vector[0] == 0 and vector[1] == 0 and vector[2] == 0:\n        return vector\n    magnitude = math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2)\n    return [vector[0]/magnitude,vector[1]/magnitude,vector[2]/magnitude]\ndef cross_product(vector1,vector2):\n    '''\n    Write a function to get the cross product of two vectors.\n    '''\n    return [vector1[1]*vector2[2]-vector1[2]*vector2[1],vector1[2]*vector2[0]-vector1[0]*vector2[2],vector1[0]*vector2[1]-vector1[1]*vector2[0]]\ndef get_cartesian_coordinates(vector):\n    '''\n    Write a function to get the cartesian coordinates of a vector.\n    '''\n    return [vector[0]*math.cos(radian_degree(vector[2])),vector[0]*math.sin(radian_degree(vector[2])),vector[1]]\ndef get_polar_coordinates(vector):\n    '''\n    Write a function to get the polar coordinates of a vector.\n    '''\n    return [math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2),math.acos(vector[2]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))]\ndef get_cartesian_coordinates2(vector):\n    '''\n    Write a function to get the cartesian coordinates of a vector.\n    '''\n    return [vector[0]*math.cos(radian_degree(vector[2])),vector[0]*math.sin(radian_degree(vector[2])),vector[1]]\ndef get_polar_coordinates2(vector):\n    '''\n    Write a function to get the polar coordinates of a vector.\n    '''\n    return [math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2),math.acos(vector[2]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))]\ndef get_cartesian_coordinates3(vector):\n    '''\n    Write a function to get the cartesian coordinates of a vector.\n    '''\n    return [vector[0]*math.cos(radian_degree(vector[2])),vector[0]*math.sin(radian_degree(vector[2])),vector[1]]\ndef get_polar_coordinates3(vector):\n    '''\n    Write a function to get the polar coordinates of a vector.\n    '''\n    return [math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2),math.acos(vector[2]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))]\ndef get_cartesian_coordinates4(vector):\n    '''\n    Write a function to get the cartesian coordinates of a vector.\n    '''\n    return [vector[0]*math.cos(radian_degree(vector[2])),vector[0]*math.sin(radian_degree(vector[2])),vector[1]]\ndef get_polar_coordinates4(vector):\n    '''\n    Write a function to get the polar coordinates of a vector.\n    '''\n    return [math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2),math.acos(vector[2]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))]\ndef get_cartesian_coordinates5(vector):\n    '''\n    Write a function to get the cartesian coordinates of a vector.\n    '''\n    return [vector[0]*math.cos(radian_degree(vector[2])),vector[0]*math.sin(radian_degree(vector[2])),vector[1]]\ndef get_polar_coordinates5(vector):\n    '''\n    Write a function to get the polar coordinates of a vector.\n    '''\n    return [math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2),math.acos(vector[2]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))]\ndef get_cartesian_coordinates6(vector):\n    '''\n    Write a function to get the cartesian coordinates of a vector.\n    '''\n    return [vector[0]*math.cos(radian_degree(vector[2])),vector[0]*math.sin(radian_degree(vector[2])),vector[1]]\ndef get_polar_coordinates6(vector):\n    '''\n    Write a function to get the polar coordinates of a vector.\n    '''\n    return [math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2),math.acos(vector[2]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))]\ndef get_cartesian_coordinates7(vector):\n    '''\n    Write a function to get the cartesian coordinates of a vector.\n    '''\n    return [vector[0]*math.cos(radian_degree(vector[2])),vector[0]*math.sin(radian_degree(vector[2])),vector[1]]\ndef get_polar_coordinates7(vector):\n    '''\n    Write a function to get the polar coordinates of a vector.\n    '''\n    return [math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2),math.acos(vector[2]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))]\ndef get_cartesian_coordinates8(vector):\n    '''\n    Write a function to get the cartesian coordinates of a vector.\n    '''\n    return [vector[0]*math.cos(radian_degree(vector[2])),vector[0]*math.sin(radian_degree(vector[2])),vector[1]]\ndef get_polar_coordinates8(vector):\n    '''\n    Write a function to get the polar coordinates of a vector.\n    '''\n    return [math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2),math.acos(vector[2]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))]\ndef get_cartesian_coordinates9(vector):\n    '''\n    Write a function to get the cartesian coordinates of a vector.\n    '''\n    return [vector[0]*math.cos(radian_degree(vector[2])),vector[0]*math.sin(ra"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree >= 360:\n        raise ValueError(\"degree must be between 0 and 360\")\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef degree_to_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*(180/math.pi)\ndef distance(lat1,lon1,lat2,lon2):\n    '''\n    Write a function to calculate the distance (in kilometers) between two points on the earth.\n    '''\n    # import geodesic\n    # from geopy.distance import geodesic\n    import geopy\n    from geopy.distance import geodesic\n    return geodesic((lat1,lon1),(lat2,lon2)).km\ndef bearing(lat1,lon1,lat2,lon2):\n    '''\n    Write a function to calculate the bearing between two points on the earth.\n    '''\n    import math\n    dLat = radian_degree(lat2-lat1)\n    dLon = radian_degree(lon2-lon1)\n    y = math.sin(dLat)*math.cos(dLon)\n    x = math.cos(radian_degree(lat1))*math.sin(radian_degree(lat2)) - math.sin(radian_degree(lat1))*math.cos(radian_degree(lat2))*math.cos(dLon)\n    bearing = (math.atan2(y, x) + 2*math.pi)%(2*math.pi)\n    return degree_to_radian(bearing)\ndef calc_mean_position(data):\n    '''\n    Write a function to calculate the mean latitude and mean longitude of a set of positions.\n    '''\n    n = len(data)\n    lat = 0\n    lon = 0\n    for i in range(0,n):\n        lat = lat + data[i]['lat']\n        lon = lon + data[i]['lon']\n    lat = lat/n\n    lon = lon/n\n    return {'lat':lat,'lon':lon}\ndef calc_std_deviation(data):\n    '''\n    Write a function to calculate the standard deviation of the latitudes and longitudes of a set of positions.\n    '''\n    n = len(data)\n    mean = calc_mean_position(data)\n    s = 0\n    for i in range(0,n):\n        s = s + (data[i]['lat'] - mean['lat'])**2\n    s = math.sqrt(s/n)\n    return s\ndef calc_variance(data):\n    '''\n    Write a function to calculate the variance of the latitudes and longitudes of a set of positions.\n    '''\n    n = len(data)\n    mean = calc_mean_position(data)\n    s = 0\n    for i in range(0,n):\n        s = s + (data[i]['lat'] - mean['lat'])**2\n    return s/n\ndef calc_bins(data, num_of_bins):\n    '''\n    Write a function to calculate the number of locations in each of the desired bins of latitude and longitude.\n    '''\n    bins = []\n    for i in range(0,num_of_bins):\n        bins.append([])\n    for i in range(0,len(data)):\n        lat = data[i]['lat']\n        lon = data[i]['lon']\n        bins[int(lat/10)][int(lon/10)].append(i)\n    return bins\ndef calc_histogram(data, num_of_bins):\n    '''\n    Write a function to calculate the histogram of the latitudes and longitudes of a set of positions.\n    '''\n    bins = calc_bins(data, num_of_bins)\n    n = len(bins)\n    histogram = []\n    for i in range(0,n):\n        n2 = len(bins[i])\n        histogram.append([])\n        for j in range(0,n2):\n            histogram[i].append(0)\n    for i in range(0,len(data)):\n        lat = data[i]['lat']\n        lon = data[i]['lon']\n        b = int(lat/10)\n        h = int(lon/10)\n        histogram[b][h] = histogram[b][h] + 1\n    return histogram\ndef calc_percent_in_bins(histogram, num_of_bins):\n    '''\n    Write a function to calculate the percentage of data points in each of the desired bins of latitude and longitude.\n    '''\n    n = len(histogram)\n    percentage = []\n    for i in range(0,n):\n        n2 = len(histogram[i])\n        percentage.append([])\n        for j in range(0,n2):\n            percentage[i].append(0)\n    for i in range(0,n):\n        for j in range(0,n2):\n            n3 = len(histogram[i][j])\n            percentage[i][j] = (n3*100)/len(data)\n    return percentage\ndef calc_percent_of_data_in_bins(histogram, num_of_bins):\n    '''\n    Write a function to calculate the percentage of data points in each of the desired bins of latitude and longitude.\n    '''\n    n = len(histogram)\n    percentage = []\n    for i in range(0,n):\n        n2 = len(histogram[i])\n        percentage.append([])\n        for j in range(0,n2):\n            percentage[i].append(0)\n    for i in range(0,n):\n        for j in range(0,n2):\n            n3 = len(histogram[i][j])\n            percentage[i][j] = (n3*100)/len(data)\n    return percentage\ndef calc_moment(percentage, k):\n    '''\n    Write a function to calculate the kth moment of the data.\n    '''\n    if k>=0:\n        n = len(percentage)\n        s = 0\n        for i in range(0,n):\n            for j in range(0,n):\n                n3 = len(percentage[i][j])\n                if n3>0:\n                    s = s + (percentage[i][j][k] - 1)**2\n        return s\n    else:\n        n = len(percentage)\n        s = 0\n        for i in range(0,n):\n            for j in range(0,n):\n                n3 = len(percentage[i][j])\n                if n3>0:\n                    s = s + (percentage[i][j][-k] - 1)**2\n        return s\ndef calc_k_moment(percentage, k):\n    '''\n    Write a function to calculate the kth moment of the data.\n    '''\n    if k>=0:\n        n = len(percentage)\n        s = 0\n        for i in range(0,n):\n            for j in range(0,n):\n                n3 = len(percentage[i][j])\n                if n3>0:\n                    s = s + (percentage[i][j][k] - 1)**2\n        return s\n    else:\n        n = len(percentage)\n        s = 0\n        for i in range(0,n):\n            for j in range(0,n):\n                n3 = len(percentage[i][j])\n                if n3>0:\n                    s = s + (percentage[i][j][-k] - 1)**2\n        return s\ndef calc_diff_of_moments(k1,k2):\n    '''\n    Write a function to calculate the difference between the moments of the two data sets.\n    '''\n    return abs(k1-k2)\ndef calc_k_diff_of_moments(k1,k2):\n    '''\n    Write a function to calculate the difference between the moments of the two data sets.\n    '''\n    return abs(k1-k2)\ndef calc_percentage_of_data_in_bins(histogram, num_of_bins):\n    '''\n    Write a function to calculate the percentage of data points in each of the desired bins of latitude and longitude.\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if pattern is None:\n        return None\n    start = 0\n    end = 0\n    regex = re.compile(pattern, flags=re.MULTILINE)\n    for match in regex.finditer(text):\n        start = match.start()\n        end = match.end()\n    return text[start:end], start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    assert isinstance(text, str)\n    assert isinstance(pattern, str)\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if text is None or pattern is None:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = 0\n    end_index = 0\n    if pattern.startswith(\"^\"):\n        pattern = pattern[1:]\n        start_index = 1\n    for m in re.finditer(pattern, text):\n        start_index = m.start()\n        end_index = m.end()\n    return (start_index, end_index)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literal_start = text.find(pattern)\n    literal_end = literal_start + len(pattern)\n    return text[literal_start:literal_end], literal_start, literal_end\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #TODO\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.search(pattern, text)\n    if matches:\n        return matches.start(), matches.end()\n    return -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = text.find(pattern)\n    end_index = start_index + len(pattern)\n    return (start_index, end_index)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1 \n    else: \n        return n * bell_Number(n-1) \n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n=n-1\n    x=y=1\n    for i in range(n):\n        x,y=y,x+y\n    return(x)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    l=[]\n    for i in range(n):\n        l.append(i+1)\n    return l\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    global count\n    count = 0\n    return bellNumber(n, n)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    b = [0]*(n+1)\n    b[0] = 1\n    for i in range(1, n+1): \n        for j in range(i, 0, -1): \n            b[j] += b[j-1] \n    return b[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2) \n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [1]\n    for i in range(1, n):\n        bell_numbers.append(1)\n        for j in range(0, i):\n            bell_numbers[i] += bell_numbers[j]\n    return bell_numbers[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    temp = 1\n    for i in range(n):\n        temp = temp * (i+1)\n    return temp\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for item in list1:\n        if item!= L:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n    \ndef remove_element(list1, x):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:x] + list1[x+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(0, len(list1)):\n        if i!= L:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L[k])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 1:\n        return list1\n    else:\n        list1.remove(list1[L])\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L, len(list1)):\n        list1[i] = list1[i + 1]\n    del list1[-1]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list=[]\n    for x in list1:\n        if x not in new_list:\n            new_list.append(x)\n    new_list.pop(L)\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [list1[i] for i in xrange(len(list1)) if i!= L]\n    \n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[0:L] + list1[L+1:len(list1)]\n    \n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = 0\n    while n < len(test_list):\n        print(test_list[n])\n        n += 1\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    list_of_lists = []\n    for row in test_list:\n        list_of_lists.append(row)\n    column_list = []\n    for x in range(len(list_of_lists)):\n        column_list.append(list_of_lists[x][N])\n    return max(column_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([max(test_list[i]) for i in range(N)])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth_column = []\n    for i in range(len(test_list)):\n        max_of_nth_column.append(max(test_list[i][N-1]))\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # create a list of sub-lists of length N\n    # return the max of the sub-list.\n    # note: the len of test_list would be <N\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(test_list[i][N-1])\n    return max_list\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = []\n    for j in range(len(test_list[0])):\n        result.append(max([test_list[i][j] for i in range(len(test_list))]))\n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(matrix[N-1])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    print(max([x[N] for x in test_list]))\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = 0\n    for row in test_list:\n        if max_col < row[N-1]:\n            max_col = row[N-1]\n    return max_col\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Initialize the return value to the first element of the first row\n    max_of_nth = test_list[0][N-1]\n    \n    # Loop through the matrix starting from the second row, and for each iteration,\n    # compute the max of then'th column and compare it with the current max value.\n    for row in test_list[1:]:\n        if row[N-1] > max_of_nth:\n            max_of_nth = row[N-1]\n    \n    # Return the max of then'th column\n    return max_of_nth\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    i = 0\n    l = []\n    while i < len(lst):\n        x = lst[i]\n        x.append(lst[i+1])\n        l.append(x)\n        i += 2\n    return l\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[x[0],x[1]] for x in lst]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    \ndef split(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    l = list()\n    for each in lst:\n        l.append(each[0])\n        l.append(each[1])\n    return l\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    length = len(lst)\n    if length > 0:\n        if length > 1:\n            return [ [lst[0][0], lst[0][1]], [lst[1][0], lst[1][1]] ]\n        else:\n            return [ [lst[0][0], lst[0][1]]]\n    else:\n        return []\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return [[],[]]\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return [lst[0][0],lst[0][1]] + merge(lst[1:])\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new = [list(x) for x in zip(*lst)]\n    return new\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst.sort(key = lambda x : x[0])\n    return [lst[0][0], lst[0][1]]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst2=[]\n    for i in range(len(lst)):\n        lst2.append(lst[i][0])\n    return lst2\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += (i+1)\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_list = []\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum = cum_sum + test_list[i]\n        cummulative_list.append(cum_sum)\n    return cummulative_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_list = []\n    total = 0\n    for i in test_list:\n        total += i\n        cum_list.append(total)\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # your code here\n    sum = 0\n    for i in test_list:\n        sum += i\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summation = 0\n    for i in test_list:\n        summation += i\n    return summation\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_list = []\n    for i in range(0, len(test_list)):\n        cumulative_sum = 0\n        for j in range(0, len(test_list[i])):\n            cumulative_sum += test_list[i][j]\n        cumulative_sum_list.append(cumulative_sum)\n    return cumulative_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_list = []\n    cumulative_sum = 0\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum_list = []\n    for i in range(len(test_list)):\n        cum_sum_list.append(sum(test_list[:i+1]))\n    return cum_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    temp_list = []\n    for i in test_list:\n        temp_list.append(sum(i))\n    return temp_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum = cum_sum + i\n    return cum_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for t in nums:\n        sum += sum(t)\n    return [sum/len(nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x) / float(len(x)) for x in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x)/len(x), zip(*nums)))\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum_of_nums = []\n    for i in range(0,len(nums)):\n        sum_of_nums.append(sum(nums[i]))\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(n) / len(n) for n in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    out = []\n    for a, b in nums:\n        out.append( (a + b) / 2 )\n    return out\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if isinstance(nums, list) == False:\n        raise TypeError\n    average_list = []\n    for sublist in nums:\n        average_list.append(sum(sublist)/len(sublist))\n    return average_list\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i) / len(i) for i in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(x + y) / 2 for x, y in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    res = []\n    for tup in nums:\n        res.append(sum(tup) / len(tup))\n    return res\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if not len(test_tup1) == len(test_tup2):\n        return 'One tuple must have the same length as the other'\n    else:\n        new_tup = ()\n        for tup_index in range(len(test_tup1)):\n            new_tup = new_tup + (test_tup1[tup_index] % test_tup2[tup_index],)\n    return new_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return [(a % b, b % c) for (a,b) in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1, test_tup2 = [list(x) for x in test_tup1], [list(x) for x in test_tup2]\n    return [list(x) for x in [map(lambda x, y: x % y, tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2)]]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert(len(test_tup1) == len(test_tup2))\n    return [test_tup1[i] % test_tup2[i] for i in range(len(test_tup1))]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = ()\n    for i, elem1, elem2 in zip(range(len(test_tup1)), test_tup1, test_tup2):\n        modulo_tup = modulo_tup + (elem1 % elem2, )\n    return modulo_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples are not the same length')\n    return [element1 % element2 for element1, element2 in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    result_tuple = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result_tuple\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([t1 % t2 for t1, t2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(a%b for a,b in zip(test_tup1,test_tup2))\n    else:\n        raise ValueError('Tuples must be the same length')\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    min_jumps = [float('inf')] * (len(steps))\n    \n    if steps[0] <= 0 or steps[0] > d: \n        return float('inf')\n    \n    min_jumps[0] = 1\n    \n    for i in range(1, len(steps)): \n        if steps[i] <= 0: \n            return float('inf')\n        if steps[i] > d: \n            return min_jumps[i-1]\n        \n        \n        temp = [float('inf')] * (len(steps))\n        \n        for j in range(1, steps[i]+1): \n            temp[j] = min_jumps[i-j]\n        \n        min_jumps[i] = min(temp) + 1\n    \n    return min_jumps[len(steps)-1]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if len(steps) == 0:\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 1\n    elif steps == 1: \n        return 0\n    else: \n        # here we can reach the point d,0 only if there are two possible locations from which to reach it. \n        # Hence, we can use a lookup table to store the number of possible locations from which we can reach d,0. \n        # To avoid recomputing, we can use a two-dimensional array dp[steps][d]. \n        # The two columns of dp are i and j. \n        # We can traverse the dp table in 2 directions from (i, j) as we can traverse dp from (i-1, j) or (i, j-1). \n        # We store the number of possible steps at dp[i][j] if we can reach i,j from origin and store the minimum number of steps to reach it. \n        dp = [[0 for i in range(steps)] for j in range(steps)]\n        for i in range(1, steps+1): \n            for j in range(1, steps+1): \n                if i == j: \n                    dp[i][j] = 1\n                elif i > j: \n                    dp[i][j] = 0\n                else: \n                    dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        return dp[steps][d]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    c = [None] * len(steps)\n    c[0] = 0\n    c[1] = abs(steps[1] - steps[0])\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    #print(steps)\n    jumps = [-1 for i in range(n)]\n    #print(jumps)\n    \n    if steps[0] > d:\n        return -1\n    elif steps[0] == d:\n        return 0\n    else:\n        jumps[0] = 1\n        for i in range(1, n):\n            if steps[i] > d:\n                return -1\n            else:\n                for j in range(0, i):\n                    if steps[j] + j > d:\n                        continue\n                    else:\n                        if jumps[i] == -1:\n                            jumps[i] = jumps[j] + 1\n                        elif jumps[j] + 1 > jumps[i]:\n                            jumps[i] = jumps[j] + 1\n                        else:\n                            continue\n        return jumps[n-1]\n    \ndef min_Jumps2(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    #print(steps)\n    jumps = [-1 for i in range(n)]\n    #print(jumps)\n    \n    if steps[0] > d:\n        return -1\n    elif steps[0] == d:\n        return 0\n    else:\n        jumps[0] = 1\n        for i in range(1, n):\n            if steps[i] > d:\n                return -1\n            else:\n                if steps[i] > (d - i):\n                    jumps[i] = -1\n                else:\n                    if jumps[i] == -1:\n                        jumps[i] = jumps[i - 1] + 1\n                    elif jumps[i - 1] + 1 > jumps[i]:\n                        jumps[i] = jumps[i - 1] + 1\n                    else:\n                        continue\n        return jumps[n-1]\n    \ndef coins(l, s):\n    '''\n    Find the minimum number of coins required to make a sum from list l\n    '''\n    #print(l, s)\n    n = len(l)\n    #print(n, s)\n    T = [[0 for i in range(s + 1)] for j in range(n + 1)]\n    #print(T)\n    for i in range(n + 1):\n        for j in range(s + 1):\n            if i == 0:\n                T[i][j] = j # this is to make the space for the first row, since we cannot make any other coins\n            elif j == 0:\n                T[i][j] = 0\n            elif l[i-1] <= j:\n                T[i][j] = min(T[i-1][j], 1 + T[i][j - l[i-1]])\n            else:\n                T[i][j] = T[i-1][j]\n    return T[n][s]\n    \ndef permute(l, s):\n    '''\n    Write a function that prints the permutations of a given list.\n    '''\n    n = len(l)\n    #print(l, s)\n    T = [[0 for i in range(s + 1)] for j in range(n + 1)]\n    #print(T)\n    for i in range(n + 1):\n        for j in range(s + 1):\n            if i == 0:\n                T[i][j] = j\n            elif j == 0:\n                T[i][j] = 0\n            elif l[i-1] <= j:\n                T[i][j] = T[i-1][j - l[i-1]] + 1\n            else:\n                T[i][j] = T[i-1][j]\n    #print(T)\n    perm = []\n    i, j = n, s\n    while i > 0:\n        while j > 0:\n            if T[i][j] == T[i-1][j]:\n                j -= 1\n            else:\n                perm.append(l[i-1])\n                j -= T[i][j] - T[i-1][j]\n                i -= 1\n                break\n        i -= 1\n    perm.reverse()\n    #print(perm)\n    return perm\n    \ndef permute2(l, s):\n    '''\n    Write a function that prints the permutations of a given list.\n    '''\n    n = len(l)\n    #print(l, s)\n    T = [[0 for i in range(s + 1)] for j in range(n + 1)]\n    #print(T)\n    for i in range(n + 1):\n        for j in range(s + 1):\n            if i == 0:\n                T[i][j] = j\n            elif j == 0:\n                T[i][j] = 0\n            elif l[i-1] <= j:\n                T[i][j] = T[i-1][j - l[i-1]] + 1\n            else:\n                T[i][j] = T[i-1][j]\n    #print(T)\n    perm = []\n    i, j = n, s\n    while i > 0:\n        while j > 0:\n            if T[i][j] == T[i-1][j]:\n                j -= 1\n            else:\n                perm.append(l[i-1])\n                j -= T[i][j] - T[i-1][j]\n                i -= 1\n                break\n        i -= 1\n    perm.reverse()\n    #print(perm)\n    return perm\n    \ndef ways(n, s):\n    '''\n    A number is considered to be greater than a given sum if the sum of the digits is greater than the number itself.\n    For example, the numbers 112 and 123 are greater than 113, but 112 is not greater than 11.\n    \n    Write a function that takes two parameters and returns the number of ways to make a sum of s.\n    '''\n    #print(n, s)\n    T = [[0 for i in range(s + 1)] for j in range(n + 1)]\n    #print(T)\n    for i in range(n + 1):\n        for j in range(s + 1):\n            if i == 0:\n                T[i][j] = 0\n            elif j == 0:\n                T[i][j] = 1\n            elif n[i-1] <= j:\n                T[i][j] = T[i-1][j] + T[i][j - n[i-1]]\n            else:\n                T[i][j] = T[i-1][j]\n    #print(T)\n    return T[n][s]\n    \ndef ways2(n, s):\n    '''\n    A number is considered to be greater than a given sum if the sum of the digits is greater than the number itself.\n    For example, the numbers 112 and 123 are greater than 113, but 112 is not greater than 11.\n    \n    Write a function that takes two parameters and returns the number of ways to make a sum of s.\n    '''\n    #print(n, s)\n    T = [[0 for i in range(s + 1)] for j in range(n + 1)]\n    #print(T)\n    for i in range(n + 1):\n        for j in range(s + 1):\n            if i == 0:\n                T[i][j] = 1\n            elif j == 0:\n                T[i][j] = 1\n            elif n[i-1] <= j:\n                T[i][j] = T[i-1][j] + T[i][j - n[i-1]]\n            else:\n                T[i][j] = T[i-1][j]\n    #print(T)\n    return T[n][s]\n    \ndef pairs(n):\n    '''\n    Given an integer n, find the number of pairs that satisfy the following criteria:\n    \n    The number of an element from the array is a perfect square.\n    The sum of the two numbers is equal to n.\n    The product of the two numbers is a perfect cube.\n    The two numbers are both odd.\n    Retur"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    max_jump = 1\n    jump_size = 1\n    jump_count = 1\n    for i in xrange(1, steps):\n        jump_count += 1\n        jump_size = jump_count + 1\n        if jump_size <= d:\n            continue\n        elif jump_size > d:\n            jump_count = 1\n            jump_size = jump_count + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # We can get all the steps to reach point (d, 0) by d + n for n = 0, 1,..., d\n    # The number of jumps needed is the number of such steps + 1. The last jump will be from (d, 0) to (d + 1, 0)\n    count = 0\n    for i in range(1, d+1):\n        # Count the number of jumps required to reach point (d, i) from point (0, 0)\n        # For every jump, we can go from (d - i, 0) to (d, 0) in a single jump\n        count += (i + d - 1)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if len(steps) == 0:\n        return 0\n    min_jump = float(\"inf\")\n    for i in xrange(len(steps)):\n        if steps[i] == 0:\n            continue\n        if i + steps[i] >= len(steps) - 1:\n            min_jump = min(min_jump, 1)\n        else:\n            min_jump = min(min_jump, 1 + min_Jumps(steps, i + steps[i]))\n    return min_jump\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d < 0:\n        return -1\n    if steps == 0:\n        return -1\n    if d >= steps:\n        return 1\n    if d < steps:\n        return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 2:\n        return 0\n    \n    if d == 0:\n        return 1\n    \n    if d == steps - 1:\n        return 1\n    \n    for i in range(2,steps+1):\n        if d - i >= 0:\n            minJumps = min_Jumps(steps, d - i)\n            if minJumps!= -1:\n                return 1 + minJumps\n    \n    return -1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1_len = len(nums1)\n    nums2_len = len(nums2)\n    if nums1_len!= nums2_len:\n        return\n    elif nums1_len == 0:\n        return\n    elif nums1_len == 1:\n        return [nums1[0]/nums2[0]]\n    else:\n        return [nums1[0]/nums2[0], div_list(nums1[1:], nums2[1:])]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i,j in zip(nums1,nums2):\n        div_list.append(i/j)\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    if len(nums1)!= len(nums2):\n        return \"Sorry, the lists are not of same length\"\n    else:\n        for i in range(len(nums1)):\n            res.append(nums1[i]/nums2[i])\n        return res\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    len1,len2 = len(nums1),len(nums2)\n    if len1 > len2:\n        return nums1\n    if len1 < len2:\n        return nums2\n    length = len1\n    ans = []\n    for i in range(length):\n        ans.append(nums1[i] / nums2[i])\n    return ans\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i,j in zip(nums1,nums2):\n        result.append(i/j)\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    #edge case\n    if len(nums1)==0 or len(nums2)==0:\n        return []\n    \n    #we know nums1 is longer than nums2\n    \n    new_list=[]\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]/nums2[i])\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i, num1 in enumerate(nums1):\n        nums1[i] = num1 / num2\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    d = []\n    for i in range(len(nums1)):\n        d.append(nums1[i] / nums2[i])\n    return d\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # return [nums1[i]/nums2[i] for i in range(len(nums1))]\n    \n    # This is a simple pythonic way of doing the same\n    return list(map(operator.div,nums1,nums2))\n    \n    # This is a pythonic way of doing the same\n    # return [x/y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    try:\n        from string import digits\n        test_str = ''.join(x for x in test_str if x in digits)\n    except:\n        pass\n    return test_str+''.join(x for x in test_str if x not in digits)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n    # pattern = '\\d+'\n    # res = re.findall(pattern, test_str)\n    # # return str(res)\n    # return ''.join(res)\n    return re.sub(r'\\d+', '', test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Edge Case\n    if not test_str:\n        return \"\"\n    # Else\n    else:\n        # Declare our answer to return\n        answer = \"\"\n        # Declare our stack to store the numbers\n        stack = []\n        # Declare our current index\n        current_index = 0\n        # While we have not reached the end of our string\n        while current_index < len(test_str):\n            # If we see a number, push it to the stack\n            if test_str[current_index].isdigit():\n                stack.append(int(test_str[current_index]))\n            # Else we are done with the current string\n            else:\n                # Decrement our current index, because we have reached the next number\n                current_index -= 1\n                # While we have not reached the end of our stack\n                while len(stack) > 0:\n                    # Remove the top of our stack and append it to the answer\n                    answer += str(stack.pop())\n                # Append the next character of the string to our answer\n                answer += test_str[current_index]\n                # Increase our current index by 1 to move to the next character\n                current_index += 1\n                # While we have not reached the end of our stack\n                while len(stack) > 0:\n                    # Remove the top of our stack and append it to the answer\n                    answer += str(stack.pop())\n        # Return our answer\n        return answer\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    res = ''\n    for c in test_str:\n        if c.isdigit():\n            res += c\n    return res + test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    arr = []\n    for x in test_str:\n        if x.isdigit():\n            arr.append(x)\n    new = test_str.rstrip(arr)\n    for i in arr:\n        new += i\n    return new\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    string = list(test_str)\n    temp_str = []\n    for i in range(len(string)):\n        if string[i].isdigit():\n            temp_str.append(string[i])\n    for i in range(len(string)-1, -1, -1):\n        if string[i].isdigit():\n            temp_str.append(string[i])\n    return ''.join(temp_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_count = 0\n    for c in test_str:\n        if c.isdigit():\n            num_count += 1\n    new_str = ''.join(sorted(test_str, reverse=True))\n    new_str = new_str[:num_count] + new_str[num_count:]\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_list = []\n    for ch in test_str:\n        if ch.isnumeric():\n            str_list.append(ch)\n    str_list += [ch for ch in test_str if not ch.isnumeric()]\n    return ''.join(str_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join([i for i in test_str if i.isdigit()])\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = list()\n    for item in test_str:\n        if item.isdigit():\n            num_list.append(item)\n    result = ''.join(num_list) + ''.join(sorted(test_str.replace('0','x')))\n    return result\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # O(n**2)\n    a = sorted(a)\n    \n    # ans = 0\n    # max_len = 0\n    # for i in xrange(len(a)):\n    #     for j in xrange(i, len(a)):\n    #         if a[i] % a[j] == 0:\n    #             if max_len < j - i + 1:\n    #                 max_len = j - i + 1\n    #                 ans = i, j\n    # return ans\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    \n    #edge cases\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return a[0]\n    \n    \n    #helper function to make binary search work\n    def helper(a, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            if a[0]%target == 0:\n                return target\n            else:\n                return 0\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to find the highest common factor\n    def highest_common_factor(a, b):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%b[mid] == 0:\n                return highest_common_factor(a[:mid], b[:mid])\n            elif a[mid]%b[mid] > 0:\n                return highest_common_factor(a[:mid], b[mid+1:])\n            else:\n                return highest_common_factor(a[mid+1:], b[:mid])\n    \n    \n    #helper function to calculate the size of the largest subset\n    def helper2(a, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to make the subproblem divide into two parts\n    def helper3(a, b, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to find the sum of the largest subset\n    def helper4(a, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to find the size of the largest subset\n    def helper5(a, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to find the size of the largest subset\n    def helper6(a, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to find the size of the largest subset\n    def helper7(a, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to find the size of the largest subset\n    def helper8(a, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to find the size of the largest subset\n    def helper9(a, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to find the size of the largest subset\n    def helper10(a, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to find the size of the largest subset\n    def helper11(a, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to find the size of the largest subset\n    def helper12(a, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to find the size of the largest subset\n    def helper13(a, target):\n        if len(a)==0:\n            return 0\n        elif len(a)==1:\n            return a[0]\n        else:\n            mid = len(a)//2\n            \n            if a[mid]%target == 0:\n                return target\n            elif a[mid]%target > 0:\n                return helper(a[:mid], target)\n            else:\n                return helper(a[mid+1:], target)\n    \n    \n    #helper function to find the size of the largest subset\n    def helpe"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = []\n    for i in range(len(a)):\n        for j in range(i,len(a)):\n            if a[j] % a[i] == 0:\n                s.append(a[j])\n    return max(s)+1 if s else 0\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if a == []:\n        return 0\n    elif len(a) == 1:\n        return 1\n    else:\n        if a[0] % 2 == 0:\n            return 1 + largest_subset(a[1:])\n        else:\n            return max(1 + largest_subset(a[1:]), largest_subset(a[0:len(a) - 1]))\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 1:\n        return a\n    max_len = len(a)\n    dp = [1 for i in range(max_len)]\n    for i in range(1, max_len):\n        for j in range(0, i):\n            if a[j] % a[i] == 0:\n                dp[i] = max(dp[j] + 1, dp[i])\n    print(max(dp))\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    d = [1 for i in xrange(n)]\n    for i in xrange(1, n):\n        for j in xrange(0, i):\n            if a[i]%a[j] == 0:\n                d[i] = max(d[i], d[j] + 1)\n    return max(d)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def helper(numbers, start, size):\n        if start >= len(numbers):\n            return 0\n        elif size == 1:\n            return numbers[start]\n        else:\n            return max(helper(numbers, start + 1, size - 1) + numbers[start], helper(numbers, start + 1, size))\n    return helper(a, 0, len(a) / 2)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    best = 1\n    for x in a:\n        best = best * x // math.gcd(best, x)\n    return best\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pairs = []\n    for i in a:\n        for j in a:\n            if i % j == 0:\n                pairs.append([i,j])\n    pairs.sort(key = lambda x: x[1], reverse = True)\n    print pairs\n    if len(pairs) < 2:\n        return len(a)\n    if len(a) % 2!= 0:\n        return pairs[0][1]\n    else:\n        return pairs[0][1] * pairs[1][1]\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    a.sort(reverse=True)\n    l = [0]*n\n    l[0] = a[0]\n    for i in range(1,n):\n        if a[i]%a[i-1] == 0:\n            l[i] = l[i-1]+a[i]\n        else:\n            l[i] = a[i]\n    return max(l)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr3 = []\n    #getting median\n    if n%2 == 0:\n        a = int(n/2)\n        arr3.append(arr1[a] + arr2[a])\n        arr3.append(arr1[a - 1] + arr2[a])\n        arr3.append(arr1[a] + arr2[a - 1])\n        arr3.append(arr1[a - 1] + arr2[a - 1])\n        return (arr3[0] + arr3[4])/2\n    else:\n        a = int((n-1)/2)\n        arr3.append(arr1[a] + arr2[a])\n        arr3.append(arr1[a - 1] + arr2[a])\n        arr3.append(arr1[a] + arr2[a - 1])\n        arr3.append(arr1[a - 1] + arr2[a - 1])\n        return arr3[int((n-1)/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr3 = [None] * n\n    i, j, k = 0, 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            arr3[k] = arr1[i]\n            i += 1\n        else:\n            arr3[k] = arr2[j]\n            j += 1\n        k += 1\n    while i < n:\n        arr3[k] = arr1[i]\n        i += 1\n        k += 1\n    while j < n:\n        arr3[k] = arr2[j]\n        j += 1\n        k += 1\n    return arr3[(n - 1) / 2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2 - 1] + arr1[n//2])/2\n    else:\n        return arr1[n/2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2==0:\n        return (arr1[n/2] + arr2[n/2])/2\n    else:\n        return arr1[n/2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2==0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2])/2.0\n    else:\n        return arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median1 = int((n+1)/2)\n    median2 = int((n+1)/2)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    arr1 = arr1[:n]\n    arr2 = arr2[:n]\n    \n    if n%2 == 0:\n        return (arr1[int(n/2)] + arr2[int(n/2)]) / 2\n    else:\n        return arr1[int((n-1)/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # if n is even\n    if n % 2 == 0:\n        return (arr1[int(n/2) - 1] + arr2[int(n/2)])/2\n    # if n is odd\n    return arr1[int((n-1)/2)]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for x in range(len(nums)):\n        nums[x] = nums[x] ** n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return [x**n for x in nums]\n    return [x**n for x in nums] + nth_nums(nums,n-1)\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**n)\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [x ** n for x in nums]\n    else:\n        return [x ** n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for i in nums:\n        res.append(i**n)\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for item in nums:\n        result.append(item ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**n)\n    return res\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for i in string:\n        if i in ['a', 'e', 'i', 'o', 'u']:\n            print(\"The string {} is not upper.\".format(string))\n            return\n    print(\"The string {} is upper.\".format(string))\n    return\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #print(string)\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList) \n    temp = newList[0] \n    newList[0] = newList[length-1] \n    newList[length-1] = temp \n    return newList \n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if (type(newList)!=list):\n        return None\n    elif (len(newList)==0):\n        return None\n    elif (len(newList)==1):\n        return newList\n    elif (len(newList)>1):\n        return newList[-1:]+newList[1:-1]\n    return None\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 1:\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # Initializing the variables\n    first = newList[0]\n    last = newList[-1]\n    \n    # Changing the first and last element in the list\n    newList[0] = last\n    newList[-1] = first\n    \n    # Printing the result\n    print newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList) \n    # If the size of the list is greater than 1, then do this. \n    if size > 1: \n        temp = newList[0] \n        newList[0] = newList[size - 1] \n        newList[size - 1] = temp \n    return newList\n    \n    \ndef shuffle_List(newList): \n    '''\n    Write a python function to shuffle a given list. \n    '''\n    newList = swap_List(newList) \n    size = len(newList) \n    if size > 1: \n        # if the size is greater than 1, then do this. \n        for i in range(size - 1, 0, -1): \n            j = random.randint(0, i) \n            newList[i], newList[j] = newList[j], newList[i] \n    return newList\n    \n    \ndef shuffle_List_2(newList): \n    '''\n    Write a python function to shuffle a given list. \n    '''\n    newList = swap_List(newList) \n    size = len(newList) \n    if size > 1: \n        # if the size is greater than 1, then do this. \n        for i in range(size - 1, 0, -1): \n            j = random.randint(0, i) \n            newList[i], newList[j] = newList[j], newList[i] \n    return newList\n    \n    \ndef shuffle_List_3(newList): \n    '''\n    Write a python function to shuffle a given list. \n    '''\n    newList = swap_List(newList) \n    size = len(newList) \n    if size > 1: \n        # if the size is greater than 1, then do this. \n        for i in range(size - 1, 0, -1): \n            j = random.randint(0, i) \n            newList[i], newList[j] = newList[j], newList[i] \n    return newList\n    \n    \ndef check_List(newList): \n    '''\n    Write a python function to check whether a given list is sorted or not. \n    '''\n    size = len(newList) \n    # If the size of the list is greater than 1, then do this. \n    if size > 1: \n        # if the size is greater than 1, then do this. \n        for i in range(size - 1): \n            if newList[i] > newList[i + 1]: \n                return False \n    return True\n    \n    \ndef reverse_List(newList): \n    '''\n    Write a python function to reverse a given list. \n    '''\n    newList = swap_List(newList) \n    size = len(newList) \n    # If the size of the list is greater than 1, then do this. \n    if size > 1: \n        # if the size is greater than 1, then do this. \n        for i in range(size // 2): \n            newList[i], newList[size - i - 1] = newList[size - i - 1], newList[i] \n    return newList\n    \n    \ndef reverse_List_2(newList): \n    '''\n    Write a python function to reverse a given list. \n    '''\n    newList = swap_List(newList) \n    size = len(newList) \n    # If the size of the list is greater than 1, then do this. \n    if size > 1: \n        # if the size is greater than 1, then do this. \n        for i in range(size // 2): \n            newList[i], newList[size - i - 1] = newList[size - i - 1], newList[i] \n    return newList\n    \n    \ndef reverse_List_3(newList): \n    '''\n    Write a python function to reverse a given list. \n    '''\n    newList = swap_List(newList) \n    size = len(newList) \n    # If the size of the list is greater than 1, then do this. \n    if size > 1: \n        # if the size is greater than 1, then do this. \n        for i in range(size // 2): \n            newList[i], newList[size - i - 1] = newList[size - i - 1], newList[i] \n    return newList\n    \n    \ndef reverse_List_4(newList): \n    '''\n    Write a python function to reverse a given list. \n    '''\n    newList = swap_List(newList) \n    size = len(newList) \n    # If the size of the list is greater than 1, then do this. \n    if size > 1: \n        # if the size is greater than 1, then do this. \n        for i in range(size // 2): \n            newList[i], newList[size - i - 1] = newList[size - i - 1], newList[i] \n    return newList\n    \n    \ndef sort_List(newList): \n    '''\n    Write a python function to sort a given list. \n    '''\n    newList = swap_List(newList) \n    size = len(newList) \n    # If the size of the list is greater than 1, then do this. \n    if size > 1: \n        # if the size is greater than 1, then do this. \n        for i in range(size): \n            # if the size is greater than 1, then do this. \n            for j in range(i + 1, size): \n                # if the size is greater than 1, then do this. \n                if newList[i] > newList[j]: \n                    # if the size is greater than 1, then do this. \n                    temp = newList[i] \n                    newList[i] = newList[j] \n                    newList[j] = temp \n    return newList\n    \n    \ndef merge_List(newList1, newList2): \n    '''\n    Write a python function to merge two given lists. \n    '''\n    newList = [] \n    size1 = len(newList1) \n    size2 = len(newList2) \n    # If the size of the list is greater than 1, then do this. \n    if size1 > 1: \n        # if the size is greater than 1, then do this. \n        for i in range(size1): \n            # if the size is greater than 1, then do this. \n            for j in range(size2): \n                # if the size is greater than 1, then do this. \n                if newList1[i] < newList2[j]: \n                    newList.append(newList1[i]) \n                    break \n                else: \n                    newList.append(newList2[j]) \n    else: \n        newList = newList1 \n    return newList\n    \n    \ndef merge_List_2(newList1, newList2): \n    '''\n    Write a python function to merge two given lists. \n    '''\n    newList = [] \n    size1 = len(newList1) \n    size2 = len(newList2) \n    # If the size of the list is greater than 1, then do this. \n    if size1 > 1: \n        # if the size is greater than 1, then do this. \n        for i in range(size1): \n            # if the size is greater than 1, then do this. \n            for j in range(size2): \n                # if the size is greater than 1, then do this. \n                if newList1[i] < newList2[j]: \n                    newList.append(newList1[i]) \n                    break \n                else: \n                    newList.append(newList2[j]) \n    else: \n        newList = newList1 \n    return newList\n    \n    \ndef merge_List_3(newList1, newList2): \n    '''\n    Write a python function to merge two given lists. \n    '''\n    newList = [] \n    size"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l = len(newList) \n    a = newList[0] \n    b = newList[l-1] \n    newList[0] = b \n    newList[l-1] = a \n    return newList \n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    x = newList[0]\n    y = newList[length - 1]\n    newList[0] = y\n    newList[length - 1] = x\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # 1) \n    # 2) \n    # 3) \n    # 4) \n    # 5) \n    # 6) \n    # 7) \n    # 8) \n    # 9) \n    # 10) \n    # 11) \n    # 12) \n    # 13) \n    # 14) \n    # 15) \n    # 16) \n    # 17) \n    # 18) \n    # 19) \n    # 20) \n    # 21) \n    # 22) \n    # 23) \n    # 24) \n    # 25) \n    # 26) \n    # 27) \n    # 28) \n    # 29) \n    # 30) \n    # 31) \n    # 32) \n    # 33) \n    # 34) \n    # 35) \n    # 36) \n    # 37) \n    # 38) \n    # 39) \n    # 40) \n    # 41) \n    # 42) \n    # 43) \n    # 44) \n    # 45) \n    # 46) \n    # 47) \n    # 48) \n    # 49) \n    # 50) \n    # 51) \n    # 52) \n    # 53) \n    # 54) \n    # 55) \n    # 56) \n    # 57) \n    # 58) \n    # 59) \n    # 60) \n    # 61) \n    # 62) \n    # 63) \n    # 64) \n    # 65) \n    # 66) \n    # 67) \n    # 68) \n    # 69) \n    # 70) \n    # 71) \n    # 72) \n    # 73) \n    # 74) \n    # 75) \n    # 76) \n    # 77) \n    # 78) \n    # 79) \n    # 80) \n    # 81) \n    # 82) \n    # 83) \n    # 84) \n    # 85) \n    # 86) \n    # 87) \n    # 88) \n    # 89) \n    # 90) \n    # 91) \n    # 92) \n    # 93) \n    # 94) \n    # 95) \n    # 96) \n    # 97) \n    # 98) \n    # 99) \n    # 100) \n    # 101) \n    # 102) \n    # 103) \n    # 104) \n    # 105) \n    # 106) \n    # 107) \n    # 108) \n    # 109) \n    # 110) \n    # 111) \n    # 112) \n    # 113) \n    # 114) \n    # 115) \n    # 116) \n    # 117) \n    # 118) \n    # 119) \n    # 120) \n    # 121) \n    # 122) \n    # 123) \n    # 124) \n    # 125) \n    # 126) \n    # 127) \n    # 128) \n    # 129) \n    # 130) \n    # 131) \n    # 132) \n    # 133) \n    # 134) \n    # 135) \n    # 136) \n    # 137) \n    # 138) \n    # 139) \n    # 140) \n    # 141) \n    # 142) \n    # 143) \n    # 144) \n    # 145) \n    # 146) \n    # 147) \n    # 148) \n    # 149) \n    # 150) \n    # 151) \n    # 152) \n    # 153) \n    # 154) \n    # 155) \n    # 156) \n    # 157) \n    # 158) \n    # 159) \n    # 160) \n    # 161) \n    # 162) \n    # 163) \n    # 164) \n    # 165) \n    # 166) \n    # 167) \n    # 168) \n    # 169) \n    # 170) \n    # 171) \n    # 172) \n    # 173) \n    # 174) \n    # 175) \n    # 176) \n    # 177) \n    # 178) \n    # 179) \n    # 180) \n    # 181) \n    # 182) \n    # 183) \n    # 184) \n    # 185) \n    # 186) \n    # 187) \n    # 188) \n    # 189) \n    # 190) \n    # 191) \n    # 192) \n    # 193) \n    # 194) \n    # 195) \n    # 196) \n    # 197) \n    # 198) \n    # 199) \n    # 200) \n    # 201) \n    # 202) \n    # 203) \n    # 204) \n    # 205) \n    # 206) \n    # 207) \n    # 208) \n    # 209) \n    # 210) \n    # 211) \n    # 212) \n    # 213) \n    # 214) \n    # 215) \n    # 216) \n    # 217) \n    # 218) \n    # 219) \n    # 220) \n    # 221) \n    # 222) \n    # 223) \n    # 224) \n    # 225) \n    # 226) \n    # 227) \n    # 228) \n    # 229) \n    # 230) \n    # 231) \n    # 232) \n    # 233) \n    # 234) \n    # 235) \n    # 236) \n    # 237) \n    # 238) \n    # 239) \n    # 240) \n    # 241) \n    # 242) \n    # 243) \n    # 244) \n    # 245) \n    # 246) \n    # 247) \n    # 248) \n    # 249) \n    # 250) \n    # 251) \n    # 252) \n    # 253) \n    # 254) \n    # 255) \n    # 256) \n    # 257) \n    # 258) \n    # 259) \n    # 260) \n    # 261) \n    # 262) \n    # 263) \n    # 264) \n    # 265) \n    # 266) \n    # 267) \n    # 268) \n    # 269) \n    # 270) \n    # 271) \n    # 272) \n    # 273) \n    # 274) \n    # 275) \n    # 276) \n    # 277) \n    # 278) \n    # 279) \n    # 280) \n    # 281) \n    # 282) \n    # 283) \n    # 284) \n    # 285) \n    # 286) \n    # 287) \n    # 288) \n    # 289) \n    # 290) \n    # 291) \n    # 292) \n    # 293) \n    # 294) \n    # 295) \n    # 296) \n    # 297) \n    # 298) \n    # 299) \n    # 300) \n    # 301) \n    # 302) \n    # 303) \n    # 304) \n    # 305) \n    # 306) \n    # 307) \n    # 308) \n    # 309) \n    # 310) \n    # 311) \n    # 312) \n    # 313) \n    # 314) \n    # 315) \n    # 316) \n    # 317) \n    # 318) \n    # 319) \n    # 320) \n    # 321) \n    # 322) \n    # 323) \n    # 324) \n    # 325) \n    # 326) \n    # 327) \n    # 328) \n    # 329) \n    # 330) \n    # 331) \n    # 332) \n    # 333) \n    # 334"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3.0/2.0) * (r**2)\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math \n    return 1 /2 * r * r\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    return math.pi*(r**2)\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3*r**2/4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    #assuming r = radius of the circle\n    return r*r*3.1415926535897932/2.0\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = np.pi*r**2*(3*r**2-1)/(4*r)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = (math.pi * r ** 2) / 4\n    return area\n    \ndef nth_root(x, n):\n    return x**(1/n)\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else :\n        return n * factorial(n-1)\n        \ndef print_dict(dict):\n    for key in dict.keys():\n        print(key, dict[key])\n        \ndef sum_of_list(list):\n    sum = 0\n    for i in list :\n        sum = sum + i\n    return sum\n    \ndef nested_dict():\n    '''\n    Write a python function to create a nested dictionary with lists as the values and keys as the keys.\n    '''\n    \n    dict = {'first' : [1,2,3],'second' : ['a','b','c']}\n    print(dict)\n    \ndef is_right_angle(a, b, c):\n    '''\n    Write a python function to check whether a triangle is right angled.\n    '''\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n        \ndef my_max(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else :\n        return b\n    \ndef can_be_divided(a, b):\n    '''\n    Write a python function to check whether a number can be divided by b without any remainder.\n    '''\n    if a % b == 0:\n        return True\n    else :\n        return False\n    \ndef num_digits(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count = 0\n    while n!= 0 :\n        count += 1\n        n /= 10\n    return count\n    \ndef num_letters(s):\n    '''\n    Write a python function to count the number of letters in a string.\n    '''\n    count = 0\n    for letter in s:\n        if letter.isalpha():\n            count += 1\n    return count\n    \ndef max_num_letters(s1, s2):\n    '''\n    Write a python function to find the max number of letters between two strings.\n    '''\n    if num_letters(s1) > num_letters(s2):\n        return s1\n    else :\n        return s2\n        \ndef is_leap_year(year):\n    '''\n    Write a python function to check whether a year is a leap year.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef gcd(a, b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else :\n            b = b % a\n    return a + b\n    \ndef get_all_primes(n):\n    '''\n    Write a python function to find all the prime numbers from 0 to n.\n    '''\n    primes = []\n    for x in range(2, n):\n        if is_prime(x):\n            primes.append(x)\n    return primes\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is a prime number.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7:\n        return True\n    elif n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0:\n        return False\n    else :\n        for x in range(2, n):\n            if n % x == 0:\n                return False\n    return True\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    l = list(s)\n    r = l[::-1]\n    if l == r :\n        return True\n    else :\n        return False\n        \ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check whether two strings are anagrams of each other or not.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if sorted(s1) == sorted(s2):\n        return True\n    else :\n        return False\n        \ndef is_abecedarian(s):\n    '''\n    Write a python function to check whether a string is a abecedarian word or not.\n    '''\n    l = list(s)\n    n = len(l)\n    for x in range(n):\n        if x < n - 1 :\n            if l[x] <= l[x+1]:\n                continue\n            else :\n                return False\n        else :\n            return True\n        \ndef is_pallindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome word or not.\n    '''\n    l = list(s)\n    r = l[::-1]\n    if l == r:\n        return True\n    else :\n        return False\n        \ndef is_anagram_dict(s1, s2):\n    '''\n    Write a python function to check whether two strings are anagrams of each other or not.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    dict1 = {}\n    dict2 = {}\n    for letter in s1 :\n        if letter in dict1 :\n            dict1[letter] += 1\n        else :\n            dict1[letter] = 1\n    for letter in s2 :\n        if letter in dict2 :\n            dict2[letter] += 1\n        else :\n            dict2[letter] = 1\n    if dict1 == dict2 :\n        return True\n    else :\n        return False\n        \ndef has_duplicates(s):\n    '''\n    Write a python function to check whether a string contains duplicates or not.\n    '''\n    l = list(s)\n    n = len(l)\n    for x in range(n):\n        if x < n - 1 :\n            if l[x] == l[x+1]:\n                return True\n        else :\n            return True\n    return False\n    \ndef is_rotation(s1, s2):\n    '''\n    Write a python function to check whether a string is a rotation of another string or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else :\n        for x in range(len(s1)):\n            if s1[x]!= s2[(len(s2)-x)-1]:\n                return False\n        return True\n        \ndef is_anagram_dict(s1, s2):\n    '''\n    Write a python function to check whether two strings are anagrams of each other or not.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    dict1 = {}\n    dict2 = {}\n    for letter in s1 :\n        if letter in dict1 :\n            dict1[letter] += 1\n        else :\n            dict1[letter] = 1\n    for letter in s2 :\n        if letter in dict2 :\n            dict2[letter] += 1\n        else :\n            dict2[letter] = 1\n    if dict1 == dict2 :\n        return True\n    else :\n        return False\n        \ndef is_rotation_dict(s1, s2):\n    '''\n    Write a python function to check whether a string is a rotation of another string or not.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    dict1 = {}\n    dict2 = {}\n    for letter in s1 :\n        if letter in dict"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    A = math.pi * r**2\n    \n    return A\n    "
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    area = (3*pi*r*r)/4\n    return area\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    if end-start<=1:\n        return start+1\n    mid=(start+end)//2\n    left=find_First_Missing(array,start,mid)\n    right=find_First_Missing(array,mid,end)\n    if left>right:\n        return right\n    for i in range(start,end):\n        if array[i]-array[left]==array[right]-array[i]:\n            return array[i]\n    return array[left]+1\ndef find_pivot(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    if end-start<=1:\n        return start\n    mid=(start+end)//2\n    left=find_pivot(array,start,mid)\n    right=find_pivot(array,mid,end)\n    if left>right:\n        return right\n    if array[left]<array[right]:\n        return left\n    for i in range(start,end):\n        if array[i]>array[left]:\n            return i\n    return i\ndef find_pivot(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    if end-start<=1:\n        return start\n    mid=(start+end)//2\n    left=find_pivot(array,start,mid)\n    right=find_pivot(array,mid,end)\n    if left>right:\n        return right\n    if array[left]<array[right]:\n        return left\n    for i in range(start,end):\n        if array[i]>array[left]:\n            return i\n    return i\ndef find_pivot(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    if end-start<=1:\n        return start\n    mid=(start+end)//2\n    left=find_pivot(array,start,mid)\n    right=find_pivot(array,mid,end)\n    if left>right:\n        return right\n    if array[left]<array[right]:\n        return left\n    for i in range(start,end):\n        if array[i]>array[left]:\n            return i\n    return i\ndef find_pivot(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    if end-start<=1:\n        return start\n    mid=(start+end)//2\n    left=find_pivot(array,start,mid)\n    right=find_pivot(array,mid,end)\n    if left>right:\n        return right\n    if array[left]<array[right]:\n        return left\n    for i in range(start,end):\n        if array[i]>array[left]:\n            return i\n    return i\ndef find_pivot(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    if end-start<=1:\n        return start\n    mid=(start+end)//2\n    left=find_pivot(array,start,mid)\n    right=find_pivot(array,mid,end)\n    if left>right:\n        return right\n    if array[left]<array[right]:\n        return left\n    for i in range(start,end):\n        if array[i]>array[left]:\n            return i\n    return i\ndef find_pivot(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    if end-start<=1:\n        return start\n    mid=(start+end)//2\n    left=find_pivot(array,start,mid)\n    right=find_pivot(array,mid,end)\n    if left>right:\n        return right\n    if array[left]<array[right]:\n        return left\n    for i in range(start,end):\n        if array[i]>array[left]:\n            return i\n    return i\ndef find_pivot(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    if end-start<=1:\n        return start\n    mid=(start+end)//2\n    left=find_pivot(array,start,mid)\n    right=find_pivot(array,mid,end)\n    if left>right:\n        return right\n    if array[left]<array[right]:\n        return left\n    for i in range(start,end):\n        if array[i]>array[left]:\n            return i\n    return i\ndef find_pivot(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    if end-start<=1:\n        return start\n    mid=(start+end)//2\n    left=find_pivot(array,start,mid)\n    right=find_pivot(array,mid,end)\n    if left>right:\n        return right\n    if array[left]<array[right]:\n        return left\n    for i in range(start,end):\n        if array[i]>array[left]:\n            return i\n    return i\ndef find_pivot(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    if end-start<=1:\n        return start\n    mid=(start+end)//2\n    left=find_pivot(array,start,mid)\n    right=find_pivot(array,mid,end)\n    if left>right:\n        return right\n    if array[left]<array[right]:\n        return left\n    for i in range(start,end):\n        if array[i]>array[left]:\n            return i\n    return i\ndef find_pivot(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    if end-start<=1:\n        return start\n    mid=(start+end)//2\n    left=find_pivot(array,start,mid)\n    right=find_pivot(array,mid,end)\n    if left>right:\n        return right\n    if array[left]<array[right]:\n        return left\n    for i in range(start,end):\n        if array[i]>array[left]:\n            return i\n    return i\ndef find_pivot(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    if end-start<=1:\n        return start\n    mid=(start+end)//2\n    left=find_pivot(array,start,mid)\n    right=find_pivot(array,mid,end)\n    if left>right:\n        return right\n    if array[left]<array[right]:\n        return left\n    for i in range(start,end):\n        if array[i]>array[left]:"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if start>=end:\n        return None\n    if start==end-1:\n        if array[start]==array[end]:\n            return array[end]+1\n        else:\n            return array[start]\n    mid=int((start+end)/2)\n    if array[mid]==mid:\n        if array[mid-1]!=mid:\n            return find_First_Missing(array,start,mid)\n        else:\n            return find_First_Missing(array,mid,end)\n    elif array[mid]<mid:\n        return find_First_Missing(array,mid,end)\n    else:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return None\n    mid = (start + end) // 2\n    if mid == array[mid]:\n        if mid == 0:\n            return 1\n        if mid == end:\n            return mid + 1\n        return find_First_Missing(array,mid+1,end)\n    if mid < array[mid]:\n        return find_First_Missing(array,mid+1,end)\n    return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return None\n    mid=(start+end)/2\n    if mid+1<len(array):\n        if array[mid]==array[mid+1]:\n            return find_First_Missing(array,mid+1,end)\n    if array[mid]==mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return array[mid]\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start > end:\n        return None\n    mid = (start+end)//2\n    if array[mid] == mid:\n        if array[start] == start:\n            return start + 1\n        else:\n            return find_First_Missing(array,start=start,end=mid-1)\n    else:\n        if mid + 1 < end and array[mid+1] - array[mid] == 1:\n            return find_First_Missing(array,start=mid+1,end=end)\n        else:\n            if array[mid] - array[start] == 1:\n                return find_First_Missing(array,start=mid+1,end=end)\n            else:\n                return array[mid] + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start > end:\n        return array[0]\n    else:\n        mid = start + (end-start)//2\n        if array[mid] == mid:\n            if array[mid-1] == mid-1:\n                return find_First_Missing(array,mid+1,end)\n            else:\n                return find_First_Missing(array,start,mid-1)\n        else:\n            return array[mid]\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start > end:\n        return None\n    mid = int((end + start)/2)\n    if array[mid] == mid:\n        return mid+1\n    if array[mid] > mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if array[start] < array[end]:\n        mid = start + (end - start)/2\n        if array[mid]!= mid:\n            if array[mid] < array[end] and array[mid+1] > array[end]:\n                return array[mid+1]\n            if array[mid] > array[end] and array[mid-1] < array[end]:\n                return array[mid]\n            return find_First_Missing(array, mid+1, end)\n        else:\n            return find_First_Missing(array, start, mid-1)\n    else:\n        return array[start]\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if start>end:\n        return 1\n    if array[start]==start:\n        return find_First_Missing(array,start+1,end)\n    return array[start] - start -1\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return \"%20\".join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    #replace spaces with '%20'\n    return string.replace(' ', '%20')\n    #pass\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for item in list:\n        if item % 2 == 0:\n            even_list.append(item)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [i for i in list if i % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for n in list:\n        if n % 2 == 0:\n            even.append(n)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for item in list:\n        if item%2 == 0:\n            even_list.append(item)\n    print even_list\n    \ndef Search():\n    '''\n    Write a python function to search a word in a sentence, if word is present in the sentence return true else false\n    '''\n    string = 'Python is a programming language that lets you work quickly and integrate systems more effectively'\n    word = 'Python'\n    if word in string:\n        print '%s is present in the sentence'% word\n    else:\n        print '%s is not present in the sentence'% word\n        \ndef Remove(list):\n    '''\n    Write a python function to remove duplicates from a list of numbers\n    '''\n    list = [1,1,2,2,3,3,4,5,6,7]\n    unique_list = []\n    for item in list:\n        if item not in unique_list:\n            unique_list.append(item)\n    print unique_list\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    new_list = []\n    for num in list:\n        if num%2 == 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x%2==0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for item in list:\n        if item % 2 == 0:\n            evens.append(item)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd = []\n    even = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    #List is the argument\n    return [x for x in list if x%2==0]\n    \n    \ndef test_Split():\n    l1 = [1, 2, 3, 4, 5, 6]\n    l2 = [4, 6, 8, 10, 3, 5, 7, 9]\n    if Split(l1) == [2, 4, 6]:\n        print(\"Test 1 for Split is OK\")\n    else:\n        print(\"Test 1 for Split is Fail\")\n    if Split(l2) == [4, 6, 8, 10]:\n        print(\"Test 2 for Split is OK\")\n    else:\n        print(\"Test 2 for Split is Fail\")\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i, j = ele\n    return [(i+x,j+y) for x,y in ((0,1),(1,0),(0,-1),(-1,0))]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append((ele[0], ele[1] + 1))\n    sub.append((ele[0], ele[1] - 1))\n    sub.append((ele[0] + 1, ele[1]))\n    sub.append((ele[0] - 1, ele[1]))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    x,y = ele\n    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    \ndef open_contours(contour):\n    '''\n    A contour is a set of coordinates that connect the endpoints of a closed line. The outer\n    edge of the shape is a line that does not connect any points. The open edge is the line\n    that connects the outer points of the shape. There are two types of open contours:\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    if ele[0] > 0:\n        adj.append((ele[0] - 1, ele[1]))\n    if ele[0] < len(ele[0]) - 1:\n        adj.append((ele[0] + 1, ele[1]))\n    if ele[1] > 0:\n        adj.append((ele[0], ele[1] - 1))\n    if ele[1] < len(ele[1]) - 1:\n        adj.append((ele[0], ele[1] + 1))\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x-1, y))\n    if x < len(grid) - 1:\n        sub.append((x+1, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < len(grid[0]) - 1:\n        sub.append((x, y+1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [i for i in [(ele[0]-1,ele[1]-1),(ele[0]-1,ele[1]),(ele[0]-1,ele[1]+1),(ele[0],ele[1]-1),(ele[0],ele[1]+1),(ele[0]+1,ele[1]-1),(ele[0]+1,ele[1]),(ele[0]+1,ele[1]+1)] if i[0] >= 0 and i[1] >= 0 and i[0] < m and i[1] < n and i not in sub]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == 0:\n        x = str(ele[0])\n    elif ele[0] == 1:\n        x = chr(ele[0] + ord('a'))\n    elif ele[0] == 2:\n        x = str(ele[0]) + 'b'\n    else:\n        x = str(ele[0]) + 'c'\n    if ele[1] == 0:\n        y = str(ele[1])\n    elif ele[1] == 1:\n        y = chr(ele[1] + ord('a'))\n    elif ele[1] == 2:\n        y = str(ele[1]) + 'b'\n    else:\n        y = str(ele[1]) + 'c'\n    \n    if ele[0] < 1:\n        if ele[1] < 1:\n            adj = (x + y)\n        elif ele[1] < 2:\n            adj = (x + chr(ord('a') + ele[1]))\n        else:\n            adj = (x + 'b' + y)\n    elif ele[0] < 2:\n        if ele[1] < 1:\n            adj = (chr(ord('a') + ele[0]) + y)\n        elif ele[1] < 2:\n            adj = (chr(ord('a') + ele[0]) + y + 'b')\n        else:\n            adj = (chr(ord('a') + ele[0]) + 'b' + y)\n    elif ele[0] < 3:\n        if ele[1] < 1:\n            adj = (x + chr(ord('a') + ele[0] - 1))\n        elif ele[1] < 2:\n            adj = (x + chr(ord('a') + ele[0] - 1) + y)\n        else:\n            adj = (x + chr(ord('a') + ele[0] - 1) + 'b' + y)\n    else:\n        if ele[1] < 1:\n            adj = (x + 'b' + chr(ord('a') + ele[0] - 2))\n        elif ele[1] < 2:\n            adj = (x + 'b' + chr(ord('a') + ele[0] - 2) + y)\n        else:\n            adj = (x + 'b' + chr(ord('a') + ele[0] - 2) + 'c')\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [[ele[0]-1, ele[1]], [ele[0]+1, ele[1]], [ele[0], ele[1]-1], [ele[0], ele[1]+1]]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    for i in [(x,y+1), (x,y-1), (x+1,y), (x-1,y)]:\n        if not (0 <= i[0] < 10 and 0 <= i[1] < 10):\n            continue\n        sub.append(i)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2:\n        return [[ele[0]-1,ele[1]], [ele[0]+1,ele[1]], [ele[0],ele[1]-1], [ele[0],ele[1]+1]]\n    else:\n        return [[ele[0]-1,ele[1]-1], [ele[0]+1,ele[1]-1], [ele[0]-1,ele[1]+1], [ele[0]+1,ele[1]+1], [ele[0]+1,ele[1]], [ele[0]-1,ele[1]], [ele[0],ele[1]-1], [ele[0],ele[1]+1]]\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    l = list(text)\n    for i in range(len(l)):\n        if l[i] =='':\n            l[i] = '_'\n        elif l[i] == '_':\n            l[i] =''\n    return ''.join(l)\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n    \ndef main():\n    '''\n    Main method\n    '''\n    print(replace_spaces('I like to code'))\n    print(replace_spaces('I like to code'))\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return ''.join([i if i!='' else '_' for i in text])\n    else:\n        return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in range(0, len(text)):\n        char = text[i]\n        if char =='':\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_counter = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_counter += 1\n    for i in range(zero_counter):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    for index in range(len(num_list)):\n        if num_list[index] == 0:\n            num_list[index], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[index]\n            num_list.pop(len(num_list) - 1)\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = num_list[len(num_list) - 1]\n            num_list[len(num_list) - 1] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    num_list_new = []\n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            num_list_new.append(num)\n    for i in range(zero_count):\n        num_list_new.append(0)\n    return num_list_new\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n    for zero in zeroes:\n        num_list.remove(zero)\n    num_list.extend(zeroes)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    for index in zero_index:\n        num_list.pop(index)\n    for i in range(len(zero_index)):\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(0,len(num_list)):\n        if num_list[i] == 0:\n            count = count + 1\n    for i in range(0,count):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    zero_list_length = 0\n    zero_list_length = len(num_list)\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n    for num in zero_list:\n        num_list.remove(num)\n    num_list.extend(zero_list)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    \n    # first we convert the input list to a list with non zero elements\n    non_zero_list = []\n    for elem in num_list:\n        if elem!= 0:\n            non_zero_list.append(elem)\n    \n    # now we move the zeroes to the end of the non zero list\n    for i in range(len(non_zero_list) - 1, -1, -1):\n        if non_zero_list[i] == 0:\n            non_zero_list.pop(i)\n            non_zero_list.append(0)\n    \n    \n    \n    return non_zero_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            count += 1\n    for i in range(count):\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n < 2 : \n        return 0\n    else : \n        return arr[0] ^ arr[1] + pair_xor_Sum(arr[2:],n-1)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr_xor = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            arr_xor = arr_xor ^ arr[i] ^ arr[j]\n    return arr_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum([a^b for a,b in zip(arr,arr[1:])])\ndef Largest(arr,n) : \n    '''\n    Write a python function to find the element in the list that is the largest number.\n    '''\n    return max(arr)\ndef Number(arr,n) : \n    '''\n    Write a python function to find the element in the list that is the second largest number.\n    '''\n    a = set(arr)\n    a.remove(max(a))\n    return max(a)\ndef Smallest(arr,n) : \n    '''\n    Write a python function to find the element in the list that is the smallest number.\n    '''\n    return min(arr)\ndef Reverse(arr,n) : \n    '''\n    Write a python function to reverse the given list.\n    '''\n    return arr[::-1]\ndef test_lru_cache(lru_cache,lru_cache_size,num_of_items,num_of_operations) : \n    '''\n    Write a python function to test the lru cache performance.\n    '''\n    operations = 0\n    for i in range(num_of_operations) : \n        if lru_cache.get(i) is None : \n            operations += 1\n            lru_cache.get(i)\n            lru_cache.put(i,i)\n        else : \n            operations += 1\n            lru_cache.get(i)\n    assert(lru_cache.get(num_of_items-1) == num_of_items-1)\n    assert(lru_cache.get(num_of_items-1) is None)\n    assert(lru_cache.get(num_of_items-1) is None)\n    assert(lru_cache.get(num_of_items-1) is None)\n    assert(lru_cache.get(num_of_items-1) is None)\n    print(operations)\ndef test_LRU_Cache_perfomance(lru_cache,lru_cache_size,num_of_items,num_of_operations) : \n    '''\n    Write a python function to test the lru cache performance.\n    '''\n    operations = 0\n    for i in range(num_of_operations) : \n        if lru_cache.get(i) is None : \n            operations += 1\n            lru_cache.get(i)\n            lru_cache.put(i,i)\n        else : \n            operations += 1\n            lru_cache.get(i)\n    assert(lru_cache.get(num_of_items-1) == num_of_items-1)\n    assert(lru_cache.get(num_of_items-1) is None)\n    assert(lru_cache.get(num_of_items-1) is None)\n    assert(lru_cache.get(num_of_items-1) is None)\n    assert(lru_cache.get(num_of_items-1) is None)\n    print(operations)\ndef test_sorted_insert(sorted_insert,arr,n) : \n    '''\n    Write a python function to test the sorted insert performance.\n    '''\n    operations = 0\n    for i in range(n) : \n        operations += 1\n        sorted_insert.get(arr[i])\n    assert(arr[i] == sorted_insert.get(arr[i]))\n    assert(arr[i] == sorted_insert.get(arr[i]))\n    assert(arr[i] == sorted_insert.get(arr[i]))\n    assert(arr[i] == sorted_insert.get(arr[i]))\n    print(operations)\ndef test_min_heap(min_heap,arr,n) : \n    '''\n    Write a python function to test the min heap performance.\n    '''\n    operations = 0\n    for i in range(n) : \n        operations += 1\n        min_heap.get(arr[i])\n    assert(arr[i] == min_heap.get(arr[i]))\n    assert(arr[i] == min_heap.get(arr[i]))\n    assert(arr[i] == min_heap.get(arr[i]))\n    assert(arr[i] == min_heap.get(arr[i]))\n    print(operations)\ndef test_sorted_insert(sorted_insert,arr,n) : \n    '''\n    Write a python function to test the sorted insert performance.\n    '''\n    operations = 0\n    for i in range(n) : \n        operations += 1\n        sorted_insert.get(arr[i])\n    assert(arr[i] == sorted_insert.get(arr[i]))\n    assert(arr[i] == sorted_insert.get(arr[i]))\n    assert(arr[i] == sorted_insert.get(arr[i]))\n    assert(arr[i] == sorted_insert.get(arr[i]))\n    print(operations)\ndef test_max_heap(max_heap,arr,n) : \n    '''\n    Write a python function to test the max heap performance.\n    '''\n    operations = 0\n    for i in range(n) : \n        operations += 1\n        max_heap.get(arr[i])\n    assert(arr[i] == max_heap.get(arr[i]))\n    assert(arr[i] == max_heap.get(arr[i]))\n    assert(arr[i] == max_heap.get(arr[i]))\n    assert(arr[i] == max_heap.get(arr[i]))\n    print(operations)\ndef test_insertion_sort(insertion_sort,arr,n) : \n    '''\n    Write a python function to test the insertion sort performance.\n    '''\n    operations = 0\n    for i in range(n) : \n        operations += 1\n        insertion_sort.get(arr[i])\n    assert(arr[i] == insertion_sort.get(arr[i]))\n    assert(arr[i] == insertion_sort.get(arr[i]))\n    assert(arr[i] == insertion_sort.get(arr[i]))\n    assert(arr[i] == insertion_sort.get(arr[i]))\n    print(operations)\ndef test_Merge_Sort(merge_sort,arr,n) : \n    '''\n    Write a python function to test the merge sort performance.\n    '''\n    operations = 0\n    for i in range(n) : \n        operations += 1\n        merge_sort.get(arr[i])\n    assert(arr[i] == merge_sort.get(arr[i]))\n    assert(arr[i] == merge_sort.get(arr[i]))\n    assert(arr[i] == merge_sort.get(arr[i]))\n    assert(arr[i] == merge_sort.get(arr[i]))\n    print(operations)\ndef test_selection_sort(selection_sort,arr,n) : \n    '''\n    Write a python function to test the selection sort performance.\n    '''\n    operations = 0\n    for i in range(n) : \n        operations += 1\n        selection_sort.get(arr[i])\n    assert(arr[i] == selection_sort.get(arr[i]))\n    assert(arr[i] == selection_sort.get(arr[i]))\n    assert(arr[i] == selection_sort.get(arr[i]))\n    assert(arr[i] == selection_sort.get(arr[i]))\n    print(operations)\ndef test_Heap_Sort(Heap_Sort,arr,n) : \n    '''\n    Write a python function to test the heap sort performance.\n    '''\n    operations = 0\n    for i in range(n) : \n        operations += 1\n        Heap_Sort.get(arr[i])\n    assert(arr[i] == H"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n<2 :\n        return 0\n    else:\n        total = 0\n        for i in range(n-1):\n            total += arr[i] ^ arr[i+1]\n        return total\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return reduce(lambda x, y: x ^ y, arr)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n < 1 : return 0 \n    if n == 1 : return arr[0] \n    return arr[0] ^ pair_xor_Sum(arr[1:],n-1) \n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res = res ^ arr[i] ^ arr[j]\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr_sum = 0 \n    for i in range(n) : \n        for j in range(i+1,n) : \n            arr_sum = arr_sum ^ arr[i] ^ arr[j]\n    return arr_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return arr[0]\n    else:\n        return arr[0]^pair_xor_Sum(arr[1:],n-1)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum(arr[i]^arr[j] for i in range(n) for j in range(n) if i<j)\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in xrange(len(iterable))]\n    \ndef counting_sort(iterable, key=lambda x:x):\n    '''\n    Implement the Counting Sort algorithm\n    '''\n    iterable = iterable[:]\n    max_key = max(iterable, key=key)\n    buckets = [0] * (max_key + 1)\n    for elem in iterable:\n        buckets[key(elem)] += 1\n    for i in xrange(1, len(buckets)):\n        buckets[i] += buckets[i-1]\n    result = []\n    for elem in iterable:\n        buckets[key(elem)] -= 1\n        result.append(elem)\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n    \ndef merge_sort(iterable):\n    '''\n    Write a function that, given an iterable of sorted elements, sorts the elements into ascending order.\n    '''\n    if len(iterable)==1:\n        return iterable\n    mid = len(iterable)//2\n    left = merge_sort(iterable[:mid])\n    right = merge_sort(iterable[mid:])\n    l = len(left)\n    r = len(right)\n    res = []\n    while len(res)<len(iterable):\n        if len(res)<l or (len(res)>=l and len(res)<r and left[len(res)]>=right[len(res)]):\n            res.append(right[len(res)])\n            r = r-1\n        else:\n            res.append(left[len(res)])\n            l = l-1\n    return res\n    \ndef partition(iterable, func):\n    '''\n    Write a function that, given an iterable, returns two iterables: the first containing all the elements smaller than the pivot, and the second containing all the elements greater than or equal to the pivot.\n    '''\n    # all_smaller = []\n    # all_greater = []\n    # for i in iterable:\n    #     if func(i):\n    #         all_smaller.append(i)\n    #     else:\n    #         all_greater.append(i)\n    # return (all_smaller, all_greater)\n    pivot = func(iterable[0])\n    smaller = []\n    greater = []\n    for i in iterable:\n        if func(i):\n            smaller.append(i)\n        else:\n            greater.append(i)\n    return (smaller, greater)\n    \ndef quicksort(iterable, func):\n    '''\n    Write a function that, given an iterable, returns a new iterable containing the same elements but sorted according to the given criterion.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    smaller, greater = partition(iterable, func)\n    return quicksort(smaller, func) + [iterable[0]] + quicksort(greater, func)\n    \ndef quickselect(iterable, k):\n    '''\n    Write a function that returns the kth smallest element in the given iterable.\n    '''\n    if k<=0:\n        return None\n    elif k>len(iterable):\n        return None\n    else:\n        return quickselect(iterable[1:], k-1) if len(iterable)>1 else iterable[0]\n        \ndef linear_search(iterable, func):\n    '''\n    Write a function that, given an iterable and a key, returns the index of the key if the key is in the iterable, or returns -1 otherwise.\n    '''\n    for i in range(len(iterable)):\n        if func(iterable[i]):\n            return i\n    return -1\n    \ndef binary_search(iterable, func):\n    '''\n    Write a function that, given an iterable and a key, returns the index of the key if the key is in the iterable, or returns -1 otherwise.\n    '''\n    if len(iterable)==0:\n        return -1\n    elif len(iterable)==1:\n        return 0 if func(iterable[0]) else -1\n    else:\n        mid = len(iterable)//2\n        if func(iterable[mid]):\n            return mid\n        else:\n            if func(iterable[mid-1]):\n                return mid-1\n            elif func(iterable[mid]):\n                return mid\n            else:\n                if func(iterable[mid-1]):\n                    return mid-1\n                else:\n                    return -1\n    \ndef cycle_sort(iterable):\n    '''\n    Write a function that, given an iterable, returns a new iterable containing the same elements in the same order as the input, but rearranged such that no two elements are adjacent.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    pivot = len(iterable)//2\n    left = cycle_sort(iterable[:pivot])\n    right = cycle_sort(iterable[pivot:])\n    left_ind = 0\n    right_ind = 0\n    res = []\n    for i in range(len(iterable)):\n        if i<left_ind:\n            res.append(left[i])\n        elif i>=left_ind and i<left_ind+pivot:\n            res.append(iterable[i])\n        else:\n            res.append(right[i-left_ind-pivot])\n            left_ind = left_ind+pivot\n    return res\n    \ndef is_circular(iterable):\n    '''\n    Write a function that, given an iterable, returns True if the iterable is circular, and False otherwise.\n    '''\n    if len(iterable)<=1:\n        return False\n    else:\n        for i in range(1, len(iterable)):\n            if iterable[i-1]!=iterable[i]:\n                return False\n        return True\n    \ndef is_sorted(iterable):\n    '''\n    Write a function that, given an iterable, returns True if the iterable is sorted, and False otherwise.\n    '''\n    if len(iterable)<=1:\n        return True\n    else:\n        for i in range(1, len(iterable)):\n            if iterable[i-1]>=iterable[i]:\n                return False\n        return True\n        \ndef selection_sort(iterable):\n    '''\n    Write a function that, given an iterable, returns a new iterable containing the same elements in the same order as the input, but sorted by selection sort.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    for i in range(len(iterable)-1):\n        ind = i\n        for j in range(i+1, len(iterable)):\n            if iterable[j]<iterable[ind]:\n                ind = j\n        if ind!=i:\n            iterable[ind], iterable[i] = iterable[i], iterable[ind]\n    return iterable\n    \ndef insertion_sort(iterable):\n    '''\n    Write a function that, given an iterable, returns a new iterable containing the same elements in the same order as the input, but sorted by insertion sort.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    for i in range(1, len(iterable)):\n        key = iterable[i]\n        j = i-1\n        while j>=0 and iterable[j]>key:\n            iterable[j+1] = iterable[j]\n            j -= 1\n        iterable[j+1] = key\n    return iterable\n    \ndef counting_sort(iterable, k):\n    '''\n    Write a function that, given an iterable and a key, returns a new iterable containing the same elements in the same order as the input, but sorted according to the count of each element's key.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    elif k>max(iterable):\n        return None\n    else:\n        counts = [0]*(k+1)\n        for i in iterable:\n            counts[i] += 1\n        for i in range(1, k+1):\n            counts[i] += counts[i-1]\n        res = []\n        for i in iterable:\n            res.append(counts[i])\n        return res\n    \ndef radix_sort(iterable, base=10):\n    '''\n    Write a function that, given an iterable, returns a new iterable containing the same elements in the same order as the input, but sorted according to the radix value of each element.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    for i in range"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for val in iterable:\n        hq.heappush(heap, val)\n    return [hq.heappop(heap) for i in xrange(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap=[]\n    for i in iterable:\n        hq.heappush(heap,i)\n    return [hq.heappop(heap) for _ in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return hq.nlargest(len(iterable), iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    while len(iterable)>1:\n        hq.heappop(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    sortedList = []\n    hq.heapify(sortedList)\n    for i in iterable:\n        hq.heappush(sortedList, i)\n    return [hq.heappop(sortedList) for x in range(len(sortedList))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # first, heapify\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    # then, extract, insert, re-heapify\n    while h:\n        yield hq.heappop(h)\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list using merge sort.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    else:\n        left = merge_sort(iterable[:len(iterable)//2])\n        right = merge_sort(iterable[len(iterable)//2:])\n        return merge(left, right)\ndef merge(left, right):\n    '''\n    Write a function to merge the given two sorted lists.\n    '''\n    l, r = 0, 0\n    result = []\n    while l < len(left) and r < len(right):\n        if left[l] <= right[r]:\n            result.append(left[l])\n            l += 1\n        else:\n            result.append(right[r])\n            r += 1\n    while l < len(left):\n        result.append(left[l])\n        l += 1\n    while r < len(right):\n        result.append(right[r])\n        r += 1\n    return result\ndef heap_sort_reverse(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, -i)\n    while h:\n        yield hq.heappop(h)\ndef insertion_sort(iterable):\n    '''\n    Write a function to sort the given list using insertion sort.\n    '''\n    for i in range(1, len(iterable)):\n        val = iterable[i]\n        j = i - 1\n        while j >= 0 and val < iterable[j]:\n            iterable[j + 1] = iterable[j]\n            j -= 1\n        iterable[j + 1] = val\n    return iterable\ndef recursive_bubble_sort(iterable, idx = 0):\n    '''\n    Write a function to sort the given list using bubble sort.\n    '''\n    if idx == len(iterable) - 1:\n        return iterable\n    for i in range(idx, len(iterable)):\n        if iterable[i] < iterable[idx]:\n            iterable[i], iterable[idx] = iterable[idx], iterable[i]\n    return recursive_bubble_sort(iterable, idx + 1)\ndef recursive_selection_sort(iterable, idx = 0):\n    '''\n    Write a function to sort the given list using selection sort.\n    '''\n    if idx == len(iterable) - 1:\n        return iterable\n    for i in range(idx, len(iterable)):\n        val = iterable[i]\n        min_idx = i\n        for j in range(i + 1, len(iterable)):\n            if val < iterable[j]:\n                min_idx = j\n        iterable[min_idx], iterable[i] = iterable[i], iterable[min_idx]\n    return recursive_selection_sort(iterable, idx + 1)\ndef recursive_insertion_sort(iterable, idx = 0):\n    '''\n    Write a function to sort the given list using insertion sort.\n    '''\n    if idx == len(iterable) - 1:\n        return iterable\n    for i in range(idx + 1, len(iterable)):\n        val = iterable[i]\n        for j in range(idx, i):\n            if val < iterable[j]:\n                iterable[j], iterable[i] = iterable[i], iterable[j]\n                break\n    return recursive_insertion_sort(iterable, idx + 1)\ndef quick_sort(iterable, left = 0, right = None):\n    '''\n    Write a function to sort the given list using quick sort.\n    '''\n    if right is None:\n        right = len(iterable) - 1\n    if left >= right:\n        return\n    pivot = iterable[right]\n    low = left\n    for i in range(left, right):\n        if iterable[i] < pivot:\n            iterable[i], iterable[low] = iterable[low], iterable[i]\n            low += 1\n    iterable[right], iterable[low] = iterable[low], iterable[right]\n    quick_sort(iterable, left, low - 1)\n    quick_sort(iterable, low + 1, right)\ndef bucket_sort(iterable, bucket_len = 10):\n    '''\n    Write a function to sort the given list using bucket sort.\n    '''\n    # 1. define a bucket\n    buckets = [[] for i in range(bucket_len)]\n    # 2. get the max, min, and count of each number\n    max_num, min_num, count = None, None, None\n    for num in iterable:\n        if max_num is None or num > max_num:\n            max_num = num\n        if min_num is None or num < min_num:\n            min_num = num\n        count += 1\n    # 3. for each number, sort it in the bucket\n    for num in iterable:\n        buckets[(num - min_num) // (max_num - min_num) % bucket_len].append(num)\n    # 4. return the sorted numbers\n    result = []\n    for i in range(bucket_len):\n        result += buckets[i]\n    return result\ndef heap_sort_counting(iterable, cnt_num = 10):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    else:\n        left = heap_sort_counting(iterable[:len(iterable)//2], cnt_num)\n        right = heap_sort_counting(iterable[len(iterable)//2:], cnt_num)\n        return merge(left, right)\ndef heap_sort_max(iterable, cnt_num = 10):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    else:\n        left = heap_sort_max(iterable[:len(iterable)//2], cnt_num)\n        right = heap_sort_max(iterable[len(iterable)//2:], cnt_num)\n        return merge(left, right)\ndef heap_sort_min(iterable, cnt_num = 10):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    else:\n        left = heap_sort_min(iterable[:len(iterable)//2], cnt_num)\n        right = heap_sort_min(iterable[len(iterable)//2:], cnt_num)\n        return merge(left, right)\ndef merge(left, right):\n    '''\n    Write a function to merge the given two sorted lists.\n    '''\n    l, r = 0, 0\n    result = []\n    while l < len(left) and r < len(right):\n        if left[l] <= right[r]:\n            result.append(left[l])\n            l += 1\n        else:\n            result.append(right[r])\n            r += 1\n    while l < len(left):\n        result.append(left[l])\n        l += 1\n    while r < len(right):\n        result.append(right[r])\n        r += 1\n    return result\ndef merge_sort_counting(iterable, cnt_num = 10):\n    '''\n    Write a function to sort the given list using merge sort.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    else:\n        left = merge_sort_counting(iterable[:len(iterable)//2], cnt_num)\n    "
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    cost = 0\n    profit = 0\n    loss = 0\n    \n    for i in xrange(0,len(actual_cost)):\n        cost += actual_cost[i]\n        \n        if cost <= sale_amount:\n            profit = profit + sale_amount - cost\n        else:\n            loss = loss + cost - sale_amount\n            \n    return profit\n    \ndef profit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    \n    cost = 0\n    profit = 0\n    loss = 0\n    \n    for i in xrange(0,len(actual_cost)):\n        cost += actual_cost[i]\n        \n        if cost <= sale_amount:\n            profit = profit + sale_amount - cost\n        else:\n            loss = loss + cost - sale_amount\n            \n    return profit,loss\n    \n    "
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    elif actual_cost < sale_amount:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    elif actual_cost > sale_amount:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False\n    \ndef shop_operator(actual_cost,sale_amount,profit):\n    '''\n    Write a function to check whether the given amount of the item has profit and loss\n    '''\n    if actual_cost > sale_amount:\n        if profit == True:\n            return True\n        else:\n            return False\n    else:\n        if profit == False:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = 0\n    loss = 0\n    \n    for i in range(len(actual_cost)):\n        if actual_cost[i] > sale_amount[i]:\n            profit += sale_amount[i] - actual_cost[i]\n        else:\n            loss += actual_cost[i] - sale_amount[i]\n    \n    return (profit == 0) and (loss == 0)\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost>sale_amount:\n        print \"false\"\n    elif actual_cost==sale_amount:\n        print \"true\"\n    else:\n        print \"true\"\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit > 0 :\n        return True\n    else :\n        return False\n    \ndef noprofit_loss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit < 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_cost = float(actual_cost)\n    sale_amount = float(sale_amount)\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False\n    \ndef noprofit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and loss\n    '''\n    actual_cost = float(actual_cost)\n    sale_amount = float(sale_amount)\n    if actual_cost < sale_amount:\n        return False\n    else:\n        return True\n    \ndef noprofit_profit(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and loss\n    '''\n    actual_cost = float(actual_cost)\n    sale_amount = float(sale_amount)\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return (actual_cost == sale_amount)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=float(v)\n    t=float(t)\n    wind_chill=35.74 + 0.6215*t - 35.75*math.pow(v,0.16)+ 0.4275*t*math.pow(v,0.16)\n    return int(round(wind_chill))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 35.74 + 0.6215 * t + (35.75 * math.pow(v, 0.16)) + (0.4275 * t * math.pow(v, 0.16))\n    return int(round(k))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 13.12\n    b = 2.5\n    c = 10.0\n    d = 0.5\n    e = 0.1\n    v = v * 3.6\n    t = (t * 9/5) + 32\n    w = a + (b * t) - (c * v ** d) + (d * v ** e)\n    w = round(w)\n    return w\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Convert temperature to degrees Celsius\n    temp=t*0.555\n    #Coefficient for calculating wind chill\n    wci_0=35.74+0.6215*temp-35.75*math.pow(v,0.16)+0.4275*temp*math.pow(v,0.16)\n    wci_0=math.ceil(wci_0)\n    return wci_0\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t=5.55-(0.6*t)+35.5*(0.16*v**0.16)\n    return int(round(t))\ndef test_wind_chill():\n    assert wind_chill(10,35) == 78\n    assert wind_chill(10,35.1) == 78\n    assert wind_chill(10,35.2) == 79\n    assert wind_chill(10,35.3) == 79\n    assert wind_chill(10,35.4) == 78\n    assert wind_chill(10,35.5) == 78\n    assert wind_chill(10,35.6) == 79\n    assert wind_chill(10,35.7) == 79\n    assert wind_chill(10,35.8) == 79\n    assert wind_chill(10,35.9) == 79\n    assert wind_chill(10,36) == 78\n    assert wind_chill(10,36.1) == 78\n    assert wind_chill(10,36.2) == 78\n    assert wind_chill(10,36.3) == 79\n    assert wind_chill(10,36.4) == 79\n    assert wind_chill(10,36.5) == 79\n    assert wind_chill(10,36.6) == 79\n    assert wind_chill(10,36.7) == 79\n    assert wind_chill(10,36.8) == 79\n    assert wind_chill(10,36.9) == 79\n    assert wind_chill(10,37) == 78\n    assert wind_chill(10,37.1) == 78\n    assert wind_chill(10,37.2) == 78\n    assert wind_chill(10,37.3) == 79\n    assert wind_chill(10,37.4) == 79\n    assert wind_chill(10,37.5) == 79\n    assert wind_chill(10,37.6) == 79\n    assert wind_chill(10,37.7) == 79\n    assert wind_chill(10,37.8) == 79\n    assert wind_chill(10,37.9) == 79\n    assert wind_chill(10,38) == 79\n    assert wind_chill(10,38.1) == 79\n    assert wind_chill(10,38.2) == 79\n    assert wind_chill(10,38.3) == 79\n    assert wind_chill(10,38.4) == 79\n    assert wind_chill(10,38.5) == 79\n    assert wind_chill(10,38.6) == 79\n    assert wind_chill(10,38.7) == 79\n    assert wind_chill(10,38.8) == 79\n    assert wind_chill(10,38.9) == 79\n    assert wind_chill(10,39) == 79\n    assert wind_chill(10,39.1) == 79\n    assert wind_chill(10,39.2) == 79\n    assert wind_chill(10,39.3) == 79\n    assert wind_chill(10,39.4) == 79\n    assert wind_chill(10,39.5) == 79\n    assert wind_chill(10,39.6) == 79\n    assert wind_chill(10,39.7) == 79\n    assert wind_chill(10,39.8) == 79\n    assert wind_chill(10,39.9) == 79\n    assert wind_chill(10,40) == 79\n    assert wind_chill(10,40.1) == 79\n    assert wind_chill(10,40.2) == 79\n    assert wind_chill(10,40.3) == 79\n    assert wind_chill(10,40.4) == 79\n    assert wind_chill(10,40.5) == 79\n    assert wind_chill(10,40.6) == 79\n    assert wind_chill(10,40.7) == 79\n    assert wind_chill(10,40.8) == 79\n    assert wind_chill(10,40.9) == 79\n    assert wind_chill(10,41) == 79\n    assert wind_chill(10,41.1) == 79\n    assert wind_chill(10,41.2) == 79\n    assert wind_chill(10,41.3) == 79\n    assert wind_chill(10,41.4) == 79\n    assert wind_chill(10,41.5) == 79\n    assert wind_chill(10,41.6) == 79\n    assert wind_chill(10,41.7) == 79\n    assert wind_chill(10,41.8) == 79\n    assert wind_chill(10,41.9) == 79\n    assert wind_chill(10,42) == 79\n    assert wind_chill(10,42.1) == 79\n    assert wind_chill(10,42.2) == 79\n    assert wind_chill(10,42.3) == 79\n    assert wind_chill(10,42.4) == 79\n    assert wind_chill(10,42.5) == 79\n    assert wind_chill(10,42.6) == 79\n    assert wind_chill(10,42.7) == 79\n    assert wind_chill(10,42.8) == 79\n    assert wind_chill(10,42.9) == 79\n    assert wind_chill(10,43) == 79\n    assert wind_chill(10,43.1) == 79\n    assert wind_chill(10,43.2) == 79\n    assert wind_chill(10,43.3) == 79\n    assert wind_chill(10,43.4) == 79\n    assert wind_chill(10,43.5) == 79\n    assert wind_chill(10,43.6) == 79\n    assert wind_chill(10,43.7) == 79\n    assert wind_chill(10,43.8) == 79\n    assert wind_chill(10,43.9) == 79\n    assert wind_chill(10,44) == 79\n    assert wind_chill(10,44.1) == 79\n    assert wind_chill(10,44.2) == 79\n    assert wind_chill(10,44.3) == 79\n    assert wind_chill(10,44.4) == 79\n    assert wind_chill(10,44.5) == 79\n    assert wind_chill(10,44.6) == 79\n    assert wind_chill(10,44.7) == 79\n    assert wind_chill(10,44.8) == 79\n    assert wind_chill(10,44.9) == 79\n    assert wind_chill(10,45) == 79\n    assert wind_chill(10,45.1) == 79\n    assert wind_chill(10,45.2) == 79\n    assert wind_chill(10,45.3) == 79\n    assert wind_chill(10,45.4) == 79\n    assert wind_chill(10,45.5) == 79\n    assert wind_chill(10,45.6) == 79\n    assert wind_chill(10,45.7) == 79\n    assert wind_chill(10,45.8) == 79\n    assert wind_chill(10,45.9) == 79\n    assert wind_chill(10,46) == 79\n    assert wind_chill(10,46.1) == 79\n    assert wind_chill(10,46.2) == 79\n    assert wind_chill(10,46.3) == 79\n    assert wind_chill(10,46.4) == 79\n    assert wind_chill(10,46.5) == 79\n    assert wind_chill(10,46.6) == 79\n    assert wind_chill(10,46.7) == 79\n    assert wind_chill(10,46.8) == 79\n    assert wind_chill(10,46.9) == 79\n    assert wind_chill(10,47) == 79\n    assert wind_chill(10,47.1) == 79\n    assert wind_chill(10,47.2) == 79\n    assert wind_chil"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # S/15 = 1.5 x 10-3 x [v^0.67 x t + 110.54]\n    c = 110.54\n    v = v * 10**(-3)\n    v_sq = v**0.67\n    tc = t + c\n    return int(round(v_sq * tc))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    wci = 35.74 + (0.6215 * t) + (35.75 * math.pow(v, 0.16)) - (0.4275 * t * math.pow(v, 0.16))\n    wci = int(round(wci))\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    A = 35.74\n    B = 0.6215\n    C = 35.75\n    D = 0.4275\n    v = v*1.60934\n    w = math.pow(v,0.5)\n    T = t + 273.15\n    wci = A + (B * T) + (C * T) + (D * T) + 32.0\n    wci = round(wci)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v * 0.44704\n    t = t - 35\n    wci = 13.12 + (0.6215*t) + (11.37*(v**0.16)) + (0.3965*(t**2)) - (9.7356*(v**0.16)*(t**2))\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Evaluate the wind chill\n    wci=35.74 + 0.6215*t + (35.75*(v**0.16)) - (0.4275*t) + (0.375*(v**0.16)*(t**0.16))\n    return int(round(wci))\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # code here\n    return sum([len(sample_name) for sample_name in sample_names if not sample_name.startswith('l')])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #Return the sum of the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    total = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total += len(name)\n    return total\n    # First create a list of sample names\n    # Define a function that removes the names that start with lowercase letters\n    # Return the sum of the length of the names of a given list of names after removing the names that start with a lowercase letter.\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if sample_names == []:\n        return 0\n    length = len(sample_names)\n    i = 0\n    j = 0\n    for i in range(length):\n        if sample_names[i][0].isupper():\n            sample_names[i] = sample_names[i][1:]\n        j = j + len(sample_names[i])\n    return j\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n    "
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_of_names = 0\n    for name in sample_names:\n        if not name[0].isupper():\n            sum_of_names += len(name)\n    return sum_of_names\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_dict = {}\n    for name in sample_names:\n        if name.isupper():\n            continue\n        else:\n            sample_dict[name] = len(name)\n    return sample_dict\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    i = 0\n    for x in sample_names:\n        if x[0].lower() == x[0]:\n            i += len(x)\n    return i\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if sample_names:\n        new_l = [i for i in sample_names if i[0].isupper()]\n        return sum([len(i) for i in new_l])\n    else:\n        return 0\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # This is a list of sample names.\n    nam_list = [\"Hannah\", \"Frankie\", \"Alyse\", \"Maya\", \"Kenneth\", \"Wendy\", \"Matthew\", \"Ruby\", \"Ramon\", \"Bette\", \"Rafaela\", \"Nora\", \"Carlotta\", \"Rebecca\", \"Sophie\", \"Dana\", \"Krista\", \"Caitrin\", \"Aubree\", \"Briana\", \"Rose\", \"Jasmine\", \"Pia\", \"Madeline\", \"Alicia\", \"Isabella\", \"Luna\", \"Natacha\", \"Mia\", \"Addie\", \"Elena\", \"Melanie\", \"Nan\", \"Olivia\", \"Diana\", \"Krystle\", \"Kathleen\", \"Lilia\", \"Lillian\", \"Laila\", \"Leah\", \"Sophie\", \"Marcella\", \"Lara\", \"Kyla\", \"Jasmine\", \"Katherine\", \"Cayden\", \"Amy\", \"Savannah\", \"Bella\", \"Ava\", \"Audrey\", \"Desiree\", \"Alexa\", \"Lina\", \"Ann\", \"Kathryn\", \"Kerry\", \"Sofia\", \"Kaitlyn\", \"Kristal\", \"Paisley\", \"Ava\", \"Lily\", \"Victoria\", \"Isla\", \"Jasmine\", \"Lincoln\", \"Alisa\", \"Savannah\", \"Ava\", \"Lillian\", \"Mia\", \"Kimberly\", \"Sophie\", \"Lydia\", \"Kaitlyn\", \"Sabrina\", \"Melody\", \"Rose\", \"Natalie\", \"Alejandra\", \"Aria\", \"Kayla\", \"Alison\", \"Madison\", \"Penelope\", \"Tia\", \"Lillie\", \"Ava\", \"Jayne\", \"Beatrice\", \"Noemi\", \"Kaila\", \"Ella\", \"Nola\", \"Rosie\", \"Vivi\", \"Luna\", \"Sophie\", \"Bella\", \"Lily\", \"Lily\", \"Mariam\", \"Jasmine\", \"Jocelyn\", \"Liz\", \"Lois\", \"Cheryl\", \"Alana\", \"Amiyah\", \"Lily\", \"Amaya\", \"June\", \"Andrea\", \"Eliana\", \"Kathlene\", \"Alexa\", \"Isla\", \"Belle\", \"Katherine\", \"Mae\", \"Karla\", \"Cher\", \"Sophie\", \"Amy\", \"Savannah\", \"Madison\", \"Kathleen\", \"Catherine\", \"Sophie\", \"Lillian\", \"Melina\", \"Ava\", \"Amanda\", \"Rhoda\", \"Jasmine\", \"Aurora\", \"Anne\", \"Lena\", \"Amethyst\", \"Kristina\", \"Cheri\", \"Kylie\", \"Ava\", \"Briana\", \"Addie\", \"Alice\", \"Abigail\", \"Lillian\", \"Roxie\", \"Hannah\", \"Ann\", \"Lina\", \"Aria\", \"Emmie\", \"Avery\", \"Beatrice\", \"Aubrey\", \"Amethyst\", \"Hannah\", \"Andrea\", \"Kirsten\", \"Roxie\", \"Holly\", \"Adeline\", \"Lorraine\", \"Ava\", \"Caroline\", \"Ava\", \"Angel\", \"Sue\", \"Aurora\", \"Noemi\", \"Amethyst\", \"Kristy\", \"Ava\", \"Amanda\", \"Amethyst\", \"Ava\", \"Natalie\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\", \"Amethyst\""
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    ans = []\n    for i in items:\n        if i!= ')' or i!= '(':\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for i in items:\n        new_items.append(re.sub(r'\\([^()]*\\)','',i))\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    brackets = re.compile(r'\\((.*?)\\)')\n    items = brackets.findall(items)\n    if len(items) > 0:\n        return items[0]\n    else:\n        return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = []\n    for item in items:\n        x = re.sub(r'\\([^)]*\\)', '', item)\n        output.append(x)\n    return output\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for i in items:\n        if i!= '(' and i!= ')':\n            result.append(i)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return ''.join(items)\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    newitems = []\n    for item in items:\n        if item[0] == '(' and item[-1] == ')':\n            newitems.append(item[1:-1])\n        else:\n            newitems.append(item)\n    return newitems\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_string=''\n    start_index=0\n    end_index=0\n    for i in range(len(items)):\n        if items[i] == '(':\n            start_index = i\n        elif items[i] == ')':\n            end_index = i\n        if start_index!= 0 and end_index!= 0 and start_index < end_index:\n            new_string = new_string + items[start_index + 1:end_index]\n    return new_string\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('\\([^)]*\\)','',items)\n    \ndef remove_square_brackets(items):\n    '''\n    Write a function to remove the square brackets and what is inbetween them from a string.\n    '''\n    return re.sub('\\[[^)]*\\]','',items)\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_str = ''\n    if items[0] == '(':\n        for i in range(1, len(items)):\n            if items[i] == ')':\n                break\n            new_str += items[i]\n    else:\n        new_str = items\n    return new_str\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonals = [1, 2, 3, 4, 5, 6, 7, 8]\n    return nonagonals[n - 1]\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==0:\n        return 1\n    elif n%2==0:\n        return n+1\n    else:\n        return n-1\n        \nprint is_nonagonal(1)\nprint is_nonagonal(2)\nprint is_nonagonal(3)\nprint is_nonagonal(4)\nprint is_nonagonal(5)\nprint is_nonagonal(6)\nprint is_nonagonal(7)\nprint is_nonagonal(8)\nprint is_nonagonal(9)\nprint is_nonagonal(10)\nprint is_nonagonal(11)\nprint is_nonagonal(12)\nprint is_nonagonal(13)\nprint is_nonagonal(14)\nprint is_nonagonal(15)\nprint is_nonagonal(16)\nprint is_nonagonal(17)\nprint is_nonagonal(18)\nprint is_nonagonal(19)\nprint is_nonagonal(20)\nprint is_nonagonal(21)\nprint is_nonagonal(22)\nprint is_nonagonal(23)\nprint is_nonagonal(24)\nprint is_nonagonal(25)\nprint is_nonagonal(26)\nprint is_nonagonal(27)\nprint is_nonagonal(28)\nprint is_nonagonal(29)\nprint is_nonagonal(30)\nprint is_nonagonal(31)\nprint is_nonagonal(32)\nprint is_nonagonal(33)\nprint is_nonagonal(34)\nprint is_nonagonal(35)\nprint is_nonagonal(36)\nprint is_nonagonal(37)\nprint is_nonagonal(38)\nprint is_nonagonal(39)\nprint is_nonagonal(40)\nprint is_nonagonal(41)\nprint is_nonagonal(42)\nprint is_nonagonal(43)\nprint is_nonagonal(44)\nprint is_nonagonal(45)\nprint is_nonagonal(46)\nprint is_nonagonal(47)\nprint is_nonagonal(48)\nprint is_nonagonal(49)\nprint is_nonagonal(50)\nprint is_nonagonal(51)\nprint is_nonagonal(52)\nprint is_nonagonal(53)\nprint is_nonagonal(54)\nprint is_nonagonal(55)\nprint is_nonagonal(56)\nprint is_nonagonal(57)\nprint is_nonagonal(58)\nprint is_nonagonal(59)\nprint is_nonagonal(60)\nprint is_nonagonal(61)\nprint is_nonagonal(62)\nprint is_nonagonal(63)\nprint is_nonagonal(64)\nprint is_nonagonal(65)\nprint is_nonagonal(66)\nprint is_nonagonal(67)\nprint is_nonagonal(68)\nprint is_nonagonal(69)\nprint is_nonagonal(70)\nprint is_nonagonal(71)\nprint is_nonagonal(72)\nprint is_nonagonal(73)\nprint is_nonagonal(74)\nprint is_nonagonal(75)\nprint is_nonagonal(76)\nprint is_nonagonal(77)\nprint is_nonagonal(78)\nprint is_nonagonal(79)\nprint is_nonagonal(80)\nprint is_nonagonal(81)\nprint is_nonagonal(82)\nprint is_nonagonal(83)\nprint is_nonagonal(84)\nprint is_nonagonal(85)\nprint is_nonagonal(86)\nprint is_nonagonal(87)\nprint is_nonagonal(88)\nprint is_nonagonal(89)\nprint is_nonagonal(90)\nprint is_nonagonal(91)\nprint is_nonagonal(92)\nprint is_nonagonal(93)\nprint is_nonagonal(94)\nprint is_nonagonal(95)\nprint is_nonagonal(96)\nprint is_nonagonal(97)\nprint is_nonagonal(98)\nprint is_nonagonal(99)\nprint is_nonagonal(100)\nprint is_nonagonal(101)\nprint is_nonagonal(102)\nprint is_nonagonal(103)\nprint is_nonagonal(104)\nprint is_nonagonal(105)\nprint is_nonagonal(106)\nprint is_nonagonal(107)\nprint is_nonagonal(108)\nprint is_nonagonal(109)\nprint is_nonagonal(110)\nprint is_nonagonal(111)\nprint is_nonagonal(112)\nprint is_nonagonal(113)\nprint is_nonagonal(114)\nprint is_nonagonal(115)\nprint is_nonagonal(116)\nprint is_nonagonal(117)\nprint is_nonagonal(118)\nprint is_nonagonal(119)\nprint is_nonagonal(120)\nprint is_nonagonal(121)\nprint is_nonagonal(122)\nprint is_nonagonal(123)\nprint is_nonagonal(124)\nprint is_nonagonal(125)\nprint is_nonagonal(126)\nprint is_nonagonal(127)\nprint is_nonagonal(128)\nprint is_nonagonal(129)\nprint is_nonagonal(130)\nprint is_nonagonal(131)\nprint is_nonagonal(132)\nprint is_nonagonal(133)\nprint is_nonagonal(134)\nprint is_nonagonal(135)\nprint is_nonagonal(136)\nprint is_nonagonal(137)\nprint is_nonagonal(138)\nprint is_nonagonal(139)\nprint is_nonagonal(140)\nprint is_nonagonal(141)\nprint is_nonagonal(142)\nprint is_nonagonal(143)\nprint is_nonagonal(144)\nprint is_nonagonal(145)\nprint is_nonagonal(146)\nprint is_nonagonal(147)\nprint is_nonagonal(148)\nprint is_nonagonal(149)\nprint is_nonagonal(150)\nprint is_nonagonal(151)\nprint is_nonagonal(152)\nprint is_nonagonal(153)\nprint is_nonagonal(154)\nprint is_nonagonal(155)\nprint is_nonagonal(156)\nprint is_nonagonal(157)\nprint is_nonagonal(158)\nprint is_nonagonal(159)\nprint is_nonagonal(160)\nprint is_nonagonal(161)\nprint is_nonagonal(162)\nprint is_nonagonal(163)\nprint is_nonagonal(164)\nprint is_nonagonal(165)\nprint is_nonagonal(166)\nprint is_nonagonal(167)\nprint is_nonagonal(168)\nprint is_nonagonal(169)\nprint is_nonagonal(170)\nprint is_nonagonal(171)\nprint is_nonagonal(172)\nprint is_nonagonal(173)\nprint is_nonagonal(174)\nprint is_nonagonal(175)\nprint is_nonagonal(176)\nprint is_nonagonal(177)\nprint is_nonagonal(178)\nprint is_nonagonal(179)\nprint is_nonagonal(180)\nprint is_nonagonal(181)\nprint is_nonagonal(182)\nprint is_nonagonal(183)\nprint is_nonagonal(184)\nprint is_nonagonal(185)\nprint is_nonagonal(186)\nprint is_nonagonal(187)\nprint is_nonagonal(188)\nprint is_nonagonal(189)\nprint is_nonagonal(190)\nprint is_nonagonal(191)\nprint is_nonagonal(192)\nprint is_nonagonal(193)\nprint is_nonagonal(194)\nprint is_nonagonal(195)\nprint is_nonagonal(196)\nprint is_nonagonal(197)\nprint is_nonagonal(198)\nprint is_nonagonal(199)\nprint is_nonagonal(200)\nprint is_nonagonal(201)\nprint is_nonagonal(202)\nprint is_nonagonal(203)\nprint is_nonagonal(204)\nprint is_nonagonal(205)\nprint is_nonagonal(206)\nprint is_nonagonal(207)\nprint is_nonagonal(208)\nprint is_nonagonal(209)\nprint is_nonagonal(210)\nprint is_nonagonal(211)\nprint is_nonagonal(212)\nprint is_nonagonal(213)\nprint is_nonagonal(214)\nprint is_nonagonal(215)\nprint is_nonagonal(216)\nprint is_nonagonal(217)\nprint is_nonagonal(218)\nprint is_nonagonal(219)\nprint is_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return n*(n-1) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # If n is odd, the nth nonagonal number is the nth term of the fibonacci sequence\n    if n % 2:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    # If n is even, the nth nonagonal number is the sum of the nth and the (n - 1)th terms of the fibonacci sequence\n    else:\n        return fibonacci(n - 2) + fibonacci(n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    prev_res = nonagonal(n-1)\n    prev_res_rem = prev_res%10\n    return (prev_res_rem-1)*10+prev_res_rem\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n**2 - (n-1)**2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_list = [1,1,1,2,3,5,7,11,15,21]\n    if n in nonagonal_list:\n        return True\n    return False\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def get_nonagonal(n):\n        current = 1\n        non_list = [1]\n        while True:\n            new_num = current + (current - 1)\n            if new_num == n:\n                return non_list\n            non_list.append(new_num)\n            current = new_num\n    return get_nonagonal(n)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 3\n    return (2*(n-1))+1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return is_square(n) and n%2 == 1\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return any(map(lambda x: re.search(r'z.+?z',x),text.split()))\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    new_text = []\n    words = re.findall('[a-z]+',text)\n    for word in words:\n        if word == 'z' and word[0] == 'z' and word[-1] == 'z':\n            continue\n        else:\n            new_text.append(word)\n    return''.join(new_text)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search('z', text)\n    if result is None:\n        return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search(r'\\b(z(?=[^a-zA-Z])|z(?=\\b))', text)\n    print(result)\n    if result:\n        print(\"Found\")\n    else:\n        print(\"Not Found\")\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'z.+z', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    output = re.search('[zZ](?=(.*[A-Z][a-z]+.*))',text)\n    return output\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    search_term = r'z.*z'\n    if re.search(search_term, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z = re.search(r'z',text)\n    if z:\n        return z.group()\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.search(r'z.+z', text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_middle_v2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    start = re.search('^.*z',text)\n    end = re.search('z.*$',text)\n    if start and end:\n        return True\n    elif start:\n        return True\n    elif end:\n        return True\n    else:\n        return False\n    \ndef text_match_z_middle_v15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return Fals"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    k = k-1\n    l = len(input)\n    while k>0:\n        input[k], input[l-k] = input[l-k], input[k]\n        k=k-1\n        l=l-1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Take input array and reverse it\n    # input_array = [1, 2, 3, 4, 5, 6, 7]\n    # reverse_array(input_array, 3) = [7, 6, 5, 4, 3, 2, 1]\n    # [1, 2, 3, 4, 5, 6, 7]\n    \n    # input_array = [1, 2, 3, 4, 5, 6, 7]\n    # reverse_array(input_array, 7) = [7, 6, 5, 4, 3, 2, 1]\n    # [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0:\n        return input\n    else:\n        return reverse_Array_Upto_K(input[k:],k-1) + input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k+1][::-1] + input[k+1:]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[k::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = input[-1:k-1:-1]\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_length = len(input) \n    input = input[input_length-k:input_length]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    j = 0\n    input_copy = input[:]\n    while j < k:\n        input[i] = input_copy[j]\n        i = i + 1\n        j = j + 1\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[k:][::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[k:][::-1]\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    new_tup = list(test_tup)\n    new_tup.append(test_dict)\n    new_tup = tuple(new_tup)\n    \n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup[0] + 1, test_tup[1])\n    new_dict = {}\n    new_dict[1] = test_dict\n    return new_tup, new_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0]+1, test_tup[1]+test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + (test_dict, ))\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    for key in test_dict:\n        test_tup.append(test_dict[key])\n    test_tup = tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #return a tuple with the contents of the dictionary and the original tuple\n    return (test_dict, test_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup[i] + test_dict[i] for i in range(len(test_tup)))\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.items())\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    result = list(test_tup)\n    result.append(test_dict)\n    return tuple(result)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add your code here.\n    # Use \"dict.items()\" to get the items of the dictionary.\n    # Use \"tuple.index(dict.items())\" to get the index of the element.\n    # Use \"tuple.index(element)\" to get the index of the element.\n    # Get the length of the tuple and add 1 to it.\n    # Then use the indexes to update the tuple.\n    # Use tuple[tuple.index(element) + 1] to update the tuple.\n    return tuple([test_tup[i] + test_dict[i] for i in test_dict])\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row = len(cost)\n    col = len(cost[0])\n    dp = [[0 for j in range(col)] for i in range(row)]\n    for i in range(row):\n        dp[i][0] = cost[i][0]\n    for j in range(col):\n        dp[0][j] = cost[0][j]\n    for i in range(1, row):\n        for j in range(1, col):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n    sum = 0\n    for i in range(row):\n        for j in range(col):\n            sum += dp[i][j]\n    return (sum / (row * col))\n    \ndef subsetSum(arr, n, sum):\n    '''\n    Given an array of integers and a number,\n    find the number of subsets in the array\n    that have a sum equal to the given number.\n    '''\n    dp = [[0 for i in range(sum + 1)] for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n    return dp[n][sum]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    rows = len(cost)\n    cols = len(cost[0])\n    \n    maxCost = 0\n    maxPath = []\n    \n    for i in xrange(rows):\n        for j in xrange(cols):\n            maxCost = max(maxCost, cost[i][j])\n    \n    if maxCost == 0:\n        return 0\n        \n    for i in xrange(rows):\n        for j in xrange(cols):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                cost[i][j] -= cost[i][j-1]\n            elif j == 0:\n                cost[i][j] -= cost[i-1][j]\n            else:\n                cost[i][j] -= max(cost[i-1][j], cost[i][j-1])\n            \n            maxPath.append(cost[i][j])\n            \n    return sum(maxPath) / float(rows*cols)\n    \n    \n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[float('-inf') for j in xrange(cols)] for i in xrange(rows)]\n    for row in xrange(rows):\n        dp[row][0] = cost[row][0]\n    for col in xrange(1, cols):\n        dp[0][col] = cost[0][col] + dp[0][col-1]\n    for row in xrange(1, rows):\n        for col in xrange(1, cols):\n            dp[row][col] = cost[row][col] + max(dp[row-1][col-1], dp[row-1][col])\n    return dp[rows-1][cols-1] / float(rows * cols)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    max_cost = 0\n    max_path = []\n    \n    for i in xrange(rows):\n        for j in xrange(cols):\n            curr_cost, curr_path = dfs(cost, i, j)\n            if max_cost < curr_cost:\n                max_cost = curr_cost\n                max_path = curr_path\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row = len(cost)\n    col = len(cost[0])\n    \n    if not cost or row < 1 or col < 1:\n        return -1\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Time Complexity: O(N^2)\n    # Space Complexity: O(N^2)\n    # DP approach\n    # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + cost[i][j]\n    # Therefore the maximum average is the maximum of the above row and previous column\n    # dp[0][0] = cost[0][0]\n    # for i in range(1, n):\n    #     dp[i][0] = cost[i][0] + dp[i-1][0]\n    # for j in range(1, n):\n    #     dp[0][j] = cost[0][j] + dp[0][j-1]\n    # for i in range(1, n):\n    #     for j in range(1, n):\n    #         dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    # max_avg = float(\"-inf\")\n    # for i in range(n):\n    #     row_avg = (float(\"-inf\") if i == 0 else dp[i-1][j]) + (float(\"-inf\") if j == 0 else dp[i][j-1]) + dp[i][j]\n    #     max_avg = max(max_avg, row_avg)\n    # return max_avg / (n*n)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    max_path_sum = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            max_path_sum = max(max_path_sum, cost[i][j])\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        dp[i][0] = cost[i][0]\n    for j in range(1, cols):\n        dp[0][j] = cost[0][j] + dp[0][j - 1]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n    print max_path_sum\n    max_avg = 0\n    for i in range(rows):\n        for j in range(cols):\n            max_avg = max(max_avg, dp[i][j] / (i + 1))\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    m = len(cost)\n    n = len(cost[0])\n    \n    for i in xrange(1, m):\n        cost[i][0] += cost[i-1][0]\n    for i in xrange(1, n):\n        cost[0][i] += cost[0][i-1]\n    \n    for i in xrange(1, m):\n        for j in xrange(1, n):\n            cost[i][j] += min(cost[i-1][j], cost[i][j-1])\n    \n    max_path_cost = float('-inf')\n    max_path_length = float('-inf')\n    \n    for i in xrange(m):\n        for j in xrange(n):\n            if cost[i][j] > max_path_cost:\n                max_path_cost = cost[i][j]\n                max_path_length = i+1\n            elif cost[i][j] == max_path_cost:\n                max_path_length = max(max_path_length, i+1)\n    \n    return max_path_cost / max_path_length\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def maxAverage(matrix, i, j, visited, avg, count):\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[i]) or visited[i][j] == 1:\n            return\n        if i == len(matrix)-1 and j == len(matrix[i])-1:\n            avg.append(count)\n            return\n        visited[i][j] = 1\n        maxAverage(matrix, i-1, j, visited, avg, count+matrix[i][j])\n        maxAverage(matrix, i+1, j, visited, avg, count+matrix[i][j])\n        maxAverage(matrix, i, j-1, visited, avg, count+matrix[i][j])\n        maxAverage(matrix, i, j+1, visited, avg, count+matrix[i][j])\n        visited[i][j] = 0\n    n = len(cost)\n    maxAvg = []\n    maxAvg.append(cost[0][0])\n    visited = [[0 for i in range(n)] for j in range(n)]\n    for i in range(1, n):\n        maxAvg.append(cost[i][0] + maxAvg[i-1])\n    for j in range(1, n):\n        maxAvg.append(cost[0][j] + maxAvg[j-1])\n    maxAvg.append(cost[n-1][n-1])\n    maxAvg.append(cost[0][n-1])\n    visited[0][0] = 1\n    maxAverage(cost, 0, 0, visited, maxAvg, cost[0][0])\n    return max(maxAvg)\n    \ncost = [[1,2,3,4],\n        [4,5,6,7],\n        [3,2,3,4],\n        [5,6,7,8],\n        [1,2,3,4]]\nprint(maxAverageOfPath(cost)"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_avg = cost[0][0]\n    max_avg_path = [0, 0]\n    avg = 0\n    for i in range(0, len(cost)):\n        avg += cost[i][0]\n    avg /= len(cost)\n    for i in range(0, len(cost)):\n        for j in range(0, len(cost)):\n            if j == i:\n                continue\n            curr_avg = avg\n            curr_avg_path = [i, j]\n            for k in range(0, len(cost)):\n                if k == i or k == j:\n                    continue\n                curr_avg += cost[k][j]\n                curr_avg_path.append(k)\n            if curr_avg > max_avg:\n                max_avg = curr_avg\n                max_avg_path = curr_avg_path\n    return max_avg, max_avg_path\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key in students:\n        if students[key][0] > h and students[key][1] > w:\n            filtered_students[key] = students[key]\n    return filtered_students\n    \ndef convert_students_to_key_value(students):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to convert a dictionary into a dictionary with a key for each student name and a value for each tuple of height and weight.\n    '''\n    key_value_dict = {}\n    for key in students:\n        key_value_dict[key] = students[key]\n    return key_value_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result_students = {}\n    for student,data in students.items():\n        if h < data[0] < w:\n            result_students[student] = data\n    return result_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name:data for name,data in students.items() if (data[0] > h) and (data[1] > w)}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            filtered_students[student] = students[student]\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            result[student] = data\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for key, value in students.items():\n        if (value[0] >= h and value[1] >= w):\n            new_students[key] = value\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0]>h and v[1]>w}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name : (height, weight) for name, (height, weight) in students.items() if h < height < w and w < weight < h}\n    \ndef main():\n    '''\n    The main function has been commented to avoid confusion.\n    '''\n    # height, weight = [int(height) for height in input().split()]\n    # students = {}\n    # for _ in range(int(input())):\n    #     name, score = input().split()\n    #     students[name] = score\n    # print(filter_data(students,height,weight))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {key:value for (key,value) in students.items() if value[0]>h and value[1]>w}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #filtered_students = {s: d for (s,d) in students.items() if d[0]>h and d[1]>w}\n    #return filtered_students\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    l = len(nums1)\n    dic = {}\n    for i in range(l):\n        if nums1[i] not in dic:\n            dic[nums1[i]] = 0\n        dic[nums1[i]] += 1\n    result = 0\n    for i in range(l):\n        if nums2[i] in dic and dic[nums2[i]] > 0:\n            dic[nums2[i]] -= 1\n            result += 1\n    return result\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2 or len(nums1)!= len(nums2): return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    else:\n        return sum(map(eq, nums1, nums2))\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num_set = {}\n    for i in range(len(nums1)):\n        num_set[nums1[i]] = num_set.get(nums1[i], 0) + 1\n    pairs = 0\n    for i in range(len(nums2)):\n        if nums2[i] in num_set:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Make a map of numbers to the index they occur at\n    map_1 = {}\n    map_2 = {}\n    for index, val in enumerate(nums1):\n        if val not in map_1:\n            map_1[val] = [index]\n        else:\n            map_1[val].append(index)\n    for index, val in enumerate(nums2):\n        if val not in map_2:\n            map_2[val] = [index]\n        else:\n            map_2[val].append(index)\n    # Count the number of matches in each list\n    matches = 0\n    for val in map_1.values():\n        if len(val) == 1:\n            matches += 1\n    for val in map_2.values():\n        if len(val) == 1:\n            matches += 1\n    return matches\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if (nums1[i] == nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if type(base) == type(float()) and type(power) == type(int()):\n        if power >= 0:\n            if power == 0:\n                return 1\n            if power == 1:\n                return base\n            if power > 1:\n                return base * power_base_sum(base, power - 1)\n        else:\n            if power < 0:\n                return 1 / power_base_sum(base, abs(power) - 1)\n            else:\n                return 'Error'\n    else:\n        return 'Error'\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return 0\n    elif power == 0:\n        return 1\n    else:\n        return base * power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    if base == 10:\n        return 0\n    \n    if power < 0:\n        power *= -1\n        base = 1 / base\n    \n    total = 0\n    while power:\n        power -= 1\n        total += base % 10\n        base /= 10\n    \n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base < 0 or power < 0:\n        raise ValueError(\"Incorrect values\")\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(i)**power for i in str(base))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    for digit in str(base):\n        power_sum += int(digit)**power\n    return power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return '{}^{} = {}'.format(base, -power, 0)\n    if power == 0:\n        return '{}^{} = {}'.format(base, 0, 1)\n    if power == 1:\n        return '{}^{} = {}'.format(base, 1, base)\n    return '{}^{} = {}'.format(base, 1, base) + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_power_sum = 0\n    if power < 0:\n        return base_power_sum\n    else:\n        for char in str(base**power):\n            base_power_sum += int(char)\n        return base_power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    if power < 0:\n        power_sum = 0\n    if power > 0:\n        power_sum = 1\n    for i in range(power):\n        power_sum = power_sum * base\n    return power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    def digits(n):\n        digits = []\n        while n:\n            digits.append(n % 10)\n            n /= 10\n        return digits\n        \n    def sum_digits(digits, power):\n        sum_digits = 0\n        for digit in digits:\n            sum_digits += digit ** power\n        return sum_digits\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\"', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = text1.split(\" \")\n    lst = []\n    for t in text2:\n        if t.startswith(\"\\\"\") and t.endswith(\"\\\"\"):\n            lst.append(t)\n    return lst\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = re.findall('\"',text1)\n    list1 = []\n    for i in text2:\n        list1.append(i)\n    for i in list1:\n        text1 = text1.replace(i,\" \")\n    return text1\ndef remove_single_quotation(text1):\n    '''\n    Write a function to remove quotation marks (\") from the given string.\n    '''\n    text2 = re.findall('\"',text1)\n    list1 = []\n    for i in text2:\n        list1.append(i)\n    for i in list1:\n        text1 = text1.replace(i,\"\")\n    return text1\ndef replace_space_quotation(text1):\n    '''\n    Write a function to replace quotation marks (\") with space from the given string.\n    '''\n    text2 = re.findall('\"',text1)\n    list1 = []\n    for i in text2:\n        list1.append(i)\n    for i in list1:\n        text1 = text1.replace(i,\" \")\n    return text1\ndef replace_single_quotation(text1):\n    '''\n    Write a function to replace quotation marks (\") with space from the given string.\n    '''\n    text2 = re.findall('\"',text1)\n    list1 = []\n    for i in text2:\n        list1.append(i)\n    for i in list1:\n        text1 = text1.replace(i,\" \")\n    return text1\ndef find_all_all_quotation(text1):\n    '''\n    Write a function to find all the quotation marks (\") from the given string.\n    '''\n    list1 = re.findall('\"',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    return list2\ndef find_all_all_single_quotation(text1):\n    '''\n    Write a function to find all the quotation marks (\") from the given string.\n    '''\n    list1 = re.findall('\\'',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    return list2\ndef remove_all_quotation(text1):\n    '''\n    Write a function to remove quotation marks (\") from the given string.\n    '''\n    list1 = re.findall('\"',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    for i in list2:\n        text1 = text1.replace(i,\"\")\n    return text1\ndef replace_all_quotation(text1):\n    '''\n    Write a function to replace quotation marks (\") with space from the given string.\n    '''\n    list1 = re.findall('\"',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    for i in list2:\n        text1 = text1.replace(i,\" \")\n    return text1\ndef count_all_quotation(text1):\n    '''\n    Write a function to find all the quotation marks (\") from the given string.\n    '''\n    list1 = re.findall('\"',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    return len(list2)\ndef count_all_single_quotation(text1):\n    '''\n    Write a function to find all the quotation marks (\") from the given string.\n    '''\n    list1 = re.findall('\\'',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    return len(list2)\ndef replace_all_single_quotation(text1):\n    '''\n    Write a function to replace quotation marks (\") with space from the given string.\n    '''\n    list1 = re.findall('\\'',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    for i in list2:\n        text1 = text1.replace(i,\" \")\n    return text1\ndef replace_all_all_quotation(text1):\n    '''\n    Write a function to replace quotation marks (\") with space from the given string.\n    '''\n    list1 = re.findall('\"',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    for i in list2:\n        text1 = text1.replace(i,\" \")\n    return text1\ndef replace_all_single_quotation(text1):\n    '''\n    Write a function to replace quotation marks (\") with space from the given string.\n    '''\n    list1 = re.findall('\\'',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    for i in list2:\n        text1 = text1.replace(i,\" \")\n    return text1\ndef replace_all_quotation(text1):\n    '''\n    Write a function to replace quotation marks (\") with space from the given string.\n    '''\n    list1 = re.findall('\"',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    for i in list2:\n        text1 = text1.replace(i,\" \")\n    return text1\ndef count_all_quotation(text1):\n    '''\n    Write a function to find all the quotation marks (\") from the given string.\n    '''\n    list1 = re.findall('\"',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    return len(list2)\ndef count_all_single_quotation(text1):\n    '''\n    Write a function to find all the quotation marks (\") from the given string.\n    '''\n    list1 = re.findall('\\'',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    return len(list2)\ndef replace_all_all_quotation(text1):\n    '''\n    Write a function to replace quotation marks (\") with space from the given string.\n    '''\n    list1 = re.findall('\"',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    for i in list2:\n        text1 = text1.replace(i,\" \")\n    return text1\ndef replace_all_single_quotation(text1):\n    '''\n    Write a function to replace quotation marks (\") with space from the given string.\n    '''\n    list1 = re.findall('\\'',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    for i in list2:\n        text1 = text1.replace(i,\" \")\n    return text1\ndef extract_all_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall('\"',text1)\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    for i in list2:\n        text1 = text1.replace(i,\" \")\n    return text1\ndef extract_quotation_from_file(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = re.findall('\"',text1)\n    list1 = []\n    for i in text2:\n        list1.append(i)\n    for i in list1:\n        text1 = text1.replace(i,\" \")\n    return text1\ndef extract_all_quotation_from_file(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = re.findall('\"',text1)\n    list1 = []\n    for i in text2:\n        list1.append(i)\n    for i in list1:\n        text"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if re.search('\"',text1) is None:\n        return []\n    result=[]\n    start = 0\n    #if the quotation mark is not followed by an odd number of quotation marks,\n    #then this quotation mark is the first of the string and hence we\n    #don't need to skip any char\n    while re.search('\"',text1[start:]) is not None:\n        end = re.search('\"',text1[start:]).start(0)\n        result.append(text1[start:end])\n        start = end+1\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    a = re.findall(r'\\\"(.*?)\\\"', text1)\n    return a\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_match=re.search(r'\\\"(.*?)\\\"',text1)\n    quotation_text=quotation_match.group(1)\n    return quotation_text\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1 == \"\":\n        return []\n    quotation_match = re.findall(r'\\\"(.*?)\\\"', text1)\n    #print quotation_match\n    return quotation_match\ndef extract_data(text1):\n    if text1 == \"\":\n        return []\n    data_match = re.findall(r'\\d+(?:[.]\\d+)?', text1)\n    return data_match\ndef extract_date(text1):\n    if text1 == \"\":\n        return []\n    date_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}', text1)\n    return date_match\ndef extract_month(text1):\n    if text1 == \"\":\n        return []\n    month_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}', text1)\n    return month_match\ndef extract_year(text1):\n    if text1 == \"\":\n        return []\n    year_match = re.findall(r'\\d{2,4}', text1)\n    return year_match\ndef extract_time(text1):\n    if text1 == \"\":\n        return []\n    time_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}[\\:]\\d{1,2}', text1)\n    return time_match\ndef extract_time_string(text1):\n    if text1 == \"\":\n        return []\n    time_string_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}[\\:]\\d{1,2}[\\:]\\d{1,2}', text1)\n    return time_string_match\ndef extract_time_string_date(text1):\n    if text1 == \"\":\n        return []\n    time_string_date_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}[\\:]\\d{1,2}[\\:]\\d{1,2}[\\:]\\d{1,2}', text1)\n    return time_string_date_match\ndef extract_number(text1):\n    if text1 == \"\":\n        return []\n    number_match = re.findall(r'\\d+(?:[.]\\d+)?', text1)\n    return number_match\ndef extract_time_string_day(text1):\n    if text1 == \"\":\n        return []\n    time_string_day_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}[\\:]\\d{1,2}[\\:]\\d{1,2}[\\:]\\d{1,2}', text1)\n    return time_string_day_match\ndef extract_time_string_year(text1):\n    if text1 == \"\":\n        return []\n    time_string_year_match = re.findall(r'\\d{2,4}', text1)\n    return time_string_year_match\ndef extract_number_string(text1):\n    if text1 == \"\":\n        return []\n    number_string_match = re.findall(r'\\d+(?:[.]\\d+)?', text1)\n    return number_string_match\ndef extract_num_string_year(text1):\n    if text1 == \"\":\n        return []\n    num_string_year_match = re.findall(r'\\d{2,4}', text1)\n    return num_string_year_match\ndef extract_num_string_month(text1):\n    if text1 == \"\":\n        return []\n    num_string_month_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}', text1)\n    return num_string_month_match\ndef extract_num_string_day(text1):\n    if text1 == \"\":\n        return []\n    num_string_day_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}', text1)\n    return num_string_day_match\ndef extract_num_string_hour(text1):\n    if text1 == \"\":\n        return []\n    num_string_hour_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}[\\:]\\d{1,2}', text1)\n    return num_string_hour_match\ndef extract_num_string_min(text1):\n    if text1 == \"\":\n        return []\n    num_string_min_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}[\\:]\\d{1,2}', text1)\n    return num_string_min_match\ndef extract_num_string_sec(text1):\n    if text1 == \"\":\n        return []\n    num_string_sec_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}[\\:]\\d{1,2}', text1)\n    return num_string_sec_match\ndef extract_num_string_datetime(text1):\n    if text1 == \"\":\n        return []\n    num_string_datetime_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}[\\:]\\d{1,2}[\\:]\\d{1,2}[\\:]\\d{1,2}', text1)\n    return num_string_datetime_match\ndef extract_num_string_date(text1):\n    if text1 == \"\":\n        return []\n    num_string_date_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}', text1)\n    return num_string_date_match\ndef extract_num_string_month(text1):\n    if text1 == \"\":\n        return []\n    num_string_month_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}', text1)\n    return num_string_month_match\ndef extract_num_string_year(text1):\n    if text1 == \"\":\n        return []\n    num_string_year_match = re.findall(r'\\d{2,4}', text1)\n    return num_string_year_match\ndef extract_num_string_time(text1):\n    if text1 == \"\":\n        return []\n    num_string_time_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}[\\:]\\d{1,2}', text1)\n    return num_string_time_match\ndef extract_num_string_day(text1):\n    if text1 == \"\":\n        return []\n    num_string_day_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}', text1)\n    return num_string_day_match\ndef extract_num_string_time_string(text1):\n    if text1 == \"\":\n        return []\n    num_string_time_string_match = re.findall(r'\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    index = text1.index('\"')\n    if index == 0:\n        return \"\"\n    elif index == len(text1)-1:\n        return \"\"\n    else:\n        return text1[index+1:text1.index('\"',index+1)]\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1=re.findall('\".*?\"',text1)\n    return list1\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_mark = re.compile('\"(.*?)\"')\n    quotation_value = quotation_mark.search(text1)\n    if quotation_value:\n        quotation_value = quotation_value.group()\n    else:\n        quotation_value = 'No quotations'\n    return quotation_value\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(0, len(test_tup)):\n        new_tup += (test_tup[i],)\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    list_of_numbers = [t_1 for t_1 in test_tup]\n    for t_1 in range(len(test_tup) - 1):\n        list_of_numbers[t_1] *= list_of_numbers[t_1 + 1]\n    return tuple(list_of_numbers)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup) - 1):\n        new_tup += (test_tup[i],)\n    new_tup += (test_tup[-1] * test_tup[-2],)\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Don't worry about runtime here; it's fine if you have a runtime of O(n)\n    for i in range(len(test_tup)):\n        if i == 0:\n            product_list = test_tup[i]\n        else:\n            product_list = multiply_elements(product_list)\n            product_list *= test_tup[i]\n    return tuple(product_list)\n    \ndef add_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_{i+1}.\n    '''\n    # Don't worry about runtime here; it's fine if you have a runtime of O(n)\n    for i in range(len(test_tup)):\n        if i == 0:\n            sum_list = test_tup[i]\n        else:\n            sum_list = add_elements(sum_list)\n            sum_list += test_tup[i]\n    return tuple(sum_list)\n    \ndef subtract_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i - t_{i+1}.\n    '''\n    # Don't worry about runtime here; it's fine if you have a runtime of O(n)\n    for i in range(len(test_tup)):\n        if i == 0:\n            sub_list = test_tup[i]\n        else:\n            sub_list = subtract_elements(sub_list)\n            sub_list -= test_tup[i]\n    return tuple(sub_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    elem_list = list(test_tup)\n    for i in xrange(len(elem_list) - 1):\n        elem_list[i] *= elem_list[i+1]\n    return tuple(elem_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    list_len = len(test_tup)\n    mult_list = []\n    for i in range(list_len):\n        mult_list.append(test_tup[i] * test_tup[i + 1])\n    return tuple(mult_list)\n    \ndef div_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i / t_{i+1}.\n    '''\n    list_len = len(test_tup)\n    div_list = []\n    for i in range(list_len):\n        div_list.append(test_tup[i] / test_tup[i + 1])\n    return tuple(div_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    return tuple(el*val for el, val in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # return tuple([i * j for i,j in zip(test_tup[1:], test_tup)])\n    # return tuple([test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1)])\n    # return tuple([test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1)])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if type(test_tup) == int:\n        return test_tup\n    elif type(test_tup) == tuple:\n        return tuple([test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1)])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if test_tup is None or len(test_tup) == 0:\n        return None\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return list(map(add,lst1,lst2))\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    solution=[]\n    for i in range(len(lst1)):\n        solution.append(lst1[i]+lst2[i])\n    return solution\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if not (isinstance(lst1,list) and isinstance(lst2,list)):\n        raise TypeError('Both inputs must be lists')\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n    \n    \ndef test_sum_list():\n    assert sum_list([1, 2, 3, 4], [5, 6, 7, 8]) == [6, 8, 10, 12]\n    assert sum_list([2, 3, 4, 5], [6, 7, 8, 9]) == [8, 9, 11, 13]\n    assert sum_list([3, 2, 4, 5], [6, 7, 8, 9]) == [9, 10, 12, 15]\n    \n    \ndef max_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1,b_1,...,a_n,b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i])\n        lst.append(lst2[i])\n    lst.sort()\n    return lst[-1::-2]\n    \n    \ndef test_max_list():\n    assert max_list([1, 2, 3, 4], [5, 6, 7, 8]) == [6, 7, 8, 8]\n    assert max_list([1, 2, 3, 4], [5, 6, 7, 9]) == [7, 9, 9, 9]\n    assert max_list([3, 2, 4, 5], [6, 7, 8, 9]) == [9, 9, 9, 9]\n    \n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst=[]\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i] + lst2[i])\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst2[i] = lst1[i] + lst2[i]\n    return lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_result = []\n    for i in range(len(lst1)):\n        lst_result.append(lst1[i] + lst2[i])\n    return lst_result\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # turn the list into a set (of unique values)\n    s = set(nums)\n    # loop through the set to create a list of unique elements with consecutive duplicates removed\n    for i in s:\n        if nums.count(i) > 1:\n            nums.remove(i)\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # return [list(group) for k, group in groupby(nums)]\n    return [list(g) for k, g in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for k, g in groupby(nums):\n        res.append(list(g))\n    return res\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k,g in groupby(nums):\n        result.append(list(g))\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    r=[]\n    for i,j in groupby(nums):\n        r.extend(list(j))\n    return r\ndef twoSum(nums, target):\n    '''\n    You are given an array of integers and an integer target.\n    Return the indices of the two numbers such that they add up to the target.\n    '''\n    for i,j in enumerate(nums):\n        if target - j in nums:\n            if i!= nums.index(target - j):\n                return [i,nums.index(target - j)]\n            else:\n                return [i,nums.index(target - j,i+1)]\n    return [-1,-1]\ndef reverseVowels(s):\n    '''\n    Given a string s, reverse the vowels of it.\n    '''\n    if len(s) <= 1:\n        return s\n    r = []\n    for i in s:\n        if i.lower() in 'aeiou':\n            r.insert(0,i)\n    for i in s:\n        if i.lower() not in 'aeiou':\n            r.append(i)\n    return ''.join(r)\ndef rotateString(s, n):\n    '''\n    Given a string s and an integer n, rotate the string n steps and return the string.\n    '''\n    if n == 0:\n        return s\n    r = []\n    for i in range(n):\n        r.insert(0,s[i])\n    return ''.join(r)\ndef maxSlidingWindow(nums, k):\n    '''\n    Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. \n    You can only see the k numbers in the window. Each time the sliding window moves right by one position.\n    Return the max sliding window.\n    '''\n    r = []\n    for i in range(len(nums) - k + 1):\n        r.append(max(nums[i:i+k]))\n    return r\ndef largestNumber(s):\n    '''\n    Given a string, return the largest number that can be formed by adding up the characters of the string.\n    '''\n    r = []\n    for i,j in groupby(s):\n        r.append(str(len(list(j))))\n    return ''.join(r)\ndef findAndReplacePattern(words, pattern):\n    '''\n    Given a list of words and a pattern, find all anagrams of the pattern in each of the words.\n    '''\n    r = []\n    for i in words:\n        if len(i) == len(pattern):\n            if sorted(i) == sorted(pattern):\n                r.append(i)\n    return r\ndef findNumbers(s):\n    '''\n    Finds all the numbers in a string.\n    '''\n    r = []\n    for i in s:\n        if i.isdigit():\n            r.append(int(i))\n    return r\ndef findString(s, ch):\n    '''\n    Finds the position of the first occurrence of the character ch in the string s.\n    '''\n    r = []\n    for i,j in enumerate(s):\n        if j == ch:\n            r.append(i)\n    return r\ndef lengthOfLastWord(s):\n    '''\n    Given a string s consists of upper/lower-case alphabets and empty space characters'', return the length of last word in the string.\n    If the last word does not exist, return 0.\n    '''\n    r = []\n    for i,j in enumerate(s):\n        if j =='':\n            if i == len(s) - 1:\n                return len(r)\n            else:\n                r = []\n        else:\n            r.append(j)\n    if not r:\n        return 0\n    return len(r)\ndef isRotation(s1, s2):\n    '''\n    Given two strings s1 and s2, write a function to determine if s2 is a rotation of s1.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    return sorted(s1) == sorted(s2)\ndef isToeplitzMatrix(matrix):\n    '''\n    Given a matrix, check whether the matrix is Toeplitz matrix.\n    '''\n    r = len(matrix)\n    c = len(matrix[0])\n    for i in range(r-1):\n        for j in range(c-1):\n            if matrix[i][j]!= matrix[i+1][j+1]:\n                return False\n    return True\ndef minimumSwaps(arr):\n    '''\n    Given a non-empty array of integers, return the minimum number of swaps required to sort the array in ascending order.\n    '''\n    if len(arr) <= 1:\n        return 0\n    r = []\n    for i in range(len(arr)):\n        r.append(arr.index(i))\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= r[i]:\n            count += 1\n            a = arr.pop(i)\n            arr.insert(r[i], a)\n    return count\ndef isValid(s):\n    '''\n    Given a string s, partition s such that every substring of the partition is a palindrome.\n    Return true if it can be done, or false if it cannot.\n    '''\n    r = []\n    for i,j in groupby(s):\n        r.append(list(j))\n    for i in r:\n        if i[0]!= i[-1]:\n            return False\n    return True\ndef isInterleave(s1, s2, s3):\n    '''\n    Given three strings s1, s2, and s3, find whether s3 is formed by the interleaving of s1 and s2.\n    '''\n    if len(s1) + len(s2)!= len(s3):\n        return False\n    r = [[0 for i in range(len(s1) + 1)] for j in range(len(s2) + 1)]\n    for i in range(len(s1) + 1):\n        for j in range(len(s2) + 1):\n            if i == 0 and j == 0:\n                r[i][j] = True\n            elif i == 0:\n                r[i][j] = r[i][j-1] and s2[j-1] == s3[i+j-1]\n            elif j == 0:\n                r[i][j] = r[i-1][j] and s1[i-1] == s3[i+j-1]\n            else:\n                r[i][j] = (r[i-1][j] and s1[i-1] == s3[i+j-1]) or (r[i][j-1] and s2[j-1] == s3[i+j-1])\n    return r[-1][-1]\ndef uniqueValues(grid):\n    '''\n    Given a 2D grid of integers, how many unique integers are there?\n    '''\n    r = []\n    for i in grid:\n        for j in i:\n            if j not in r:\n                r.append(j)\n    return len(r)\ndef isScramble(s1, s2):\n    '''\n    Given two strings s1 and s2, check whether s2 is a scrambled version of s1.\n    '''\n    r = [[0 for i in range(len(s1) + 1)] for j in range(len(s2) + 1)]\n    for i in range(len(s1) + 1):\n        for j in range(len(s2) + 1):\n            if i == 0 and j == 0:\n                r[i][j] = True\n            elif i == 0:\n                r[i][j] = r[i][j-1] and s2[j-1] == s1[i]\n            elif j == 0:\n                r[i][j] = r[i-1][j] and s1[i-1] == s2[j]\n            else:\n                r[i][j] = (r"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    list_length = len(nums)\n    i = 0\n    while i < list_length:\n        if i == 0:\n            i += 1\n            continue\n        if nums[i] == nums[i-1]:\n            del nums[i]\n            list_length -= 1\n        else:\n            i += 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for i,k in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped = [(k,len(list(g))) for k,g in groupby(nums)]\n    count = 0\n    for i in range(len(grouped)):\n        if grouped[i][1] > 1:\n            count += 1\n            grouped[i] = grouped[i][0]\n        else:\n            grouped[i] = grouped[i][0]\n    return count\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k,g in groupby(nums)]\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 + math.pi * r**2 * (h/2)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r = int(r)\n    h = int(h)\n    pi = 3.14159265\n    rho = int(r)\n    if rho == 1:\n        return pi*(r*2)\n    elif rho > 1:\n        if r == rho:\n            return r*h\n        elif r > rho:\n            return r*h + math.sqrt((r**2 - rho**2)*(r**2 - rho**2) + (rho**2)*(h**2))\n    else:\n        print \"The radius is less than 1\"\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    rad=math.pi*r\n    area=math.pi*(r**2-r*math.sqrt(r**2-h**2))\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2+r*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r*r+(math.pi/3)*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*r*r*h/3\n    return v\ndef cone_surfacearea(r,h):\n    '''\n    Write a function that computes the surface area of a cone given radius r and height h.\n    '''\n    s=math.pi*r*r+math.pi*r*r*h\n    return s\ndef cone_volume(r,h):\n    '''\n    Write a function that computes the volum"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = 1/3*math.pi*r**2*h\n    return A\ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w, and height h.\n    '''\n    A = l*w*h\n    return A\ndef lateralsurface_prism(b,h):\n    '''\n    Write a function to find the lateral surface area of a prism given base b and the height h.\n    '''\n    A = 1/3*b*h\n    return A\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A = 2*math.pi*r*h\n    return A\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    A = 4*math.pi*r**2\n    return A\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #return 2*math.pi*(r**2+r*math.sqrt(r**2+h**2))\n    #return math.pi*(r**2+r*math.sqrt(r**2+h**2))\n    return math.pi*(r**2+(r*math.sqrt(r**2+h**2)))\ndef area_sphere(r):\n    return math.pi*(r**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi*r**2)*(math.sqrt(r**2+h**2))\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_paralell(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallel given radius r and the height h.\n    '''\n    return math.pi*r*h\ndef lateralsurface_orthogonal(r,h):\n    '''\n    Write a function to find the lateral surface area of an orthogonal given radius r and the height h.\n    '''\n    return math.pi*r*h\ndef lateralsurface_rectangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given radius r and the height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given radius r and the height h.\n    '''\n    return math.pi*r*h\ndef lateralsurface_trapezium(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangular prism given radius r and the height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given radius r.\n    '''\n    return math.pi*r**2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*r**2\ndef lateralsurface_pyramid(r,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given radius r and height h.\n    '''\n    return 2*math.pi*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    return (math.pi*r**2)*(math.sqrt(r**2+h**2))\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_paralell(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallel given radius r and height h.\n    '''\n    return math.pi*r*h\ndef lateralsurface_orthogonal(r,h):\n    '''\n    Write a function to find the lateral surface area of an orthogonal given radius r and height h.\n    '''\n    return math.pi*r*h\ndef lateralsurface_rectangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given radius r and height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given radius r and height h.\n    '''\n    return math.pi*r*h\ndef lateralsurface_trapezium(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangular prism given radius r and height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given radius r.\n    '''\n    return math.pi*r**2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*r**2\ndef lateralsurface_pyramid(r,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given radius r and height h.\n    '''\n    return 2*math.pi*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    return (math.pi*r**2)*(math.sqrt(r**2+h**2))\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_paralell(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallel given radius r and height h.\n    '''\n    return math.pi*r*h\ndef lateralsurface_orthogonal(r,h):\n    '''\n    Write a function to find the lateral surface area of an orthogonal given radius r and height h.\n    '''\n    return math.pi*r*h\ndef lateralsurface_rectangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given radius r and height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given radius r and height h.\n    '''\n    return math.pi*r*h\ndef lateralsurface_trapezium(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangular prism given radius r and height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given radius r.\n    '''\n    return math.pi*r**2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*r**2\ndef lateralsurface_pyramid(r,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given radius r and height h.\n    '''\n    return 2*math.pi*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    return (math.pi*r**2)*(math.sqrt(r**2+h**2))\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_paralell(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallel given radius r and height h.\n    '''\n    return math.pi*r*h\ndef lateralsurface_orthogonal(r,h):\n    '''\n    Write a function to find the lateral surface area of an orthogonal given radius r and height h.\n    '''\n    return math.pi*r*h\ndef lateralsurface_rectangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given radius r and height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given radius r and height h.\n    '''\n    return math.pi*r*h\ndef lateralsurface_trapezium(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangular prism given radius r and height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_circle(r):\n    ''"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=math.pi*r**2\n    b=math.pi*r**2*h\n    s=a+b\n    return s\ndef lateral_surface_rect(w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given width w and height h.\n    '''\n    a=w*h\n    return a\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and height h.\n    '''\n    a=math.pi*r**2*h\n    return a\ndef volume_rect(w,h):\n    '''\n    Write a function to find the volume of a rectangle given width w and height h.\n    '''\n    a=w*h\n    return a\ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    a=2*math.pi*r**2\n    b=math.pi*r**2*h\n    s=a+b\n    return s\ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    a=4*math.pi*r**2\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and height h.\n    '''\n    a=math.pi*r**2*h\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    a=4*math.pi*r**2/3\n    return a\ndef volume_torus(r1,r2):\n    '''\n    Write a function to find the volume of a torus given radius r1 and radius r2.\n    '''\n    a=math.pi*r1**2*r2\n    return a\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and a cylinder given radius r and height h.\n    '''\n    a=math.pi*r**2*h\n    b=math.pi*r**2*h/2\n    s=a+b\n    return s\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone and a sphere given radius r and height h.\n    '''\n    a=math.pi*r**2*h\n    b=math.pi*r**2*h/4\n    s=a+b\n    return s\ndef volume_rect_cylinder(w,h):\n    '''\n    Write a function to find the volume of a rectangle and a cylinder given width w and height h.\n    '''\n    a=w*h\n    b=w*h/2\n    s=a+b\n    return s\ndef volume_rect_sphere(w,h):\n    '''\n    Write a function to find the volume of a rectangle and a sphere given width w and height h.\n    '''\n    a=w*h\n    b=w*h/4\n    s=a+b\n    return s\ndef volume_rect_torus(w,h):\n    '''\n    Write a function to find the volume of a rectangle and a torus given width w and height h.\n    '''\n    a=w*h\n    b=w*h/2\n    s=a+b\n    return s\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere and a cylinder given radius r and height h.\n    '''\n    a=4*math.pi*r**2*h\n    b=4*math.pi*r**2*h/2\n    s=a+b\n    return s\ndef volume_sphere_rect(r,w,h):\n    '''\n    Write a function to find the volume of a sphere and a rectangle given radius r and height h.\n    '''\n    a=4*math.pi*r**2*h\n    b=math.pi*r**2*h/2\n    s=a+b\n    return s\ndef volume_sphere_torus(r,r1):\n    '''\n    Write a function to find the volume of a sphere and a torus given radius r and radius r1.\n    '''\n    a=4*math.pi*r**2\n    b=4*math.pi*r**2/4\n    s=a+b\n    return s\ndef volume_torus_cylinder(r1,r2,h):\n    '''\n    Write a function to find the volume of a torus and a cylinder given radius r1, radius r2, and height h.\n    '''\n    a=math.pi*r1**2*r2*h\n    b=math.pi*r1**2*r2*h/2\n    s=a+b\n    return s\ndef volume_torus_rect(r1,r2,w,h):\n    '''\n    Write a function to find the volume of a torus and a rectangle given radius r1, radius r2, and height h.\n    '''\n    a=math.pi*r1**2*r2*h\n    b=math.pi*r1**2*r2*h/2\n    s=a+b\n    return s\ndef volume_torus_rect_cylinder(r1,r2,w,h):\n    '''\n    Write a function to find the volume of a torus and a rectuangle and cylinder given radius r1, radius r2, and height h.\n    '''\n    a=math.pi*r1**2*r2*h\n    b=math.pi*r1**2*r2*h/2\n    s=a+b\n    return s\ndef volume_cylinder_rect(r,h,w):\n    '''\n    Write a function to find the volume of a cylinder and a rectangle given radius r, height h, and width w.\n    '''\n    a=math.pi*r**2*h\n    b=math.pi*r**2*h/2\n    s=a+b\n    return s\ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder and a sphere given radius r and height h.\n    '''\n    a=math.pi*r**2*h\n    b=math.pi*r**2*h/4\n    s=a+b\n    return s\ndef volume_rect_torus(w,h,r1,r2):\n    '''\n    Write a function to find the volume of a rectangle and a torus given width w, height h, and radius r1 and radius r2.\n    '''\n    a=w*h\n    b=w*h/2\n    s=a+b\n    return s\ndef volume_rect_sphere(w,h,r):\n    '''\n    Write a function to find the volume of a rectangle and a sphere given width w, height h, and radius r.\n    '''\n    a=w*h\n    b=w*h/4\n    s=a+b\n    return s\ndef volume_rect_cylinder(w,h,r):\n    '''\n    Write a function to find the volume of a rectangle and a cylinder given width w, height h, and radius r.\n    '''\n    a=w*h\n    b=w*h/2\n    s=a+b\n    return s\ndef volume_sphere_rect(r,w,h):\n    '''\n    Write a function to find the volume of a sphere and a rectangle given radius r, width w, and height h.\n    '''\n    a=4*math.pi*r**2*h\n    b=math.pi*r**2*h/2\n    s=a+b\n    return s\ndef volume_sphere_torus(r,r1):\n    '''\n    Write a function to find the volume of a sphere and a torus given radius r and radius r1.\n    '''\n    a=4*math.pi*r**2\n    b"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=3.1416*(r**2)\n    b=3.1416*(r**2)*(math.sin(3.1416*h))\n    c=(r*h)*(2+math.sin(3.1416*h))\n    return a+b+c\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"\\.\", \":\", text)\n    text = re.sub(r\"\\, \", \":\", text)\n    text = re.sub(r\"\\s\", \":\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[|\\s|,]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #[.*$]+\n    return re.sub(r'[\\s,\\.]','',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\,', ':', text)\n    text = re.sub(r'\\.+', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ ]',':',text)\n    text = re.sub(r',','',text)\n    text = re.sub(r'[.]','',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    string = re.sub(r'[^\\w\\s,.]','',text)\n    return string\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(',', ':')\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #space_dots = re.sub(r'(\\s|\\.|,|\\:)', r':', text)\n    space_dots = re.sub(r'[,\\.:]', r':', text)\n    return space_dots\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start, end = 0, len(A) - 1\n    while start + 1 < end:\n        mid = (start + end) / 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            start = mid\n        else:\n            end = mid\n    if A[start] == x:\n        return start\n    if A[end] == x:\n        return end\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x < A[0]:\n        return -1\n    i = 0\n    while i < len(A):\n        if A[i] == x:\n            return i\n        elif A[i] < x:\n            i += 1\n        else:\n            break\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    left = 0\n    right = n - 1\n    res = -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo, hi = 0, len(A) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo) // 2\n        if A[mid] < x:\n            lo = mid + 1\n        elif A[mid] > x:\n            hi = mid - 1\n        else:\n            hi = mid - 1\n    return lo\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    #lower_bound\n    start = 0\n    end = len(A) - 1\n    while end >= 0:\n        middle = (start + end) / 2\n        if A[middle] == x:\n            return middle\n        elif A[middle] < x:\n            start = middle + 1\n        else:\n            end = middle - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return None\n    start = 0\n    end = len(A) - 1\n    while start < end:\n        middle = (start + end) // 2\n        if A[middle] == x:\n            return middle\n        elif A[middle] < x:\n            start = middle + 1\n        else:\n            end = middle - 1\n    return start if A[start] == x else None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return bisect.bisect_left(A, x)\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    if n == 0:\n        return -1\n    start, end = 0, n\n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] < x:\n            start = mid + 1\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                end = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def find_first_occurrence_recursive(A, x, start, end):\n        if start == end:\n            if A[start] == x:\n                return start\n            else:\n                return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    length = len(arr)\n    if(length<1):\n        return 0\n    dp = [1] * length\n    for i in range(1, length):\n        dp[i] = arr[i-1] * dp[i-1]\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + arr[i]\n    product = 1\n    for i in range(n):\n        product = product * arr[i]\n        for j in range(i + 1, n + 1):\n            if (prefix[j] - prefix[i] == product):\n                return True\n    return False\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    res = arr[0]*arr[1]\n    if n == 2:\n        return res\n    arr.sort()\n    small = arr[0]\n    big = arr[n-1]\n    return sum(big * arr[i] * arr[n-i-2] for i in range(n//2))\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    m = len(arr)\n    table = [[0]*m for i in range(m)]\n    for i in range(m):\n        table[i][i] = arr[i]\n    for l in range(2,m+1):\n        for i in range(m-l+1):\n            j = i + l - 1\n            table[i][j] = arr[i] * arr[j]\n            if l > 2:\n                for k in range(i+1,j):\n                    table[i][j] = table[i][j] + table[i][k]*table[k][j]\n    return table[0][m-1]\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l = len(arr)\n    sums = [0] * l\n    prod = 1\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    #print dp\n    for i in range(2,n+1):\n        for j in range(n-i+1):\n            dp[j][j+i-1] = arr[j]*arr[j+i-1]\n    #print dp\n    for i in range(3,n+1):\n        for j in range(n-i+1):\n            dp[j][j+i-1] = dp[j][j+i-2]*arr[j+i-1]\n    #print dp\n    for i in range(4,n+1):\n        for j in range(n-i+1):\n            dp[j][j+i-1] = (dp[j][j+i-2]*arr[j+i-1])+dp[j+1][j+i-3]\n    #print dp\n    return dp[0][n-1]\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def arr_Prod(arr):\n        prod = 1\n        for i in arr:\n            prod *= i\n        return prod\n    \n    def helper(left, right, arr, prod):\n        if left >= right:\n            return 0\n        elif right - left == 1:\n            return prod*arr[left]\n        else:\n            mid = (left + right)//2\n            return helper(left, mid, arr, prod*arr_Prod(arr[left:right])) + helper(mid, right, arr, prod*arr_Prod(arr[left:mid])*arr_Prod(arr[mid:right]))\n    \n    return helper(0, len(arr), arr, 1)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr.sort()\n    result = 1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            result *= arr[j]\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    temp_sum = 0\n    for i in range(n):\n        for j in range(i,n):\n            temp_sum = temp_sum + arr[j] * (arr[j]*arr[j]+arr[j]+1) / 2\n    return temp_sum\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n & 1) ^ (n & 2) ^ (n & 4) ^ (n & 8)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    s = str(bin(n))\n    bit = len(s) - 2\n    s = s[bit] + s[1:bit] + s[0] + s[bit+1:]\n    return int(s, 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ~(1 << n)\n    return n ^ mask\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # converting decimal to binary and then getting rid of first and last bits\n    binary = bin(n)[2:]\n    binary = binary[:-1]+str(int(binary[-1])^1)\n    return int(binary,2)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    n = n ^ (n >> 1)\n    n = (n & 0x55555555) + ((n & 2) << 1)\n    n = (n & 0x33333333) + ((n & 2) << 2)\n    n = (n & 0x0f0f0f0f) + ((n & 2) << 4)\n    n = (n & 0xcccccccc) + ((n & 2) << 8)\n    n = (n & 0xf0f0f0f0) + ((n & 2) << 12)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = ~n & 0xFFFFFFFFFFFFFFF\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    return int(bin(n)[2:len(bin(n))-2]+str(not (int(bin(n)[0]) ^ int(bin(n)[len(bin(n))-1])))+bin(n)[len(bin(n))-2:],2)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = (n & 0x55555555) + ((n & 0xAAAAAAAA) >> 1)\n    return x  \n    \ndef flip_bits(n):  \n    '''\n    Write a python function to toggel bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n & 0x55555555)  \n    \ndef add_bits(a, b):\n    '''\n    Write a python function to add two binary numbers. https://www.geeksforgeeks.org/python-add-binary-numbers/\n    '''\n    while b!= 0:\n        c = a & b\n        a = a ^ b\n        b = c << 1\n    return a  \n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return set_middle_bits(n / 2)\n    else:\n        return n ^ (n-1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n << 1)) & 0x55555555\n    n = (n ^ (n >> 1)) & 0x33333333\n    n = (n ^ (n << 2)) & 0x33333333\n    n = (n ^ (n >> 2)) & 0x33333333\n    n = (n ^ (n << 3)) & 0x33333333\n    n = (n ^ (n >> 3)) & 0x33333333\n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.insert(bisect.bisect_left(a, x), x)\n    return a\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #return a.insert(bisect.bisect_left(a, x), x)\n    i = bisect.bisect_left(a, x)\n    return i if i == len(a) or a[i]!= x else i-1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i] > x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0 or a[-1] <= x:\n        return len(a)\n    \n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= x:\n        i -= 1\n    return i\n    \ndef left_insertion_recursive(a, x):\n    if a == None or len(a) == 0:\n        return 0\n    return left_insertion_recursive(a[:len(a) - 1], x) + 1 if a[len(a) - 1] >= x else left_insertion_recursive(a[:len(a) - 1], x)\n    \ndef left_insertion_binary(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None or len(a) == 0:\n        return 0\n    if a[len(a) - 1] > x:\n        return 0\n    if a[len(a) - 1] == x:\n        return len(a) - 1\n    start = 0\n    end = len(a) - 1\n    while start + 1 < end:\n        mid = (start + end) / 2\n        if a[mid] == x:\n            return mid\n        if a[mid] > x:\n            end = mid\n        else:\n            start = mid\n    return left_insertion_binary(a[:start + 1], x)\n    \ndef left_insertion_binary_recursive(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None or len(a) == 0:\n        return 0\n    if a[len(a) - 1] > x:\n        return 0\n    if a[len(a) - 1] == x:\n        return len(a) - 1\n    if a[len(a) - 1] < x:\n        return left_insertion_binary_recursive(a[:len(a) - 1], x) + 1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None or len(a) == 0:\n        return 0\n    if a[0] >= x:\n        return 0\n    \n    i = 0\n    while i < len(a) and a[i] < x:\n        i += 1\n    return i\n    \ndef right_insertion_recursive(a, x):\n    if a == None or len(a) == 0:\n        return 0\n    return right_insertion_recursive(a[1:], x) + 1 if a[0] < x else 0\n    \ndef right_insertion_binary(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None or len(a) == 0:\n        return 0\n    if a[0] >= x:\n        return 0\n    if a[0] == x:\n        return 0\n    if a[0] < x:\n        return right_insertion_binary(a[1:], x) + 1\n    \ndef right_insertion_binary_recursive(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None or len(a) == 0:\n        return 0\n    if a[0] >= x:\n        return 0\n    if a[0] == x:\n        return 0\n    if a[0] < x:\n        return right_insertion_binary_recursive(a[1:], x) + 1\n    \ndef right_insertion_pointer(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None or len(a) == 0:\n        return 0\n    if a[0] >= x:\n        return 0\n    if a[0] == x:\n        return 0\n    if a[0] < x:\n        right_insertion_pointer(a[1:], x) + 1\n    \ndef right_insertion_pointer_recursive(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None or len(a) == 0:\n        return 0\n    if a[0] >= x:\n        return 0\n    if a[0] == x:\n        return 0\n    if a[0] < x:\n        right_insertion_pointer_recursive(a[1:], x) + 1\n    \ndef left_rotation(a, d):\n    '''\n    Write a function to rotate an array to the left by d elements\n    '''\n    if a == None or len(a) == 0 or d == 0:\n        return a\n    d = d % len(a)\n    return a[d:] + a[:d]\n    \ndef right_rotation(a, d):\n    '''\n    Write a function to rotate an array to the right by d elements\n    '''\n    if a == None or len(a) == 0 or d == 0:\n        return a\n    d = d % len(a)\n    return a[-d:] + a[:-d]\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # insert(a, x) = [a[i] for i in range(0, len(a)) if a[i] > x] + [x] + [a[i] for i in range(len(a), i)]\n    # Note: bisect module returns the index of the element if it exists else returns the index+1\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        a.insert(0, x)\n    elif a[i-1] < x:\n        a.insert(i, x)\n    return a\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif a[index] == x:\n        return index\n    else:\n        return index + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        a.append(x)\n        return\n    if a[0] > x:\n        a.insert(0, x)\n        return\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        a.append(x)\n        return\n    else:\n        a.insert(index, x)\n        return\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #a.sort()\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] > x:\n        return i\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    if idx == 0:\n        return idx\n    elif a[idx - 1] == x:\n        return idx\n    else:\n        return idx - 1\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    m = re.match(regex, string)\n    if m:\n        print \"String starts with vowel\"\n    else:\n        print \"String does not start with vowel\"\n        \ncheck_str(\"h\""
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string) is not None\nstring = input()\nprint(check_str(string))"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string) is not None:\n        print(\"String starts with vowel\")\n    else:\n        print(\"String does not starts with vowel\")\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    print re.match(regex, string)\ndef change_case(string):\n    '''\n    Write a function that takes in a string and returns the same string with each word's first letter\n    changed to upper case, or to lower case, depending on the case of the first letter.\n    '''\n    return string.title()\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome.\n    '''\n    return string == string[::-1]\ndef number_to_binary(num):\n    '''\n    Write a function that takes in a non-negative integer and returns the same integer in a string\n    representation of the number in binary.\n    '''\n    return '{0:b}'.format(num)\ndef binary_to_number(binary):\n    '''\n    Write a function that takes in a string representation of a number in binary and returns the \n    same number in decimal.\n    '''\n    return int(binary, 2)\ndef check_anagram(string1, string2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams,\n    and False otherwise.\n    '''\n    return sorted(string1) == sorted(string2)\ndef first_non_repeating_char(string):\n    '''\n    Write a function that takes in a string and returns the first non-repeating character in the string.\n    '''\n    for i in range(len(string)):\n        if string.count(string[i]) == 1:\n            return string[i]\ndef non_repeating_first_char(string):\n    '''\n    Write a function that takes in a string and returns the first non-repeating character in the string.\n    '''\n    letters = {}\n    for i in string:\n        if i not in letters:\n            letters[i] = 0\n        letters[i] += 1\n    for i in string:\n        if letters[i] == 1:\n            return i\ndef non_repeating_first_char_in_word(string):\n    '''\n    Write a function that takes in a string and returns the first non-repeating character in the string.\n    '''\n    letters = {}\n    for i in string:\n        if i not in letters:\n            letters[i] = 0\n        letters[i] += 1\n    for i in string:\n        if letters[i] == 1:\n            return i\ndef string_compression(string):\n    '''\n    Write a function that takes in a string and returns the compressed version of the string.\n    '''\n    counter = 0\n    current_char = string[counter]\n    compressed_string = ''\n    for i in string:\n        if i!= current_char:\n            compressed_string += current_char + str(counter + 1)\n            counter = 0\n            current_char = string[counter]\n        counter += 1\n    compressed_string += current_char + str(counter + 1)\n    return compressed_string\ndef rotate_left(string, n):\n    '''\n    Write a function that takes in a string and an integer and returns the string rotated to the left by \n    that many characters.\n    '''\n    return string[n:] + string[:n]\ndef rotate_right(string, n):\n    '''\n    Write a function that takes in a string and an integer and returns the string rotated to the right by \n    that many characters.\n    '''\n    return string[-n:] + string[:-n]\ndef max_product(arr):\n    '''\n    Write a function that takes in an array of integers and returns the maximum product that can be\n    obtained by multiplying any 3 integers in the array.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                max_product = max(max_product, arr[i] * arr[j] * arr[k])\n    return max_product\ndef find_duplicates(arr):\n    '''\n    Write a function that takes in an array of integers and returns an array of all the elements in the array \n    that occur more than once.\n    '''\n    count = {}\n    duplicates = []\n    for i in arr:\n        if i not in count:\n            count[i] = 0\n        count[i] += 1\n    for i in count:\n        if count[i] > 1:\n            duplicates.append(i)\n    return duplicates\ndef palindrome_permutation(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome\n    and False otherwise.\n    '''\n    return sum(string.count(i) % 2 for i in set(string)) < 2\ndef rotate_matrix(matrix):\n    '''\n    Write a function that takes in a 2D array of integers and returns a new array where the rows of the \n    input array have been reversed.\n    '''\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append(matrix[i][::-1])\n    return new_matrix\ndef add_binary(string1, string2):\n    '''\n    Write a function that takes in two binary strings and returns their sum in binary.\n    '''\n    return bin(int(string1, 2) + int(string2, 2))[2:]\ndef add_binary_decimal(string1, string2):\n    '''\n    Write a function that takes in two binary strings and returns the sum of the corresponding decimal \n    numbers for each string.\n    '''\n    return str(int(string1, 2) + int(string2, 2))\ndef print_matrix(matrix):\n    '''\n    Write a function that takes in a 2D array of integers and prints it out.\n    '''\n    for i in matrix:\n        for j in i:\n            print j,\n        print\ndef choose_best_stock(prices):\n    '''\n    Write a function that takes in a list of prices for a stock, and returns the index of the stock \n    with the highest price.\n    '''\n    max_price = 0\n    max_index = 0\n    for i in range(len(prices)):\n        if prices[i] > max_price:\n            max_price = prices[i]\n            max_index = i\n    return max_index\ndef find_smallest_positive(arr):\n    '''\n    Write a function that takes in a list of positive integers and returns the smallest positive integer\n    in the list.\n    '''\n    arr.sort()\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] > 0:\n            return arr[i]\ndef find_duplicates_in_sorted_arr(arr):\n    '''\n    Write a function that takes in a sorted array of integers and returns an array of all the duplicate values \n    in the array.\n    '''\n    count = {}\n    duplicates = []\n    for i in arr:\n        if i not in count:\n            count[i] = 0\n        count[i] += 1\n    for i in count:\n        if count[i] > 1:\n            duplicates.append(i)\n    return duplicates\ndef is_abecedarian(string):\n    '''\n    Write a function that takes in a string and returns True if the string is abecedarian and False otherwise.\n    An abecedarian string is one that consists of only letters that increase from left to right.\n    '''\n    for i in range(len(string) - 1):\n        if ord(string[i]) > ord(string[i + 1]):\n            return False\n    return True\ndef is_abecedarian_in_reverse(string):\n    '''\n    Write a function that takes in a string and returns True if the string is abecedarian in reverse and\n    False otherwise. An abecedarian string is one that consists of only letters that increase from right to left.\n    '''\n    for i in range(len(string) - 1):"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string)\n    if result:\n        print \"String starts with a vowel\"\n    else:\n        print \"String starts with a consonant\"\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string)\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        print \"Match\"\n    else: \n        print \"Not a match\"\ncheck_str(\"apple\")\ncheck_str(\"app\")\ncheck_str(\"apple1234\")\ncheck_str(\"appl\")\ncheck_str(\"appl1234\")\ncheck_str(\"apple12\")\ncheck_str(\"apple1\")\ncheck_str(\"appl12\")\ncheck_str(\"apple\")\ncheck_str(\"appl12\")\ncheck_str(\"appl1\")\ncheck_str(\"apple1\")\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex,string)\n    if result:\n        print'regex check passed'\n    else:\n        print'regex check failed'\nif __name__ == '__main__':\n    string = 'kevin'\n    check_str(string)"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    x = re.match(regex,string)\n    return x\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # pass \n    if re.search(regex, string): \n        print \"String starts with a vowel\"\n    else: \n        print \"String does not starts with a vowel\"\ncheck_str('J')\ncheck_str('f')\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1/float(1-n)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return geometric_sum(n - 1) * n\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return 1 / (n-1) + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1/n) * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    return 1/n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Base case: 1\n    if n < 2:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 2:\n        return 1\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    assert isinstance(n, int) or isinstance(n, float), 'Argument must be an integer'\n    assert n > 0, 'Argument must be greater than 0'\n    if n <= 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Geometric Sum\n    if n == 0:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 if n == 1 else n * geometric_sum(n - 1)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k=math.ceil(math.log10(n+1))\n    for i in range(1,10**(k-1)):\n        if n<=i*(i+1)*(2*i+1)/6:\n            return int((i-1)*(i+1)*(2*i+1)/6)\n    return -1\n    \ndef sorted_list(list):\n    '''\n    Write a python function to sort the list based on the key\n    '''\n    return sorted(list, key=lambda l:l[1])\n    \ndef sum_in_list(list):\n    '''\n    Write a python function to find the sum of all the items in the list\n    '''\n    res=0\n    for i in list:\n        res+=i[1]\n    return res\n    \ndef count_repetitions(list):\n    '''\n    Write a python function to count the number of times an element appears in a list\n    '''\n    dic={}\n    for i in list:\n        if i not in dic:\n            dic[i]=1\n        else:\n            dic[i]+=1\n    return dic\n    \ndef pair_sums(list, k):\n    '''\n    Write a python function to find the pair of elements in the list that sum to k\n    '''\n    res=[]\n    for i in range(len(list)-1):\n        for j in range(i+1,len(list)):\n            if list[i]+list[j]==k:\n                res.append((list[i],list[j]))\n    return res\n    \ndef max_sublist(list):\n    '''\n    Write a python function to find the maximum contiguous sublist in a list\n    '''\n    res=[]\n    max_len=0\n    for i in range(len(list)):\n        curr_len=0\n        for j in range(i,len(list)):\n            curr_len+=list[j]\n            if curr_len>max_len:\n                max_len=curr_len\n                res=[list[i:j+1]]\n            elif curr_len==max_len:\n                res.append(list[i:j+1])\n    return res\n    \ndef max_sliding_window(list, k):\n    '''\n    Write a python function to find the maximum sublist in a sliding window of size k\n    '''\n    max_len=0\n    res=[]\n    for i in range(len(list)-k):\n        curr_len=0\n        for j in range(i,i+k):\n            curr_len+=list[j]\n            if curr_len>max_len:\n                max_len=curr_len\n                res=[list[i:i+k]]\n            elif curr_len==max_len:\n                res.append(list[i:i+k])\n    return res\n    \ndef remove_duplicates(list):\n    '''\n    Write a python function to remove duplicate elements from a list\n    '''\n    dic={}\n    res=[]\n    for i in list:\n        if i not in dic:\n            dic[i]=1\n            res.append(i)\n    return res\n    \ndef get_max_dif(list):\n    '''\n    Write a python function to find the maximum difference between two elements in a list\n    '''\n    res=0\n    for i in range(len(list)-1):\n        curr=abs(list[i]-list[i+1])\n        if curr>res:\n            res=curr\n    return res\n    \ndef sort_by_alphabet(list):\n    '''\n    Write a python function to sort a list based on the alphabets in each element\n    '''\n    return sorted(list, key=lambda l:l[0])\n    \ndef remove_duplicates(list):\n    '''\n    Write a python function to remove duplicate elements from a list\n    '''\n    dic={}\n    res=[]\n    for i in list:\n        if i not in dic:\n            dic[i]=1\n            res.append(i)\n    return res\n    \ndef min_sublist(list):\n    '''\n    Write a python function to find the minimum contiguous sublist in a list\n    '''\n    res=[]\n    min_len=len(list)\n    for i in range(len(list)):\n        curr_len=0\n        for j in range(i,len(list)):\n            curr_len+=list[j]\n            if curr_len<min_len:\n                min_len=curr_len\n                res=[list[i:j+1]]\n            elif curr_len==min_len:\n                res.append(list[i:j+1])\n    return res\n    \ndef min_sliding_window(list, k):\n    '''\n    Write a python function to find the minimum sublist in a sliding window of size k\n    '''\n    min_len=len(list)\n    res=[]\n    for i in range(len(list)-k):\n        curr_len=0\n        for j in range(i,i+k):\n            curr_len+=list[j]\n            if curr_len<min_len:\n                min_len=curr_len\n                res=[list[i:i+k]]\n            elif curr_len==min_len:\n                res.append(list[i:i+k])\n    return res\n    \ndef move_zeroes(list):\n    '''\n    Write a python function to move zeroes to the end of a list\n    '''\n    res=[]\n    for i in list:\n        if i!=0:\n            res.append(i)\n    for i in range(len(list)-len(res)):\n        res.append(0)\n    return res\n    \ndef reverse(list):\n    '''\n    Write a python function to reverse a list\n    '''\n    return list[::-1]\n    \ndef count_odd(list):\n    '''\n    Write a python function to count the number of odd numbers in a list\n    '''\n    res=0\n    for i in list:\n        if i%2==1:\n            res+=1\n    return res\n    \ndef group_by_sum(list, k):\n    '''\n    Write a python function to group the list based on the sum of each group\n    '''\n    res=[]\n    dic={}\n    for i in range(len(list)):\n        if list[i] not in dic:\n            dic[list[i]]=[list[i]]\n        else:\n            dic[list[i]].append(list[i])\n    for i in dic.keys():\n        if sum(dic[i])==k:\n            res.append(dic[i])\n    return res\n    \ndef kth_smallest(list, k):\n    '''\n    Write a python function to find the kth smallest element in a list\n    '''\n    return sorted(list)[k-1]\n    \ndef split_chunks(list, k):\n    '''\n    Write a python function to split a list into chunks of size k\n    '''\n    res=[]\n    for i in range(0,len(list),k):\n        res.append(list[i:i+k])\n    return res\n    \ndef merge_chunks(list, k):\n    '''\n    Write a python function to merge all the chunks of size k\n    '''\n    res=[]\n    for i in range(len(list)//k):\n        res.append(list[i*k:(i+1)*k])\n    return res\n    \ndef merge_sorted_chunks(list, k):\n    '''\n    Write a python function to merge all the sorted chunks of size k\n    '''\n    res=[]\n    for i in range(len(list)//k):\n        res.append(sorted(list[i*k:(i+1)*k]))\n    return res\n    \ndef add_chunks(list, k):\n    ''"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 0: \n        return 0\n    m = n - 1\n    for i in range(1,n+1): \n        if math.pow(10,m) <= i: \n            return n - m \n        m = m - 1\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    t = int(math.ceil(n * (n + 1) / 2))\n    if t <= 0: \n        return 0\n    if n == 1: \n        return 1\n    return n * (n - 1) // 2 + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    res = list(range(10**(n-1),10**n))\n    for x in range(len(res)):\n        res[x] = res[x] * (res[x] + 1) / 2\n    return res.index(n)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return math.ceil(n * (n + 1) / 2)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return n**2 + n + 1\ndef find_triangular_number(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)/2\ndef find_triangular_number_sqrt(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(2*n+1)/6\ndef find_triangular_number_sqrt_new(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)/2\ndef find_triangular_number_sqrt_second(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(2*n+1)/6\ndef find_triangular_number_sqrt_third(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(3*n+1)/6\ndef find_triangular_number_sqrt_fourth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(4*n+1)/6\ndef find_triangular_number_sqrt_fifth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(5*n+1)/6\ndef find_triangular_number_sqrt_sixth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(6*n+1)/6\ndef find_triangular_number_sqrt_seventh(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(7*n+1)/6\ndef find_triangular_number_sqrt_eighth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(8*n+1)/6\ndef find_triangular_number_sqrt_ninth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(9*n+1)/6\ndef find_triangular_number_sqrt_tenth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(10*n+1)/6\ndef find_triangular_number_sqrt_eleventh(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(11*n+1)/6\ndef find_triangular_number_sqrt_twelfth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(12*n+1)/6\ndef find_triangular_number_sqrt_thirteenth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(13*n+1)/6\ndef find_triangular_number_sqrt_fourteenth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(14*n+1)/6\ndef find_triangular_number_sqrt_fifteenth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(15*n+1)/6\ndef find_triangular_number_sqrt_sixteenth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(16*n+1)/6\ndef find_triangular_number_sqrt_seventeenth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(17*n+1)/6\ndef find_triangular_number_sqrt_eighteenth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(18*n+1)/6\ndef find_triangular_number_sqrt_nineteenth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(19*n+1)/6\ndef find_triangular_number_sqrt_twentieth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(20*n+1)/6\ndef find_triangular_number_sqrt_twentyfirst(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(21*n+1)/6\ndef find_triangular_number_sqrt_twentysecond(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(22*n+1)/6\ndef find_triangular_number_sqrt_twentythird(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(23*n+1)/6\ndef find_triangular_number_sqrt_twentyfourth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return n*(n+1)*(24*n+1)/6\ndef find_triangular_number_sqrt_twentyfifth(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeek"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    x = int(math.ceil(math.sqrt(n * (n + 1) / 2)))\n    #print x\n    print 'index of ',n,'th triangular number',x\n    \n    return x\n    \ndef find_Triangular(n):\n    '''\n    Write a python function to find the triangular number with n digits\n    '''\n    n = int(n)\n    s = 1\n    #print n,s\n    for i in range(1,n+1):\n        s = s + i\n    #print s\n    return s\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    j = 1\n    while (i <= j):\n        k = j + 1\n        while (k <= i):\n            if ((n * (n - 1) / 2) == (k * (k + 1) / 2)):\n                return j\n            k += 1\n        i += 1\n        j += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if math.ceil(math.log10(n))!= n:\n        return -1\n    else:\n        return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # if n == 1:\n    #     return 1\n    # elif n == 2:\n    #     return 2\n    # else:\n    #     result = find_Index(n-1) + find_Index(n-2) + 1\n    #     return result\n    return int(math.pow(10,n) / (1.0 * math.factorial(n)))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n    "
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    temp = {}\n    for i in range(len(test_tup)):\n        if i % 2!= 0:\n            continue\n        temp[test_tup[i]] = test_tup[i + 1]\n    return temp\n    \n    "
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        test_dict[test_tup[i]] = test_tup[i+1]\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for index in range(0,len(test_tup)):\n        my_dict[test_tup[index]] = test_tup[index+1]\n    return my_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i,j in enumerate(test_tup):\n        test_dict[j] = test_tup[i-1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = {}\n    for i in range(len(test_tup)):\n        if i == 0:\n            dictionary[test_tup[i]] = None\n        else:\n            dictionary[test_tup[i-1]] = test_tup[i]\n    return dictionary\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(len(test_tup)) if i % 2 == 0}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[x]:test_tup[x+1] for x in range(0,len(test_tup),2)}\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s[0] == s[1] and s[1] == s[2] :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    a = s[0]\n    for i in s :\n        if i!= a :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c = 0\n    for i in s :\n        if i == i.upper() :\n            c = c + 1\n        else :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = s.replace(' ', '')\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # use list comprehension to convert string to list\n    # then use set to get unique characters\n    # then compare length of list and set\n    lst = list(s)\n    lst = set(lst)\n    # set length of list\n    l = len(lst)\n    # compare length of list and set\n    if (l == 1) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10]\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9]\ndef Alternating_Digits_Count(n) :\n    '''\n    Write a python function to check whether all the digits are alternating or not.\n    '''\n    s = str(n)\n    l = len(s)\n    c = 0\n    for i in range(l-1) :\n        if int(s[i]) % 2 == 0 and int(s[i+1]) % 2 == 1 or int(s[i]) % 2 == 1 and int(s[i+1]) % 2 == 0 :\n            c += 1\n    return c\ndef palindrome_product(n) :\n    '''\n    Write a python function to check whether the product of the two half-digit numbers of n is a palindrome or not.\n    '''\n    s = str(n)\n    l = len(s)\n    for i in range(l//2) :\n        if s[i]!= s[l-i-1] :\n            return False\n    return True\ndef palindrome_product(n) :\n    '''\n    Write a python function to check whether the product of the two half-digit numbers of n is a palindrome or not.\n    '''\n    s = str(n)\n    l = len(s)\n    for i in range(l//2) :\n        if s[i]!= s[l-i-1] :\n            return False\n    return True\ndef to_hex(n) :\n    '''\n    Write a python function to convert the decimal number to hexadecimal.\n    '''\n    s = str(n)\n    l = len(s)\n    for i in range(l) :\n        if s[i] == '0' :\n            s = s[:i] + 'A' + s[i+1:]\n        elif s[i] == '1' :\n            s = s[:i] + 'B' + s[i+1:]\n        elif s[i] == '2' :\n            s = s[:i] + 'C' + s[i+1:]\n        elif s[i] == '3' :\n            s = s[:i] + 'D' + s[i+1:]\n        elif s[i] == '4' :\n            s = s[:i] + 'E' + s[i+1:]\n        elif s[i] == '5' :\n            s = s[:i] + 'F' + s[i+1:]\n        elif s[i] == '6' :\n            s = s[:i] + 'G' + s[i+1:]\n        elif s[i] == '7' :\n            s = s[:i] + 'H' + s[i+1:]\n        elif s[i] == '8' :\n            s = s[:i] + 'I' + s[i+1:]\n        elif s[i] == '9' :\n            s = s[:i] + 'J' + s[i+1:]\n        elif s[i] == 'A' :\n            s = s[:i] + 'K' + s[i+1:]\n        elif s[i] == 'B' :\n            s = s[:i] + 'L' + s[i+1:]\n        elif s[i] == 'C' :\n            s = s[:i] + 'M' + s[i+1:]\n        elif s[i] == 'D' :\n            s = s[:i] + 'N' + s[i+1:]\n        elif s[i] == 'E' :\n            s = s[:i] + 'O' + s[i+1:]\n        elif s[i] == 'F' :\n            s = s[:i] + 'P' + s[i+1:]\n        elif s[i] == 'G' :\n            s = s[:i] + 'Q' + s[i+1:]\n        elif s[i] == 'H' :\n            s = s[:i] + 'R' + s[i+1:]\n        elif s[i] == 'I' :\n            s = s[:i] + 'S' + s[i+1:]\n        elif s[i] == 'J' :\n            s = s[:i] + 'T' + s[i+1:]\n        elif s[i] == 'K' :\n            s = s[:i] + 'U' + s[i+1:]\n        elif s[i] == 'L' :\n            s = s[:i] + 'V' + s[i+1:]\n        elif s[i] == 'M' :\n            s = s[:i] + 'W' + s[i+1:]\n        elif s[i] == 'N' :\n            s = s[:i] + 'X' + s[i+1:]\n        elif s[i] == 'O' :\n            s = s[:i] + 'Y' + s[i+1:]\n        elif s[i] == 'P' :\n            s = s[:i] + 'Z' + s[i+1:]\n    return s\ndef to_decimal(n) :\n    '''\n    Write a python function to convert the hexadecimal number to decimal.\n    '''\n    s = str(n)\n    l = len(s)\n    for i in range(l) :\n        if s[i] == 'A' :\n            s = s[:i] + '10' + s[i+1:]\n        elif s[i] == 'B' :\n            s = s[:i] + '11' + s[i+1:]\n        elif s[i] == 'C' :\n            s = s[:i] + '12' + s[i+1:]\n        elif s[i] == 'D' :\n            s = s[:i] + '13' + s[i+1:]\n        elif s[i] == 'E' :\n            s = s[:i] + '14' + s[i+1:]\n        elif s[i] == 'F' :\n            s = s[:i] + '15' + s[i+1:]\n        elif s[i] == 'G' :\n            s = s[:i] + '16' + s[i+1:]\n        elif s[i] == 'H' :\n            s = s[:i] + '17' + s[i+1:]\n        elif s[i] == 'I' :\n            s = s[:i] + '18' + s[i+1:]\n        elif s[i] == 'J' :\n            s = s[:i] + '19' + s[i+1:]\n        elif s[i] == 'K' :\n            s = s[:i] + '20' + s[i+1:]\n        elif s[i] == 'L' :\n            s = s[:i] + '21' + s[i+1:]\n        elif s[i] == 'M' :\n            s = s[:i] + '22' + s[i+1:]\n        elif s[i] == 'N' :\n            s = s[:i] + '23' + s[i+1:]\n        elif s[i"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.count(s[0]) == len(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    x = s[0]\n    for i in range(1, len(s)) :\n        if x!= s[i] :\n            return False\n    return True\ndef longest_substring(s) :\n    '''\n    Write a python function to find the longest substring in the given string.\n    '''\n    dic = {}\n    for i in range(len(s)) :\n        dic[s[i]] = i\n    ans = 0\n    start = 0\n    end = 0\n    for i in range(len(s)) :\n        if i > end :\n            start = i\n            end = dic[s[i]]\n        else :\n            end = max(end, dic[s[i]])\n        if (end - start + 1) > ans :\n            ans = end - start + 1\n    return ans\ndef add_and_divide(n) :\n    '''\n    Write a python program to add and divide two numbers.\n    '''\n    a = 10\n    b = 2\n    c = a + b\n    print c\n    print c/b\ndef sort_list(s) :\n    '''\n    Write a python program to sort a list of tuples according to the second item in tuple.\n    '''\n    l = [('red', 1), ('blue', 2), ('green', 3), ('white', 4), ('black', 5), ('yellow', 6)]\n    l = sorted(l, key = lambda x : x[1])\n    print l\ndef closest(l, target) :\n    '''\n    Write a python program to find the closest number to the target in a list.\n    '''\n    diff = abs(l[0] - target)\n    ans = l[0]\n    for i in range(1, len(l)) :\n        if abs(l[i] - target) < diff :\n            ans = l[i]\n            diff = abs(l[i] - target)\n    return ans\ndef sublists(l) :\n    '''\n    Write a python program to generate all the sublists in the given list.\n    '''\n    out = [[]]\n    for i in range(len(l)) :\n        temp = []\n        for j in range(i+1) :\n            temp = temp + [l[j]]\n        out.append(temp)\n    return out\ndef sort_list(s) :\n    '''\n    Write a python program to sort a list of tuples according to the second item in tuple.\n    '''\n    l = [('red', 1), ('blue', 2), ('green', 3), ('white', 4), ('black', 5), ('yellow', 6)]\n    l = sorted(l, key = lambda x : x[1])\n    print l\ndef longest_substring(s) :\n    '''\n    Write a python program to find the longest substring in the given string.\n    '''\n    dic = {}\n    for i in range(len(s)) :\n        dic[s[i]] = i\n    ans = 0\n    start = 0\n    end = 0\n    for i in range(len(s)) :\n        if i > end :\n            start = i\n            end = dic[s[i]]\n        else :\n            end = max(end, dic[s[i]])\n        if (end - start + 1) > ans :\n            ans = end - start + 1\n    return ans\ndef add_and_divide(n) :\n    '''\n    Write a python program to add and divide two numbers.\n    '''\n    a = 10\n    b = 2\n    c = a + b\n    print c\n    print c/b\ndef sort_list(s) :\n    '''\n    Write a python program to sort a list of tuples according to the second item in tuple.\n    '''\n    l = [('red', 1), ('blue', 2), ('green', 3), ('white', 4), ('black', 5), ('yellow', 6)]\n    l = sorted(l, key = lambda x : x[1])\n    print l\ndef closest(l, target) :\n    '''\n    Write a python program to find the closest number to the target in a list.\n    '''\n    diff = abs(l[0] - target)\n    ans = l[0]\n    for i in range(1, len(l)) :\n        if abs(l[i] - target) < diff :\n            ans = l[i]\n            diff = abs(l[i] - target)\n    return ans\ndef sublists(l) :\n    '''\n    Write a python program to generate all the sublists in the given list.\n    '''\n    out = [[]]\n    for i in range(len(l)) :\n        temp = []\n        for j in range(i+1) :\n            temp = temp + [l[j]]\n        out.append(temp)\n    return out\ndef sort_list(s) :\n    '''\n    Write a python program to sort a list of tuples according to the second item in tuple.\n    '''\n    l = [('red', 1), ('blue', 2), ('green', 3), ('white', 4), ('black', 5), ('yellow', 6)]\n    l = sorted(l, key = lambda x : x[1])\n    print l\ndef longest_substring(s) :\n    '''\n    Write a python program to find the longest substring in the given string.\n    '''\n    dic = {}\n    for i in range(len(s)) :\n        dic[s[i]] = i\n    ans = 0\n    start = 0\n    end = 0\n    for i in range(len(s)) :\n        if i > end :\n            start = i\n            end = dic[s[i]]\n        else :\n            end = max(end, dic[s[i]])\n        if (end - start + 1) > ans :\n            ans = end - start + 1\n    return ans\ndef add_and_divide(n) :\n    '''\n    Write a python program to add and divide two numbers.\n    '''\n    a = 10\n    b = 2\n    c = a + b\n    print c\n    print c/b\ndef sort_list(s) :\n    '''\n    Write a python program to sort a list of tuples according to the second item in tuple.\n    '''\n    l = [('red', 1), ('blue', 2), ('green', 3), ('white', 4), ('black', 5), ('yellow', 6)]\n    l = sorted(l, key = lambda x : x[1])\n    print l\ndef closest(l, target) :\n    '''\n    Write a python program to find the closest number to the target in a list.\n    '''\n    diff = abs(l[0] - target)\n    ans = l[0]\n    for i in range(1, len(l)) :\n        if abs(l[i] - target) < diff :\n            ans = l[i]\n            diff = abs(l[i] - target)\n    return ans\ndef sublists(l) :\n    '''\n    Write a python program to generate all the sublists in the given list.\n    '''\n    out = [[]]\n    for i in range(len(l)) :\n        temp = []\n        for j in range(i+1) :\n            temp = temp + [l[j]]\n        out.append(temp)\n    return out\ndef sort_list(s) :\n    '''\n    Write a python program to sort a list of tuples according to the second item in tuple.\n    '''\n    l = [('red', 1), ('blue', 2), ('green', 3), ('white', 4), ('black', 5), ('yellow', 6)]\n    l = sorted(l, key = lambda x : x[1])\n    print l\ndef longest_substring(s) :\n    '''\n    Write a python program to find the longest substring in the given string.\n    '''\n    dic = {}\n    for i in range(len(s)) :\n        dic[s[i]] = i\n    ans = 0\n    start = 0\n    end = 0\n    for i in range(len(s)) :\n        if i > end :\n            start = i\n            end = dic[s[i]]\n        else :\n            end = max(end, dic[s[i]])\n        if (end - start + 1) > an"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if not s :\n        return True\n    return len(set(s)) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==1\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/4)*(side*side)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3**0.5)*(side**2)\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return (1/3)*(side**3)\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return 6*(side**2)\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side**3\ndef volume_sphere(r):\n    '''\n    Write a function to caluclate the volume of a sphere with a radius r.\n    '''\n    return 4/3*(math.pi)*(r**3)\ndef area_sphere(r):\n    '''\n    Write a function to caluclate the area of a sphere with a radius r.\n    '''\n    return 4*(math.pi)*(r**2)\ndef volume_cone(r,h):\n    '''\n    Write a function to caluclate the volume of a cone with a radius r and height h.\n    '''\n    return (1/3)*(math.pi)*(r**2)*h\ndef area_cone(r,h):\n    '''\n    Write a function to caluclate the area of a cone with a radius r and height h.\n    '''\n    return (1/2)*(math.pi)*(r**2)*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to caluclate the volume of a cylinder with a radius r and height h.\n    '''\n    return h*(math.pi)*(r**2)\ndef area_cylinder(r,h):\n    '''\n    Write a function to caluclate the area of a cylinder with a radius r and height h.\n    '''\n    return 2*(math.pi)*(r**2)*h\ndef volume_box(l,w,h):\n    '''\n    Write a function to caluclate the volume of a box with a length l, width w, and height h.\n    '''\n    return l*w*h\ndef area_box(l,w,h):\n    '''\n    Write a function to caluclate the area of a box with a length l, width w, and height h.\n    '''\n    return 2*(l*w + w*h + h*l)\ndef volume_prism(l,w,h):\n    '''\n    Write a function to caluclate the volume of a prism with a length l, width w, and height h.\n    '''\n    return l*w*h\ndef area_prism(l,w,h):\n    '''\n    Write a function to caluclate the area of a prism with a length l, width w, and height h.\n    '''\n    return 2*(l*w + w*h + h*l)\ndef volume_sphere_triangle(r):\n    '''\n    Write a function to caluclate the volume of a sphere with a radius r.\n    '''\n    return (1/6)*math.pi*(r**3)\ndef area_sphere_triangle(r):\n    '''\n    Write a function to caluclate the area of a sphere with a radius r.\n    '''\n    return (1/4)*math.pi*(r**2)\ndef volume_prism_triangle(l,w,h):\n    '''\n    Write a function to caluclate the volume of a prism with a length l, width w, and height h.\n    '''\n    return l*w*h\ndef area_prism_triangle(l,w,h):\n    '''\n    Write a function to caluclate the area of a prism with a length l, width w, and height h.\n    '''\n    return l*w + w*h + h*l\ndef volume_pyramid(l,w,h):\n    '''\n    Write a function to caluclate the volume of a pyramid with a length l, width w, and height h.\n    '''\n    return l*w*h\ndef area_pyramid(l,w,h):\n    '''\n    Write a function to caluclate the area of a pyramid with a length l, width w, and height h.\n    '''\n    return l*w + w*h + h*l\ndef volume_hexagon(l,w,h):\n    '''\n    Write a function to caluclate the volume of a hexagon with a length l, width w, and height h.\n    '''\n    return (1/2)*(l*w + w*h + h*l)\ndef area_hexagon(l,w,h):\n    '''\n    Write a function to caluclate the area of a hexagon with a length l, width w, and height h.\n    '''\n    return l*w + w*h + h*l\ndef volume_octagon(l,w,h):\n    '''\n    Write a function to caluclate the volume of a octagon with a length l, width w, and height h.\n    '''\n    return (1/2)*(l*w + w*h)\ndef area_octagon(l,w,h):\n    '''\n    Write a function to caluclate the area of a octagon with a length l, width w, and height h.\n    '''\n    return l*w + w*h + h*l\ndef volume_dodecagon(l,w,h):\n    '''\n    Write a function to caluclate the volume of a dodecagon with a length l, width w, and height h.\n    '''\n    return (1/4)*(l*w + w*h + h*l)\ndef area_dodecagon(l,w,h):\n    '''\n    Write a function to caluclate the area of a dodecagon with a length l, width w, and height h.\n    '''\n    return l*w + w*h + h*l\ndef volume_trigonal_pyramid(b,h):\n    '''\n    Write a function to caluclate the volume of a trigonal pyramid with a base b, height h.\n    '''\n    return b*h/3\ndef area_trigonal_pyramid(b,h):\n    '''\n    Write a function to caluclate the area of a trigonal pyramid with a base b, height h.\n    '''\n    return b*h/2\ndef volume_trigonal_pyramid_right(b,h):\n    '''\n    Write a function to caluclate the volume of a right-angled trigonal pyramid with a base b, height h.\n    '''\n    return (b*h)**0.5\ndef area_trigonal_pyramid_right(b,h):\n    '''\n    Write a function to caluclate the area of a right-angled trigonal pyramid with a base b, height h.\n    '''\n    return b*h**0.5\ndef volume_trigonal_pyramid_left(b,h):\n    '''\n    Write a function to caluclate the volume of a left-angled trigonal pyramid with a base b, height h.\n    '''\n    return (b*h)**0.5/2\ndef area_trigonal_pyramid_left(b,h):\n    '''\n    Write a function to caluclate the area of a left-angled trigonal pyramid with a base b, height h.\n    '''\n    return b*h**0.5/4\ndef volume_tetrahedral_pyramid(b,h):\n    '''\n    Write a function to caluclate the volume of a tetrahedral pyramid with a base b, height h.\n    '''\n    return (b*h)**0.5/4\ndef area_tetrahedral_pyramid(b,h):\n    '''\n    Write a function to caluclate the area of a tetrahedral pyramid with a base b, height h.\n    '''\n    return b*h**0.5/2\ndef volume_octahedral_pyramid(b,h):\n    '''\n    Write a function to caluclate the volume of an octahedral pyramid with a base b, height h.\n    '''\n    return (b*h"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2 * math.sqrt(3)/4\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side =='square':\n        return (4/3)**.5\n    if side =='rectangle':\n        return 4\n    if side == 'circle':\n        return (2*(1+math.sqrt(5)))**-.5\n    if side == 'pyramid':\n        return 1/3\n    if side == 'tetrahedron':\n        return (2/3)**.5\n    else:\n        return None\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1./2)*(3**0.5)\n    return (s*side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * (3 * (side ** 2)) / 4\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if not isinstance(side,int):\n        raise ValueError(\"Side should be integer\")\n    return math.sqrt(2)*(3*math.sqrt(2))/4\ndef area_triangle(length,base):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    if not isinstance(length,int) or not isinstance(base,int):\n        raise ValueError(\"Length and base should be integer\")\n    return length*base/2\ndef area_rectangle(length,width):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    if not isinstance(length,int) or not isinstance(width,int):\n        raise ValueError(\"Length and width should be integer\")\n    return length*width\ndef area_trapezoid(height,top_base,bottom_base):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    if not isinstance(height,int) or not isinstance(top_base,int) or not isinstance(bottom_base,int):\n        raise ValueError(\"Height, top base, bottom base should be integer\")\n    return 0.5*(top_base+bottom_base)*height\ndef area_cone(height,radius):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    if not isinstance(height,int) or not isinstance(radius,int):\n        raise ValueError(\"Height and radius should be integer\")\n    return height*math.pi*radius**2/3\ndef area_cylinder(radius,height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    if not isinstance(radius,int) or not isinstance(height,int):\n        raise ValueError(\"Radius and height should be integer\")\n    return 2*math.pi*radius*radius + 2*math.pi*radius*height\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    if not isinstance(radius,int):\n        raise ValueError(\"Radius should be integer\")\n    return 4*math.pi*radius**2\ndef area_sphere_shell(outer_radius,inner_radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    if not isinstance(outer_radius,int) or not isinstance(inner_radius,int):\n        raise ValueError(\"Outer radius and inner radius should be integer\")\n    return 4*math.pi*outer_radius*inner_radius\ndef area_sphere_solid(radius):\n    '''\n    Write a function to caluclate the area of a solid sphere.\n    '''\n    if not isinstance(radius,int):\n        raise ValueError(\"Radius should be integer\")\n    return 4*math.pi*radius**2\ndef area_ellipse(major_radius,minor_radius):\n    '''\n    Write a function to caluclate the area of a ellipse.\n    '''\n    if not isinstance(major_radius,int) or not isinstance(minor_radius,int):\n        raise ValueError(\"Major radius and minor radius should be integer\")\n    return math.pi*minor_radius*major_radius\ndef area_ellipsoid(major_radius,minor_radius):\n    '''\n    Write a function to caluclate the area of a ellipsoid.\n    '''\n    if not isinstance(major_radius,int) or not isinstance(minor_radius,int):\n        raise ValueError(\"Major radius and minor radius should be integer\")\n    return 4*math.pi*major_radius*minor_radius\ndef area_para_ellipse(semimajor_axis,semiminor_axis):\n    '''\n    Write a function to caluclate the area of a paralellogram.\n    '''\n    if not isinstance(semimajor_axis,int) or not isinstance(semiminor_axis,int):\n        raise ValueError(\"Semimajor axis and semiminor axis should be integer\")\n    return math.pi*semimajor_axis*semiminor_axis\ndef area_hyperboloid(semimajor_axis,semiminor_axis,eccentricity):\n    '''\n    Write a function to caluclate the area of a hyperboloid.\n    '''\n    if not isinstance(semimajor_axis,int) or not isinstance(semiminor_axis,int) or not isinstance(eccentricity,int):\n        raise ValueError(\"Semimajor axis, semiminor axis, eccentricity should be integer\")\n    return 4*math.pi*semimajor_axis*semiminor_axis*(1+eccentricity**2)**(1/2)\ndef area_paraboloid(semimajor_axis,semiminor_axis):\n    '''\n    Write a function to caluclate the area of a paraboloid.\n    '''\n    if not isinstance(semimajor_axis,int) or not isinstance(semiminor_axis,int):\n        raise ValueError(\"Semimajor axis and semiminor axis should be integer\")\n    return 4*math.pi*semimajor_axis*semiminor_axis\ndef area_parallel_ellipse(semimajor_axis,semiminor_axis,eccentricity):\n    '''\n    Write a function to caluclate the area of a parallel ellipse.\n    '''\n    if not isinstance(semimajor_axis,int) or not isinstance(semiminor_axis,int) or not isinstance(eccentricity,int):\n        raise ValueError(\"Semimajor axis, semiminor axis, eccentricity should be integer\")\n    return math.pi*semimajor_axis*semiminor_axis*(1+eccentricity**2)**(1/2)\ndef area_orthogonal_ellipse(semimajor_axis,semiminor_axis,eccentricity):\n    '''\n    Write a function to caluclate the area of a orthogonal ellipse.\n    '''\n    if not isinstance(semimajor_axis,int) or not isinstance(semiminor_axis,int) or not isinstance(eccentricity,int):\n        raise ValueError(\"Semimajor axis, semiminor axis, eccentricity should be integer\")\n    return math.pi*semimajor_axis*semiminor_axis*(1-eccentricity**2)**(1/2)\ndef area_ellipsoid_shell(semimajor_axis,semiminor_axis,inner_semimajor_axis,inner_semiminor_axis):\n    '''\n    Write a function to caluclate the area of a ellipsoid shell.\n    '''\n    if not isinstance(semimajor_axis,int) or not isinstance(semiminor_axis,int) or not isinstance(inner_semimajor_axis,int) or not isinstance(inner_semiminor_axis,int):\n        raise ValueError(\"Semimajor axis, semiminor axis, inner semimajor axis, inner semiminor axis should be integer\")\n    return 4*math.pi*semimajor_axis*semiminor_axis*(1+inner_semimajor_axis*inner_semiminor_axis)**(1/2)\ndef area_ellipsoid_solid(semimajor_axis,semiminor_axis,inner_semimajor_axis,inner_semiminor_axis):\n    '''\n    Write a function to caluclate the area of a ellipsoid shell.\n    '''\n    if not isinstance(semimajor_axis,int) or not isinstance(semiminor_axis,int) or not isinstance(inner_semimajor_axis,int) or not isinstance(inner_semiminor_axis,int):\n        raise ValueError(\"Semimajor axis, semiminor axis, inner semimajor axis, inner semiminor axis should be integer\")\n    return 4*math.pi*semimajor_axis*semiminor_axis*(1+inner_semimajor_axis**2"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/4) * side * side * side\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return (1/3) * side * side * side\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*side**2)/4\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2*math.sqrt(3)\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    temp = list[m:]\n    for i in range(m):\n        temp.append(list[i])\n    return temp\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Consider list is not circular\n    if m > len(list):\n        return list\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    reverse = n - m\n    for i in range(reverse, n):\n        list[i], list[i - reverse] = list[i - reverse], list[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) < 2:\n        return list\n    first = list[:m]\n    last = list[m:]\n    return last + first\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list = list[m:] + list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return []\n    if m > len(list):\n        return list\n    new_list = []\n    for i in range(m):\n        new_list.append(list[-1])\n        list.pop()\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    new_list = []\n    for i in range(len(list) - m, len(list)):\n        new_list.append(list[i])\n    for i in range(0, len(list) - m):\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for t in test_tup:\n        if t is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for x in test_tup:\n        if x is None:\n            return True\n    return False\n    \ndef test_none():\n    t1 = (10, 20, None, 40, 50)\n    t2 = (10, None, 40, 50, None)\n    t3 = (10, None, None, None, None)\n    assert check_none(t1) is False\n    assert check_none(t2) is True\n    assert check_none(t3) is True\n    \nif __name__ == '__main__':\n    test_none()\n    print 'Passed all tests...'\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            print('found none in the tuple')\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None not in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(list(filter(lambda num: num % int(str(num)[0]) == 0 and num % int(str(num)[1]) == 0 and num % int(str(num)[2]) == 0, range(startnum,endnum))))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: x % int(str(x)[0]) == 0 and x % int(str(x)[-1]) == 0, range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #soln to this problem is to use a generator function that yields all the nums that meet the criteria\n    #that is all numbers that are divisible by each digit are generated\n    nums = []\n    for num in range(startnum, endnum):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            nums.append(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum+1) if all(num%int(str(digit)) == 0 for digit in str(num))]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [n for n in range(startnum, endnum + 1) if n % sum(map(int, str(n)))]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum + 1) if all(int(digit) % num == 0 for digit in str(num))]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum + 1) if num % int(str(num)[0]) == 0 and num % int(str(num)[1]) == 0 and num % int(str(num)[2]) == 0 and num % int(str(num)[3]) == 0 and num % int(str(num)[4]) == 0 and num % int(str(num)[5]) == 0]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: int(startnum) <= x <= int(endnum) and all(x % y == 0 for y in [int(digit) for digit in str(x)]), range(startnum, endnum + 1)))\n    #return [x for x in range(startnum, endnum + 1) if all(x % y == 0 for y in [int(digit) for digit in str(x)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum + 1):\n        if i % 10 == 0:\n            print(i)\n        else:\n            if i % int(str(i)[0]) == 0 and i % int(str(i)[1]) == 0 and i % int(str(i)[2]) == 0 and i % int(str(i)[3]) == 0:\n                print(i)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # the math module allows us to use radians and degrees\n    radians = math.radians(a)\n    area = math.pi * (r ** 2) * (1 - math.cos(radians))\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r**2) * (1 - math.cos(a)) / 180\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * (a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle=a%360\n    if angle>360:\n        return None\n    return (math.pi*r*r)*(angle/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*(r**2)*(90-a)/180\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #a = angle\n    if a > 360:\n        return None\n    if a < 0:\n        a = 360 + a\n    s = 3.14*r**2*(a/360)\n    return s\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    return math.pi * r**2 * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=a%360\n    if a>360:\n        return None\n    elif a==360:\n        return math.pi*r*r\n    else:\n        return math.pi*r*r*(1-math.cos(math.radians(a)))\ndef side_area(r,a):\n    '''\n    Write a function to find area of a side. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=a%360\n    if a>360:\n        return None\n    elif a==360:\n        return math.pi*r*r\n    else:\n        return math.pi*r*r*(1-math.cos(math.radians(a)))\ndef angle_area(r,a):\n    '''\n    Write a function to find area of a right angle. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=a%360\n    if a>360:\n        return None\n    elif a==360:\n        return math.pi*r*r\n    else:\n        return math.pi*r*r*(1-math.cos(math.radians(a)))\ndef area_circle(r):\n    '''\n    Write a function that takes the radius of a circle as input and returns the area of the circle.\n    '''\n    return math.pi*r*r\ndef area_sector(r,a):\n    '''\n    Write a function that takes the radius and the angle of a sector as inputs and returns the area of the sector.\n    '''\n    return math.pi*r*r*(1-math.cos(math.radians(a)))\ndef area_side(r,a):\n    '''\n    Write a function that takes the radius and the angle of a side as inputs and returns the area of the side.\n    '''\n    return math.pi*r*r*(1-math.cos(math.radians(a)))\ndef area_rightangle(r,a):\n    '''\n    Write a function that takes the radius and the angle of a right angle as inputs and returns the area of the right angle.\n    '''\n    return math.pi*r*r*(1-math.cos(math.radians(a)))\ndef area_rectangle(a,b):\n    '''\n    Write a function that takes the length and the breadth of a rectangle as input and returns the area of the rectangle.\n    '''\n    return a*b\ndef area_trapezoid(h,b1,b2,a1):\n    '''\n    Write a function that takes the height, base one and base two of a trapzoid as inputs and returns the area of the trapzoid.\n    '''\n    return (h*(b1+b2))/2*(a1+a1)\ndef area_triangle(a,b):\n    '''\n    Write a function that takes the length and the breadth of a triangle as inputs and returns the area of the triangle.\n    '''\n    return (a*b)/2\ndef area_kite(a,b,h):\n    '''\n    Write a function that takes the length, breadth and height of a kite as inputs and returns the area of the kite.\n    '''\n    return (a*b*h)/2\ndef area_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere as input and returns the area of the sphere.\n    '''\n    return (4*math.pi*r*r)/3\ndef area_cylinder(r,h):\n    '''\n    Write a function that takes the radius and height of a cylinder as inputs and returns the area of the cylinder.\n    '''\n    return (2*math.pi*r*h)+2*math.pi*r*r\ndef area_cone(r,h):\n    '''\n    Write a function that takes the radius and height of a cone as inputs and returns the area of the cone.\n    '''\n    return math.pi*(r*r)*(1-math.cos(math.radians(h)))\ndef area_pyramid(a,b,c):\n    '''\n    Write a function that takes the length, breadth and height of a pyramid as inputs and returns the area of the pyramid.\n    '''\n    return (a*b*c)/2\ndef volume_cube(a):\n    '''\n    Write a function that takes the length of a cube as input and returns the volume of the cube.\n    '''\n    return a*a*a\ndef volume_cuboid(a,b):\n    '''\n    Write a function that takes the length and the breadth of a cuboid as inputs and returns the volume of the cuboid.\n    '''\n    return a*b*a\ndef volume_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere as input and returns the volume of the sphere.\n    '''\n    return (4*math.pi*r*r*r)/3\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes the radius and height of a cylinder as inputs and returns the volume of the cylinder.\n    '''\n    return (math.pi*r*r*h)+(math.pi*r*r)\ndef volume_cone(r,h):\n    '''\n    Write a function that takes the radius and height of a cone as inputs and returns the volume of the cone.\n    '''\n    return (math.pi*r*r*h)/3\ndef volume_pyramid(a,b,c):\n    '''\n    Write a function that takes the length, breadth and height of a pyramid as inputs and returns the volume of the pyramid.\n    '''\n    return (a*b*c)/2\ndef average(l):\n    '''\n    Write a function to find the average of a list.\n    '''\n    return sum(l)/len(l)\ndef median(l):\n    '''\n    Write a function to find the median of a list.\n    '''\n    l.sort()\n    if len(l)%2==0:\n        return (l[len(l)/2]+l[len(l)/2-1])/2.0\n    else:\n        return l[len(l)/2]\ndef mode(l):\n    '''\n    Write a function to find the mode of a list.\n    '''\n    l.sort()\n    d={}\n    for i in l:\n        if i in d.keys():\n            d[i]+=1\n        else:\n            d[i]=1\n    max_count=0\n    max_key=0\n    for i in d.keys():\n        if d[i]>max_count:\n            max_count=d[i]\n            max_key=i\n    return max_key\ndef standard_deviation(l):\n    '''\n    Write a function to find the standard deviation of a list.\n    '''\n    avg=average(l)\n    return math.sqrt(sum([(i-avg)**2 for i in l])/len(l))\ndef variance(l):\n    '''\n    Write a function to find the variance of a list.\n    '''\n    avg=average(l)\n    return sum([(i-avg)**2 for i in l])/len(l)\ndef stddev(l):\n    '''\n    Write a function to find the standard deviation of a list.\n    '''\n    return math.sqrt(variance(l))\ndef standard_deviation2(l):\n    '''\n    Write a function to find the standard deviation of a list.\n    '''\n    avg=average(l)\n    return math.sqrt(sum([(i-avg)**2 for i in l])/len(l))\ndef variance2(l):\n    '''\n    Write a function to find the variance of a list.\n    '''\n    avg=average(l)\n    return sum([(i-avg)**2 for i in l])/len(l)\ndef stddev2(l):\n    '''\n    Write a function to find the standard deviation of a list.\n    '''\n    return math.sqrt(variance2(l))\ndef scatter_plot(x"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*(1-math.cos(a*math.pi/180))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return (math.pi*r*r)*(a/360)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    table = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # m is the length of the string\n    m = len(X)\n    # n is the length of the string\n    n = len(Y)\n    # lcs is an empty list that will store the longest common subsequence found\n    lcs = []\n    # create a 2D array\n    # The first row and column will store the LCS for the following\n    # 2 strings of length 1 and 2 respectively\n    # The second row and column will store the LCS for the following\n    # 2 strings of length 1 and 3 respectively\n    # The third row and column will store the LCS for the following\n    # 2 strings of length 2 and 3 respectively\n    # The fourth row and column will store the LCS for the following\n    # 2 strings of length 3 and 3 respectively\n    # The fifth row and column will store the LCS for the following\n    # 2 strings of length 4 and 3 respectively\n    # The sixth row and column will store the LCS for the following\n    # 2 strings of length 5 and 3 respectively\n    # The seventh row and column will store the LCS for the following\n    # 2 strings of length 6 and 3 respectively\n    # The eighth row and column will store the LCS for the following\n    # 2 strings of length 7 and 3 respectively\n    # The ninth row and column will store the LCS for the following\n    # 2 strings of length 8 and 3 respectively\n    # The tenth row and column will store the LCS for the following\n    # 2 strings of length 9 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 10 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 11 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 12 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 13 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 14 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 15 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 16 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 17 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 18 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 19 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 20 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 21 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 22 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 23 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 24 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 25 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 26 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 27 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 28 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 29 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 30 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 31 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 32 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 33 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 34 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 35 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 36 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 37 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 38 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 39 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 40 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 41 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 42 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 43 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 44 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 45 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 46 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 47 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 48 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 49 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 50 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 51 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 52 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 53 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 54 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 55 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 56 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 57 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 58 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 59 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 60 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 61 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 62 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 63 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 64 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 65 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 66 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 67 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 68 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 69 and 3 respectively\n    # The eleventh row and column will store the LCS for the following\n    # 2 strings of length 70 and 3 respectively\n    # The el"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]\n    \nif __name__ == '__main__':\n    s = input()\n    t = input()\n    u = input()\n    print(lcs_of_three(s, t, u)"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[[0 for k in range(o + 1)] for j in range(n + 1)] for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    return dp[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    t = [[[0 for i in range(len(Z)+1)] for j in range(len(Y)+1)] for k in range(len(X)+1)]\n    \n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    t[i][j][k] = 1 + t[i-1][j-1][k-1]\n                else:\n                    t[i][j][k] = max(t[i-1][j][k], t[i][j-1][k], t[i][j][k-1])\n    return t[len(X)][len(Y)][len(Z)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for x in range(o+1)] for x in range(n+1)] for x in range(m+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    return lcs[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return lcs(X, Y, Z)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub('([A-Z][a-z]+)',r' \\1',str1)\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    final_string = str1\n    for word in str1.split():\n        if word[0].isupper():\n            if str1.find(' ') == -1:\n                final_string +=''\n                final_string += word\n            else:\n                final_string = final_string.replace(word, word+' ')\n    return final_string\n    \n    \ndef first_last_name(name):\n    '''\n    Write a function that takes in a string and returns a version of the string with the first and last name in separate words.\n    '''\n    \n    str1 = ''\n    first_name = name.split()[0]\n    last_name = name.split()[1]\n    str1 += first_name+' '+last_name\n    return str1\n    \n    \ndef modify_string(str1):\n    '''\n    Write a function that takes in a string and returns a version of the string with all the vowels in the string replaced with the letter X.\n    '''\n    \n    str1 = str1.lower()\n    for i in range(0, len(str1)):\n        if str1[i] == 'a' or str1[i] == 'e' or str1[i] == 'i' or str1[i] == 'o' or str1[i] == 'u':\n            str1 = str1.replace(str1[i], 'x')\n    return str1\n    \n    \ndef convert_to_palindrome(str1):\n    '''\n    Write a function that takes in a string and returns the string in reverse order.\n    '''\n    \n    str1 = str1.lower()\n    str1 = str1.replace(' ', '')\n    if str1[0] =='':\n        str1 = str1[1:]\n    if str1[-1] =='':\n        str1 = str1[0:-1]\n    if str1 == '':\n        return''\n    else:\n        str1 = str1[::-1]\n        return str1\n    \n    \ndef convert_to_palindrome_2(str1):\n    '''\n    Write a function that takes in a string and returns the string in reverse order.\n    '''\n    \n    str1 = str1.lower()\n    str1 = str1.replace(' ', '')\n    if str1[0] =='':\n        str1 = str1[1:]\n    if str1[-1] =='':\n        str1 = str1[0:-1]\n    if str1 == '':\n        return''\n    else:\n        str1 = str1[::-1]\n        return str1\n    \n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams of each other.\n    '''\n    \n    if len(str1)!= len(str2):\n        return False\n    elif len(str1) == len(str2) and len(str1) == 0 and len(str2) == 0:\n        return True\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for i in range(0, len(str1)):\n            if str1[i] =='':\n                str1 = str1.replace(' ', '')\n        for j in range(0, len(str2)):\n            if str2[j] =='':\n                str2 = str2.replace(' ', '')\n        if len(str1)!= len(str2):\n            return False\n        else:\n            str1 = sorted(str1)\n            str2 = sorted(str2)\n            if str1 == str2:\n                return True\n            else:\n                return False\n        \n        \ndef is_anagram_2(str1, str2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams of each other.\n    '''\n    \n    if len(str1)!= len(str2):\n        return False\n    elif len(str1) == len(str2) and len(str1) == 0 and len(str2) == 0:\n        return True\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for i in range(0, len(str1)):\n            if str1[i] =='':\n                str1 = str1.replace(' ', '')\n        for j in range(0, len(str2)):\n            if str2[j] =='':\n                str2 = str2.replace(' ', '')\n        if len(str1)!= len(str2):\n            return False\n        else:\n            str1 = sorted(str1)\n            str2 = sorted(str2)\n            if str1 == str2:\n                return True\n            else:\n                return False\n        \n        \ndef swap_characters(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a new string with the characters in the second string swapped for the characters in the first string.\n    '''\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    for i in range(0, len(str2)):\n        if str2[i] =='':\n            str2 = str2.replace(' ', '')\n    for j in range(0, len(str1)):\n        if str1[j] =='':\n            str1 = str1.replace(' ', '')\n    if len(str1)!= len(str2):\n        return 'ERROR'\n    else:\n        str2 = str2[::-1]\n        return str1+str2\n        \n        \ndef swap_characters_2(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a new string with the characters in the second string swapped for the characters in the first string.\n    '''\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    for i in range(0, len(str2)):\n        if str2[i] =='':\n            str2 = str2.replace(' ', '')\n    for j in range(0, len(str1)):\n        if str1[j] =='':\n            str1 = str1.replace(' ', '')\n    if len(str1)!= len(str2):\n        return 'ERROR'\n    else:\n        str2 = str2[::-1]\n        return str2+str1\n        \n        \ndef is_anagram_3(str1, str2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams of each other.\n    '''\n    \n    if len(str1)!= len(str2):\n        return False\n    elif len(str1) == len(str2) and len(str1) == 0 and len(str2) == 0:\n        return True\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for i in range(0, len(str1)):\n            if str1[i] =='':\n                str1 = str1.replace(' ', '')\n        for j in range(0, len(str2)):\n            if str2[j] =='':\n                str2 = str2.replace(' ', '')\n        if len(str1)!= len(str2):\n            return False\n        else:\n            str1 = sorted(str1)\n            str2 = sorted(str2)\n            if str1 == str2:\n                return True\n            else:\n                return False\n        \n        \ndef is_anagram_4(str1, str2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams of each other.\n    '''\n    \n    if len(str1)!= len(str2):\n        return False\n    elif len(str1) == len(str2) and len(str1) == 0 and len(str2) == 0:\n        return True\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for i in range(0"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if str1 == None or len(str1) == 0:\n        return 0\n    ans = str1[0].upper()\n    for i in range(1,len(str1)):\n        if str1[i-1] == \" \" and str1[i].isupper():\n            ans += \" \"\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    #convert the string to list\n    list1 = list(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z][a-z]+)', r' \\1', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    cap_words = re.findall('[A-Z][^A-Z]*', str1)\n    for w in cap_words:\n        if len(w) > 1:\n            print(\"%s \" % w, end=\"\")\n    print(\"\")\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = 'i am a student'\n    str1 = str1.title()\n    res = ''\n    for word in str1.split():\n        if word[0].isupper():\n            res +='' + word\n        else:\n            res += word\n    return res\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s=''\n    for i in str1:\n        if i==' ':\n            s=s+i\n        elif i.isupper() and i!=' ':\n            s=s+' '+i\n    return s\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    new_str = []\n    for ele in str1:\n        if ele[0].isupper():\n            new_str.append(ele)\n            new_str.append(\" \")\n        else:\n            new_str.append(ele)\n    return \"\".join(new_str)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    #use of re.findall()\n    return re.sub('([A-Z][a-z]+)',r' \\1',str1)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    nums = [int(n) for n in nums_str]\n    \n    return sorted(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def tryint(s):\n        try:\n            return int(s)\n        except ValueError:\n            return s\n    def alphanum_key(s):\n        return [ tryint(c) for c in re.split('([0-9]+)', s) ]\n    return sorted(nums_str, key = alphanum_key)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(i) for i in nums_str]\n    return sorted(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(num) for num in nums_str]\n    #print(nums)\n    sorted_nums = sorted(nums)\n    #print(sorted_nums)\n    return [str(num) for num in sorted_nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(x) for x in nums_str]\n    nums.sort()\n    return [str(x) for x in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def try_int(s):\n        try:\n            return int(s)\n        except ValueError:\n            return s\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    from collections import defaultdict\n    return sorted(nums_str, key = lambda x: list(map(int, x.split())))\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef get_code_size(test_list):\n    '''\n    Write a function to get the size of the code by getting the number of tuples in the list.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    new_list = test_list + [test_tup]\n    return new_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # write your code here\n    test_list.append(test_tup)\n    return test_list\n    \ndef add_list(test_list, test_list_2):\n    '''\n    Write a function to add the given list to the given list.\n    '''\n    # write your code here\n    return test_list + test_list_2\n    \ndef mean(test_list):\n    '''\n    Write a function to find the mean of the given list of numbers.\n    '''\n    # write your code here\n    n = len(test_list)\n    return sum(test_list) / n\n    \ndef largest_diff(test_list):\n    '''\n    Write a function to find the largest absolute difference between two\n    numbers in the given list.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    return max([abs(test_list[i] - test_list[i+1]) for i in xrange(len(test_list) - 1)])\n    \ndef is_sorted(test_list):\n    '''\n    Write a function to return True if the given list is sorted and False\n    otherwise.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    return sorted(test_list) == test_list\n    \ndef find_longest_same_prefix(test_list):\n    '''\n    Write a function to find the longest prefix that is the same for all\n    elements in the given list.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    n = len(test_list)\n    for i in xrange(n - 1):\n        test_list[i + 1] = test_list[i]\n    return test_list\n    \ndef compare_strings(test_list):\n    '''\n    Write a function to compare all pairs of strings in the given list.\n    The function should return True if the strings are the same and False\n    if they are different.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    return all(test_list[i] == test_list[i+1] for i in xrange(len(test_list) - 1))\n    \ndef count_vowels(test_str):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    return len([c for c in test_str if c in 'aeiou'])\n    \ndef reverse(test_list):\n    '''\n    Write a function to reverse the given list.\n    '''\n    # write your code here\n    return test_list[::-1]\n    \ndef swap(test_list, index_1, index_2):\n    '''\n    Write a function to swap the elements at given indices in the list.\n    '''\n    # write your code here\n    test_list[index_1], test_list[index_2] = test_list[index_2], test_list[index_1]\n    return test_list\n    \ndef move_element(test_list, index_1, index_2):\n    '''\n    Write a function to move the elements at given indices to the end of the list.\n    '''\n    # write your code here\n    del test_list[index_1]\n    test_list.append(test_list.pop(index_2))\n    return test_list\n    \ndef remove_duplicates(test_list):\n    '''\n    Write a function to remove all duplicate elements in the given list.\n    '''\n    # write your code here\n    return list(set(test_list))\n    \ndef find_max_and_min(test_list):\n    '''\n    Write a function to find the maximum and minimum values in the given list.\n    '''\n    # write your code here\n    return [max(test_list), min(test_list)]\n    \ndef is_palindrome(test_str):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    return test_str == test_str[::-1]\n    \ndef find_largest_number(test_list):\n    '''\n    Write a function to find the largest number in the given list.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    return max(test_list)\n    \ndef is_anagram(test_str_1, test_str_2):\n    '''\n    Write a function to check whether two strings are anagrams of each other.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    return sorted(test_str_1) == sorted(test_str_2)\n    \ndef move_end_to_beginning(test_list):\n    '''\n    Write a function to move the last element to the beginning of the list.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    del test_list[-1]\n    test_list.insert(0, test_list.pop())\n    return test_list\n    \ndef merge_sorted_lists(test_list):\n    '''\n    Write a function to merge two sorted lists into a single list.\n    '''\n    # write your code here\n    return sorted(test_list[0] + test_list[1])\n    \ndef remove_duplicates_from_sorted(test_list):\n    '''\n    Write a function to remove duplicates from a sorted list.\n    '''\n    # write your code here\n    test_list[:] = sorted(list(set(test_list)))\n    return test_list\n    \ndef remove_duplicates_from_unsorted(test_list):\n    '''\n    Write a function to remove duplicates from a list that is not sorted.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    return sorted(list(set(test_list)))\n    \ndef is_valid_parentheses(test_str):\n    '''\n    Write a function to check whether a given string is balanced.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    test_str = test_str.replace('()', '')\n    return test_str == ''\n    \ndef group_pairs(test_list):\n    '''\n    Write a function to group a list of strings according to their length.\n    '''\n    # write your code here\n    return [(len(x), x) for x in test_list]\n    \ndef reverse_list(test_list):\n    '''\n    Write a function to reverse a list of strings according to their length.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    return [x[::-1] for x in test_list]\n    \ndef print_list_square(test_list):\n    '''\n    Write a function to print a list of strings in a square\n    '''\n    # write your code here\n    for i in xrange(len(test_list)):\n        print test_list[i].center(len(test_list) * 2 - 1)\n    \ndef find_even_indices(test_list):\n    '''\n    Write a function to return a list of the indices of all even numbers in\n    the given list.\n    '''\n    # write your code here\n    # Note that your function must return a single value\n    return [i for i in xrange(len(test_list)) if test_list[i] % 2 == 0]\n    \ndef list_intersection(test_list_1, test_list_2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    # write your code here\n    return list(set(test_list_1) & set(test_list_2))\n    \ndef find_max_element(test_list):\n    '''\n    Write a function to find the maximum element in the given list.\n    '''\n    # write your code here\n    # Note that your function mus"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if not test_tup:\n        return []\n    if len(test_list) < 1:\n        return [test_tup]\n    return [test_tup] + add_tuple(test_list[1:], test_list[0])\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent_index = (i-1)/2\n    if parent_index < 0 or arr[i] < arr[parent_index]:\n        return False\n    return check_min_heap_helper(arr, parent_index)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[left]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return\n    if arr[i] < arr[2*i] or arr[i] < arr[2*i+1]:\n        return False\n    if 2*i+1 < len(arr) and arr[i] < arr[2*i+1] or 2*i+2 < len(arr) and arr[i] < arr[2*i+2]:\n        return False\n    if i < len(arr) - 1 and 2*i+1 < len(arr) and arr[i] < arr[2*i+1] and arr[i] < arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = len(arr)-1\n    if i > l/2:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    if i == 0:\n        return True\n    if arr[i] <= arr[(i - 1) / 2]:\n        return False\n    return check_min_heap_helper(arr, (i - 1) / 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    \n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    \n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if i == 1:\n        return arr[i] <= arr[i//2]\n    if arr[i] <= arr[i//2]:\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    # if the parent of the node is less than the node, then it is not a min heap\n    if (i <= (n // 2) - 1) and (arr[i] > arr[i * 2 + 1]):\n        return False\n    elif (i <= (n // 2) - 1) and (i * 2 + 2 < n) and (arr[i] > arr[i * 2 + 2]):\n        return False\n    elif (i <= (n // 2) - 1) and (i * 2 + 1 < n) and (i * 2 + 2 < n) and (arr[i] > arr[i * 2 + 1]):\n        return False\n    # if the parent of the node is greater than the node, then it is a min heap\n    elif (i <= (n // 2) - 1) and (arr[i] < arr[i * 2 + 1]):\n        return True\n    elif (i <= (n // 2) - 1) and (i * 2 + 2 < n) and (arr[i] < arr[i * 2 + 2]):\n        return True\n    elif (i <= (n // 2) - 1) and (i * 2 + 1 < n) and (i * 2 + 2 < n) and (arr[i] < arr[i * 2 + 1]):\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # create a list of two numbers,\n    # the first one is zero, the second is one.\n    # jacobsthal numbers are the sum of the previous 2 numbers\n    # if the current is divisible by 2, then add jacobsthal to the 2 previous jacobsthal numbers\n    # else add jacobsthal to the last jacobsthal number and add the last jacobsthal to the previous jacobsthal number\n    # jacobsthal number for n = 1 is the sum of 0 and 1\n    # jacobsthal number for n = 2 is the sum of 1 and 1\n    # jacobsthal number for n = 3 is the sum of 1 and 3\n    # jacobsthal number for n = 4 is the sum of 3 and 1\n    # jacobsthal number for n = 5 is the sum of 3 and 5\n    # jacobsthal number for n = 6 is the sum of 5 and 3\n    # jacobsthal number for n = 7 is the sum of 5 and 7\n    # jacobsthal number for n = 8 is the sum of 7 and 5\n    # jacobsthal number for n = 9 is the sum of 7 and 9\n    # jacobsthal number for n = 10 is the sum of 9 and 7\n    # jacobsthal number for n = 11 is the sum of 9 and 11\n    # jacobsthal number for n = 12 is the sum of 11 and 9\n    # jacobsthal number for n = 13 is the sum of 11 and 13\n    # jacobsthal number for n = 14 is the sum of 13 and 11\n    # jacobsthal number for n = 15 is the sum of 13 and 15\n    # jacobsthal number for n = 16 is the sum of 15 and 13\n    # jacobsthal number for n = 17 is the sum of 15 and 17\n    # jacobsthal number for n = 18 is the sum of 17 and 15\n    # jacobsthal number for n = 19 is the sum of 17 and 19\n    # jacobsthal number for n = 20 is the sum of 19 and 17\n    # jacobsthal number for n = 21 is the sum of 19 and 21\n    # jacobsthal number for n = 22 is the sum of 21 and 19\n    # jacobsthal number for n = 23 is the sum of 21 and 23\n    # jacobsthal number for n = 24 is the sum of 23 and 21\n    # jacobsthal number for n = 25 is the sum of 23 and 25\n    # jacobsthal number for n = 26 is the sum of 25 and 23\n    # jacobsthal number for n = 27 is the sum of 25 and 27\n    # jacobsthal number for n = 28 is the sum of 27 and 25\n    # jacobsthal number for n = 29 is the sum of 27 and 29\n    # jacobsthal number for n = 30 is the sum of 29 and 27\n    # jacobsthal number for n = 31 is the sum of 29 and 31\n    # jacobsthal number for n = 32 is the sum of 31 and 29\n    # jacobsthal number for n = 33 is the sum of 31 and 33\n    # jacobsthal number for n = 34 is the sum of 33 and 31\n    # jacobsthal number for n = 35 is the sum of 33 and 35\n    # jacobsthal number for n = 36 is the sum of 35 and 33\n    # jacobsthal number for n = 37 is the sum of 35 and 37\n    # jacobsthal number for n = 38 is the sum of 37 and 35\n    # jacobsthal number for n = 39 is the sum of 37 and 39\n    # jacobsthal number for n = 40 is the sum of 39 and 37\n    # jacobsthal number for n = 41 is the sum of 39 and 41\n    # jacobsthal number for n = 42 is the sum of 41 and 39\n    # jacobsthal number for n = 43 is the sum of 41 and 43\n    # jacobsthal number for n = 44 is the sum of 43 and 41\n    # jacobsthal number for n = 45 is the sum of 43 and 45\n    # jacobsthal number for n = 46 is the sum of 45 and 43\n    # jacobsthal number for n = 47 is the sum of 45 and 47\n    # jacobsthal number for n = 48 is the sum of 47 and 45\n    # jacobsthal number for n = 49 is the sum of 47 and 49\n    # jacobsthal number for n = 50 is the sum of 49 and 47\n    # jacobsthal number for n = 51 is the sum of 49 and 51\n    # jacobsthal number for n = 52 is the sum of 51 and 49\n    # jacobsthal number for n = 53 is the sum of 51 and 53\n    # jacobsthal number for n = 54 is the sum of 53 and 51\n    # jacobsthal number for n = 55 is the sum of 53 and 55\n    # jacobsthal number for n = 56 is the sum of 55 and 53\n    # jacobsthal number for n = 57 is the sum of 55 and 57\n    # jacobsthal number for n = 58 is the sum of 57 and 55\n    # jacobsthal number for n = 59 is the sum of 57 and 59\n    # jacobsthal number for n = 60 is the sum of 59 and 57\n    # jacobsthal number for n = 61 is the sum of 59 and 61\n    # jacobsthal number for n = 62 is the sum of 61 and 59\n    # jacobsthal number for n = 63 is the sum of 61 and 63\n    # jacobsthal number for n = 64 is the sum of 63 and 61\n    # jacobsthal number for n = 65 is the sum of 63 and 65\n    # jacobsthal number for n = 66 is the sum of 65 and 63\n    # jacobsthal number for n = 67 is the sum of 65 and 67\n    # jacobsthal number for n = 68 is the sum of 67 and 65\n    # jacobsthal number for n = 69 is the sum of 67 and 69\n    # jacobsthal number for n = 70 is the sum of 69 and 67\n    # jacobsthal number for n = 71 is the sum of 69 and 71\n    # jacobsthal number for n = 72 is the sum of 71 and 69\n    # jacobsthal number for n = 73 is the sum of 71 and 73\n    # jacobsthal number for n = 74 is the sum of 73 and 71\n    # jacobsthal number for n = 75 is the sum of 73 and 75\n    # jacobsthal number for n = 76 is the sum of 75 and 73\n    # jacobsthal number for n = 77 is the sum of 75 and 77\n    # jacobsthal number for n = 78 is the sum of 77 and 75\n    # jacobsthal number for n = 79 is the sum of 77 and 79\n    # jacobsthal number for n = 80 is the sum of 79 and 77\n    # jacobsthal number for n = 81 is the sum of 79 and 81\n    # jacobsthal number for n = 82 is the sum of 81 and 79\n    # jacobsthal number for n = 83 is the sum of 81 and 83\n    # jacobsthal number for n = 84 is the sum of 83 and 81\n    # jacobsthal number for n = 85 is the sum of 83 and 85\n    # jacobsthal number for n = 86 is the sum of 85 and 83\n    # jacobsthal number for n = 87 is the sum of 85 and 87\n    # jacobsthal number for n = 88 is the sum of 87 and 85\n    # jacobsthal number for n = 89 is the sum of 87 and 89\n    # jacobsthal number for n = 90 is the sum of 89 and 87\n    # jacobsthal number for n = 91 is the sum of 89 and 91\n    # jacobsthal number for n = 92 is the sum of 91 and 89\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = [0, 1]\n    if n < len(a):\n        return a[n]\n    else:\n        for i in range(len(a), n + 1):\n            a.append(a[i - 1] + a[i - 2])\n        return a[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #List of jacobsthal numbers \n    jacobsthal_nums = [0, 1]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 1:\n        return n\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n        \ndef jacobsthal_loop(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 1:\n        return n\n    else:\n        a, b = 1, 1\n        for i in range(n - 1):\n            a, b = b, a + b\n        return b\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return jacobsthal_num(n-3) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    result = 1\n    # Fibonacci numbers\n    F = [0,1]\n    # Check if n is even and n>=4\n    if n%2 == 0 and n>=4:\n        # Find a^2+b^2 = c^2\n        a = 1\n        b = 1\n        c = 0\n        p = 1\n        while p<n:\n            p = a+b\n            c = a\n            a = b\n            b = p\n        # Find a^2-b^2 = c^2\n        a = 1\n        b = 1\n        c = 0\n        p = 1\n        while p<n:\n            p = a+b\n            c = -b\n            a = b\n            b = p\n        # If c is integer, then jacobsthal_num(n) = jacobsthal_num(n-2)^2 + 2*jacobsthal_num(n-2)\n        if c%2 == 0:\n            result = (result*c) % n\n    # Find jacobsthal_num(n) = jacobsthal_num(n-1)^2 + jacobsthal_num(n-1)\n    else:\n        for i in xrange(2,n+1):\n            # F[i] = F[i-1]^2 + F[i-1]\n            result = (result*F[i-1])%n\n            # If i is even, then remove the last digit of the number\n            if i%2 == 0:\n                result = (result*F[i/2])%n\n            # If i is odd, then add the last digit of the number\n            else:\n                result = (result*i)%n\n    return result\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    # 1. Write a function that finds the nth jacobsthal number. \n    \n    # 2. Find the jacobsthal numbers less than n.\n    \n    # 3. Return the nth jacobsthal number.\n    \n    # 4. Write a function that returns nth jacobsthal number.\n    \n    # 5. Find the lucas numbers less than n.\n    \n    # 6. Return the nth jacobsthal number.\n    \n    # 7. Write a function that returns nth jacobsthal number.\n    \n    # 8. Find the fibonacci numbers less than n.\n    \n    # 9. Return the nth jacobsthal number.\n    \n    # 10. Write a function that returns nth jacobsthal number.\n    \n    # 11. Find the fibonacci numbers less than n.\n    \n    # 12. Return the nth jacobsthal number.\n    \n    # 13. Write a function that returns nth jacobsthal number.\n    \n    # 14. Find the fibonacci numbers less than n.\n    \n    # 15. Return the nth jacobsthal number.\n    \n    # 16. Write a function that returns nth jacobsthal number.\n    \n    # 17. Find the fibonacci numbers less than n.\n    \n    # 18. Return the nth jacobsthal number.\n    \n    # 19. Write a function that returns nth jacobsthal number.\n    \n    # 20. Find the fibonacci numbers less than n.\n    \n    # 21. Return the nth jacobsthal number.\n    \n    # 22. Write a function that returns nth jacobsthal number.\n    \n    # 23. Find the fibonacci numbers less than n.\n    \n    # 24. Return the nth jacobsthal number.\n    \n    # 25. Write a function that returns nth jacobsthal number.\n    \n    # 26. Find the fibonacci numbers less than n.\n    \n    # 27. Return the nth jacobsthal number.\n    \n    # 28. Write a function that returns nth jacobsthal number.\n    \n    # 29. Find the fibonacci numbers less than n.\n    \n    # 30. Return the nth jacobsthal number.\n    \n    # 31. Write a function that returns nth jacobsthal number.\n    \n    # 32. Find the fibonacci numbers less than n.\n    \n    # 33. Return the nth jacobsthal number.\n    \n    # 34. Write a function that returns nth jacobsthal number.\n    \n    # 35. Find the fibonacci numbers less than n.\n    \n    # 36. Return the nth jacobsthal number.\n    \n    # 37. Write a function that returns nth jacobsthal number.\n    \n    # 38. Find the fibonacci numbers less than n.\n    \n    # 39. Return the nth jacobsthal number.\n    \n    # 40. Write a function that returns nth jacobsthal number.\n    \n    # 41. Find the fibonacci numbers less than n.\n    \n    # 42. Return the nth jacobsthal number.\n    \n    # 43. Write a function that returns nth jacobsthal number.\n    \n    # 44. Find the fibonacci numbers less than n.\n    \n    # 45. Return the nth jacobsthal number.\n    \n    # 46. Write a function that returns nth jacobsthal number.\n    \n    # 47. Find the fibonacci numbers less than n.\n    \n    # 48. Return the nth jacobsthal number.\n    \n    # 49. Write a function that returns nth jacobsthal number.\n    \n    # 50. Find the fibonacci numbers less than n.\n    \n    # 51. Return the nth jacobsthal number.\n    \n    # 52. Write a function that returns nth jacobsthal number.\n    \n    # 53. Find the fibonacci numbers less than n.\n    \n    # 54. Return the nth jacobsthal number.\n    \n    # 55. Write a function that returns nth jacobsthal number.\n    \n    # 56. Find the fibonacci numbers less than n.\n    \n    # 57. Return the nth jacobsthal number.\n    \n    # 58. Write a function that returns nth jacobsthal number.\n    \n    # 59. Find the fibonacci numbers less than n.\n    \n    # 60. Return the nth jacobsthal number.\n    \n    # 61. Write a function that returns nth jacobsthal number.\n    \n    # 62. Find the fibonacci numbers less than n.\n    \n    # 63. Return the nth jacobsthal number.\n    \n    # 64. Write a function that returns nth jacobsthal number.\n    \n    # 65. Find the fibonacci numbers less than n.\n    \n    # 66. Return the nth jacobsthal number.\n    \n    # 67. Write a function that returns nth jacobsthal number.\n    \n    # 68. Find the fibonacci numbers less than n.\n    \n    # 69. Return the nth jacobsthal number.\n    \n    # 70. Write a function that returns nth jacobsthal number.\n    \n    # 71. Find the fibonacci numbers less than n.\n    \n    # 72. Return the nth jacobsthal number.\n    \n    # 73. Write a function that returns nth jacobsthal number.\n    \n    # 74. Find the fibonacci numbers less than n.\n    \n    # 75. Return the nth jacobsthal number.\n    \n    # 76. Write a function that returns nth jacobsthal number.\n    \n    # 77. Find the fibonacci numbers less than n.\n    \n    # 78. Return the nth jacobsthal number.\n    \n    # 79. Write a function that returns nth jacobsthal number.\n    \n    # 80. Find the fibonacci numbers less than n.\n    \n    # 81. Return the nth jacobsthal number.\n    \n    # 82. Write a function that returns nth jacobsthal number.\n    \n    # 83. Find the fibonacci numbers less than n.\n    \n    # 84. Return the nth jacobsthal number.\n    \n    # 85. Write a function that returns nth jacobsthal number.\n    \n    # 86. Find the fibonacci numbers less than n.\n    \n    # 87. Return the nth jacobsthal number.\n    \n    # 88. Write a function that returns nth jacobsthal number.\n    \n    # 89. Find the fibonacci numbers less than n.\n    \n    # 90. Return the nth jacobsthal number.\n    \n    # 91. Write a function that returns nth jacobsthal number.\n    \n    # 92. Find the fibonacci numbers less than n.\n    \n    # 93. Return the nth jacobsthal number.\n    \n    # 94. Write a function that returns nth jacobsthal number.\n    \n    # 95. Find the fibonacci numbers less than n.\n    \n    # 96. Return the nth jacobsthal number.\n    \n    # 97. Write a function that returns nth jacobsthal number.\n    \n    # 98. Find the fibonacci numbers less than n.\n    \n    # 99. Return the nth jacobsthal number.\n    \n    # 100. Write a function that returns nth jacobsthal number.\n    \n    # 101. Find the fibonacci numbers less than n.\n    \n    # 102. Return the nth jacobsthal number.\n    \n    # 103. Write a function that returns nth jacobsthal number.\n    \n    # 104. Find the fibonacci numbers less than n.\n    \n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return _jacobsthal_num(n)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    from fractions import Fraction\n    ans=0\n    i=1\n    while True:\n        if i==1:\n            ans=1\n        elif i==2:\n            ans=1\n        elif i==3:\n            ans=2\n        elif i==4:\n            ans=4\n        elif i==5:\n            ans=3\n        elif i==6:\n            ans=7\n        elif i==7:\n            ans=13\n        elif i==8:\n            ans=31\n        elif i==9:\n            ans=73\n        elif i==10:\n            ans=127\n        elif i==11:\n            ans=281\n        elif i==12:\n            ans=610\n        elif i==13:\n            ans=1273\n        elif i==14:\n            ans=2413\n        elif i==15:\n            ans=3465\n        elif i==16:\n            ans=4181\n        elif i==17:\n            ans=6465\n        elif i==18:\n            ans=9233\n        elif i==19:\n            ans=12609\n        elif i==20:\n            ans=19227\n        elif i==21:\n            ans=28657\n        elif i==22:\n            ans=37189\n        elif i==23:\n            ans=5661\n        elif i==24:\n            ans=7417\n        elif i==25:\n            ans=10977\n        elif i==26:\n            ans=14847\n        elif i==27:\n            ans=22377\n        elif i==28:\n            ans=29693\n        elif i==29:\n            ans=38391\n        elif i==30:\n            ans=55443\n        elif i==31:\n            ans=74327\n        elif i==32:\n            ans=96973\n        elif i==33:\n            ans=124553\n        elif i==34:\n            ans=174025\n        elif i==35:\n            ans=223755\n        elif i==36:\n            ans=291259\n        elif i==37:\n            ans=375623\n        elif i==38:\n            ans=546689\n        elif i==39:\n            ans=762423\n        elif i==40:\n            ans=907409\n        elif i==41:\n            ans=108833\n        elif i==42:\n            ans=1259141\n        elif i==43:\n            ans=155112\n        elif i==44:\n            ans=169875\n        elif i==45:\n            ans=203233\n        elif i==46:\n            ans=250253\n        elif i==47:\n            ans=307405\n        elif i==48:\n            ans=363715\n        elif i==49:\n            ans=421087\n        elif i==50:\n            ans=483695\n        elif i==51:\n            ans=543739\n        elif i==52:\n            ans=608938\n        elif i==53:\n            ans=679425\n        elif i==54:\n            ans=755043\n        elif i==55:\n            ans=844181\n        elif i==56:\n            ans=932985\n        elif i==57:\n            ans=1015969\n        elif i==58:\n            ans=1103277\n        elif i==59:\n            ans=1268137\n        elif i==60:\n            ans=1365843\n        elif i==61:\n            ans=1484871\n        elif i==62:\n            ans=1710337\n        elif i==63:\n            ans=1934083\n        elif i==64:\n            ans=2233295\n        elif i==65:\n            ans=252285\n        elif i==66:\n            ans=302451\n        elif i==67:\n            ans=383949\n        elif i==68:\n            ans=460041\n        elif i==69:\n            ans=521539\n        elif i==70:\n            ans=591753\n        elif i==71:\n            ans=652283\n        elif i==72:\n            ans=726251\n        elif i==73:\n            ans=810795\n        elif i==74:\n            ans=89934\n        elif i==75:\n            ans=978927\n        elif i==76:\n            ans=1047351\n        elif i==77:\n            ans=1097049\n        elif i==78:\n            ans=1209337\n        elif i==79:\n            ans=1363253\n        elif i==80:\n            ans=1534297\n        elif i==81:\n            ans=1678785\n        elif i==82:\n            ans=1935591\n        elif i==83:\n            ans=221759\n        elif i==84:\n            ans=248863\n        elif i==85:\n            ans=278911\n        elif i==86:\n            ans=331743\n        elif i==87:\n            ans=380447\n        elif i==88:\n            ans=448199\n        elif i==89:\n            ans=496937\n        elif i==90:\n            ans=570493\n        elif i==91:\n            ans=661477\n        elif i==92:\n            ans=748661\n        elif i==93:\n            ans=843465\n        elif i==94:\n            ans=951647\n        elif i==95:\n            ans=992981\n        elif i==96:\n            ans=1079015\n        elif i==97:\n            ans=1149139\n        elif i==98:\n            ans=1235299\n        elif i==99:\n            ans=134721\n        elif i==100:\n            ans=1537725\n        else:\n            ans=ans+1\n        i=i+1\n        if i==n:\n            return ans\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return test_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_list = []\n    for i in range(0, K):\n        min_k_list.append(min(test_list))\n        test_list.remove(min(test_list))\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return 'Invalid Input'\n    min_k_list = []\n    for i in range(K):\n        min_k_list.append(min(test_list))\n        test_list.remove(min(test_list))\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_val = None\n    min_list = []\n    for (val,k) in test_list:\n        if k <= K:\n            if min_val is None or val < min_val:\n                min_val = val\n                min_list = [val]\n            elif val == min_val:\n                min_list.append(val)\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # https://www.geeksforgeeks.org/python-sort-list-based-on-a-sublist/\n    def sort_list(unsorted_list, K):\n        '''\n        Write a function to sort a list based on a sublist. https://www.geeksforgeeks.org/python-sort-list-based-on-a-sublist/\n        '''\n        # https://www.geeksforgeeks.org/python-sort-list-based-on-a-sublist/\n        sub_list = []\n        for i in range(K):\n            min = unsorted_list[0]\n            for j in range(len(unsorted_list)):\n                if min > unsorted_list[j]:\n                    min = unsorted_list[j]\n                    index = j\n            sub_list.append(unsorted_list.pop(index))\n        return sub_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return -1\n    if K > len(test_list):\n        return -1\n    # set up some variables to track the minimum, minimum index, and the current minimum k elements\n    current_min = test_list[0][1]\n    current_min_index = 0\n    min_k = []\n    for i in range(K):\n        # compare the current element with the current min, if it is smaller, set it as the new min and update the current min index\n        if test_list[i][1] < current_min:\n            current_min = test_list[i][1]\n            current_min_index = i\n        # add the current element to the list of the k min elements\n        min_k.append(test_list[i])\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        raise Exception(\"K is greater than number of records.\")\n    if K == 0:\n        raise Exception(\"K cannot be zero.\")\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key=itemgetter(K))[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_records = []\n    for i in range(len(test_list)):\n        min_k_records.append(test_list[i][K])\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list or K > len(test_list):\n        raise ValueError\n    if K == 1:\n        return test_list[0]\n    start, end = 0, len(test_list) - 1\n    while end > 0:\n        min_idx = start\n        min_val = test_list[min_idx][K - 1]\n        for i in range(start, end):\n            if test_list[i][K - 1] < min_val:\n                min_idx = i\n                min_val = test_list[min_idx][K - 1]\n        test_list[start], test_list[min_idx] = test_list[min_idx], test_list[start]\n        start += 1\n        end -= 1\n    return test_list[0][:K]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if not l1 or not l2 or not l3:\n        return []\n    c1 = []\n    c2 = []\n    c3 = []\n    for i in range(0, len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            c1.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3:\n            c2.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2:\n            c3.append(l3[i])\n    return c1 + c2 + c3\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return False\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # We will use set to store the elements from all three lists\n    # We know that elements in both lists are unique\n    set1 = set(l1)\n    set2 = set(l2)\n    set3 = set(l3)\n    # We will use a dictionary to store the frequency of each element from l1, l2, l3\n    freq1 = {key:0 for key in set1}\n    freq2 = {key:0 for key in set2}\n    freq3 = {key:0 for key in set3}\n    # We will use three loops to update the dictionaries\n    # We want to use the elements from the first list for l1\n    for i in range(len(l1)):\n        if l1[i] in set1:\n            freq1[l1[i]] += 1\n    # We want to use the elements from the second list for l2\n    for i in range(len(l2)):\n        if l2[i] in set2:\n            freq2[l2[i]] += 1\n    # We want to use the elements from the third list for l3\n    for i in range(len(l3)):\n        if l3[i] in set3:\n            freq3[l3[i]] += 1\n    # We will use dictionary comprehension to produce a list of the elements with a count of how many times they appear in all three lists\n    return [key for key, value in freq1.items() if value == 3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return []\n    m = len(l1)\n    common = []\n    for i in range(m):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    for i in range(len(l1)):\n        if l1[i] not in l2:\n            l1[i] = None\n        if l1[i] not in l3:\n            l1[i] = None\n        if l2[i] not in l1:\n            l2[i] = None\n        if l3[i] not in l1:\n            l3[i] = None\n    return [x for x in l1 if x is not None]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1) & set(l2) & set(l3))\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    n = len(l1)\n    temp = []\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i == j and i == k:\n                    continue\n                elif l1[i] == l2[j] and l1[i] == l3[k]:\n                    temp.append(l1[i])\n    return temp\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    return list(set(l1).intersection(l2,l3))\n    \n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    temp = []\n    for l in l1:\n        for t in l2:\n            for q in l3:\n                if l == t == q:\n                    temp.append(l)\n    return temp\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # print(numbers)\n    if not numbers:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    assert isinstance(numbers, list)\n    if len(numbers) == 0:\n        return None\n    assert all([isinstance(i, int) for i in numbers])\n    if len(numbers) == 1:\n        return numbers[0]\n    min_num = min(numbers)\n    numbers.remove(min_num)\n    return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    if len(numbers) < 2:\n        return None\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        a = min(numbers)\n        numbers.remove(a)\n        b = min(numbers)\n        return b\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers)<2:\n        return\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    min1 = None\n    min2 = None\n    for number in numbers:\n        if min1 is None or number < min1:\n            min2 = min1\n            min1 = number\n        elif min2 is None or number < min2:\n            min2 = number\n    return min2\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(set(numbers))[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    second_smallest_num = None\n    second_smallest_num_index = None\n    for i in range(len(numbers)):\n        if second_smallest_num is None or numbers[i] < second_smallest_num:\n            second_smallest_num = numbers[i]\n            second_smallest_num_index = i\n    return second_smallest_num, second_smallest_num_index\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'.*(ab+)')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(\"ab*\",text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a+b\"\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #match the pattern: a+\n    if re.match('.*[ab]+.*', text):\n        return True\n    return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.match(r'(a*b)+', text)\n    if match:\n        print 'Match: ', match.group()\n    else:\n        print 'No match'\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # match the expression aa*\n    p = re.compile(r'a+b')\n    result = p.match(text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'a+b', text)\n    if match:\n        print(\"match\")\n    else:\n        print(\"no match\")\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'a+b', text)\n    return match\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) < 2:\n        return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # l = len(test_list)\n    # count = 0\n    # for i in xrange(l):\n    #     for j in xrange(i + 1, l):\n    #         if test_list[i] == test_list[j][::-1]:\n    #             count += 1\n    # return count\n    return len(set([test_list[i] for i in xrange(len(test_list)) for j in xrange(i + 1, len(test_list)) if test_list[i] == test_list[j][::-1]]))\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    num = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                num += 1\n    return num\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[len(test_list)-1-i]:\n            print \"reverse pairs: \", test_list[i], test_list[len(test_list)-1-i]\n        else:\n            continue\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 1:\n        return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if(test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for x in test_list:\n        if x[::-1] in test_list:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n    for each in test_list:\n        if each[::-1] in test_list:\n            result += 1\n    return result\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    cnt = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j][::-1] and i < j:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    list_len = len(test_list)\n    count = 0\n    for i in range(list_len - 1):\n        for j in range(i+1, list_len):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    # convert list to a dictionary\n    dictionary = {}\n    for item in list1:\n        if item in dictionary:\n            dictionary[item] += 1\n        else:\n            dictionary[item] = 1\n    \n    # convert dictionary to list of tuples\n    list2 = []\n    for key in dictionary:\n        list2.append((key, dictionary[key]))\n    return list2\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for x in list1:\n        if x not in result:\n            result[x] = 1\n        else:\n            result[x] += 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for each in list1:\n        dic[tuple(each)] = dic.get(tuple(each),0)+1\n    return dic\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for l in list1:\n        t = tuple(l)\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    mylist = []\n    count = []\n    for l in list1:\n        mylist.append(tuple(l))\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary = {}\n    for i in list1:\n        dictionary[tuple(i)] = list1.count(i)\n    return dictionary\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in result:\n            result[sublist] = result[sublist] + 1\n        else:\n            result[sublist] = 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    uniq_tups = []\n    for i in list1:\n        if tuple(i) not in uniq_tups:\n            uniq_tups.append(tuple(i))\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for item in list1:\n        if tuple(item) in dict:\n            dict[tuple(item)] += 1\n        else:\n            dict[tuple(item)] = 1\n    return dict\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.find('.')!= -1 and len(num) <= 15\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    if re.match(r'^[-+]?\\d*\\.?\\d*$', num):\n        return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return re.match(r'^[-+]?[0-9]*\\.?[0-9]+$',num)\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) > 10:\n        return False\n    else:\n        for i in range(0,len(num)):\n            if not num[i] in '0123456789.00':\n                return False\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isnumeric() and num.split('.')[1] == '00'\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        return float(num)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    num = str(num)\n    if '.' in num:\n        digits = num.split('.')\n        if len(digits[1]) <= 2:\n            return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) > 1:\n        arr.sort()\n        if arr[-1] == arr[-2]:\n            return False\n        else:\n            return True\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    check = set(arr)\n    if len(check) == 1:\n        return True\n    return False\ndef unique_element2(arr):\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    uniq = set(arr)\n    return len(arr) == len(uniq)\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d={}\n    for i in arr:\n        if i in d:\n            return False\n        else:\n            d[i]=1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    s = set(arr)\n    if len(s)!= len(arr):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    if n == 1:\n        return True\n    else:\n        flag = 1\n        for i in xrange(n):\n            for j in xrange(i+1,n):\n                if arr[i] == arr[j]:\n                    flag = 0\n                    break\n            if flag == 1:\n                return True\n            else:\n                continue\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = [2, 3, 2, 4, 2, 6, 3]\n    if len(set(arr)) == 1:\n        print \"Unique Element present\"\n    else:\n        print \"Unique Element not present\"\n    \nunique_Element(arr)\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if not (31 == day_month_number(monthnum3)):\n            print '31 days'\n        else:\n            print '30 days'\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if not (30 == day_month_number(monthnum3)):\n            print '30 days'\n        else:\n            print '31 days'\n    elif monthnum3 == 2:\n        if not (28 == day_month_number(monthnum3)):\n            print '28 days'\n        else:\n            print '30 days'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return 'The Month Number is 31'\n    else:\n        return 'The Month Number is 30'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month = ['January','February','March','April','May','June','July','August','September','October','November','December']\n    if monthnum3>12 or monthnum3<1:\n        print 'The month number does not exist!!!'\n    else:\n        print 'The month number is :',month[monthnum3-1]\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # pass\n    if monthnum3 <= 12 and monthnum3 >= 1:\n        return '30'\n    elif monthnum3 <= 0 or monthnum3 > 12:\n        return 'invalid'\n    \n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print '31'\n    elif monthnum3 == 2:\n        print '28 or 29'\n    else:\n        print '30'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    print(monthnum3)\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    return ((monthnum3 % 4 == 0) and (monthnum3 % 100!= 0)) or (monthnum3 % 400 == 0)\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        if (monthnum3%2==0 and monthnum3>30) or (monthnum3%2==1 and monthnum3<30):\n            print(\"Invalid month number. The month number must be greater than 30 and even.\")\n            return\n    elif monthnum3==2:\n        if (monthnum3%2==0 and monthnum3>28) or (monthnum3%2==1 and monthnum3<28):\n            print(\"Invalid month number. The month number must be greater than 28 and even.\")\n            return\n    else:\n        if (monthnum3%2==0 and monthnum3>29) or (monthnum3%2==1 and monthnum3<29):\n            print(\"Invalid month number. The month number must be greater than 29 and even.\")\n            return\n    return\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"%d is a leap year\" %monthnum3)\n    else:\n        print(\"%d is not a leap year\" %monthnum3)\n        \ndef check_yearnumber_number(yearnum3):\n    '''\n    Write a function to check whether the given year number contains 365 days or not.\n    '''\n    if (yearnum3 % 4 == 0 and yearnum3 % 100!= 0) or yearnum3 % 400 == 0:\n        print(\"%d is a leap year\" %yearnum3)\n    else:\n        print(\"%d is not a leap year\" %yearnum3)\n        \ndef check_yearnumber_date(yearnum3,monthnum3,daynum3):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    month31=[1,3,5,7,8,10,12]\n    if (yearnum3 % 4 == 0 and yearnum3 % 100!= 0) or yearnum3 % 400 == 0:\n        month30=[4,6,9,11]\n    else:\n        month30=[2,4,6,8,9,11]\n    if yearnum3 < 0 or monthnum3 < 1 or monthnum3 > 12 or daynum3 < 1 or daynum3 > 31 or (monthnum3 in month31 and daynum3 > 30) or (monthnum3 in month30 and daynum3 > 29):\n        print(\"Invalid Date\")\n    else:\n        print(\"Date is valid\")\n        \ndef check_leapyear_date(yearnum3,monthnum3,daynum3):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (yearnum3 % 4 == 0 and yearnum3 % 100!= 0) or yearnum3 % 400 == 0:\n        month31=[1,3,5,7,8,10,12]\n        if (yearnum3 % 4 == 0 and yearnum3 % 100!= 0) or yearnum3 % 400 == 0:\n            month30=[4,6,9,11]\n            if (monthnum3 in month31 and daynum3 > 30) or (monthnum3 in month30 and daynum3 > 29):\n                print(\"Invalid Date\")\n            else:\n                print(\"Date is valid\")\n        else:\n            if (monthnum3 in month31 and daynum3 > 30) or (monthnum3 in month30 and daynum3 > 29):\n                print(\"Invalid Date\")\n            else:\n                print(\"Date is valid\")\n    else:\n        if (monthnum3 in month31 and daynum3 > 30) or (monthnum3 in month30 and daynum3 > 29):\n            print(\"Invalid Date\")\n        else:\n            print(\"Date is valid\")\n            \ndef check_monthdate_number(monthnum3,daynum3):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    month31=[1,3,5,7,8,10,12]\n    if (monthnum3 % 4 == 0 and monthnum3 % 100!= 0) or monthnum3 % 400 == 0:\n        month30=[4,6,9,11]\n    else:\n        month30=[2,4,6,8,9,11]\n    if (monthnum3 in month31 and daynum3 > 30) or (monthnum3 in month30 and daynum3 > 29):\n        print(\"Invalid Date\")\n    else:\n        print(\"Date is valid\")\n        \ndef check_date_valid(yearnum3,monthnum3,daynum3):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (yearnum3 < 0 or monthnum3 < 1 or monthnum3 > 12 or daynum3 < 1 or daynum3 > 31) or (monthnum3 in [4,6,9,11] and daynum3 > 30) or (monthnum3 in [2,4,6,8,9,11] and daynum3 > 29) or (monthnum3 == 2 and daynum3 > 28):\n        print(\"Invalid Date\")\n    else:\n        print(\"Date is valid\")\n        \ndef check_date_valid(yearnum3,monthnum3,daynum3):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (yearnum3 < 0 or monthnum3 < 1 or monthnum3 > 12 or daynum3 < 1 or daynum3 > 31) or (monthnum3 in [4,6,9,11] and daynum3 > 30) or (monthnum3 in [2,4,6,8,9,11] and daynum3 > 29) or (monthnum3 == 2 and daynum3 > 28):\n        print(\"Invalid Date\")\n    else:\n        print(\"Date is valid\")\n        \ndef check_date_valid(yearnum3,monthnum3,daynum3):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (yearnum3 < 0 or monthnum3 < 1 or monthnum3 > 12 or daynum3 < 1 or daynum3 > 31) or (monthnum3 in [4,6,9,11] and daynum3 > 30) or (monthnum3 in [2,4,6,8,9,11] and daynum3 > 29) or (monthnum3 == 2 and daynum3 > 28):\n        print(\"Invalid Date\")\n    else:\n        print(\"Date is valid\")\n        \ndef check_date_valid(yearnum3,monthnum3,daynum3):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (yearnum3 < 0 or monthnum3 < 1 or monthnum3 > 12 or daynum3 < 1 or daynum3 > 31) or (monthnum3 in [4,6,9,11] and daynum3 > 30) or (monthnum3 in [2,4,6,8,9,11] and daynum3 > 29) or (monthnum3 == 2 and daynum3 > 28):\n        print(\"Invalid Date\")\n    else:\n        print(\"Date is valid\")\n        \ndef check_date_valid(yearnum3,monthnum3,daynum3):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (yearnum3 < 0 or monthnum3 < 1 or monthnum3 > 12 or daynum3 < 1 or daynum3 > 31) or (monthnum3 in [4,6,9,11] and daynum3 > 30) or (monthnum3 in [2,4,6,8,9,11] and daynum3 > 29) or (monthnum3 == 2 and daynum3 > 28):\n        print(\"Invalid Date\")\n    else:\n        print(\"Date is valid\")\n        \ndef check_date_valid(yearnum3,monthnum3,daynum3):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (yearnum3 < 0 or monthnum3 < 1 or monthnum3 > 12 or daynum3 < 1 or daynum3 > 31) or (monthnum3 in [4,6,9,11] and daynum3 > 30) or (monthnum3 in [2,4,6,8,9,11] and daynum3 > 29) or (monthnum3 == 2 and daynum3 > 28):\n        print(\"Invalid Date\")\n    else:\n        print(\"Date is valid\")\n        \ndef check_date_valid(yearnum3,monthnum3,daynum3):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (yearnum3 < 0 or monthnum3 < 1 or monthnum3 > 12 or daynum3 < 1 or daynum3 > 31) or (monthnum3 in [4,6,9,11] and daynum3 > 30) or (monthnum3 in [2,4,6,8,9,11] and daynum3 > 29) or (monthnum3 == 2 and daynum3 > 28):\n        print(\"Invalid Date\")\n    else:\n        print(\"Date is vali"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    pairs = []\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    i = 0\n    j = n-1\n    while i < j:\n        diff = arr[i] + arr[j]\n        if abs(arr[i]-arr[j]) < diff:\n            diff = abs(arr[i]-arr[j])\n        i += 1\n        j -= 1\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = sys.maxint\n    for i in range(n-1):\n        for j in range(i+1,n):\n            min_diff = min(min_diff, abs(arr[i]-arr[j]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = arr[1] - arr[0]\n    for i in range(1,n-1):\n        diff = min(diff, arr[i+1] - arr[i])\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    diff = arr[n-1] - arr[0]\n    for i in range(1,n):\n        diff = min(diff, arr[i] - arr[i-1])\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # if n < 3:\n    #     return\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 999999999\n    for i in range(n):\n        for j in range(i + 1,n):\n            min_diff = min(min_diff, abs(arr[i] - arr[j]))\n    return min_diff\n    "
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    min_diff = arr[1] - arr[0]\n    for i in range(n): \n        for j in range(i + 1, n): \n            min_diff = min(min_diff, arr[j] - arr[i]) \n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    res = arr[n-1] - arr[0]\n    for i in range(1,n):\n        res = min(res,arr[i] - arr[i-1])\n    return res\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    i = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            i += 1\n    return i\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    import re\n    number_ctr = len(re.findall(r'\\d',str))\n    return number_ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\ndef get_unique_words(str):\n    '''\n    Write a python function to count number of unique words in a given string.\n    '''\n    return len(str.split())\ndef get_no_vowels(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)):\n        if str[i] in \"aeiouAEIOU\":\n            count += 1\n    return count\ndef change_all(str,char_to_replace,replace_with):\n    '''\n    Write a python function to replace all occurrences of a character in a string with another character.\n    '''\n    return str.replace(char_to_replace,replace_with)\ndef is_perfect(num):\n    '''\n    Write a python function to check if a given number is a perfect number.\n    '''\n    sum = 0\n    for i in range(1,num):\n        if num % i == 0:\n            sum += i\n    return sum == num\ndef convert_to_binary(num):\n    '''\n    Write a python function to convert a given number to a binary number.\n    '''\n    count = 0\n    while num > 0:\n        count += 1\n        num //= 2\n    return count\ndef find_max_consecutive_ones(str):\n    '''\n    Write a python function to find max consecutive ones in a string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(0,len(str)):\n        if str[i] == '1':\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n    if count > max_count:\n        max_count = count\n    return max_count\ndef convert_to_base_ten(num,base):\n    '''\n    Write a python function to convert a given number to a given base.\n    '''\n    new_num = 0\n    for i in range(0,len(num)):\n        new_num += int(num[i])*int(base)**(len(num)-i-1)\n    return new_num\ndef roman_to_int(str):\n    '''\n    Write a python function to convert a given roman numeral to a integer.\n    '''\n    dict = {\"I\":1,\"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n    return dict[str[len(str)-1]]\ndef convert_to_roman(num):\n    '''\n    Write a python function to convert a given integer to a roman numeral.\n    '''\n    dict = {\"I\":1,\"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n    if num <= 0:\n        return 0\n    elif num == 1:\n        return \"I\"\n    else:\n        remainder = num % 10\n        if remainder == 4:\n            return \"IV\"\n        elif remainder == 9:\n            return \"IX\"\n        else:\n            return dict[str(num//10*10)[len(str(num//10*10))-1]] + convert_to_roman(num % 10)\ndef count_vowels_vowels(str):\n    '''\n    Write a python function to count number of vowels and vowels in a string.\n    '''\n    vowels = 0\n    consonants = 0\n    for i in range(0,len(str)):\n        if str[i] in \"aeiouAEIOU\":\n            vowels += 1\n        elif str[i] not in \"aeiouAEIOU\":\n            consonants += 1\n    return {'vowels':vowels,'consonants':consonants}\ndef count_vowels(str):\n    '''\n    Write a python function to count number of vowels in a string.\n    '''\n    vowels = 0\n    for i in range(0,len(str)):\n        if str[i] in \"aeiouAEIOU\":\n            vowels += 1\n    return vowels\ndef count_consonants(str):\n    '''\n    Write a python function to count number of consonants in a string.\n    '''\n    consonants = 0\n    for i in range(0,len(str)):\n        if str[i] not in \"aeiouAEIOU\":\n            consonants += 1\n    return consonants\ndef is_balanced(str):\n    '''\n    Write a python function to check if a given string is balanced.\n    '''\n    stack = []\n    for i in range(0,len(str)):\n        if str[i] in \"([{\":\n            stack.append(str[i])\n        elif len(stack) > 0 and (str[i] == ')' and stack[len(stack)-1] == '(') or (str[i] == ']' and stack[len(stack)-1] == '[') or (str[i] == '}' and stack[len(stack)-1] == '{'):\n            stack.pop()\n        else:\n            return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef get_lcm(num1,num2):\n    '''\n    Write a python function to find least common multiple of two numbers.\n    '''\n    num1 = abs(num1)\n    num2 = abs(num2)\n    while num2 > 0:\n        num2 //= 10\n    common = num1 * num2 // gcd(num1,num2)\n    return common\ndef get_lcm_list(num_list):\n    '''\n    Write a python function to find least common multiple of all the elements in a list.\n    '''\n    gcd = 1\n    for i in range(0,len(num_list)):\n        gcd = get_lcm(gcd,num_list[i])\n    return gcd\ndef check_permutation(str1,str2):\n    '''\n    Write a python function to check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    char_dict = {}\n    for i in range(0,len(str1)):\n        if str1[i] not in char_dict:\n            char_dict[str1[i]] = 1\n        else:\n            char_dict[str1[i]] += 1\n    for i in range(0,len(str2)):\n        if str2[i] in char_dict:\n            char_dict[str2[i]] -= 1\n            if char_dict[str2[i]] < 0:\n                return False\n        else:\n            return False\n    return True\ndef convert_to_pattern(str,k):\n    '''\n    Write a python function to convert a given string to a pattern.\n    '''\n    for i in range(0,len(str)-k):\n        if str[i:i+k] == str[i+k:i+2*k]:\n            str = str[:i] + \"x\" + str[i+k:]\n    return str\ndef is_palindrome(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    return str == str[::-1]\ndef encrypt_caesar(str,key):\n    '''\n    Write a python function to encrypt a given string using Caesar Cipher.\n    '''\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    new_str = \"\"\n    for i in range(0,len(str)):\n        if str[i].isalpha():\n            new_str += chr((ord(str[i]) - ord('a') + key) % 26 + ord('a'))\n        else:\n            new_str += str[i]\n    return new_str\ndef decrypt_caesar(str,key):\n    '''\n    Write a python function to decrypt a given string using Caesar Cipher.\n    '''\n    return encryp"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number=0\n    for i in str:\n        if i.isdigit():\n            number+=1\n    return number\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    m = n+1\n    k = 0\n    res = 0\n    while True:\n        res = k**m + k + 1\n        k += 1\n        if res > n:\n            break\n    return res\n    #print is_polite(10000)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n == 3: \n        return 2\n    if n == 4: \n        return 4\n    if n == 5: \n        return 7\n    if n == 6: \n        return 8\n    if n == 7: \n        return 11\n    if n == 8: \n        return 13\n    if n == 9: \n        return 17\n    if n == 10: \n        return 19\n    if n == 11: \n        return 22\n    if n == 12: \n        return 23\n    if n == 13: \n        return 29\n    if n == 14: \n        return 31\n    if n == 15: \n        return 37\n    if n == 16: \n        return 41\n    if n == 17: \n        return 43\n    if n == 18: \n        return 47\n    if n == 19: \n        return 53\n    if n == 20: \n        return 59\n    if n == 21: \n        return 61\n    if n == 22: \n        return 67\n    if n == 23: \n        return 71\n    if n == 24: \n        return 73\n    if n == 25: \n        return 79\n    if n == 26: \n        return 83\n    if n == 27: \n        return 89\n    if n == 28: \n        return 97\n    if n == 29: \n        return 101\n    if n == 30: \n        return 103\n    if n == 31: \n        return 107\n    if n == 32: \n        return 109\n    if n == 33: \n        return 113\n    if n == 34: \n        return 127\n    if n == 35: \n        return 131\n    if n == 36: \n        return 137\n    if n == 37: \n        return 139\n    if n == 38: \n        return 149\n    if n == 39: \n        return 151\n    if n == 40: \n        return 157\n    if n == 41: \n        return 163\n    if n == 42: \n        return 167\n    if n == 43: \n        return 169\n    if n == 44: \n        return 173\n    if n == 45: \n        return 179\n    if n == 46: \n        return 181\n    if n == 47: \n        return 191\n    if n == 48: \n        return 193\n    if n == 49: \n        return 197\n    if n == 50: \n        return 199\n    if n == 51: \n        return 203\n    if n == 52: \n        return 211\n    if n == 53: \n        return 223\n    if n == 54: \n        return 227\n    if n == 55: \n        return 229\n    if n == 56: \n        return 233\n    if n == 57: \n        return 239\n    if n == 58: \n        return 241\n    if n == 59: \n        return 251\n    if n == 60: \n        return 257\n    if n == 61: \n        return 263\n    if n == 62: \n        return 269\n    if n == 63: \n        return 271\n    if n == 64: \n        return 277\n    if n == 65: \n        return 281\n    if n == 66: \n        return 283\n    if n == 67: \n        return 293\n    if n == 68: \n        return 307\n    if n == 69: \n        return 311\n    if n == 70: \n        return 313\n    if n == 71: \n        return 317\n    if n == 72: \n        return 331\n    if n == 73: \n        return 337\n    if n == 74: \n        return 347\n    if n == 75: \n        return 349\n    if n == 76: \n        return 353\n    if n == 77: \n        return 359\n    if n == 78: \n        return 367\n    if n == 79: \n        return 373\n    if n == 80: \n        return 383\n    if n == 81: \n        return 389\n    if n == 82: \n        return 397\n    if n == 83: \n        return 401\n    if n == 84: \n        return 409\n    if n == 85: \n        return 419\n    if n == 86: \n        return 421\n    if n == 87: \n        return 431\n    if n == 88: \n        return 433\n    if n == 89: \n        return 439\n    if n == 90: \n        return 449\n    if n == 91: \n        return 457\n    if n == 92: \n        return 461\n    if n == 93: \n        return 473\n    if n == 94: \n        return 479\n    if n == 95: \n        return 487\n    if n == 96: \n        return 491\n    if n == 97: \n        return 499\n    if n == 98: \n        return 503\n    if n == 99: \n        return 509\n    if n == 100: \n        return 521\n    if n == 101: \n        return 523\n    if n == 102: \n        return 541\n    if n == 103: \n        return 547\n    if n == 104: \n        return 553\n    if n == 105: \n        return 559\n    if n == 106: \n        return 571\n    if n == 107: \n        return 577\n    if n == 108: \n        return 583\n    if n == 109: \n        return 591\n    if n == 110: \n        return 597\n    if n == 111: \n        return 607\n    if n == 112: \n        return 613\n    if n == 113: \n        return 617\n    if n == 114: \n        return 619\n    if n == 115: \n        return 631\n    if n == 116: \n        return 641\n    if n == 117: \n        return 643\n    if n == 118: \n        return 647\n    if n == 119: \n        return 653\n    if n == 120: \n        return 659\n    if n == 121: \n        return 673\n    if n == 122: \n        return 677\n    if n == 123: \n        return 683\n    if n == 124: \n        return 691\n    if n == 125: \n        return 701\n    if n == 126: \n        return 709\n    if n == 127: \n        return 719\n    if n == 128: \n        return 727\n    if n == 129: \n        return 733\n    if n == 130: \n        return 739\n    if n == 131: \n        return 743\n    if n == 132: \n        return 751\n    if n == 133: \n        return 757\n    if n == 134: \n        return 761\n    if n == 135: \n        return 769\n    if n == 136: \n        return 777\n    if n == 137: \n        return 783\n    if n == 138: \n        return 797\n    if n == 139: \n        return 803\n    if n == 140: \n        return 809\n    if n == 141: \n        return 817\n    if n == 142: \n        return 827\n    if n == 143: \n        return 833\n    if n == 144: \n        return 839\n    if n == 145: \n        return 843\n    if n == 146: \n        return 849\n    if n == 147: \n        return 853\n    if n == 148: \n        return 859\n    if n == 149: \n        return 863\n    if n == 150: \n        return 869\n    if n == 151: \n        return 877\n    if n == 152: \n        return 883\n    if n == 153: \n        return 889\n    if n == 154: \n        return 897\n    if n == 155: \n        return 903\n    if n == 156: \n        return 911\n    if n == 157: \n        return 919\n    if n == 158: \n        return 929\n    if n == 159: \n        return 937\n    if n == 160: \n        return 941\n    if n == 161: \n        retur"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    prime = []\n    p = 2\n    while len(prime) < n:\n        if all(p%i!= 0 for i in range(2,p)):\n            prime.append(p)\n        p+=1\n    return len(prime)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # base case\n    if n == 1: \n        return 1\n    # first calculate the n-th power\n    pow = n \n    while pow > 0: \n        if pow % 2 == 1: \n            return 1\n        pow = pow // 2\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = n + 1\n    a = 1\n    b = 0\n    c = 0\n    d = 0\n    while True:\n        a = a + 1\n        b = b + 1\n        c = c + 1\n        d = d + 1\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 == 0:\n            continue\n        if a % 2 == 0 and b % 2!= 0:\n            continue\n        if a % 2!= 0 and b % 2!= 0:\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            continue\n        if a % 2!= 0 and b % 2 ="
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 0\n    else:\n        return n*(n+1)/2\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return sum(range(1,n+1))\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n%2==0\ndef main():\n    polite_numbers = []\n    for n in range(1,100000):\n        if is_polite(n):\n            polite_numbers.append(n)\n    print len(polite_numbers)\n    #print polite_numbers\n    return\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return sum(divisors(n)) - n\n    \ndef is_prime(n): \n    '''\n    Write a function to find if a given number is prime or not\n    '''\n    if n < 2: \n        return False\n    elif n == 2: \n        return True\n    elif n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \ndef divisors(n): \n    '''\n    Write a function to find divisors of a number\n    '''\n    divisors = []\n    for i in range(1, n + 1): \n        if n % i == 0: \n            divisors.append(i)\n    return divisors\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    prime_set = set()\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i == 0:\n            prime_set.add(i)\n            prime_set.add(n/i)\n    prime_set.add(1)\n    return n in prime_set\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    if len(l1) <= 1:\n        return None\n    for i in xrange(0,len(l1)-1):\n        pair_list.append([l1[i],l1[i+1]])\n    return pair_list\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1, l1[1:])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    assert type(l1) == list, '%s is not a list' % l1\n    assert len(l1) > 1, '%s is a list of length 1' % l1\n    if len(l1) == 2:\n        return [[l1[0], l1[1]], [l1[1], l1[0]]]\n    else:\n        return [[l1[0], l1[1]]] + pair_wise(l1[1:])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    a = []\n    for i in range(0,len(l1)-1):\n        a.append([l1[i],l1[i+1]])\n    return a\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # using zip() and list comprehension\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1, l1[1:])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(0,len(l1)):\n        if i == 0:\n            l2.append([l1[i],l1[i+1]])\n        elif i == len(l1)-1:\n            l2.append([l1[i-1],l1[i]])\n        else:\n            l2.append([l1[i-1],l1[i],l1[i+1]])\n    return l2\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr_len = len(arr)\n    count = 0\n    for i in range(arr_len):\n        for j in range(i,arr_len):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    d={}\n    for i in arr:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    count=0\n    for i in d:\n        count+=d[i]\n        if (sum-i) in d:\n            count-=d[i]\n            count-=d[sum-i]\n            count+=d[i]\n    return count\n    \n    \n    \n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    n = len(arr)\n    for i in xrange(0, n-1):\n        for j in xrange(i+1, n):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if sum == arr[0] + arr[1]:\n            return 1\n        return 0\n    map = {}\n    for i in xrange(0, len(arr)):\n        temp = sum - arr[i]\n        if temp in map:\n            return map[temp] + 1\n        else:\n            map[arr[i]] = 1\n    return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    freq = {}\n    for i in arr:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    \n    count = 0\n    for i in freq:\n        if i <= sum:\n            count += freq[i]\n            \n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    \n    #print(d)\n    \n    count = 0\n    for k in d:\n        if (sum - k) in d:\n            #print(d[k], d[(sum - k)])\n            count += d[k] * d[(sum - k)]\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    table = {}\n    for i in arr:\n        if i in table:\n            table[i] += 1\n        else:\n            table[i] = 1\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if arr == None or len(arr) == 0:\n        return 0\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in xrange(n):\n        for j in xrange(i, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\ndef Check(inp):\n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    alpha=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for i in alpha:\n        if i in inp:\n            pass\n        else:\n            return False\n    return True\ndef Check_no_vowel(inp):\n    '''\n    Write a python function to check whether a string has all the vowels or not.\n    '''\n    vowels = ['A','E','I','O','U']\n    for i in inp:\n        if i in vowels:\n            pass\n        else:\n            return False\n    return True\ndef Divisible_by_9(inp):\n    '''\n    Write a python function to check whether a number is divisible by 9 or not.\n    '''\n    if inp%9==0:\n        return True\n    else:\n        return False\ndef Remove_vowels(inp):\n    '''\n    Write a python function to remove all the vowels from a string.\n    '''\n    vowels = ['A','E','I','O','U']\n    for i in inp:\n        if i in vowels:\n            pass\n        else:\n            return inp\ndef Flip_case(inp):\n    '''\n    Write a python function to flip the case of a string.\n    '''\n    for i in inp:\n        if i.isupper():\n            return inp.lower()\n        else:\n            return inp.upper()\ndef Check_palindrome(inp):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if inp==inp[::-1]:\n        return True\n    else:\n        return False\ndef Palindrome_permutation(inp):\n    '''\n    Write a python function to check whether a string is a permutation of a palindrome or not.\n    '''\n    li=[]\n    for i in inp:\n        if i in li:\n            li.remove(i)\n        else:\n            li.append(i)\n    if len(li)<2:\n        return True\n    else:\n        return False\ndef Count_characters(inp):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    return len(inp)\ndef Words_Count(inp):\n    '''\n    Write a python function to count the number of words in a string.\n    '''\n    li=inp.split()\n    return len(li)\ndef Check_permutation(inp1,inp2):\n    '''\n    Write a python function to check whether two strings are permutations of each other or not.\n    '''\n    if len(inp1)==len(inp2):\n        li1=[]\n        li2=[]\n        for i in inp1:\n            li1.append(i)\n        for i in inp2:\n            li2.append(i)\n        li1.sort()\n        li2.sort()\n        if li1==li2:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef Main():\n    '''\n    Write a python function to accept the input string and then display the function outputs.\n    '''\n    inp = input('Enter a string: ')\n    li=list(inp)\n    print(li)\n    print('1.To Count the number of characters in a string')\n    print('2.To Count the number of words in a string')\n    print('3.To Check whether a string is a permutation of a palindrome or not')\n    print('4.To Check whether a string is a pangram or not')\n    print('5.To Check whether a string has all the vowels or not')\n    print('6.To Check whether a string is divisible by 9 or not')\n    print('7.To Remove all the vowels from a string')\n    print('8.To flip the case of a string')\n    print('9.To check whether a string is a palindrome or not')\n    print('10.To check whether a string is a permutation of a palindrome or not')\n    print('11.To exit')\n    ch = int(input('Enter the choice: '))\n    if ch==1:\n        print(Count_characters(inp))\n    elif ch==2:\n        print(Words_Count(inp))\n    elif ch==3:\n        print(Check_palindrome(inp))\n    elif ch==4:\n        print(Check_permutation(inp,inp))\n    elif ch==5:\n        print(Check_no_vowel(inp))\n    elif ch==6:\n        print(Divisible_by_9(inp))\n    elif ch==7:\n        print(Remove_vowels(inp))\n    elif ch==8:\n        print(Flip_case(inp))\n    elif ch==9:\n        print(Check_palindrome(inp))\n    elif ch==10:\n        print(Palindrome_permutation(inp))\n    else:\n        print('Thanks for using this program')\n        return\n    while True:\n        choice = input('Do you want to continue: y/n ')\n        if choice.lower()=='y' or choice.lower()=='yes':\n            Main()\n        else:\n            print('Thanks for using this program')\n            return\nMain()\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [li1[i] for i in range(len(li1)) if li1[i] not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i ** 4 for i in range(1, n, 2)])\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(x**4 for x in range(1, n, 2))\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    ans = 0\n    for i in range(n):\n        if (i + 1) % 2!= 0:\n            ans = ans + (i + 1) ** 4\n    return ans\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return (n * (n + 1) * (2 * n + 1)) // 6 \n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <=0 :\n        return 0\n    return n**4 + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n==0:\n        return 0\n    else :\n        return n**4 + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #if n <= 0 : \n        #return 0 \n    #else :\n        #return (n*(n+1)*(2*n+1))/6 \n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        return 0\n    else : \n        return 4*n*n + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 1 : \n        return 1\n    else : \n        return n**4 + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)*(3*n+1) / 6\n    \ndef even_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    return n*(n+2)*(2*n+2)*(3*n+2) / 12\n    \ndef find_largest(l) : \n    '''\n    Write a python function to find the largest item in the list. \n    '''\n    if len(l) == 0 : \n        return None\n    else : \n        return max(l)\n        \ndef find_largest2(l) : \n    '''\n    Write a python function to find the second largest item in the list. \n    '''\n    if len(l) <= 1 : \n        return None\n    else : \n        max_v = max(l)\n        second_max_v = None\n        for i in l : \n            if i > max_v and i!= max_v : \n                second_max_v = i\n                break\n        return second_max_v\n    \ndef find_smallest(l) : \n    '''\n    Write a python function to find the smallest item in the list. \n    '''\n    if len(l) == 0 : \n        return None\n    else : \n        min_v = min(l)\n        return min_v\n        \ndef find_smallest2(l) : \n    '''\n    Write a python function to find the second smallest item in the list. \n    '''\n    if len(l) <= 1 : \n        return None\n    else : \n        min_v = min(l)\n        second_min_v = None\n        for i in l : \n            if i < min_v and i!= min_v : \n                second_min_v = i\n                break\n        return second_min_v\n    \ndef find_second_largest(l) : \n    '''\n    Write a python function to find the second largest item in the list. \n    '''\n    if len(l) <= 1 : \n        return None\n    else : \n        max_v = max(l)\n        second_max_v = None\n        for i in l : \n            if i > max_v and i!= max_v : \n                second_max_v = i\n                break\n        return second_max_v\n        \ndef find_second_largest2(l) : \n    '''\n    Write a python function to find the second largest item in the list. \n    '''\n    if len(l) <= 1 : \n        return None\n    else : \n        max_v = max(l)\n        second_max_v = None\n        for i in l : \n            if i > max_v and i!= max_v : \n                second_max_v = i\n                break\n        return second_max_v\n    \ndef find_third_largest(l) : \n    '''\n    Write a python function to find the third largest item in the list. \n    '''\n    if len(l) <= 2 : \n        return None\n    else : \n        max_v = max(l)\n        second_max_v = find_second_largest2(l)\n        third_max_v = None\n        for i in l : \n            if i > max_v and i!= max_v and i!= second_max_v : \n                third_max_v = i\n                break\n        return third_max_v\n        \ndef find_fourth_largest(l) : \n    '''\n    Write a python function to find the fourth largest item in the list. \n    '''\n    if len(l) <= 3 : \n        return None\n    else : \n        max_v = max(l)\n        second_max_v = find_second_largest2(l)\n        third_max_v = find_third_largest2(l)\n        fourth_max_v = None\n        for i in l : \n            if i > max_v and i!= max_v and i!= second_max_v and i!= third_max_v : \n                fourth_max_v = i\n                break\n        return fourth_max_v\n        \ndef find_nth_largest(l, n) : \n    '''\n    Write a python function to find the nth largest item in the list. \n    '''\n    if len(l) <= n : \n        return None\n    else : \n        max_v = max(l)\n        second_max_v = find_second_largest2(l)\n        third_max_v = find_third_largest2(l)\n        fourth_max_v = find_fourth_largest2(l)\n        nth_max_v = None\n        for i in l : \n            if i > max_v and i!= max_v and i!= second_max_v and i!= third_max_v and i!= fourth_max_v : \n                nth_max_v = i\n                break\n        return nth_max_v\n        \ndef find_nth_largest2(l, n) : \n    '''\n    Write a python function to find the nth largest item in the list. \n    '''\n    if len(l) <= n : \n        return None\n    else : \n        max_v = max(l)\n        second_max_v = find_second_largest2(l)\n        third_max_v = find_third_largest2(l)\n        fourth_max_v = find_fourth_largest2(l)\n        nth_max_v = None\n        for i in l : \n            if i > max_v and i!= max_v and i!= second_max_v and i!= third_max_v and i!= fourth_max_v : \n                nth_max_v = i\n                break\n        return nth_max_v\n        \ndef find_median(l) : \n    '''\n    Write a python function to find the median item in the list. \n    '''\n    if len(l) <= 1 : \n        return None\n    else : \n        sorted_list = sorted(l)\n        if len(sorted_list) % 2 == 0 : \n            median_v = (sorted_list[len(sorted_list) / 2] + sorted_list[len(sorted_list) / 2 - 1]) / 2\n        else : \n            median_v = sorted_list[len(sorted_list) / 2]\n        return median_v\n        \ndef find_median2(l) : \n    '''\n    Write a python function to find the median item in the list. \n    '''\n    if len(l) <= 1 : \n        return None\n    else : \n        sorted_list = sorted(l)\n        if len(sorted_list) % 2 == 0 : \n            median_v = (sorted_list[len(sorted_list) / 2] + sorted_list[len(sorted_list) / 2 - 1]) / 2\n        else : \n            median_v = sorted_list[len(sorted_list) / 2]\n        return median_v\n        \ndef find_mode(l) : \n    '''\n    Write a python function to find the mode item in the list. \n    '''\n    if len(l) <= 1 : \n        return None\n    else : \n        max_count = 1\n        mode_v = l[0]\n        for i in l : \n            count = 1\n            for j in l : \n                if i == j : \n                    count += 1\n            if count > max_count : \n                max_count = count\n                mode_v = i\n        return mode_v\n        \ndef find_mode2(l) : \n    '''\n    Write a python function to find the mode item in the list. \n    '''\n    if len(l) <= 1 : \n        return None\n    else : \n        max_count = 1\n        mode_v = l[0]\n        for i in l : \n            count = 1\n            for j in l : \n                if i == j : \n                    count += 1"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] in ['(', '{', '[']:\n            stack.append(exp[i])\n        else:\n            if exp[i] == ')':\n                if not stack or stack[-1]!= '(':\n                    return False\n                else:\n                    stack.pop()\n            elif exp[i] == '}':\n                if not stack or stack[-1]!= '{':\n                    return False\n                else:\n                    stack.pop()\n            elif exp[i] == ']':\n                if not stack or stack[-1]!= '[':\n                    return False\n                else:\n                    stack.pop()\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for c in exp:\n        if c in ['(', '{', '[']:\n            stack.append(c)\n        elif c in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            else:\n                if (stack[-1] == '(' and c == ')') or (stack[-1] == '{' and c == '}') or (stack[-1] == '[' and c == ']'):\n                    stack.pop()\n                else:\n                    return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp)==0:\n        return False\n    if exp[0]=='(' or exp[0]==')':\n        return False\n    stack=deque()\n    for i in range(len(exp)):\n        if exp[i]=='(':\n            stack.appendleft(exp[i])\n        elif exp[i]==')':\n            if len(stack)==0:\n                return False\n            else:\n                stack.pop()\n    return True if len(stack)==0 else False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return True if not stack else False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    stack = []\n    table = {')': '(', ']': '['}\n    for ch in exp:\n        if ch == '(' or ch == '[' or ch == '{':\n            stack.append(ch)\n        if ch == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == table[ch]:\n                stack.pop()\n            else:\n                return False\n        if ch == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == table[ch]:\n                stack.pop()\n            else:\n                return False\n        if ch == '}':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == table[ch]:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    d = deque()\n    open_list = ['(', '{', '[']\n    close_list = [')', '}', ']']\n    for i in exp:\n        if i in open_list:\n            d.appendleft(i)\n        elif i in close_list:\n            if d and open_list[close_list.index(i)] == d[0]:\n                d.popleft()\n            else:\n                return False\n    if d:\n        return False\n    else:\n        return True\n"
    }
]